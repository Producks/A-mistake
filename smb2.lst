	                            ; -----------------------------------------
	                            ; -----------------------------------------
	                            ;   Super Mario Bros. 2 (USA) disassembly
	                            ;     https://github.com/xkeeper0/smb2/
	                            ; -----------------------------------------
	                            ; -----------------------------------------
	                            
	                            .include "config.asm"
	                            .ignorenl
	                            
	                            ; ----------------------------------------
	                            ;  Super Mario Bros. 2 Disassembly Config
	                            ; ----------------------------------------
	                            ;
	                            ; By default, this repository is set up to build an identical copy
	                            ; of the original PRG0 revision of Super Mario Bros. 2 (USA).
	                            ;
	                            ; You can tweak the build settings below. To remove
	                            ; the default options, comment them out.
	                            ; (Changing the assignment to 0 won't work.)
	                            ;
	                            ; To enable them indefinitely, uncomment the definition.
	                            ;
	                            ; To enable them for a single build from the command line, use
	                            ; build -dFLAGNAME
	                            ; For example, to build a PRG1/Rev A ROM,
	                            ; build -dREV_A
	                            
	                            ; ----------------------------------------
	                            ; Compatibility fixes for the disassembly
	                            ; In some locations, Nintendo used absolute addressing instead of
	                            ; zero-page for addresses in the zero page.
	                            ; This flag adds in raw bytes to match the opcodes,
	                            ; as this assembler isn't capable of forcing absolute addressing for zp.
	                            ;
	                            ; Note that if you use this, you should probably use
	                            ; PRESERVE_FREE_SPACE, too.
	                            COMPATIBILITY = 1
	                            
	                            ; ----------------------------------------
	                            ; Preserve unused space.
	                            ; Free space in the original ROM will continue to be padded outwards,
	                            ; to the extent that it was in the original.
	                            ; Adding your own code should shrink the free space afterwards automatically.
	                            ;
	                            ; Turning this off will "squish" most banks and move free space
	                            ; within them to the end, making it easier to add your own code anywhere.
	                            ; ...but it might also cause problems if data gets relocated
	                            ; when it isn't properly pointed to.
	                            PRESERVE_UNUSED_SPACE = 1
	                            
	                            
	                            ; ----------------------------------------
	                            ; Build PRG1 / Revision A ROM.
	                            ;
	                            ; Differences:
	                            ;
	                            ; PRG-2-3: Fixes bug where killing one of the mini FryGuy enemies
	                            ;          while changing size from taking damage would cause
	                            ;          the enemy to do the "flip over and fall off" death
	                            ;          instead of the "puff of smoke" death, which caused
	                            ;          the "number of small bosses left" number to not
	                            ;          decrease. Which meant the boss fight never ended.
	                            ;          Hope you had an extra life and a second controller...
	                            ;
	                            ; PRG-E-F: Fixes a minor issue when played on PAL consoles where
	                            ;          remarkably poor luck would cause the bonus chance screen
	                            ;          to end up rendering completely invisibly due to an NMI hitting
	                            ;          at the worst possible time.
	                            ;          The fix just waits for an NMI cycle before doing its work.
	                            ;
	                            ; REV_A = 1
	                            
	                            ; ----------------------------------------
	                            ; Build Super Mario USA ROM.
	                            ;
	                            ; Note: This implicitly enables the Revision A fixes as well.
	                            ;
	                            ; Differences:
	                            ;
	                            ; PRG-0-1: Changes to the palette/nametable data for the title screen.
	                            ;
	                            ; PRG-2-3: "SUPER MARIO USA" added to the end of bank 3 in ASCII, which has
	                            ;          no impact on gameplay.
	                            ;
	                            ; SM_USA = 1
	                            
	                            IFDEF SM_USA
	                              REV_A = 1
	                            ENDIF
	                            
	                            
	                            ; ----------------------------------------
	                            ; Patches that fix bugs or glitches
	                            
	                            
	                            ; Show all 8 frames of CHR cycling animation
	                            ; FIX_CHR_CYCLE = 1
	                            
	                            ; Fixes the POW falling log glitch
	                            ; FIX_POW_LOG_GLITCH = 1
	                            
	                            ; Fixes vine climbing bug when holding up and down simultaneously
	                            ; FIX_CLIMB_ZIP = 1
	                            
	                            ; Fixes green platform tiles in Subspace
	                            ; FIX_SUBSPACE_TILES = 1
	                            
	                            ; Fixes rare softlock when Fryguy doesn't create all four mini flames
	                            ; FIX_FRYGUY_SPLIT_COUNT = 1
	                            
	                            ; Supports D1 joypad data for expansion port controllers
	                            ; JOYPAD_D1 = 1
	                            
	                            ; ----------------------------------------
	                            ; Patches that alter the game in
	                            ; interesting or useful ways
	                            
	                            
	                            ; Skips Bonus Chance after the end of a level
	                            ; DISABLE_BONUS_CHANCE = 1
	                            
	                            ; Go to the Charater Select screen after death
	                            ; CHARACTER_SELECT_AFTER_DEATH = 1
	                            
	                            ; Respawn at the beginning of the area instead of dying
	                            ; RESPAWN_INSTEAD_OF_DEATH = 1
	                            
	                            ; Restore the prototype's DPCM samples and/or music;
	                            ; NOTE: The prototype underground music requires the shortened prototype ending music to fit
	                            ; everything in the music header table. Use EXPAND_MUSIC to remove this restriction.
	                            ; PROTOTYPE_DPCM_SAMPLES = 1
	                            ; PROTOTYPE_INSTRUMENTS = 1
	                            ; PROTOTYPE_MUSIC_STARMAN = 1
	                            ; PROTOTYPE_MUSIC_UNDERGROUND = 1
	                            ; PROTOTYPE_MUSIC_ENDING = 1
	                            
	                            ; Include debugging tools
	                            ; (push Select to open the debug menu)
	                            ; DEBUG = 1
	                            
	                            ; Include controller 2 debug features
	                            ; (@TODO: explain usage)
	                             CONTROLLER_2_DEBUG = 1
	                            
	                            
	                            
	                            ; ----------------------------------------
	                            ; Patches and enhancements largely useful
	                            ; only to people hacking the game
	                            
	                            
	                            ; Expand PRG and/or CHR to max capacity
	                            ; EXPAND_PRG = 1
	                            ; EXPAND_CHR = 1
	                            
	                            ; Use MMC5 (mapper 5) instead of MMC3 (mapper 4)
	                            ; Based on RetroRain's MMC5 patch (https://www.romhacking.net/hacks/2568)
	                            ; MMC5 = 1
	                            
	                            ; Enable hard-wired 4-screen mirroring. If enabled, normal nametable mirroring is disabled.
	                            ; See https://wiki.nesdev.com/w/index.php/INES#Flags_6
	                            ; FOURSCREEN = 1
	                            
	                            ; Use FME-7 (mapper 69) instead of MMC3 (mapper 4)
	                            ; FME7 = 1
	                            
	                            ; Pads title screen PPU data for easier modification
	                            ; PAD_TITLE_SCREEN_PPU_DATA = 1
	                            
	                            ; Expands various lookup tables so that more values can be added
	                            ; EXPAND_TABLES = 1
	                            
	                            ; Skip unnecessary bonus chance RAM copy
	                            ; BONUS_CHANCE_RAM_CLEANUP = 1
	                            
	                            ; Uses an alternative pointer method for music headers to allow for more segments
	                            ; EXPAND_MUSIC = 1
	                            
	                            ; Encode world tileset in unused 3 bits of area header byte 2
	                            ; AREA_HEADER_TILESET = 1
	                            
	                            ; Checks the CHR latch variable to reload the CHR data
	                            ; RESET_CHR_LATCH = 1
	                            
	                            ; Encode level engine object mode switch in unused 2 bits of area header byte 4
	                            ; ENABLE_LEVEL_OBJECT_MODE = 1
	                            
	                            ; Enables additional level engine features
	                            ; LEVEL_ENGINE_UPGRADES = 1
	                            
	                            ; Enables quicksand tile behavior outside of worlds 2 and 6
	                            ; ALWAYS_ALLOW_QUICKSAND = 1
	                            
	                            ; Use a tile attributes table for rather than TileSolidnessTable
	                            ; ENABLE_TILE_ATTRIBUTES_TABLE = 1
	                            
	                            ; Disables door pointers, so that area pointers are always required
	                            ; DISABLE_DOOR_POINTERS = 1
	                            
	                            ; Enables full-page door/vine searching so that entrances don't need to align
	                            ; ROBUST_TRANSITION_SEARCH = 1
	                            
	                            ; Use RAM address for player hitbox offset rather than PlayerDucking
	                            ; PLAYER_HITBOX = 1
	                            
	                            
	                            .endinl
	                            .include "constants.asm"
	                            .ignorenl
	                            
	                            MAPPER_MMC3 = 4
	                            MAPPER_MMC5 = 5
	                            MAPPER_FME7 = 69 ; nice
	                            
	                            .endinl
	                            
	                            .ignorenl
	                            INES_MAPPER = MAPPER_MMC3
	                            IFDEF FME7
	                            	INES_MAPPER = MAPPER_FME7
	                            ENDIF
	                            IFDEF MMC5
	                            	INES_MAPPER = MAPPER_MMC5
	                            ENDIF
	                            IFDEF FOURSCREEN
	                            	MIRROR_4SCREEN = %1000
	                            ELSE
	                            	MIRROR_4SCREEN = %0000
	                            ENDIF
	                            IFDEF SM_USA
	                            	NAMETABLE_MIRRORING = %0001
	                            ELSE
	                            	NAMETABLE_MIRRORING = %0000
	                            ENDIF
	                            .endinl
	                            
	                            ; -----------------------------------------
	                            ; Add NES header
	  4E 45 53 1A               	.db "NES", $1a ; identification of the iNES header
	                            
	                            IFDEF EXPAND_PRG
	                            	.db 16 ; this can go up to 32
	                            ELSE
	  08                        	.db 8 ; number of 16KB PRG-ROM pages
	                            ENDIF
	                            
	                            IFDEF EXPAND_CHR
	                            	.db 32
	                            ELSE
	  10                        	.db 16 ; number of 8KB CHR-ROM pages
	                            ENDIF
	                            
	  40                        .db ((INES_MAPPER & %00001111) << 4) | MIRROR_4SCREEN | NAMETABLE_MIRRORING ; mapper (lower nybble) and mirroring
	                            IF INES_MAPPER == MAPPER_FME7
	                            	.db (INES_MAPPER & %11110000) | %1000 ; mapper (upper nybble) and iNES 2.0
	                            	.dsb 2, $00
	                            	.db $77 ; flags 10
	                            	.dsb 5, $00 ; clear the remaining bytes
	                            ELSEIF INES_MAPPER == MAPPER_MMC5
	                            	.dsb 3, $00
	                            	.db $70 ; flags 10
	                            	.dsb 5, $00 ; clear the remaining bytes
	                            ELSE ; INES_MAPPER == MAPPER_MMC3
	  00                        	.db INES_MAPPER & %11110000 ; mapper (upper nybble)
	  00 00 00 00 00 00 00 00   	.dsb 8, $00 ; clear the remaining bytes
	                            ENDIF
	                            
	                            ; -----------------------------------------
	                            ; Add macros
	                            .include "src/macros.asm"
	                            ;
	                            ; Macros
	                            ; ======
	                            ;
	                            ;
	                            
	                            ; Include COMPATIBILITY-flag-related macros
	                            include "src/compatibility-shims.asm"
	                            ;
	                            ; Macros for compatibility reasons
	                            ; ================================
	                            ;
	                            ; asm6f doesn't have a way of specifying "aboslute mode" by force,
	                            ; and some areas of SMB2 use it even in cases where a zero-page instruction
	                            ; would have been sufficient, so these are here to allow those to exist
	                            ; (by emitting the raw bytes) if needed
	                            ;
	                            
	                            
	                            ;
	                            ; Emit a NOP if PRESERVE_UNUSED_SPACE is on,
	                            ; as non-compat opcodes are one byte smaller
	                            ; (will keep data in place if using proper ZP opcodes)
	                            ;
	                            MACRO NOP_compat
	                            	IFDEF PRESERVE_UNUSED_SPACE
	                            		NOP
	                            	ENDIF
	                            ENDM
	                            
	                            ;
	                            ; LDA $0000
	                            ;
	                            MACRO LDA_abs addr
	                            	IFDEF COMPATIBILITY
	                            		.db $ad
	                            		.dw addr
	                            	ELSE
	                            		LDA addr
	                            		NOP_compat
	                            	ENDIF
	                            ENDM
	                            
	                            ;
	                            ; LDA $0000, X
	                            ;
	                            MACRO LDA_abs_X addr
	                            	IFDEF COMPATIBILITY
	                            		.db $bd
	                            		.dw addr
	                            	ELSE
	                            		LDA addr, X
	                            		NOP_compat
	                            	ENDIF
	                            ENDM
	                            
	                            ;
	                            ; LDX $0000
	                            ;
	                            MACRO LDX_abs addr
	                            	IFDEF COMPATIBILITY
	                            		.db $ae
	                            		.dw addr
	                            	ELSE
	                            		LDX addr
	                            		NOP_compat
	                            	ENDIF
	                            ENDM
	                            
	                            ;
	                            ; LDY $0000
	                            ;
	                            MACRO LDY_abs addr
	                            	IFDEF COMPATIBILITY
	                            		.db $ac
	                            		.dw addr
	                            	ELSE
	                            		LDY addr
	                            		NOP_compat
	                            	ENDIF
	                            ENDM
	                            
	                            ;
	                            ; STA $0000
	                            ;
	                            MACRO STA_abs addr
	                            	IFDEF COMPATIBILITY
	                            		.db $8d
	                            		.dw addr
	                            	ELSE
	                            		STA addr
	                            		NOP_compat
	                            	ENDIF
	                            ENDM
	                            
	                            ;
	                            ; STY $0000
	                            ;
	                            MACRO STY_abs addr
	                            	IFDEF COMPATIBILITY
	                            		.db $8c
	                            		.dw addr
	                            	ELSE
	                            		STY addr
	                            		NOP_compat
	                            	ENDIF
	                            ENDM
	                            
	                            ;
	                            ; INC $0000
	                            ;
	                            MACRO INC_abs addr
	                            	IFDEF COMPATIBILITY
	                            		.db $ee
	                            		.dw addr
	                            	ELSE
	                            		INC addr
	                            		NOP_compat
	                            	ENDIF
	                            ENDM
	                            
	                            ;
	                            ; AND $0000
	                            ;
	                            MACRO AND_abs addr
	                            	IFDEF COMPATIBILITY
	                            		.db $2d
	                            		.dw addr
	                            	ELSE
	                            		INC addr
	                            		NOP_compat
	                            	ENDIF
	                            ENDM
	                            
	                            ;
	                            ; Pad out unused space used in the original, if needed
	                            ;
	                            MACRO unusedSpace padTo with
	                            	IFDEF PRESERVE_UNUSED_SPACE
	                            		.pad padTo, with
	                            	ENDIF
	                            ENDM
	                            
	                            ; distTo
	                            ; Outputs distance (byte) to label
	                            ; e.g.:
	                            ; .db (+ - $)  is  distTo +
	                            ;
	                            MACRO distTo label
	                            	.db (label - $)
	                            ENDM
	                            
	                            MACRO enemy x, y, type
	                            	.db type, x << 4 | y
	                            ENDM
	                            
	                            ;
	                            ; LevelHeader macro
	                            ;
	                            ; The order of the parameters is slightly different than how it's encoded, but
	                            ; hopefully this order is a little more intuitive?
	                            ;
	                            MACRO levelHeader pages, horizontal, bgPalette, spritePalette, music, objectTypeAXFX, objectType3X9X, groundSetting, groundType
	                            	.db horizontal << 7 | bgPalette << 3 | spritePalette
	                            	.db %11100000 | groundSetting
	                            	.db pages << 4 | objectTypeAXFX << 2 | objectType3X9X
	                            	IFNDEF LEVEL_ENGINE_UPGRADES
	                            		.db groundType << 3 | music
	                            	ENDIF
	                            	IFDEF LEVEL_ENGINE_UPGRADES
	                            		.db groundType << 4 | music
	                            	ENDIF
	                            ENDM
	                            
	                            MACRO musicPointerOffset label, offset
	                            	.db (label - MusicPointerOffset + offset)
	                            ENDM
	                            
	                            MACRO musicPart label
	                            	.db (label - MusicPartPointers)
	                            ENDM
	                            
	                            MACRO noteLength label
	                            	.db (label - NoteLengthTable)
	                            ENDM
	                            
	                            ;
	                            ; MusicHeader macro, to replace this:
	                            ;	noteLength NoteLengthTable_300bpm
	                            ;	.dw MusicDataXXX
	                            ;	.db MusicDataXXX_Triangle - MusicDataXXX
	                            ;	.db MusicDataXXX_Square1 - MusicDataXXX
	                            ;	.db MusicDataXXX_Noise - MusicDataXXX
	                            ;	; no noise channel, using $00 from below
	                            ;
	                            ; Setting "noise" or "dpcm" to -1 will suppress output of $00 for music headers
	                            ; "reuse" the note length from the following header to save bytes.
	                            ;
	                            ; If EXPAND_MUSIC is enabled, the $00 will always be output.
	                            ;
	                            MACRO musicHeader noteLengthLabel, square2, triangle, square1, noise, dpcm
	                            	noteLength noteLengthLabel
	                            	.dw square2
	                            	IF triangle <= 0
	                            		.db $00
	                            	ELSE
	                            		.db (triangle - square2)
	                            	ENDIF
	                            	IF square1 <= 0
	                            		.db $00
	                            	ELSE
	                            		.db (square1 - square2)
	                            	ENDIF
	                            
	                            	IFNDEF EXPAND_MUSIC
	                            		IF noise = 0
	                            			.db $00
	                            		ELSEIF noise > 0
	                            			.db (noise - square2)
	                            		ENDIF
	                            		IF dpcm = 0
	                            			.db $00
	                            		ELSEIF dpcm > 0
	                            			.db (dpcm - square2)
	                            		ENDIF
	                            	ELSE
	                            		IF noise <= 0
	                            			.db $00
	                            		ELSE
	                            			.db (noise - square2)
	                            		ENDIF
	                            		IF dpcm <= 0
	                            			.db $00
	                            		ELSE
	                            			.db (dpcm - square2)
	                            		ENDIF
	                            	ENDIF
	                            ENDM
	                            
	                            ; -----------------------------------------
	                            ; Add definitions
	                            .enum $0000
00000                           .include "src/defs.asm"
00000                           .ignorenl
00000                           
00000                           VMirror = %00000000
00000                           HMirror = %00000001
00000                           
00000                           MMC5_VMirror = %01000100
00000                           MMC5_HMirror = %01010000
00000                           
00000                           IF INES_MAPPER == MAPPER_MMC5
00000                             VMirror = MMC5_VMirror
00000                             HMirror = MMC5_HMirror
00000                           ENDIF
00000                           
00000                           CHR_A12_INVERSION = $80
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; Each level has a maximum of 10 ($00~$09) areas.
00000                           ; Extra ones are generally empty or pointers to the last 'real' area.
00000                           ; "Common jars", if used in a level, occupy area $04.
00000                           ; but if common jars aren't used, it can (and often is) a regular area.
00000                           AreaIndex_Start = $00
00000                           AreaIndex_Jar = $04
00000                           
00000                           ; enum PlayerStates (width 1 byte)
00000                           PlayerState_Normal = $00
00000                           PlayerState_Climbing = $01
00000                           PlayerState_Lifting = $02
00000                           PlayerState_ClimbingAreaTransition = $03
00000                           PlayerState_GoingDownJar = $04
00000                           PlayerState_ExitingJar = $05
00000                           PlayerState_HawkmouthEating = $06
00000                           PlayerState_Dying = $07
00000                           PlayerState_ChangingSize = $08
00000                           
00000                           ; enum TransitionTypes (width 1 byte)
00000                           TransitionType_Reset = $00
00000                           TransitionType_Door = $01
00000                           TransitionType_Jar = $02
00000                           TransitionType_Vine = $03
00000                           TransitionType_SubSpace = $04
00000                           TransitionType_Rocket = $05
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum Characters
00000                           Character_Mario = $00
00000                           Character_Princess = $01
00000                           Character_Toad = $02
00000                           Character_Luigi = $03
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum APUOffset
00000                           APUOffset_Square1 = $00
00000                           APUOffset_Square2 = $04
00000                           APUOffset_Triangle = $08
00000                           APUOffset_Noise = $0C
00000                           
00000                           ; enum Music1
00000                           IFNDEF EXPAND_MUSIC
00000                             Music1_Overworld = $01
00000                             Music1_CharacterSelect = $02
00000                             Music1_Inside = $04
00000                             Music1_Boss = $08
00000                             Music1_Invincible = $10
00000                             Music1_Subspace = $20
00000                             Music1_Wart = $40
00000                             Music1_Title = $80
00000                           ELSE
00000                             Music1_Overworld = $01
00000                             Music1_CharacterSelect = $02
00000                             Music1_Inside = $03
00000                             Music1_Boss = $04
00000                             Music1_Invincible = $05
00000                             Music1_Subspace = $06
00000                             Music1_Wart = $07
00000                             Music1_Title = $08
00000                           ENDIF
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum Music2
00000                           IFNDEF EXPAND_MUSIC
00000                             Music2_MushroomGetJingle = $01
00000                             Music2_BossClearFanfare = $02
00000                             Music2_EndingAndCast = $04
00000                             Music2_DeathJingle = $08
00000                             Music2_GameOver = $10
00000                             Music2_CrystalGetFanfare = $20
00000                             Music2_SlotWarpFanfare = $40
00000                           ELSE
00000                             Music2_MushroomGetJingle = $01
00000                             Music2_BossClearFanfare = $02
00000                             Music2_EndingAndCast = $03
00000                             Music2_DeathJingle = $04
00000                             Music2_GameOver = $05
00000                             Music2_CrystalGetFanfare = $06
00000                             Music2_SlotWarpFanfare = $07
00000                           ENDIF
00000                           Music2_StopMusic = $80
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum ControllerInput (bitfield) (width 1 byte)
00000                           ControllerInput_Right = %00000001
00000                           ControllerInput_Left = %00000010
00000                           ControllerInput_Down = %00000100
00000                           ControllerInput_Up =  %00001000
00000                           ControllerInput_Start = %00010000
00000                           ControllerInput_Select = %00100000
00000                           ControllerInput_B = %01000000
00000                           ControllerInput_A = %10000000
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum DPCM (width 1 byte)
00000                           IFNDEF EXPAND_MUSIC
00000                             DPCM_DoorOpenBombBom = $01
00000                             DPCM_DrumSample_A = $02
00000                             DPCM_PlayerHurt = $04
00000                             DPCM_ItemPull = $08
00000                             DPCM_BossDeath = $10
00000                             DPCM_DrumSample_B = $20
00000                             DPCM_BossHurt = $40
00000                             DPCM_PlayerDeath = $80
00000                           ELSE
00000                             DPCM_DoorOpenBombBom = $01
00000                             DPCM_DrumSample_A = $02
00000                             DPCM_PlayerHurt = $03
00000                             DPCM_ItemPull = $04
00000                             DPCM_BossDeath = $05
00000                             DPCM_DrumSample_B = $06
00000                             DPCM_BossHurt = $07
00000                             DPCM_PlayerDeath = $08
00000                           ENDIF
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum SoundEffect1 (width 1 byte)
00000                           SoundEffect1_BirdoShot = $01
00000                           SoundEffect1_PotionDoorBong = $02
00000                           SoundEffect1_CherryGet = $04
00000                           SoundEffect1_ThrowItem = $08
00000                           SoundEffect1_1UP = $10
00000                           SoundEffect1_EnemyHit = $20
00000                           SoundEffect1_StopwatchTick = $40
00000                           SoundEffect1_HawkOpen_WartBarf = $80
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum PRGBank (width 1 byte)
00000                           PRGBank_0_1 = $00
00000                           PRGBank_2_3 = $01
00000                           PRGBank_4_5 = $02
00000                           PRGBank_6_7 = $03
00000                           PRGBank_8_9 = $04
00000                           PRGBank_A_B = $05
00000                           PRGBank_C_D = $06
00000                           PRGBank_E_F = $07
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum ScreenUpdateBuffer
00000                           ScreenUpdateBuffer_RAM_301 = $00
00000                           ScreenUpdateBuffer_RAM_BonusChanceCoinsExtraLife = $01
00000                           ScreenUpdateBuffer_RAM_TitleCardPalette = $02
00000                           ScreenUpdateBuffer_CharacterSelect = $03
00000                           ScreenUpdateBuffer_TitleCard = $04
00000                           ScreenUpdateBuffer_Text_Game_Over = $05
00000                           ScreenUpdateBuffer_RAM_ContinueRetryText = $06
00000                           ScreenUpdateBuffer_Text_Retry = $07
00000                           ScreenUpdateBuffer_RAM_TitleCardText = $08
00000                           ScreenUpdateBuffer_RAM_BonusChanceUnused = $09
00000                           ScreenUpdateBuffer_RAM_NoBonusText = $0A
00000                           ScreenUpdateBuffer_RAM_PushAButtonText = $0B
00000                           ScreenUpdateBuffer_RAM_Player1UpText = $0C
00000                           ScreenUpdateBuffer_RAM_PauseText = $0D
00000                           ScreenUpdateBuffer_RAM_ErasePauseText = $0E
00000                           ScreenUpdateBuffer_RAM_EraseBonusMessageText = $0F
00000                           ScreenUpdateBuffer_RAM_ErasePushAButtonText = $10
00000                           ScreenUpdateBuffer_RAM_EraseBonusMessageTextUnused = $11
00000                           ScreenUpdateBuffer_WarpToWorld = $12
00000                           ScreenUpdateBuffer_RAM_ContinueRetryBullets = $13
00000                           ScreenUpdateBuffer_RAM_EndOfLevelDoor = $14
00000                           ScreenUpdateBuffer_TitleCardLeftover = $15
00000                           ScreenUpdateBuffer_PauseExtraLife = $16
00000                           ScreenUpdateBuffer_RAM_BonusChanceLayout = $17
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum EndingUpdateBuffer (width 1 byte)
00000                           EndingUpdateBuffer_RAM_301 = $00
00000                           EndingUpdateBuffer_JarRoom = $01
00000                           EndingUpdateBuffer_CeilingTextAndPodium = $02
00000                           EndingUpdateBuffer_FloorAndSubconParade = $03
00000                           EndingUpdateBuffer_PaletteFade1 = $04
00000                           EndingUpdateBuffer_PaletteFade2 = $05
00000                           EndingUpdateBuffer_PaletteFade3 = $06
00000                           EndingUpdateBuffer_SubconStandStill = $07
00000                           EndingUpdateBuffer_Unused_THE_END = $08
00000                           EndingUpdateBuffer_Text_MARIO = $09
00000                           EndingUpdateBuffer_Text_PRINCESS = $0A
00000                           EndingUpdateBuffer_Text_TOAD = $0B
00000                           EndingUpdateBuffer_Text_LUIGI = $0C
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum MarioSleepingUpdateBuffer (width 1 byte)
00000                           MarioSleepingUpdateBuffer_RAM_301 = $00
00000                           MarioSleepingUpdateBuffer_Bed = $01
00000                           MarioSleepingUpdateBuffer_Bubble = $02
00000                           MarioSleepingUpdateBuffer_DoNothing = $03
00000                           MarioSleepingUpdateBuffer_EraseBubble1 = $04
00000                           MarioSleepingUpdateBuffer_EraseBubble2 = $05
00000                           MarioSleepingUpdateBuffer_EraseBubble3 = $06
00000                           MarioSleepingUpdateBuffer_EraseBubble4 = $07
00000                           MarioSleepingUpdateBuffer_EraseBubble5 = $08
00000                           MarioSleepingUpdateBuffer_Palettes = $09
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum SoundEffect2 (width 1 byte)
00000                           SoundEffect2_Jump = $01
00000                           SoundEffect2_Climbing = $02
00000                           SoundEffect2_CoinGet = $04
00000                           SoundEffect2_Shrinking = $08
00000                           SoundEffect2_IntroFallSlide = $10
00000                           SoundEffect2_Growing = $20
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum PPUStatus (bitfield) (width 1 byte)
00000                           PPUStatus_SpriteOverflow = %100000
00000                           PPUStatus_Sprite0Hit = %1000000
00000                           PPUStatus_VBlankHit = %10000000
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum SoundEffect3
00000                           SoundEffect3_WhaleSpout = $01
00000                           SoundEffect3_Rocket = $02
00000                           SoundEffect3_POWRumble = $04
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum SlotMachineSymbols (width 1 byte)
00000                           Slot_Cherry = $00
00000                           Slot_Star = $08
00000                           Slot_Turnip = $10
00000                           Slot_Snifit = $18
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum SpriteAnimations
00000                           SpriteAnimation_Walking = $00
00000                           SpriteAnimation_WalkingCarrying = $01
00000                           SpriteAnimation_Standing = $02
00000                           SpriteAnimation_StandingCarrying = $03
00000                           SpriteAnimation_Ducking = $04
00000                           SpriteAnimation_5 = $05
00000                           SpriteAnimation_Jumping = $06
00000                           SpriteAnimation_Dead = $07
00000                           SpriteAnimation_Pulling = $08
00000                           SpriteAnimation_Throwing = $09
00000                           SpriteAnimation_Climbing = $0A
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum PlayerHealthValues
00000                           PlayerHealth_1_HP = $0F
00000                           PlayerHealth_2_HP = $1F
00000                           PlayerHealth_3_HP = $2F
00000                           PlayerHealth_4_HP = $3F
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum PPUMaskBitmask (bitfield) (width 1 byte)
00000                           PPUMask_Grayscale = %00000001
00000                           PPUMask_ShowLeft8Pixels_BG = %00000010
00000                           PPUMask_ShowLeft8Pixels_SPR = %00000100
00000                           PPUMask_ShowBackground = %00001000
00000                           PPUMask_ShowSprites = %00010000
00000                           PPUMask_RedEmphasis = %00100000
00000                           PPUMask_GreenEmphasis = %01000000
00000                           PPUMask_BlueEmphasis = %10000000
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum PPUTileDataLength (bitfield) (width 1 byte)
00000                           PPUData_Length = $00
00000                           PPUTileData_RepeatOneTile = $40
00000                           PPUData_Horizontal = $00
00000                           PPUData_Vertical = $80
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum GameModes
00000                           GameMode_InGame = $00
00000                           GameMode_TitleCard = $01
00000                           GameMode_GameOver = $02
00000                           GameMode_BonusChance = $03
00000                           GameMode_Warp = $04
00000                           
00000                           ; enum Stack100
00000                           Stack100_Menu = %01000000 ; static screens (eg. character select)
00000                           Stack100_Pause = %01000001 ; static screen with muted square channels (pause)
00000                           Stack100_Transition = %10000000 ; used for transitions, disable input and mirroring
00000                           Stack100_Gameplay = %11000000 ; normal gameplay
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum PPUControl (bitfield) (width 1 byte)
00000                           PPUCtrl_BaseAddress = $03
00000                           PPUCtrl_Base2000 = $00
00000                           PPUCtrl_Base2400 = $01
00000                           PPUCtrl_Base2800 = $02
00000                           PPUCtrl_Base2C00 = $03
00000                           PPUCtrl_WriteHorizontal = $00
00000                           PPUCtrl_WriteVertical = $04
00000                           PPUCtrl_Sprite0000 = $00
00000                           PPUCtrl_Sprite1000 = $08
00000                           PPUCtrl_Background0000 = $00
00000                           PPUCtrl_Background1000 = $10
00000                           PPUCtrl_SpriteSize8x8 = $00
00000                           PPUCtrl_SpriteSize8x16 = $20
00000                           PPUCtrl_NMIDisabled = $00
00000                           PPUCtrl_NMIEnabled = $80
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum EnemyStates
00000                           EnemyState_Inactive = $00
00000                           EnemyState_Alive = $01
00000                           EnemyState_Dead = $02
00000                           EnemyState_BlockFizzle = $03
00000                           EnemyState_BombExploding = $04
00000                           EnemyState_PuffOfSmoke = $05
00000                           EnemyState_Sand = $06
00000                           EnemyState_Sinking = $07
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum ObjectAttribute (bitfield)
00000                           ObjAttrib_Palette = %00000011
00000                           ObjAttrib_Palette0 = $00
00000                           ObjAttrib_Palette1 = $01
00000                           ObjAttrib_Palette2 = $02
00000                           ObjAttrib_Palette3 = $03
00000                           ObjAttrib_Horizontal = %00000100 ; use with ObjAttrib_16x32 for 32x16
00000                           ObjAttrib_FrontFacing = %00001000 ; no direction-based mirroring
00000                           ObjAttrib_Mirrored = %00010000
00000                           ObjAttrib_BehindBackground = %00100000
00000                           ObjAttrib_16x32 = %01000000
00000                           ObjAttrib_UpsideDown = %10000000 ; appears behind background when pulling
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum SpriteFlags46E (bitfield) (width 1 byte)
00000                           SpriteFlags46E_00 = %00000000
00000                           SpriteFlags46E_Damage = %00000001 ; Causes damage when touched from above
00000                           SpriteFlags46E_Unliftable = %00000010
00000                           SpriteFlags46E_NoEnemyCollision = %00000100 ; Disables collision with other enemies
00000                           SpriteFlags46E_DeathSquawk = %00001000 ; Squawk on death (and prevents despawning offscreen)
00000                           SpriteFlags46E_Tilemap2 = %00010000
00000                           SpriteFlags46E_WideSprite = %00100000 ; Only used for Mouser
00000                           SpriteFlags46E_DoubleSpeed = %01000000
00000                           SpriteFlags46E_MirrorAnimation = %10000000
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum BackgroundTileIds
00000                           BackgroundTile_Black = $00
00000                           BackgroundTile_BgCloudLeft = $01
00000                           BackgroundTile_BgCloudRight = $02
00000                           BackgroundTile_BgCloudSmall = $03
00000                           BackgroundTile_WaterfallTop = $04
00000                           BackgroundTile_Waterfall = $05
00000                           BackgroundTile_WaterfallSplash = $06
00000                           BackgroundTile_Chain = $07
00000                           BackgroundTile_WaterTop = $08
00000                           BackgroundTile_HouseLeft = $09
00000                           BackgroundTile_Water = $0A
00000                           BackgroundTile_HouseMiddle = $0B
00000                           BackgroundTile_WaterWhale = $0C
00000                           BackgroundTile_HouseRight = $0D
00000                           BackgroundTile_Unused0E = $0E
00000                           BackgroundTile_Unused0F = $0F
00000                           BackgroundTile_Unused10 = $10
00000                           BackgroundTile_WaterWhaleTail = $11
00000                           BackgroundTile_JumpThroughBlock = $12
00000                           BackgroundTile_CloudLeft = $13
00000                           BackgroundTile_CloudMiddle = $14
00000                           BackgroundTile_CloudRight = $15
00000                           BackgroundTile_JumpThroughIce = $16
00000                           BackgroundTile_ChainStandable = $17
00000                           BackgroundTile_SolidBrick0 = $18
00000                           BackgroundTile_GroundBrick0 = $19
00000                           BackgroundTile_Spikes = $1A
00000                           BackgroundTile_SolidRoundBrick0 = $1B
00000                           BackgroundTile_SolidBlock = $1C
00000                           BackgroundTile_CactusTop = $1D
00000                           BackgroundTile_CactusMiddle = $1E
00000                           BackgroundTile_FrozenRock = $1F
00000                           BackgroundTile_LogPillarTop0 = $20
00000                           BackgroundTile_LogPillarMiddle0 = $21
00000                           BackgroundTile_ClawGripRock = $22
00000                           BackgroundTile_Unused23 = $23 ; These are just solid palette-swapped mirrors of $40
00000                           BackgroundTile_Unused24 = $24
00000                           BackgroundTile_Unused25 = $25
00000                           BackgroundTile_Unused26 = $26
00000                           BackgroundTile_Unused27 = $27
00000                           BackgroundTile_Unused28 = $28
00000                           BackgroundTile_Unused29 = $29
00000                           BackgroundTile_Unused2A = $2A
00000                           BackgroundTile_Unused2B = $2B
00000                           BackgroundTile_Unused2C = $2C
00000                           BackgroundTile_Unused2D = $2D
00000                           BackgroundTile_Unused2E = $2E
00000                           BackgroundTile_Unused2F = $2F
00000                           BackgroundTile_Unused30 = $30
00000                           BackgroundTile_Unused31 = $31
00000                           BackgroundTile_Unused32 = $32
00000                           BackgroundTile_Unused33 = $33
00000                           BackgroundTile_Unused34 = $34
00000                           BackgroundTile_Unused35 = $35
00000                           BackgroundTile_Unused36 = $36
00000                           BackgroundTile_Unused37 = $37
00000                           BackgroundTile_Unused38 = $38
00000                           BackgroundTile_Unused39 = $39
00000                           BackgroundTile_Unused3A = $3A
00000                           BackgroundTile_Unused3B = $3B
00000                           BackgroundTile_Unused3C = $3C
00000                           BackgroundTile_Unused3D = $3D
00000                           BackgroundTile_Unused3E = $3E
00000                           BackgroundTile_Unused3F = $3F
00000                           BackgroundTile_Sky = $40
00000                           BackgroundTile_SubspaceMushroom1 = $41
00000                           BackgroundTile_SubspaceMushroom2 = $42
00000                           BackgroundTile_GrassCoin = $43
00000                           BackgroundTile_GrassLargeVeggie = $44
00000                           BackgroundTile_GrassSmallVeggie = $45
00000                           BackgroundTile_GrassRocket = $46
00000                           BackgroundTile_GrassShell = $47
00000                           BackgroundTile_GrassBomb = $48
00000                           BackgroundTile_GrassPotion = $49
00000                           BackgroundTile_Grass1UP = $4A
00000                           BackgroundTile_GrassPow = $4B
00000                           BackgroundTile_GrassBobOmb = $4C
00000                           BackgroundTile_GrassInactive = $4D
00000                           BackgroundTile_Cherry = $4E
00000                           BackgroundTile_DoorTop = $4F
00000                           BackgroundTile_DoorBottomLock = $50
00000                           BackgroundTile_DoorBottom = $51
00000                           BackgroundTile_LightDoor = $52
00000                           BackgroundTile_LightTrailRight = $53
00000                           BackgroundTile_LightTrail = $54
00000                           BackgroundTile_LightTrailLeft = $55
00000                           BackgroundTile_LightDoorEndLevel = $56
00000                           BackgroundTile_DoorBottomLockStuck = $57
00000                           BackgroundTile_DrawBridgeChain = $58
00000                           BackgroundTile_Whale = $59
00000                           BackgroundTile_WhaleEye = $5A
00000                           BackgroundTile_Phanto = $5B
00000                           BackgroundTile_TreeBackgroundLeft = $5C
00000                           BackgroundTile_TreeBackgroundMiddleLeft = $5D
00000                           BackgroundTile_TreeBackgroundRight = $5E
00000                           BackgroundTile_TreeBackgroundMiddleRight = $5F
00000                           BackgroundTile_WhaleTopLeft = $60
00000                           BackgroundTile_WhaleTop = $61
00000                           BackgroundTile_WhaleTopRight = $62
00000                           BackgroundTile_WhaleTail = $63
00000                           BackgroundTile_JumpThroughMachineBlock = $64
00000                           BackgroundTile_Bridge = $65
00000                           BackgroundTile_BridgeShadow = $66
00000                           BackgroundTile_ConveyorLeft = $67
00000                           BackgroundTile_ConveyorRight = $68
00000                           BackgroundTile_MushroomBlock = $69
00000                           BackgroundTile_Unused6AMushroomBlock = $6A
00000                           BackgroundTile_Unused6BMushroomBlock = $6B
00000                           BackgroundTile_POWBlock = $6C
00000                           BackgroundTile_Unused6D = $6D ; Used to mark where the liftable blocks end
00000                           BackgroundTile_SolidBrick1 = $6E
00000                           BackgroundTile_JarTopPointer = $6F
00000                           BackgroundTile_JarMiddle = $70
00000                           BackgroundTile_JarBottom = $71
00000                           BackgroundTile_JarSmall = $72
00000                           BackgroundTile_JarTopGeneric = $73
00000                           BackgroundTile_JarTopNonEnterable = $74
00000                           BackgroundTile_LogLeft = $75
00000                           BackgroundTile_LogMiddle = $76
00000                           BackgroundTile_LogRight = $77
00000                           BackgroundTile_LogRightTree = $78
00000                           BackgroundTile_LogPillarTop1 = $79
00000                           BackgroundTile_LogPillarMiddle1 = $7A
00000                           BackgroundTile_Unused7B = $7B
00000                           BackgroundTile_Unused7C = $7C
00000                           BackgroundTile_Unused7D = $7D
00000                           BackgroundTile_Unused7E = $7E
00000                           BackgroundTile_Unused7F = $7F
00000                           BackgroundTile_Ladder = $80
00000                           BackgroundTile_LadderShadow = $81
00000                           BackgroundTile_PalmTreeTrunk = $82
00000                           BackgroundTile_DarkDoor = $83
00000                           BackgroundTile_PyramidLeftAngle = $84
00000                           BackgroundTile_PyramidLeft = $85
00000                           BackgroundTile_PyramidRight = $86
00000                           BackgroundTile_PyramidRightAngle = $87
00000                           BackgroundTile_StarBg1 = $88
00000                           BackgroundTile_StarBg2 = $89
00000                           BackgroundTile_QuicksandSlow = $8A
00000                           BackgroundTile_QuicksandFast = $8B
00000                           BackgroundTile_HornTopLeft = $8C
00000                           BackgroundTile_HornTopRight = $8D
00000                           BackgroundTile_HornBottomLeft = $8E
00000                           BackgroundTile_HornBottomRight = $8F
00000                           BackgroundTile_BackgroundBrick = $90
00000                           BackgroundTile_JumpthroughSand = $91
00000                           BackgroundTile_JumpthroughWoodBlock = $92
00000                           BackgroundTile_DiggableSand = $93
00000                           BackgroundTile_LadderStandable = $94
00000                           BackgroundTile_LadderStandableShadow = $95
00000                           BackgroundTile_JumpthroughSandBlock = $96
00000                           BackgroundTile_JumpthroughBrick = $97
00000                           BackgroundTile_98 = $98
00000                           BackgroundTile_SolidSand = $99
00000                           BackgroundTile_9A = $9A
00000                           BackgroundTile_SolidBrick2 = $9B
00000                           BackgroundTile_GroundBrick2 = $9C
00000                           BackgroundTile_BombableBrick = $9D
00000                           BackgroundTile_JarWall = $9E ; solid color, solid wall
00000                           BackgroundTile_RockWallAngle = $9F
00000                           BackgroundTile_RockWall = $A0
00000                           BackgroundTile_RockWallOffset = $A1
00000                           BackgroundTile_SolidRoundBrick2 = $A2
00000                           BackgroundTile_SolidBrick2Wall = $A3
00000                           BackgroundTile_SolidWood = $A4
00000                           BackgroundTile_RockWallEyeLeft = $A5 ; World 6
00000                           BackgroundTile_RockWallEyeRight = $A6 ; World 6
00000                           BackgroundTile_RockWallMouth = $A7 ; World 6
00000                           BackgroundTile_WindowTop = $A8 ; World 7
00000                           BackgroundTile_DoorwayTop = $A9 ; World 7
00000                           BackgroundTile_ColumnPillarTop2 = $AA
00000                           BackgroundTile_ColumnPillarMiddle2 = $AB
00000                           BackgroundTile_UnusedAC = $AC
00000                           BackgroundTile_UnusedAD = $AD
00000                           BackgroundTile_UnusedAE = $AE
00000                           BackgroundTile_UnusedAF = $AF
00000                           BackgroundTile_UnusedB0 = $B0 ; These are just solid palette-swapped mirrors of $C4
00000                           BackgroundTile_UnusedB1 = $B1
00000                           BackgroundTile_UnusedB2 = $B2
00000                           BackgroundTile_UnusedB3 = $B3 ; SolidPlatformLeft2
00000                           BackgroundTile_UnusedB4 = $B4 ; SolidPlatformMiddle2
00000                           BackgroundTile_UnusedB5 = $B5 ; SolidPlatformRight2
00000                           BackgroundTile_UnusedB6 = $B6 ; SolidPlatformTopLeft2
00000                           BackgroundTile_UnusedB7 = $B7
00000                           BackgroundTile_UnusedB8 = $B8 ; SolidPlatformTop2
00000                           BackgroundTile_UnusedB9 = $B9
00000                           BackgroundTile_UnusedBA = $BA ; SolidPlatformTopRight2
00000                           BackgroundTile_UnusedBB = $BB
00000                           BackgroundTile_UnusedBC = $BC ; SolidPlatformTopLeftOverlap2
00000                           BackgroundTile_UnusedBD = $BD ; SolidPlatformTopRightOverlap2
00000                           BackgroundTile_UnusedBE = $BE ; SolidPlatformTopLeftOverlapEdge2
00000                           BackgroundTile_UnusedBF = $BF ; SolidPlatformTopRightOverlapEdge2
00000                           BackgroundTile_PalmTreeTop = $C0
00000                           BackgroundTile_VineTop = $C1
00000                           BackgroundTile_Vine = $C2
00000                           BackgroundTile_VineBottom = $C3
00000                           BackgroundTile_ClimbableSky = $C4
00000                           BackgroundTile_UnusedC5 = $C5
00000                           BackgroundTile_JarOutsideBackground = $C6 ; solid color, background
00000                           BackgroundTile_GreenPlatformLeft = $C7
00000                           BackgroundTile_GreenPlatformMiddle = $C8
00000                           BackgroundTile_GreenPlatformRight = $C9
00000                           BackgroundTile_GreenPlatformTopLeft = $CA
00000                           BackgroundTile_MushroomTopLeft = $CB
00000                           BackgroundTile_GreenPlatformTop = $CC
00000                           BackgroundTile_MushroomTopMiddle = $CD
00000                           BackgroundTile_GreenPlatformTopRight = $CE
00000                           BackgroundTile_MushroomTopRight = $CF
00000                           BackgroundTile_GreenPlatformTopLeftOverlap = $D0
00000                           BackgroundTile_GreenPlatformTopRightOverlap = $D1
00000                           BackgroundTile_GreenPlatformTopLeftOverlapEdge = $D2
00000                           BackgroundTile_GreenPlatformTopRightOverlapEdge = $D3
00000                           BackgroundTile_VineStandable = $D4
00000                           BackgroundTile_SolidGrass = $D5
00000                           BackgroundTile_SolidBrick3 = $D6
00000                           BackgroundTile_GroundBrick3 = $D7 ; World 7
00000                           BackgroundTile_UnusedD8 = $D8
00000                           BackgroundTile_UnusedD9 = $D9
00000                           BackgroundTile_UnusedDA = $DA
00000                           BackgroundTile_UnusedDB = $DB
00000                           BackgroundTile_UnusedDC = $DC
00000                           BackgroundTile_UnusedDD = $DD
00000                           BackgroundTile_UnusedDE = $DE
00000                           BackgroundTile_UnusedDF = $DF
00000                           BackgroundTile_UnusedE0 = $E0
00000                           BackgroundTile_UnusedE1 = $E1
00000                           BackgroundTile_UnusedE2 = $E2
00000                           BackgroundTile_UnusedE3 = $E3
00000                           BackgroundTile_UnusedE4 = $E4
00000                           BackgroundTile_UnusedE5 = $E5
00000                           BackgroundTile_UnusedE6 = $E6
00000                           BackgroundTile_UnusedE7 = $E7
00000                           BackgroundTile_UnusedE8 = $E8
00000                           BackgroundTile_UnusedE9 = $E9
00000                           BackgroundTile_UnusedEA = $EA
00000                           BackgroundTile_UnusedEB = $EB
00000                           BackgroundTile_UnusedEC = $EC
00000                           BackgroundTile_UnusedED = $ED
00000                           BackgroundTile_UnusedEE = $EE
00000                           BackgroundTile_UnusedEF = $EF
00000                           BackgroundTile_UnusedF0 = $F0
00000                           BackgroundTile_UnusedF1 = $F1
00000                           BackgroundTile_UnusedF2 = $F2
00000                           BackgroundTile_UnusedF3 = $F3
00000                           BackgroundTile_UnusedF4 = $F4
00000                           BackgroundTile_UnusedF5 = $F5
00000                           BackgroundTile_UnusedF6 = $F6
00000                           BackgroundTile_UnusedF7 = $F7
00000                           BackgroundTile_UnusedF8 = $F8
00000                           BackgroundTile_UnusedF9 = $F9
00000                           BackgroundTile_UnusedFA = $FA
00000                           BackgroundTile_UnusedFB = $FB
00000                           BackgroundTile_UnusedFC = $FC
00000                           BackgroundTile_UnusedFD = $FD
00000                           BackgroundTile_UnusedFE = $FE
00000                           BackgroundTile_UnusedFF = $FF
00000                           
00000                           ; enum EnemyIds
00000                           Enemy_Heart = $00
00000                           Enemy_ShyguyRed = $01
00000                           Enemy_Tweeter = $02
00000                           Enemy_ShyguyPink = $03
00000                           Enemy_Porcupo = $04
00000                           Enemy_SnifitRed = $05
00000                           Enemy_SnifitGray = $06
00000                           Enemy_SnifitPink = $07
00000                           Enemy_Ostro = $08
00000                           Enemy_BobOmb = $09
00000                           Enemy_AlbatossCarryingBobOmb = $0A
00000                           Enemy_AlbatossStartRight = $0B
00000                           Enemy_AlbatossStartLeft = $0C
00000                           Enemy_NinjiRunning = $0D
00000                           Enemy_NinjiJumping = $0E
00000                           Enemy_BeezoDiving = $0F
00000                           Enemy_BeezoStraight = $10
00000                           Enemy_WartBubble = $11
00000                           Enemy_Pidgit = $12
00000                           Enemy_Trouter = $13
00000                           Enemy_Hoopstar = $14
00000                           Enemy_JarGeneratorShyguy = $15
00000                           Enemy_JarGeneratorBobOmb = $16
00000                           Enemy_Phanto = $17
00000                           Enemy_CobratJar = $18
00000                           Enemy_CobratSand = $19
00000                           Enemy_Pokey = $1A
00000                           Enemy_Bullet = $1B
00000                           Enemy_Birdo = $1C
00000                           Enemy_Mouser = $1D
00000                           Enemy_Egg = $1E
00000                           Enemy_Tryclyde = $1F
00000                           Enemy_Fireball = $20
00000                           Enemy_Clawgrip = $21
00000                           Enemy_ClawgripRock = $22
00000                           Enemy_PanserStationaryFiresAngled = $23
00000                           Enemy_PanserWalking = $24
00000                           Enemy_PanserStationaryFiresUp = $25
00000                           Enemy_Autobomb = $26
00000                           Enemy_AutobombFire = $27
00000                           Enemy_WhaleSpout = $28
00000                           Enemy_Flurry = $29
00000                           Enemy_Fryguy = $2A
00000                           Enemy_FryguySplit = $2B
00000                           Enemy_Wart = $2C
00000                           Enemy_HawkmouthBoss = $2D
00000                           Enemy_Spark1 = $2E ; clockwise, slow
00000                           Enemy_Spark2 = $2F ; clockwise, fast
00000                           Enemy_Spark3 = $30 ; counter-clockwise, slow
00000                           Enemy_Spark4 = $31 ; counter-clockwise, fast
00000                           Enemy_VegetableSmall = $32
00000                           Enemy_VegetableLarge = $33
00000                           Enemy_VegetableWart = $34
00000                           Enemy_Shell = $35
00000                           Enemy_Coin = $36
00000                           Enemy_Bomb = $37
00000                           Enemy_Rocket = $38
00000                           Enemy_MushroomBlock = $39
00000                           Enemy_POWBlock = $3A
00000                           Enemy_FallingLogs = $3B
00000                           Enemy_SubspaceDoor = $3C
00000                           Enemy_Key = $3D
00000                           Enemy_SubspacePotion = $3E
00000                           Enemy_Mushroom = $3F
00000                           Enemy_Mushroom1up = $40
00000                           Enemy_FlyingCarpet = $41
00000                           Enemy_HawkmouthRight = $42
00000                           Enemy_HawkmouthLeft = $43
00000                           Enemy_CrystalBall = $44
00000                           Enemy_Starman = $45
00000                           Enemy_Stopwatch = $46
00000                           Enemy_AttackAlbatossCarryingBobOmb = $47
00000                           Enemy_AttackBeezo = $48
00000                           Enemy_StopAttack = $49
00000                           Enemy_VegetableThrower = $4A ; Used in Wart's room
00000                           Enemy_4B = $4B ; crash
00000                           Enemy_4C = $4C ; weird! makes game think you can always jump and pick up an enemy
00000                           Enemy_4D = $4D ; crash
00000                           Enemy_4E = $4E ; hangs, forces background scroll?
00000                           Enemy_4F = $4F ; hangs, forces background scroll?
00000                           Enemy_50 = $50 ; crash, b+w palette?
00000                           Enemy_51 = $51 ; crash
00000                           Enemy_52 = $52 ; hangs, forces background scroll?
00000                           Enemy_53 = $53 ; hangs, forces background scroll?
00000                           Enemy_54 = $54 ; weird invisible thing that doesn't quite crash
00000                           Enemy_55 = $55 ; seems to mess up player physics
00000                           Enemy_56 = $56 ; crash
00000                           Enemy_57 = $57 ; seems to mess up player physics
00000                           Enemy_58 = $58 ; seems to mess up player physics
00000                           Enemy_59 = $59 ; crash
00000                           Enemy_5A = $5A ; crash
00000                           Enemy_5B = $5B ; hangs, forces background scroll?
00000                           Enemy_BossBirdo = $5C
00000                           Enemy_BossMouser = $5D
00000                           Enemy_BossEgg = $5E
00000                           Enemy_BossTryclyde = $5F
00000                           Enemy_BossFireball = $60
00000                           Enemy_BossClawgrip = $61
00000                           Enemy_BossClawgripRock = $62
00000                           Enemy_BossPanserStationaryFiresAngled = $63
00000                           Enemy_BossPanserWalking = $64
00000                           Enemy_BossPanserStationaryFiresUp = $65
00000                           Enemy_BossAutobomb = $66
00000                           Enemy_BossAutobombFire = $67
00000                           Enemy_BossWhaleSpout = $68
00000                           Enemy_BossFlurry = $69
00000                           Enemy_BossFryguy = $6A
00000                           Enemy_BossFryguySplit = $6B
00000                           Enemy_BossWart = $6C
00000                           Enemy_BossHawkmouthBoss = $6D
00000                           Enemy_BossSpark1 = $6E
00000                           Enemy_BossSpark2 = $6F
00000                           Enemy_BossSpark3 = $70
00000                           Enemy_BossSpark4 = $71
00000                           Enemy_BossVegetableSmall = $72
00000                           Enemy_BossVegetableLarge = $73
00000                           Enemy_BossVegetableWart = $74
00000                           Enemy_BossShell = $75
00000                           Enemy_BossCoin = $76
00000                           Enemy_BossBomb = $77
00000                           Enemy_BossRocket = $78
00000                           Enemy_BossMushroomBlock = $79
00000                           Enemy_BossPOWBlock = $7A
00000                           Enemy_BossFallingLogs = $7B
00000                           Enemy_BossSubspaceDoor = $7C
00000                           Enemy_BossKey = $7D
00000                           Enemy_BossSubspacePotion = $7E
00000                           Enemy_BossMushroom = $7F
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           LevelDirection_Horizontal = 1
00000                           LevelDirection_Vertical = 0
00000                           
00000                           LevelMusic_Overworld = 0
00000                           LevelMusic_Underground = 1
00000                           LevelMusic_Boss = 2
00000                           LevelMusic_Wart = 3
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum CollisionFlags (bitfield) (width 1 byte)
00000                           CollisionFlags_00 = %00000000
00000                           CollisionFlags_Right = %00000001
00000                           CollisionFlags_Left = %00000010
00000                           CollisionFlags_Down = %00000100
00000                           CollisionFlags_Up = %00001000
00000                           CollisionFlags_Damage = %00010000
00000                           CollisionFlags_PlayerOnTop = %00100000
00000                           CollisionFlags_PlayerInsideMaybe = %01000000
00000                           CollisionFlags_80 = %10000000
00000                           
00000                           ; enum CHRBank (width 1 byte)
00000                           CHRBank_Mario = $00
00000                           CHRBank_Luigi = $01
00000                           CHRBank_Princess = $02
00000                           CHRBank_Toad = $03
00000                           CHRBank_MarioSmall = $04
00000                           CHRBank_LuigiSmall = $05
00000                           CHRBank_PrincessSmall = $06
00000                           CHRBank_ToadSmall = $07
00000                           
00000                           CHRBank_CommonEnemies1 = $08
00000                           CHRBank_CommonEnemies2 = $09
00000                           
00000                           CHRBank_BackgroundGrassClawgrip = $0A
00000                           
00000                           CHRBank_EnemiesGrass = $0C
00000                           CHRBank_EnemiesDesert = $0D
00000                           CHRBank_EnemiesIce = $0E
00000                           CHRBank_EnemiesSky = $0F
00000                           
00000                           CHRBank_BackgroundGrass = $10
00000                           CHRBank_BackgroundDesert = $12
00000                           CHRBank_BackgroundIce = $14
00000                           CHRBank_BackgroundSky = $16
00000                           
00000                           CHRBank_Animated1 = $18
00000                           CHRBank_Animated2 = $1A
00000                           CHRBank_Animated3 = $1C
00000                           CHRBank_Animated4 = $1E
00000                           CHRBank_Animated5 = $20
00000                           CHRBank_Animated6 = $22
00000                           CHRBank_Animated7 = $24
00000                           CHRBank_Animated8 = $26
00000                           
00000                           CHRBank_TitleScreenBG1 = $28
00000                           CHRBank_TitleScreenBG2 = $2A
00000                           
00000                           CHRBank_CharacterSelectBG1 = $2C
00000                           CHRBank_CharacterSelectBG2 = $2E
00000                           CHRBank_CharacterSelectSprites = $30
00000                           
00000                           CHRBank_ChanceBG1 = $34
00000                           CHRBank_ChanceBG2 = $36
00000                           
00000                           CHRBank_CelebrationBG1 = $38
00000                           CHRBank_CelebrationBG2 = $3A
00000                           
00000                           CHRBank_TitleCardGrass = $40
00000                           CHRBank_TitleCardDesert = $42
00000                           CHRBank_TitleCardIce = $44
00000                           CHRBank_TitleCardSky = $46
00000                           
00000                           CHRBank_EndingSprites = $48
00000                           CHRBank_EndingCast1 = $4C
00000                           CHRBank_EndingCast2 = $4D
00000                           CHRBank_EndingCast3 = $4E
00000                           CHRBank_EndingCast4 = $4F
00000                           CHRBank_MarioSleepingBackground1 = $50
00000                           CHRBank_MarioSleepingBackground2 = $54
00000                           CHRBank_MarioSleepingBackground3 = $58
00000                           CHRBank_MarioSleepingBackground4 = $5C
00000                           CHRBank_MarioSleepingBackground5 = $60
00000                           CHRBank_MarioSleepingBackground6 = $64
00000                           CHRBank_MarioSleepingBackground7 = $68
00000                           CHRBank_MarioSleepingBackground8 = $6C
00000                           CHRBank_MarioSleepingBackground9 = $70
00000                           CHRBank_MarioSleepingBackground10 = $74
00000                           CHRBank_MarioSleepingBackground11 = $78
00000                           CHRBank_MarioSleepingBackground12 = $7C
00000                           
00000                           .endinl
00000                           .ende
	                            
	                            ; Add RAM definitions
	                            .enum $0000
00000                           .include "src/ram.asm"
00000                           ;
00000                           ; NES and cart RAM
00000                           ; ================
00000                           ;
00000                           ; What's inside: some bits, some bytes. @todo: describe more
00000                           ;
00000                           ;   - 0000-00FF: Zero page, various things, enemies/player data
00000                           ;   - 0100-01FF: Stack area
00000                           ;   - 0200-02FF: Sprite OAM DMA area
00000                           ;   - 0300-03FF: PPU buffers, etc.
00000                           ;   - 0400-04FF: Some enemy data, other small game-state stuff
00000                           ;   - 0500-05FF: PPU buffers, more game state tracking and other crap
00000                           ;   - 0600-06FF: Music engine, bonus chance, more PPU buffers, etc.
00000                           ;   - 0700-07FF: Tile layout for subspace/jar areas
00000                           ;
00000                           ;   - 2000-2007: PPU registers
00000                           ;   - 4000-4017: APU and joypad registers
00000                           ;   - 5000-5015: Used by MMC5 expansion
00000                           ;   - 6000-7FFF: on-cart RAM; decoded level, level data, enemy data, and more
00000                           ;
00000                           ;   - 8000-FFFF: you're in the wrong file, pal. that's rom.
00000                           ;
00000                           
00000                           byte_RAM_0:
00000                           	.dsb 1 ; $0000
00001                           byte_RAM_1:
00001                           	.dsb 1 ; $0001
00002                           byte_RAM_2:
00002                           	.dsb 1 ; $0002
00003                           byte_RAM_3:
00003                           	.dsb 1 ; $0003
00004                           byte_RAM_4:
00004                           	.dsb 1 ; $0004
00005                           byte_RAM_5:
00005                           	.dsb 1 ; $0005
00006                           byte_RAM_6:
00006                           	.dsb 1 ; $0006
00007                           byte_RAM_7:
00007                           	.dsb 1 ; $0007
00008                           byte_RAM_8:
00008                           	.dsb 1 ; $0008
00009                           byte_RAM_9:
00009                           	.dsb 1 ; $0009
0000A                           byte_RAM_A:
0000A                           	.dsb 1 ; $000a
0000B                           byte_RAM_B:
0000B                           	.dsb 1 ; $000b
0000C                           byte_RAM_C:
0000C                           	.dsb 1 ; $000c
0000D                           byte_RAM_D:
0000D                           	.dsb 1 ; $000d
0000E                           byte_RAM_E:
0000E                           	.dsb 1 ; $000e
0000F                           byte_RAM_F:
0000F                           	.dsb 1 ; $000f
00010                           ; This is used as a global counter.
00010                           ; It continuouly increments during gameplay and freezes for the pause screen
00010                           ; and title cards. On the character select screen, it is used to count down
00010                           ; before showing the title card.
00010                           byte_RAM_10:
00010                           	.dsb 1 ; $0010
00011                           ScreenUpdateIndex:
00011                           	.dsb 1 ; $0011
00012                           ; next object slot to use?
00012                           byte_RAM_12:
00012                           	.dsb 1 ; $0012
00013                           BreakStartLevelLoop:
00013                           	.dsb 1 ; $0013
00014                           
00014                           MarioSnoringLoopCounter: ; counts down snore loops before moving to the next animation sequence
00014                           TitleScreenPPUAddrHi:
00014                           PlayerXHi:
00014                           	.dsb 1 ; $0014
00015                           MarioSnoringFrameIndex: ; index in frame lookup table
00015                           TitleScreenPPUAddrLo:
00015                           ObjectXHi:
00015                           	.dsb 1 ; $0015
00016                           MarioSnoringFrameCounter: ; counts down frames in a snore loop
00016                           TitleScreenPPULength:
00016                           	.dsb 1 ; 1                ; $0016
00017                           MarioSnoringWaveFrame:
00017                           TitleScreenStoryNeedsClear: ; set when the text area needs to be cleared for the story
00017                           	.dsb 1 ; 2                ; $0017
00018                           MarioSnoringWaveFrameCounter: ; controls waving speed
00018                           TitleScreenStoryTextIndex:
00018                           	.dsb 1 ; 3                ; $0018
00019                           MarioSnoringCounter5:
00019                           TitleScreenStoryDone: ; RAM $0002 check will restart title screen when set
00019                           	.dsb 1 ; 4                ; $0019
0001A                           MarioSnoringCounter6:
0001A                           TitleScreenStoryTextLineTimer: ; used to pause between writing lines of text
0001A                           	.dsb 1 ; 5                ; $001a
0001B                           MarioSnoringCounter7:
0001B                           	.dsb 1 ; 6                ; $001b
0001C                           MarioSnoringTheEndFrameCounter: ; controls writing speed
0001C                           	.dsb 1 ; 7                ; $001c
0001D                           MarioSnoringCounter9:
0001D                           	.dsb 1 ; 8                ; $001d
0001E                           
0001E                           PlayerYHi:
0001E                           CastRollSpriteSetupTemp:
0001E                           	.dsb 1 ; $001e
0001F                           ObjectYHi:
0001F                           CastRollSprite1A:
0001F                           	.dsb 1 ; $001f
00020                           CastRollSprite1B:
00020                           	.dsb 1 ; 1                ; $0020
00021                           CastRollSprite1C:
00021                           	.dsb 1 ; 2                ; $0021
00022                           CastRollSprite2A:
00022                           	.dsb 1 ; 3                ; $0022
00023                           CastRollSprite2B:
00023                           	.dsb 1 ; 4                ; $0023
00024                           CastRollSprite2C:
00024                           	.dsb 1 ; 5                ; $0024
00025                           CastRollSprite3A:
00025                           	.dsb 1 ; 6                ; $0025
00026                           CastRollSprite3B:
00026                           	.dsb 1 ; 7                ; $0026
00027                           CastRollSprite3C:
00027                           	.dsb 1 ; 8                ; $0027
00028                           
00028                           PlayerXLo:
00028                           CastRollTimer:
00028                           	.dsb 1 ; $0028
00029                           ObjectXLo:
00029                           CastRollSequenceIndex:
00029                           	.dsb 1 ; $0029
0002A                           CastRollFadePaletteIndex:
0002A                           	.dsb 1 ; 1                ; $002a
0002B                           CastRollSpriteIndex:
0002B                           	.dsb 1 ; 2                ; $002b
0002C                           	.dsb 1 ; 3                ; $002c
0002D                           	.dsb 1 ; 4                ; $002d
0002E                           CastRollThrottle:
0002E                           	.dsb 1 ; 5                ; $002e
0002F                           CastRollSpriteLo:
0002F                           	.dsb 1 ; 6                ; $002f
00030                           CastRollSpriteHi:
00030                           	.dsb 1 ; 7                ; $0030
00031                           	.dsb 1 ; 8                ; $0031
00032                           
00032                           PlayerYLo:
00032                           	.dsb 1 ; $0032
00033                           ObjectYLo:
00033                           	.dsb 1 ; $0033
00034                           	.dsb 1 ; 1                ; $0034
00035                           CastRollSpriteActive1:
00035                           	.dsb 1 ; 2                ; $0035
00036                           CastRollSpriteActive2:
00036                           	.dsb 1 ; 3                ; $0036
00037                           CastRollSpriteActive3:
00037                           	.dsb 1 ; 4                ; $0037
00038                           CastRollSpriteActive4:
00038                           	.dsb 1 ; 5                ; $0038
00039                           CastRollSpriteCounter1:
00039                           	.dsb 1 ; 6                ; $0039
0003A                           CastRollSpriteCounter2:
0003A                           	.dsb 1 ; 7                ; $003a
0003B                           CastRollSpriteCounter3:
0003B                           	.dsb 1 ; 8                ; $003b
0003C                           
0003C                           CastRoll_Temp9:
0003C                           PlayerXVelocity:
0003C                           	.dsb 1 ; $003c
0003D                           CastRoll_TempA:
0003D                           ObjectXVelocity:
0003D                           	.dsb 1 ; $003d
0003E                           CastRoll_TempA1:
0003E                           	.dsb 1 ; 1                ; $003e
0003F                           CastRollLastSprite: ; Set to show TRICLYDE and queue up Wart
0003F                           	.dsb 1 ; 2                ; $003f
00040                           	.dsb 1 ; 3                ; $0040
00041                           	.dsb 1 ; 4                ; $0041
00042                           	.dsb 1 ; 5                ; $0042
00043                           	.dsb 1 ; 6                ; $0043
00044                           	.dsb 1 ; 7                ; $0044
00045                           	.dsb 1 ; 8                ; $0045
00046                           
00046                           PlayerYVelocity:
00046                           	.dsb 1 ; $0046
00047                           ObjectYVelocity:
00047                           	.dsb 1 ; $0047
00048                           	.dsb 1 ; 1                ; $0048
00049                           	.dsb 1 ; 2                ; $0049
0004A                           	.dsb 1 ; 3                ; $004a
0004B                           	.dsb 1 ; 4                ; $004b
0004C                           	.dsb 1 ; 5                ; $004c
0004D                           	.dsb 1 ; 6                ; $004d
0004E                           	.dsb 1 ; 7                ; $004e
0004F                           	.dsb 1 ; 8                ; $004f
00050                           
00050                           ;
00050                           ; Player and Object States
00050                           ; ========================
00050                           ;
00050                           ; Some of these are for players, some of these are for objects/enemies
00050                           ;
00050                           ; $00 Normal
00050                           ; $01 ?
00050                           ; $02 Lifting up object
00050                           ; $03 ?
00050                           ; $04 Going down vase (causes warp if poked)
00050                           ; $05 Exiting vase
00050                           ; $06 ?
00050                           ; $07 Dying (falls off screen)
00050                           ; $08 Shrinking
00050                           ; $09+ Crash?
00050                           ;
00050                           CastRollSpriteOffset: ; determines how long until the next sprite is allowed to spawn
00050                           PlayerState:
00050                           	.dsb 1 ; $0050
00051                           EnemyState:
00051                           	.dsb 1 ; $0051
00052                           	.dsb 1 ; 1                ; $0052
00053                           	.dsb 1 ; 2                ; $0053
00054                           	.dsb 1 ; 3                ; $0054
00055                           	.dsb 1 ; 4                ; $0055
00056                           	.dsb 1 ; 5                ; $0056
00057                           	.dsb 1 ; 6                ; $0057
00058                           	.dsb 1 ; 7                ; $0058
00059                           	.dsb 1 ; 8                ; $0059
0005A                           
0005A                           PlayerCollision: ; see CollisionFlags enum for bit definitions
0005A                           	.dsb 1 ; $005a
0005B                           EnemyCollision:
0005B                           	.dsb 1 ; $005b
0005C                           	.dsb 1 ; 1                ; $005c
0005D                           	.dsb 1 ; 2                ; $005d
0005E                           	.dsb 1 ; 3                ; $005e
0005F                           	.dsb 1 ; 4                ; $005f
00060                           	.dsb 1 ; 5                ; $0060
00061                           	.dsb 1 ; 6                ; $0061
00062                           	.dsb 1 ; 7                ; $0062
00063                           	.dsb 1 ; 8                ; $0063
00064                           
00064                           PlayerAttributes:
00064                           	.dsb 1 ; $0064
00065                           ObjectAttributes:
00065                           	.dsb 1 ; $0065
00066                           	.dsb 1 ; 1                ; $0066
00067                           	.dsb 1 ; 2                ; $0067
00068                           	.dsb 1 ; 3                ; $0068
00069                           	.dsb 1 ; 4                ; $0069
0006A                           	.dsb 1 ; 5                ; $006a
0006B                           	.dsb 1 ; 6                ; $006b
0006C                           	.dsb 1 ; 7                ; $006c
0006D                           	.dsb 1 ; 8                ; $006d
0006E                           
0006E                           ; $02 if moving left, $01 otherwise?
0006E                           PlayerMovementDirection:
0006E                           	.dsb 1 ; $006e
0006F                           EnemyMovementDirection:
0006F                           	.dsb 1 ; $006f
00070                           	.dsb 1 ; 1                ; $0070
00071                           	.dsb 1 ; 2                ; $0071
00072                           	.dsb 1 ; 3                ; $0072
00073                           	.dsb 1 ; 4                ; $0073
00074                           	.dsb 1 ; 5                ; $0074
00075                           	.dsb 1 ; 6                ; $0075
00076                           	.dsb 1 ; 7                ; $0076
00077                           	.dsb 1 ; 8                ; $0077
00078                           
00078                           ; FOR RENT
00078                           IFDEF PLAYER_HITBOX
00078                           PlayerHitbox:
00078                           ENDIF
00078                           	.dsb 1 ; $0078
00079                           ; This is set on entering subspace, depending
00079                           ; on which particular mushroom is on the screen
00079                           ; (used to determine if it should show up
00079                           ; and also which mushroom it marks as collected)
00079                           ;
00079                           ; This also seems to determine a few other things:
00079                           ; - Tweeter jumps
00079                           ; - Falling log height
00079                           ; - Birdo subtype
00079                           ; etc.
00079                           ;
00079                           EnemyVariable:
00079                           	.dsb 1 ; $0079
0007A                           	.dsb 1 ; 1 ; $007a
0007B                           	.dsb 1 ; 2 ; $007b
0007C                           	.dsb 1 ; 3 ; $007c
0007D                           	.dsb 1 ; 4 ; $007d
0007E                           	.dsb 1 ; 5 ; $007e
0007F                           	.dsb 1 ; 6 ; $007f
00080                           	.dsb 1 ; 7 ; $0080
00081                           	.dsb 1 ; 8 ; $0081
00082                           
00082                           PlayerStateTimer:
00082                           	.dsb 1 ; $0082
00083                           FreeSubconsTimer:
00083                           	.dsb 1 ; $0083
00084                           PlayerWalkFrameCounter: ; used for controlling speed of walk animation
00084                           	.dsb 1 ; $0084
00085                           DamageInvulnTime:
00085                           	.dsb 1 ; $0085
00086                           ObjectTimer1:
00086                           	.dsb 1 ; $0086
00087                           	.dsb 1 ; 1                ; $0087
00088                           	.dsb 1 ; 2                ; $0088
00089                           	.dsb 1 ; 3                ; $0089
0008A                           	.dsb 1 ; 4                ; $008a
0008B                           	.dsb 1 ; 5                ; $008b
0008C                           	.dsb 1 ; 6                ; $008c
0008D                           	.dsb 1 ; 7                ; $008d
0008E                           FreeSubconsCorkCounter:
0008E                           	.dsb 1 ; $008e
0008F                           ; $00 Mario
0008F                           ; $01 Princess
0008F                           ; $02 Toad
0008F                           ; $03 Luigi
0008F                           CurrentCharacter:
0008F                           	.dsb 1 ; $008f
00090                           ObjectType:
00090                           	.dsb 1 ; $0090
00091                           	.dsb 1 ; 1                ; $0091
00092                           	.dsb 1 ; 2                ; $0092
00093                           	.dsb 1 ; 3                ; $0093
00094                           	.dsb 1 ; 4                ; $0094
00095                           	.dsb 1 ; 5                ; $0095
00096                           	.dsb 1 ; 6                ; $0096
00097                           	.dsb 1 ; 7                ; $0097
00098                           	.dsb 1 ; 8                ; $0098
00099                           ; $00 = on ground or enemy, $01 = in air
00099                           PlayerInAir:
00099                           	.dsb 1 ; $0099
0009A                           IFNDEF PLAYER_HITBOX
0009A                           PlayerHitbox:
0009A                           ENDIF
0009A                           PlayerDucking:
0009A                           	.dsb 1 ; $009a
0009B                           PlayerWalkFrame:
0009B                           	.dsb 1 ; $009b
0009C                           HoldingItem:
0009C                           	.dsb 1 ; $009c
0009D                           ; $00 = left, $01 = right
0009D                           PlayerDirection:
0009D                           	.dsb 1 ; $009d
0009E                           ; This (unused?) counter increments as long as the player is standing on an
0009E                           ; object, including a couple frames while lifting an object.
0009E                           PlayerRidingTimer:
0009E                           	.dsb 1 ; $009e
0009F                           ObjectAnimationTimer:
0009F                           	.dsb 1 ; $009f
000A0                           	.dsb 1 ; $00a0
000A1                           	.dsb 1 ; $00a1
000A2                           	.dsb 1 ; $00a2
000A3                           	.dsb 1 ; $00a3
000A4                           	.dsb 1 ; $00a4
000A5                           	.dsb 1 ; $00a5
000A6                           	.dsb 1 ; $00a6
000A7                           	.dsb 1 ; $00a7
000A8                           
000A8                           ; Set to 7 when lifting, then stays at 1
000A8                           ; Note that this doesn't seem to actually
000A8                           ; make you carry an item, it just THINKS
000A8                           ; it's being carried.
000A8                           ObjectBeingCarriedTimer:
000A8                           	.dsb 1 ; $00a8
000A9                           	.dsb 1 ; $00a9
000AA                           	.dsb 1 ; $00aa
000AB                           	.dsb 1 ; $00ab
000AC                           	.dsb 1 ; $00ac
000AD                           	.dsb 1 ; $00ad
000AE                           	.dsb 1 ; $00ae
000AF                           	.dsb 1 ; $00af
000B0                           	.dsb 1 ; $00b0
000B1                           
000B1                           EnemyArray_B1:
000B1                           	.dsb 1 ; $00b1
000B2                           	.dsb 1 ; $00b2
000B3                           	.dsb 1 ; $00b3
000B4                           	.dsb 1 ; $00b4
000B5                           	.dsb 1 ; $00b5
000B6                           	.dsb 1 ; $00b6
000B7                           	.dsb 1 ; $00b7
000B8                           	.dsb 1 ; $00b8
000B9                           	.dsb 1 ; $00b9
000BA                           
000BA                           ; Number of pixels to shift the camera on the next frame to get to its "ideal"
000BA                           ; position. The left/right bounds of the area will overrule this.
000BA                           MoveCameraX:
000BA                           	.dsb 1 ; $00ba
000BB                           CurrentMusicPointer:
000BB                           	.dsb 2 ; $00bb
000BD                           NextFrequencyLo:
000BD                           	.dsb 1 ; $00bd
000BE                           NextFrequencyHi:
000BE                           	.dsb 1 ; $00be
000BF                           ; $00BF and $00C0 are never written, but referenced by the music engine.
000BF                           ; Seems like they were intended to be either instrument start offets or
000BF                           ; duty/volume/envelope for the square channels, but it's not totally clear
000BF                           ; from the code, and doesn't actually function as written?
000BF                           MusicSquareInstrumentStartOffset: ; (unused; read but never initialized)
000BF                           	.dsb 1 ; $00bf
000C0                           MusicSquareEnvelope: ; (unused; always overwritten)
000C0                           	.dsb 1 ; $00c0
000C1                           SoundEffect1DataOffset:
000C1                           	.dsb 1 ; $00c1
000C2                           IFNDEF EXPAND_MUSIC
000C2                           MusicSquare2Lo: ; (unused)
000C2                           ENDIF
000C2                           	.dsb 1 ; $00c2
000C3                           	.dsb 1 ; $00c3
000C4                           SoundEffectTimer2:
000C4                           	.dsb 1 ; $00c4
000C5                           ; FOR RENT
000C5                           	.dsb 1 ; $00c5
000C6                           ; FOR RENT
000C6                           	.dsb 1 ; $00c6
000C7                           PlayerAnimationFrame:
000C7                           	.dsb 1 ; $00c7
000C8                           PPUScrollYHiMirror:
000C8                           	.dsb 1 ; $00c8
000C9                           PPUScrollXHiMirror:
000C9                           	.dsb 1 ; $00c9
000CA                           ; Not sure about this, but seems to be that way
000CA                           ScreenYHi:
000CA                           	.dsb 1 ; $00ca
000CB                           ; Not sure about this either
000CB                           ScreenYLo:
000CB                           	.dsb 1 ; $00cb
000CC                           
000CC                           RawEnemyData:
000CC                           	.dsb 1 ; $00cc
000CD                           	.dsb 1 ; $00cd
000CE                           
000CE                           ; Drawing boundary table, used when scrolling in either direction
000CE                           ; - Upper nybble: tile offset (columns/rows)
000CE                           ; - Lower nybble indicates the page
000CE                           BackgroundUpdateBoundary: ; full draw
000CE                           	.dsb 1 ; $00ce
000CF                           BackgroundUpdateBoundaryBackward: ; left/top
000CF                           	.dsb 1 ; $00cf
000D0                           BackgroundUpdateBoundaryForward: ; right/bottom
000D0                           	.dsb 1 ; $00d0
000D1                           DrawBackgroundTilesPPUAddrHi:
000D1                           	.dsb 1 ; $00d1
000D2                           DrawBackgroundTilesPPUAddrLo:
000D2                           	.dsb 1 ; $00d2
000D3                           DrawBackgroundTilesPPUAddrLoBackward:
000D3                           	.dsb 1 ; $00d3
000D4                           DrawBackgroundTilesPPUAddrLoForward:
000D4                           	.dsb 1 ; $00d4
000D5                           byte_RAM_D5:
000D5                           	.dsb 1 ; $00d5
000D6                           CopyBackgroundCounter:
000D6                           	.dsb 1 ; $00d6
000D7                           ReadLevelDataOffset:
000D7                           	.dsb 1 ; $00d7
000D8                           
000D8                           ;
000D8                           ; %xxxxxADD
000D8                           ;
000D8                           ; - A = screen interval scrolling is active (vertical levels)
000D8                           ; - D = direction ($00 = none, $01 = up/left, $02 = down/right)
000D8                           ;
000D8                           NeedsScroll:
000D8                           	.dsb 1 ; $00d8
000D9                           ; Attribute data to use for the background tiles scrolling into view.
000D9                           ; For vertical, this covers four rows of tiles, right-to-left.
000D9                           ; For horizontal area, this covers four columns of tiles, bottom-to-top.
000D9                           ScrollingPPUAttributeUpdateBuffer:
000D9                           	.dsb 1 ; $00d9
000DA                           	.dsb 1 ; $00da
000DB                           	.dsb 1 ; $00db
000DC                           	.dsb 1 ; $00dc
000DD                           	.dsb 1 ; $00dd
000DE                           	.dsb 1 ; $00de
000DF                           	.dsb 1 ; $00df
000E0                           	.dsb 1 ; $00e0
000E1                           ; Attributes update up
000E1                           byte_RAM_E1:
000E1                           	.dsb 1 ; $00e1
000E2                           ; Attributes update down
000E2                           byte_RAM_E2:
000E2                           	.dsb 1 ; $00e2
000E3                           PPUAttributeUpdateCounter:
000E3                           	.dsb 1 ; $00e3
000E4                           byte_RAM_E4:
000E4                           	.dsb 1 ; $00e4
000E5                           byte_RAM_E5:
000E5                           	.dsb 1 ; $00e5
000E6                           byte_RAM_E6:
000E6                           	.dsb 1 ; $00e6
000E7                           byte_RAM_E7:
000E7                           	.dsb 1 ; $00e7
000E8                           byte_RAM_E8:
000E8                           	.dsb 1 ; $00e8
000E9                           ReadLevelDataAddress:
000E9                           	.dsb 1 ; $00e9
000EA                           	.dsb 1 ; $00ea
000EB                           NMIWaitFlag:
000EB                           	.dsb 1 ; $00eb
000EC                           IsHorizontalLevel:
000EC                           	.dsb 1 ; $00ec
000ED                           byte_RAM_ED:
000ED                           	.dsb 1 ; $00ed
000EE                           byte_RAM_EE:
000EE                           	.dsb 1 ; $00ee
000EF                           byte_RAM_EF:
000EF                           	.dsb 1 ; $00ef
000F0                           ; Set this to the location of PPU data to be drawn
000F0                           ; to the screen (somehow).
000F0                           ;
000F0                           ; Common value of $0301, which is where minor
000F0                           ; PPU updates are stored in memory.
000F0                           RAM_PPUDataBufferPointer:
000F0                           	.dsb 2 ; $00f0
000F2                           byte_RAM_F2:
000F2                           	.dsb 1 ; $00f2
000F3                           byte_RAM_F3:
000F3                           	.dsb 1 ; $00f3
000F4                           byte_RAM_F4:
000F4                           	.dsb 1 ; $00f4
000F5                           Player1JoypadPress:
000F5                           	.dsb 1 ; $00f5
000F6                           Player2JoypadPress:
000F6                           	.dsb 1 ; $00f6
000F7                           Player1JoypadHeld:
000F7                           	.dsb 1 ; $00f7
000F8                           Player2JoypadHeld:
000F8                           	.dsb 1 ; $00f8
000F9                           	.dsb 1 ; $00f9
000FA                           	.dsb 1 ; $00fa
000FB                           	.dsb 1 ; $00fb
000FC                           PPUScrollYMirror:
000FC                           	.dsb 1 ; $00fc
000FD                           PPUScrollXMirror:
000FD                           	.dsb 1 ; $00fd
000FE                           PPUMaskMirror:
000FE                           	.dsb 1 ; $00fe
000FF                           PPUCtrlMirror:
000FF                           	.dsb 1 ; $00ff
00100                           
00100                           
00100                           StackArea:
00100                           	.dsb $100   ; $0100 - $01FF
00200                           
00200                           SpriteDMAArea:
00200                           	.dsb $100   ; $0200 - $02FF
00300                           
00300                           ;
00300                           ; Arbitrary PPU updates happen using the buffer at RAM $0301 when `ScreenUpdateIndex` is zero.
00300                           ; In that case, `UpdatePPUFromBufferNMI` will read whatever is in this buffer and update the PPU.
00300                           ; When there is nothing to update, the first byte is `$00`, which will cause it to exit.
00300                           ;
00300                           ; $0300 is used as an offset when writing to the buffer, which allows multiple updates to write to
00300                           ; the buffer without overwriting each other.
00300                           ;
00300                           byte_RAM_300:
00300                           	.dsb 1 ; $0300
00301                           PPUBuffer_301:
00301                           	.dsb 1 ; $0301
00302                           	.dsb 1 ; $0302
00303                           	.dsb 1 ; $0303
00304                           	.dsb 1 ; $0304
00305                           	.dsb 1 ; $0305
00306                           	.dsb 1 ; $0306
00307                           	.dsb 1 ; $0307
00308                           	.dsb 1 ; $0308
00309                           	.dsb 1 ; $0309
0030A                           	.dsb 1 ; $030a
0030B                           	.dsb 1 ; $030b
0030C                           	.dsb 1 ; $030c
0030D                           	.dsb 1 ; $030d
0030E                           	.dsb 1 ; $030e
0030F                           	.dsb 1 ; $030f
00310                           	.dsb 1 ; $0310
00311                           	.dsb 1 ; $0311
00312                           	.dsb 1 ; $0312
00313                           	.dsb 1 ; $0313
00314                           	.dsb 1 ; $0314
00315                           	.dsb 1 ; $0315
00316                           	.dsb 1 ; $0316
00317                           	.dsb 1 ; $0317
00318                           	.dsb 1 ; $0318
00319                           	.dsb 1 ; $0319
0031A                           	.dsb 1 ; $031a
0031B                           	.dsb 1 ; $031b
0031C                           	.dsb 1 ; $031c
0031D                           	.dsb 1 ; $031d
0031E                           	.dsb 1 ; $031e
0031F                           	.dsb 1 ; $031f
00320                           	.dsb 1 ; $0320
00321                           	.dsb 1 ; $0321
00322                           	.dsb 1 ; $0322
00323                           	.dsb 1 ; $0323
00324                           	.dsb 1 ; $0324
00325                           	.dsb 1 ; $0325
00326                           	.dsb 1 ; $0326
00327                           	.dsb 1 ; $0327
00328                           	.dsb 1 ; $0328
00329                           	.dsb 1 ; $0329
0032A                           	.dsb 1 ; $032a
0032B                           	.dsb 1 ; $032b
0032C                           	.dsb 1 ; $032c
0032D                           	.dsb 1 ; $032d
0032E                           	.dsb 1 ; $032e
0032F                           	.dsb 1 ; $032f
00330                           	.dsb 1 ; $0330
00331                           	.dsb 1 ; $0331
00332                           	.dsb 1 ; $0332
00333                           	.dsb 1 ; $0333
00334                           	.dsb 1 ; $0334
00335                           	.dsb 1 ; $0335
00336                           	.dsb 1 ; $0336
00337                           	.dsb 1 ; $0337
00338                           	.dsb 1 ; $0338
00339                           	.dsb 1 ; $0339
0033A                           	.dsb 1 ; $033a
0033B                           	.dsb 1 ; $033b
0033C                           	.dsb 1 ; $033c
0033D                           	.dsb 1 ; $033d
0033E                           	.dsb 1 ; $033e
0033F                           	.dsb 1 ; $033f
00340                           	.dsb 1 ; $0340
00341                           	.dsb 1 ; $0341
00342                           	.dsb 1 ; $0342
00343                           	.dsb 1 ; $0343
00344                           	.dsb 1 ; $0344
00345                           	.dsb 1 ; $0345
00346                           	.dsb 1 ; $0346
00347                           	.dsb 1 ; $0347
00348                           	.dsb 1 ; $0348
00349                           	.dsb 1 ; $0349
0034A                           	.dsb 1 ; $034a
0034B                           	.dsb 1 ; $034b
0034C                           	.dsb 1 ; $034c
0034D                           	.dsb 1 ; $034d
0034E                           	.dsb 1 ; $034e
0034F                           	.dsb 1 ; $034f
00350                           	.dsb 1 ; $0350
00351                           	.dsb 1 ; $0351
00352                           	.dsb 1 ; $0352
00353                           	.dsb 1 ; $0353
00354                           	.dsb 1 ; $0354
00355                           	.dsb 1 ; $0355
00356                           	.dsb 1 ; $0356
00357                           	.dsb 1 ; $0357
00358                           	.dsb 1 ; $0358
00359                           	.dsb 1 ; $0359
0035A                           	.dsb 1 ; $035a
0035B                           	.dsb 1 ; $035b
0035C                           	.dsb 1 ; $035c
0035D                           	.dsb 1 ; $035d
0035E                           	.dsb 1 ; $035e
0035F                           	.dsb 1 ; $035f
00360                           	.dsb 1 ; $0360
00361                           	.dsb 1 ; $0361
00362                           	.dsb 1 ; $0362
00363                           	.dsb 1 ; $0363
00364                           	.dsb 1 ; $0364
00365                           	.dsb 1 ; $0365
00366                           	.dsb 1 ; $0366
00367                           	.dsb 1 ; $0367
00368                           	.dsb 1 ; $0368
00369                           	.dsb 1 ; $0369
0036A                           	.dsb 1 ; $036a
0036B                           	.dsb 1 ; $036b
0036C                           	.dsb 1 ; $036c
0036D                           	.dsb 1 ; $036d
0036E                           	.dsb 1 ; $036e
0036F                           	.dsb 1 ; $036f
00370                           	.dsb 1 ; $0370
00371                           	.dsb 1 ; $0371
00372                           	.dsb 1 ; $0372
00373                           	.dsb 1 ; $0373
00374                           	.dsb 1 ; $0374
00375                           	.dsb 1 ; $0375
00376                           	.dsb 1 ; $0376
00377                           	.dsb 1 ; $0377
00378                           	.dsb 1 ; $0378
00379                           	.dsb 1 ; $0379
0037A                           	.dsb 1 ; $037a
0037B                           	.dsb 1 ; $037b
0037C                           	.dsb 1 ; $037c
0037D                           	.dsb 1 ; $037d
0037E                           	.dsb 1 ; $037e
0037F                           	.dsb 1 ; $037f
00380                           ScrollingPPUTileUpdateBuffer:
00380                           	.dsb 1 ; $0380
00381                           	.dsb 1 ; $0381
00382                           	.dsb 1 ; $0382
00383                           	.dsb 1 ; $0383
00384                           	.dsb 1 ; $0384
00385                           	.dsb 1 ; $0385
00386                           	.dsb 1 ; $0386
00387                           	.dsb 1 ; $0387
00388                           	.dsb 1 ; $0388
00389                           	.dsb 1 ; $0389
0038A                           	.dsb 1 ; $038a
0038B                           	.dsb 1 ; $038b
0038C                           	.dsb 1 ; $038c
0038D                           	.dsb 1 ; $038d
0038E                           	.dsb 1 ; $038e
0038F                           	.dsb 1 ; $038f
00390                           	.dsb 1 ; $0390
00391                           	.dsb 1 ; $0391
00392                           	.dsb 1 ; $0392
00393                           	.dsb 1 ; $0393
00394                           	.dsb 1 ; $0394
00395                           	.dsb 1 ; $0395
00396                           	.dsb 1 ; $0396
00397                           	.dsb 1 ; $0397
00398                           	.dsb 1 ; $0398
00399                           	.dsb 1 ; $0399
0039A                           	.dsb 1 ; $039a
0039B                           	.dsb 1 ; $039b
0039C                           	.dsb 1 ; $039c
0039D                           	.dsb 1 ; $039d
0039E                           	.dsb 1 ; $039e
0039F                           	.dsb 1 ; $039f
003A0                           	.dsb 1 ; $03a0
003A1                           	.dsb 1 ; $03a1
003A2                           	.dsb 1 ; $03a2
003A3                           	.dsb 1 ; $03a3
003A4                           	.dsb 1 ; $03a4
003A5                           	.dsb 1 ; $03a5
003A6                           	.dsb 1 ; $03a6
003A7                           	.dsb 1 ; $03a7
003A8                           	.dsb 1 ; $03a8
003A9                           	.dsb 1 ; $03a9
003AA                           	.dsb 1 ; $03aa
003AB                           	.dsb 1 ; $03ab
003AC                           	.dsb 1 ; $03ac
003AD                           	.dsb 1 ; $03ad
003AE                           	.dsb 1 ; $03ae
003AF                           	.dsb 1 ; $03af
003B0                           	.dsb 1 ; $03b0
003B1                           	.dsb 1 ; $03b1
003B2                           	.dsb 1 ; $03b2
003B3                           	.dsb 1 ; $03b3
003B4                           	.dsb 1 ; $03b4
003B5                           	.dsb 1 ; $03b5
003B6                           	.dsb 1 ; $03b6
003B7                           	.dsb 1 ; $03b7
003B8                           	.dsb 1 ; $03b8
003B9                           	.dsb 1 ; $03b9
003BA                           	.dsb 1 ; $03ba
003BB                           	.dsb 1 ; $03bb
003BC                           
003BC                           ; Used for scrolling in horizontal levels
003BC                           DrawBackgroundAttributesPPUAddrHi:
003BC                           	.dsb 1 ; $03bc
003BD                           DrawBackgroundAttributesPPUAddrLo:
003BD                           	.dsb 1 ; $03bd
003BE                           ; Attribute data to use for the background tiles scrolling into view in
003BE                           ; horizontal areas.
003BE                           HorizontalScrollingPPUAttributeUpdateBuffer:
003BE                           	.dsb 1 ; $03be
003BF                           	.dsb 1 ; $03bf
003C0                           	.dsb 1 ; $03c0
003C1                           	.dsb 1 ; $03c1
003C2                           	.dsb 1 ; $03c2
003C3                           	.dsb 1 ; $03c3
003C4                           	.dsb 1 ; $03c4
003C5                           	.dsb 1 ; $03c5
003C6                           
003C6                           	.dsb 1 ; $03c6
003C7                           	.dsb 1 ; $03c7
003C8                           	.dsb 1 ; $03c8
003C9                           	.dsb 1 ; $03c9
003CA                           	.dsb 1 ; $03ca
003CB                           	.dsb 1 ; $03cb
003CC                           	.dsb 1 ; $03cc
003CD                           	.dsb 1 ; $03cd
003CE                           	.dsb 1 ; $03ce
003CF                           	.dsb 1 ; $03cf
003D0                           	.dsb 1 ; $03d0
003D1                           	.dsb 1 ; $03d1
003D2                           	.dsb 1 ; $03d2
003D3                           	.dsb 1 ; $03d3
003D4                           	.dsb 1 ; $03d4
003D5                           	.dsb 1 ; $03d5
003D6                           	.dsb 1 ; $03d6
003D7                           	.dsb 1 ; $03d7
003D8                           	.dsb 1 ; $03d8
003D9                           	.dsb 1 ; $03d9
003DA                           	.dsb 1 ; $03da
003DB                           	.dsb 1 ; $03db
003DC                           	.dsb 1 ; $03dc
003DD                           	.dsb 1 ; $03dd
003DE                           	.dsb 1 ; $03de
003DF                           	.dsb 1 ; $03df
003E0                           	.dsb 1 ; $03e0
003E1                           	.dsb 1 ; $03e1
003E2                           	.dsb 1 ; $03e2
003E3                           	.dsb 1 ; $03e3
003E4                           	.dsb 1 ; $03e4
003E5                           	.dsb 1 ; $03e5
003E6                           	.dsb 1 ; $03e6
003E7                           	.dsb 1 ; $03e7
003E8                           	.dsb 1 ; $03e8
003E9                           	.dsb 1 ; $03e9
003EA                           	.dsb 1 ; $03ea
003EB                           	.dsb 1 ; $03eb
003EC                           	.dsb 1 ; $03ec
003ED                           	.dsb 1 ; $03ed
003EE                           	.dsb 1 ; $03ee
003EF                           	.dsb 1 ; $03ef
003F0                           	.dsb 1 ; $03f0
003F1                           	.dsb 1 ; $03f1
003F2                           	.dsb 1 ; $03f2
003F3                           	.dsb 1 ; $03f3
003F4                           	.dsb 1 ; $03f4
003F5                           	.dsb 1 ; $03f5
003F6                           	.dsb 1 ; $03f6
003F7                           	.dsb 1 ; $03f7
003F8                           	.dsb 1 ; $03f8
003F9                           	.dsb 1 ; $03f9
003FA                           	.dsb 1 ; $03fa
003FB                           	.dsb 1 ; $03fb
003FC                           	.dsb 1 ; $03fc
003FD                           	.dsb 1 ; $03fd
003FE                           	.dsb 1 ; $03fe
003FF                           	.dsb 1 ; $03ff
00400                           SpriteFlickerSlot:
00400                           	.dsb 1 ; $0400
00401                           
00401                           ; FOR RENT
00401                           	.dsb 1 ; $0401
00402                           ; FOR RENT
00402                           BossTileset:
00402                           	.dsb 1 ; $0402
00403                           ; FOR RENT
00403                           	.dsb 1 ; $0403
00404                           ; unused? written but never read
00404                           PreviousCharacter:
00404                           	.dsb 1 ; $0404
00405                           ; unused? written but never read
00405                           PreviousWorld:
00405                           	.dsb 1 ; $0405
00406                           ; FOR RENT
00406                           	.dsb 1 ; $0406
00407                           
00407                           PlayerXSubpixel:
00407                           	.dsb 1 ; $0407
00408                           ObjectXSubpixel:
00408                           	.dsb 1 ; $0408
00409                           	.dsb 1 ; $0409
0040A                           	.dsb 1 ; $040a
0040B                           	.dsb 1 ; $040b
0040C                           	.dsb 1 ; $040c
0040D                           	.dsb 1 ; $040d
0040E                           	.dsb 1 ; $040e
0040F                           	.dsb 1 ; $040f
00410                           	.dsb 1 ; $0410
00411                           
00411                           PlayerYSubpixel:
00411                           	.dsb 1 ; $0411
00412                           ObjectYSubpixel:
00412                           	.dsb 1 ; $0412
00413                           	.dsb 1 ; $0413
00414                           	.dsb 1 ; $0414
00415                           	.dsb 1 ; $0415
00416                           	.dsb 1 ; $0416
00417                           	.dsb 1 ; $0417
00418                           	.dsb 1 ; $0418
00419                           	.dsb 1 ; $0419
0041A                           	.dsb 1 ; $041a
0041B                           
0041B                           PlayerLock:
0041B                           	.dsb 1 ; $041b
0041C                           ObjectLock:
0041C                           	.dsb 1 ; $041c
0041D                           	.dsb 1 ; $041d
0041E                           	.dsb 1 ; $041e
0041F                           	.dsb 1 ; $041f
00420                           	.dsb 1 ; $0420
00421                           	.dsb 1 ; $0421
00422                           	.dsb 1 ; $0422
00423                           	.dsb 1 ; $0423
00424                           	.dsb 1 ; $0424
00425                           
00425                           ; $00 = none, $01 = up, $02 = down
00425                           VerticalScrollDirection:
00425                           	.dsb 1 ; $0425
00426                           ; Distance between bounding boxes during the last check
00426                           CollisionResultX:
00426                           	.dsb 1 ; $0426
00427                           CollisionResultY:
00427                           	.dsb 1 ; $0427
00428                           PlayerScreenX:
00428                           	.dsb 1 ; $0428
00429                           SpriteTempScreenX:
00429                           	.dsb 1 ; $0429
0042A                           PlayerScreenYHi:
0042A                           	.dsb 1 ; $042a
0042B                           PlayerScreenYLo:
0042B                           	.dsb 1 ; $042b
0042C                           SpriteTempScreenY:
0042C                           	.dsb 1 ; $042c
0042D                           ObjectBeingCarriedIndex:
0042D                           	.dsb 1 ; $042d
0042E                           
0042E                           ; FOR RENT
0042E                           	.dsb 1 ; $042e
0042F                           ObjectProjectileTimer:
0042F                           	.dsb 1 ; $042f
00430                           	.dsb 1 ; $0430
00431                           	.dsb 1 ; $0431
00432                           	.dsb 1 ; $0432
00433                           	.dsb 1 ; $0433
00434                           	.dsb 1 ; $0434
00435                           	.dsb 1 ; $0435
00436                           	.dsb 1 ; $0436
00437                           
00437                           ; FOR RENT
00437                           	.dsb 1 ; $0437
00438                           ObjectStunTimer:
00438                           	.dsb 1 ; $0438
00439                           	.dsb 1 ; $0439
0043A                           	.dsb 1 ; $043a
0043B                           	.dsb 1 ; $043b
0043C                           	.dsb 1 ; $043c
0043D                           	.dsb 1 ; $043d
0043E                           	.dsb 1 ; $043e
0043F                           	.dsb 1 ; $043f
00440                           
00440                           ; FOR RENT
00440                           	.dsb 1 ; $0440
00441                           ; Raw enemy data offset used to prevent enemy from spawning multiple times.
00441                           ; A value of `$FF` indicates that the enemy is not linked to any particular level data.
00441                           EnemyRawDataOffset:
00441                           	.dsb 1 ; $0441
00442                           	.dsb 1 ; $0442
00443                           	.dsb 1 ; $0443
00444                           	.dsb 1 ; $0444
00445                           	.dsb 1 ; $0445
00446                           	.dsb 1 ; $0446
00447                           	.dsb 1 ; $0447
00448                           	.dsb 1 ; $0448
00449                           
00449                           ; FOR RENT
00449                           	.dsb 1 ; $0449
0044A                           ObjectShakeTimer:
0044A                           	.dsb 1 ; $044a
0044B                           	.dsb 1 ; $044b
0044C                           	.dsb 1 ; $044c
0044D                           	.dsb 1 ; $044d
0044E                           	.dsb 1 ; $044e
0044F                           	.dsb 1 ; $044f
00450                           	.dsb 1 ; $0450
00451                           	.dsb 1 ; $0451
00452                           
00452                           ; FOR RENT
00452                           	.dsb 1 ; $0452
00453                           ObjectTimer2:
00453                           	.dsb 1 ; $0453
00454                           	.dsb 1 ; $0454
00455                           	.dsb 1 ; $0455
00456                           	.dsb 1 ; $0456
00457                           	.dsb 1 ; $0457
00458                           	.dsb 1 ; $0458
00459                           	.dsb 1 ; $0459
0045A                           	.dsb 1 ; $045a
0045B                           
0045B                           ; FOR RENT
0045B                           	.dsb 1 ; $045b
0045C                           ; Flashing timer
0045C                           ObjectFlashTimer:
0045C                           	.dsb 1 ; $045c
0045D                           	.dsb 1 ; $045d
0045E                           	.dsb 1 ; $045e
0045F                           	.dsb 1 ; $045f
00460                           	.dsb 1 ; $0460
00461                           	.dsb 1 ; $0461
00462                           	.dsb 1 ; $0462
00463                           	.dsb 1 ; $0463
00464                           
00464                           ; FOR RENT
00464                           	.dsb 1 ; $0464
00465                           EnemyHP:
00465                           	.dsb 1 ; $0465
00466                           	.dsb 1 ; $0466
00467                           	.dsb 1 ; $0467
00468                           	.dsb 1 ; $0468
00469                           	.dsb 1 ; $0469
0046A                           	.dsb 1 ; $046a
0046B                           	.dsb 1 ; $046b
0046C                           	.dsb 1 ; $046c
0046D                           
0046D                           	.dsb 1 ; $046d
0046E                           EnemyArray_46E:
0046E                           	.dsb 1 ; $046e
0046F                           	.dsb 1 ; $046f
00470                           	.dsb 1 ; $0470
00471                           	.dsb 1 ; $0471
00472                           	.dsb 1 ; $0472
00473                           	.dsb 1 ; $0473
00474                           	.dsb 1 ; $0474
00475                           	.dsb 1 ; $0475
00476                           
00476                           ; FOR RENT
00476                           	.dsb 1 ; $0476
00477                           EnemyArray_477:
00477                           	.dsb 1 ; $0477
00478                           	.dsb 1 ; $0478
00479                           	.dsb 1 ; $0479
0047A                           	.dsb 1 ; $047a
0047B                           	.dsb 1 ; $047b
0047C                           	.dsb 1 ; $047c
0047D                           	.dsb 1 ; $047d
0047E                           	.dsb 1 ; $047e
0047F                           
0047F                           ; FOR RENT
0047F                           	.dsb 1 ; $047f
00480                           EnemyArray_480:
00480                           	.dsb 1 ; $0480
00481                           	.dsb 1 ; $0481
00482                           	.dsb 1 ; $0482
00483                           	.dsb 1 ; $0483
00484                           	.dsb 1 ; $0484
00485                           	.dsb 1 ; $0485
00486                           	.dsb 1 ; $0486
00487                           	.dsb 1 ; $0487
00488                           	.dsb 1 ; $0488
00489                           
00489                           ObjectHitbox:
00489                           	.dsb 1 ; $0489
0048A                           	.dsb 1 ; $048a
0048B                           	.dsb 1 ; $048b
0048C                           	.dsb 1 ; $048c
0048D                           	.dsb 1 ; $048d
0048E                           	.dsb 1 ; $048e
0048F                           	.dsb 1 ; $048f
00490                           	.dsb 1 ; $0490
00491                           
00491                           	.dsb 1 ; $0491
00492                           EnemyArray_492:
00492                           	.dsb 1 ; $0492
00493                           	.dsb 1 ; $0493
00494                           	.dsb 1 ; $0494
00495                           	.dsb 1 ; $0495
00496                           	.dsb 1 ; $0496
00497                           	.dsb 1 ; $0497
00498                           	.dsb 1 ; $0498
00499                           	.dsb 1 ; $0499
0049A                           
0049A                           ; FOR RENT
0049A                           	.dsb 1 ; $049a
0049B                           EnemyArray_SpawnsDoor:
0049B                           	.dsb 1 ; $049b
0049C                           	.dsb 1 ; $049c
0049D                           	.dsb 1 ; $049d
0049E                           	.dsb 1 ; $049e
0049F                           	.dsb 1 ; $049f
004A0                           	.dsb 1 ; $04a0
004A1                           	.dsb 1 ; $04a1
004A2                           	.dsb 1 ; $04a2
004A3                           
004A3                           ; FOR RENT
004A3                           	.dsb 1 ; $04a3
004A4                           ; When set, the player will not move with the object while standing on it
004A4                           ObjectNonSticky:
004A4                           	.dsb 1 ; $04a4
004A5                           	.dsb 1 ; $04a5
004A6                           	.dsb 1 ; $04a6
004A7                           	.dsb 1 ; $04a7
004A8                           	.dsb 1 ; $04a8
004A9                           	.dsb 1 ; $04a9
004AA                           	.dsb 1 ; $04aa
004AB                           	.dsb 1 ; $04ab
004AC                           
004AC                           ; FOR RENT
004AC                           	.dsb 1 ; $04ac
004AD                           EnemiesKilledForHeart:
004AD                           	.dsb 1 ; $04ad
004AE                           AreaInitialized:
004AE                           	.dsb 1 ; $04ae
004AF                           ObjectCarriedOver:
004AF                           	.dsb 1 ; $04af
004B0                           KeyUsed:
004B0                           	.dsb 1 ; $04b0
004B1                           ; FOR RENT
004B1                           	.dsb 1 ; $04b1
004B2                           PlayerRidingCarpet:
004B2                           	.dsb 1 ; $04b2
004B3                           SubspaceDoorTimer:
004B3                           	.dsb 1 ; $04b3
004B4                           ; Probably set to 1 when Hawkmouth eats the player and starts closing
004B4                           HawkmouthClosing:
004B4                           	.dsb 1 ; $04b4
004B5                           ; Set to 01 on crystal get, Hawkmouth opens to 30
004B5                           CrystalAndHawkmouthOpenSize:
004B5                           	.dsb 1 ; $04b5
004B6                           ; Hawkmouth won't start opening until this hits 0
004B6                           HawkmouthOpenTimer:
004B6                           	.dsb 1 ; $04b6
004B7                           SubspaceTimer:
004B7                           	.dsb 1 ; $04b7
004B8                           BossBeaten:
004B8                           	.dsb 1 ; $04b8
004B9                           SwarmType:
004B9                           	.dsb 1 ; $04b9
004BA                           ; FOR RENT
004BA                           	.dsb 1 ; $04ba
004BB                           ; FOR RENT
004BB                           	.dsb 1 ; $04bb
004BC                           SkyColor:
004BC                           	.dsb 1 ; $04bc
004BD                           DoorAnimationTimer:
004BD                           	.dsb 1 ; $04bd
004BE                           ScreenBoundaryLeftHi:
004BE                           	.dsb 1 ; $04be
004BF                           ScreenBoundaryRightHi:
004BF                           	.dsb 1 ; $04bf
004C0                           ScreenBoundaryLeftLo:
004C0                           	.dsb 1 ; $04c0
004C1                           ScreenBoundaryRightLo:
004C1                           	.dsb 1 ; $04c1
004C2                           ; xF: Hearts - 1 ($0F=1HP, $1F=2HP, etc)
004C2                           PlayerHealth:
004C2                           	.dsb 1 ; $04c2
004C3                           ; $00: Max 2
004C3                           ; $01: Max 3
004C3                           ; $02: Max 4
004C3                           PlayerMaxHealth:
004C3                           	.dsb 1 ; $04c3
004C4                           POWQuakeTimer:
004C4                           	.dsb 1 ; $04c4
004C5                           BackgroundYOffset:
004C5                           	.dsb 1 ; $04c5
004C6                           SkyFlashTimer:
004C6                           	.dsb 1 ; $04c6
004C7                           PlayerInRocket:
004C7                           	.dsb 1 ; $04c7
004C8                           	.dsb 1 ; $04c8
004C9                           JumpFloatTimer:
004C9                           	.dsb 1 ; $04c9
004CA                           CrouchJumpTimer:
004CA                           	.dsb 1 ; $04ca
004CB                           
004CB                           PlayerXAcceleration:
004CB                           	.dsb 1 ; $04cb
004CC                           ObjectXAcceleration:
004CC                           	.dsb 1 ; $04cc
004CD                           	.dsb 1 ; $04cd
004CE                           	.dsb 1 ; $04ce
004CF                           	.dsb 1 ; $04cf
004D0                           	.dsb 1 ; $04d0
004D1                           	.dsb 1 ; $04d1
004D2                           	.dsb 1 ; $04d2
004D3                           	.dsb 1 ; $04d3
004D4                           
004D4                           ; FOR RENT
004D4                           	.dsb 1 ; $04d4
004D5                           PlayerYAcceleration:
004D5                           	.dsb 1 ; $04d5
004D6                           ObjectYAcceleration:
004D6                           	.dsb 1 ; $04d6
004D7                           	.dsb 1 ; $04d7
004D8                           	.dsb 1 ; $04d8
004D9                           	.dsb 1 ; $04d9
004DA                           	.dsb 1 ; $04da
004DB                           	.dsb 1 ; $04db
004DC                           	.dsb 1 ; $04dc
004DD                           	.dsb 1 ; $04dd
004DE                           
004DE                           ; FOR RENT
004DE                           	.dsb 1 ; $04de
004DF                           QuicksandDepth:
004DF                           	.dsb 1 ; $04df
004E0                           StarInvincibilityTimer:
004E0                           	.dsb 1 ; $04e0
004E1                           PlayerXLo_Init:
004E1                           	.dsb 1 ; $04e1
004E2                           PlayerYLo_Init:
004E2                           	.dsb 1 ; $04e2
004E3                           PlayerScreenX_Init:
004E3                           	.dsb 1 ; $04e3
004E4                           PlayerScreenYLo_Init:
004E4                           	.dsb 1 ; $04e4
004E5                           PlayerYVelocity_Init:
004E5                           	.dsb 1 ; $04e5
004E6                           PlayerState_Init:
004E6                           	.dsb 1 ; $04e6
004E7                           CurrentLevel_Init:
004E7                           	.dsb 1 ; $04e7
004E8                           CurrentLevelArea_Init:
004E8                           	.dsb 1 ; $04e8
004E9                           CurrentLevelEntryPage_Init:
004E9                           	.dsb 1 ; $04e9
004EA                           TransitionType_Init:
004EA                           	.dsb 1 ; $04ea
004EB                           ; something to do with sinking in quicksand
004EB                           byte_RAM_4EB:
004EB                           	.dsb 1 ; $04eb
004EC                           ; $00: In game
004EC                           ; $01: Level title card
004EC                           ; $02: Game over
004EC                           ; $03: Bonus chance
004EC                           ; $04+: Warp
004EC                           GameMode:
004EC                           	.dsb 1 ; $04ec
004ED                           ExtraLives:
004ED                           	.dsb 1 ; $04ed
004EE                           ; $00: None
004EE                           ; $01: Default jar
004EE                           ; $02: Pointer jar
004EE                           InJarType:
004EE                           	.dsb 1 ; $04ee
004EF                           EndOfLevelDoorPage:
004EF                           	.dsb 1 ; $04ef
004F0                           	.dsb 1 ; $04f0
004F1                           	.dsb 1 ; $04f1
004F2                           	.dsb 1 ; $04f2
004F3                           	.dsb 1 ; $04f3
004F4                           	.dsb 1 ; $04f4
004F5                           	.dsb 1 ; $04f5
004F6                           	.dsb 1 ; $04f6
004F7                           	.dsb 1 ; $04f7
004F8                           FryguySplitFlames:
004F8                           	.dsb 1 ; $04f8
004F9                           VegetableThrowerShotCounter:
004F9                           	.dsb 1 ; $04f9
004FA                           ScrollXLock:
004FA                           	.dsb 1 ; $04fa
004FB                           Mushroom1Pulled:
004FB                           	.dsb 1 ; $04fb
004FC                           Mushroom2Pulled:
004FC                           	.dsb 1 ; $04fc
004FD                           PokeyTempScreenX:
004FD                           	.dsb 1 ; $04fd
004FE                           ; FOR RENT
004FE                           	.dsb 1 ; $04fe
004FF                           StopwatchTimer:
004FF                           	.dsb 1 ; $04ff
00500                           ; FOR RENT
00500                           	.dsb 1 ; $0500
00501                           ; FOR RENT
00501                           	.dsb 1 ; $0501
00502                           ; Flag enabled while the area is rendering on initialization
00502                           byte_RAM_502:
00502                           	.dsb 1 ; $0502
00503                           ; FOR RENT
00503                           	.dsb 1 ; $0503
00504                           CameraScrollTiles:
00504                           	.dsb 1 ; $0504
00505                           byte_RAM_505:
00505                           	.dsb 1 ; $0505
00506                           PPUScrollCheckHi:
00506                           	.dsb 1 ; $0506
00507                           PPUScrollCheckLo:
00507                           	.dsb 1 ; $0507
00508                           ; FOR RENT
00508                           	.dsb 1 ; $0508
00509                           PPUScrollYMirror_Backup:
00509                           	.dsb 1 ; $0509
0050A                           PPUScrollXMirror_Backup:
0050A                           	.dsb 1 ; $050a
0050B                           PPUScrollYHiMirror_Backup:
0050B                           	.dsb 1 ; $050b
0050C                           PPUScrollXHiMirror_Backup:
0050C                           	.dsb 1 ; $050c
0050D                           byte_RAM_50D:
0050D                           	.dsb 1 ; $050d
0050E                           byte_RAM_50E:
0050E                           	.dsb 1 ; $050e
0050F                           PlayerXHi_Backup:
0050F                           	.dsb 1 ; $050f
00510                           PlayerYHi_Backup:
00510                           	.dsb 1 ; $0510
00511                           PlayerXLo_Backup:
00511                           	.dsb 1 ; $0511
00512                           PlayerYLo_Backup:
00512                           	.dsb 1 ; $0512
00513                           ScreenYHi_Backup:
00513                           	.dsb 1 ; $0513
00514                           ScreenBoundaryLeftHi_Backup:
00514                           	.dsb 1 ; $0514
00515                           ScreenYLo_Backup:
00515                           	.dsb 1 ; $0515
00516                           ; FOR RENT
00516                           	.dsb 1 ; $0516
00517                           byte_RAM_517:
00517                           	.dsb 1 ; $0517
00518                           ; FOR RENT
00518                           	.dsb 1 ; $0518
00519                           CurrentLevelAreaCopy:
00519                           	.dsb 1 ; $0519
0051A                           ; FOR RENT
0051A                           	.dsb 1 ; $051a
0051B                           DrawTileId:
0051B                           	.dsb 1 ; $051b
0051C                           HasScrollingPPUTilesUpdate:
0051C                           	.dsb 1 ; $051c
0051D                           AreaPointersByPage:
0051D                           	.dsb 1 ; $051d
0051E                           	.dsb 1 ; $051e
0051F                           	.dsb 1 ; $051f
00520                           	.dsb 1 ; $0520
00521                           	.dsb 1 ; $0521
00522                           	.dsb 1 ; $0522
00523                           	.dsb 1 ; $0523
00524                           	.dsb 1 ; $0524
00525                           	.dsb 1 ; $0525
00526                           	.dsb 1 ; $0526
00527                           	.dsb 1 ; $0527
00528                           	.dsb 1 ; $0528
00529                           	.dsb 1 ; $0529
0052A                           	.dsb 1 ; $052a
0052B                           	.dsb 1 ; $052b
0052C                           	.dsb 1 ; $052c
0052D                           	.dsb 1 ; $052d
0052E                           	.dsb 1 ; $052e
0052F                           	.dsb 1 ; $052f
00530                           	.dsb 1 ; $0530
00531                           CurrentLevel:
00531                           	.dsb 1 ; $0531
00532                           CurrentLevelArea:
00532                           	.dsb 1 ; $0532
00533                           CurrentLevelEntryPage:
00533                           	.dsb 1 ; $0533
00534                           TransitionType:
00534                           	.dsb 1 ; $0534
00535                           	; Seems to be set depending on how you transitioned areas last.
00535                           	; $00 = ? (Start of level?)
00535                           	; $01 = Door
00535                           	; $02 = Jar
00535                           	; $03 = Vine
00535                           CurrentLevelPage:
00535                           	.dsb 1 ; $0535
00536                           CurrentLevelPageX:
00536                           	.dsb 1 ; $0536
00537                           ; Flag to break out of the area's initial PPU draw loop?
00537                           byte_RAM_537:
00537                           	.dsb 1 ; $0537
00538                           ; $00 = none, $01 = left, $02 = right
00538                           HorizontalScrollDirection:
00538                           	.dsb 1 ; $0538
00539                           UpdatingPPUAttributeBottomRow: ; Bottom PPU row is 16px instead of 32px
00539                           	.dsb 1 ; $0539
0053A                           ; Flag to enable redrawing the background?
0053A                           byte_RAM_53A:
0053A                           	.dsb 1 ; $053a
0053B                           	.dsb 1 ; $053b
0053C                           	.dsb 1 ; $053c
0053D                           byte_RAM_53D:
0053D                           	.dsb 1 ; $053d
0053E                           byte_RAM_53E:
0053E                           	.dsb 1 ; $053e
0053F                           CurrentLevelPages:
0053F                           	.dsb 1 ; $053f
00540                           byte_RAM_540:
00540                           	.dsb 1 ; $0540
00541                           GroundSetting:
00541                           	.dsb 1 ; $0541
00542                           ; area object type xxOO
00542                           ObjectType3Xthru9X:
00542                           	.dsb 1 ; $0542
00543                           ; area object type OOxx
00543                           ObjectTypeAXthruFX:
00543                           	.dsb 1 ; $0543
00544                           CompareMusicIndex:
00544                           	.dsb 1 ; $0544
00545                           CurrentMusicIndex:
00545                           	.dsb 1 ; $0545
00546                           
00546                           CharacterStatsRAM:
00546                           PickupSpeedAnimation:
00546                           	.dsb 1 ; $0546
00547                           	.dsb 1 ; 1                ; $0547
00548                           	.dsb 1 ; 2                ; $0548
00549                           	.dsb 1 ; 3                ; $0549
0054A                           	.dsb 1 ; 4                ; $054a
0054B                           	.dsb 1 ; 5                ; $054b
0054C                           JumpHeightStanding:
0054C                           	.dsb 1 ; $054c
0054D                           JumpHeightStandingCarrying:
0054D                           	.dsb 1 ; $054d
0054E                           JumpHeightCrouching:
0054E                           	.dsb 1 ; $054e
0054F                           JumpHeightCrouchingCarrying:
0054F                           	.dsb 1 ; $054f
00550                           JumpHeightRunning:
00550                           	.dsb 1 ; $0550
00551                           JumpHeightRunningCarrying:
00551                           	.dsb 1 ; $0551
00552                           JumpHeightQuicksand:
00552                           	.dsb 1 ; $0552
00553                           JumpFloatLength:
00553                           	.dsb 1 ; $0553
00554                           GravityWithoutJumpButton:
00554                           	.dsb 1 ; $0554
00555                           GravityWithJumpButton:
00555                           	.dsb 1 ; $0555
00556                           GravityQuicksand:
00556                           	.dsb 1 ; $0556
00557                           RunSpeedRight:
00557                           	.dsb 1 ; $0557
00558                           RunSpeedRightCarrying:
00558                           	.dsb 1 ; $0558
00559                           RunSpeedRightQuicksand:
00559                           	.dsb 1 ; $0559
0055A                           RunSpeedLeft:
0055A                           	.dsb 1 ; $055a
0055B                           RunSpeedLeftCarrying:
0055B                           	.dsb 1 ; $055b
0055C                           RunSpeedLeftQuicksand:
0055C                           	.dsb 1 ; $055c
0055D                           ; FOR RENT
0055D                           	.dsb 1 ; $055d
0055E                           GroundType:
0055E                           	.dsb 1 ; $055e
0055F                           PPUBuffer_TitleCardPalette:
0055F                           	.dsb 1 ; $055f
00560                           	.dsb 1 ; $0560
00561                           	.dsb 1 ; $0561
00562                           	.dsb 1 ; $0562
00563                           	.dsb 1 ; $0563
00564                           	.dsb 1 ; $0564
00565                           	.dsb 1 ; $0565
00566                           	.dsb 1 ; $0566
00567                           	.dsb 1 ; $0567
00568                           	.dsb 1 ; $0568
00569                           	.dsb 1 ; $0569
0056A                           	.dsb 1 ; $056a
0056B                           	.dsb 1 ; $056b
0056C                           	.dsb 1 ; $056c
0056D                           	.dsb 1 ; $056d
0056E                           	.dsb 1 ; $056e
0056F                           	.dsb 1 ; $056f
00570                           	.dsb 1 ; $0570
00571                           	.dsb 1 ; $0571
00572                           	.dsb 1 ; $0572
00573                           	.dsb 1 ; $0573
00574                           	.dsb 1 ; $0574
00575                           	.dsb 1 ; $0575
00576                           	.dsb 1 ; $0576
00577                           	.dsb 1 ; $0577
00578                           	.dsb 1 ; $0578
00579                           	.dsb 1 ; $0579
0057A                           	.dsb 1 ; $057a
0057B                           	.dsb 1 ; $057b
0057C                           	.dsb 1 ; $057c
0057D                           	.dsb 1 ; $057d
0057E                           	.dsb 1 ; $057e
0057F                           	.dsb 1 ; $057f
00580                           	.dsb 1 ; $0580
00581                           	.dsb 1 ; $0581
00582                           	.dsb 1 ; $0582
00583                           PPUBuffer_BonusChanceCoinsExtraLife:
00583                           	.dsb 1 ; $0583
00584                           	.dsb 1 ; $0584
00585                           	.dsb 1 ; $0585
00586                           	.dsb 1 ; $0586
00587                           	.dsb 1 ; $0587
00588                           byte_RAM_588:
00588                           	.dsb 1 ; $0588
00589                           	.dsb 1 ; $0589
0058A                           	.dsb 1 ; $058a
0058B                           	.dsb 1 ; $058b
0058C                           	.dsb 1 ; $058c
0058D                           	.dsb 1 ; $058d
0058E                           	.dsb 1 ; $058e
0058F                           	.dsb 1 ; $058f
00590                           	.dsb 1 ; $0590
00591                           	.dsb 1 ; $0591
00592                           	.dsb 1 ; $0592
00593                           	.dsb 1 ; $0593
00594                           	.dsb 1 ; $0594
00595                           	.dsb 1 ; $0595
00596                           	.dsb 1 ; $0596
00597                           	.dsb 1 ; $0597
00598                           	.dsb 1 ; $0598
00599                           byte_RAM_599:
00599                           	.dsb 1 ; $0599
0059A                           byte_RAM_59A:
0059A                           	.dsb 1 ; $059a
0059B                           	.dsb 1 ; $059b
0059C                           unk_RAM_59C:
0059C                           	.dsb 1 ; $059c
0059D                           	.dsb 1 ; $059d
0059E                           	.dsb 1 ; $059e
0059F                           	.dsb 1 ; $059f
005A0                           	.dsb 1 ; $05a0
005A1                           	.dsb 1 ; $05a1
005A2                           	.dsb 1 ; $05a2
005A3                           	.dsb 1 ; $05a3
005A4                           	.dsb 1 ; $05a4
005A5                           	.dsb 1 ; $05a5
005A6                           	.dsb 1 ; $05a6
005A7                           	.dsb 1 ; $05a7
005A8                           	.dsb 1 ; $05a8
005A9                           	.dsb 1 ; $05a9
005AA                           	.dsb 1 ; $05aa
005AB                           	.dsb 1 ; $05ab
005AC                           
005AC                           PseudoRNGSeed:
005AC                           	.dsb 1 ; $05ac
005AD                           	.dsb 1 ; $05ad
005AE                           PseudoRNGValue:
005AE                           	.dsb 1 ; $05ae
005AF                           	.dsb 1 ; $05af
005B0                           
005B0                           	.dsb 1 ; $05b0
005B1                           	.dsb 1 ; $05b1
005B2                           	.dsb 1 ; $05b2
005B3                           	.dsb 1 ; $05b3
005B4                           	.dsb 1 ; $05b4
005B5                           	.dsb 1 ; $05b5
005B6                           	.dsb 1 ; $05b6
005B7                           	.dsb 1 ; $05b7
005B8                           	.dsb 1 ; $05b8
005B9                           	.dsb 1 ; $05b9
005BA                           ; initialized but never used?
005BA                           byte_RAM_5BA:
005BA                           	.dsb 1 ; $05ba
005BB                           ; set to $10 if a subspace door is ever created, but never used?
005BB                           byte_RAM_5BB:
005BB                           	.dsb 1 ; $05bb
005BC                           PhantoActivateTimer:
005BC                           	.dsb 1 ; $05bc
005BD                           CardScreenUpdateIndex:
005BD                           	.dsb 1 ; $05bd
005BE                           Contributors:
005BE                           	.dsb 1 ; $05be
005BF                           	.dsb 1 ; $05bf
005C0                           	.dsb 1 ; $05c0
005C1                           	.dsb 1 ; $05c1
005C2                           NumContributors:
005C2                           	.dsb 1 ; $05c2
005C3                           ContributorIndex:
005C3                           	.dsb 1 ; $05c3
005C4                           ContributorTimer:
005C4                           	.dsb 1 ; $05c4
005C5                           Continues:
005C5                           	.dsb 1 ; $05c5
005C6                           
005C6                           ; FOR RENT
005C6                           	.dsb 1 ; $05c6
005C7                           	.dsb 1 ; $05c7
005C8                           	.dsb 1 ; $05c8
005C9                           	.dsb 1 ; $05c9
005CA                           	.dsb 1 ; $05ca
005CB                           	.dsb 1 ; $05cb
005CC                           	.dsb 1 ; $05cc
005CD                           	.dsb 1 ; $05cd
005CE                           	.dsb 1 ; $05ce
005CF                           	.dsb 1 ; $05cf
005D0                           	.dsb 1 ; $05d0
005D1                           	.dsb 1 ; $05d1
005D2                           	.dsb 1 ; $05d2
005D3                           	.dsb 1 ; $05d3
005D4                           	.dsb 1 ; $05d4
005D5                           	.dsb 1 ; $05d5
005D6                           	.dsb 1 ; $05d6
005D7                           	.dsb 1 ; $05d7
005D8                           	.dsb 1 ; $05d8
005D9                           	.dsb 1 ; $05d9
005DA                           	.dsb 1 ; $05da
005DB                           	.dsb 1 ; $05db
005DC                           	.dsb 1 ; $05dc
005DD                           	.dsb 1 ; $05dd
005DE                           	.dsb 1 ; $05de
005DF                           	.dsb 1 ; $05df
005E0                           	.dsb 1 ; $05e0
005E1                           	.dsb 1 ; $05e1
005E2                           	.dsb 1 ; $05e2
005E3                           	.dsb 1 ; $05e3
005E4                           	.dsb 1 ; $05e4
005E5                           	.dsb 1 ; $05e5
005E6                           	.dsb 1 ; $05e6
005E7                           	.dsb 1 ; $05e7
005E8                           	.dsb 1 ; $05e8
005E9                           	.dsb 1 ; $05e9
005EA                           	.dsb 1 ; $05ea
005EB                           	.dsb 1 ; $05eb
005EC                           
005EC                           MusicPointerCurrentPart:
005EC                           	.dsb 1 ; $05ec
005ED                           MusicSquare1NoteStartLength:
005ED                           	.dsb 1 ; $05ed
005EE                           MusicPointerFirstPart:
005EE                           	.dsb 1 ; $05ee
005EF                           MusicPointerEndPart:
005EF                           	.dsb 1 ; $05ef
005F0                           MusicPointerLoopPart:
005F0                           	.dsb 1 ; $05f0
005F1                           MusicSquare2Patch:
005F1                           	.dsb 1 ; $05f1
005F2                           MusicSquare1Patch:
005F2                           	.dsb 1 ; $05f2
005F3                           MusicResume1:
005F3                           	.dsb 1 ; $05f3
005F4                           NextOctave:
005F4                           	.dsb 1 ; $05f4
005F5                           CurrentMusicNoiseStartOffset:
005F5                           	.dsb 1 ; $05f5
005F6                           ; FOR RENT
005F6                           	.dsb 1 ; $05f6
005F7                           	.dsb 1 ; $05f7
005F8                           	.dsb 1 ; $05f8
005F9                           MusicSquare1Lo:
005F9                           	.dsb 1 ; $05f9 (unused; written to but not read)
005FA                           MusicDPCMNoteLength:
005FA                           	.dsb 1 ; $05fa
005FB                           MusicDPCMNoteStartLength:
005FB                           	.dsb 1 ; $05fb
005FC                           CurrentMusicDPCMStartOffset:
005FC                           	.dsb 1 ; $05fc
005FD                           IFDEF EXPAND_MUSIC
005FD                           MusicSquare2Lo: ; needs to be +$04 relative to MusicSquare1Lo
005FD                           ENDIF
005FD                           	.dsb 1 ; $05fd (unused; written to but not read)
005FE                           	.dsb 1 ; $05fe
005FF                           CurrentMusicDPCMOffset:
005FF                           	.dsb 1 ; $05ff
00600                           
00600                           ; #01 Overworld
00600                           ; #02 Character Select
00600                           ; #04 Inside
00600                           ; #08 Boss
00600                           ; #10 Invincible
00600                           ; #20 Subspace
00600                           ; #40 Wart
00600                           ; #80 Title
00600                           MusicQueue1:
00600                           	.dsb 1 ; $0600
00601                           
00601                           ; $01 Item pull A
00601                           ; $02 Drum sample A
00601                           ; $04 Player hurt (>1 HP left)
00601                           ; $08 Item pull B
00601                           ; $10 Enemy scream A
00601                           ; $20 Drum sample B
00601                           ; $40 Enemy scream B
00601                           ; $80 Enemy scream C
00601                           DPCMQueue:
00601                           	.dsb 1 ; $0601
00602                           
00602                           ; $01 Birdo/etc shoot noise
00602                           ; $02 Potion door creation
00602                           ; $04 Cherry collect
00602                           ; $08 Throw item
00602                           ; $10 1-up
00602                           ; $20 Enemy hit/killed
00602                           ; $40 Stopwatch tick
00602                           ; $80 Wart spit
00602                           SoundEffectQueue1:
00602                           	.dsb 1 ; $0602
00603                           
00603                           ; $01 Warp fanfare, slot entry jingle
00603                           ; $02 Boss clear fanfare
00603                           ; $04 Celebration
00603                           ; $08 Death jingle
00603                           ; $10 Game over
00603                           ; $20 Mini-fanfare (slot win, crystal get)
00603                           ; $40 Same as $01
00603                           ; $80 Silence (stops music)
00603                           MusicQueue2:
00603                           	.dsb 1 ; $0603
00604                           
00604                           ; $01 Jump
00604                           ; $02 Climbing
00604                           ; $04 Coin collected
00604                           ; $08 Shrinking
00604                           ; $10 Intro "falling" sound
00604                           ; $20 Growing
00604                           ; $40 -N/A-
00604                           ; $80 -N/A-
00604                           SoundEffectQueue2:
00604                           	.dsb 1 ; $0604
00605                           
00605                           ; $01 Short noise
00605                           ; $02 Rumbling sound
00605                           ; $04 Rumbling sound
00605                           ; $08 -N/A-
00605                           ; $10 -N/A-
00605                           ; $20 -N/A-
00605                           ; $40 -N/A-
00605                           ; $80 -N/A-
00605                           SoundEffectQueue3:
00605                           	.dsb 1 ; $0605
00606                           
00606                           MusicPlaying2:
00606                           	.dsb 1 ; $0606
00607                           SoundEffectPlaying1:
00607                           	.dsb 1 ; $0607
00608                           DPCMPlaying:
00608                           	.dsb 1 ; $0608
00609                           MusicPlaying1:
00609                           	.dsb 1 ; $0609
0060A                           DPCMTimer:
0060A                           	.dsb 1 ; $060a
0060B                           ; FOR RENT
0060B                           MusicSquare1NoteBend:
0060B                           	.dsb 1 ; $060b
0060C                           MusicSquare1NoteSweep:
0060C                           	.dsb 1 ; $060c
0060D                           SoundEffectPlaying2:
0060D                           	.dsb 1 ; $060d
0060E                           SoundEffectPlaying3:
0060E                           	.dsb 1 ; $060e
0060F                           MusicSquare2NoteBend:
0060F                           	.dsb 1 ; $060f
00610                           ; FOR RENT
00610                           	.dsb 1 ; $0610
00611                           SoundEffectTimer3:
00611                           	.dsb 1 ; $0611
00612                           MusicTempoSetting:
00612                           	.dsb 1 ; $0612
00613                           CurrentMusicSquare2Offset:
00613                           	.dsb 1 ; $0613
00614                           CurrentMusicSquare1Offset:
00614                           	.dsb 1 ; $0614
00615                           CurrentMusicTriangleOffset:
00615                           	.dsb 1 ; $0615
00616                           CurrentMusicNoiseOffset:
00616                           	.dsb 1 ; $0616
00617                           MusicSquare2NoteStartLength:
00617                           	.dsb 1 ; $0617
00618                           MusicSquare2NoteLength:
00618                           	.dsb 1 ; $0618
00619                           MusicSquare2InstrumentOffset:
00619                           	.dsb 1 ; $0619
0061A                           MusicSquare1NoteLength:
0061A                           	.dsb 1 ; $061a
0061B                           MusicSquare1InstrumentOffset:
0061B                           	.dsb 1 ; $061b
0061C                           MusicTriangleNoteStartLength:
0061C                           	.dsb 1 ; $061c
0061D                           MusicTriangleNoteLength:
0061D                           	.dsb 1 ; $061d
0061E                           MusicNoiseNoteLength:
0061E                           	.dsb 1 ; $061e
0061F                           MusicNoiseNoteStartLength:
0061F                           	.dsb 1 ; $061f
00620                           Mushroom1upPulled:
00620                           	.dsb 1 ; $0620
00621                           SubspaceVisits:
00621                           	.dsb 1 ; $0621
00622                           SubspaceCoins:
00622                           	.dsb 1 ; $0622
00623                           SwarmCounter:
00623                           	.dsb 1 ; $0623
00624                           GroundSlipperiness:
00624                           	.dsb 1 ; $0624
00625                           ; FOR RENT
00625                           	.dsb 1 ; $0625
00626                           ; FOR RENT
00626                           	.dsb 1 ; $0626
00627                           DoAreaTransition:
00627                           	.dsb 1 ; $0627
00628                           InSubspaceOrJar:
00628                           	.dsb 1 ; $0628
00629                           CurrentLevelRelative:
00629                           	.dsb 1 ; $0629
0062A                           CherryCount:
0062A                           	.dsb 1 ; $062a
0062B                           SlotMachineCoins:
0062B                           	.dsb 1 ; $062b
0062C                           BigVeggiesPulled:
0062C                           	.dsb 1 ; $062c
0062D                           CharacterLevelsCompleted:
0062D                           	.dsb 1 ; $062d
0062E                           	.dsb 1 ; $062e
0062F                           	.dsb 1 ; $062f
00630                           	.dsb 1 ; $0630
00631                           MaxLevelsCompleted:
00631                           	.dsb 1 ; $0631
00632                           ; FOR RENT
00632                           	.dsb 1 ; $0632
00633                           ; FOR RENT
00633                           LevelObjectMode:
00633                           	.dsb 1 ; $0633
00634                           
00634                           IFNDEF AREA_HEADER_TILESET
00634                           ; FOR RENT
00634                           	.dsb 1 ; $0634
00635                           CurrentWorld:
00635                           CurrentWorldTileset:
00635                           	.dsb 1 ; $0635
00636                           
00636                           ELSE
00636                           CurrentWorldTileset:
00636                           	.dsb 1 ; $0634
00636                           CurrentWorld:
00636                           	.dsb 1 ; $0635
00636                           ENDIF
00636                           
00636                           ; gets set to $A5 in DoCharacterSelectMenu to skip the bank switch
00636                           CharacterSelectBankSwitch:
00636                           	.dsb 1 ; $0636
00637                           RestorePlayerPalette0:
00637                           	.dsb 1 ; $0637
00638                           RestorePlayerPalette1:
00638                           	.dsb 1 ; $0638
00639                           RestorePlayerPalette2:
00639                           	.dsb 1 ; $0639
0063A                           RestorePlayerPalette3:
0063A                           	.dsb 1 ; $063a
0063B                           SlotMachineReelOrder1RAM:
0063B                           	.dsb 1 ; $063b
0063C                           	.dsb 1 ; $063c
0063D                           	.dsb 1 ; $063d
0063E                           	.dsb 1 ; $063e
0063F                           	.dsb 1 ; $063f
00640                           	.dsb 1 ; $0640
00641                           	.dsb 1 ; $0641
00642                           	.dsb 1 ; $0642
00643                           SlotMachineReelOrder2RAM:
00643                           	.dsb 1 ; $0643
00644                           	.dsb 1 ; $0644
00645                           	.dsb 1 ; $0645
00646                           	.dsb 1 ; $0646
00647                           	.dsb 1 ; $0647
00648                           	.dsb 1 ; $0648
00649                           	.dsb 1 ; $0649
0064A                           	.dsb 1 ; $064a
0064B                           SlotMachineReelOrder3RAM:
0064B                           	.dsb 1 ; $064b
0064C                           	.dsb 1 ; $064c
0064D                           	.dsb 1 ; $064d
0064E                           	.dsb 1 ; $064e
0064F                           	.dsb 1 ; $064f
00650                           	.dsb 1 ; $0650
00651                           	.dsb 1 ; $0651
00652                           	.dsb 1 ; $0652
00653                           BonusChanceUnusedCoinSprite_RAM:
00653                           	.dsb 1 ; $0653
00654                           	.dsb 1 ; $0654
00655                           	.dsb 1 ; $0655
00656                           	.dsb 1 ; $0656
00657                           	.dsb 1 ; $0657
00658                           	.dsb 1 ; $0658
00659                           	.dsb 1 ; $0659
0065A                           	.dsb 1 ; $065a
0065B                           	.dsb 1 ; $065b
0065C                           	.dsb 1 ; $065c
0065D                           	.dsb 1 ; $065d
0065E                           	.dsb 1 ; $065e
0065F                           	.dsb 1 ; $065f
00660                           	.dsb 1 ; $0660
00661                           	.dsb 1 ; $0661
00662                           	.dsb 1 ; $0662
00663                           	.dsb 1 ; $0663
00664                           	.dsb 1 ; $0664
00665                           	.dsb 1 ; $0665
00666                           	.dsb 1 ; $0666
00667                           	.dsb 1 ; $0667
00668                           	.dsb 1 ; $0668
00669                           	.dsb 1 ; $0669
0066A                           	.dsb 1 ; $066a
0066B                           	.dsb 1 ; $066b
0066C                           	.dsb 1 ; $066c
0066D                           	.dsb 1 ; $066d
0066E                           	.dsb 1 ; $066e
0066F                           	.dsb 1 ; $066f
00670                           	.dsb 1 ; $0670
00671                           	.dsb 1 ; $0671
00672                           	.dsb 1 ; $0672
00673                           	.dsb 1 ; $0673
00674                           	.dsb 1 ; $0674
00675                           	.dsb 1 ; $0675
00676                           	.dsb 1 ; $0676
00677                           	.dsb 1 ; $0677
00678                           	.dsb 1 ; $0678
00679                           	.dsb 1 ; $0679
0067A                           	.dsb 1 ; $067a
0067B                           PPUBuffer_BonusChanceUnusedText:
0067B                           PPUBuffer_ContinueRetryText:
0067B                           	.dsb 1 ; $067b
0067C                           	.dsb 1 ; $067c
0067D                           	.dsb 1 ; $067d
0067E                           ; Number of continues
0067E                           	.dsb 1 ; $067e
0067F                           	.dsb 1 ; $067f
00680                           	.dsb 1 ; $0680
00681                           	.dsb 1 ; $0681
00682                           ; Bullet next to CONTINUE
00682                           	.dsb 1 ; $0682
00683                           	.dsb 1 ; $0683
00684                           	.dsb 1 ; $0684
00685                           	.dsb 1 ; $0685
00686                           	.dsb 1 ; $0686
00687                           	.dsb 1 ; $0687
00688                           	.dsb 1 ; $0688
00689                           	.dsb 1 ; $0689
0068A                           	.dsb 1 ; $068a
0068B                           	.dsb 1 ; $068b
0068C                           	.dsb 1 ; $068c
0068D                           	.dsb 1 ; $068d
0068E                           	.dsb 1 ; $068e
0068F                           ; Bullet next to RETRY
0068F                           	.dsb 1 ; $068f
00690                           	.dsb 1 ; $0690
00691                           	.dsb 1 ; $0691
00692                           	.dsb 1 ; $0692
00693                           PPUBuffer_NoBonusText:
00693                           	.dsb 1 ; $0693
00694                           	.dsb 1 ; $0694
00695                           	.dsb 1 ; $0695
00696                           	.dsb 1 ; $0696
00697                           	.dsb 1 ; $0697
00698                           	.dsb 1 ; $0698
00699                           	.dsb 1 ; $0699
0069A                           	.dsb 1 ; $069a
0069B                           	.dsb 1 ; $069b
0069C                           	.dsb 1 ; $069c
0069D                           	.dsb 1 ; $069d
0069E                           	.dsb 1 ; $069e
0069F                           	.dsb 1 ; $069f
006A0                           	.dsb 1 ; $06a0
006A1                           	.dsb 1 ; $06a1
006A2                           	.dsb 1 ; $06a2
006A3                           	.dsb 1 ; $06a3
006A4                           	.dsb 1 ; $06a4
006A5                           	.dsb 1 ; $06a5
006A6                           	.dsb 1 ; $06a6
006A7                           	.dsb 1 ; $06a7
006A8                           	.dsb 1 ; $06a8
006A9                           	.dsb 1 ; $06a9
006AA                           	.dsb 1 ; $06aa
006AB                           PPUBuffer_PushAButtonText:
006AB                           	.dsb 1 ; $06ab
006AC                           	.dsb 1 ; $06ac
006AD                           	.dsb 1 ; $06ad
006AE                           	.dsb 1 ; $06ae
006AF                           	.dsb 1 ; $06af
006B0                           	.dsb 1 ; $06b0
006B1                           	.dsb 1 ; $06b1
006B2                           	.dsb 1 ; $06b2
006B3                           	.dsb 1 ; $06b3
006B4                           	.dsb 1 ; $06b4
006B5                           	.dsb 1 ; $06b5
006B6                           	.dsb 1 ; $06b6
006B7                           	.dsb 1 ; $06b7
006B8                           	.dsb 1 ; $06b8
006B9                           	.dsb 1 ; $06b9
006BA                           	.dsb 1 ; $06ba
006BB                           	.dsb 1 ; $06bb
006BC                           	.dsb 1 ; $06bc
006BD                           PPUBuffer_Player1UpText:
006BD                           	.dsb 1 ; $06bd
006BE                           	.dsb 1 ; $06be
006BF                           	.dsb 1 ; $06bf
006C0                           	.dsb 1 ; $06c0
006C1                           	.dsb 1 ; $06c1
006C2                           	.dsb 1 ; $06c2
006C3                           	.dsb 1 ; $06c3
006C4                           	.dsb 1 ; $06c4
006C5                           	.dsb 1 ; $06c5
006C6                           	.dsb 1 ; $06c6
006C7                           	.dsb 1 ; $06c7
006C8                           	.dsb 1 ; $06c8
006C9                           	.dsb 1 ; $06c9
006CA                           	.dsb 1 ; $06ca
006CB                           	.dsb 1 ; $06cb
006CC                           PPUBuffer_PauseText:
006CC                           	.dsb 1 ; $06cc
006CD                           	.dsb 1 ; $06cd
006CE                           	.dsb 1 ; $06ce
006CF                           	.dsb 1 ; $06cf
006D0                           	.dsb 1 ; $06d0
006D1                           	.dsb 1 ; $06d1
006D2                           	.dsb 1 ; $06d2
006D3                           	.dsb 1 ; $06d3
006D4                           	.dsb 1 ; $06d4
006D5                           	.dsb 1 ; $06d5
006D6                           	.dsb 1 ; $06d6
006D7                           	.dsb 1 ; $06d7
006D8                           	.dsb 1 ; $06d8
006D9                           	.dsb 1 ; $06d9
006DA                           PPUBuffer_EraseBonusMessageText:
006DA                           	.dsb 1 ; $06da
006DB                           	.dsb 1 ; $06db
006DC                           	.dsb 1 ; $06dc
006DD                           	.dsb 1 ; $06dd
006DE                           	.dsb 1 ; $06de
006DF                           PPUBuffer_ErasePushAButton:
006DF                           	.dsb 1 ; $06df
006E0                           	.dsb 1 ; $06e0
006E1                           	.dsb 1 ; $06e1
006E2                           	.dsb 1 ; $06e2
006E3                           	.dsb 1 ; $06e3
006E4                           PPUBuffer_EraseBonusMessageTextUnused:
006E4                           	.dsb 1 ; $06e4
006E5                           	.dsb 1 ; $06e5
006E6                           	.dsb 1 ; $06e6
006E7                           	.dsb 1 ; $06e7
006E8                           	.dsb 1 ; $06e8
006E9                           PPUBuffer_ErasePauseText:
006E9                           	.dsb 1 ; $06e9
006EA                           	.dsb 1 ; $06ea
006EB                           	.dsb 1 ; $06eb
006EC                           	.dsb 1 ; $06ec
006ED                           	.dsb 1 ; $06ed
006EE                           	.dsb 1 ; $06ee
006EF                           	.dsb 1 ; $06ef
006F0                           	.dsb 1 ; $06f0
006F1                           	.dsb 1 ; $06f1
006F2                           MMC3PRGBankTemp:
006F2                           	.dsb 1 ; $06f2
006F3                           
006F3                           ; Game milestone counter, probably used for debugging
006F3                           ;   $00 = Title screen
006F3                           ;   $01 = Gameplay
006F3                           ;   $02 = Contributors
006F3                           ;   $03 = Mario sleeping
006F3                           GameMilestoneCounter:
006F3                           	.dsb 1 ; $06f3
006F4                           
006F4                           Player1JoypadExpansionPress:
006F4                           	.dsb 1 ; $06f4
006F5                           Player2JoypadExpansionPress:
006F5                           	.dsb 1 ; $06f5
006F6                           PlayerCurrentSize:
006F6                           	.dsb 1 ; $06f6
006F7                           BackgroundCHR1:
006F7                           	.dsb 1 ; $06f7
006F8                           BackgroundCHR2:
006F8                           	.dsb 1 ; $06f8
006F9                           SpriteCHR1:
006F9                           	.dsb 1 ; $06f9
006FA                           SpriteCHR2:
006FA                           	.dsb 1 ; $06fa
006FB                           SpriteCHR3:
006FB                           	.dsb 1 ; $06fb
006FC                           SpriteCHR4:
006FC                           	.dsb 1 ; $06fc
006FD                           BackgroundCHR2Timer:
006FD                           	.dsb 1 ; $06fd
006FE                           ; FOR RENT
006FE                           ResetCHRLatch:
006FE                           	.dsb 1 ; $06fe
006FF                           ; FOR RENT
006FF                           	.dsb 1 ; $06ff
00700                           
00700                           ; When moving into subspace,  this area is turned into a tile represenation
00700                           ; of the current screen as it will be shown (e.g. reversed, like in-game)
00700                           ; Not sure if anything else uses this area yet
00700                           SubAreaTileLayout:
00700                           	.dsb $100   ; $0700-$07FF
00800                           
00800                           
00800                           ;
00800                           ; PPU registers
00800                           ; $2000-$2007
00800                           ;
00800                           
00800                           PPUCTRL = $2000
00800                           PPUMASK = $2001
00800                           PPUSTATUS = $2002
00800                           OAMADDR = $2003
00800                           OAMDATA = $2004
00800                           PPUSCROLL = $2005
00800                           PPUADDR = $2006
00800                           PPUDATA = $2007
00800                           
00800                           ;
00800                           ; APU registers and joypad registers
00800                           ;  $4000-$4015         $4016-$4017
00800                           ;
00800                           
00800                           SQ1_VOL = $4000
00800                           SQ1_SWEEP = $4001
00800                           SQ1_LO = $4002
00800                           SQ1_HI = $4003
00800                           
00800                           SQ2_VOL = $4004
00800                           SQ2_SWEEP = $4005
00800                           SQ2_LO = $4006
00800                           SQ2_HI = $4007
00800                           
00800                           TRI_LINEAR = $4008
00800                           _APU_TRI_UNUSED = $4009
00800                           TRI_LO = $400a
00800                           TRI_HI = $400b
00800                           
00800                           NOISE_VOL = $400c
00800                           _APU_NOISE_UNUSED = $400d
00800                           NOISE_LO = $400e
00800                           NOISE_HI = $400f
00800                           
00800                           DMC_FREQ = $4010
00800                           DMC_RAW = $4011
00800                           DMC_START = $4012
00800                           DMC_LEN = $4013
00800                           
00800                           OAM_DMA = $4014
00800                           
00800                           SND_CHN = $4015
00800                           
00800                           JOY1 = $4016
00800                           JOY2 = $4017
00800                           
00800                           ; Leftover code in prg-e-f references this
00800                           ; (otherwise unused, since, well, not FDS)
00800                           FDS_WAVETABLE_VOL = $4080
00800                           
00800                           
00800                           ;
00800                           ; Expansion chip stuff for MMC5 support
00800                           ; $5000-$5015
00800                           ;
00800                           
00800                           MMC5_PULSE1_VOL = $5000
00800                           MMC5_PULSE1_SWEEP = $5001
00800                           MMC5_PULSE1_LO = $5002
00800                           MMC5_PULSE1_HI = $5003
00800                           
00800                           MMC5_PULSE2_VOL = $5004
00800                           MMC5_PULSE2_SWEEP = $5005
00800                           MMC5_PULSE2_LO = $5006
00800                           MMC5_PULSE2_HI = $5007
00800                           
00800                           MMC5_PCM_MODE_IRQ = $5010
00800                           MMC5_RAW_PCM = $5011
00800                           
00800                           MMC5_SND_CHN = $5015
00800                           
00800                           ;
00800                           ; MMC5 bank switching
00800                           ;
00800                           MMC5_PRGMode = $5100
00800                           MMC5_CHRMode = $5101
00800                           MMC5_PRGRAMProtect1 = $5102
00800                           MMC5_PRGRAMProtect2 = $5103
00800                           MMC5_ExtendedRAMMode = $5104
00800                           MMC5_NametableMapping = $5105
00800                           MMC5_PRGBankSwitch1 = $5113
00800                           MMC5_PRGBankSwitch2 = $5114
00800                           MMC5_PRGBankSwitch3 = $5115
00800                           MMC5_PRGBankSwitch4 = $5116
00800                           MMC5_PRGBankSwitch5 = $5117
00800                           MMC5_CHRBankSwitch1 = $5120
00800                           MMC5_CHRBankSwitch2 = $5121
00800                           MMC5_CHRBankSwitch3 = $5122
00800                           MMC5_CHRBankSwitch4 = $5123
00800                           MMC5_CHRBankSwitch5 = $5124
00800                           MMC5_CHRBankSwitch6 = $5125
00800                           MMC5_CHRBankSwitch7 = $5126
00800                           MMC5_CHRBankSwitch8 = $5127
00800                           MMC5_CHRBankSwitch9 = $5128
00800                           MMC5_CHRBankSwitch10 = $5129
00800                           MMC5_CHRBankSwitch11 = $512a
00800                           MMC5_CHRBankSwitch12 = $512b
00800                           MMC5_CHRBankSwitchUpper = $5130
00800                           
00800                           MMC5_IRQScanlineCompare = $5203
00800                           MMC5_IRQStatus = $5204
00800                           
00800                           
00800                           ;
00800                           ; Cartridge on-board RAM
00800                           ; Decoded level data is stored in memory here,
00800                           ; as well as some other junk
00800                           ; $6000-$7FFF
00800                           ;
00800                           
00800                           DecodedLevelData = $6000
00800                           
00800                           ObjectCollisionHitboxLeft_RAM = $7100
00800                           ObjectCollisionHitboxTop_RAM = $7114
00800                           ObjectCollisionHitboxWidth_RAM = $7128
00800                           ObjectCollisionHitboxHeight_RAM = $713c
00800                           
00800                           HawkmouthCollisionHitboxLeft_RAM = $710b
00800                           HawkmouthCollisionHitboxTop_RAM = $711f
00800                           
00800                           ; Copied from bank A
00800                           ; Does anything read this???
00800                           MysteryData14439_RAM = $7150
00800                           
00800                           PPUBuffer_TitleCardText = $7168
00800                           TitleCard_LevelDots = $716b
00800                           TitleCard_World = $717d
00800                           TitleCard_Level = $717f
00800                           TitleCard_ExtraLife_DrawAddress = $7180
00800                           TitleCard_Lives = $7191
00800                           
00800                           PPUBuffer_WarpToWorld = $7194
00800                           WarpToWorld_World = $71a6
00800                           
00800                           PPUBuffer_ContinueRetryBullets = $71a8
00800                           
00800                           ; Copied from bank A
00800                           FlyingCarpetAcceleration_RAM = $71cc
00800                           
00800                           ; Copied from bank F
00800                           EnemyPlayerCollisionTable_RAM = $71d1
00800                           
00800                           PPUBuffer_EndOfLevelDoor = $721b
00800                           
00800                           WartOAMOffsets_RAM = $7265
00800                           
00800                           PPUBuffer_BonusChanceLayout = $7400
00800                           
00800                           RawLevelData = $7800
00800                           
00800                           RawJarData = $7a00
00800                           
00800                           RawEnemyDataAddr = $7b00
00800                           
00800                           ;
00800                           ; Extra enhancement support for 2P debug mode controls
00800                           ; Spread around to some 'for rent' addresses
00800                           ;
00800                           IFDEF CONTROLLER_2_DEBUG
00800                           	UpdateJoypadsTemp = $00c6
00800                           	ChangeCharacterTimer = $7e80
00800                           	ChangeCharacterPoofTimer = $7e81
00800                           	CreateObjectType = $7e82
00800                           	CreateObjectAttributes = $7e83
00800                           ENDIF
00800                           
00800                           CarryYOffsetsRAM = $7e00 ; Ram adress to copy character item Y offset, where it would be held
00800                           StatOffsetsRAM = $7e10 ; Ram adress where to copy character swap for hot swapping
00800                           
00800                           ItemCarryYOffsetsRAM = $7f00
00800                           
00800                           MMC3_BankSelect = $8000
00800                           MMC3_BankData = $8001
00800                           MMC3_Mirroring = $a000
00800                           MMC3_PRGRamProtect = $a001
00800                           MMC3_IRQLatch = $c000
00800                           MMC3_IRQReload = $c001
00800                           MMC3_IRQDisable = $e000
00800                           MMC3_IRQEnable = $e001
00800                           
00800                           FME7_Command = $8000
00800                           FME7_Parameter = $a000
00800                           .ende
	                            
	                            ; -----------------------------------------
	                            ; Add each of the 16 banks.
	                            ; In SMB2, banks are swapped in pairs.
	                            ; The game was clearly designed originally to use the MMC1 mapper,
	                            ; and very minimal changes were made to make that work.
	                            ; These banks are still TECHNICALLY two different banks,
	                            ; but due to this little hack a lot of data runs between
	                            ; bank boundaries, and it's easier to keep together
	                            ; You should split these again if you plan on making any
	                            ; really huge modifications...
	                            
	                            ; ----------------------------------------
	                            ; Banks 0 and 1. Basically potpourri.
	                            ; Lots of crap everywhere.
	                            ; Title screen and some other stuff too.
	                            .base $8000
08000                           .include "src/prg-0-1.asm"
08000                           ;
08000                           ; Bank 0 & Bank 1
08000                           ; ===============
08000                           ;
08000                           ; What's inside:
08000                           ;
08000                           ;   - Title screen
08000                           ;   - Player controls
08000                           ;   - Player state handling
08000                           ;   - Enemy handling
08000                           ;
08000                           
08000                           ;
08000                           ; Initializes a vertical area
08000                           ;
08000                           InitializeAreaVertical:
08000 AD 02 05                  	LDA byte_RAM_502
08003 D0 00                     	BNE loc_BANK0_805D
08005                           
08005 A9 01                     	LDA #HMirror
08007 20 00 00                  	JSR ChangeNametableMirroring
0800A                           
0800A AD 33 05                  	LDA CurrentLevelEntryPage
0800D D0 00                     	BNE loc_BANK0_8013
0800F                           
0800F                           loc_BANK0_800F:
0800F A9 09                     	LDA #$09
08011 D0 00                     	BNE loc_BANK0_8016
08013                           
08013                           loc_BANK0_8013:
08013 38                        	SEC
08014 E9 01                     	SBC #$01
08016                           
08016                           loc_BANK0_8016:
08016 09 C0                     	ORA #$C0
08018 85 CF                     	STA BackgroundUpdateBoundaryBackward
0801A 38                        	SEC
0801B E9 40                     	SBC #$40
0801D 85 CE                     	STA BackgroundUpdateBoundary
0801F AD 33 05                  	LDA CurrentLevelEntryPage
08022                           
08022                           loc_BANK0_8022:
08022 18                        	CLC
08023 69 01                     	ADC #$01
08025 C9 0A                     	CMP #$0A
08027 D0 00                     	BNE loc_BANK0_802B
08029                           
08029 A9 00                     	LDA #$00
0802B                           
0802B                           loc_BANK0_802B:
0802B 09 10                     	ORA #$10
0802D 85 D0                     	STA BackgroundUpdateBoundaryForward
0802F AD 33 05                  	LDA CurrentLevelEntryPage
08032 A0 00                     	LDY #$00
08034 20 00 00                  	JSR ResetPPUScrollHi
08037                           
08037 A9 20                     	LDA #$20
08039 85 D3                     	STA DrawBackgroundTilesPPUAddrLoBackward
0803B A9 60                     	LDA #$60
0803D 85 D4                     	STA DrawBackgroundTilesPPUAddrLoForward
0803F                           
0803F                           	; Set the flag for the initial screen render
0803F EE 02 05                  	INC byte_RAM_502
08042                           
08042                           	; Initialize the PPU update boundary
08042 A9 E0                     	LDA #$E0
08044 85 E2                     	STA byte_RAM_E2
08046 A9 01                     	LDA #$01
08048 85 E4                     	STA byte_RAM_E4
0804A 8D 3A 05                  	STA byte_RAM_53A
0804D 4A                        	LSR A
0804E 85 D2                     	STA DrawBackgroundTilesPPUAddrLo
08050                           
08050                           	; Set the screen y-position
08050 AC 33 05                  	LDY CurrentLevelEntryPage
08053 20 00 00                  	JSR PageHeightCompensation
08056 85 CB                     	STA ScreenYLo
08058 84 CA                     	STY ScreenYHi
0805A                           
0805A                           	; Cue player transition
0805A 20 00 00                  	JSR ApplyAreaTransition
0805D                           
0805D                           loc_BANK0_805D:
0805D A9 00                     	LDA #$00
0805F 85 06                     	STA byte_RAM_6
08061 A9 FF                     	LDA #$FF
08063 8D 05 05                  	STA byte_RAM_505
08066 A9 A0                     	LDA #$A0
08068 8D 07 05                  	STA PPUScrollCheckLo
0806B                           
0806B 20 00 00                  	JSR sub_BANK0_823D
0806E                           
0806E AD 3A 05                  	LDA byte_RAM_53A
08071 D0 00                     	BNE InitializeAreaVertical_Exit
08073                           
08073                           	; Initial screen render is complete
08073 E6 13                     	INC BreakStartLevelLoop
08075                           
08075 A9 E8                     	LDA #$E8
08077 85 E1                     	STA byte_RAM_E1
08079 A9 C8                     	LDA #$C8
0807B 85 E2                     	STA byte_RAM_E2
0807D                           
0807D A9 00                     	LDA #$00
0807F 8D 02 05                  	STA byte_RAM_502
08082                           
08082                           InitializeAreaVertical_Exit:
08082 60                        	RTS
08083                           
08083                           
08083                           ;
08083                           ; Applies vertical screen scrolling if `DetermineVerticalScroll` indicated that
08083                           ; it was necessary.
08083                           ;
08083                           ApplyVerticalScroll:
08083 A5 D8                     	LDA NeedsScroll
08085 29 04                     	AND #%00000100
08087 D0 00                     	BNE loc_BANK0_809D
08089                           
08089                           	;	Not currently in a scroll interval
08089 A5 D8                     	LDA NeedsScroll
0808B 29 07                     	AND #%00000111
0808D D0 00                     	BNE loc_BANK0_8092
0808F                           
0808F 4C 00 00                  	JMP loc_BANK0_819C
08092                           
08092                           ; ---------------------------------------------------------------------------
08092                           
08092                           loc_BANK0_8092:
08092 A5 D8                     	LDA NeedsScroll
08094 09 04                     	ORA #%00000100
08096 85 D8                     	STA NeedsScroll
08098 A9 12                     	LDA #$12
0809A 8D 04 05                  	STA CameraScrollTiles
0809D                           
0809D                           loc_BANK0_809D:
0809D A5 D8                     	LDA NeedsScroll
0809F 4A                        	LSR A
080A0 A5 FC                     	LDA PPUScrollYMirror
080A2 90 00                     	BCC loc_BANK0_8103
080A4                           
080A4 D0 00                     	BNE loc_BANK0_80B1
080A6                           
080A6 A5 CF                     	LDA BackgroundUpdateBoundaryBackward
080A8 29 0F                     	AND #$0F
080AA C9 09                     	CMP #$09
080AC D0 00                     	BNE loc_BANK0_80B1
080AE                           
080AE 4C 00 00                  	JMP loc_BANK0_819C
080B1                           
080B1                           ; ---------------------------------------------------------------------------
080B1                           
080B1                           loc_BANK0_80B1:
080B1 A9 01                     	LDA #$01
080B3 20 00 00                  	JSR SetObjectLocks
080B6                           
080B6 A5 FC                     	LDA PPUScrollYMirror
080B8 38                        	SEC
080B9 E9 04                     	SBC #$04
080BB 85 FC                     	STA PPUScrollYMirror
080BD A5 CB                     	LDA ScreenYLo
080BF 38                        	SEC
080C0 E9 04                     	SBC #$04
080C2 85 CB                     	STA ScreenYLo
080C4 B0 00                     	BCS loc_BANK0_80C8
080C6                           
080C6 C6 CA                     	DEC ScreenYHi
080C8                           
080C8                           loc_BANK0_80C8:
080C8 A5 FC                     	LDA PPUScrollYMirror
080CA C9 FC                     	CMP #$FC
080CC D0 00                     	BNE loc_BANK0_80DB
080CE                           
080CE A9 EC                     	LDA #$EC
080D0 85 FC                     	STA PPUScrollYMirror
080D2 A5 C8                     	LDA PPUScrollYHiMirror
080D4 49 02                     	EOR #$02
080D6 85 C8                     	STA PPUScrollYHiMirror
080D8 4A                        	LSR A
080D9 85 C9                     	STA PPUScrollXHiMirror
080DB                           
080DB                           loc_BANK0_80DB:
080DB A5 FC                     	LDA PPUScrollYMirror
080DD 29 07                     	AND #$07
080DF F0 00                     	BEQ loc_BANK0_80E2
080E1                           
080E1 60                        	RTS
080E2                           
080E2                           ; ---------------------------------------------------------------------------
080E2                           
080E2                           loc_BANK0_80E2:
080E2 A2 00                     	LDX #$00
080E4 20 00 00                  	JSR loc_BANK0_8287
080E7                           
080E7 E8                        	INX
080E8 20 00 00                  	JSR loc_BANK0_8287
080EB                           
080EB A5 FC                     	LDA PPUScrollYMirror
080ED 29 0F                     	AND #$0F
080EF D0 00                     	BNE loc_BANK0_80FB
080F1                           
080F1 A2 00                     	LDX #$00
080F3 20 00 00                  	JSR DecrementVerticalScrollRow
080F6                           
080F6 A2 01                     	LDX #$01
080F8 20 00 00                  	JSR DecrementVerticalScrollRow
080FB                           
080FB                           loc_BANK0_80FB:
080FB A2 01                     	LDX #$01
080FD 20 00 00                  	JSR PrepareBackgroundDrawing_Vertical
08100                           
08100 4C 00 00                  	JMP loc_BANK0_8170
08103                           
08103                           ; ---------------------------------------------------------------------------
08103                           
08103                           loc_BANK0_8103:
08103 D0 00                     	BNE loc_BANK0_8121
08105                           
08105 AD 3F 05                  	LDA CurrentLevelPages
08108 85 0F                     	STA byte_RAM_F
0810A C9 09                     	CMP #$09
0810C D0 00                     	BNE loc_BANK0_8114
0810E                           
0810E A9 00                     	LDA #$00
08110 85 0F                     	STA byte_RAM_F
08112 F0 00                     	BEQ loc_BANK0_8116
08114                           
08114                           loc_BANK0_8114:
08114 E6 0F                     	INC byte_RAM_F
08116                           
08116                           loc_BANK0_8116:
08116 A5 D0                     	LDA BackgroundUpdateBoundaryForward
08118 29 0F                     	AND #$0F
0811A C5 0F                     	CMP byte_RAM_F
0811C D0 00                     	BNE loc_BANK0_8121
0811E                           
0811E 4C 00 00                  	JMP loc_BANK0_819C
08121                           
08121                           ; ---------------------------------------------------------------------------
08121                           
08121                           loc_BANK0_8121:
08121 A9 01                     	LDA #$01
08123 20 00 00                  	JSR SetObjectLocks
08126                           
08126 A5 FC                     	LDA PPUScrollYMirror
08128 18                        	CLC
08129 69 04                     	ADC #$04
0812B 85 FC                     	STA PPUScrollYMirror
0812D A5 CB                     	LDA ScreenYLo
0812F 18                        	CLC
08130 69 04                     	ADC #$04
08132 85 CB                     	STA ScreenYLo
08134 90 00                     	BCC loc_BANK0_8138
08136                           
08136 E6 CA                     	INC ScreenYHi
08138                           
08138                           loc_BANK0_8138:
08138 A5 FC                     	LDA PPUScrollYMirror
0813A 29 07                     	AND #$07
0813C F0 00                     	BEQ loc_BANK0_813F
0813E                           
0813E 60                        	RTS
0813F                           
0813F                           ; ---------------------------------------------------------------------------
0813F                           
0813F                           loc_BANK0_813F:
0813F A5 FC                     	LDA PPUScrollYMirror
08141 C9 F0                     	CMP #$F0
08143 D0 00                     	BNE loc_BANK0_8152
08145                           
08145 A9 00                     	LDA #$00
08147 85 FC                     	STA PPUScrollYMirror
08149 A5 C8                     	LDA PPUScrollYHiMirror
0814B 49 02                     	EOR #$02
0814D 85 C8                     	STA PPUScrollYHiMirror
0814F 4A                        	LSR A
08150 85 C9                     	STA PPUScrollXHiMirror
08152                           
08152                           loc_BANK0_8152:
08152 A2 02                     	LDX #$02
08154 20 00 00                  	JSR sub_BANK0_828F
08157                           
08157 CA                        	DEX
08158 20 00 00                  	JSR sub_BANK0_828F
0815B                           
0815B A5 D4                     	LDA DrawBackgroundTilesPPUAddrLoForward
0815D 29 20                     	AND #$20
0815F D0 00                     	BNE loc_BANK0_816B
08161                           
08161 A2 02                     	LDX #$02
08163 20 00 00                  	JSR IncrementVerticalScrollRow
08166                           
08166 A2 01                     	LDX #$01
08168 20 00 00                  	JSR IncrementVerticalScrollRow
0816B                           
0816B                           loc_BANK0_816B:
0816B A2 02                     	LDX #$02
0816D 20 00 00                  	JSR PrepareBackgroundDrawing_Vertical
08170                           
08170                           loc_BANK0_8170:
08170 AD 04 05                  	LDA CameraScrollTiles
08173 C9 12                     	CMP #$12
08175 D0 00                     	BNE loc_BANK0_818F
08177                           
08177 A9 01                     	LDA #$01
08179 85 E4                     	STA byte_RAM_E4
0817B A5 D8                     	LDA NeedsScroll
0817D 4A                        	LSR A
0817E 90 00                     	BCC loc_BANK0_8186
08180                           
08180                           ; up
08180 A2 01                     	LDX #$01
08182 A9 00                     	LDA #$00
08184 F0 00                     	BEQ loc_BANK0_818A
08186                           
08186                           ; down
08186                           loc_BANK0_8186:
08186 A2 02                     	LDX #$02
08188 A9 10                     	LDA #$10
0818A                           
0818A                           loc_BANK0_818A:
0818A 85 01                     	STA byte_RAM_1
0818C 20 00 00                  	JSR sub_BANK0_8314
0818F                           
0818F                           loc_BANK0_818F:
0818F                           	; Update PPU for scrolling
0818F 20 00 00                  	JSR CopyBackgroundToPPUBuffer_Vertical
08192                           
08192 CE 04 05                  	DEC CameraScrollTiles
08195 D0 00                     	BNE locret_BANK0_81A0
08197                           
08197 A9 00                     	LDA #$00
08199 20 00 00                  	JSR SetObjectLocks
0819C                           
0819C                           loc_BANK0_819C:
0819C A9 00                     	LDA #$00
0819E 85 D8                     	STA NeedsScroll
081A0                           
081A0                           locret_BANK0_81A0:
081A0 60                        	RTS
081A1                           
081A1                           
081A1                           ; ---------------------------------------------------------------------------
081A1 01                        	.db $01
081A2                           
081A2                           
081A2                           ;
081A2                           ; Stashes screen scrolling information so that it can be restored after leaving
081A2                           ; the pause screen
081A2                           ;
081A2                           StashScreenScrollPosition:
081A2 A5 FC                     	LDA PPUScrollYMirror
081A4 8D 09 05                  	STA PPUScrollYMirror_Backup
081A7 A5 FD                     	LDA PPUScrollXMirror
081A9 8D 0A 05                  	STA PPUScrollXMirror_Backup
081AC A5 C8                     	LDA PPUScrollYHiMirror
081AE 8D 0B 05                  	STA PPUScrollYHiMirror_Backup
081B1 A5 C9                     	LDA PPUScrollXHiMirror
081B3 8D 0C 05                  	STA PPUScrollXHiMirror_Backup
081B6 A5 CA                     	LDA ScreenYHi
081B8 8D 13 05                  	STA ScreenYHi_Backup
081BB A5 CB                     	LDA ScreenYLo
081BD 8D 15 05                  	STA ScreenYLo_Backup
081C0 AD BE 04                  	LDA ScreenBoundaryLeftHi
081C3 8D 14 05                  	STA ScreenBoundaryLeftHi_Backup
081C6 A5 E1                     	LDA byte_RAM_E1
081C8 8D 17 05                  	STA byte_RAM_517
081CB A9 00                     	LDA #$00
081CD 85 FC                     	STA PPUScrollYMirror
081CF 85 FD                     	STA PPUScrollXMirror
081D1 85 C8                     	STA PPUScrollYHiMirror
081D3 85 C9                     	STA PPUScrollXHiMirror
081D5 60                        	RTS
081D6                           
081D6                           
081D6                           RestoreScreenScrollPosition:
081D6 AD 09 05                  	LDA PPUScrollYMirror_Backup
081D9 85 FC                     	STA PPUScrollYMirror
081DB AD 0A 05                  	LDA PPUScrollXMirror_Backup
081DE 85 FD                     	STA PPUScrollXMirror
081E0 8D C0 04                  	STA ScreenBoundaryLeftLo
081E3 AD 0B 05                  	LDA PPUScrollYHiMirror_Backup
081E6 85 C8                     	STA PPUScrollYHiMirror
081E8 AD 0C 05                  	LDA PPUScrollXHiMirror_Backup
081EB 85 C9                     	STA PPUScrollXHiMirror
081ED AD 14 05                  	LDA ScreenBoundaryLeftHi_Backup
081F0 8D BE 04                  	STA ScreenBoundaryLeftHi
081F3 AD 13 05                  	LDA ScreenYHi_Backup
081F6 85 CA                     	STA ScreenYHi
081F8 AD 15 05                  	LDA ScreenYLo_Backup
081FB 85 CB                     	STA ScreenYLo
081FD 60                        	RTS
081FE                           
081FE                           
081FE                           ; Used for redrawing the screen in a vertical area after unpausing
081FE                           sub_BANK0_81FE:
081FE A5 CF                     	LDA BackgroundUpdateBoundaryBackward
08200 29 10                     	AND #$10
08202 F0 00                     	BEQ loc_BANK0_820B
08204                           
08204 A5 E1                     	LDA byte_RAM_E1
08206 38                        	SEC
08207 E9 08                     	SBC #$08
08209 85 E1                     	STA byte_RAM_E1
0820B                           
0820B                           loc_BANK0_820B:
0820B A9 01                     	LDA #$01
0820D 85 E4                     	STA byte_RAM_E4
0820F A5 CF                     	LDA BackgroundUpdateBoundaryBackward
08211 85 CE                     	STA BackgroundUpdateBoundary
08213 A9 10                     	LDA #$10
08215 85 01                     	STA byte_RAM_1
08217 A2 00                     	LDX #$00
08219 20 00 00                  	JSR sub_BANK0_8314
0821C                           
0821C A5 D3                     	LDA DrawBackgroundTilesPPUAddrLoBackward
0821E 85 D2                     	STA DrawBackgroundTilesPPUAddrLo
08220 A5 E1                     	LDA byte_RAM_E1
08222 85 E2                     	STA byte_RAM_E2
08224 A2 01                     	LDX #$01
08226 20 00 00                  	JSR sub_BANK0_846A
08229                           
08229 A9 F0                     	LDA #$F0
0822B 8D 06 05                  	STA PPUScrollCheckHi
0822E 8D 07 05                  	STA PPUScrollCheckLo
08231 A5 D0                     	LDA BackgroundUpdateBoundaryForward
08233 8D 05 05                  	STA byte_RAM_505
08236 E6 D5                     	INC byte_RAM_D5
08238 A9 01                     	LDA #$01
0823A 85 06                     	STA byte_RAM_6
0823C 60                        	RTS
0823D                           
0823D                           
0823D                           ; Used for redrawing the background tiles in a vertical area
0823D                           sub_BANK0_823D:
0823D                           	; Clear the flag to indicate that we're drawing
0823D A2 00                     	LDX #$00
0823F 8E 37 05                  	STX byte_RAM_537
08242                           
08242 20 00 00                  	JSR PrepareBackgroundDrawing_Vertical
08245                           
08245                           	; Update PPU for area init
08245 20 00 00                  	JSR CopyBackgroundToPPUBuffer_Vertical
08248                           
08248 A2 00                     	LDX #$00
0824A 20 00 00                  	JSR sub_BANK0_828F
0824D                           
0824D AD 06 05                  	LDA PPUScrollCheckHi
08250 C5 D1                     	CMP DrawBackgroundTilesPPUAddrHi
08252 D0 00                     	BNE loc_BANK0_8277
08254                           
08254 AD 07 05                  	LDA PPUScrollCheckLo
08257 18                        	CLC
08258 69 20                     	ADC #$20
0825A C5 D2                     	CMP DrawBackgroundTilesPPUAddrLo
0825C D0 00                     	BNE loc_BANK0_8277
0825E                           
0825E                           loc_BANK0_825E:
0825E A5 06                     	LDA byte_RAM_6
08260 AA                        	TAX
08261 F0 00                     	BEQ loc_BANK0_8268
08263                           
08263 AD 17 05                  	LDA byte_RAM_517
08266 85 E1                     	STA byte_RAM_E1
08268                           
08268                           loc_BANK0_8268:
08268                           	; Set the flag to indicate that we've finished drawing
08268 EE 37 05                  	INC byte_RAM_537
0826B                           
0826B A9 00                     	LDA #$00
0826D 9D 3A 05                  	STA byte_RAM_53A, X
08270 8D 3D 05                  	STA byte_RAM_53D
08273 8D 3E 05                  	STA byte_RAM_53E
08276                           
08276 60                        	RTS
08277                           
08277                           ; ---------------------------------------------------------------------------
08277                           
08277                           loc_BANK0_8277:
08277 A5 D2                     	LDA DrawBackgroundTilesPPUAddrLo
08279 29 20                     	AND #$20
0827B D0 00                     	BNE locret_BANK0_828E
0827D                           
0827D A5 CE                     	LDA BackgroundUpdateBoundary
0827F CD 05 05                  	CMP byte_RAM_505
08282 F0 DA                     	BEQ loc_BANK0_825E
08284                           
08284 4C 00 00                  	JMP IncrementVerticalScrollRow
08287                           
08287                           ; ---------------------------------------------------------------------------
08287                           
08287                           ; Decrement tiles row
08287                           loc_BANK0_8287:
08287 B5 D3                     	LDA DrawBackgroundTilesPPUAddrLoBackward, X
08289 38                        	SEC
0828A E9 20                     	SBC #$20
0828C 95 D3                     	STA DrawBackgroundTilesPPUAddrLoBackward, X
0828E                           
0828E                           locret_BANK0_828E:
0828E 60                        	RTS
0828F                           
0828F                           
0828F                           ; Increment tiles row
0828F                           sub_BANK0_828F:
0828F B5 D2                     	LDA DrawBackgroundTilesPPUAddrLo, X
08291 18                        	CLC
08292 69 20                     	ADC #$20
08294 95 D2                     	STA DrawBackgroundTilesPPUAddrLo, X
08296 60                        	RTS
08297                           
08297                           
08297                           ;
08297                           ; Decrement the drawing boundary table entry by one row of tiles
08297                           ;
08297                           DecrementVerticalScrollRow:
08297                           	; Decrement the row offset
08297 B5 CF                     	LDA BackgroundUpdateBoundaryBackward, X
08299 38                        	SEC
0829A E9 10                     	SBC #$10
0829C 95 CF                     	STA BackgroundUpdateBoundaryBackward, X
0829E 29 F0                     	AND #$F0
082A0 C9 F0                     	CMP #$F0
082A2 D0 00                     	BNE DecrementVerticalScrollRow_Exit
082A4                           
082A4                           	; Decrement the page
082A4 B5 CF                     	LDA BackgroundUpdateBoundaryBackward, X
082A6 29 0F                     	AND #$0F
082A8 18                        	CLC
082A9 69 E0                     	ADC #$E0
082AB 95 CF                     	STA BackgroundUpdateBoundaryBackward, X
082AD D6 CF                     	DEC BackgroundUpdateBoundaryBackward, X
082AF B5 CF                     	LDA BackgroundUpdateBoundaryBackward, X
082B1 C9 DF                     	CMP #$DF
082B3 D0 00                     	BNE loc_BANK0_82B9
082B5                           
082B5                           	; Wrap around to the last row of the last page
082B5 A9 E9                     	LDA #$E9
082B7 95 CF                     	STA BackgroundUpdateBoundaryBackward, X
082B9                           
082B9                           ; @TODO: What's this doing, exactly?
082B9                           loc_BANK0_82B9:
082B9 A9 A0                     	LDA #$A0
082BB 95 D3                     	STA DrawBackgroundTilesPPUAddrLoBackward, X
082BD                           
082BD                           DecrementVerticalScrollRow_Exit:
082BD 60                        	RTS
082BE                           
082BE                           
082BE                           ;
082BE                           ; Increment the drawing boundary table entry by one column of tiles
082BE                           ;
082BE                           IncrementVerticalScrollRow:
082BE                           	; Increment the row offset
082BE B5 CE                     	LDA BackgroundUpdateBoundary, X
082C0 18                        	CLC
082C1 69 10                     	ADC #$10
082C3 95 CE                     	STA BackgroundUpdateBoundary, X
082C5 29 F0                     	AND #$F0
082C7 C9 F0                     	CMP #$F0
082C9 D0 00                     	BNE IncrementVerticalScrollRow_Exit
082CB                           
082CB                           	; Increment the page
082CB B5 CE                     	LDA BackgroundUpdateBoundary, X
082CD 29 0F                     	AND #$0F
082CF 95 CE                     	STA BackgroundUpdateBoundary, X
082D1 F6 CE                     	INC BackgroundUpdateBoundary, X
082D3 B5 CE                     	LDA BackgroundUpdateBoundary, X
082D5 C9 0A                     	CMP #$0A
082D7 D0 00                     	BNE loc_BANK0_82DD
082D9                           
082D9                           	; Wrap around to the first row of the first page
082D9 A9 00                     	LDA #$00
082DB 95 CE                     	STA BackgroundUpdateBoundary, X
082DD                           
082DD                           ; @TODO: What's this doing, exactly?
082DD                           loc_BANK0_82DD:
082DD A9 00                     	LDA #$00
082DF 95 D2                     	STA DrawBackgroundTilesPPUAddrLo, X
082E1                           
082E1                           IncrementVerticalScrollRow_Exit:
082E1 60                        	RTS
082E2                           
082E2                           
082E2                           ;
082E2                           ; Determines which background tiles from the decoded level data to draw to the
082E2                           ; screen and where to draw them for vertical areas.
082E2                           ;
082E2                           ; ##### Input
082E2                           ; - `BackgroundUpdateBoundary`: drawing boundary table
082E2                           ; - `X`: drawing boundary index (`$00` = full, `$01` = up, `$02` = down)
082E2                           ;
082E2                           ; ##### Output
082E2                           ; - `ReadLevelDataAddress`: decoded level data address
082E2                           ; - `ReadLevelDataOffset`: level data offset
082E2                           ; - `DrawBackgroundTilesPPUAddrHi`/`DrawBackgroundTilesPPUAddrLo`: PPU start address
082E2                           ;
082E2                           PrepareBackgroundDrawing_Vertical:
082E2                           	; Lower nybble is used for page
082E2 B5 CE                     	LDA BackgroundUpdateBoundary, X
082E4 29 0F                     	AND #$0F
082E6 A8                        	TAY
082E7                           	; Get the address of the decoded level data
082E7 B9 00 00                  	LDA DecodedLevelPageStartLo_Bank1, Y
082EA 85 E9                     	STA ReadLevelDataAddress
082EC B9 00 00                  	LDA DecodedLevelPageStartHi_Bank1, Y
082EF 85 EA                     	STA ReadLevelDataAddress + 1
082F1                           
082F1                           	; Upper nybble is used for the tile offset (rows)
082F1 B5 CE                     	LDA BackgroundUpdateBoundary, X
082F3 29 F0                     	AND #$F0
082F5 85 D7                     	STA ReadLevelDataOffset
082F7                           
082F7                           	; Determine where on the screen we should draw the tile
082F7 B5 CE                     	LDA BackgroundUpdateBoundary, X
082F9 4A                        	LSR A
082FA 90 00                     	BCC PrepareBackgroundDrawing_Vertical_Nametable2800
082FC                           
082FC A9 20                     	LDA #$20
082FE D0 00                     	BNE PrepareBackgroundDrawing_Vertical_SetNametableHi
08300                           
08300                           PrepareBackgroundDrawing_Vertical_Nametable2800:
08300 A9 28                     	LDA #$28
08302                           
08302                           PrepareBackgroundDrawing_Vertical_SetNametableHi:
08302 85 D1                     	STA DrawBackgroundTilesPPUAddrHi
08304                           
08304 B5 CE                     	LDA BackgroundUpdateBoundary, X
08306 29 C0                     	AND #$C0
08308 0A                        	ASL A
08309 2A                        	ROL A
0830A 2A                        	ROL A
0830B 65 D1                     	ADC DrawBackgroundTilesPPUAddrHi
0830D 85 D1                     	STA DrawBackgroundTilesPPUAddrHi
0830F                           
0830F B5 D2                     	LDA DrawBackgroundTilesPPUAddrLo, X
08311 85 D2                     	STA DrawBackgroundTilesPPUAddrLo
08313                           
08313                           PrepareBackgroundDrawing_Vertical_Exit:
08313 60                        	RTS
08314                           
08314                           
08314                           ;
08314                           ; =============== S U B R O U T I N E =======================================
08314                           ;
08314                           sub_BANK0_8314:
08314 B5 CE                     	LDA BackgroundUpdateBoundary, X
08316 29 10                     	AND #$10
08318 F0 F9                     	BEQ PrepareBackgroundDrawing_Vertical_Exit
0831A                           
0831A B5 CE                     	LDA BackgroundUpdateBoundary, X
0831C 85 03                     	STA byte_RAM_3
0831E 38                        	SEC
0831F E5 01                     	SBC byte_RAM_1
08321 95 CE                     	STA BackgroundUpdateBoundary, X
08323 20 E2 82                  	JSR PrepareBackgroundDrawing_Vertical
08326                           
08326                           ; loop through tiles to generate PPU attribute data
08326                           loc_BANK0_8326:
08326 A9 0F                     	LDA #$0F
08328 85 E3                     	STA PPUAttributeUpdateCounter
0832A A9 00                     	LDA #$00
0832C 85 D6                     	STA CopyBackgroundCounter
0832E                           
0832E                           loc_BANK0_832E:
0832E 20 00 00                  	JSR ReadNextTileAndSetPaletteInPPUAttribute
08331                           
08331 A5 E3                     	LDA PPUAttributeUpdateCounter
08333 10 F9                     	BPL loc_BANK0_832E
08335                           
08335 A5 03                     	LDA byte_RAM_3
08337 95 CE                     	STA BackgroundUpdateBoundary, X
08339 C6 E4                     	DEC byte_RAM_E4
0833B 4C E2 82                  	JMP PrepareBackgroundDrawing_Vertical
0833E                           
0833E                           
0833E                           ;
0833E                           ; This draws ground tiles to the PPU buffer
0833E                           ;
0833E                           ; ##### Input
0833E                           ; - `byte_RAM_300`: offset in PPU buffer
0833E                           ; - `DrawBackgroundTilesPPUAddrHi`/`DrawBackgroundTilesPPUAddrLo`: PPU start address
0833E                           ; - `ReadLevelDataAddress`: decoded level data address
0833E                           ; - `ReadLevelDataOffset`: level data offset
0833E                           ;
0833E                           CopyBackgroundToPPUBuffer_Vertical:
0833E                           	; Set the PPU start address (ie. where we're going to draw tiles)
0833E AE 00 03                  	LDX byte_RAM_300
08341 A5 D1                     	LDA DrawBackgroundTilesPPUAddrHi
08343 9D 01 03                  	STA PPUBuffer_301, X
08346 E8                        	INX
08347 A5 D2                     	LDA DrawBackgroundTilesPPUAddrLo
08349 9D 01 03                  	STA PPUBuffer_301, X
0834C E8                        	INX
0834D                           
0834D                           	; We're going to draw a full row of tiles on the screen
0834D A9 20                     	LDA #$20
0834F 9D 01 03                  	STA PPUBuffer_301, X
08352                           
08352                           	; Prepare the counters
08352 E8                        	INX
08353 A9 00                     	LDA #$00
08355 85 D6                     	STA CopyBackgroundCounter
08357 A9 0F                     	LDA #$0F
08359 85 E3                     	STA PPUAttributeUpdateCounter
0835B                           
0835B A5 D5                     	LDA byte_RAM_D5
0835D F0 00                     	BEQ CopyBackgroundToPPUBuffer_Vertical_Loop
0835F                           
0835F A4 D7                     	LDY ReadLevelDataOffset
08361 C0 E0                     	CPY #$E0
08363 D0 00                     	BNE CopyBackgroundToPPUBuffer_Vertical_Loop
08365                           
08365 A9 00                     	LDA #$00
08367 85 E4                     	STA byte_RAM_E4
08369 EE 39 05                  	INC UpdatingPPUAttributeBottomRow
0836C                           
0836C                           CopyBackgroundToPPUBuffer_Vertical_Loop:
0836C A4 D7                     	LDY ReadLevelDataOffset
0836E B1 E9                     	LDA (ReadLevelDataAddress), Y
08370 8D 1B 05                  	STA DrawTileId
08373 29 C0                     	AND #%11000000
08375 0A                        	ASL A
08376 2A                        	ROL A
08377 2A                        	ROL A
08378 A8                        	TAY
08379                           	; Get the tile quad pointer
08379 B9 00 00                  	LDA TileQuadPointersLo, Y
0837C 85 00                     	STA byte_RAM_0
0837E B9 00 00                  	LDA TileQuadPointersHi, Y
08381 85 01                     	STA byte_RAM_1
08383 A4 D7                     	LDY ReadLevelDataOffset
08385 B1 E9                     	LDA (ReadLevelDataAddress), Y
08387 0A                        	ASL A
08388 0A                        	ASL A
08389 A8                        	TAY
0838A A5 D5                     	LDA byte_RAM_D5
0838C F0 00                     	BEQ loc_BANK0_8390
0838E                           
0838E C8                        	INY
0838F C8                        	INY
08390                           
08390                           loc_BANK0_8390:
08390                           	; Write the tile to the PPU buffer
08390 B1 00                     	LDA (byte_RAM_0), Y
08392 9D 01 03                  	STA PPUBuffer_301, X
08395 E6 D6                     	INC CopyBackgroundCounter
08397 E8                        	INX
08398 C8                        	INY
08399 A5 D6                     	LDA CopyBackgroundCounter
0839B 4A                        	LSR A
0839C B0 F2                     	BCS loc_BANK0_8390
0839E                           
0839E E6 D7                     	INC ReadLevelDataOffset
083A0 A5 D5                     	LDA byte_RAM_D5
083A2 F0 00                     	BEQ loc_BANK0_83A7
083A4                           
083A4 20 00 00                  	JSR SetTilePaletteInPPUAttribute
083A7                           
083A7                           loc_BANK0_83A7:
083A7                           	; Did we finish drawing the row yet?
083A7 A5 D6                     	LDA CopyBackgroundCounter
083A9 C9 20                     	CMP #$20
083AB 90 BF                     	BCC CopyBackgroundToPPUBuffer_Vertical_Loop
083AD                           
083AD A9 00                     	LDA #$00
083AF 9D 01 03                  	STA PPUBuffer_301, X
083B2 8E 00 03                  	STX byte_RAM_300
083B5 A5 D5                     	LDA byte_RAM_D5
083B7 F0 00                     	BEQ loc_BANK0_840B
083B9                           
083B9 A5 E4                     	LDA byte_RAM_E4
083BB F0 00                     	BEQ loc_BANK0_83C2
083BD                           
083BD C6 E4                     	DEC byte_RAM_E4
083BF 4C 00 00                  	JMP loc_BANK0_83DE
083C2                           
083C2                           ; ---------------------------------------------------------------------------
083C2                           
083C2                           loc_BANK0_83C2:
083C2 A5 D8                     	LDA NeedsScroll
083C4 4A                        	LSR A
083C5 B0 00                     	BCS loc_BANK0_83D4
083C7                           
083C7                           ; down
083C7 A2 01                     	LDX #$01
083C9 20 00 00                  	JSR CopyBackgroundAttributesToPPUBuffer_Vertical
083CC                           
083CC A2 01                     	LDX #$01
083CE 20 00 00                  	JSR sub_BANK0_846A
083D1                           
083D1 4C 00 00                  	JMP loc_BANK0_83DE
083D4                           
083D4                           ; up
083D4                           loc_BANK0_83D4:
083D4 A2 00                     	LDX #$00
083D6 20 00 00                  	JSR CopyBackgroundAttributesToPPUBuffer_Vertical
083D9                           
083D9 A2 00                     	LDX #$00
083DB 20 00 00                  	JSR sub_BANK0_8478
083DE                           
083DE                           loc_BANK0_83DE:
083DE A2 00                     	LDX #$00
083E0 A5 D8                     	LDA NeedsScroll
083E2 4A                        	LSR A
083E3 90 00                     	BCC loc_BANK0_83FA
083E5                           
083E5                           ; up
083E5 E8                        	INX
083E6 B5 CF                     	LDA BackgroundUpdateBoundaryBackward, X
083E8 29 F0                     	AND #$F0
083EA C9 E0                     	CMP #$E0
083EC F0 00                     	BEQ loc_BANK0_83F4
083EE                           
083EE B5 CF                     	LDA BackgroundUpdateBoundaryBackward, X
083F0 29 10                     	AND #$10
083F2 D0 00                     	BNE loc_BANK0_840B
083F4                           
083F4                           loc_BANK0_83F4:
083F4 20 00 00                  	JSR sub_BANK0_8478
083F7                           
083F7 4C 00 00                  	JMP loc_BANK0_840B
083FA                           
083FA                           ; down
083FA                           loc_BANK0_83FA:
083FA B5 CF                     	LDA BackgroundUpdateBoundaryBackward, X
083FC 29 F0                     	AND #$F0
083FE C9 E0                     	CMP #$E0
08400 F0 00                     	BEQ loc_BANK0_8408
08402                           
08402 B5 CF                     	LDA BackgroundUpdateBoundaryBackward, X
08404 29 10                     	AND #$10
08406 F0 00                     	BEQ loc_BANK0_840B
08408                           
08408                           loc_BANK0_8408:
08408 20 00 00                  	JSR sub_BANK0_846A
0840B                           
0840B                           loc_BANK0_840B:
0840B A5 D5                     	LDA byte_RAM_D5
0840D 49 01                     	EOR #$01
0840F 85 D5                     	STA byte_RAM_D5
08411 60                        	RTS
08412                           
08412                           
08412                           ;
08412                           ; This draws ground background attributes to the PPU buffer
08412                           ;
08412                           CopyBackgroundAttributesToPPUBuffer_Vertical:
08412 AC 00 03                  	LDY byte_RAM_300
08415                           	; Setting the attribute address to update
08415 A5 D1                     	LDA DrawBackgroundTilesPPUAddrHi
08417 09 03                     	ORA #$03
08419 99 01 03                  	STA PPUBuffer_301, Y
0841C C8                        	INY
0841D B5 E1                     	LDA byte_RAM_E1, X
0841F 99 01 03                  	STA PPUBuffer_301, Y
08422 C8                        	INY
08423                           	; We're updating 8 blocks of attribute data
08423 A9 08                     	LDA #$08
08425 99 01 03                  	STA PPUBuffer_301, Y
08428 C8                        	INY
08429                           
08429 A2 07                     	LDX #$07
0842B                           CopyBackgroundAttributesToPPUBuffer_Vertical_Loop:
0842B AD 39 05                  	LDA UpdatingPPUAttributeBottomRow
0842E F0 00                     	BEQ CopyBackgroundAttributesToPPUBuffer_Vertical_FullRow
08430                           
08430                           CopyBackgroundAttributesToPPUBuffer_Vertical_HalfRow:
08430                           	; Bottom row of PPU attributes has half-sized blocks
08430                             ; Shift background palettes down one quad
08430 B5 D9                     	LDA ScrollingPPUAttributeUpdateBuffer, X
08432 4A                        	LSR A
08433 4A                        	LSR A
08434 4A                        	LSR A
08435 4A                        	LSR A
08436 95 D9                     	STA ScrollingPPUAttributeUpdateBuffer, X
08438 4C 00 00                  	JMP CopyBackgroundAttributesToPPUBuffer_Vertical_Next
0843B                           
0843B                           CopyBackgroundAttributesToPPUBuffer_Vertical_FullRow:
0843B A5 D8                     	LDA NeedsScroll
0843D 4A                        	LSR A
0843E 90 00                     	BCC CopyBackgroundAttributesToPPUBuffer_Vertical_Next
08440                           
08440                           CopyBackgroundAttributesToPPUBuffer_Vertical_Reverse:
08440                           	; Swap palettes for upper and lower background quads, since tiles are drawn
08440                           	; in the reverse order when scrolling up
08440 B5 D9                     	LDA ScrollingPPUAttributeUpdateBuffer, X
08442 0A                        	ASL A
08443 0A                        	ASL A
08444 0A                        	ASL A
08445 0A                        	ASL A
08446 85 01                     	STA byte_RAM_1
08448 B5 D9                     	LDA ScrollingPPUAttributeUpdateBuffer, X
0844A 4A                        	LSR A
0844B 4A                        	LSR A
0844C 4A                        	LSR A
0844D 4A                        	LSR A
0844E 05 01                     	ORA byte_RAM_1
08450 95 D9                     	STA ScrollingPPUAttributeUpdateBuffer, X
08452                           
08452                           CopyBackgroundAttributesToPPUBuffer_Vertical_Next:
08452 B5 D9                     	LDA ScrollingPPUAttributeUpdateBuffer, X
08454 99 01 03                  	STA PPUBuffer_301, Y
08457 C8                        	INY
08458 CA                        	DEX
08459 10 D0                     	BPL CopyBackgroundAttributesToPPUBuffer_Vertical_Loop
0845B                           
0845B A9 01                     	LDA #$01
0845D 85 E4                     	STA byte_RAM_E4
0845F 4A                        	LSR A
08460 8D 39 05                  	STA UpdatingPPUAttributeBottomRow
08463 99 01 03                  	STA PPUBuffer_301, Y
08466 8C 00 03                  	STY byte_RAM_300
08469 60                        	RTS
0846A                           
0846A                           
0846A                           ; Increment attributes row
0846A                           sub_BANK0_846A:
0846A B5 E1                     	LDA byte_RAM_E1, X
0846C 18                        	CLC
0846D 69 08                     	ADC #$08
0846F 95 E1                     	STA byte_RAM_E1, X
08471 90 00                     	BCC locret_BANK0_8477
08473                           
08473 A9 C0                     	LDA #$C0
08475 95 E1                     	STA byte_RAM_E1, X
08477                           
08477                           locret_BANK0_8477:
08477 60                        	RTS
08478                           
08478                           
08478                           ; Decrement attributes row
08478                           sub_BANK0_8478:
08478 B5 E1                     	LDA byte_RAM_E1, X
0847A 38                        	SEC
0847B E9 08                     	SBC #$08
0847D 95 E1                     	STA byte_RAM_E1, X
0847F C9 C0                     	CMP #$C0
08481 B0 00                     	BCS locret_BANK0_8487
08483                           
08483 A9 F8                     	LDA #$F8
08485 95 E1                     	STA byte_RAM_E1, X
08487                           
08487                           locret_BANK0_8487:
08487 60                        	RTS
08488                           
08488                           
08488                           ;
08488                           ; Sets the palette for the tile in the current PPU attribute block.
08488                           ; We effectively write these two bits at a time, since each attribute block
08488                           ; contains four background tiles.
08488                           ;
08488                           ; This subroutine is only used in vertical areas.
08488                           ;
08488                           ; ##### Input
08488                           ; - `DrawTileId`: tile ID to use for the palette
08488                           ; - `PPUAttributeUpdateCounter`: determines index to update in buffer
08488                           ;
08488                           SetTilePaletteInPPUAttribute:
08488 A5 E3                     	LDA PPUAttributeUpdateCounter
0848A 4A                        	LSR A
0848B A8                        	TAY
0848C                           	; Shift two bits to the right to make room for the next tile
0848C B9 D9 00                  	LDA ScrollingPPUAttributeUpdateBuffer, Y
0848F 4A                        	LSR A
08490 4A                        	LSR A
08491 99 D9 00                  	STA ScrollingPPUAttributeUpdateBuffer, Y
08494                           	; Load the color for the next tile and apply it to the attribute value
08494 AD 1B 05                  	LDA DrawTileId
08497 29 C0                     	AND #%11000000
08499 19 D9 00                  	ORA ScrollingPPUAttributeUpdateBuffer, Y
0849C 99 D9 00                  	STA ScrollingPPUAttributeUpdateBuffer, Y
0849F                           
0849F                           	; Move on to the next block
0849F C6 E3                     	DEC PPUAttributeUpdateCounter
084A1 60                        	RTS
084A2                           
084A2                           
084A2                           ; Unused?
084A2                           _code_04A2:
084A2 A2 07                     	LDX #$07
084A4 A9 00                     	LDA #$00
084A6                           
084A6                           ; Unused?
084A6                           loc_BANK0_84A6:
084A6 95 D9                     	STA ScrollingPPUAttributeUpdateBuffer, X
084A8 CA                        	DEX
084A9 D0 FB                     	BNE loc_BANK0_84A6
084AB                           
084AB 60                        	RTS
084AC                           
084AC                           
084AC                           ;
084AC                           ; Loads a background tile from the level data and determines its PPU attribute data
084AC                           ;
084AC                           ; ##### Input
084AC                           ; - `ReadLevelDataAddress`: decoded level data address
084AC                           ;
084AC                           ; ##### Output
084AC                           ; - `DrawTileId` - tile ID
084AC                           ;
084AC                           ReadNextTileAndSetPaletteInPPUAttribute:
084AC                           sub_BANK0_84AC:
084AC A4 D7                     	LDY ReadLevelDataOffset
084AE B1 E9                     	LDA (ReadLevelDataAddress), Y
084B0 8D 1B 05                  	STA DrawTileId
084B3 E6 D7                     	INC ReadLevelDataOffset
084B5 4C 88 84                  	JMP SetTilePaletteInPPUAttribute
084B8                           
084B8                           
084B8                           ; Unused space in the original ($84B8 - $84FF)
084B8                           unusedSpace $8500, $FF
084B8                           	IFDEF PRESERVE_UNUSED_SPACE
084B8 FF FF FF FF FF FF FF FF.. 		.pad $8500, $FF
08500                           	ENDIF
08500                           
08500                           
08500                           ;
08500                           ; Initializes a horizontal area
08500                           ;
08500                           InitializeAreaHorizontal:
08500 AD 02 05                  	LDA byte_RAM_502
08503 D0 00                     	BNE loc_BANK0_855C
08505                           
08505 A9 00                     	LDA #VMirror
08507 20 00 00                  	JSR ChangeNametableMirroring
0850A                           
0850A 20 00 00                  	JSR ApplyAreaTransition
0850D                           
0850D A9 00                     	LDA #$00
0850F 85 FC                     	STA PPUScrollYMirror
08511                           
08511 AD 33 05                  	LDA CurrentLevelEntryPage
08514 D0 00                     	BNE loc_BANK0_851A
08516                           
08516 A9 09                     	LDA #$09
08518 D0 00                     	BNE loc_BANK0_851D
0851A                           
0851A                           loc_BANK0_851A:
0851A 38                        	SEC
0851B E9 01                     	SBC #$01
0851D                           
0851D                           loc_BANK0_851D:
0851D 09 D0                     	ORA #$D0
0851F 85 CF                     	STA BackgroundUpdateBoundaryBackward
08521 38                        	SEC
08522 E9 20                     	SBC #$20
08524 85 CE                     	STA BackgroundUpdateBoundary
08526 AD 33 05                  	LDA CurrentLevelEntryPage
08529 18                        	CLC
0852A 69 01                     	ADC #$01
0852C C9 0A                     	CMP #$0A
0852E D0 00                     	BNE loc_BANK0_8532
08530                           
08530 A9 00                     	LDA #$00
08532                           
08532                           loc_BANK0_8532:
08532 09 10                     	ORA #$10
08534 85 D0                     	STA BackgroundUpdateBoundaryForward
08536 AD 33 05                  	LDA CurrentLevelEntryPage
08539 A0 01                     	LDY #$01
0853B 20 00 00                  	JSR ResetPPUScrollHi
0853E                           
0853E                           	; Set the flag for the initial screen render
0853E EE 02 05                  	INC byte_RAM_502
08541                           
08541                           	; Set the screen x-position
08541 AD 33 05                  	LDA CurrentLevelEntryPage
08544 8D BE 04                  	STA ScreenBoundaryLeftHi
08547                           
08547                           	; Initialize the PPU update boundary
08547 A9 01                     	LDA #$01
08549 8D 3A 05                  	STA byte_RAM_53A
0854C 4A                        	LSR A
0854D 85 06                     	STA byte_RAM_6
0854F A9 FF                     	LDA #$FF
08551 8D 05 05                  	STA byte_RAM_505
08554 A9 0F                     	LDA #$0F
08556 8D 07 05                  	STA PPUScrollCheckLo
08559                           
08559 20 00 00                  	JSR sub_BANK0_856A
0855C                           
0855C                           loc_BANK0_855C:
0855C 20 00 00                  	JSR sub_BANK0_87AA
0855F                           
0855F AD 3A 05                  	LDA byte_RAM_53A
08562 D0 00                     	BNE InitializeAreaHorizontal_Exit
08564                           
08564 8D 02 05                  	STA byte_RAM_502
08567 E6 13                     	INC BreakStartLevelLoop
08569                           
08569                           InitializeAreaHorizontal_Exit:
08569 60                        	RTS
0856A                           
0856A                           
0856A                           ; =============== S U B R O U T I N E =======================================
0856A                           
0856A                           sub_BANK0_856A:
0856A AD 33 05                  	LDA CurrentLevelEntryPage
0856D D0 00                     	BNE loc_BANK0_8576
0856F                           
0856F A5 BA                     	LDA MoveCameraX
08571 30 00                     	BMI loc_BANK0_85E7
08573                           
08573 AD 33 05                  	LDA CurrentLevelEntryPage
08576                           
08576                           loc_BANK0_8576:
08576 CD 3F 05                  	CMP CurrentLevelPages
08579 D0 00                     	BNE loc_BANK0_857F
0857B                           
0857B A5 BA                     	LDA MoveCameraX
0857D 10 00                     	BPL loc_BANK0_85E7
0857F                           
0857F                           loc_BANK0_857F:
0857F A2 02                     	LDX #$02
08581 A5 BA                     	LDA MoveCameraX
08583 10 00                     	BPL loc_BANK0_858B
08585                           
08585 A9 FF                     	LDA #$FF
08587 85 0B                     	STA byte_RAM_B
08589 D0 00                     	BNE loc_BANK0_858F
0858B                           
0858B                           loc_BANK0_858B:
0858B A9 00                     	LDA #$00
0858D 85 0B                     	STA byte_RAM_B
0858F                           
0858F                           loc_BANK0_858F:
0858F A5 BA                     	LDA MoveCameraX
08591 29 F0                     	AND #$F0
08593 18                        	CLC
08594 75 CE                     	ADC BackgroundUpdateBoundary, X
08596 08                        	PHP
08597 65 0B                     	ADC byte_RAM_B
08599 28                        	PLP
0859A 85 0C                     	STA byte_RAM_C
0859C A5 0B                     	LDA byte_RAM_B
0859E D0 00                     	BNE loc_BANK0_85B1
085A0                           
085A0 90 00                     	BCC loc_BANK0_85C2
085A2                           
085A2 B5 CE                     	LDA BackgroundUpdateBoundary, X
085A4 29 0F                     	AND #$0F
085A6 C9 09                     	CMP #$09
085A8 D0 00                     	BNE loc_BANK0_85C2
085AA                           
085AA A5 0C                     	LDA byte_RAM_C
085AC 29 F0                     	AND #$F0
085AE 4C 00 00                  	JMP loc_BANK0_85C4
085B1                           
085B1                           ; ---------------------------------------------------------------------------
085B1                           
085B1                           loc_BANK0_85B1:
085B1 B0 00                     	BCS loc_BANK0_85C2
085B3                           
085B3 B5 CE                     	LDA BackgroundUpdateBoundary, X
085B5 29 0F                     	AND #$0F
085B7 D0 00                     	BNE loc_BANK0_85C2
085B9                           
085B9 A5 0C                     	LDA byte_RAM_C
085BB 29 F0                     	AND #$F0
085BD 69 09                     	ADC #$09
085BF 4C 00 00                  	JMP loc_BANK0_85C4
085C2                           
085C2                           ; ---------------------------------------------------------------------------
085C2                           
085C2                           loc_BANK0_85C2:
085C2 A5 0C                     	LDA byte_RAM_C
085C4                           
085C4                           loc_BANK0_85C4:
085C4 95 CE                     	STA BackgroundUpdateBoundary, X
085C6 CA                        	DEX
085C7 10 C6                     	BPL loc_BANK0_858F
085C9                           
085C9 A5 BA                     	LDA MoveCameraX
085CB 85 FD                     	STA PPUScrollXMirror
085CD 8D C0 04                  	STA ScreenBoundaryLeftLo
085D0 29 F0                     	AND #$F0
085D2 8D 36 05                  	STA CurrentLevelPageX
085D5 A5 BA                     	LDA MoveCameraX
085D7 10 00                     	BPL loc_BANK0_85E7
085D9                           
085D9 CE BE 04                  	DEC ScreenBoundaryLeftHi
085DC A5 C9                     	LDA PPUScrollXHiMirror
085DE 49 01                     	EOR #$01
085E0 85 C9                     	STA PPUScrollXHiMirror
085E2 A9 01                     	LDA #$01
085E4 8D 07 05                  	STA PPUScrollCheckLo
085E7                           
085E7                           loc_BANK0_85E7:
085E7 A9 00                     	LDA #$00
085E9 85 BA                     	STA MoveCameraX
085EB 60                        	RTS
085EC                           
085EC                           ; End of function sub_BANK0_856A
085EC                           
085EC                           
085EC                           ;
085EC                           ; Applies horizontal screen scrolling.
085EC                           ;
085EC                           ; Unlike vertical scrolling, horizontal scrolling can happen continuously as
085EC                           ; the player moves left and right.
085EC                           ;
085EC                           ;
085EC                           ;
085EC                           ApplyHorizontalScroll:
085EC                           	; Reset the PPU tile update flag
085EC A9 00                     	LDA #$00
085EE 8D 1C 05                  	STA HasScrollingPPUTilesUpdate
085F1                           
085F1                           	; Are we scrolling in more tiles?
085F1 AD 38 05                  	LDA HorizontalScrollDirection
085F4 F0 00                     	BEQ ApplyHorizontalScroll_CheckMoveCameraX
085F6                           
085F6                           	; Which direction?
085F6 AD 38 05                  	LDA HorizontalScrollDirection
085F9 4A                        	LSR A
085FA B0 00                     	BCS ApplyHorizontalScroll_Left
085FC                           
085FC                           ApplyHorizontalScroll_Right:
085FC A2 02                     	LDX #$02
085FE 86 09                     	STX byte_RAM_9
08600 A9 10                     	LDA #$10
08602 85 01                     	STA byte_RAM_1
08604 CA                        	DEX
08605 AD 38 05                  	LDA HorizontalScrollDirection
08608 85 D8                     	STA NeedsScroll
0860A 20 00 00                  	JSR CopyAttributesToHorizontalBuffer
0860D                           
0860D A5 03                     	LDA byte_RAM_3
0860F 85 D0                     	STA BackgroundUpdateBoundaryForward
08611 A9 00                     	LDA #$00
08613 8D 38 05                  	STA HorizontalScrollDirection
08616 F0 00                     	BEQ ApplyHorizontalScroll_CheckMoveCameraX
08618                           
08618                           ApplyHorizontalScroll_Left:
08618 A2 01                     	LDX #$01
0861A 86 09                     	STX byte_RAM_9
0861C CA                        	DEX
0861D 86 01                     	STX byte_RAM_1
0861F AD 38 05                  	LDA HorizontalScrollDirection
08622 85 D8                     	STA NeedsScroll
08624 20 00 00                  	JSR CopyAttributesToHorizontalBuffer
08627                           
08627 A9 00                     	LDA #$00
08629 8D 38 05                  	STA HorizontalScrollDirection
0862C                           
0862C                           ApplyHorizontalScroll_CheckMoveCameraX:
0862C A5 BA                     	LDA MoveCameraX
0862E D0 00                     	BNE ApplyMoveCameraX
08630                           
08630 60                        	RTS
08631                           
08631                           
08631                           ApplyMoveCameraX:
08631 A5 BA                     	LDA MoveCameraX
08633 10 00                     	BPL ApplyMoveCameraX_Right
08635                           
08635                           ApplyMoveCameraX_ScrollLeft:
08635 A9 01                     	LDA #$01
08637 85 D8                     	STA NeedsScroll
08639                           
08639                           	; Weird `JMP`, but okay...
08639 4C 00 00                  	JMP ApplyMoveCameraX_Left
0863C                           
0863C                           ApplyMoveCameraX_Right:
0863C A9 02                     	LDA #$02
0863E 85 D8                     	STA NeedsScroll
08640                           
08640 A6 BA                     	LDX MoveCameraX
08642                           ApplyMoveCameraX_Right_Loop:
08642 A5 FD                     	LDA PPUScrollXMirror
08644 D0 00                     	BNE loc_BANK0_8651
08646                           
08646 AD BE 04                  	LDA ScreenBoundaryLeftHi
08649 CD 3F 05                  	CMP CurrentLevelPages
0864C D0 00                     	BNE loc_BANK0_8651
0864E                           
0864E                           	; Can't scroll past beyond the last page of the area
0864E 4C 00 00                  	JMP ApplyMoveCameraX_Exit
08651                           
08651                           ; Scrolling one pixel at a time in a tight loop seems crazy at first, but in
08651                           ; practice it only ends up being like 3 iterations at most.
08651                           ApplyMoveCameraX_Right_AddPixel:
08651                           loc_BANK0_8651:
08651 A5 FD                     	LDA PPUScrollXMirror
08653 18                        	CLC
08654 69 01                     	ADC #$01
08656 85 FD                     	STA PPUScrollXMirror
08658 8D C0 04                  	STA ScreenBoundaryLeftLo
0865B 90 00                     	BCC loc_BANK0_8669
0865D                           
0865D EE BE 04                  	INC ScreenBoundaryLeftHi
08660 A5 C9                     	LDA PPUScrollXHiMirror
08662 49 01                     	EOR #$01
08664 85 C9                     	STA PPUScrollXHiMirror
08666 0A                        	ASL A
08667 85 C8                     	STA PPUScrollYHiMirror
08669                           
08669                           loc_BANK0_8669:
08669 AD BE 04                  	LDA ScreenBoundaryLeftHi
0866C CD 3F 05                  	CMP CurrentLevelPages
0866F F0 00                     	BEQ loc_BANK0_8685
08671                           
08671 A5 FD                     	LDA PPUScrollXMirror
08673 29 F0                     	AND #$F0
08675 CD 36 05                  	CMP CurrentLevelPageX
08678 F0 00                     	BEQ ApplyMoveCameraX_Right_Next
0867A                           
0867A 8D 36 05                  	STA CurrentLevelPageX
0867D A9 01                     	LDA #$01
0867F 8D 1C 05                  	STA HasScrollingPPUTilesUpdate
08682                           
08682                           ApplyMoveCameraX_Right_Next:
08682 CA                        	DEX
08683 D0 BD                     	BNE ApplyMoveCameraX_Right_Loop
08685                           
08685                           loc_BANK0_8685:
08685 AD 1C 05                  	LDA HasScrollingPPUTilesUpdate
08688 F0 00                     	BEQ ApplyMoveCameraX_Exit
0868A                           
0868A A2 02                     	LDX #$02
0868C                           loc_BANK0_868C:
0868C 20 00 00                  	JSR IncrementHorizontalScrollColumn
0868F                           
0868F CA                        	DEX
08690 D0 FA                     	BNE loc_BANK0_868C
08692                           
08692 A2 02                     	LDX #$02
08694 20 00 00                  	JSR PrepareBackgroundDrawing_Horizontal
08697                           
08697 4C 00 00                  	JMP loc_BANK0_86E6
0869A                           
0869A                           
0869A                           ApplyMoveCameraX_Left:
0869A A6 BA                     	LDX MoveCameraX
0869C                           ApplyMoveCameraX_Left_Loop:
0869C A5 FD                     	LDA PPUScrollXMirror
0869E D0 00                     	BNE loc_BANK0_86A8
086A0                           
086A0 AD BE 04                  	LDA ScreenBoundaryLeftHi
086A3 D0 00                     	BNE loc_BANK0_86A8
086A5                           
086A5                           	; Can't scroll past beyond the first page of the area
086A5 4C 00 00                  	JMP ApplyMoveCameraX_Exit
086A8                           
086A8                           loc_BANK0_86A8:
086A8 A5 FD                     	LDA PPUScrollXMirror
086AA 38                        	SEC
086AB E9 01                     	SBC #$01
086AD 85 FD                     	STA PPUScrollXMirror
086AF 8D C0 04                  	STA ScreenBoundaryLeftLo
086B2 B0 00                     	BCS loc_BANK0_86C0
086B4                           
086B4 CE BE 04                  	DEC ScreenBoundaryLeftHi
086B7 A5 C9                     	LDA PPUScrollXHiMirror
086B9 49 01                     	EOR #$01
086BB 85 C9                     	STA PPUScrollXHiMirror
086BD 0A                        	ASL A
086BE 85 C8                     	STA PPUScrollYHiMirror
086C0                           
086C0                           loc_BANK0_86C0:
086C0 A5 FD                     	LDA PPUScrollXMirror
086C2 29 F0                     	AND #$F0
086C4 CD 36 05                  	CMP CurrentLevelPageX
086C7 F0 00                     	BEQ loc_BANK0_86D1
086C9                           
086C9 8D 36 05                  	STA CurrentLevelPageX
086CC A9 01                     	LDA #$01
086CE 8D 1C 05                  	STA HasScrollingPPUTilesUpdate
086D1                           
086D1                           loc_BANK0_86D1:
086D1 E8                        	INX
086D2 D0 C8                     	BNE ApplyMoveCameraX_Left_Loop
086D4                           
086D4 AD 1C 05                  	LDA HasScrollingPPUTilesUpdate
086D7 F0 00                     	BEQ ApplyMoveCameraX_Exit
086D9                           
086D9 A2 02                     	LDX #$02
086DB                           loc_BANK0_86DB:
086DB 20 00 00                  	JSR DecrementHorizontalScrollColumn
086DE                           
086DE CA                        	DEX
086DF D0 FA                     	BNE loc_BANK0_86DB
086E1                           
086E1 A2 01                     	LDX #$01
086E3 20 00 00                  	JSR PrepareBackgroundDrawing_Horizontal
086E6                           
086E6                           loc_BANK0_86E6:
086E6 20 00 00                  	JSR CopyBackgroundToPPUBuffer_Horizontal
086E9                           
086E9                           ApplyMoveCameraX_Exit:
086E9 A9 00                     	LDA #$00
086EB 85 D8                     	STA NeedsScroll
086ED 60                        	RTS
086EE                           
086EE                           
086EE                           ;
086EE                           ; Resets the PPU high scrolling values and sets the high byte of the PPU scroll offset.
086EE                           ;
086EE                           ; ##### Input
086EE                           ; - `A`: 0 = use nametable A, 1 = use nametable B
086EE                           ; - `Y`: 0 = vertical, 1 = horizontal
086EE                           ;
086EE                           ; ##### Output
086EE                           ; - `PPUScrollYHiMirror`
086EE                           ; - `PPUScrollXHiMirror`
086EE                           ; - `PPUScrollCheckHi`: PPU scroll offset high byte
086EE                           ;
086EE                           ResetPPUScrollHi:
086EE 4A                        	LSR A
086EF B0 00                     	BCS ResetPPUScrollHi_NametableB
086F1                           
086F1                           ResetPPUScrollHi_NametableA:
086F1 A9 01                     	LDA #$01
086F3 85 C9                     	STA PPUScrollXHiMirror
086F5 0A                        	ASL A
086F6 85 C8                     	STA PPUScrollYHiMirror
086F8 A9 20                     	LDA #$20
086FA D0 00                     	BNE ResetPPUScrollHi_Exit
086FC                           
086FC                           ResetPPUScrollHi_NametableB:
086FC A9 00                     	LDA #$00
086FE 85 C9                     	STA PPUScrollXHiMirror
08700 85 C8                     	STA PPUScrollYHiMirror
08702 B9 00 00                  	LDA PPUScrollHiOffsets, Y
08705                           
08705                           ResetPPUScrollHi_Exit:
08705 8D 06 05                  	STA PPUScrollCheckHi
08708 60                        	RTS
08709                           
08709                           
08709                           ;
08709                           ; High byte of the PPU scroll offset for nametable B.
08709                           ;
08709                           ; When mirroring vertically, nametable A is `$2000` and nametable B is `$2800`.
08709                           ; When mirroring horizontally, nametable A is `$2000` and nametable B is `$2400`.
08709                           ;
08709                           PPUScrollHiOffsets:
08709 28                        	.db $28 ; vertical
0870A 24                        	.db $24 ; horizontal
0870B                           
0870B                           
0870B                           ; The sub-area "page" is the index in the DecodedLevelPageStart table.
0870B                           ; This is why there are 10 blank pages in the jar enemy data.
0870B                           SubAreaPage:
0870B 0A                        	.db $0A
0870C                           
0870C                           
0870C                           ; Stash the PPU scrolling data from the main area and rest it for the subarea
0870C                           UseSubareaScreenBoundaries:
0870C A5 FD                     	LDA PPUScrollXMirror
0870E 8D 0A 05                  	STA PPUScrollXMirror_Backup
08711 A5 C9                     	LDA PPUScrollXHiMirror
08713 8D 0C 05                  	STA PPUScrollXHiMirror_Backup
08716 AD BE 04                  	LDA ScreenBoundaryLeftHi
08719 8D 14 05                  	STA ScreenBoundaryLeftHi_Backup
0871C EE 3D 05                  	INC byte_RAM_53D
0871F AD 0B 87                  	LDA SubAreaPage
08722 8D 33 05                  	STA CurrentLevelEntryPage
08725 20 EE 86                  	JSR ResetPPUScrollHi
08728                           
08728 A9 00                     	LDA #$00
0872A 85 FD                     	STA PPUScrollXMirror
0872C 8D C0 04                  	STA ScreenBoundaryLeftLo
0872F AD 0B 87                  	LDA SubAreaPage
08732 8D BE 04                  	STA ScreenBoundaryLeftHi
08735                           
08735 20 00 00                  	JSR ApplyAreaTransition
08738                           
08738 AD 0B 87                  	LDA SubAreaPage
0873B 85 CE                     	STA BackgroundUpdateBoundary
0873D A9 E0                     	LDA #$E0
0873F 8D 06 05                  	STA PPUScrollCheckHi
08742 AD 0B 87                  	LDA SubAreaPage
08745 18                        	CLC
08746 69 F0                     	ADC #$F0
08748 8D 05 05                  	STA byte_RAM_505
0874B 60                        	RTS
0874C                           
0874C                           
0874C                           ; Restore the PPU scrolling data for the main area
0874C                           UseMainAreaScreenBoundaries:
0874C AD 0A 05                  	LDA PPUScrollXMirror_Backup
0874F 85 FD                     	STA PPUScrollXMirror
08751 8D C0 04                  	STA ScreenBoundaryLeftLo
08754 AD 0C 05                  	LDA PPUScrollXHiMirror_Backup
08757 85 C9                     	STA PPUScrollXHiMirror
08759 AD 14 05                  	LDA ScreenBoundaryLeftHi_Backup
0875C 8D BE 04                  	STA ScreenBoundaryLeftHi
0875F AD 3D 05                  	LDA byte_RAM_53D
08762 D0 00                     	BNE UseMainAreaScreenBoundaries_Exit
08764                           
08764 EE 3E 05                  	INC byte_RAM_53E ; unused?
08767 EE 3D 05                  	INC byte_RAM_53D
0876A E6 D5                     	INC byte_RAM_D5
0876C 20 00 00                  	JSR RestorePlayerPosition
0876F                           
0876F A5 CF                     	LDA BackgroundUpdateBoundaryBackward
08771 85 CE                     	STA BackgroundUpdateBoundary
08773 A9 10                     	LDA #$10
08775 85 01                     	STA byte_RAM_1
08777 A9 F0                     	LDA #$F0
08779 8D 06 05                  	STA PPUScrollCheckHi
0877C 8D 07 05                  	STA PPUScrollCheckLo
0877F A5 D0                     	LDA BackgroundUpdateBoundaryForward
08781 8D 05 05                  	STA byte_RAM_505
08784                           
08784                           UseMainAreaScreenBoundaries_Exit:
08784 60                        	RTS
08785                           
08785                           
08785                           ; Used for redrawing the screen in a horizontal area after unpausing
08785                           ;
08785                           ; Updates the background update boundary to read tiles from the correct part of the level
08785                           sub_BANK0_8785:
08785 A5 CF                     	LDA BackgroundUpdateBoundaryBackward
08787 85 CE                     	STA BackgroundUpdateBoundary
08789 A9 10                     	LDA #$10
0878B 85 01                     	STA byte_RAM_1
0878D A9 F0                     	LDA #$F0
0878F 8D 06 05                  	STA PPUScrollCheckHi
08792 8D 07 05                  	STA PPUScrollCheckLo
08795 A5 D0                     	LDA BackgroundUpdateBoundaryForward
08797 18                        	CLC
08798 69 10                     	ADC #$10
0879A 69 00                     	ADC #$00
0879C C9 0A                     	CMP #$0A
0879E D0 00                     	BNE loc_BANK0_87A2
087A0                           
087A0 A9 00                     	LDA #$00
087A2                           
087A2                           loc_BANK0_87A2:
087A2 8D 05 05                  	STA byte_RAM_505
087A5 A9 01                     	LDA #$01
087A7 85 06                     	STA byte_RAM_6
087A9 60                        	RTS
087AA                           
087AA                           ; Used for redrawing the background tiles in a horizontal area
087AA                           sub_BANK0_87AA:
087AA A2 00                     	LDX #$00
087AC 8E 37 05                  	STX byte_RAM_537
087AF 8E 1C 05                  	STX HasScrollingPPUTilesUpdate
087B2 86 D8                     	STX NeedsScroll
087B4                           
087B4 20 00 00                  	JSR PrepareBackgroundDrawing_Horizontal
087B7                           
087B7 20 00 00                  	JSR CopyBackgroundToPPUBuffer_Horizontal
087BA                           
087BA AD 06 05                  	LDA PPUScrollCheckHi
087BD C5 D1                     	CMP DrawBackgroundTilesPPUAddrHi
087BF D0 00                     	BNE loc_BANK0_87DA
087C1                           
087C1 AD 07 05                  	LDA PPUScrollCheckLo
087C4 18                        	CLC
087C5 69 01                     	ADC #$01
087C7 C5 D2                     	CMP DrawBackgroundTilesPPUAddrLo
087C9 D0 00                     	BNE loc_BANK0_87DA
087CB                           
087CB                           loc_BANK0_87CB:
087CB A9 00                     	LDA #$00
087CD 8D 3A 05                  	STA byte_RAM_53A
087D0 8D 3D 05                  	STA byte_RAM_53D
087D3 8D 3E 05                  	STA byte_RAM_53E
087D6 EE 37 05                  	INC byte_RAM_537
087D9 60                        	RTS
087DA                           
087DA                           ; ---------------------------------------------------------------------------
087DA                           
087DA                           loc_BANK0_87DA:
087DA A5 CE                     	LDA BackgroundUpdateBoundary
087DC CD 05 05                  	CMP byte_RAM_505
087DF F0 EA                     	BEQ loc_BANK0_87CB
087E1                           
087E1 A2 00                     	LDX #$00
087E3 4C 00 00                  	JMP IncrementHorizontalScrollColumn
087E6                           
087E6                           ;
087E6                           ; Decrement the drawing boundary table entry by one column of tiles
087E6                           ;
087E6                           DecrementHorizontalScrollColumn:
087E6                           	; Decrement the column offset
087E6 B5 CE                     	LDA BackgroundUpdateBoundary, X
087E8 38                        	SEC
087E9 E9 10                     	SBC #$10
087EB 95 CE                     	STA BackgroundUpdateBoundary, X
087ED B0 00                     	BCS DecrementHorizontalScrollColumn_Exit
087EF                           
087EF                           	; Decrement the page
087EF D6 CE                     	DEC BackgroundUpdateBoundary, X
087F1 B5 CE                     	LDA BackgroundUpdateBoundary, X
087F3 C9 EF                     	CMP #$EF
087F5 D0 00                     	BNE DecrementHorizontalScrollColumn_Exit
087F7                           
087F7                           	; Wrap around to the last column of the last page
087F7 A9 F9                     	LDA #$F9
087F9 95 CE                     	STA BackgroundUpdateBoundary, X
087FB                           
087FB                           DecrementHorizontalScrollColumn_Exit:
087FB 60                        	RTS
087FC                           
087FC                           
087FC                           ;
087FC                           ; Increment the drawing boundary table entry by one column of tiles
087FC                           ;
087FC                           IncrementHorizontalScrollColumn:
087FC                           	; Increment the column offset
087FC B5 CE                     	LDA BackgroundUpdateBoundary, X
087FE 18                        	CLC
087FF 69 10                     	ADC #$10
08801 95 CE                     	STA BackgroundUpdateBoundary, X
08803 90 00                     	BCC IncrementHorizontalScrollColumn_Exit
08805                           
08805                           	; Increment the page
08805 F6 CE                     	INC BackgroundUpdateBoundary, X
08807 B5 CE                     	LDA BackgroundUpdateBoundary, X
08809 C9 0A                     	CMP #$0A
0880B D0 00                     	BNE IncrementHorizontalScrollColumn_Exit
0880D                           
0880D                           	; Wrap around to the first page
0880D A9 00                     	LDA #$00
0880F 95 CE                     	STA BackgroundUpdateBoundary, X
08811                           
08811                           IncrementHorizontalScrollColumn_Exit:
08811 60                        	RTS
08812                           
08812                           
08812                           ;
08812                           ; Determines which background tiles from the decoded level data to draw to the
08812                           ; screen and where to draw them for horizontal areas.
08812                           ;
08812                           ; ##### Input
08812                           ; - `BackgroundUpdateBoundary`: drawing boundary table
08812                           ; - `X`: drawing boundary index (`$00` = full, `$01` = left, `$02` = right)
08812                           ;
08812                           ; ##### Output
08812                           ; - `ReadLevelDataAddress`: decoded level data address
08812                           ; - `ReadLevelDataOffset`: level data offset
08812                           ; - `DrawBackgroundTilesPPUAddrHi`/`DrawBackgroundTilesPPUAddrLo`: PPU start address
08812                           ;
08812                           PrepareBackgroundDrawing_Horizontal:
08812                           	; Stash Y so we can restore it later
08812 84 0F                     	STY byte_RAM_F
08814                           
08814                           	; Lower nybble is used for page
08814 B5 CE                     	LDA BackgroundUpdateBoundary, X
08816 29 0F                     	AND #$0F
08818 A8                        	TAY
08819                           	; Get the address of the decoded level data
08819 B9 00 00                  	LDA DecodedLevelPageStartLo_Bank1, Y
0881C 85 E9                     	STA ReadLevelDataAddress
0881E B9 00 00                  	LDA DecodedLevelPageStartHi_Bank1, Y
08821 85 EA                     	STA ReadLevelDataAddress + 1
08823                           
08823                           	; Upper nybble is used for the tile offset (columns)
08823 B5 CE                     	LDA BackgroundUpdateBoundary, X
08825 4A                        	LSR A
08826 4A                        	LSR A
08827 4A                        	LSR A
08828 4A                        	LSR A
08829 85 D7                     	STA ReadLevelDataOffset
0882B                           
0882B                           	; Determine where on the screen we should draw the tile
0882B 0A                        	ASL A
0882C 85 D2                     	STA DrawBackgroundTilesPPUAddrLo
0882E                           
0882E A0 20                     	LDY #$20
08830 B5 CE                     	LDA BackgroundUpdateBoundary, X
08832 4A                        	LSR A
08833 B0 00                     	BCS PrepareBackgroundDrawing_Horizontal_Exit
08835                           
08835 A0 24                     	LDY #$24
08837                           
08837                           PrepareBackgroundDrawing_Horizontal_Exit:
08837 84 D1                     	STY DrawBackgroundTilesPPUAddrHi
08839                           
08839                           	; Restore original Y value
08839 A4 0F                     	LDY byte_RAM_F
0883B                           
0883B 60                        	RTS
0883C                           
0883C                           
0883C                           ;
0883C                           ; horizontal
0883C                           ;
0883C                           sub_BANK0_883C:
0883C 86 08                     	STX byte_RAM_8
0883E A6 09                     	LDX byte_RAM_9
08840 A0 02                     	LDY #$02
08842 B5 CE                     	LDA BackgroundUpdateBoundary, X
08844 85 03                     	STA byte_RAM_3
08846 38                        	SEC
08847 E5 01                     	SBC byte_RAM_1
08849 95 CE                     	STA BackgroundUpdateBoundary, X
0884B                           
0884B 20 12 88                  	JSR PrepareBackgroundDrawing_Horizontal
0884E                           
0884E A9 07                     	LDA #$07
08850 85 E3                     	STA PPUAttributeUpdateCounter
08852 A9 00                     	LDA #$00
08854 85 D6                     	STA CopyBackgroundCounter
08856                           
08856                           loc_BANK0_8856:
08856 20 00 00                  	JSR sub_BANK0_8925
08859                           
08859 A5 E3                     	LDA PPUAttributeUpdateCounter
0885B 10 F9                     	BPL loc_BANK0_8856
0885D                           
0885D A5 D2                     	LDA DrawBackgroundTilesPPUAddrLo
0885F 29 1C                     	AND #$1C
08861 4A                        	LSR A
08862 4A                        	LSR A
08863 09 C0                     	ORA #$C0
08865 8D BD 03                  	STA DrawBackgroundAttributesPPUAddrLo
08868 A5 D1                     	LDA DrawBackgroundTilesPPUAddrHi
0886A 09 03                     	ORA #$03
0886C 8D BC 03                  	STA DrawBackgroundAttributesPPUAddrHi
0886F A6 08                     	LDX byte_RAM_8
08871 60                        	RTS
08872                           
08872                           
08872                           ;
08872                           ; Draws the background data to the PPU buffer
08872                           ;
08872                           CopyBackgroundToPPUBuffer_Horizontal:
08872 A9 0F                     	LDA #$0F
08874 85 E3                     	STA PPUAttributeUpdateCounter
08876                           
08876 A9 00                     	LDA #$00
08878 85 D6                     	STA CopyBackgroundCounter
0887A 85 D5                     	STA byte_RAM_D5
0887C AA                        	TAX
0887D                           CopyBackgroundToPPUBuffer_Horizontal_Loop:
0887D A4 D7                     	LDY ReadLevelDataOffset
0887F B1 E9                     	LDA (ReadLevelDataAddress), Y
08881 8D 1B 05                  	STA DrawTileId
08884 29 C0                     	AND #%11000000
08886 0A                        	ASL A
08887 2A                        	ROL A
08888 2A                        	ROL A
08889 A8                        	TAY
0888A                           	; Get the tile quad pointer
0888A B9 00 00                  	LDA TileQuadPointersLo, Y
0888D 85 00                     	STA byte_RAM_0
0888F B9 00 00                  	LDA TileQuadPointersHi, Y
08892 85 01                     	STA byte_RAM_1
08894                           
08894 A4 D7                     	LDY ReadLevelDataOffset
08896 B1 E9                     	LDA (ReadLevelDataAddress), Y
08898 0A                        	ASL A
08899 0A                        	ASL A
0889A A8                        	TAY
0889B A5 D5                     	LDA byte_RAM_D5
0889D F0 00                     	BEQ loc_BANK0_88A0
0889F                           
0889F C8                        	INY
088A0                           
088A0                           loc_BANK0_88A0:
088A0 B1 00                     	LDA (byte_RAM_0), Y
088A2 9D 80 03                  	STA ScrollingPPUTileUpdateBuffer, X
088A5 C8                        	INY
088A6 B1 00                     	LDA (byte_RAM_0), Y
088A8 9D 9E 03                  	STA ScrollingPPUTileUpdateBuffer + $1E, X
088AB C8                        	INY
088AC B1 00                     	LDA (byte_RAM_0), Y
088AE 9D 81 03                  	STA ScrollingPPUTileUpdateBuffer + $01, X
088B1 C8                        	INY
088B2 B1 00                     	LDA (byte_RAM_0), Y
088B4 9D 9F 03                  	STA ScrollingPPUTileUpdateBuffer + $1F, X
088B7 E6 D6                     	INC CopyBackgroundCounter
088B9 E8                        	INX
088BA E8                        	INX
088BB A5 D7                     	LDA ReadLevelDataOffset
088BD 18                        	CLC
088BE 69 10                     	ADC #$10
088C0 85 D7                     	STA ReadLevelDataOffset
088C2 A5 D6                     	LDA CopyBackgroundCounter
088C4 C9 0F                     	CMP #$0F
088C6 90 B5                     	BCC CopyBackgroundToPPUBuffer_Horizontal_Loop
088C8                           
088C8 A9 00                     	LDA #$00
088CA 8D BC 03                  	STA DrawBackgroundAttributesPPUAddrHi
088CD A5 D8                     	LDA NeedsScroll
088CF 4A                        	LSR A
088D0 B0 00                     	BCS loc_BANK0_88F2
088D2                           
088D2                           ; down
088D2 A5 D2                     	LDA DrawBackgroundTilesPPUAddrLo
088D4 29 02                     	AND #$02
088D6 F0 00                     	BEQ loc_BANK0_88FD
088D8                           
088D8 A5 D8                     	LDA NeedsScroll
088DA D0 00                     	BNE loc_BANK0_88F8
088DC                           
088DC A9 10                     	LDA #$10
088DE 85 01                     	STA byte_RAM_1
088E0 A2 00                     	LDX #$00
088E2 86 09                     	STX byte_RAM_9
088E4 E8                        	INX
088E5 20 00 00                  	JSR CopyAttributesToHorizontalBuffer
088E8                           
088E8 A5 03                     	LDA byte_RAM_3
088EA 85 CE                     	STA BackgroundUpdateBoundary
088EC 20 12 88                  	JSR PrepareBackgroundDrawing_Horizontal
088EF                           
088EF 4C 00 00                  	JMP loc_BANK0_88FD
088F2                           
088F2                           ; up
088F2                           loc_BANK0_88F2:
088F2 A5 D2                     	LDA DrawBackgroundTilesPPUAddrLo
088F4 29 02                     	AND #$02
088F6 D0 00                     	BNE loc_BANK0_88FD
088F8                           
088F8                           loc_BANK0_88F8:
088F8 A5 D8                     	LDA NeedsScroll
088FA 8D 38 05                  	STA HorizontalScrollDirection
088FD                           
088FD                           loc_BANK0_88FD:
088FD EE 1C 05                  	INC HasScrollingPPUTilesUpdate
08900 60                        	RTS
08901                           
08901                           
08901                           ;
08901                           ; Does some kind of transformation to copy PPU attribute data from the common
08901                           ; scrolling PPU update buffer to the horizontal-only buffer.
08901                           ;
08901                           ; I'm not totally sure why it is necessary to do this rather than writing the
08901                           ; attribute data in the final order the first time?
08901                           ;
08901                           ; NOTE: There is code that assumes `X = $00` after running this subroutine!
08901                           ;
08901                           CopyAttributesToHorizontalBuffer:
08901 20 3C 88                  	JSR sub_BANK0_883C
08904                           
08904 A2 07                     	LDX #$07
08906 86 0E                     	STX byte_RAM_E
08908 A0 00                     	LDY #$00
0890A                           CopyAttributesToHorizontalBuffer_Loop:
0890A A6 0E                     	LDX byte_RAM_E
0890C B5 D9                     	LDA ScrollingPPUAttributeUpdateBuffer, X
0890E 99 BE 03                  	STA HorizontalScrollingPPUAttributeUpdateBuffer, Y
08911 C8                        	INY
08912 CA                        	DEX
08913 CA                        	DEX
08914 CA                        	DEX
08915 CA                        	DEX
08916 B5 D9                     	LDA ScrollingPPUAttributeUpdateBuffer, X
08918 99 BE 03                  	STA HorizontalScrollingPPUAttributeUpdateBuffer, Y
0891B C8                        	INY
0891C C6 0E                     	DEC byte_RAM_E
0891E A5 0E                     	LDA byte_RAM_E
08920 C9 03                     	CMP #03
08922 D0 E6                     	BNE CopyAttributesToHorizontalBuffer_Loop
08924                           
08924 60                        	RTS
08925                           
08925                           
08925                           ;
08925                           ; Determines the PPU attribute data for a group of four tiles in a horizontal area.
08925                           ; Reads a group of four background tiles to determine the PPU attribute data
08925                           ;
08925                           sub_BANK0_8925:
08925 84 0F                     	STY byte_RAM_F
08927 A9 01                     	LDA #01
08929 85 04                     	STA byte_RAM_4
0892B A4 D7                     	LDY ReadLevelDataOffset
0892D A6 E3                     	LDX PPUAttributeUpdateCounter
0892F                           
0892F                           loc_BANK0_892F:
0892F B5 D9                     	LDA ScrollingPPUAttributeUpdateBuffer, X
08931 4A                        	LSR A
08932 4A                        	LSR A
08933 95 D9                     	STA ScrollingPPUAttributeUpdateBuffer, X
08935 B1 E9                     	LDA (ReadLevelDataAddress), Y
08937 29 C0                     	AND #%11000000
08939 15 D9                     	ORA ScrollingPPUAttributeUpdateBuffer, X
0893B 95 D9                     	STA ScrollingPPUAttributeUpdateBuffer, X
0893D C8                        	INY
0893E B5 D9                     	LDA ScrollingPPUAttributeUpdateBuffer, X
08940 4A                        	LSR A
08941 4A                        	LSR A
08942 95 D9                     	STA ScrollingPPUAttributeUpdateBuffer, X
08944 B1 E9                     	LDA (ReadLevelDataAddress), Y
08946 29 C0                     	AND #%11000000
08948 15 D9                     	ORA ScrollingPPUAttributeUpdateBuffer, X
0894A 95 D9                     	STA ScrollingPPUAttributeUpdateBuffer, X
0894C A5 D7                     	LDA ReadLevelDataOffset
0894E 18                        	CLC
0894F 69 10                     	ADC #$10
08951 A8                        	TAY
08952 85 D7                     	STA ReadLevelDataOffset
08954 C6 04                     	DEC byte_RAM_4
08956 10 D7                     	BPL loc_BANK0_892F
08958                           
08958 C6 E3                     	DEC PPUAttributeUpdateCounter
0895A A4 0F                     	LDY byte_RAM_F
0895C 60                        	RTS
0895D                           
0895D                           
0895D                           SetObjectLocks:
0895D A2 07                     	LDX #$07
0895F                           
0895F                           SetObjectLocks_Loop:
0895F 9D 1B 04                  	STA ObjectLock - 1, X
08962 CA                        	DEX
08963 10 FA                     	BPL SetObjectLocks_Loop
08965                           
08965 60                        	RTS
08966                           
08966                           
08966                           
08966                           ; Unused space in the original ($8966 - $89FF)
08966                           unusedSpace $8A00, $FF
08966                           	IFDEF PRESERVE_UNUSED_SPACE
08966 FF FF FF FF FF FF FF FF.. 		.pad $8A00, $FF
08A00                           	ENDIF
08A00                           
08A00                           
08A00                           GrowShrinkSFXIndexes:
08A00 08                        	.db SoundEffect2_Shrinking
08A01 20                        	.db SoundEffect2_Growing
08A02                           
08A02                           ; SWAPP
08A02                           CheckCharacterSwap:
08A02                           CheckSelect:
08A02 A5 F5                     	LDA Player1JoypadPress
08A04 C9 20                     	CMP #ControllerInput_Select
08A06 D0 00                     	BNE CheckStart
08A08 A9 08                     	LDA #DPCM_ItemPull
08A0A 8D 01 06                  	STA DPCMQueue
08A0D E6 8F                     	INC CurrentCharacter
08A0F 60                        	RTS
08A10                           
08A10                           CheckStart:
08A10 C9 10                     	CMP #ControllerInput_Start
08A12 D0 00                     	BNE ReturnFromSwap
08A14 A9 40                     	LDA #DPCM_BossHurt
08A16 8D 01 06                  	STA DPCMQueue
08A19 C6 8F                     	DEC CurrentCharacter
08A1B                           
08A1B                           ReturnFromSwap:
08A1B 60                        	RTS
08A1C                           
08A1C                           HandlePlayerState:
08A1C                           IFDEF CONTROLLER_2_DEBUG
08A1C 20 00 00                  	JSR CheckPlayer2Joypad
08A1F                           ENDIF
08A1F                           ;	JSR CheckCharacterSwap ; Read the subroutine name
08A1F                           
08A1F A5 50                     	LDA PlayerState ; Handles player states?
08A21 C9 02                     	CMP #PlayerState_Lifting
08A23 B0 00                     	BCS loc_BANK0_8A26 ; If the player is changing size, just handle that
08A25                           
08A25 A9 00                     	LDA #$00 ; Check if the player needs to change size
08A27 A0 10                     	LDY #$10
08A29 CC C2 04                  	CPY PlayerHealth
08A2C 2A                        	ROL A
08A2D 4D F6 06                  	EOR PlayerCurrentSize
08A30 F0 00                     	BEQ loc_BANK0_8A26
08A32                           
08A32 AC F6 06                  	LDY PlayerCurrentSize
08A35 B9 00 8A                  	LDA GrowShrinkSFXIndexes, Y
08A38 8D 04 06                  	STA SoundEffectQueue2
08A3B A9 1E                     	LDA #$1E
08A3D 85 82                     	STA PlayerStateTimer
08A3F A9 08                     	LDA #PlayerState_ChangingSize
08A41 85 50                     	STA PlayerState
08A43                           
08A43                           loc_BANK0_8A26:
08A43 A9 00                     	LDA #ObjAttrib_Palette0
08A45 85 64                     	STA PlayerAttributes
08A47 A5 50                     	LDA PlayerState
08A49 20 00 00                  	JSR JumpToTableAfterJump ; Player state handling?
08A4C                           
08A4C 00 00                     	.dw HandlePlayerState_Normal ; Normal
08A4E 00 00                     	.dw HandlePlayerState_Climbing ; Climbing
08A50 00 00                     	.dw HandlePlayerState_Lifting ; Lifting
08A52 00 00                     	.dw HandlePlayerState_ClimbingAreaTransition ; Climbing area transition
08A54 00 00                     	.dw HandlePlayerState_GoingDownJar ; Going down jar
08A56 00 00                     	.dw HandlePlayerState_ExitingJar ; Exiting jar
08A58 00 00                     	.dw HandlePlayerState_HawkmouthEating ; Hawkmouth eating
08A5A                           IFNDEF RESPAWN_INSTEAD_OF_DEATH
08A5A 00 00                     	.dw HandlePlayerState_Dying ; Dying
08A5C                           ELSE
08A5C                           	.dw HandlePlayerState_Respawning
08A5C                           ENDIF
08A5C 00 00                     	.dw HandlePlayerState_ChangingSize ; Changing size
08A5E                           
08A5E                           
08A5E                           HandlePlayerState_Normal:
08A5E 20 00 00                  	JSR PlayerGravity
08A61                           
08A61                           	; player animation frame, crouch jump charging
08A61 20 00 00                  	JSR sub_BANK0_8C1A
08A64                           
08A64                           	; maybe only y-collision?
08A64 20 00 00                  	JSR PlayerTileCollision
08A67                           
08A67                           	; screen boundary x-collision
08A67 20 00 00                  	JSR PlayerAreaBoundaryCollision
08A6A                           
08A6A 20 00 00                  	JSR ApplyPlayerPhysicsY
08A6D                           
08A6D                           
08A6D                           ;
08A6D                           ; Applies player physics on the x-axis
08A6D                           ;
08A6D                           ApplyPlayerPhysicsX:
08A6D A2 00                     	LDX #$00
08A6F 20 00 00                  	JSR ApplyPlayerPhysics
08A72                           
08A72 A5 EC                     	LDA IsHorizontalLevel
08A74 D0 00                     	BNE ApplyPlayerPhysicsX_Exit
08A76                           
08A76 85 14                     	STA PlayerXHi
08A78                           
08A78                           ApplyPlayerPhysicsX_Exit:
08A78 60                        	RTS
08A79                           
08A79                           
08A79                           ;
08A79                           ; What goes up must come down
08A79                           ;
08A79                           HandlePlayerState_Dying:
08A79 A5 82                     	LDA PlayerStateTimer
08A7B D0 00                     	BNE locret_BANK0_8A86
08A7D                           
08A7D AD 2A 04                  	LDA PlayerScreenYHi
08A80 C9 02                     	CMP #02
08A82 F0 00                     	BEQ LoseALife
08A84                           
08A84 20 00 00                  	JSR ApplyPlayerPhysicsY
08A87                           
08A87 A5 46                     	LDA PlayerYVelocity
08A89 30 00                     	BMI loc_BANK0_8A72
08A8B                           
08A8B C9 39                     	CMP #$39
08A8D B0 00                     	BCS locret_BANK0_8A86
08A8F                           
08A8F                           loc_BANK0_8A72:
08A8F E6 46                     	INC PlayerYVelocity
08A91 E6 46                     	INC PlayerYVelocity
08A93 60                        	RTS
08A94                           
08A94                           ; ---------------------------------------------------------------------------
08A94                           
08A94                           LoseALife:
08A94 A9 02                     	LDA #02
08A96 85 C7                     	STA PlayerAnimationFrame
08A98 A0 01                     	LDY #$01 ; Set game mode to title card
08A9A CE ED 04                  	DEC ExtraLives
08A9D D0 00                     	BNE SetGameModeAfterDeath
08A9F                           
08A9F C8                        	INY ; If no lives, increase game mode
08AA0                           ; from 1 (title card) to 2 (game over)
08AA0                           
08AA0                           SetGameModeAfterDeath:
08AA0 8C EC 04                  	STY GameMode
08AA3                           
08AA3                           locret_BANK0_8A86:
08AA3 60                        	RTS
08AA4                           
08AA4                           ; ---------------------------------------------------------------------------
08AA4                           
08AA4                           HandlePlayerState_Lifting:
08AA4 A5 82                     	LDA PlayerStateTimer
08AA6 D0 00                     	BNE locret_BANK0_8AC1
08AA8                           
08AA8 AE 2D 04                  	LDX ObjectBeingCarriedIndex
08AAB B4 A8                     	LDY ObjectBeingCarriedTimer, X
08AAD C0 02                     	CPY #$02
08AAF 90 00                     	BCC loc_BANK0_8ABB
08AB1                           
08AB1 C0 07                     	CPY #$07
08AB3 D0 00                     	BNE loc_BANK0_8A9D
08AB5                           
08AB5 A9 08                     	LDA #DPCM_ItemPull
08AB7 8D 01 06                  	STA DPCMQueue
08ABA                           
08ABA                           loc_BANK0_8A9D:
08ABA D6 A8                     	DEC ObjectBeingCarriedTimer, X
08ABC B9 00 00                  	LDA PlayerLiftFrames, Y
08ABF 85 C7                     	STA PlayerAnimationFrame
08AC1 B5 51                     	LDA EnemyState, X
08AC3 C9 06                     	CMP #$06
08AC5 F0 00                     	BEQ loc_BANK0_8AB0
08AC7                           
08AC7 B5 90                     	LDA ObjectType, X
08AC9 C9 32                     	CMP #Enemy_VegetableSmall
08ACB D0 00                     	BNE loc_BANK0_8AB5
08ACD                           
08ACD                           loc_BANK0_8AB0:
08ACD B9 00 00                  	LDA PlayerLiftTimer - 2, Y
08AD0 10 00                     	BPL loc_BANK0_8AB8
08AD2                           
08AD2                           loc_BANK0_8AB5:
08AD2 B9 44 05                  	LDA PickupSpeedAnimation - 2, Y
08AD5                           
08AD5                           loc_BANK0_8AB8:
08AD5 85 82                     	STA PlayerStateTimer
08AD7 60                        	RTS
08AD8                           
08AD8                           ; ---------------------------------------------------------------------------
08AD8                           
08AD8                           loc_BANK0_8ABB:
08AD8 85 50                     	STA PlayerState
08ADA E6 99                     	INC PlayerInAir
08ADC                           
08ADC                           loc_BANK0_8ABF:
08ADC E6 9A                     	INC PlayerDucking
08ADE                           IFDEF PLAYER_HITBOX
08ADE                           	LDA PlayerDucking
08ADE                           	STA PlayerHitbox
08ADE                           ENDIF
08ADE                           
08ADE                           locret_BANK0_8AC1:
08ADE 60                        	RTS
08ADF                           
08ADF                           
08ADF                           PlayerLiftTimer:
08ADF 00                        	.db $00
08AE0 01                        	.db $01
08AE1 01                        	.db $01
08AE2 01                        	.db $01
08AE3                           
08AE3                           PlayerLiftFrames:
08AE3 01                        	.db $01
08AE4 02                        	.db $02
08AE5 04                        	.db $04
08AE6 04                        	.db $04
08AE7 04                        	.db $04
08AE8 04                        	.db $04
08AE9 08                        	.db $08
08AEA 08                        	.db $08
08AEB                           
08AEB                           byte_BANK0_8ACE:
08AEB 00                        	.db $00
08AEC 10                        	.db $10
08AED F0                        	.db $F0
08AEE                           ; ---------------------------------------------------------------------------
08AEE                           
08AEE                           HandlePlayerState_Climbing:
08AEE A5 F7                     	LDA Player1JoypadHeld
08AF0 29 0C                     	AND #ControllerInput_Down | ControllerInput_Up
08AF2 4A                        	LSR A
08AF3 4A                        	LSR A
08AF4 A8                        	TAY
08AF5 C0 02                     	CPY #$02
08AF7 D0 00                     	BNE loc_BANK0_8ADF
08AF9                           
08AF9 20 00 00                  	JSR PlayerClimbAnimation
08AFC                           
08AFC                           loc_BANK0_8ADF:
08AFC B9 00 00                  	LDA ClimbSpeed, Y
08AFF 85 46                     	STA PlayerYVelocity
08B01 A5 F7                     	LDA Player1JoypadHeld
08B03 29 03                     	AND #ControllerInput_Right | ControllerInput_Left
08B05 A8                        	TAY
08B06 B9 EB 8A                  	LDA byte_BANK0_8ACE, Y
08B09 85 3C                     	STA PlayerXVelocity
08B0B A5 28                     	LDA PlayerXLo
08B0D 18                        	CLC
08B0E 69 04                     	ADC #$04
08B10 29 0F                     	AND #$0F
08B12 C9 08                     	CMP #$08
08B14 B0 00                     	BCS loc_BANK0_8B14
08B16                           
08B16 AC 00 00                  	LDY TileCollisionHitboxIndex + $0B
08B19 A5 46                     	LDA PlayerYVelocity
08B1B 30 00                     	BMI loc_BANK0_8B01
08B1D                           
08B1D C8                        	INY
08B1E                           
08B1E                           loc_BANK0_8B01:
08B1E A2 00                     	LDX #$00
08B20 20 00 00                  	JSR PlayerTileCollision_CheckClimbable
08B23                           
08B23 B0 00                     	BCS loc_BANK0_8B0E
08B25                           
08B25                           loc_BANK0_8B08:
08B25 A5 46                     	LDA PlayerYVelocity
08B27 10 00                     	BPL loc_BANK0_8B14
08B29                           
08B29 86 46                     	STX PlayerYVelocity
08B2B                           
08B2B                           loc_BANK0_8B0E:
08B2B 20 6D 8A                  	JSR ApplyPlayerPhysicsX
08B2E                           
08B2E 4C 00 00                  	JMP ApplyPlayerPhysicsY
08B31                           
08B31                           ; ---------------------------------------------------------------------------
08B31                           
08B31                           loc_BANK0_8B14:
08B31 A9 00                     	LDA #$00
08B33 85 50                     	STA PlayerState
08B35 60                        	RTS
08B36                           
08B36                           
08B36                           ;
08B36                           ; Does climbing animation and sound
08B36                           ;
08B36                           PlayerClimbAnimation:
08B36 A5 10                     	LDA byte_RAM_10
08B38 29 07                     	AND #$07
08B3A D0 00                     	BNE PlayerClimbAnimation_Exit
08B3C                           
08B3C A5 9D                     	LDA PlayerDirection
08B3E 49 01                     	EOR #$01
08B40 85 9D                     	STA PlayerDirection
08B42 A9 02                     	LDA #SoundEffect2_Climbing
08B44 8D 04 06                  	STA SoundEffectQueue2
08B47                           
08B47                           PlayerClimbAnimation_Exit:
08B47 60                        	RTS
08B48                           
08B48                           
08B48                           ClimbableTiles:
08B48 C2                        	.db BackgroundTile_Vine
08B49 D4                        	.db BackgroundTile_VineStandable
08B4A C3                        	.db BackgroundTile_VineBottom
08B4B C4                        	.db BackgroundTile_ClimbableSky
08B4C 07                        	.db BackgroundTile_Chain
08B4D 80                        	.db BackgroundTile_Ladder
08B4E 81                        	.db BackgroundTile_LadderShadow
08B4F 94                        	.db BackgroundTile_LadderStandable
08B50 95                        	.db BackgroundTile_LadderStandableShadow
08B51 17                        	.db BackgroundTile_ChainStandable
08B52                           
08B52                           
08B52                           ;
08B52                           ; Checks whether the player is on a climbable tile
08B52                           ;
08B52                           ; Input
08B52                           ;   byte_RAM_0 = tile ID
08B52                           ; Output
08B52                           ;   C = set if the player is on a climbable tile
08B52                           ;
08B52                           PlayerTileCollision_CheckClimbable:
08B52 20 00 00                  	JSR sub_BANK0_924F
08B55                           
08B55 A5 00                     	LDA byte_RAM_0
08B57 A0 09                     	LDY #$09
08B59                           
08B59                           PlayerTileCollision_CheckClimbable_Loop:
08B59 D9 48 8B                  	CMP ClimbableTiles, Y
08B5C F0 00                     	BEQ PlayerTileCollision_CheckClimbable_Exit
08B5E                           
08B5E 88                        	DEY
08B5F 10 F8                     	BPL PlayerTileCollision_CheckClimbable_Loop
08B61                           
08B61 18                        	CLC
08B62                           
08B62                           PlayerTileCollision_CheckClimbable_Exit:
08B62 60                        	RTS
08B63                           
08B63                           
08B63                           HandlePlayerState_GoingDownJar:
08B63 A9 20                     	LDA #ObjAttrib_BehindBackground
08B65 85 64                     	STA PlayerAttributes
08B67 E6 32                     	INC PlayerYLo
08B69 A5 32                     	LDA PlayerYLo
08B6B 29 0F                     	AND #$0F
08B6D D0 00                     	BNE HandlePlayerState_GoingDownJar_Exit
08B6F                           
08B6F 85 50                     	STA PlayerState
08B71 20 00 00                  	JSR DoAreaReset
08B74                           
08B74 68                        	PLA
08B75 68                        	PLA
08B76 20 00 00                  	JSR StashPlayerPosition_Bank0
08B79                           
08B79 A9 02                     	LDA #TransitionType_Jar
08B7B 8D 34 05                  	STA TransitionType
08B7E AD EE 04                  	LDA InJarType
08B81 D0 00                     	BNE HandlePlayerState_GoingDownJar_NonWarp
08B83                           
08B83 A9 04                     	LDA #GameMode_Warp
08B85 8D EC 04                  	STA GameMode
08B88 60                        	RTS
08B89                           
08B89                           HandlePlayerState_GoingDownJar_NonWarp:
08B89 C9 01                     	CMP #$01
08B8B F0 00                     	BEQ HandlePlayerState_GoingDownJar_Regular
08B8D                           
08B8D 8D 27 06                  	STA DoAreaTransition
08B90 60                        	RTS
08B91                           
08B91                           HandlePlayerState_GoingDownJar_Regular:
08B91 8D 28 06                  	STA InSubspaceOrJar
08B94                           
08B94                           HandlePlayerState_GoingDownJar_Exit:
08B94 60                        	RTS
08B95                           
08B95                           
08B95                           HandlePlayerState_ExitingJar:
08B95 A9 20                     	LDA #ObjAttrib_BehindBackground
08B97 85 64                     	STA PlayerAttributes
08B99 C6 32                     	DEC PlayerYLo
08B9B A5 32                     	LDA PlayerYLo
08B9D 29 0F                     	AND #$0F
08B9F D0 00                     	BNE locret_BANK0_8B86
08BA1                           
08BA1 85 50                     	STA PlayerState
08BA3                           
08BA3                           locret_BANK0_8B86:
08BA3 60                        	RTS
08BA4                           
08BA4                           
08BA4                           ; The climb transition triggers on particular player screen y-positions
08BA4                           ClimbTransitionYExitPositionHi:
08BA4 00                        	.db $00 ; down
08BA5 FF                        	.db $FF ; up
08BA6                           
08BA6                           ClimbTransitionYExitPositionLo:
08BA6 EE                        	.db $EE ; down
08BA7 DE                        	.db $DE ; up
08BA8                           
08BA8                           ; The second climbing trigger table uses $00 as the high value
08BA8                           ClimbTransitionYEnterPositionLo:
08BA8 09                        	.db $09 ; down
08BA9 A1                        	.db $A1 ; up
08BAA                           
08BAA                           
08BAA                           HandlePlayerState_ClimbingAreaTransition:
08BAA                           	; Determine the climbing direction from the y-velocity ($00 = down, $00 = up)
08BAA A5 46                     	LDA PlayerYVelocity
08BAC 0A                        	ASL A
08BAD 2A                        	ROL A
08BAE 29 01                     	AND #$01
08BB0 A8                        	TAY
08BB1                           
08BB1                           HandlePlayerState_CheckExitPosition:
08BB1                           	; Determine whether the player screen y-position matches the table entry
08BB1 AD 2A 04                  	LDA PlayerScreenYHi
08BB4 D9 A4 8B                  	CMP ClimbTransitionYExitPositionHi, Y
08BB7 D0 00                     	BNE HandlePlayerState_CheckEnterPosition
08BB9                           
08BB9 AD 2B 04                  	LDA PlayerScreenYLo
08BBC D9 A6 8B                  	CMP ClimbTransitionYExitPositionLo, Y
08BBF D0 00                     	BNE HandlePlayerState_CheckEnterPosition
08BC1                           
08BC1                           	; The position matches, so keep climbing and transition to the next area
08BC1 20 00 00                  	JSR DoAreaReset
08BC4                           
08BC4 EE 27 06                  	INC DoAreaTransition
08BC7 A9 03                     	LDA #TransitionType_Vine
08BC9 8D 34 05                  	STA TransitionType
08BCC 60                        	RTS
08BCD                           
08BCD                           HandlePlayerState_CheckEnterPosition:
08BCD AD 2A 04                  	LDA PlayerScreenYHi
08BD0 D0 00                     	BNE HandlePlayerState_JustClimb
08BD2                           
08BD2                           	; Climbing until player reaches the desired position
08BD2 AD 2B 04                  	LDA PlayerScreenYLo
08BD5 D9 A8 8B                  	CMP ClimbTransitionYEnterPositionLo, Y
08BD8 F0 00                     	BEQ HandlePlayerState_SetClimbing
08BDA                           
08BDA                           HandlePlayerState_JustClimb:
08BDA                           	; do the climb animation if the player is going up
08BDA 98                        	TYA
08BDB F0 00                     	BEQ HandlePlayerState_JustClimb_Physics
08BDD                           
08BDD 20 36 8B                  	JSR PlayerClimbAnimation
08BE0                           
08BE0                           HandlePlayerState_JustClimb_Physics:
08BE0 4C 00 00                  	JMP ApplyPlayerPhysicsY
08BE3                           
08BE3                           HandlePlayerState_SetClimbing:
08BE3 A9 01                     	LDA #PlayerState_Climbing
08BE5 85 50                     	STA PlayerState
08BE7 60                        	RTS
08BE8                           
08BE8                           
08BE8                           
08BE8                           HandlePlayerState_HawkmouthEating:
08BE8 A5 82                     	LDA PlayerStateTimer
08BEA F0 00                     	BEQ loc_BANK0_8BE9
08BEC                           
08BEC 20 00 00                  	JSR ApplyPlayerPhysicsY
08BEF                           
08BEF                           	LDA_abs PlayerCollision
08BEF                           	IFDEF COMPATIBILITY
08BEF AD                        		.db $ad
08BF0 5A 00                     		.dw PlayerCollision
08BF2                           	ELSE
08BF2                           		LDA PlayerCollision
08BF2                           		NOP_compat
08BF2                           	ENDIF
08BF2                           
08BF2 F0 00                     	BEQ locret_BANK0_8BEB
08BF4                           
08BF4 A9 20                     	LDA #ObjAttrib_BehindBackground
08BF6 85 64                     	STA PlayerAttributes
08BF8 A9 04                     	LDA #$04
08BFA 85 3C                     	STA PlayerXVelocity
08BFC A9 01                     	LDA #$01
08BFE 85 9D                     	STA PlayerDirection
08C00                           
08C00                           loc_BANK0_8BE3:
08C00 20 6D 8A                  	JSR ApplyPlayerPhysicsX
08C03                           
08C03 4C 00 00                  	JMP PlayerWalkJumpAnim
08C06                           
08C06                           ; ---------------------------------------------------------------------------
08C06                           
08C06                           loc_BANK0_8BE9:
08C06 85 50                     	STA PlayerState
08C08                           
08C08                           locret_BANK0_8BEB:
08C08 60                        	RTS
08C09                           
08C09                           
08C09                           ; Alternate between large and small graphics on these frames when changing size
08C09                           ChangingSizeKeyframes:
08C09 05                        	.db $05
08C0A 0A                        	.db $0A
08C0B 0F                        	.db $0F
08C0C 14                        	.db $14
08C0D 19                        	.db $19
08C0E                           
08C0E                           
08C0E                           HandlePlayerState_ChangingSize:
08C0E A5 82                     	LDA PlayerStateTimer
08C10 F0 00                     	BEQ loc_BANK0_8C0D
08C12                           
08C12 E6 85                     	INC DamageInvulnTime
08C14                           
08C14 A0 04                     	LDY #$04
08C16                           HandlePlayerState_ChangingSize_Loop:
08C16 D9 09 8C                  	CMP ChangingSizeKeyframes, Y
08C19 D0 00                     	BNE HandlePlayerState_ChangingSize_Next
08C1B                           
08C1B AD F6 06                  	LDA PlayerCurrentSize
08C1E 49 01                     	EOR #$01
08C20 8D F6 06                  	STA PlayerCurrentSize
08C23 4C 00 00                  	JMP LoadCharacterCHRBanks
08C26                           
08C26                           HandlePlayerState_ChangingSize_Next:
08C26 88                        	DEY
08C27 10 ED                     	BPL HandlePlayerState_ChangingSize_Loop
08C29                           
08C29 60                        	RTS
08C2A                           
08C2A                           ; ---------------------------------------------------------------------------
08C2A                           
08C2A                           loc_BANK0_8C0D:
08C2A A4 C7                     	LDY PlayerAnimationFrame
08C2C C0 0A                     	CPY #$0A
08C2E D0 00                     	BNE loc_BANK0_8C15
08C30                           
08C30 A9 01                     	LDA #PlayerState_Climbing
08C32                           
08C32                           loc_BANK0_8C15:
08C32 85 50                     	STA PlayerState
08C34 60                        	RTS
08C35                           
08C35                           ; ---------------------------------------------------------------------------
08C35                           
08C35                           PlayerControlAcceleration:
08C35 FE                        	.db $FE
08C36 02                        	.db $02
08C37                           
08C37                           ; =============== S U B R O U T I N E =======================================
08C37                           
08C37                           ; player crouch subroutine
08C37                           sub_BANK0_8C1A:
08C37 20 00 00                  	JSR PlayerWalkJumpAnim
08C3A                           
08C3A A5 99                     	LDA PlayerInAir
08C3C D0 00                     	BNE ResetPartialCrouchJumpTimer
08C3E                           
08C3E A5 9A                     	LDA PlayerDucking
08C40 F0 00                     	BEQ loc_BANK0_8C2B
08C42                           
08C42 A5 82                     	LDA PlayerStateTimer
08C44 D0 00                     	BNE loc_BANK0_8C92
08C46                           
08C46 C6 9A                     	DEC PlayerDucking
08C48                           IFDEF PLAYER_HITBOX
08C48                           	LDA PlayerDucking
08C48                           	STA PlayerHitbox
08C48                           ENDIF
08C48                           
08C48                           loc_BANK0_8C2B:
08C48 A5 F5                     	LDA Player1JoypadPress
08C4A 10 00                     	BPL loc_BANK0_8C3D ; branch if not pressing A Button
08C4C                           
08C4C E6 99                     	INC PlayerInAir
08C4E A9 06                     	LDA #SpriteAnimation_Jumping
08C50 85 C7                     	STA PlayerAnimationFrame
08C52 20 00 00                  	JSR PlayerStartJump
08C55                           
08C55 A9 01                     	LDA #SoundEffect2_Jump
08C57 8D 04 06                  	STA SoundEffectQueue2
08C5A                           
08C5A                           loc_BANK0_8C3D:
08C5A AD B2 04                  	LDA PlayerRidingCarpet
08C5D D0 00                     	BNE loc_BANK0_8C92
08C5F                           
08C5F AD DF 04                  	LDA QuicksandDepth
08C62 D0 00                     	BNE ResetPartialCrouchJumpTimer
08C64                           
08C64 A5 F7                     	LDA Player1JoypadHeld ; skip if down button is not pressed
08C66 29 04                     	AND #ControllerInput_Down
08C68 F0 00                     	BEQ ResetPartialCrouchJumpTimer
08C6A                           
08C6A E6 9A                     	INC PlayerDucking ; set ducking state?
08C6C                           IFDEF PLAYER_HITBOX
08C6C                           	LDA PlayerDucking
08C6C                           	STA PlayerHitbox
08C6C                           ENDIF
08C6C A9 04                     	LDA #SpriteAnimation_Ducking ; set ducking animation
08C6E 85 C7                     	STA PlayerAnimationFrame
08C70 A5 99                     	LDA PlayerInAir ; skip ahead if player is in air
08C72 D0 00                     	BNE ResetPartialCrouchJumpTimer
08C74                           
08C74 AD CA 04                  	LDA CrouchJumpTimer ; check if crouch jump is charged
08C77 C9 3C                     	CMP #$3C
08C79 B0 00                     	BCS loc_BANK0_8C92
08C7B                           
08C7B EE CA 04                  	INC CrouchJumpTimer ; increment crouch jump charge
08C7E D0 00                     	BNE loc_BANK0_8C92
08C80                           
08C80                           ResetPartialCrouchJumpTimer: ; reset crouch jump timer if it isn't full
08C80 AD CA 04                  	LDA CrouchJumpTimer
08C83 C9 3C                     	CMP #$3C ; max crouch jump timer
08C85 B0 00                     	BCS loc_BANK0_8C6F
08C87                           
08C87 A9 00                     	LDA #$00 ; reset crouch jump timer to zero
08C89 8D CA 04                  	STA CrouchJumpTimer
08C8C                           
08C8C                           loc_BANK0_8C6F:
08C8C A5 F7                     	LDA Player1JoypadHeld
08C8E 29 03                     	AND #ControllerInput_Right | ControllerInput_Left
08C90 F0 00                     	BEQ loc_BANK0_8C92
08C92                           
08C92 29 01                     	AND #$01
08C94 85 9D                     	STA PlayerDirection
08C96 A8                        	TAY
08C97 AD 24 06                  	LDA GroundSlipperiness
08C9A 4A                        	LSR A
08C9B 4A                        	LSR A
08C9C 25 10                     	AND byte_RAM_10
08C9E D0 00                     	BNE ResetCrouchJumpTimer
08CA0                           
08CA0 A5 3C                     	LDA PlayerXVelocity
08CA2 18                        	CLC
08CA3 79 35 8C                  	ADC PlayerControlAcceleration, Y
08CA6 85 3C                     	STA PlayerXVelocity
08CA8                           
08CA8                           ResetCrouchJumpTimer:
08CA8 A9 00                     	LDA #$00
08CAA 8D CA 04                  	STA CrouchJumpTimer
08CAD F0 00                     	BEQ loc_BANK0_8C95 ; unconditional branch?
08CAF                           
08CAF                           loc_BANK0_8C92:
08CAF 20 00 00                  	JSR sub_BANK0_8D2C
08CB2                           
08CB2                           loc_BANK0_8C95:
08CB2 20 00 00                  	JSR sub_BANK0_8DC0
08CB5                           
08CB5 60                        	RTS
08CB6                           
08CB6                           ; End of function sub_BANK0_8C1A
08CB6                           
08CB6                           
08CB6                           ;
08CB6                           ; Starts a jump
08CB6                           ;
08CB6                           ; The jump height is based on a lookup table using the following bitfield:
08CB6                           ;
08CB6                           ; %xxxxxRCI
08CB6                           ;   R = whether the player is running
08CB6                           ;   C = whether the crouch timer is charged
08CB6                           ;   I = whether the player is holding an item
08CB6                           ;
08CB6                           PlayerStartJump:
08CB6 AD DF 04                  	LDA QuicksandDepth
08CB9 C9 02                     	CMP #$02
08CBB 90 00                     	BCC PlayerStartJump_LoadXVelocity
08CBD                           
08CBD                           	; Quicksand
08CBD AD 52 05                  	LDA JumpHeightQuicksand
08CC0 85 46                     	STA PlayerYVelocity
08CC2 D0 00                     	BNE PlayerStartJump_Exit
08CC4                           
08CC4                           PlayerStartJump_LoadXVelocity:
08CC4                           	; The x-velocity may affect the jump
08CC4 A5 3C                     	LDA PlayerXVelocity
08CC6 10 00                     	BPL PlayerStartJump_CheckXSpeed
08CC8                           
08CC8                           	; Absolute value of x-velocity
08CC8 49 FF                     	EOR #$FF
08CCA 18                        	CLC
08CCB 69 01                     	ADC #$01
08CCD                           
08CCD                           PlayerStartJump_CheckXSpeed:
08CCD                           	; Set carry flag if the x-speed is fast enough
08CCD C9 08                     	CMP #$08
08CCF                           	; Clear y subpixel
08CCF A9 00                     	LDA #$00
08CD1 8D 11 04                  	STA PlayerYSubpixel
08CD4                           	; Set bit for x-speed using carry flag
08CD4 2A                        	ROL A
08CD5                           
08CD5                           	; Check crouch jump timer
08CD5 AC CA 04                  	LDY CrouchJumpTimer
08CD8 C0 3C                     	CPY #$3C
08CDA 90 00                     	BCC PlayerStartJump_SetYVelocity
08CDC                           
08CDC                           	; Clear Player1JoypadHeld for a crouch jump
08CDC A9 00                     	LDA #$00
08CDE 85 F7                     	STA Player1JoypadHeld
08CE0                           
08CE0                           PlayerStartJump_SetYVelocity:
08CE0                           	; Set bit for charged jump using carry flag
08CE0 2A                        	ROL A
08CE1                           	; Set bit for whether player is holding an item
08CE1 0A                        	ASL A
08CE2 05 9C                     	ORA HoldingItem
08CE4 A8                        	TAY
08CE5 B9 4C 05                  	LDA JumpHeightStanding, Y
08CE8 85 46                     	STA PlayerYVelocity
08CEA                           
08CEA AD 53 05                  	LDA JumpFloatLength
08CED 8D C9 04                  	STA JumpFloatTimer
08CF0                           
08CF0                           PlayerStartJump_Exit:
08CF0 A9 00                     	LDA #$00
08CF2 8D CA 04                  	STA CrouchJumpTimer
08CF5 60                        	RTS
08CF6                           
08CF6                           
08CF6                           ; =============== S U B R O U T I N E =======================================
08CF6                           
08CF6                           ;
08CF6                           ; Apply gravity to the player's y-velocity
08CF6                           ;
08CF6                           ; This also handles floating
08CF6                           ;
08CF6                           PlayerGravity:
08CF6 AD DF 04                  	LDA QuicksandDepth
08CF9 C9 02                     	CMP #$02
08CFB 90 00                     	BCC loc_BANK0_8CE5
08CFD                           
08CFD AD 56 05                  	LDA GravityQuicksand
08D00 D0 00                     	BNE loc_BANK0_8D13
08D02                           
08D02                           loc_BANK0_8CE5:
08D02 AD 54 05                  	LDA GravityWithoutJumpButton
08D05 A4 F7                     	LDY Player1JoypadHeld ; holding jump button to fight physics
08D07 10 00                     	BPL PlayerGravity_Falling
08D09                           
08D09 AD 55 05                  	LDA GravityWithJumpButton
08D0C A4 46                     	LDY PlayerYVelocity
08D0E C0 FC                     	CPY #$FC
08D10 30 00                     	BMI PlayerGravity_Falling
08D12                           
08D12 AC C9 04                  	LDY JumpFloatTimer
08D15 F0 00                     	BEQ PlayerGravity_Falling
08D17                           
08D17 CE C9 04                  	DEC JumpFloatTimer
08D1A A5 10                     	LDA byte_RAM_10
08D1C 4A                        	LSR A
08D1D 4A                        	LSR A
08D1E 4A                        	LSR A
08D1F 29 03                     	AND #$03
08D21 A8                        	TAY
08D22 B9 00 00                  	LDA FloatingYVelocity, Y
08D25 85 46                     	STA PlayerYVelocity
08D27 60                        	RTS
08D28                           
08D28                           PlayerGravity_Falling:
08D28 A4 46                     	LDY PlayerYVelocity
08D2A 30 00                     	BMI loc_BANK0_8D13
08D2C                           
08D2C C0 39                     	CPY #$39
08D2E B0 00                     	BCS loc_BANK0_8D18
08D30                           
08D30                           loc_BANK0_8D13:
08D30 18                        	CLC
08D31 65 46                     	ADC PlayerYVelocity
08D33 85 46                     	STA PlayerYVelocity
08D35                           
08D35                           loc_BANK0_8D18:
08D35 AD C9 04                  	LDA JumpFloatTimer
08D38 CD 53 05                  	CMP JumpFloatLength
08D3B F0 00                     	BEQ PlayerGravity_Exit
08D3D                           
08D3D A9 00                     	LDA #$00
08D3F 8D C9 04                  	STA JumpFloatTimer
08D42                           
08D42                           PlayerGravity_Exit:
08D42 60                        	RTS
08D43                           
08D43                           
08D43                           FloatingYVelocity:
08D43 FC                        	.db $FC
08D44 00                        	.db $00
08D45 04                        	.db $04
08D46 00                        	.db $00
08D47                           
08D47                           PlayerXDeceleration:
08D47 FD                        	.db $FD
08D48 03                        	.db $03
08D49                           
08D49                           
08D49                           ; =============== S U B R O U T I N E =======================================
08D49                           
08D49                           sub_BANK0_8D2C:
08D49 A5 99                     	LDA PlayerInAir
08D4B D0 00                     	BNE locret_BANK0_8D61
08D4D                           
08D4D A5 10                     	LDA byte_RAM_10
08D4F 2D 24 06                  	AND GroundSlipperiness
08D52 D0 00                     	BNE loc_BANK0_8D4D
08D54                           
08D54 A5 3C                     	LDA PlayerXVelocity
08D56 29 80                     	AND #$80
08D58 0A                        	ASL A
08D59 2A                        	ROL A
08D5A A8                        	TAY
08D5B A5 3C                     	LDA PlayerXVelocity
08D5D 79 47 8D                  	ADC PlayerXDeceleration, Y
08D60 AA                        	TAX
08D61 59 35 8C                  	EOR PlayerControlAcceleration, Y
08D64 30 00                     	BMI loc_BANK0_8D4B
08D66                           
08D66 A2 00                     	LDX #$00
08D68                           
08D68                           loc_BANK0_8D4B:
08D68 86 3C                     	STX PlayerXVelocity
08D6A                           
08D6A                           loc_BANK0_8D4D:
08D6A A5 9A                     	LDA PlayerDucking
08D6C D0 00                     	BNE locret_BANK0_8D61
08D6E                           
08D6E A5 C7                     	LDA PlayerAnimationFrame
08D70 C9 09                     	CMP #SpriteAnimation_Throwing
08D72 F0 00                     	BEQ locret_BANK0_8D61
08D74                           
08D74 A9 02                     	LDA #SpriteAnimation_Standing
08D76 85 C7                     	STA PlayerAnimationFrame
08D78 A9 00                     	LDA #$00
08D7A 85 84                     	STA PlayerWalkFrameCounter
08D7C                           
08D7C                           loc_BANK0_8D5F:
08D7C 85 9B                     	STA PlayerWalkFrame
08D7E                           
08D7E                           locret_BANK0_8D61:
08D7E 60                        	RTS
08D7F                           
08D7F                           ; End of function sub_BANK0_8D2C
08D7F                           
08D7F                           ; ---------------------------------------------------------------------------
08D7F                           
08D7F                           PlayerWalkFrameDurations:
08D7F 0C                        	.db $0C
08D80 0A                        	.db $0A
08D81 08                        	.db $08
08D82 05                        	.db $05
08D83 03                        	.db $03
08D84 02                        	.db $02
08D85 02                        	.db $02
08D86 02                        	.db $02
08D87 02                        	.db $02
08D88 02                        	.db $02
08D89                           
08D89                           PlayerWalkFrames:
08D89 02                        	.db SpriteAnimation_Standing ; $00
08D8A 00                        	.db SpriteAnimation_Walking ; $01
08D8B 09                        	.db SpriteAnimation_Throwing ; ; $02
08D8C                           
08D8C                           ; =============== S U B R O U T I N E =======================================
08D8C                           
08D8C                           ; jump animation subroutine
08D8C                           PlayerWalkJumpAnim:
08D8C A5 9A                     	LDA PlayerDucking ; exit if we're ducking, since the player will be ducking
08D8E D0 00                     	BNE ExitPlayerWalkJumpAnim
08D90                           
08D90                           	; if we're not in the air, skip ahead
08D90 A5 99                     	LDA PlayerInAir
08D92 F0 00                     	BEQ PlayerWalkAnim
08D94                           
08D94 A5 8F                     	LDA CurrentCharacter ; does this character get to flutter jump?
08D96 C9 03                     	CMP #Character_Luigi
08D98 D0 00                     	BNE ExitPlayerWalkJumpAnim
08D9A                           
08D9A A5 84                     	LDA PlayerWalkFrameCounter
08D9C D0 00                     	BNE UpdatePlayerAnimationFrame ; maintain current frame
08D9E                           
08D9E A9 02                     	LDA #$02 ; fast animation
08DA0 D0 00                     	BNE NextPlayerWalkFrame
08DA2                           
08DA2                           PlayerWalkAnim:
08DA2 A5 84                     	LDA PlayerWalkFrameCounter
08DA4 D0 00                     	BNE UpdatePlayerAnimationFrame ; maintain current frame
08DA6                           
08DA6 A9 05                     	LDA #$05
08DA8 AC 24 06                  	LDY GroundSlipperiness
08DAB D0 00                     	BNE NextPlayerWalkFrame
08DAD                           
08DAD A5 3C                     	LDA PlayerXVelocity
08DAF 10 00                     	BPL PlayerWalkFrameDuration
08DB1                           
08DB1                           	; use absolute value of PlayerXVelocity
08DB1 49 FF                     	EOR #$FF
08DB3 18                        	CLC
08DB4 69 01                     	ADC #$01
08DB6                           
08DB6                           PlayerWalkFrameDuration:
08DB6 4A                        	LSR A
08DB7 4A                        	LSR A
08DB8 4A                        	LSR A
08DB9 A8                        	TAY
08DBA B9 7F 8D                  	LDA PlayerWalkFrameDurations, Y
08DBD                           
08DBD                           NextPlayerWalkFrame:
08DBD 85 84                     	STA PlayerWalkFrameCounter ; hold frame for duration specified in accumulator
08DBF C6 9B                     	DEC PlayerWalkFrame
08DC1 10 00                     	BPL UpdatePlayerAnimationFrame
08DC3                           
08DC3 A9 01                     	LDA #$01 ; next walk frame
08DC5 85 9B                     	STA PlayerWalkFrame
08DC7                           
08DC7                           UpdatePlayerAnimationFrame:
08DC7 A4 9B                     	LDY PlayerWalkFrame
08DC9 B9 89 8D                  	LDA PlayerWalkFrames, Y
08DCC 85 C7                     	STA PlayerAnimationFrame
08DCE                           
08DCE                           ExitPlayerWalkJumpAnim:
08DCE 60                        	RTS
08DCF                           
08DCF                           
08DCF                           ThrowXVelocity:
08DCF 00                        	.db $00 ; standing, left (blocks)
08DD0 00                        	.db $00 ; standing, right (blocks)
08DD1 D0                        	.db $D0 ; moving, left (blocks)
08DD2 30                        	.db $30 ; moving, right (blocks)
08DD3 D0                        	.db $D0 ; standing, left (projectiles)
08DD4 30                        	.db $30 ; standing, right (projectiles)
08DD5 D0                        	.db $D0 ; moving, left (projectiles)
08DD6 30                        	.db $30 ; moving, right (projectiles)
08DD7                           
08DD7                           ThrowYVelocity:
08DD7 18                        	.db $18 ; standing (blocks)
08DD8 00                        	.db $00 ; moving (blocks)
08DD9 18                        	.db $18 ; standing (projectiles)
08DDA F8                        	.db $F8 ; moving (projectiles)
08DDB                           
08DDB                           ; used for objects that can be thrown next to the player
08DDB                           SoftThrowOffset:
08DDB F0                        	.db $F0
08DDC 10                        	.db $10
08DDD                           
08DDD                           
08DDD                           
08DDD                           ; Determine the max speed based on the terrain and what the player is carrying.
08DDD                           sub_BANK0_8DC0:
08DDD A0 02                     	LDY #$02
08DDF AD DF 04                  	LDA QuicksandDepth
08DE2 C9 02                     	CMP #$02
08DE4 B0 00                     	BCS loc_BANK0_8DE0
08DE6                           
08DE6 88                        	DEY
08DE7 A5 9C                     	LDA HoldingItem
08DE9 F0 00                     	BEQ loc_BANK0_8DDF
08DEB                           
08DEB AE 2D 04                  	LDX ObjectBeingCarriedIndex
08DEE B5 90                     	LDA ObjectType, X
08DF0 C9 32                     	CMP #Enemy_VegetableSmall
08DF2 90 00                     	BCC loc_BANK0_8DE0
08DF4                           
08DF4 C9 39                     	CMP #Enemy_MushroomBlock
08DF6 90 00                     	BCC loc_BANK0_8DDF
08DF8                           
08DF8 C9 3B                     	CMP #Enemy_FallingLogs
08DFA 90 00                     	BCC loc_BANK0_8DE0
08DFC                           
08DFC                           loc_BANK0_8DDF:
08DFC 88                        	DEY
08DFD                           
08DFD                           ; 1.5x max speed when the run button is held!
08DFD                           loc_BANK0_8DE0:
08DFD B9 57 05                  	LDA RunSpeedRight, Y
08E00 24 F7                     	BIT Player1JoypadHeld
08E02 50 00                     	BVC loc_BANK0_8DEC
08E04                           
08E04 4A                        	LSR A
08E05 18                        	CLC
08E06 79 57 05                  	ADC RunSpeedRight, Y
08E09                           
08E09                           loc_BANK0_8DEC:
08E09 C5 3C                     	CMP PlayerXVelocity
08E0B 10 00                     	BPL loc_BANK0_8DF2
08E0D                           
08E0D 85 3C                     	STA PlayerXVelocity
08E0F                           
08E0F                           loc_BANK0_8DF2:
08E0F B9 5A 05                  	LDA RunSpeedLeft, Y
08E12 24 F7                     	BIT Player1JoypadHeld
08E14 50 00                     	BVC loc_BANK0_8DFF
08E16                           
08E16 38                        	SEC
08E17 6A                        	ROR A
08E18 18                        	CLC
08E19 79 5A 05                  	ADC RunSpeedLeft, Y
08E1C                           
08E1C                           loc_BANK0_8DFF:
08E1C C5 3C                     	CMP PlayerXVelocity
08E1E 30 00                     	BMI loc_BANK0_8E05
08E20                           
08E20 85 3C                     	STA PlayerXVelocity
08E22                           
08E22                           ; Check to see if we have an item that we want to throw.
08E22                           loc_BANK0_8E05:
08E22 24 F5                     	BIT Player1JoypadPress
08E24 50 00                     	BVC locret_BANK0_8E41
08E26                           
08E26 A5 9C                     	LDA HoldingItem
08E28 F0 00                     	BEQ locret_BANK0_8E41
08E2A                           
08E2A A0 00                     	LDY #$00
08E2C AE 2D 04                  	LDX ObjectBeingCarriedIndex
08E2F B5 51                     	LDA EnemyState, X
08E31 C9 06                     	CMP #EnemyState_Sand
08E33 F0 00                     	BEQ locret_BANK0_8E41
08E35                           
08E35 B5 90                     	LDA ObjectType, X
08E37 C9 39                     	CMP #Enemy_MushroomBlock
08E39 90 00                     	BCC loc_BANK0_8E22
08E3B                           
08E3B C9 3A                     	CMP #Enemy_POWBlock
08E3D 90 00                     	BCC loc_BANK0_8E28
08E3F                           
08E3F                           loc_BANK0_8E22:
08E3F C9 37                     	CMP #Enemy_Bomb
08E41 90 00                     	BCC loc_BANK0_8E42
08E43                           
08E43 A0 02                     	LDY #$02
08E45                           
08E45                           loc_BANK0_8E28:
08E45 84 07                     	STY byte_RAM_7
08E47 A5 9D                     	LDA PlayerDirection
08E49 0A                        	ASL A
08E4A 05 9A                     	ORA PlayerDucking
08E4C AA                        	TAX
08E4D BC 00 00                  	LDY TileCollisionHitboxIndex + $06, X
08E50 A2 00                     	LDX #$00
08E52 20 00 00                  	JSR sub_BANK0_924F
08E55                           
08E55 A5 00                     	LDA byte_RAM_0
08E57 A4 07                     	LDY byte_RAM_7
08E59 20 00 00                  	JSR CheckTileUsesCollisionType
08E5C                           
08E5C 90 00                     	BCC loc_BANK0_8E42
08E5E                           	; else carried item can't be thrown
08E5E                           
08E5E                           locret_BANK0_8E41:
08E5E 60                        	RTS
08E5F                           
08E5F                           ; ---------------------------------------------------------------------------
08E5F                           
08E5F                           loc_BANK0_8E42:
08E5F A9 09                     	LDA #SpriteAnimation_Throwing
08E61 85 C7                     	STA PlayerAnimationFrame
08E63 A9 02                     	LDA #$02
08E65 85 9B                     	STA PlayerWalkFrame
08E67 A9 0A                     	LDA #$0A
08E69 85 84                     	STA PlayerWalkFrameCounter
08E6B C6 9C                     	DEC HoldingItem
08E6D A9 08                     	LDA #SoundEffect1_ThrowItem
08E6F 8D 02 06                  	STA SoundEffectQueue1
08E72 A9 00                     	LDA #$00
08E74 85 9A                     	STA PlayerDucking
08E76 85 F5                     	STA Player1JoypadPress
08E78 85 01                     	STA byte_RAM_1
08E7A AE 2D 04                  	LDX ObjectBeingCarriedIndex
08E7D A9 36                     	LDA #Enemy_Coin
08E7F D5 90                     	CMP ObjectType, X
08E81 26 01                     	ROL byte_RAM_1
08E83 A5 3C                     	LDA PlayerXVelocity
08E85 10 00                     	BPL loc_BANK0_8E6F
08E87                           
08E87 49 FF                     	EOR #$FF
08E89 18                        	CLC
08E8A 69 01                     	ADC #$01
08E8C                           
08E8C                           loc_BANK0_8E6F:
08E8C C9 08                     	CMP #$08
08E8E 26 01                     	ROL byte_RAM_1
08E90 D0 00                     	BNE loc_BANK0_8E89
08E92                           
08E92 A4 9D                     	LDY PlayerDirection
08E94 B9 DB 8D                  	LDA SoftThrowOffset, Y
08E97 18                        	CLC
08E98 75 29                     	ADC ObjectXLo, X
08E9A 95 29                     	STA ObjectXLo, X
08E9C A5 EC                     	LDA IsHorizontalLevel
08E9E F0 00                     	BEQ loc_BANK0_8E89
08EA0                           
08EA0 88                        	DEY
08EA1 98                        	TYA
08EA2 75 15                     	ADC ObjectXHi, X
08EA4                           
08EA4                           loc_BANK0_8E87:
08EA4 95 15                     	STA ObjectXHi, X
08EA6                           
08EA6                           loc_BANK0_8E89:
08EA6 A4 01                     	LDY byte_RAM_1
08EA8 B9 D7 8D                  	LDA ThrowYVelocity, Y
08EAB 95 47                     	STA ObjectYVelocity, X
08EAD A5 01                     	LDA byte_RAM_1
08EAF 0A                        	ASL A
08EB0 05 9D                     	ORA PlayerDirection
08EB2 A8                        	TAY
08EB3 B9 CF 8D                  	LDA ThrowXVelocity, Y
08EB6 95 3D                     	STA ObjectXVelocity, X
08EB8 A9 01                     	LDA #$01
08EBA 9D 2F 04                  	STA ObjectProjectileTimer, X
08EBD 4A                        	LSR A
08EBE 95 A8                     	STA ObjectBeingCarriedTimer, X
08EC0 60                        	RTS
08EC1                           
08EC1                           
08EC1                           ;
08EC1                           ; Applies player physics on the y-axis
08EC1                           ;
08EC1                           ApplyPlayerPhysicsY:
08EC1 A2 0A                     	LDX #$0A
08EC3                           
08EC3                           ;
08EC3                           ; Applies player physics, although could theoretically be used for objects too
08EC3                           ;
08EC3                           ; Input
08EC3                           ;   X = direction ($00 for horizontal, $0A for vertical)
08EC3                           ;
08EC3                           ApplyPlayerPhysics:
08EC3                           	; Add acceleration to velocity
08EC3 B5 3C                     	LDA PlayerXVelocity, X
08EC5 18                        	CLC
08EC6 7D CB 04                  	ADC PlayerXAcceleration, X
08EC9 08                        	PHP
08ECA 10 00                     	BPL loc_BANK0_8EB4
08ECC                           
08ECC 49 FF                     	EOR #$FF
08ECE 18                        	CLC
08ECF 69 01                     	ADC #$01
08ED1                           
08ED1                           loc_BANK0_8EB4:
08ED1 48                        	PHA
08ED2                           	; Upper nybble of velocity is for lo position
08ED2 4A                        	LSR A
08ED3 4A                        	LSR A
08ED4 4A                        	LSR A
08ED5 4A                        	LSR A
08ED6 A8                        	TAY
08ED7                           
08ED7                           	; Lower nybble of velocity is for subpixel position
08ED7 68                        	PLA
08ED8 0A                        	ASL A
08ED9 0A                        	ASL A
08EDA 0A                        	ASL A
08EDB 0A                        	ASL A
08EDC 18                        	CLC
08EDD                           
08EDD 7D 07 04                  	ADC PlayerXSubpixel, X
08EE0 9D 07 04                  	STA PlayerXSubpixel, X
08EE3                           
08EE3 98                        	TYA
08EE4 69 00                     	ADC #$00
08EE6 28                        	PLP
08EE7 10 00                     	BPL loc_BANK0_8ED1
08EE9                           
08EE9 49 FF                     	EOR #$FF
08EEB 18                        	CLC
08EEC 69 01                     	ADC #$01
08EEE                           
08EEE                           loc_BANK0_8ED1:
08EEE A0 00                     	LDY #$00
08EF0 C9 00                     	CMP #$00
08EF2 10 00                     	BPL loc_BANK0_8ED8
08EF4                           
08EF4 88                        	DEY
08EF5                           
08EF5                           loc_BANK0_8ED8:
08EF5 18                        	CLC
08EF6 75 28                     	ADC PlayerXLo, X
08EF8 95 28                     	STA PlayerXLo, X
08EFA 98                        	TYA
08EFB 75 14                     	ADC PlayerXHi, X
08EFD 95 14                     	STA PlayerXHi, X
08EFF A9 00                     	LDA #$00
08F01 9D CB 04                  	STA PlayerXAcceleration, X
08F04 60                        	RTS
08F05                           
08F05                           
08F05                           ;
08F05                           ; Jumpthrough collision results
08F05                           ;
08F05                           ; This table determines per direction whether a tile is solid (for jumpthrough
08F05                           ; blocks) or interactive (for spikes/ice/conveyors)
08F05                           ;
08F05                           ;   $01 = true
08F05                           ;   $02 = false
08F05                           ;
08F05                           JumpthroughTileCollisionTable:
08F05                           InteractiveTileCollisionTable:
08F05 02                        	.db $02 ; jumpthrough bottom (y-velocity < 0)
08F06 02                        	.db $02
08F07 01                        	.db $01 ; jumpthrough top (y-velocity > 0)
08F08 01                        	.db $01
08F09 02                        	.db $02 ; jumpthrough right (x-velocity < 0)
08F0A 02                        	.db $02
08F0B 02                        	.db $02 ; jumpthrough left (x-velocity > 0)
08F0C 02                        	.db $02
08F0D                           
08F0D                           IFDEF ENABLE_TILE_ATTRIBUTES_TABLE
08F0D                           CheckPlayerTileCollisionAttributesTable:
08F0D                           	.db %00001000 ; jumpthrough bottom (y-velocity < 0)
08F0D                           	.db %00001000
08F0D                           	.db %00000100 ; jumpthrough top (y-velocity > 0)
08F0D                           	.db %00000100
08F0D                           	.db %00000010 ; jumpthrough right (x-velocity < 0)
08F0D                           	.db %00000010
08F0D                           	.db %00000001 ; jumpthrough left (x-velocity > 0)
08F0D                           	.db %00000001
08F0D                           ENDIF
08F0D                           
08F0D                           ;
08F0D                           ; Collision flags that should be set if a given collision check passes
08F0D                           ;
08F0D                           EnableCollisionFlagTable:
08F0D 08                        	.db CollisionFlags_Up
08F0E 08                        	.db CollisionFlags_Up
08F0F 04                        	.db CollisionFlags_Down
08F10 04                        	.db CollisionFlags_Down
08F11 02                        	.db CollisionFlags_Left
08F12 02                        	.db CollisionFlags_Left
08F13 01                        	.db CollisionFlags_Right
08F14 01                        	.db CollisionFlags_Right
08F15                           
08F15                           ConveyorSpeedTable:
08F15 F0                        	.db $F0
08F16 10                        	.db $10
08F17                           
08F17                           
08F17                           ;
08F17                           ; Player Tile Collision
08F17                           ; =====================
08F17                           ;
08F17                           ; Handles player collision with background tiles
08F17                           ;
08F17                           PlayerTileCollision:
08F17                           	; Reset a bunch of collision flags
08F17 A9 00                     	LDA #$00
08F19 85 5A                     	STA PlayerCollision
08F1B 8D 24 06                  	STA GroundSlipperiness
08F1E 85 07                     	STA byte_RAM_7
08F20 85 0A                     	STA byte_RAM_A ; conveyor
08F22 85 0E                     	STA byte_RAM_E ; spikes
08F24 85 0C                     	STA byte_RAM_C ; ice
08F26                           
08F26 20 00 00                  	JSR PlayerTileCollision_CheckCherryAndClimbable
08F29                           
08F29                           	; Determine bounding box lookup index
08F29 A5 9A                     	LDA PlayerDucking
08F2B 0A                        	ASL A
08F2C 05 9C                     	ORA HoldingItem
08F2E AA                        	TAX
08F2F                           
08F2F                           	; Look up the bounding box for collision detection
08F2F BD 00 00                  	LDA TileCollisionHitboxIndex, X
08F32 85 08                     	STA byte_RAM_8
08F34                           
08F34                           	; Determine whether the player is going up
08F34 A5 46                     	LDA PlayerYVelocity
08F36 18                        	CLC
08F37 6D D5 04                  	ADC PlayerYAcceleration
08F3A 10 00                     	BPL PlayerTileCollision_Downward
08F3C                           
08F3C                           PlayerTileCollision_Upward:
08F3C 20 00 00                  	JSR CheckPlayerTileCollision_Twice ; use top two tiles
08F3F 20 00 00                  	JSR CheckPlayerTileCollision_IncrementTwice ; skip bottom two tiles
08F42                           
08F42 A5 5A                     	LDA PlayerCollision
08F44 D0 00                     	BNE PlayerTileCollision_CheckDamageTile
08F46 F0 00                     	BEQ PlayerTileCollision_Horizontal
08F48                           
08F48                           PlayerTileCollision_Downward:
08F48 20 00 00                  	JSR CheckPlayerTileCollision_IncrementTwice ; skip top two tiles
08F4B 20 00 00                  	JSR CheckPlayerTileCollision_Twice ; use bottom two tiles
08F4E                           
08F4E A5 5A                     	LDA PlayerCollision
08F50 D0 00                     	BNE PlayerTileCollision_CheckInteractiveTiles
08F52                           
08F52 A9 00                     	LDA #$00
08F54 A2 01                     	LDX #$01
08F56                           
08F56                           	; Do the quicksand check in worlds 2 and 6
08F56 AC 35 06                  	LDY CurrentWorldTileset
08F59 C0 01                     	CPY #$01
08F5B F0 00                     	BEQ PlayerTileCollision_Downward_CheckQuicksand
08F5D                           
08F5D C0 05                     	CPY #$05
08F5F                           IFNDEF ALWAYS_ALLOW_QUICKSAND
08F5F D0 00                     	BNE PlayerTileCollision_Downward_AfterCheckQuicksand
08F61                           ELSE
08F61                           	NOP
08F61                           	NOP
08F61                           ENDIF
08F61                           
08F61                           PlayerTileCollision_Downward_CheckQuicksand:
08F61 20 00 00                  	JSR PlayerTileCollision_CheckQuicksand
08F64                           
08F64                           PlayerTileCollision_Downward_AfterCheckQuicksand:
08F64 8D DF 04                  	STA QuicksandDepth
08F67 86 99                     	STX PlayerInAir
08F69 4C 00 00                  	JMP PlayerTileCollision_Horizontal
08F6C                           
08F6C                           PlayerTileCollision_CheckInteractiveTiles:
08F6C                           	; Reset quicksand depth
08F6C A9 00                     	LDA #$00
08F6E 8D DF 04                  	STA QuicksandDepth
08F71                           
08F71 A5 32                     	LDA PlayerYLo
08F73 29 0C                     	AND #$0C
08F75 D0 00                     	BNE PlayerTileCollision_Horizontal
08F77                           
08F77 85 99                     	STA PlayerInAir
08F79 A5 32                     	LDA PlayerYLo
08F7B 29 F0                     	AND #$F0
08F7D 85 32                     	STA PlayerYLo
08F7F                           
08F7F                           PlayerTileCollision_CheckConveyorTile:
08F7F 46 0A                     	LSR byte_RAM_A
08F81 90 00                     	BCC PlayerTileCollision_CheckSlipperyTile
08F83                           
08F83 A6 0A                     	LDX byte_RAM_A
08F85 BD 15 8F                  	LDA ConveyorSpeedTable, X
08F88 8D CB 04                  	STA PlayerXAcceleration
08F8B                           
08F8B                           PlayerTileCollision_CheckSlipperyTile:
08F8B 46 0C                     	LSR byte_RAM_C
08F8D 90 00                     	BCC PlayerTileCollision_CheckJar
08F8F                           
08F8F A9 0F                     	LDA #$0F
08F91 8D 24 06                  	STA GroundSlipperiness
08F94                           
08F94                           PlayerTileCollision_CheckJar:
08F94 20 00 00                  	JSR TileBehavior_CheckJar
08F97                           
08F97                           PlayerTileCollision_CheckDamageTile:
08F97 A9 00                     	LDA #$00
08F99 85 46                     	STA PlayerYVelocity
08F9B 8D D5 04                  	STA PlayerYAcceleration
08F9E AD E0 04                  	LDA StarInvincibilityTimer
08FA1 D0 00                     	BNE PlayerTileCollision_Horizontal
08FA3                           
08FA3 46 0E                     	LSR byte_RAM_E
08FA5 90 00                     	BCC PlayerTileCollision_Horizontal
08FA7                           
08FA7 AD 28 04                  	LDA PlayerScreenX
08FAA 8D 29 04                  	STA SpriteTempScreenX
08FAD 66 12                     	ROR byte_RAM_12
08FAF                           
08FAF                           IFNDEF ENABLE_TILE_ATTRIBUTES_TABLE
08FAF 20 00 00                  	JSR PlayerTileCollision_HurtPlayer
08FB2                           ELSE
08FB2                           	LDA byte_RAM_E
08FB2                           	CMP #$02
08FB2                           	BCC PlayerTileCollision_DamageTile
08FB2                           	BNE PlayerTileCollision_HealthTile
08FB2                           
08FB2                           	; instant kill
08FB2                           	LDY #$0F
08FB2                           	STY PlayerHealth
08FB2                           
08FB2                           PlayerTileCollision_DamageTile:
08FB2                           	JSR PlayerTileCollision_HurtPlayer
08FB2                           	JMP PlayerTileCollision_Horizontal
08FB2                           
08FB2                           PlayerTileCollision_HealthTile:
08FB2                           	JSR RestorePlayerToFullHealth
08FB2                           ENDIF
08FB2                           
08FB2                           PlayerTileCollision_Horizontal:
08FB2 A0 02                     	LDY #$02
08FB4 A5 3C                     	LDA PlayerXVelocity
08FB6 18                        	CLC
08FB7 6D CB 04                  	ADC PlayerXAcceleration
08FBA 30 00                     	BMI loc_BANK0_8FA3
08FBC                           
08FBC 88                        	DEY
08FBD 20 00 00                  	JSR CheckPlayerTileCollision_IncrementTwice
08FC0                           
08FC0                           loc_BANK0_8FA3:
08FC0 84 6E                     	STY PlayerMovementDirection
08FC2 20 00 00                  	JSR CheckPlayerTileCollision_Twice
08FC5                           
08FC5 A5 5A                     	LDA PlayerCollision
08FC7 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
08FC9 F0 00                     	BEQ PlayerTileCollision_Exit
08FCB                           
08FCB 4C 00 00                  	JMP PlayerHorizontalCollision_Bank0
08FCE                           
08FCE                           PlayerTileCollision_Exit:
08FCE 60                        	RTS
08FCF                           
08FCF                           
08FCF                           ;
08FCF                           ; Check collision attributes for the next two tiles
08FCF                           ;
08FCF                           ; Input
08FCF                           ;   byte_RAM_7: collision direction
08FCF                           ;   byte_RAM_8: bounding box offset
08FCF                           ;
08FCF                           ; Output
08FCF                           ;   byte_RAM_7 += 2
08FCF                           ;   byte_RAM_8 += 2
08FCF                           ;
08FCF                           CheckPlayerTileCollision_Twice:
08FCF 20 00 00                  	JSR CheckPlayerTileCollision
08FD2                           
08FD2                           IFNDEF ENABLE_TILE_ATTRIBUTES_TABLE
08FD2                           CheckPlayerTileCollision:
08FD2 A2 00                     	LDX #$00
08FD4 A4 08                     	LDY byte_RAM_8
08FD6 20 00 00                  	JSR sub_BANK0_924F
08FD9                           
08FD9 A6 07                     	LDX byte_RAM_7
08FDB BC 05 8F                  	LDY JumpthroughTileCollisionTable, X
08FDE A5 00                     	LDA byte_RAM_0
08FE0                           
08FE0 20 00 00                  	JSR CheckTileUsesCollisionType
08FE3                           
08FE3 90 00                     	BCC CheckPlayerTileCollision_Exit
08FE5                           
08FE5                           CheckPlayerTileCollision_CheckSpikes:
08FE5 C9 1A                     	CMP #BackgroundTile_Spikes
08FE7 D0 00                     	BNE CheckPlayerTileCollision_CheckIce
08FE9                           
08FE9 BD 05 8F                  	LDA InteractiveTileCollisionTable, X
08FEC 85 0E                     	STA byte_RAM_E
08FEE D0 00                     	BNE CheckPlayerTileCollision_UpdatePlayerCollision
08FF0                           
08FF0                           CheckPlayerTileCollision_CheckIce:
08FF0 C9 16                     	CMP #BackgroundTile_JumpThroughIce
08FF2 D0 00                     	BNE CheckPlayerTileCollision_CheckConveyor
08FF4                           
08FF4 BD 05 8F                  	LDA InteractiveTileCollisionTable, X
08FF7 85 0C                     	STA byte_RAM_C
08FF9 D0 00                     	BNE CheckPlayerTileCollision_UpdatePlayerCollision
08FFB                           
08FFB                           CheckPlayerTileCollision_CheckConveyor:
08FFB 38                        	SEC
08FFC E9 67                     	SBC #BackgroundTile_ConveyorLeft
08FFE C9 02                     	CMP #$02
09000 B0 00                     	BCS CheckPlayerTileCollision_UpdatePlayerCollision
09002                           
09002 0A                        	ASL A
09003 1D 05 8F                  	ORA InteractiveTileCollisionTable, X
09006 85 0A                     	STA byte_RAM_A
09008                           
09008                           CheckPlayerTileCollision_UpdatePlayerCollision:
09008 BD 0D 8F                  	LDA EnableCollisionFlagTable, X
0900B 05 5A                     	ORA PlayerCollision
0900D 85 5A                     	STA PlayerCollision
0900F                           
0900F                           CheckPlayerTileCollision_Exit:
0900F 4C 00 00                  	JMP CheckPlayerTileCollision_Increment
09012                           
09012                           ELSE
09012                           ; custom behavior using tile attribute table
09012                           CheckPlayerTileCollision:
09012                           	LDX #$00
09012                           	LDY byte_RAM_8
09012                           	JSR sub_BANK0_924F
09012                           
09012                           	LDX byte_RAM_7
09012                           	LDY byte_RAM_0
09012                           
09012                           	; check tile attributes
09012                           	LDA TileCollisionAttributesTable, Y
09012                           	AND CheckPlayerTileCollisionAttributesTable, X
09012                           
09012                           	BEQ CheckPlayerTileCollision_CheckSpikes
09012                           
09012                           	LDA EnableCollisionFlagTable, X
09012                           	ORA PlayerCollision
09012                           	STA PlayerCollision
09012                           
09012                           CheckPlayerTileCollision_CheckSpikes:
09012                           	LDA TileInteractionAttributesTable, Y
09012                           	AND #%00000011
09012                           	BEQ CheckPlayerTileCollision_CheckIce
09012                           
09012                           	ASL A
09012                           	ORA #%00000001
09012                           	STA byte_RAM_E
09012                           
09012                           CheckPlayerTileCollision_CheckIce:
09012                           	LDA TileInteractionAttributesTable, Y
09012                           	AND #%00001100
09012                           	BEQ CheckPlayerTileCollision_CheckConveyor
09012                           	CMP #%00000100
09012                           	BNE CheckPlayerTileCollision_CheckConveyor
09012                           
09012                           	LDA #$01
09012                           	STA byte_RAM_C
09012                           	BNE CheckPlayerTileCollision_Exit
09012                           
09012                           CheckPlayerTileCollision_CheckConveyor:
09012                           	CMP #%00001100
09012                           	BNE CheckPlayerTileCollision_Exit
09012                           
09012                           	TYA
09012                           	AND #%00000001
09012                           	ASL A
09012                           	ORA #%00000001
09012                           	STA byte_RAM_A
09012                           
09012                           CheckPlayerTileCollision_Exit:
09012                           	JMP CheckPlayerTileCollision_Increment
09012                           ENDIF
09012                           
09012                           
09012                           ;
09012                           ; Skip two tiles
09012                           ;
09012                           ; Output
09012                           ;   byte_RAM_7 += 2
09012                           ;   byte_RAM_8 += 2
09012                           ;
09012                           CheckPlayerTileCollision_IncrementTwice:
09012 20 00 00                  	JSR CheckPlayerTileCollision_Increment
09015                           
09015                           CheckPlayerTileCollision_Increment:
09015 E6 07                     	INC byte_RAM_7
09017 E6 08                     	INC byte_RAM_8
09019 60                        	RTS
0901A                           
0901A                           
0901A                           PlayerTileCollision_CheckCherryAndClimbable:
0901A AC 00 00                  	LDY TileCollisionHitboxIndex + $0A
0901D                           
0901D                           	; byte_RAM_10 seems to be a global counter
0901D                           	; this code increments Y every other frame, but why?
0901D                           	; Seems like it alternates on each frame between checking the top and bottom of the player.
0901D A5 10                     	LDA byte_RAM_10
0901F 4A                        	LSR A
09020 B0 00                     	BCS PlayerTileCollision_CheckCherryAndClimbable_AfterTick
09022 C8                        	INY
09023                           
09023                           PlayerTileCollision_CheckCherryAndClimbable_AfterTick:
09023 A2 00                     	LDX #$00
09025 20 52 8B                  	JSR PlayerTileCollision_CheckClimbable
09028                           
09028 B0 00                     	BCS PlayerTileCollision_Climbable
0902A                           
0902A A5 00                     	LDA byte_RAM_0
0902C C9 4E                     	CMP #BackgroundTile_Cherry
0902E D0 00                     	BNE PlayerTileCollision_Climbable_Exit
09030                           
09030 EE 2A 06                  	INC CherryCount
09033 AD 2A 06                  	LDA CherryCount
09036 E9 05                     	SBC #$05
09038 D0 00                     	BNE PlayerTileCollision_Cherry
0903A                           
0903A 8D 2A 06                  	STA CherryCount
0903D 20 00 00                  	JSR CreateStarman
09040                           
09040                           PlayerTileCollision_Cherry:
09040 A9 04                     	LDA #SoundEffect1_CherryGet
09042 8D 02 06                  	STA SoundEffectQueue1
09045 A9 40                     	LDA #BackgroundTile_Sky
09047 4C 00 00                  	JMP loc_BANK0_937C
0904A                           
0904A                           PlayerTileCollision_Climbable:
0904A A5 F7                     	LDA Player1JoypadHeld
0904C 29 0C                     	AND #ControllerInput_Down | ControllerInput_Up
0904E F0 00                     	BEQ PlayerTileCollision_Climbable_Exit
09050                           
09050 A4 9C                     	LDY HoldingItem
09052 D0 00                     	BNE PlayerTileCollision_Climbable_Exit
09054                           
09054 A5 28                     	LDA PlayerXLo
09056 18                        	CLC
09057 69 04                     	ADC #$04
09059 29 0F                     	AND #$0F
0905B C9 08                     	CMP #$08
0905D B0 00                     	BCS PlayerTileCollision_Climbable_Exit
0905F                           
0905F A9 01                     	LDA #PlayerState_Climbing
09061 85 50                     	STA PlayerState
09063 84 99                     	STY PlayerInAir
09065 84 9A                     	STY PlayerDucking
09067 A9 0A                     	LDA #SpriteAnimation_Climbing
09069 85 C7                     	STA PlayerAnimationFrame
0906B                           
0906B                           	; Break JSR PlayerTileCollision_CheckCherryAndClimbable
0906B 68                        	PLA
0906C 68                        	PLA
0906D                           	; Break JSR PlayerTileCollision
0906D 68                        	PLA
0906E 68                        	PLA
0906F                           
0906F                           PlayerTileCollision_Climbable_Exit:
0906F 60                        	RTS
09070                           
09070                           
09070                           ;
09070                           ; Check whether a tile should use the given collision handler type
09070                           ;
09070                           ; Input
09070                           ;   A = tile ID
09070                           ;   Y = collision handler type (0 = solid for mushroom blocks, 1 = jumpthrough, 2 = solid)
09070                           ; Output
09070                           ;   C = whether or not collision type Y is relevant
09070                           ;
09070                           CheckTileUsesCollisionType:
09070 48                        	PHA ; stash tile ID for later
09071                           
09071                           	; determine which tile table to use (0-3)
09071 29 C0                     	AND #$C0
09073 0A                        	ASL A
09074 2A                        	ROL A
09075 2A                        	ROL A
09076                           
09076                           	; add the offset for the type of collision we're checking
09076 79 00 00                  	ADC TileGroupTable, Y
09079 A8                        	TAY
0907A                           
0907A                           	; check which side of the tile ID pivot we're on
0907A 68                        	PLA
0907B D9 00 00                  	CMP TileSolidnessTable, Y
0907E 60                        	RTS
0907F                           
0907F                           
0907F                           ;
0907F                           ; These map the two high bits of a tile to offets in TileSolidnessTable
0907F                           ;
0907F                           TileGroupTable:
0907F 00                        	.db $00 ; solid to mushroom blocks
09080 04                        	.db $04 ; solid on top
09081 08                        	.db $08 ; solid on all sides
09082                           
09082                           
09082                           PickUpToEnemyTypeTable:
09082 39                        	.db Enemy_MushroomBlock ; $00
09083 39                        	.db Enemy_MushroomBlock ; $01
09084 39                        	.db Enemy_MushroomBlock ; $02
09085 3A                        	.db Enemy_POWBlock ; $03
09086 36                        	.db Enemy_Coin ; $04
09087 33                        	.db Enemy_VegetableLarge ; $05
09088 32                        	.db Enemy_VegetableSmall ; $06
09089 38                        	.db Enemy_Rocket ; $07
0908A 35                        	.db Enemy_Shell ; $08
0908B 37                        	.db Enemy_Bomb ; $09
0908C 3E                        	.db Enemy_SubspacePotion ; $0A
0908D 40                        	.db Enemy_Mushroom1up ; $0B
0908E 3A                        	.db Enemy_POWBlock ; $0C
0908F 09                        	.db Enemy_BobOmb ; $0D
09090 39                        	.db Enemy_MushroomBlock ; $0E ; this one seems to be overridden for digging in sand
09091                           
09091                           
09091                           ; find a slot for the item being lifted
09091                           loc_BANK0_9074:
09091 A2 06                     	LDX #$06
09093                           
09093                           loc_BANK0_9076:
09093 B5 51                     	LDA EnemyState, X
09095 F0 00                     	BEQ loc_BANK0_9080
09097                           
09097 E8                        	INX
09098 E0 09                     	CPX #$09
0909A 90 F7                     	BCC loc_BANK0_9076
0909C                           
0909C 60                        	RTS
0909D                           
0909D                           ; create the sprite for the item being picked up
0909D                           loc_BANK0_9080:
0909D A5 00                     	LDA byte_RAM_0
0909F 95 79                     	STA EnemyVariable, X
090A1 A5 03                     	LDA byte_RAM_3
090A3 95 15                     	STA ObjectXHi, X
090A5 A5 04                     	LDA byte_RAM_4
090A7 95 1F                     	STA ObjectYHi, X
090A9 A5 05                     	LDA byte_RAM_5
090AB 95 29                     	STA ObjectXLo, X
090AD A5 06                     	LDA byte_RAM_6
090AF 95 33                     	STA ObjectYLo, X
090B1 A9 00                     	LDA #$00
090B3 9D 2F 04                  	STA ObjectProjectileTimer, X
090B6 95 9F                     	STA ObjectAnimationTimer, X
090B8 95 B1                     	STA EnemyArray_B1, X
090BA 20 00 00                  	JSR UnlinkEnemyFromRawData_Bank1
090BD                           
090BD A9 01                     	LDA #EnemyState_Alive
090BF A4 09                     	LDY byte_RAM_9
090C1 C0 0E                     	CPY #$0E
090C3 D0 00                     	BNE loc_BANK0_90AE
090C5                           
090C5 A9 20                     	LDA #$20
090C7 95 86                     	STA ObjectTimer1, X
090C9 A9 06                     	LDA #EnemyState_Sand
090CB                           
090CB                           loc_BANK0_90AE:
090CB 95 51                     	STA EnemyState, X
090CD B9 82 90                  	LDA PickUpToEnemyTypeTable, Y ; What sprite is spawned for you when lifting a bg object
090D0 95 90                     	STA ObjectType, X
090D2                           
090D2 A0 FF                     	LDY #$FF ; regular bomb fuse
090D4 C9 37                     	CMP #Enemy_Bomb
090D6 F0 00                     	BEQ loc_BANK0_90C1
090D8                           
090D8 C9 09                     	CMP #Enemy_BobOmb
090DA D0 00                     	BNE loc_BANK0_90C5
090DC                           
090DC A0 50                     	LDY #$50 ; BobOmb fuse
090DE                           
090DE                           loc_BANK0_90C1:
090DE 94 86                     	STY ObjectTimer1, X
090E0 D0 00                     	BNE loc_BANK0_90EA
090E2                           
090E2                           loc_BANK0_90C5:
090E2 C9 40                     	CMP #Enemy_Mushroom1up
090E4 D0 00                     	BNE loc_BANK0_90D5
090E6                           
090E6 AD 20 06                  	LDA Mushroom1upPulled
090E9 F0 00                     	BEQ loc_BANK0_90EA
090EB                           
090EB A9 32                     	LDA #Enemy_VegetableSmall
090ED 95 90                     	STA ObjectType, X
090EF                           
090EF 4C 00 00                  	JMP loc_BANK0_90EA
090F2                           
090F2                           loc_BANK0_90D5:
090F2 C9 33                     	CMP #Enemy_VegetableLarge
090F4 D0 00                     	BNE loc_BANK0_90EA
090F6                           
090F6 AC 2C 06                  	LDY BigVeggiesPulled
090F9 C8                        	INY
090FA C0 05                     	CPY #$05
090FC 90 00                     	BCC loc_BANK0_90E7
090FE                           
090FE A9 46                     	LDA #Enemy_Stopwatch
09100 95 90                     	STA ObjectType, X
09102 A0 00                     	LDY #$00
09104                           
09104                           loc_BANK0_90E7:
09104 8C 2C 06                  	STY BigVeggiesPulled
09107                           
09107                           loc_BANK0_90EA:
09107 20 00 00                  	JSR loc_BANK1_B9EB
0910A                           
0910A A9 04                     	LDA #CollisionFlags_Down
0910C 95 5B                     	STA EnemyCollision, X
0910E A9 40                     	LDA #BackgroundTile_Sky
09110 20 00 00                  	JSR ReplaceTile_Bank0
09113                           
09113 A9 07                     	LDA #$07
09115 95 A8                     	STA ObjectBeingCarriedTimer, X
09117 8E 2D 04                  	STX ObjectBeingCarriedIndex
0911A A9 02                     	LDA #PlayerState_Lifting
0911C 85 50                     	STA PlayerState
0911E A9 06                     	LDA #$06
09120 85 82                     	STA PlayerStateTimer
09122 A9 08                     	LDA #SpriteAnimation_Pulling
09124 85 C7                     	STA PlayerAnimationFrame
09126 E6 9C                     	INC HoldingItem
09128 60                        	RTS
09129                           
09129                           
09129                           TileBehavior_CheckJar:
09129 A4 9C                     	LDY HoldingItem
0912B D0 00                     	BNE loc_BANK0_917C
0912D                           
0912D A5 9A                     	LDA PlayerDucking
0912F F0 00                     	BEQ TileBehavior_CheckPickUp
09131                           
09131 A5 00                     	LDA byte_RAM_0
09133 AE 28 06                  	LDX InSubspaceOrJar
09136 E0 02                     	CPX #$02
09138 D0 00                     	BNE TileBehavior_CheckJar_NotSubspace
0913A                           
0913A                           	; In SubSpace, a non-enterable jar can be entered
0913A                           	; Now Y = $00
0913A C9 74                     	CMP #BackgroundTile_JarTopNonEnterable
0913C F0 00                     	BEQ TileBehavior_GoDownJar
0913E                           
0913E D0 00                     	BNE loc_BANK0_917C
09140                           
09140                           TileBehavior_CheckJar_NotSubspace:
09140 C8                        	INY
09141                           	; Now Y = $01
09141 C9 73                     	CMP #BackgroundTile_JarTopGeneric
09143 F0 00                     	BEQ TileBehavior_GoDownJar
09145                           
09145 C9 6F                     	CMP #BackgroundTile_JarTopPointer
09147 D0 00                     	BNE loc_BANK0_917C
09149                           
09149 C8                        	INY
0914A                           	; Now Y = $02
0914A                           
0914A                           TileBehavior_GoDownJar:
0914A A5 28                     	LDA PlayerXLo
0914C 18                        	CLC
0914D 69 04                     	ADC #$04
0914F 29 0F                     	AND #$0F
09151 C9 08                     	CMP #$08
09153 B0 00                     	BCS loc_BANK0_917C
09155                           
09155                           	; Stop horiziontal movement
09155 A9 00                     	LDA #$00
09157 85 3C                     	STA PlayerXVelocity
09159                           
09159                           	; We're going down the jar!
09159 A9 04                     	LDA #PlayerState_GoingDownJar
0915B 85 50                     	STA PlayerState
0915D                           
0915D                           	; What kind of jar are we going down?
0915D                           	; $00 = warp, $01 = regular, $02 = pointer
0915D 8C EE 04                  	STY InJarType
09160                           
09160                           ;
09160                           ; Snaps the player to the closest tile (for entering doors and jars)
09160                           ;
09160                           SnapPlayerToTile:
09160 A5 28                     	LDA PlayerXLo
09162 18                        	CLC
09163 69 08                     	ADC #$08
09165 29 F0                     	AND #$F0
09167 85 28                     	STA PlayerXLo
09169 90 00                     	BCC SnapPlayerToTile_Exit
0916B                           
0916B A5 EC                     	LDA IsHorizontalLevel
0916D F0 00                     	BEQ SnapPlayerToTile_Exit
0916F                           
0916F E6 14                     	INC PlayerXHi
09171                           
09171                           SnapPlayerToTile_Exit:
09171 60                        	RTS
09172                           
09172                           
09172                           TileBehavior_CheckPickUp:
09172 24 F5                     	BIT Player1JoypadPress
09174 50 00                     	BVC loc_BANK0_917C
09176                           
09176                           	; B button pressed
09176                           
09176 A5 28                     	LDA PlayerXLo
09178 18                        	CLC
09179 69 06                     	ADC #$06
0917B 29 0F                     	AND #$0F
0917D C9 0C                     	CMP #$0C
0917F B0 00                     	BCS loc_BANK0_917C
09181                           
09181 A5 00                     	LDA byte_RAM_0
09183 C9 93                     	CMP #BackgroundTile_DiggableSand
09185 D0 00                     	BNE loc_BANK0_916E
09187                           
09187 A9 0E                     	LDA #$0E
09189 D0 00                     	BNE loc_BANK0_9177
0918B                           
0918B                           ; blocks that can be picked up
0918B                           loc_BANK0_916E:
0918B C9 6D                     	CMP #BackgroundTile_Unused6D
0918D B0 00                     	BCS loc_BANK0_917C
0918F                           
0918F                           	; convert to an index in PickUpToEnemyTypeTable
0918F 38                        	SEC
09190 E9 69                     	SBC #BackgroundTile_MushroomBlock
09192 90 00                     	BCC loc_BANK0_917C
09194                           
09194                           loc_BANK0_9177:
09194 85 09                     	STA byte_RAM_9
09196 4C 91 90                  	JMP loc_BANK0_9074
09199                           
09199                           ; ---------------------------------------------------------------------------
09199                           
09199                           loc_BANK0_917C:
09199 A5 9A                     	LDA PlayerDucking
0919B D0 00                     	BNE locret_BANK0_91CE
0919D                           
0919D A5 06                     	LDA byte_RAM_6
0919F 38                        	SEC
091A0 E9 10                     	SBC #$10
091A2 85 06                     	STA byte_RAM_6
091A4 85 E6                     	STA byte_RAM_E6
091A6 A5 04                     	LDA byte_RAM_4
091A8 E9 00                     	SBC #$00
091AA 85 04                     	STA byte_RAM_4
091AC 85 01                     	STA byte_RAM_1
091AE A5 03                     	LDA byte_RAM_3
091B0 85 02                     	STA byte_RAM_2
091B2 20 00 00                  	JSR sub_BANK0_92C1
091B5                           
091B5 B0 00                     	BCS locret_BANK0_91CE
091B7                           
091B7 20 00 00                  	JSR SetTileOffsetAndAreaPageAddr_Bank1
091BA                           
091BA A4 E7                     	LDY byte_RAM_E7
091BC B1 01                     	LDA (byte_RAM_1), Y
091BE A6 9C                     	LDX HoldingItem
091C0 F0 00                     	BEQ loc_BANK0_91AE
091C2                           
091C2 AE 2D 04                  	LDX ObjectBeingCarriedIndex
091C5 B4 90                     	LDY ObjectType, X
091C7 C0 3D                     	CPY #Enemy_Key
091C9 D0 00                     	BNE locret_BANK0_91CE
091CB                           
091CB                           loc_BANK0_91AE:
091CB AE 28 06                  	LDX InSubspaceOrJar
091CE E0 02                     	CPX #$02
091D0 F0 00                     	BEQ loc_BANK0_91BF
091D2                           
091D2 A0 04                     	LDY #$04
091D4                           
091D4                           ; check to see if the tile matches one of the door tiles
091D4                           loc_BANK0_91B7:
091D4 D9 00 00                  	CMP DoorTiles, Y
091D7 F0 00                     	BEQ loc_BANK0_91EB
091D9                           
091D9 88                        	DEY
091DA 10 F8                     	BPL loc_BANK0_91B7
091DC                           
091DC                           loc_BANK0_91BF:
091DC 24 F5                     	BIT Player1JoypadPress
091DE 50 00                     	BVC locret_BANK0_91CE
091E0                           
091E0 85 00                     	STA byte_RAM_0
091E2 C9 4D                     	CMP #BackgroundTile_GrassInactive
091E4 B0 00                     	BCS locret_BANK0_91CE
091E6                           
091E6 38                        	SEC
091E7 E9 43                     	SBC #BackgroundTile_GrassCoin
091E9 B0 00                     	BCS loc_BANK0_91CF
091EB                           
091EB                           locret_BANK0_91CE:
091EB 60                        	RTS
091EC                           
091EC                           ; ---------------------------------------------------------------------------
091EC                           
091EC                           loc_BANK0_91CF:
091EC AE 28 06                  	LDX InSubspaceOrJar
091EF E0 02                     	CPX #$02
091F1 D0 00                     	BNE loc_BANK0_91E3
091F3                           
091F3 AD 21 06                  	LDA SubspaceVisits
091F6 C9 02                     	CMP #$02
091F8 B0 00                     	BCS loc_BANK0_91E2 ; skip if we've already visited Subspace twice
091FA                           
091FA EE 22 06                  	INC SubspaceCoins
091FD A2 00                     	LDX #$00
091FF                           
091FF                           loc_BANK0_91E2:
091FF 8A                        	TXA
09200                           
09200                           loc_BANK0_91E3:
09200 18                        	CLC
09201 69 04                     	ADC #$04
09203 85 09                     	STA byte_RAM_9
09205 4C 91 90                  	JMP loc_BANK0_9074
09208                           
09208                           ; ---------------------------------------------------------------------------
09208                           
09208                           ;
09208                           ; Checks to see if we're trying to go through the door
09208                           ;
09208                           ; Input
09208                           ;   Y = tile index in DoorTiles
09208                           loc_BANK0_91EB:
09208 A5 F5                     	LDA Player1JoypadPress
0920A 29 08                     	AND #ControllerInput_Up
0920C F0 DD                     	BEQ locret_BANK0_91CE
0920E                           
0920E                           	; player is holding up and is trying to go through this door
0920E A5 28                     	LDA PlayerXLo
09210 18                        	CLC
09211 69 05                     	ADC #$05
09213 29 0F                     	AND #$0F
09215 C9 0A                     	CMP #$0A
09217 B0 D2                     	BCS locret_BANK0_91CE
09219                           
09219 C0 04                     	CPY #$04 ; index of BackgroundTile_LightDoorEndLevel
0921B D0 00                     	BNE loc_BANK0_9205
0921D                           
0921D                           	; setting GameMode to $03 to go to Bonus Chance
0921D 88                        	DEY
0921E 8C EC 04                  	STY GameMode
09221 60                        	RTS
09222                           
09222                           ; ---------------------------------------------------------------------------
09222                           
09222                           loc_BANK0_9205:
09222 A9 01                     	LDA #TransitionType_Door
09224 8D 34 05                  	STA TransitionType
09227 98                        	TYA
09228 20 00 00                  	JSR JumpToTableAfterJump
0922B                           
0922B                           DoorHandlingPointers:
0922B 00 00                     	.dw DoorHandling_UnlockedDoor ; unlocked door
0922D 00 00                     	.dw DoorHandling_LockedDoor ; locked door
0922F 00 00                     	.dw DoorHandling_Entrance ; dark door
09231 00 00                     	.dw DoorHandling_Entrance ; light door
09233                           
09233                           
09233                           DoorHandling_UnlockedDoor:
09233 20 00 00                  	JSR DoorAnimation_Unlocked
09236                           
09236                           DoorHandling_GoThroughDoor:
09236 EE BD 04                  	INC DoorAnimationTimer
09239 EE 1B 04                  	INC PlayerLock
0923C 20 60 91                  	JSR SnapPlayerToTile
0923F                           
0923F A9 01                     	LDA #DPCM_DoorOpenBombBom
09241 8D 01 06                  	STA DPCMQueue
09244                           
09244                           DoorHandling_Exit:
09244 60                        	RTS
09245                           
09245                           
09245                           DoorHandling_LockedDoor:
09245 A5 9C                     	LDA HoldingItem
09247                           	; don't come to a locked door empty-handed
09247 F0 FB                     	BEQ DoorHandling_Exit
09249                           
09249                           	; and make sure you have a key
09249 AC 2D 04                  	LDY ObjectBeingCarriedIndex
0924C B9 90 00                  	LDA ObjectType, Y
0924F C9 3D                     	CMP #Enemy_Key
09251 D0 F1                     	BNE DoorHandling_Exit
09253                           
09253                           	; the key has been used
09253 EE B0 04                  	INC KeyUsed
09256 98                        	TYA
09257 AA                        	TAX
09258                           
09258 20 00 00                  	JSR TurnKeyIntoPuffOfSmoke
0925B 20 00 00                  	JSR DoorAnimation_Locked
0925E 4C 36 92                  	JMP DoorHandling_GoThroughDoor
09261                           
09261                           
09261                           DoorHandling_Entrance:
09261 EE 27 06                  	INC DoAreaTransition
09264 4C 00 00                  	JMP DoAreaReset
09267                           
09267                           
09267                           DoorTiles:
09267 51                        	.db BackgroundTile_DoorBottom
09268 50                        	.db BackgroundTile_DoorBottomLock
09269 83                        	.db BackgroundTile_DarkDoor
0926A 52                        	.db BackgroundTile_LightDoor
0926B 56                        	.db BackgroundTile_LightDoorEndLevel
0926C                           
0926C                           
0926C                           ;
0926C                           ; Seems to determine what kind of tile the player has collided with?
0926C                           ;
0926C                           ; Input
0926C                           ;   X = object index (0 = player)
0926C                           ;   Y = bounding box offset
0926C                           ; Output
0926C                           ;   byte_RAM_0 = tile ID
0926C                           ;
0926C                           sub_BANK0_924F:
0926C 8A                        	TXA
0926D 48                        	PHA
0926E A9 00                     	LDA #$00
09270 85 00                     	STA byte_RAM_0
09272 85 01                     	STA byte_RAM_1
09274 B9 00 00                  	LDA VerticalTileCollisionHitboxX, Y
09277 10 00                     	BPL loc_BANK0_925E
09279                           
09279 C6 00                     	DEC byte_RAM_0
0927B                           
0927B                           loc_BANK0_925E:
0927B 18                        	CLC
0927C 75 28                     	ADC PlayerXLo, X
0927E 29 F0                     	AND #$F0
09280 85 05                     	STA byte_RAM_5
09282 08                        	PHP
09283 4A                        	LSR A
09284 4A                        	LSR A
09285 4A                        	LSR A
09286 4A                        	LSR A
09287 85 E5                     	STA byte_RAM_E5
09289 28                        	PLP
0928A B5 14                     	LDA PlayerXHi, X
0928C 65 00                     	ADC byte_RAM_0
0928E 85 02                     	STA byte_RAM_2
09290 85 03                     	STA byte_RAM_3
09292 A5 EC                     	LDA IsHorizontalLevel
09294 D0 00                     	BNE loc_BANK0_927D
09296                           
09296 85 02                     	STA byte_RAM_2
09298 85 03                     	STA byte_RAM_3
0929A                           
0929A                           loc_BANK0_927D:
0929A B9 00 00                  	LDA VerticalTileCollisionHitboxY, Y
0929D 10 00                     	BPL loc_BANK0_9284
0929F                           
0929F C6 01                     	DEC byte_RAM_1
092A1                           
092A1                           loc_BANK0_9284:
092A1 18                        	CLC
092A2 75 32                     	ADC PlayerYLo, X
092A4 29 F0                     	AND #$F0
092A6 85 06                     	STA byte_RAM_6
092A8 85 E6                     	STA byte_RAM_E6
092AA B5 1E                     	LDA PlayerYHi, X
092AC 65 01                     	ADC byte_RAM_1
092AE 85 01                     	STA byte_RAM_1
092B0 85 04                     	STA byte_RAM_4
092B2 20 00 00                  	JSR sub_BANK0_92C1
092B5                           
092B5 90 00                     	BCC loc_BANK0_929E
092B7                           
092B7 A9 00                     	LDA #$00
092B9 F0 00                     	BEQ loc_BANK0_92A5
092BB                           
092BB                           loc_BANK0_929E:
092BB 20 00 00                  	JSR SetTileOffsetAndAreaPageAddr_Bank1
092BE                           
092BE A4 E7                     	LDY byte_RAM_E7
092C0 B1 01                     	LDA (byte_RAM_1), Y
092C2                           
092C2                           loc_BANK0_92A5:
092C2 85 00                     	STA byte_RAM_0
092C4 68                        	PLA
092C5 AA                        	TAX
092C6 60                        	RTS
092C7                           
092C7                           
092C7                           ; =============== S U B R O U T I N E =======================================
092C7                           
092C7                           sub_BANK0_92AA:
092C7 85 0F                     	STA byte_RAM_F
092C9 98                        	TYA
092CA 30 00                     	BMI locret_BANK0_92C0
092CC                           
092CC 0A                        	ASL A
092CD 0A                        	ASL A
092CE 0A                        	ASL A
092CF 0A                        	ASL A
092D0 18                        	CLC
092D1 65 0F                     	ADC byte_RAM_F
092D3 B0 00                     	BCS loc_BANK0_92BC
092D5                           
092D5 C9 F0                     	CMP #$F0
092D7 90 00                     	BCC locret_BANK0_92C0
092D9                           
092D9                           loc_BANK0_92BC:
092D9 18                        	CLC
092DA 69 10                     	ADC #$10
092DC C8                        	INY
092DD                           
092DD                           locret_BANK0_92C0:
092DD 60                        	RTS
092DE                           
092DE                           ; End of function sub_BANK0_92AA
092DE                           
092DE                           
092DE                           ;
092DE                           ; NOTE: This is a copy of the "sub_BANK3_BC2E" routine in Bank 3
092DE                           ;
092DE                           ;
092DE                           sub_BANK0_92C1:
092DE A4 01                     	LDY byte_RAM_1
092E0 A5 E6                     	LDA byte_RAM_E6
092E2 20 C7 92                  	JSR sub_BANK0_92AA
092E5                           
092E5 84 01                     	STY byte_RAM_1
092E7 85 E6                     	STA byte_RAM_E6
092E9 A4 EC                     	LDY IsHorizontalLevel
092EB B9 01 00                  	LDA byte_RAM_1, Y
092EE 85 E8                     	STA byte_RAM_E8
092F0 A5 02                     	LDA byte_RAM_2
092F2 D9 00 00                  	CMP byte_BANK0_92E0 + 1, Y
092F5 B0 00                     	BCS locret_BANK0_92DF
092F7                           
092F7 A5 01                     	LDA byte_RAM_1
092F9 D9 00 00                  	CMP byte_BANK0_92E0, Y
092FC                           
092FC                           locret_BANK0_92DF:
092FC 60                        	RTS
092FD                           
092FD                           
092FD                           byte_BANK0_92E0:
092FD 0A                        	.db $0A
092FE 01                        	.db $01
092FF 0B                        	.db $0B
09300                           
09300                           
09300                           ; Unused?
09300                           ; Copy of DetermineVerticalScroll
09300                           _code_12E3:
09300 A6 D8                     	LDX NeedsScroll
09302 D0 00                     	BNE locret_BANK0_9311
09304                           
09304 A5 50                     	LDA PlayerState
09306 C9 02                     	CMP #PlayerState_Lifting
09308 B0 00                     	BCS locret_BANK0_9311
0930A                           
0930A AD 2B 04                  	LDA PlayerScreenYLo
0930D AC 2A 04                  	LDY PlayerScreenYHi
09310 30 00                     	BMI loc_BANK0_92FF
09312                           
09312 D0 00                     	BNE loc_BANK0_9305
09314                           
09314 C9 B4                     	CMP #$B4
09316 B0 00                     	BCS loc_BANK0_9305
09318                           
09318 C9 21                     	CMP #$21
0931A B0 00                     	BCS loc_BANK0_9307
0931C                           
0931C                           loc_BANK0_92FF:
0931C A4 99                     	LDY PlayerInAir
0931E D0 00                     	BNE loc_BANK0_9307
09320                           
09320 F0 00                     	BEQ loc_BANK0_9306
09322                           
09322                           loc_BANK0_9305:
09322 E8                        	INX
09323                           
09323                           loc_BANK0_9306:
09323 E8                        	INX
09324                           
09324                           loc_BANK0_9307:
09324 AD 25 04                  	LDA VerticalScrollDirection
09327 8E 25 04                  	STX VerticalScrollDirection
0932A D0 00                     	BNE locret_BANK0_9311
0932C                           
0932C                           loc_BANK0_930F:
0932C 86 D8                     	STX NeedsScroll
0932E                           
0932E                           locret_BANK0_9311:
0932E 60                        	RTS
0932F                           
0932F                           
0932F                           PlayerCollisionDirectionTable:
0932F 01                        	.db CollisionFlags_Right
09330 02                        	.db CollisionFlags_Left
09331                           
09331                           PlayerCollisionResultTable_Bank0:
09331 80                        	.db CollisionFlags_80
09332 00                        	.db CollisionFlags_00
09333                           
09333                           
09333                           ;
09333                           ; Enforces the left/right boundaries of horizontal areas
09333                           ;
09333                           PlayerAreaBoundaryCollision:
09333 A5 EC                     	LDA IsHorizontalLevel
09335 F0 00                     	BEQ PlayerAreaBoundaryCollision_Exit
09337                           
09337 AD 28 04                  	LDA PlayerScreenX
0933A A4 6E                     	LDY PlayerMovementDirection
0933C C0 01                     	CPY #$01
0933E F0 00                     	BEQ PlayerAreaBoundaryCollision_CheckRight
09340                           
09340                           PlayerAreaBoundaryCollision_CheckLeft:
09340 C9 08                     	CMP #$08
09342 90 00                     	BCC PlayerAreaBoundaryCollision_BoundaryHit
09344                           
09344                           PlayerAreaBoundaryCollision_Exit:
09344 60                        	RTS
09345                           
09345                           PlayerAreaBoundaryCollision_CheckRight:
09345 C9 E8                     	CMP #$E8
09347 90 FB                     	BCC PlayerAreaBoundaryCollision_Exit
09349                           
09349                           PlayerAreaBoundaryCollision_BoundaryHit:
09349 A5 5A                     	LDA PlayerCollision
0934B 19 2E 93                  	ORA PlayerCollisionDirectionTable - 1, Y
0934E 85 5A                     	STA PlayerCollision
09350                           
09350                           ;
09350                           ; NOTE: This is a copy of the "PlayerHorizontalCollision" routine in Bank 3
09350                           ;
09350                           PlayerHorizontalCollision_Bank0:
09350 A2 00                     	LDX #$00
09352 A4 6E                     	LDY PlayerMovementDirection
09354 A5 3C                     	LDA PlayerXVelocity
09356 59 30 93                  	EOR PlayerCollisionResultTable_Bank0 - 1, Y
09359 10 00                     	BPL loc_BANK0_9340
0935B                           
0935B 86 3C                     	STX PlayerXVelocity
0935D                           
0935D                           loc_BANK0_9340:
0935D AD CB 04                  	LDA PlayerXAcceleration
09360 59 30 93                  	EOR PlayerCollisionResultTable_Bank0 - 1, Y
09363 10 00                     	BPL loc_BANK0_934B
09365                           
09365 8E CB 04                  	STX PlayerXAcceleration
09368                           
09368                           loc_BANK0_934B:
09368 8E 07 04                  	STX PlayerXSubpixel
0936B                           
0936B                           locret_BANK0_934E:
0936B 60                        	RTS
0936C                           
0936C                           
0936C                           ; =============== S U B R O U T I N E =======================================
0936C                           
0936C                           ;
0936C                           ; NOTE: This is a copy of the "sub_BANK3_BC50" routine in Bank 3
0936C                           ;
0936C                           ; Replaces tile when something is picked up
0936C                           ;
0936C                           ; Input
0936C                           ;   A = Target tile
0936C                           ;   X = Enemy index of object being picked up
0936C                           ;
0936C                           ReplaceTile_Bank0:
0936C 48                        	PHA ; Something to update the PPU for some tile change
0936D B5 29                     	LDA ObjectXLo, X
0936F 18                        	CLC
09370 69 08                     	ADC #$08
09372 08                        	PHP
09373 4A                        	LSR A
09374 4A                        	LSR A
09375 4A                        	LSR A
09376 4A                        	LSR A
09377 85 E5                     	STA byte_RAM_E5
09379 28                        	PLP
0937A B5 15                     	LDA ObjectXHi, X
0937C A4 EC                     	LDY IsHorizontalLevel
0937E F0 00                     	BEQ ReplaceTile_StoreXHi_Bank0
09380                           
09380 69 00                     	ADC #$00
09382                           
09382                           ReplaceTile_StoreXHi_Bank0:
09382 85 02                     	STA byte_RAM_2
09384 B5 33                     	LDA ObjectYLo, X
09386 18                        	CLC
09387 69 08                     	ADC #$08
09389 29 F0                     	AND #$F0
0938B 85 E6                     	STA byte_RAM_E6
0938D B5 1F                     	LDA ObjectYHi, X
0938F 69 00                     	ADC #$00
09391 85 01                     	STA byte_RAM_1
09393 20 DE 92                  	JSR sub_BANK0_92C1
09396                           
09396 68                        	PLA
09397 B0 D2                     	BCS locret_BANK0_934E
09399                           
09399                           ;
09399                           ; Input
09399                           ;   A = Target tile
09399                           ;
09399                           loc_BANK0_937C:
09399                           	; Stash X so we can restore it later on
09399 86 03                     	STX byte_RAM_3
0939B                           
0939B                           	; Stash the target tile and figure out where to draw it
0939B 48                        	PHA
0939C 20 00 00                  	JSR SetTileOffsetAndAreaPageAddr_Bank1
0939F 68                        	PLA
093A0                           	; Update the tile in the decoded level data
093A0 A4 E7                     	LDY byte_RAM_E7
093A2 91 01                     	STA (byte_RAM_1), Y
093A4                           
093A4 48                        	PHA
093A5 AE 00 03                  	LDX byte_RAM_300
093A8 A9 00                     	LDA #$00
093AA 9D 01 03                  	STA PPUBuffer_301, X
093AD 98                        	TYA
093AE 29 F0                     	AND #$F0
093B0 0A                        	ASL A
093B1 3E 01 03                  	ROL PPUBuffer_301, X
093B4 0A                        	ASL A
093B5 3E 01 03                  	ROL PPUBuffer_301, X
093B8 9D 02 03                  	STA PPUBuffer_301 + 1, X
093BB 98                        	TYA
093BC 29 0F                     	AND #$0F
093BE 0A                        	ASL A
093BF                           
093BF 7D 02 03                  	ADC PPUBuffer_301 + 1, X
093C2 9D 02 03                  	STA PPUBuffer_301 + 1, X
093C5 18                        	CLC
093C6 69 20                     	ADC #$20
093C8 9D 07 03                  	STA PPUBuffer_301 + 6, X
093CB A5 EC                     	LDA IsHorizontalLevel
093CD 0A                        	ASL A
093CE A8                        	TAY
093CF A5 01                     	LDA byte_RAM_1
093D1 29 10                     	AND #$10
093D3 D0 00                     	BNE loc_BANK0_93B9
093D5                           
093D5 C8                        	INY
093D6                           
093D6                           loc_BANK0_93B9:
093D6 B9 00 00                  	LDA byte_BANK0_940A, Y
093D9 18                        	CLC
093DA 7D 01 03                  	ADC PPUBuffer_301, X
093DD 9D 01 03                  	STA PPUBuffer_301, X
093E0 9D 06 03                  	STA PPUBuffer_301 + 5, X
093E3 A9 02                     	LDA #$02
093E5 9D 03 03                  	STA PPUBuffer_301 + 2, X
093E8 9D 08 03                  	STA PPUBuffer_301 + 7, X
093EB                           
093EB 68                        	PLA
093EC 48                        	PHA
093ED 29 C0                     	AND #%11000000
093EF 0A                        	ASL A
093F0 2A                        	ROL A
093F1 2A                        	ROL A
093F2 A8                        	TAY
093F3                           	; Get the tile quad pointer
093F3 B9 00 00                  	LDA TileQuadPointersLo, Y
093F6 85 00                     	STA byte_RAM_0
093F8 B9 00 00                  	LDA TileQuadPointersHi, Y
093FB 85 01                     	STA byte_RAM_1
093FD 68                        	PLA
093FE 0A                        	ASL A
093FF 0A                        	ASL A
09400 A8                        	TAY
09401 B1 00                     	LDA (byte_RAM_0), Y
09403 9D 04 03                  	STA PPUBuffer_301 + 3, X
09406 C8                        	INY
09407 B1 00                     	LDA (byte_RAM_0), Y
09409 9D 05 03                  	STA PPUBuffer_301 + 4, X
0940C C8                        	INY
0940D B1 00                     	LDA (byte_RAM_0), Y
0940F 9D 09 03                  	STA PPUBuffer_301 + 8, X
09412 C8                        	INY
09413 B1 00                     	LDA (byte_RAM_0), Y
09415 9D 0A 03                  	STA PPUBuffer_301 + 9, X
09418 A9 00                     	LDA #$00
0941A 9D 0B 03                  	STA PPUBuffer_301 + 10, X
0941D 8A                        	TXA
0941E 18                        	CLC
0941F 69 0A                     	ADC #$0A
09421 8D 00 03                  	STA byte_RAM_300
09424 A6 03                     	LDX byte_RAM_3
09426 60                        	RTS
09427                           
09427                           
09427                           ; Another byte of PPU high addresses for horiz/vert levels
09427                           byte_BANK0_940A:
09427 20                        	.db $20
09428 28                        	.db $28
09429 20                        	.db $20
0942A 24                        	.db $24
0942B                           
0942B                           
0942B                           ;
0942B                           ; NOTE: This is a copy of the "StashPlayerPosition" routine in Bank 3
0942B                           ;
0942B                           StashPlayerPosition_Bank0:
0942B AD 28 06                  	LDA InSubspaceOrJar
0942E D0 00                     	BNE StashPlayerPosition_Exit_Bank0
09430                           
09430 A5 14                     	LDA PlayerXHi
09432 8D 0F 05                  	STA PlayerXHi_Backup
09435 A5 28                     	LDA PlayerXLo
09437 8D 11 05                  	STA PlayerXLo_Backup
0943A A5 1E                     	LDA PlayerYHi
0943C 8D 10 05                  	STA PlayerYHi_Backup
0943F A5 32                     	LDA PlayerYLo
09441 8D 12 05                  	STA PlayerYLo_Backup
09444                           
09444                           StashPlayerPosition_Exit_Bank0:
09444 60                        	RTS
09445                           
09445                           ;
09445                           ; Restores the player position from the backup values after exiting a subarea
09445                           ;
09445                           RestorePlayerPosition:
09445 AD 0F 05                  	LDA PlayerXHi_Backup
09448 85 14                     	STA PlayerXHi
0944A AD 11 05                  	LDA PlayerXLo_Backup
0944D 85 28                     	STA PlayerXLo
0944F AD 10 05                  	LDA PlayerYHi_Backup
09452 85 1E                     	STA PlayerYHi
09454 AD 12 05                  	LDA PlayerYLo_Backup
09457 85 32                     	STA PlayerYLo
09459 A5 28                     	LDA PlayerXLo
0945B 38                        	SEC
0945C ED C0 04                  	SBC ScreenBoundaryLeftLo
0945F 8D 28 04                  	STA PlayerScreenX
09462 A5 32                     	LDA PlayerYLo
09464 38                        	SEC
09465 E5 CB                     	SBC ScreenYLo
09467 8D 2B 04                  	STA PlayerScreenYLo
0946A A5 1E                     	LDA PlayerYHi
0946C E5 CA                     	SBC ScreenYHi
0946E 8D 2A 04                  	STA PlayerScreenYHi
09471 AD 34 05                  	LDA TransitionType
09474 38                        	SEC
09475 E9 04                     	SBC #TransitionType_SubSpace
09477 D0 CB                     	BNE StashPlayerPosition_Exit_Bank0
09479                           
09479                           	; resetting these to zero (A=$00, otherwise we would have branched)
09479 85 50                     	STA PlayerState
0947B 8D 1B 04                  	STA PlayerLock
0947E 8D B7 04                  	STA SubspaceTimer
09481 20 00 00                  	JSR DoorAnimation_Unlocked
09484                           
09484 A9 0A                     	LDA #$0A
09486 8D B3 04                  	STA SubspaceDoorTimer
09489 60                        	RTS
0948A                           
0948A                           
0948A                           ;
0948A                           ; Performs an area transition
0948A                           ;
0948A                           ApplyAreaTransition:
0948A AD 34 05                  	LDA TransitionType
0948D C9 02                     	CMP #TransitionType_Jar
0948F D0 00                     	BNE ApplyAreaTransition_NotJar
09491                           
09491                           ApplyAreaTransition_Jar:
09491 AD EE 04                  	LDA InJarType
09494 D0 00                     	BNE ApplyAreaTransition_NotJar
09496                           
09496 20 45 94                  	JSR RestorePlayerPosition
09499                           
09499 4C 00 00                  	JMP ApplyAreaTransition_MoveCamera
0949C                           
0949C                           ApplyAreaTransition_NotJar:
0949C AD 33 05                  	LDA CurrentLevelEntryPage
0949F A0 00                     	LDY #$00
094A1 A6 EC                     	LDX IsHorizontalLevel
094A3 D0 00                     	BNE ApplyAreaTransition_Horizontal
094A5                           
094A5                           ApplyAreaTransition_Vertical:
094A5 84 14                     	STY PlayerXHi
094A7 85 1E                     	STA PlayerYHi
094A9 F0 00                     	BEQ ApplyAreaTransition_SetPlayerPosition
094AB                           
094AB                           ApplyAreaTransition_Horizontal:
094AB 85 14                     	STA PlayerXHi
094AD 84 1E                     	STY PlayerYHi
094AF                           
094AF                           ApplyAreaTransition_SetPlayerPosition:
094AF 20 00 00                  	JSR AreaTransitionPlacement
094B2                           
094B2                           	; The height of a page is only `$0F` tiles instead of `$10`.
094B2                           	; PlayerYHi is currently using the vertical page rather than the actual high
094B2                           	; byte of the absolute position, so we need to convert it to compensate!
094B2 A4 1E                     	LDY PlayerYHi
094B4 A5 32                     	LDA PlayerYLo
094B6 20 00 00                  	JSR PageHeightCompensation
094B9 84 1E                     	STY PlayerYHi
094BB 85 32                     	STA PlayerYLo
094BD                           
094BD A5 28                     	LDA PlayerXLo
094BF 38                        	SEC
094C0 ED C0 04                  	SBC ScreenBoundaryLeftLo
094C3 8D 28 04                  	STA PlayerScreenX
094C6                           
094C6 A5 32                     	LDA PlayerYLo
094C8 38                        	SEC
094C9 E5 CB                     	SBC ScreenYLo
094CB 8D 2B 04                  	STA PlayerScreenYLo
094CE                           
094CE A5 1E                     	LDA PlayerYHi
094D0 E5 CA                     	SBC ScreenYHi
094D2 8D 2A 04                  	STA PlayerScreenYHi
094D5                           
094D5 AD 34 05                  	LDA TransitionType
094D8 C9 04                     	CMP #TransitionType_SubSpace
094DA D0 00                     	BNE ApplyAreaTransition_MoveCamera
094DC                           
094DC 20 00 00                  	JSR DoorAnimation_Unlocked
094DF                           
094DF                           ApplyAreaTransition_MoveCamera:
094DF A5 28                     	LDA PlayerXLo
094E1 38                        	SEC
094E2 E9 78                     	SBC #$78
094E4 85 BA                     	STA MoveCameraX
094E6 60                        	RTS
094E7                           
094E7                           
094E7                           ;
094E7                           ; Do the player placement after an area transition
094E7                           ;
094E7                           AreaTransitionPlacement:
094E7 AD 34 05                  	LDA TransitionType
094EA 20 00 00                  	JSR JumpToTableAfterJump
094ED                           
094ED 00 00                     	.dw AreaTransitionPlacement_Reset
094EF 00 00                     	.dw AreaTransitionPlacement_Door
094F1 00 00                     	.dw AreaTransitionPlacement_Jar
094F3 00 00                     	.dw AreaTransitionPlacement_Climbing
094F5 00 00                     	.dw AreaTransitionPlacement_Subspace
094F7 00 00                     	.dw AreaTransitionPlacement_Rocket
094F9                           
094F9                           
094F9                           AreaTransitionPlacement_Reset:
094F9 A9 01                     	LDA #$01
094FB 85 9D                     	STA PlayerDirection
094FD 20 00 00                  	JSR AreaTransitionPlacement_Middle
09500                           
09500 4A                        	LSR A
09501 4A                        	LSR A
09502 4A                        	LSR A
09503 4A                        	LSR A
09504 85 E5                     	STA byte_RAM_E5
09506 A9 D0                     	LDA #$D0
09508 85 32                     	STA PlayerYLo
0950A 85 E6                     	STA byte_RAM_E6
0950C AD 33 05                  	LDA CurrentLevelEntryPage
0950F 85 E8                     	STA byte_RAM_E8
09511                           
09511                           IFDEF LEVEL_ENGINE_UPGRADES
09511                           	LDX IsHorizontalLevel
09511                           	BEQ AreaTransitionPlacement_Reset_FindOpenSpace
09511                           
09511                           	; Find non-sky to use as the ground
09511                           	LDA #$E0
09511                           	STA byte_RAM_E6
09511                           
09511                           AreaTransitionPlacement_Reset_FindStandableTile:
09511                           	LDA #$0C
09511                           	STA byte_RAM_3
09511                           AreaTransitionPlacement_Reset_FindStandableTileLoop:
09511                           	JSR SetTileOffsetAndAreaPageAddr_Bank1
09511                           
09511                           	LDY byte_RAM_E7
09511                           	LDA (byte_RAM_1), Y
09511                           	CMP #BackgroundTile_Sky
09511                           	BNE AreaTransitionPlacement_Reset_FindOpenSpaceLoop
09511                           
09511                           	JSR AreaTransitionPlacement_MovePlayerUp1Tile
09511                           
09511                           	STA byte_RAM_E6
09511                           	DEC byte_RAM_3
09511                           	BNE AreaTransitionPlacement_Reset_FindStandableTileLoop
09511                           ENDIF
09511                           
09511                           ;
09511                           ; The player must start in empty space (not a wall)
09511                           ;
09511                           AreaTransitionPlacement_Reset_FindOpenSpace:
09511 A9 0C                     	LDA #$0C
09513 85 03                     	STA byte_RAM_3
09515                           AreaTransitionPlacement_Reset_FindOpenSpaceLoop:
09515 20 00 00                  	JSR SetTileOffsetAndAreaPageAddr_Bank1
09518                           
09518 A4 E7                     	LDY byte_RAM_E7
0951A B1 01                     	LDA (byte_RAM_1), Y
0951C C9 40                     	CMP #BackgroundTile_Sky
0951E F0 00                     	BEQ AreaTransitionPlacement_MovePlayerUp1Tile
09520                           
09520 20 00 00                  	JSR AreaTransitionPlacement_MovePlayerUp1Tile
09523                           
09523 85 E6                     	STA byte_RAM_E6
09525 C6 03                     	DEC byte_RAM_3
09527 D0 EC                     	BNE AreaTransitionPlacement_Reset_FindOpenSpaceLoop
09529                           
09529                           
09529                           ;
09529                           ; Moves the player up by one tile
09529                           ;
09529                           AreaTransitionPlacement_MovePlayerUp1Tile:
09529 A5 32                     	LDA PlayerYLo
0952B 38                        	SEC
0952C E9 10                     	SBC #$10
0952E 85 32                     	STA PlayerYLo
09530 60                        	RTS
09531                           
09531                           
09531                           ;
09531                           ; Looks for a door and positions the player at it
09531                           ;
09531                           ; The implementation of this requires the destination door to be at the
09531                           ; OPPOSITE side of the screen from the origin door horizontally, but it can be
09531                           ; at any position vertically.
09531                           ;
09531                           ; If no suitable door is found, the player is positioned to fall from the
09531                           ; top-middle of the screen instead
09531                           ;
09531                           AreaTransitionPlacement_Door:
09531 A5 28                     	LDA PlayerXLo
09533                           	; Switch the x-position to the opposite side of the screen
09533 18                        	CLC
09534 69 08                     	ADC #$08
09536 29 F0                     	AND #$F0
09538 49 F0                     	EOR #$F0
0953A 85 28                     	STA PlayerXLo
0953C                           
0953C                           	; Convert to a tile offset
0953C 4A                        	LSR A
0953D 4A                        	LSR A
0953E 4A                        	LSR A
0953F 4A                        	LSR A
09540 85 E5                     	STA byte_RAM_E5
09542                           
09542                           	; Start at the bottom of the page
09542 A9 E0                     	LDA #$E0
09544 85 32                     	STA PlayerYLo
09546 85 E6                     	STA byte_RAM_E6
09548 AD 33 05                  	LDA CurrentLevelEntryPage
0954B 85 E8                     	STA byte_RAM_E8
0954D A9 0D                     	LDA #$0D
0954F 85 03                     	STA byte_RAM_3
09551                           
09551                           AreaTransitionPlacement_Door_Loop:
09551 20 00 00                  	JSR SetTileOffsetAndAreaPageAddr_Bank1
09554                           
09554                           	; Read the target tile
09554 A4 E7                     	LDY byte_RAM_E7
09556 B1 01                     	LDA (byte_RAM_1), Y
09558 A0 05                     	LDY #$05
0955A                           
0955A                           AreaTransitionPlacement_Door_InnerLoop:
0955A                           	; See if it matches any door tile
0955A D9 66 92                  	CMP DoorTiles - 1, Y
0955D F0 00                     	BEQ AreaTransitionPlacement_Door_Exit
0955F 88                        	DEY
09560 D0 F8                     	BNE AreaTransitionPlacement_Door_InnerLoop
09562                           
09562                           	; Nothing matched on this row, so check the next row or give up
09562 C6 03                     	DEC byte_RAM_3
09564                           IFNDEF ROBUST_TRANSITION_SEARCH
09564 F0 00                     	BEQ AreaTransitionPlacement_Door_Fallback
09566                           ENDIF
09566                           IFDEF ROBUST_TRANSITION_SEARCH
09566                           	BEQ AreaTransitionPlacement_DoorCustom
09566                           ENDIF
09566                           
09566 20 29 95                  	JSR AreaTransitionPlacement_MovePlayerUp1Tile
09569                           
09569 85 E6                     	STA byte_RAM_E6
0956B 4C 51 95                  	JMP AreaTransitionPlacement_Door_Loop
0956E                           
0956E                           AreaTransitionPlacement_Door_Fallback:
0956E                           	; Place in the middle of the screen if no door is found
0956E 20 00 00                  	JSR AreaTransitionPlacement_Middle
09571                           
09571                           AreaTransitionPlacement_Door_Exit:
09571 20 29 95                  	JSR AreaTransitionPlacement_MovePlayerUp1Tile
09574                           
09574 A9 00                     	LDA #$00
09576 8D 1B 04                  	STA PlayerLock
09579 60                        	RTS
0957A                           
0957A                           
0957A                           IFDEF ROBUST_TRANSITION_SEARCH
0957A                           ;
0957A                           ; Looks for a door and positions the player at it
0957A                           ;
0957A                           ; In contrast to the normal door placement routine, this will search all
0957A                           ; x-positions rather than just one opposite the door
0957A                           ;
0957A                           AreaTransitionPlacement_DoorCustom:
0957A                           	; Start on the correct page
0957A                           	LDX CurrentLevelEntryPage
0957A                           	JSR SetAreaPageAddr_Bank1
0957A                           
0957A                           	; Start at the bottom right and work backwards
0957A                           	LDA #$EF
0957A                           	STA byte_RAM_E7
0957A                           
0957A                           AreaTransitionPlacement_DoorCustom_Loop:
0957A                           	; Read the target tile
0957A                           	LDY byte_RAM_E7
0957A                           	LDA (byte_RAM_1), Y
0957A                           	LDY #$05
0957A                           
0957A                           AreaTransitionPlacement_DoorCustom_InnerLoop:
0957A                           	; See if it matches any door tile
0957A                           	CMP DoorTiles - 1, Y
0957A                           	BEQ AreaTransitionPlacement_DoorCustom_Exit
0957A                           	DEY
0957A                           	BNE AreaTransitionPlacement_DoorCustom_InnerLoop
0957A                           
0957A                           	; No matches on this tile, check the next one or give up
0957A                           	DEC byte_RAM_E7
0957A                           	BEQ AreaTransitionPlacement_DoorCustom_Fallback
0957A                           
0957A                           	JMP AreaTransitionPlacement_DoorCustom_Loop
0957A                           
0957A                           AreaTransitionPlacement_DoorCustom_Fallback:
0957A                           	LDA #$20
0957A                           	STA PlayerYLo
0957A                           	JSR AreaTransitionPlacement_Middle
0957A                           	JMP AreaTransitionPlacement_Door_Exit
0957A                           
0957A                           AreaTransitionPlacement_DoorCustom_Exit:
0957A                           	LDA byte_RAM_E7
0957A                           	ASL A
0957A                           	ASL A
0957A                           	ASL A
0957A                           	ASL A
0957A                           	STA PlayerXLo
0957A                           	LDA byte_RAM_E7
0957A                           	AND #$F0
0957A                           	STA PlayerYLo
0957A                           	JMP AreaTransitionPlacement_Door_Exit
0957A                           ENDIF
0957A                           
0957A                           
0957A                           ;
0957A                           ; Place the player at the top of the screen in the middle horizontally
0957A                           ;
0957A                           AreaTransitionPlacement_Jar:
0957A A9 00                     	LDA #$00
0957C 85 32                     	STA PlayerYLo
0957E                           
0957E                           ;
0957E                           ; Place the player in the air in the middle of the screen horizontally
0957E                           ;
0957E                           AreaTransitionPlacement_Middle:
0957E A9 01                     	LDA #$01
09580 85 99                     	STA PlayerInAir
09582 A9 78                     	LDA #$78
09584 85 28                     	STA PlayerXLo
09586 60                        	RTS
09587                           
09587                           ;
09587                           ; Looks for a climbable tile (vine/chain/ladder) and positions the player at it
09587                           ;
09587                           ; The implementation of this requires the destination to be at the OPPOSITE
09587                           ; side of the screen from the origin horizontally, otherwise the player will
09587                           ; be climbing on nothing.
09587                           ;
09587                           AreaTransitionPlacement_Climbing:
09587 A5 28                     	LDA PlayerXLo
09589                           	; Switch the x-position to the opposite side of the screen
09589 18                        	CLC
0958A 69 08                     	ADC #$08
0958C 29 F0                     	AND #$F0
0958E 49 F0                     	EOR #$F0
09590 85 28                     	STA PlayerXLo
09592                           
09592                           	; Switch the y-position to the opposite side of the screen
09592 AD 2B 04                  	LDA PlayerScreenYLo
09595 18                        	CLC
09596 69 08                     	ADC #$08
09598 29 F0                     	AND #$F0
0959A 49 10                     	EOR #$10
0959C 85 32                     	STA PlayerYLo
0959E C9 F0                     	CMP #$F0
095A0 F0 00                     	BEQ AreaTransitionPlacement_Climbing_Exit
095A2                           
095A2 C6 1E                     	DEC PlayerYHi
095A4                           
095A4                           AreaTransitionPlacement_Climbing_Exit:
095A4                           IFDEF ROBUST_TRANSITION_SEARCH
095A4                           	JSR AreaTransitionPlacement_ClimbingCustom
095A4                           
095A4                           	BCS AreaTransitionPlacement_Climbing_SetPlayerAnimationFrame
095A4                           
095A4                           	; Try the opposite side of the screen
095A4                           	LDA PlayerYLo
095A4                           	EOR #$10
095A4                           	STA PlayerYLo
095A4                           
095A4                           	LDA PlayerYHi
095A4                           	EOR #$FF
095A4                           	STA PlayerYHi
095A4                           
095A4                           	JSR AreaTransitionPlacement_ClimbingCustom
095A4                           	BCC AreaTransitionPlacement_Climbing_UnreversePositionY
095A4                           
095A4                           	; Found something on the opposite side, so flip Y velocity
095A4                           	LDY #$01
095A4                           	LDA PlayerYVelocity
095A4                           	BMI AreaTransitionPlacement_Climbing_SetYVelocity
095A4                           
095A4                           	INY
095A4                           AreaTransitionPlacement_Climbing_SetYVelocity:
095A4                           	LDA ClimbSpeed, Y
095A4                           	STA PlayerYVelocity
095A4                           
095A4                           	BNE AreaTransitionPlacement_Climbing_SetPlayerAnimationFrame
095A4                           
095A4                           AreaTransitionPlacement_Climbing_UnreversePositionY:
095A4                           	; Unflip Y position
095A4                           	LDA PlayerYLo
095A4                           	EOR #$10
095A4                           	STA PlayerYLo
095A4                           
095A4                           	LDA PlayerYHi
095A4                           	EOR #$FF
095A4                           	STA PlayerYHi
095A4                           
095A4                           AreaTransitionPlacement_Climbing_SetPlayerAnimationFrame:
095A4                           ENDIF
095A4                           
095A4 A9 0A                     	LDA #SpriteAnimation_Climbing
095A6 85 C7                     	STA PlayerAnimationFrame
095A8 60                        	RTS
095A9                           
095A9                           
095A9                           IFDEF ROBUST_TRANSITION_SEARCH
095A9                           ;
095A9                           ; Ouput
095A9                           ;   C = set if a climbable tile was found
095A9                           ;
095A9                           AreaTransitionPlacement_ClimbingCustom:
095A9                           	; Target x-position
095A9                           	LDA PlayerXLo
095A9                           	LSR A
095A9                           	LSR A
095A9                           	LSR A
095A9                           	LSR A
095A9                           	STA byte_RAM_E5
095A9                           
095A9                           	; Target y-position
095A9                           	LDA PlayerYLo
095A9                           	EOR #$10
095A9                           	CLC
095A9                           	ADC #$10
095A9                           	CMP #$F0
095A9                           	BNE AreaTransitionPlacement_ClimbingCustom_AfterNudge
095A9                           	SEC
095A9                           	SBC #$10
095A9                           AreaTransitionPlacement_ClimbingCustom_AfterNudge:
095A9                           	STA byte_RAM_E6
095A9                           
095A9                           	; Read the target tile
095A9                           	LDA CurrentLevelEntryPage
095A9                           	STA byte_RAM_E8
095A9                           	JSR SetTileOffsetAndAreaPageAddr_Bank1
095A9                           	LDY byte_RAM_E7
095A9                           	LDA (byte_RAM_1), Y
095A9                           
095A9                           	; Check if the target tile is climbable
095A9                           	LDY #$09
095A9                           AreaTransitionPlacement_ClimbingCustom_CheckLoop:
095A9                           	CMP ClimbableTiles, Y
095A9                           	BNE AreaTransitionPlacement_ClimbingCustom_LoopNext
095A9                           
095A9                           	RTS
095A9                           
095A9                           AreaTransitionPlacement_ClimbingCustom_LoopNext:
095A9                           	DEY
095A9                           	BPL AreaTransitionPlacement_ClimbingCustom_CheckLoop
095A9                           
095A9                           	; Target tile is not climbable; start at the right and work backwards
095A9                           	LDA byte_RAM_E7
095A9                           	AND #$F0
095A9                           	STA byte_RAM_E6
095A9                           
095A9                           	LDA #$0F
095A9                           	STA byte_RAM_3
095A9                           	CLC
095A9                           	ADC byte_RAM_E6
095A9                           	STA byte_RAM_E7
095A9                           
095A9                           AreaTransitionPlacement_ClimbingCustom_Loop:
095A9                           	; Read the target tile
095A9                           	LDY byte_RAM_E7
095A9                           	LDA (byte_RAM_1), Y
095A9                           	LDY #$09
095A9                           
095A9                           AreaTransitionPlacement_ClimbingCustom_InnerLoop:
095A9                           	CMP ClimbableTiles, Y
095A9                           	BEQ AreaTransitionPlacement_ClimbingCustom_SetXPosition
095A9                           	DEY
095A9                           	BPL AreaTransitionPlacement_ClimbingCustom_InnerLoop
095A9                           
095A9                           	; No matches on this tile, check the next one or give up
095A9                           	DEC byte_RAM_E7
095A9                           	DEC byte_RAM_3
095A9                           	BMI AreaTransitionPlacement_ClimbingCustom_NotFound
095A9                           
095A9                           	JMP AreaTransitionPlacement_ClimbingCustom_Loop
095A9                           
095A9                           AreaTransitionPlacement_ClimbingCustom_SetXPosition:
095A9                           	LDA byte_RAM_3
095A9                           	ASL A
095A9                           	ASL A
095A9                           	ASL A
095A9                           	ASL A
095A9                           	STA PlayerXLo
095A9                           
095A9                           	SEC
095A9                           	RTS
095A9                           
095A9                           AreaTransitionPlacement_ClimbingCustom_NotFound:
095A9                           	CLC
095A9                           	RTS
095A9                           ENDIF
095A9                           
095A9                           
095A9                           AreaTransitionPlacement_Subspace:
095A9 AD 28 04                  	LDA PlayerScreenX
095AC 38                        	SEC
095AD E5 BA                     	SBC MoveCameraX
095AF 49 FF                     	EOR #$FF
095B1 18                        	CLC
095B2 69 F1                     	ADC #$F1
095B4 85 28                     	STA PlayerXLo
095B6 AD 2B 04                  	LDA PlayerScreenYLo
095B9 85 32                     	STA PlayerYLo
095BB CE 1B 04                  	DEC PlayerLock
095BE A9 60                     	LDA #$60
095C0 8D B7 04                  	STA SubspaceTimer
095C3 60                        	RTS
095C4                           
095C4                           
095C4                           AreaTransitionPlacement_Rocket:
095C4 20 7E 95                  	JSR AreaTransitionPlacement_Middle
095C7 A9 60                     	LDA #$60
095C9 85 32                     	STA PlayerYLo
095CB 60                        	RTS
095CC                           
095CC                           
095CC                           ;
095CC                           ; Converts a y-position from page+offset to hi+lo coordinates, compensating for
095CC                           ; the fact that a page height is only $0F tiles, not a full $10.
095CC                           ;
095CC                           ; ##### Input
095CC                           ; - `Y`: page
095CC                           ; - `A`: position on page
095CC                           ;
095CC                           ; ##### Output
095CC                           ; - `Y`: hi position
095CC                           ; - `A`: lo position
095CC                           ;
095CC                           PageHeightCompensation:
095CC                           	; If player is above the top, exit
095CC C0 00                     	CPY #$00
095CE 30 00                     	BMI PageHeightCompensation_Exit
095D0                           
095D0                           	; Convert page to number of tiles
095D0 48                        	PHA
095D1 98                        	TYA
095D2 0A                        	ASL A
095D3 0A                        	ASL A
095D4 0A                        	ASL A
095D5 0A                        	ASL A
095D6 85 0F                     	STA byte_RAM_F
095D8 68                        	PLA
095D9                           
095D9                           	; Subtract the tiles from the position
095D9 38                        	SEC
095DA E5 0F                     	SBC byte_RAM_F
095DC B0 00                     	BCS PageHeightCompensation_Exit
095DE                           
095DE                           	; Carry to the high byte
095DE 88                        	DEY
095DF                           
095DF                           PageHeightCompensation_Exit:
095DF 60                        	RTS
095E0                           
095E0                           
095E0                           IFNDEF ENABLE_TILE_ATTRIBUTES_TABLE
095E0                           IFNDEF ROBUST_TRANSITION_SEARCH
095E0                           
095E0                           ; Unused space in the original ($95C3 - $95FF)
095E0                           unusedSpace $9600, $FF
095E0                           	IFDEF PRESERVE_UNUSED_SPACE
095E0 FF FF FF FF FF FF FF FF.. 		.pad $9600, $FF
09600                           	ENDIF
09600                           ENDIF
09600                           ENDIF
09600                           
09600                           
09600                           TitleScreenPPUDataPointers:
09600 01 03                     	.dw PPUBuffer_301
09602 00 00                     	.dw TitleLayout
09604                           
09604                           
09604                           WaitForNMI_TitleScreen_TurnOnPPU:
09604 A9 1E                     	LDA #PPUMask_ShowLeft8Pixels_BG | PPUMask_ShowLeft8Pixels_SPR | PPUMask_ShowBackground | PPUMask_ShowSprites
09606 85 FE                     	STA PPUMaskMirror
09608                           
09608                           WaitForNMI_TitleScreen:
09608 A5 11                     	LDA ScreenUpdateIndex
0960A 0A                        	ASL A
0960B AA                        	TAX
0960C BD 00 96                  	LDA TitleScreenPPUDataPointers, X
0960F 85 F0                     	STA RAM_PPUDataBufferPointer
09611 BD 01 96                  	LDA TitleScreenPPUDataPointers + 1, X
09614 85 F1                     	STA RAM_PPUDataBufferPointer + 1
09616                           
09616 A9 00                     	LDA #$00
09618 85 EB                     	STA NMIWaitFlag
0961A                           WaitForNMI_TitleScreenLoop:
0961A A5 EB                     	LDA NMIWaitFlag
0961C 10 FC                     	BPL WaitForNMI_TitleScreenLoop
0961E                           
0961E 60                        	RTS
0961F                           
0961F                           
0961F                           TitleLayout:
0961F                           	; red lines, vertical, left
0961F 20 00 DE FD               	.db $20, $00, $DE, $FD
09623 20 01 DE FD               	.db $20, $01, $DE, $FD
09627 20 02 DE FD               	.db $20, $02, $DE, $FD
0962B 20 03 DE FD               	.db $20, $03, $DE, $FD
0962F                           	; red lines, vertical, right
0962F 20 1C DE FD               	.db $20, $1C, $DE, $FD
09633 20 1D DE FD               	.db $20, $1D, $DE, $FD
09637 20 1E DE FD               	.db $20, $1E, $DE, $FD
0963B 20 1F DE FD               	.db $20, $1F, $DE, $FD
0963F                           	; red lines, horizontal, top
0963F 20 03 5D FD               	.db $20, $03, $5D, $FD
09643 20 23 5D FD               	.db $20, $23, $5D, $FD
09647 20 43 5D FD               	.db $20, $43, $5D, $FD
0964B 20 63 5D FD               	.db $20, $63, $5D, $FD
0964F                           	; red lines, vertical, bottom
0964F 23 63 5D FD               	.db $23, $63, $5D, $FD
09653 23 83 5D FD               	.db $23, $83, $5D, $FD
09657 23 A3 5D FD               	.db $23, $A3, $5D, $FD
0965B                           
0965B                           	; ornate frame, top
0965B 20 68 10 48 4A 4C 4E 50.. 	.db $20, $68, $10, $48, $4A, $4C, $4E, $50, $51, $52, $53, $54, $55, $56, $57, $58, $5A, $5C, $5E
0966E 20 84 08 FD 22 23 24 49.. 	.db $20, $84, $08, $FD, $22, $23, $24, $49, $4B, $4D, $4F
09679 20 94 08 59 5B 5D 5F 2E.. 	.db $20, $94, $08, $59, $5B, $5D, $5F, $2E, $2F, $30, $FD
09684 20 A4 03 25 26 27         	.db $20, $A4, $03, $25, $26, $27
0968A 20 B9 03 31 32 33         	.db $20, $B9, $03, $31, $32, $33
09690 20 C4 03 28 29 2A         	.db $20, $C4, $03, $28, $29, $2A
09696 20 D9 03 34 35 36         	.db $20, $D9, $03, $34, $35, $36
0969C 20 E3 03 2B 2C 2D         	.db $20, $E3, $03, $2B, $2C, $2D
096A2 20 FA 03 37 38 39         	.db $20, $FA, $03, $37, $38, $39
096A8 21 03 02 3A 3B            	.db $21, $03, $02, $3A, $3B
096AD 21 1B 02 40 41            	.db $21, $1B, $02, $40, $41
096B2                           	; ornate frame, lines down, top
096B2 21 23 C6 3C               	.db $21, $23, $C6, $3C
096B6 21 3C C6 42               	.db $21, $3C, $C6, $42
096BA                           	; ornate frame, middle
096BA 21 E3 01 3D               	.db $21, $E3, $01, $3D
096BE 21 FC 01 60               	.db $21, $FC, $01, $60
096C2 22 02 02 3E 3F            	.db $22, $02, $02, $3E, $3F
096C7 22 1C 02 61 62            	.db $22, $1C, $02, $61, $62
096CC 22 22 02 43 44            	.db $22, $22, $02, $43, $44
096D1 22 3C 02 63 64            	.db $22, $3C, $02, $63, $64
096D6 22 43 01 45               	.db $22, $43, $01, $45
096DA 22 5C 01 65               	.db $22, $5C, $01, $65
096DE                           	; ornate frame, lines down, bottom
096DE 22 63 C6 3C               	.db $22, $63, $C6, $3C
096E2 22 7C C4 42               	.db $22, $7C, $C4, $42
096E6                           	; ornate frame, bottom, characters
096E6 22 C4 02 A6 A8            	.db $22, $C4, $02, $A6, $A8
096EB 22 E4 02 A7 A9            	.db $22, $E4, $02, $A7, $A9
096F0 22 FA 04 80 82 88 8A      	.db $22, $FA, $04, $80, $82, $88, $8A
096F7 23 04 02 90 92            	.db $23, $04, $02, $90, $92
096FC 23 14 02 9E A0            	.db $23, $14, $02, $9E, $A0
09701 23 1A 04 81 83 89 8B      	.db $23, $1A, $04, $81, $83, $89, $8B
09708 23 23 03 46 91 93         	.db $23, $23, $03, $46, $91, $93
0970E 23 2A 02 A2 A4            	.db $23, $2A, $02, $A2, $A4
09713 23 2E 0B 67 6C 6E 70 72.. 	.db $23, $2E, $0B, $67, $6C, $6E, $70, $72, $69, $9F, $A1, $75, $98, $9A
09721 23 3A 04 84 86 8C 8E      	.db $23, $3A, $04, $84, $86, $8C, $8E
09728 23 43 1B 47 94 96 74 74.. 	.db $23, $43, $1B, $47, $94, $96, $74, $74, $74, $74, $A3, $A5, $74, $66, $68
09737 6D 6F 71 73 6A 6B 74 74.. 	.db $6D, $6F, $71, $73, $6A, $6B, $74, $74, $99, $9B, $74, $85, $87, $8D, $8F
09746 23 64 05 95 97 FD AA AB   	.db $23, $64, $05, $95, $97, $FD, $AA ,$AB
0974E 23 77 04 9C 9D AA AB      	.db $23, $77, $04, $9C, $9D, $AA, $AB
09755 23 89 02 AA AB            	.db $23, $89, $02, $AA, $AB
0975A                           
0975A                           IFNDEF SM_USA
0975A                           	; SUPER
0975A                           	;                  SSSSSSSS  UUUUUUUU  PPPPPPPP  EEEEEEEE  RRRRRRRR
0975A 20 CB 0A 00 01 08 08 FC.. 	.db $20, $CB, $0A, $00, $01, $08, $08, $FC, $01, $FC, $08, $FC, $01
09767 20 EB 0A 02 03 08 08 0A.. 	.db $20, $EB, $0A, $02, $03, $08, $08, $0A, $05, $0B, $0C, $0A, $0D
09774 21 0B 0A 04 05 04 05 0E.. 	.db $21, $0B, $0A, $04, $05, $04, $05, $0E, $07, $FC, $08, $0E, $08
09781 21 2B 05 06 07 06 07 09   	.db $21, $2B, $05, $06, $07, $06, $07, $09
09789 21 31 04 76 09 09 09      	.db $21, $31, $04, $76, $09, $09, $09
09790                           
09790                           	; TM
09790                           	;                  TTT  MMM
09790 21 38 02 F9 FA            	.db $21, $38, $02, $F9, $FA
09795                           
09795                           	; MARIO
09795                           	;                  MMMMMMMMMMMMM  AAAAAAAA  RRRRRRRR  III  OOOOOOOO
09795 21 46 0A 00 0F 01 00 01.. 	.db $21, $46, $0A, $00, $0F, $01, $00, $01, $FC, $01, $08, $00, $01
097A2 21 66 0A 10 10 08 10 08.. 	.db $21, $66, $0A, $10, $10, $08, $10, $08, $10, $08, $08, $10, $08
097AF 21 86 0A 08 08 08 08 08.. 	.db $21, $86, $0A, $08, $08, $08, $08, $08, $13, $0D, $08, $08, $08
097BC 21 A6 0A 08 08 08 FC 08.. 	.db $21, $A6, $0A, $08, $08, $08, $FC, $08, $0E, $08, $08, $08, $08
097C9 21 C6 0A 08 08 08 10 08.. 	.db $21, $C6, $0A, $08, $08, $08, $10, $08, $08, $08, $08, $04, $05
097D6 21 E6 0A 09 09 09 09 09.. 	.db $21, $E6, $0A, $09, $09, $09, $09, $09, $09, $09, $09, $06, $07
097E3                           
097E3                           	; BROS
097E3                           	;                  BBBBBBBB  RRRRRRRR  OOOOOOOO  SSSSSSSS
097E3 21 51 08 FC 01 FC 01 00.. 	.db $21, $51, $08, $FC, $01, $FC, $01, $00, $01, $00, $01 ; BROS
097EE 21 71 08 10 08 10 08 10.. 	.db $21, $71, $08, $10, $08, $10, $08, $10, $08, $10, $08
097F9 21 91 08 13 0D 13 0D 08.. 	.db $21, $91, $08, $13, $0D, $13, $0D, $08, $08, $77, $03
09804 21 B1 08 0E 08 0E 08 08.. 	.db $21, $B1, $08, $0E, $08, $0E, $08, $08, $08, $12, $08
0980F 21 D1 09 13 05 08 08 04.. 	.db $21, $D1, $09, $13, $05, $08, $08, $04, $05, $04, $05, $08
0981B 21 F1 09 11 07 09 09 06.. 	.db $21, $F1, $09, $11, $07, $09, $09, $06, $07, $06, $07, $09
09827                           
09827                           	; 2
09827                           	;             22222222222222222222222
09827 22 0E 04 14 15 16 17      	.db $22, $0E, $04, $14, $15, $16, $17
0982E 22 2E 04 18 19 1A 1B      	.db $22, $2E, $04, $18, $19, $1A, $1B
09835 22 4E 04 1C 1D 1E 1F      	.db $22, $4E, $04, $1C, $1D, $1E, $1F
0983C 22 6E 04 FC FC FC 20      	.db $22, $6E, $04, $FC, $FC, $FC, $20
09843 22 8E 04 76 76 76 21      	.db $22, $8E, $04, $76, $76, $76, $21
0984A                           
0984A                           	; (C) 1988
0984A                           	;                  (C)  111  999  888  888
0984A 22 E9 05 F8 D1 D9 D8 D8   	.db $22, $E9, $05, $F8, $D1, $D9, $D8, $D8 ; (C) 1988
09852                           
09852                           	; NINTENDO
09852                           	;                  NNN  III  NNN  TTT  EEE  NNN  DDD  OOO
09852 22 EF 08 E7 E2 E7 ED DE.. 	.db $22, $EF, $08, $E7, $E2, $E7, $ED, $DE, $E7, $DD, $E8
0985D                           
0985D 23 CA 04 80 A0 A0 20      	.db $23, $CA, $04, $80, $A0, $A0, $20
09864 23 D1 0E 80 A8 AA AA A2.. 	.db $23, $D1, $0E, $80, $A8, $AA, $AA, $A2, $22, $00, $00, $88, $AA, $AA, $AA, $AA, $22
09875 23 E3 02 88 22            	.db $23, $E3, $02, $88, $22
0987A 23 EA 04 F0 F8 F2 F0      	.db $23, $EA, $04, $F0, $F8, $F2, $F0
09881 00                        	.db $00
09882                           
09882                           ELSE
09882                           	; TM
09882                           	;                  TTT  MMM
09882                           	.db $21, $38, $02, $F9, $FA
09882                           
09882                           	; SUPER
09882                           	;                  SSSSSSSS  UUUUUUUU  PPPPPPPP  EEEEEEEE  RRRRRRRR
09882                           	.db $21, $45, $0A, $00, $01, $08, $08, $FC, $01, $FC, $08, $FC, $01
09882                           	.db $21, $65, $0A, $10, $08, $08, $08, $10, $08, $10, $09, $10, $08
09882                           	.db $21, $85, $0A, $77, $03, $08, $08, $13, $05, $FC, $08, $13, $0D
09882                           	.db $21, $A5, $0A, $12, $08, $08, $08, $0E, $07, $10, $09, $0E, $08
09882                           	.db $21, $C5, $0A, $04, $05, $04, $05, $08, $7F, $FC, $08, $08, $08
09882                           	.db $21, $E5, $0A, $06, $07, $06, $07, $09, $7F, $76, $09, $09, $09
09882                           
09882                           	; MARIO
09882                           	;                  MMMMMMMMMMMMM  AAAAAAAA  RRRRRRRR  III  OOOOOOOO
09882                           	.db $21, $50, $0A, $00, $0F, $01, $00, $01, $FC, $01, $08, $00, $01
09882                           	.db $21, $70, $0A, $10, $10, $08, $10, $08, $10, $08, $08, $10, $08
09882                           	.db $21, $90, $0A, $08, $08, $08, $08, $08, $13, $0D, $08, $08, $08
09882                           	.db $21, $B0, $0A, $08, $08, $08, $FC, $08, $0E, $08, $08, $08, $08
09882                           	.db $21, $D0, $0A, $08, $08, $08, $10, $08, $08, $08, $08, $04, $05
09882                           	.db $21, $F0, $0A, $09, $09, $09, $09, $09, $09, $09, $09, $06, $07
09882                           
09882                           	; USA
09882                           	;                  UUUUUUUUUUUUU  SSSSSSSSSSSSS  AAAAAAAAAAAAA
09882                           	.db $22, $0B, $09, $14, $15, $16, $1A, $1B, $1C, $78, $79, $7A
09882                           	.db $22, $2B, $09, $17, $18, $19, $1D, $1E, $1F, $7B, $7C, $7D
09882                           
09882                           	; (C)1988,1992 NINTENDO
09882                           	;                  (C)  111  999  888  888  ,,,  111  999  999  222
09882                           	.db $22, $E7, $0A, $F8, $D1, $D9, $D8, $D8, $F7, $D1, $D9, $D9, $D2
09882                           
09882                           	; NINTENDO
09882                           	;                  NNN  III  NNN  TTT  EEE  NNN  DDD  OOO
09882                           	.db $22, $F2, $08, $E7, $E2, $E7, $ED, $DE, $E7, $DD, $E8
09882                           
09882                           	.db $23, $D1, $0E, $A0, $A0, $A0, $A0, $A0, $22, $00, $00, $AA, $AA, $AA, $AA, $AA, $A2
09882                           	.db $23, $E2, $03, $0C, $0F, $0F
09882                           	.db $00
09882                           ENDIF
09882                           
09882                           IFDEF PAD_TITLE_SCREEN_PPU_DATA
09882                           	.pad TitleLayout + $300, $00
09882                           ENDIF
09882                           
09882                           IFNDEF SM_USA
09882                           TitleBackgroundPalettes:
09882 22 37 16 07               	.db $22, $37, $16, $07 ; Most of screen, outline, etc.
09886 22 30 31 0F               	.db $22, $30, $31, $0F ; Unused
0988A 22 30 0F 0F               	.db $22, $30, $0F, $0F ; Logo
0988E 22 30 0F 0F               	.db $22, $30, $0F, $0F ; Copyright, Story
09892                           
09892                           TitleSpritePalettes:
09892 22 30 28 0F               	.db $22, $30, $28, $0F ; Unused DDP character palettes
09896 22 30 25 0F               	.db $22, $30, $25, $0F ; There are no sprites on the title screen,
0989A 22 30 12 0F               	.db $22, $30, $12, $0F ; so these are totally unused
0989E 22 30 23 0F               	.db $22, $30, $23, $0F
098A2                           
098A2                           ELSE
098A2                           TitleBackgroundPalettes:
098A2                           	.db $0F, $27, $17, $07
098A2                           	.db $0F, $36, $26, $16
098A2                           	.db $0F, $16, $02, $30
098A2                           	.db $0F, $30, $25, $16
098A2                           
098A2                           TitleSpritePalettes:
098A2                           	.db $0F, $30, $28, $0F
098A2                           	.db $0F, $30, $25, $0F
098A2                           	.db $0F, $30, $12, $0F
098A2                           	.db $0F, $30, $23, $0F
098A2                           ENDIF
098A2                           
098A2                           TitleStoryText_STORY:
098A2 EC ED E8 EB F2            	.db $EC, $ED, $E8, $EB, $F2 ; STORY
098A7                           
098A7                           TitleStoryTextPointersHi:
098A7 00                        	.db >TitleStoryText_Line01
098A8 00                        	.db >TitleStoryText_Line02
098A9 00                        	.db >TitleStoryText_Line03
098AA 00                        	.db >TitleStoryText_Line04
098AB 00                        	.db >TitleStoryText_Line05
098AC 00                        	.db >TitleStoryText_Line06
098AD 00                        	.db >TitleStoryText_Line07
098AE 00                        	.db >TitleStoryText_Line08
098AF 00                        	.db >TitleStoryText_Line08 ; For some reason line 8 is referenced twice here, but not used
098B0 00                        	.db >TitleStoryText_Line09
098B1 00                        	.db >TitleStoryText_Line10
098B2 00                        	.db >TitleStoryText_Line11
098B3 00                        	.db >TitleStoryText_Line12
098B4 00                        	.db >TitleStoryText_Line13
098B5 00                        	.db >TitleStoryText_Line14
098B6 00                        	.db >TitleStoryText_Line15
098B7 00                        	.db >TitleStoryText_Line16
098B8                           
098B8                           TitleStoryTextPointersLo:
098B8 00                        	.db <TitleStoryText_Line01
098B9 00                        	.db <TitleStoryText_Line02
098BA 00                        	.db <TitleStoryText_Line03
098BB 00                        	.db <TitleStoryText_Line04
098BC 00                        	.db <TitleStoryText_Line05
098BD 00                        	.db <TitleStoryText_Line06
098BE 00                        	.db <TitleStoryText_Line07
098BF 00                        	.db <TitleStoryText_Line08
098C0 00                        	.db <TitleStoryText_Line08
098C1 00                        	.db <TitleStoryText_Line09
098C2 00                        	.db <TitleStoryText_Line10
098C3 00                        	.db <TitleStoryText_Line11
098C4 00                        	.db <TitleStoryText_Line12
098C5 00                        	.db <TitleStoryText_Line13
098C6 00                        	.db <TitleStoryText_Line14
098C7 00                        	.db <TitleStoryText_Line15
098C8 00                        	.db <TitleStoryText_Line16
098C9                           
098C9                           TitleStoryText_Line01:
098C9 F0 E1 DE E7 FB FB E6 DA.. 	.db $F0, $E1, $DE, $E7, $FB, $FB, $E6, $DA, $EB, $E2, $E8, $FB, $E8, $E9, $DE, $E7
098D9 DE DD FB DA               	.db $DE, $DD, $FB, $DA ; WHEN MARIO OPENED A
098DD                           
098DD                           TitleStoryText_Line02:
098DD DD E8 E8 EB FB DA DF ED.. 	.db $DD, $E8, $E8, $EB, $FB, $DA, $DF, $ED, $DE, $EB, $FB, $FB, $DC, $E5, $E2, $E6
098ED DB E2 E7 E0               	.db $DB, $E2, $E7, $E0 ; DOOR AFTER CLIMBING
098F1                           
098F1                           TitleStoryText_Line03:
098F1 DA FB E5 E8 E7 E0 FB EC.. 	.db $DA, $FB, $E5, $E8, $E7, $E0, $FB, $EC, $ED, $DA, $E2, $EB, $FB, $E2, $E7, $FB
09901 FB E1 E2 EC               	.db $FB, $E1, $E2, $EC ; A LONG STAIR IN HIS
09905                           
09905                           TitleStoryText_Line04:
09905 DD EB DE DA E6 F7 FB DA.. 	.db $DD, $EB, $DE, $DA, $E6, $F7, $FB, $DA, $E7, $E8, $ED, $E1, $DE, $EB, $FB, $F0
09915 E8 EB E5 DD               	.db $E8, $EB, $E5, $DD ; DREAM, ANOTHER WORLD
09919                           
09919                           TitleStoryText_Line05:
09919 EC E9 EB DE DA DD FB FB.. 	.db $EC, $E9, $EB, $DE, $DA, $DD, $FB, $FB, $FB, $DB, $DE, $DF, $E8, $EB, $DE, $FB
09929 FB E1 E2 E6               	.db $FB, $E1, $E2, $E6 ; SPREAD BEFORE HIM
0992D                           
0992D                           TitleStoryText_Line06:
0992D DA E7 DD FB E1 DE FB E1.. 	.db $DA, $E7, $DD, $FB, $E1, $DE, $FB, $E1, $DE, $DA, $EB, $DD, $FB, $DA, $FB, $EF
0993D E8 E2 DC DE               	.db $E8, $E2, $DC, $DE ; AND HE HEARD A VOICE
09941                           
09941                           TitleStoryText_Line07:
09941 DC DA E5 E5 FB DF E8 EB.. 	.db $DC, $DA, $E5, $E5, $FB, $DF, $E8, $EB, $FB, $E1, $DE, $E5, $E9, $FB, $ED, $E8
09951 FB FB DB DE               	.db $FB, $FB, $DB, $DE ; CALL FOR HELP TO BE
09955                           
09955                           TitleStoryText_Line08:
09955 FB DF EB DE DE DD FB FB.. 	.db $FB, $DF, $EB, $DE, $DE, $DD, $FB, $FB, $DF, $EB, $E8, $E6, $FB, $DA, $FB, $EC
09965 E9 DE E5 E5               	.db $E9, $DE, $E5, $E5 ; FREED FROM A SPELL
09969                           
09969                           TitleStoryText_Line09:
09969 DA DF ED DE EB FB FB DA.. 	.db $DA, $DF, $ED, $DE, $EB, $FB, $FB, $DA, $F0, $DA, $E4, $DE, $E7, $E2, $E7, $E0
09979 F7 FB FB FB               	.db $F7, $FB, $FB, $FB ; AFTER AWAKENING,
0997D                           
0997D                           TitleStoryText_Line10:
0997D E6 DA EB E2 E8 FB FB F0.. 	.db $E6, $DA, $EB, $E2, $E8, $FB, $FB, $F0, $DE, $E7, $ED, $FB, $ED, $E8, $FB, $FB
0998D DA FB FB FB               	.db $DA, $FB, $FB, $FB ; MARIO WENT TO A
09991                           
09991                           TitleStoryText_Line11:
09991 DC DA EF DE FB FB E7 DE.. 	.db $DC, $DA, $EF, $DE, $FB, $FB, $E7, $DE, $DA, $EB, $DB, $F2, $FB, $DA, $E7, $DD
099A1 FB FB ED E8               	.db $FB, $FB, $ED, $E8 ; CAVE NEARBY AND TO
099A5                           
099A5                           TitleStoryText_Line12:
099A5 E1 E2 EC FB FB EC EE EB.. 	.db $E1, $E2, $EC, $FB, $FB, $EC, $EE, $EB, $E9, $EB, $E2, $EC, $DE, $FB, $E1, $DE
099B5 FB EC DA F0               	.db $FB, $EC, $DA, $F0 ; HIS SURPRISE HE SAW
099B9                           
099B9                           TitleStoryText_Line13:
099B9 DE F1 DA DC ED E5 F2 FB.. 	.db $DE, $F1, $DA, $DC, $ED, $E5, $F2, $FB, $FB, $F0, $E1, $DA, $ED, $FB, $E1, $DE
099C9 FB EC DA F0               	.db $FB, $EC, $DA, $F0 ; EXACTLY WHAT HE SAW
099CD                           
099CD                           TitleStoryText_Line14:
099CD E2 E7 FB E1 E2 EC FB DD.. 	.db $E2, $E7, $FB, $E1, $E2, $EC, $FB, $DD, $EB, $DE, $DA, $E6, $CF, $CF, $CF, $CF
099DD FB FB FB FB               	.db $FB, $FB, $FB, $FB ; IN HIS DREAM....
099E1                           
099E1                           TitleStoryText_Line15:
099E1 FB FB FB FB FB FB FB FB.. 	.db $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB
099F1 FB FB FB FB               	.db $FB, $FB, $FB, $FB ; (blank)
099F5                           
099F5                           TitleStoryText_Line16:
099F5 FB FB E9 EE EC E1 FB EC.. 	.db $FB, $FB, $E9, $EE, $EC, $E1, $FB, $EC, $ED, $DA, $EB, $ED, $FB, $DB, $EE, $ED
09A05 ED E8 E7 FB               	.db $ED, $E8, $E7, $FB ; PUSH START BUTTON
09A09                           
09A09                           TitleAttributeData1:
09A09 23 CB 42 FF               	.db $23, $CB, $42, $FF
09A0D 23 D1 01 CC               	.db $23, $D1, $01, $CC
09A11 23 D2 44 FF               	.db $23, $D2, $44, $FF
09A15 23 D6 01 33               	.db $23, $D6, $01, $33
09A19 23 D9 01 CC               	.db $23, $D9, $01, $CC
09A1D 23 DA 44 FF               	.db $23, $DA, $44, $FF
09A21                           
09A21                           TitleAttributeData2:
09A21 23 DE 01 33               	.db $23, $DE, $01, $33
09A25 23 E1 01 CC               	.db $23, $E1, $01, $CC
09A29 23 E2 44 FF               	.db $23, $E2, $44, $FF
09A2D 23 E6 01 33               	.db $23, $E6, $01, $33
09A31 23 EA 44 FF               	.db $23, $EA, $44, $FF
09A35 23 E9 01 CC               	.db $23, $E9, $01, $CC
09A39 23 EE 01 33               	.db $23, $EE, $01, $33
09A3D                           
09A3D                           
09A3D                           ; =============== S U B R O U T I N E =======================================
09A3D                           
09A3D                           TitleScreen:
09A3D A0 07                     	LDY #$07 ; Does initialization of RAM.
09A3F 84 01                     	STY byte_RAM_1 ; This clears $200 to $7FF.
09A41 A0 00                     	LDY #$00
09A43 84 00                     	STY byte_RAM_0
09A45 98                        	TYA
09A46                           
09A46                           InitMemoryLoop:
09A46 91 00                     	STA (byte_RAM_0), Y ; I'm not sure if a different method of initializing memory
09A48                           ; would work better in this case.
09A48 88                        	DEY
09A49 D0 FB                     	BNE InitMemoryLoop
09A4B                           
09A4B C6 01                     	DEC byte_RAM_1
09A4D A6 01                     	LDX byte_RAM_1
09A4F E0 02                     	CPX #$02
09A51 B0 F3                     	BCS InitMemoryLoop ; Stop initialization after we hit $200.
09A53                           
09A53                           loc_BANK0_9A53:
09A53 A9 00                     	LDA #$00
09A55 A8                        	TAY
09A56                           
09A56                           InitMemoryLoop2:
09A56                           	; Clear $0000-$00FF.
09A56                           	; Notably, this leaves the stack area $0100-$01FF uninitialized.
09A56                           	; This is not super important, but you might want to do it yourself to
09A56                           	; track stack corruption or whatever.
09A56 99 00 00                  	STA byte_RAM_0, Y
09A59 C8                        	INY
09A5A D0 FA                     	BNE InitMemoryLoop2
09A5C                           
09A5C 20 00 00                  	JSR LoadTitleScreenCHRBanks
09A5F                           
09A5F 20 00 00                  	JSR ClearNametablesAndSprites
09A62                           
09A62 AD 02 20                  	LDA PPUSTATUS
09A65 A9 3F                     	LDA #$3F
09A67 A0 00                     	LDY #$00
09A69 8D 06 20                  	STA PPUADDR
09A6C 8C 06 20                  	STY PPUADDR
09A6F                           
09A6F                           InitTitleBackgroundPalettesLoop:
09A6F B9 82 98                  	LDA TitleBackgroundPalettes, Y
09A72 8D 07 20                  	STA PPUDATA
09A75 C8                        	INY
09A76 C0 20                     	CPY #$20
09A78 90 F5                     	BCC InitTitleBackgroundPalettesLoop
09A7A                           
09A7A A9 01                     	LDA #$01
09A7C 85 F0                     	STA RAM_PPUDataBufferPointer
09A7E A9 03                     	LDA #$03
09A80 85 F1                     	STA RAM_PPUDataBufferPointer + 1
09A82 A9 40                     	LDA #Stack100_Menu
09A84 8D 00 01                  	STA StackArea
09A87 A9 90                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x8 | PPUCtrl_NMIEnabled
09A89 85 FF                     	STA PPUCtrlMirror
09A8B 8D 00 20                  	STA PPUCTRL
09A8E 20 08 96                  	JSR WaitForNMI_TitleScreen
09A91                           
09A91                           	; Draw the title screen (ScreenUpdateIndex is using TitleScreenPPUDataPointers)
09A91 A9 01                     	LDA #$01 ; TitleLayout
09A93 85 11                     	STA ScreenUpdateIndex
09A95 20 08 96                  	JSR WaitForNMI_TitleScreen
09A98                           
09A98                           	; Cue the music!
09A98 A9 80                     	LDA #Music1_Title
09A9A 8D 00 06                  	STA MusicQueue1
09A9D 20 04 96                  	JSR WaitForNMI_TitleScreen_TurnOnPPU
09AA0                           
09AA0                           	; Set up the delay before showing the story
09AA0 A9 03                     	LDA #$03
09AA2 85 10                     	STA byte_RAM_10
09AA4 A9 25                     	LDA #$25
09AA6 85 02                     	STA byte_RAM_2
09AA8                           
09AA8                           	; Prepare to clear the first line of the text area, which is slightly narrower
09AA8 A9 20                     	LDA #$20
09AAA 85 14                     	STA TitleScreenPPUAddrHi
09AAC A9 C7                     	LDA #$C7
09AAE 85 15                     	STA TitleScreenPPUAddrLo
09AB0 A9 52                     	LDA #$52
09AB2 85 16                     	STA TitleScreenPPULength
09AB4                           
09AB4                           	; Loop point, wait for NMI then check whether we need to clear the screen
09AB4                           loc_BANK0_9AB4:
09AB4 20 08 96                  	JSR WaitForNMI_TitleScreen
09AB7                           
09AB7 A5 17                     	LDA TitleScreenStoryNeedsClear
09AB9 D0 00                     	BNE loc_BANK0_9AF3
09ABB                           
09ABB                           	; Loop point, just increment the frame timer
09ABB                           loc_BANK0_9ABB:
09ABB E6 10                     	INC byte_RAM_10
09ABD A5 10                     	LDA byte_RAM_10
09ABF 29 0F                     	AND #$0F
09AC1 F0 00                     	BEQ loc_BANK0_9AC6
09AC3                           
09AC3 4C 00 00                  	JMP loc_BANK0_9B4D
09AC6                           
09AC6                           	; Decrement the title screen phase counter
09AC6                           loc_BANK0_9AC6:
09AC6 C6 02                     	DEC byte_RAM_2
09AC8 A5 02                     	LDA byte_RAM_2
09ACA C9 06                     	CMP #$06
09ACC                           IFNDEF SM_USA
09ACC D0 00                     	BNE loc_BANK0_9B4D
09ACE                           ELSE
09ACE                           	BEQ loc_BANK0_9ACE
09ACE                           	JMP loc_BANK0_9B4D
09ACE                           ENDIF
09ACE                           
09ACE                           loc_BANK0_9ACE:
09ACE E6 17                     	INC TitleScreenStoryNeedsClear
09AD0 A5 14                     	LDA TitleScreenPPUAddrHi
09AD2 8D 01 03                  	STA PPUBuffer_301
09AD5 A5 15                     	LDA TitleScreenPPUAddrLo
09AD7 8D 02 03                  	STA PPUBuffer_301 + 1
09ADA A5 16                     	LDA TitleScreenPPULength
09ADC 8D 03 03                  	STA PPUBuffer_301 + 2
09ADF                           
09ADF                           	; Prepare to clear the remaining lines of the text area
09ADF A9 E6                     	LDA #$E6
09AE1 85 15                     	STA TitleScreenPPUAddrLo
09AE3 A9 54                     	LDA #$54
09AE5 85 16                     	STA TitleScreenPPULength
09AE7 A9 FB                     	LDA #$FB
09AE9 8D 04 03                  	STA PPUBuffer_301 + 3
09AEC A9 00                     	LDA #$00
09AEE 8D 05 03                  	STA PPUBuffer_301 + 4
09AF1 F0 00                     	BEQ loc_BANK0_9B4D
09AF3                           
09AF3                           loc_BANK0_9AF3:
09AF3                           IFNDEF SM_USA
09AF3 A5 14                     	LDA TitleScreenPPUAddrHi
09AF5 8D 01 03                  	STA PPUBuffer_301
09AF8 A5 15                     	LDA TitleScreenPPUAddrLo
09AFA 8D 02 03                  	STA PPUBuffer_301 + 1
09AFD A5 16                     	LDA TitleScreenPPULength
09AFF 8D 03 03                  	STA PPUBuffer_301 + 2
09B02                           ELSE
09B02                           	LDA TitleScreenPPULength
09B02                           	STA PPUBuffer_301 + 2
09B02                           	LDA TitleScreenPPUAddrLo
09B02                           	STA PPUBuffer_301 + 1
09B02                           	LDA TitleScreenPPUAddrHi
09B02                           	STA PPUBuffer_301
09B02                           	; Need to clear a wider row of tiles with "Super Mario" on a single line
09B02                           	CMP #$21
09B02                           	BNE loc_BANK0_9B02
09B02                           	LDA PPUBuffer_301 + 2
09B02                           	CLC
09B02                           	ADC #$02
09B02                           	STA PPUBuffer_301 + 2
09B02                           	DEC PPUBuffer_301 + 1
09B02                           ENDIF
09B02                           
09B02                           loc_BANK0_9B02:
09B02 A9 FB                     	LDA #$FB
09B04 8D 04 03                  	STA PPUBuffer_301 + 3
09B07 A9 00                     	LDA #$00
09B09 8D 05 03                  	STA PPUBuffer_301 + 4
09B0C A5 15                     	LDA TitleScreenPPUAddrLo
09B0E 18                        	CLC
09B0F 69 20                     	ADC #$20
09B11 85 15                     	STA TitleScreenPPUAddrLo
09B13 A5 14                     	LDA TitleScreenPPUAddrHi
09B15 69 00                     	ADC #$00
09B17 85 14                     	STA TitleScreenPPUAddrHi
09B19 C9 23                     	CMP #$23
09B1B                           
09B1B                           loc_BANK0_9B1B:
09B1B 90 00                     	BCC loc_BANK0_9B4D
09B1D                           
09B1D A9 20                     	LDA #$20
09B1F 85 10                     	STA byte_RAM_10
09B21 A2 17                     	LDX #$17
09B23 A0 00                     	LDY #$00
09B25                           
09B25                           loc_BANK0_9B25:
09B25 B9 09 9A                  	LDA TitleAttributeData1, Y
09B28 99 05 03                  	STA PPUBuffer_301 + 4, Y
09B2B C8                        	INY
09B2C CA                        	DEX
09B2D 10 F6                     	BPL loc_BANK0_9B25
09B2F                           
09B2F A9 00                     	LDA #$00
09B31 99 05 03                  	STA PPUBuffer_301 + 4, Y
09B34 20 08 96                  	JSR WaitForNMI_TitleScreen
09B37                           
09B37 A2 1B                     	LDX #$1B
09B39 A0 00                     	LDY #$00
09B3B                           
09B3B                           loc_BANK0_9B3B:
09B3B B9 21 9A                  	LDA TitleAttributeData2, Y
09B3E 99 01 03                  	STA PPUBuffer_301, Y
09B41 C8                        	INY
09B42 CA                        	DEX
09B43 10 F6                     	BPL loc_BANK0_9B3B
09B45                           
09B45 A9 00                     	LDA #$00
09B47 99 01 03                  	STA PPUBuffer_301, Y
09B4A 4C 00 00                  	JMP loc_BANK0_9B59
09B4D                           
09B4D                           ; ---------------------------------------------------------------------------
09B4D                           
09B4D                           loc_BANK0_9B4D:
09B4D A5 F5                     	LDA Player1JoypadPress
09B4F 29 10                     	AND #ControllerInput_Start
09B51 F0 00                     	BEQ loc_BANK0_9B56
09B53                           
09B53 4C 00 00                  	JMP loc_BANK0_9C1F
09B56                           
09B56                           ; ---------------------------------------------------------------------------
09B56                           
09B56                           loc_BANK0_9B56:
09B56 4C B4 9A                  	JMP loc_BANK0_9AB4
09B59                           
09B59                           ; ---------------------------------------------------------------------------
09B59                           
09B59                           loc_BANK0_9B59:
09B59 20 08 96                  	JSR WaitForNMI_TitleScreen
09B5C                           
09B5C A5 19                     	LDA TitleScreenPPUAddrLo + 4
09B5E F0 00                     	BEQ loc_BANK0_9B63
09B60                           
09B60 4C 00 00                  	JMP loc_BANK0_9C19
09B63                           
09B63                           ; ---------------------------------------------------------------------------
09B63                           
09B63                           loc_BANK0_9B63:
09B63 A5 18                     	LDA TitleScreenStoryTextIndex
09B65 C9 09                     	CMP #$09
09B67 F0 00                     	BEQ loc_BANK0_9B93
09B69                           
09B69 A5 18                     	LDA TitleScreenStoryTextIndex
09B6B D0 00                     	BNE loc_BANK0_9BA3
09B6D                           
09B6D C6 10                     	DEC byte_RAM_10
09B6F 30 00                     	BMI TitleScreen_WriteSTORYText
09B71                           
09B71 4C 00 00                  	JMP loc_BANK0_9C19
09B74                           
09B74                           ; ---------------------------------------------------------------------------
09B74                           
09B74                           TitleScreen_WriteSTORYText:
09B74 A9 20                     	LDA #$20
09B76 8D 01 03                  	STA PPUBuffer_301
09B79 A9 AE                     	LDA #$AE
09B7B 8D 02 03                  	STA PPUBuffer_301 + 1
09B7E A9 05                     	LDA #$05 ; Length of STORY text (5 bytes)
09B80 8D 03 03                  	STA PPUBuffer_301 + 2
09B83 A0 04                     	LDY #$04 ; Bytes to copy minus one (5-1=4)
09B85                           
09B85                           TitleScreen_WriteSTORYTextLoop:
09B85 B9 A2 98                  	LDA TitleStoryText_STORY, Y ; Copy STORY text to PPU write buffer
09B88 99 04 03                  	STA PPUBuffer_301 + 3, Y
09B8B 88                        	DEY
09B8C 10 F7                     	BPL TitleScreen_WriteSTORYTextLoop
09B8E                           
09B8E A9 00                     	LDA #$00 ; Terminate STORY text in buffer
09B90 8D 09 03                  	STA PPUBuffer_301 + 8
09B93                           
09B93                           loc_BANK0_9B93:
09B93 E6 18                     	INC TitleScreenStoryTextIndex
09B95 A9 21                     	LDA #$21
09B97 85 14                     	STA TitleScreenPPUAddrHi
09B99 A9 06                     	LDA #$06
09B9B 85 15                     	STA TitleScreenPPUAddrLo
09B9D A9 40                     	LDA #$40
09B9F 85 1A                     	STA TitleScreenStoryTextLineTimer
09BA1 D0 00                     	BNE loc_BANK0_9C19
09BA3                           
09BA3                           loc_BANK0_9BA3:
09BA3 C6 1A                     	DEC TitleScreenStoryTextLineTimer
09BA5 10 00                     	BPL loc_BANK0_9C19
09BA7                           
09BA7                           loc_BANK0_9BA7:
09BA7 A9 40                     	LDA #$40
09BA9 85 1A                     	STA TitleScreenStoryTextLineTimer
09BAB A5 14                     	LDA TitleScreenPPUAddrHi
09BAD 8D 01 03                  	STA PPUBuffer_301
09BB0                           
09BB0                           loc_BANK0_9BB0:
09BB0 A5 15                     	LDA TitleScreenPPUAddrLo
09BB2                           
09BB2                           loc_BANK0_9BB2:
09BB2 8D 02 03                  	STA PPUBuffer_301 + 1
09BB5 A9 14                     	LDA #$14
09BB7 8D 03 03                  	STA PPUBuffer_301 + 2
09BBA A6 18                     	LDX TitleScreenStoryTextIndex
09BBC CA                        	DEX
09BBD BD A7 98                  	LDA TitleStoryTextPointersHi, X
09BC0 85 04                     	STA byte_RAM_4
09BC2 BD B8 98                  	LDA TitleStoryTextPointersLo, X
09BC5 85 03                     	STA byte_RAM_3
09BC7 A0 00                     	LDY #$00
09BC9 A2 13                     	LDX #$13
09BCB                           
09BCB                           loc_BANK0_9BCB:
09BCB B1 03                     	LDA (byte_RAM_3), Y
09BCD 99 04 03                  	STA PPUBuffer_301 + 3, Y
09BD0 C8                        	INY
09BD1 CA                        	DEX
09BD2 10 F7                     	BPL loc_BANK0_9BCB
09BD4                           
09BD4 A9 00                     	LDA #$00
09BD6 99 04 03                  	STA PPUBuffer_301 + 3, Y
09BD9 E6 18                     	INC TitleScreenStoryTextIndex
09BDB A5 15                     	LDA TitleScreenPPUAddrLo
09BDD 18                        	CLC
09BDE 69 40                     	ADC #$40
09BE0 85 15                     	STA TitleScreenPPUAddrLo
09BE2 A5 14                     	LDA TitleScreenPPUAddrHi
09BE4 69 00                     	ADC #$00
09BE6 85 14                     	STA TitleScreenPPUAddrHi
09BE8 A5 18                     	LDA TitleScreenStoryTextIndex
09BEA C9 09                     	CMP #$09
09BEC 90 00                     	BCC loc_BANK0_9C19
09BEE                           
09BEE D0 00                     	BNE loc_BANK0_9C0B
09BF0                           
09BF0 A9 09                     	LDA #$09
09BF2 85 02                     	STA byte_RAM_2
09BF4 A9 03                     	LDA #$03
09BF6 85 10                     	STA byte_RAM_10
09BF8 A9 20                     	LDA #$20
09BFA 85 14                     	STA TitleScreenPPUAddrHi
09BFC A9 C7                     	LDA #$C7
09BFE 85 15                     	STA TitleScreenPPUAddrLo
09C00 A9 52                     	LDA #$52
09C02 85 16                     	STA TitleScreenPPULength
09C04 A9 00                     	LDA #$00
09C06 85 17                     	STA TitleScreenStoryNeedsClear
09C08 4C BB 9A                  	JMP loc_BANK0_9ABB
09C0B                           
09C0B                           ; ---------------------------------------------------------------------------
09C0B                           
09C0B                           loc_BANK0_9C0B:
09C0B C9 12                     	CMP #$12
09C0D 90 00                     	BCC loc_BANK0_9C19
09C0F                           
09C0F E6 19                     	INC TitleScreenStoryDone
09C11 A9 25                     	LDA #$25
09C13 85 02                     	STA byte_RAM_2
09C15 A9 03                     	LDA #$03
09C17 85 10                     	STA byte_RAM_10
09C19                           
09C19                           loc_BANK0_9C19:
09C19 A5 F7                     	LDA Player1JoypadHeld
09C1B 29 10                     	AND #ControllerInput_Start
09C1D F0 00                     	BEQ loc_BANK0_9C35
09C1F                           
09C1F                           loc_BANK0_9C1F:
09C1F A9 80                     	LDA #Music2_StopMusic
09C21 8D 03 06                  	STA MusicQueue2
09C24 20 08 96                  	JSR WaitForNMI_TitleScreen
09C27                           
09C27 A9 00                     	LDA #$00
09C29 A8                        	TAY
09C2A                           
09C2A                           loc_BANK0_9C2A:
09C2A 99 00 00                  	STA byte_RAM_0, Y
09C2D C8                        	INY
09C2E C0 F0                     	CPY #$F0
09C30 90 F8                     	BCC loc_BANK0_9C2A
09C32                           
09C32 4C 00 00                  	JMP HideAllSprites
09C35                           
09C35                           ; ---------------------------------------------------------------------------
09C35                           
09C35                           loc_BANK0_9C35:
09C35 A5 19                     	LDA TitleScreenStoryDone
09C37 F0 00                     	BEQ loc_BANK0_9C4B
09C39                           
09C39 E6 10                     	INC byte_RAM_10
09C3B A5 10                     	LDA byte_RAM_10
09C3D 29 0F                     	AND #$0F
09C3F D0 00                     	BNE loc_BANK0_9C4B
09C41                           
09C41 C6 02                     	DEC byte_RAM_2
09C43 A5 02                     	LDA byte_RAM_2
09C45 C9 06                     	CMP #$06
09C47 D0 00                     	BNE loc_BANK0_9C4B
09C49                           
09C49 F0 00                     	BEQ loc_BANK0_9C4E
09C4B                           
09C4B                           loc_BANK0_9C4B:
09C4B 4C 59 9B                  	JMP loc_BANK0_9B59
09C4E                           
09C4E                           ; ---------------------------------------------------------------------------
09C4E                           
09C4E                           loc_BANK0_9C4E:
09C4E A9 10                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x8 | PPUCtrl_NMIDisabled
09C50 85 FF                     	STA PPUCtrlMirror
09C52                           
09C52                           loc_BANK0_9C52:
09C52 8D 00 20                  	STA PPUCTRL
09C55 4C 53 9A                  	JMP loc_BANK0_9A53
09C58                           
09C58                           ; End of function TitleScreen
09C58                           
09C58                           
09C58                           IFDEF RESPAWN_INSTEAD_OF_DEATH
09C58                           HandlePlayerState_Respawning:
09C58                           	; Start from zero
09C58                           	LDA #PlayerState_Normal
09C58                           	STA PlayerState
09C58                           	STA PlayerXVelocity
09C58                           	STA PlayerYVelocity
09C58                           
09C58                           	; Are the in a jar?
09C58                           	LDA InJarType
09C58                           	BNE HandlePlayerState_Respawning_Jar
09C58                           
09C58                           	; Are we in subspace?
09C58                           	LDA InSubspaceOrJar
09C58                           	BEQ HandlePlayerState_Respawning_Regular
09C58                           
09C58                           HandlePlayerState_Respawning_Subspace:
09C58                           	; Exit subspace immediately
09C58                           	LDA #$00
09C58                           	STA InSubspaceOrJar
09C58                           	STA SubspaceTimer
09C58                           
09C58                           	RTS
09C58                           
09C58                           HandlePlayerState_Respawning_Jar:
09C58                           	; Pointer jars reload like an area
09C58                           	CMP #$02
09C58                           	BEQ HandlePlayerState_Respawning_AreaReset
09C58                           
09C58                           HandlePlayerState_Respawning_JarSubArea:
09C58                           	; Clear the sub-area tile layout
09C58                           	JSR ResetSubAreaJarLayout
09C58                           
09C58                           	; Redraw tiles (horizontal level)
09C58                           	JSR WaitForNMI_TurnOffPPU
09C58                           
09C58                           	; Set update boundary to page 10 for sub-area
09C58                           	LDA #$0A
09C58                           	STA BackgroundUpdateBoundary
09C58                           
09C58                           HandlePlayerState_Respawning_JarSubArea_Loop:
09C58                           	JSR WaitForNMI
09C58                           
09C58                           	JSR sub_BANK0_87AA
09C58                           
09C58                           	LDA byte_RAM_537
09C58                           	BEQ HandlePlayerState_Respawning_JarSubArea_Loop
09C58                           
09C58                           	JSR WaitForNMI_TurnOnPPU
09C58                           	JSR WaitForNMI
09C58                           
09C58                           	JSR DoAreaReset
09C58                           
09C58                           	JSR ApplyAreaTransition
09C58                           
09C58                           	RTS
09C58                           
09C58                           HandlePlayerState_Respawning_Regular:
09C58                           	; Reset level
09C58                           	LDA CurrentLevel_Init
09C58                           	STA CurrentLevel
09C58                           	LDA CurrentLevelArea_Init
09C58                           	STA CurrentLevelArea
09C58                           	LDA CurrentLevelEntryPage_Init
09C58                           	STA CurrentLevelEntryPage
09C58                           	LDA TransitionType_Init
09C58                           	STA TransitionType
09C58                           
09C58                           	; Reset player
09C58                           	LDA PlayerXLo_Init
09C58                           	STA PlayerXLo
09C58                           	LDA PlayerYLo_Init
09C58                           	STA PlayerYLo
09C58                           	LDA PlayerScreenX_Init
09C58                           	STA PlayerScreenX
09C58                           	LDA PlayerScreenYLo_Init
09C58                           	STA PlayerScreenYLo
09C58                           	LDA PlayerYVelocity_Init
09C58                           	STA PlayerYVelocity
09C58                           	LDA PlayerState_Init
09C58                           	STA PlayerState
09C58                           
09C58                           	LDA #$00
09C58                           	STA PlayerXVelocity
09C58                           	STA PlayerCurrentSize
09C58                           	STA InSubspaceOrJar
09C58                           	STA SubspaceTimer
09C58                           
09C58                           	JSR RestorePlayerToFullHealth
09C58                           
09C58                           	JSR LoadCharacterCHRBanks
09C58                           
09C58                           HandlePlayerState_Respawning_AreaReset:
09C58                           	JSR DoAreaReset
09C58                           
09C58                           	; Break out of HandlePlayerState
09C58                           	PLA
09C58                           	PLA
09C58                           	; Break out of RunFrame
09C58                           	PLA
09C58                           	PLA
09C58                           
09C58                           	; Kick off the level again
09C58                           	JMP StartLevel
09C58                           ENDIF
09C58                           
09C58                           ; Unused space in the original ($9C58 - $A1FF)
09C58                           unusedSpace $A200, $FF
09C58                           	IFDEF PRESERVE_UNUSED_SPACE
09C58 FF FF FF FF FF FF FF FF.. 		.pad $A200, $FF
0A200                           	ENDIF
0A200                           
0A200                           
0A200                           EndingPPUDataPointers:
0A200 01 03                     	.dw PPUBuffer_301
0A202 00 00                     	.dw EndingCorkJarRoom
0A204 00 00                     	.dw EndingCelebrationCeilingTextAndPodium
0A206 00 00                     	.dw EndingCelebrationFloorAndSubconParade
0A208 00 00                     	.dw EndingCelebrationPaletteFade1
0A20A 00 00                     	.dw EndingCelebrationPaletteFade2
0A20C 00 00                     	.dw EndingCelebrationPaletteFade3
0A20E 00 00                     	.dw EndingCelebrationSubconStandStill
0A210 00 00                     	.dw EndingCelebrationUnusedText_THE_END
0A212 00 00                     	.dw EndingCelebrationText_MARIO
0A214 00 00                     	.dw EndingCelebrationText_PRINCESS
0A216 00 00                     	.dw EndingCelebrationText_TOAD
0A218 00 00                     	.dw EndingCelebrationText_LUIGI
0A21A                           
0A21A                           
0A21A                           WaitForNMI_Ending_TurnOffPPU:
0A21A A9 00                     	LDA #$00
0A21C F0 00                     	BEQ WaitForNMI_Ending_SetPPUMaskMirror
0A21E                           
0A21E                           WaitForNMI_Ending_TurnOnPPU:
0A21E A9 1E                     	LDA #PPUMask_ShowLeft8Pixels_BG | PPUMask_ShowLeft8Pixels_SPR | PPUMask_ShowBackground | PPUMask_ShowSprites
0A220                           
0A220                           WaitForNMI_Ending_SetPPUMaskMirror:
0A220 85 FE                     	STA PPUMaskMirror
0A222                           
0A222                           WaitForNMI_Ending:
0A222 A5 11                     	LDA ScreenUpdateIndex
0A224 0A                        	ASL A
0A225 AA                        	TAX
0A226 BD 00 A2                  	LDA EndingPPUDataPointers, X
0A229 85 F0                     	STA RAM_PPUDataBufferPointer
0A22B BD 01 A2                  	LDA EndingPPUDataPointers + 1, X
0A22E 85 F1                     	STA RAM_PPUDataBufferPointer + 1
0A230                           
0A230 A9 00                     	LDA #$00
0A232 85 EB                     	STA NMIWaitFlag
0A234                           WaitForNMI_EndingLoop:
0A234 A5 EB                     	LDA NMIWaitFlag
0A236 10 FC                     	BPL WaitForNMI_EndingLoop
0A238                           
0A238 60                        	RTS
0A239                           
0A239                           
0A239                           EndingCorkJarRoom:
0A239 20 00 9E 72 73 72 73 72.. 	.db $20, $00, $9E, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73
0A248 72 73 72 73 72 73 72 73.. 	.db $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72
0A257 73 72 73                  	.db $73, $72, $73
0A25A 20 01 9E 73 72 73 72 73.. 	.db $20, $01, $9E, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72
0A269 73 72 73 72 73 72 73 72.. 	.db $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73
0A278 72 73 72                  	.db $72, $73, $72
0A27B 22 02 8E 72 73 72 73 72.. 	.db $22, $02, $8E, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73
0A28A 72 73                     	.db $72, $73
0A28C 22 03 8E 73 72 73 72 73.. 	.db $22, $03, $8E, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72
0A29B 73 72                     	.db $73, $72
0A29D 23 44 18 72 73 72 73 72.. 	.db $23, $44, $18, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73
0A2AC 72 73 72 73 72 73 72 73.. 	.db $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73
0A2B8 23 64 18 73 72 73 72 73.. 	.db $23, $64, $18, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72
0A2C7 73 72 73 72 73 72 73 72.. 	.db $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72
0A2D3 23 84 18 72 73 72 73 72.. 	.db $23, $84, $18, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73
0A2E2 72 73 72 73 72 73 72 73.. 	.db $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73
0A2EE 23 A4 18 73 72 73 72 73.. 	.db $23, $A4, $18, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72
0A2FD 73 72 73 72 73 72 73 72.. 	.db $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72
0A309 22 1C 8E 72 73 72 73 72.. 	.db $22, $1C, $8E, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73
0A318 72 73                     	.db $72, $73
0A31A 22 1D 8E 73 72 73 72 73.. 	.db $22, $1D, $8E, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72
0A329 73 72                     	.db $73, $72
0A32B 20 1E 9E 72 73 72 73 72.. 	.db $20, $1E, $9E, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73
0A33A 72 73 72 73 72 73 72 73.. 	.db $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72
0A349 73 72 73                  	.db $73, $72, $73
0A34C 20 1F 9E 73 72 73 72 73.. 	.db $20, $1F, $9E, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72
0A35B 73 72 73 72 73 72 73 72.. 	.db $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73
0A36A 72 73 72                  	.db $72, $73, $72
0A36D 22 C6 C4 FC               	.db $22, $C6, $C4, $FC
0A371 22 C7 C4 FC               	.db $22, $C7, $C4, $FC
0A375 22 C8 84 AD AC AC AC      	.db $22, $C8, $84, $AD, $AC, $AC, $AC
0A37C 22 E9 83 AD AC AC         	.db $22, $E9, $83, $AD, $AC, $AC
0A382 23 0A 82 AD AC            	.db $23, $0A, $82, $AD, $AC
0A387 23 2B 01 AD               	.db $23, $2B, $01, $AD
0A38B 22 90 84 88 89 89 8C      	.db $22, $90, $84, $88, $89, $89, $8C
0A392 22 91 84 8A 8B 8B 8D      	.db $22, $91, $84, $8A, $8B, $8B, $8D
0A399 23 0E 06 74 76 74 76 74.. 	.db $23, $0E, $06, $74, $76, $74, $76, $74, $76
0A3A2 23 2E 06 75 77 75 77 75.. 	.db $23, $2E, $06, $75, $77, $75, $77, $75, $77
0A3AB 23 C0 20 22 00 00 00 00.. 	.db $23, $C0, $20, $22, $00, $00, $00, $00, $00, $00, $88, $22, $00, $00, $00, $00, $00, $00, $88, $22, $00
0A3C0 00 00 00 00 00 88 22 00.. 	.db $00, $00, $00, $00, $00, $88, $22, $00, $00, $00, $00, $00, $00, $88
0A3CE 23 E0 20 AA 00 00 00 00.. 	.db $23, $E0, $20, $AA, $00, $00, $00, $00, $00, $00, $AA, $AA, $00, $00, $00, $11, $00, $00, $AA, $AA
0A3E2 A0 A0 A4 A5 A0 A0 AA 0A.. 	.db $A0, $A0, $A4, $A5, $A0, $A0, $AA, $0A, $0A, $0A, $0A, $0A, $0A, $0A, $0A
0A3F1 00                        	.db $00
0A3F2                           
0A3F2                           EndingCelebrationUnusedText_THANK_YOU:
0A3F2 21 0C 09 ED E1 DA E7 E4.. 	.db $21, $0C, $09, $ED, $E1, $DA, $E7, $E4, $FB, $F2, $E8, $EE
0A3FE 00                        	.db $00
0A3FF                           
0A3FF                           CorkRoomSpriteStartX:
0A3FF 30                        	.db $30 ; player
0A400 80                        	.db $80 ; subcon 8
0A401 80                        	.db $80 ; subcon 7
0A402 80                        	.db $80 ; subcon 6
0A403 80                        	.db $80 ; subcon 5
0A404 80                        	.db $80 ; subcon 4
0A405 80                        	.db $80 ; subcon 3
0A406 80                        	.db $80 ; subcon 2
0A407 80                        	.db $80 ; subcon 1
0A408 80                        	.db $80 ; cork
0A409                           
0A409                           CorkRoomSpriteStartY:
0A409 B0                        	.db $B0 ; player
0A40A A0                        	.db $A0 ; subcon 8
0A40B A0                        	.db $A0 ; subcon 7
0A40C A0                        	.db $A0 ; subcon 6
0A40D A0                        	.db $A0 ; subcon 5
0A40E A0                        	.db $A0 ; subcon 4
0A40F A0                        	.db $A0 ; subcon 3
0A410 A0                        	.db $A0 ; subcon 2
0A411 A0                        	.db $A0 ; subcon 1
0A412 95                        	.db $95 ; cork
0A413                           
0A413                           CorkRoomSpriteTargetX:
0A413 10                        	.db $10 ; player
0A414 F4                        	.db $F4 ; subcon 8
0A415 0C                        	.db $0C ; subcon 7
0A416 E8                        	.db $E8 ; subcon 6
0A417 18                        	.db $18 ; subcon 5
0A418 EC                        	.db $EC ; subcon 4
0A419 14                        	.db $14 ; subcon 3
0A41A F8                        	.db $F8 ; subcon 2
0A41B 08                        	.db $08 ; subcon 1
0A41C 00                        	.db $00 ; cork
0A41D                           
0A41D                           CorkRoomSpriteTargetY:
0A41D 00                        	.db $00 ; player
0A41E C4                        	.db $C4 ; subcon 8
0A41F C4                        	.db $C4 ; subcon 7
0A420 B8                        	.db $B8 ; subcon 6
0A421 B8                        	.db $B8 ; subcon 5
0A422 A8                        	.db $A8 ; subcon 4
0A423 A8                        	.db $A8 ; subcon 3
0A424 A0                        	.db $A0 ; subcon 2
0A425 A0                        	.db $A0 ; subcon 1
0A426 00                        	.db $00 ; cork
0A427                           
0A427                           CorkRoomSpriteDelay:
0A427 00                        	.db $00 ; player
0A428 F0                        	.db $F0 ; subcon 8
0A429 E0                        	.db $E0 ; subcon 7
0A42A C0                        	.db $C0 ; subcon 6
0A42B A0                        	.db $A0 ; subcon 5
0A42C 80                        	.db $80 ; subcon 4
0A42D 60                        	.db $60 ; subcon 3
0A42E 40                        	.db $40 ; subcon 2
0A42F 20                        	.db $20 ; subcon 1
0A430 00                        	.db $00 ; cork
0A431                           
0A431                           CorkRoomSpriteAttributes:
0A431 00                        	.db $00 ; player
0A432 21                        	.db $21 ; subcon 8
0A433 61                        	.db $61 ; subcon 7
0A434 21                        	.db $21 ; subcon 6
0A435 61                        	.db $61 ; subcon 5
0A436 21                        	.db $21 ; subcon 4
0A437 61                        	.db $61 ; subcon 3
0A438 21                        	.db $21 ; subcon 2
0A439 61                        	.db $61 ; subcon 1
0A43A 22                        	.db $22 ; cork
0A43B                           
0A43B                           
0A43B                           FreeSubconsScene:
0A43B 20 1A A2                  	JSR WaitForNMI_Ending_TurnOffPPU
0A43E 20 00 00                  	JSR ClearNametablesAndSprites
0A441                           
0A441 A9 40                     	LDA #Stack100_Menu
0A443 8D 00 01                  	STA StackArea
0A446 A9 B0                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIEnabled
0A448 85 FF                     	STA PPUCtrlMirror
0A44A 8D 00 20                  	STA PPUCTRL
0A44D 20 22 A2                  	JSR WaitForNMI_Ending
0A450                           
0A450 A9 01                     	LDA #EndingUpdateBuffer_JarRoom
0A452 85 11                     	STA ScreenUpdateIndex
0A454 20 22 A2                  	JSR WaitForNMI_Ending
0A457                           
0A457 A9 60                     	LDA #$60
0A459 85 83                     	STA FreeSubconsTimer
0A45B A9 01                     	LDA #$01
0A45D 85 9D                     	STA PlayerDirection
0A45F 4A                        	LSR A
0A460 85 50                     	STA PlayerState ; A=$00
0A462 85 8E                     	STA FreeSubconsCorkCounter
0A464 8D CA 04                  	STA CrouchJumpTimer
0A467 85 E6                     	STA byte_RAM_E6
0A469 85 E5                     	STA byte_RAM_E5
0A46B 8D 00 04                  	STA SpriteFlickerSlot
0A46E                           
0A46E A2 09                     	LDX #$09
0A470                           FreeSubconsScene_SpriteLoop:
0A470 BD FF A3                  	LDA CorkRoomSpriteStartX, X
0A473 95 28                     	STA ObjectXLo - 1, X
0A475 BD 09 A4                  	LDA CorkRoomSpriteStartY, X
0A478 95 32                     	STA ObjectYLo - 1, X
0A47A BD 13 A4                  	LDA CorkRoomSpriteTargetX, X
0A47D 95 3C                     	STA ObjectXVelocity - 1, X
0A47F BD 1D A4                  	LDA CorkRoomSpriteTargetY, X
0A482 95 46                     	STA ObjectYVelocity - 1, X
0A484 BD 27 A4                  	LDA CorkRoomSpriteDelay, X
0A487 95 85                     	STA ObjectTimer1 - 1, X
0A489 BD 31 A4                  	LDA CorkRoomSpriteAttributes, X
0A48C 95 64                     	STA ObjectAttributes - 1, X
0A48E CA                        	DEX
0A48F 10 DF                     	BPL FreeSubconsScene_SpriteLoop
0A491                           
0A491                           FreeSubconsScene_JumpingLoop:
0A491 20 1E A2                  	JSR WaitForNMI_Ending_TurnOnPPU
0A494                           
0A494 E6 10                     	INC byte_RAM_10
0A496 20 00 00                  	JSR HideAllSprites
0A499                           
0A499 20 00 00                  	JSR FreeSubconsScene_Player
0A49C                           
0A49C 20 00 00                  	JSR FreeSubconsScene_Cork
0A49F                           
0A49F A5 83                     	LDA FreeSubconsTimer
0A4A1 F0 00                     	BEQ FreeSubconsScene_Exit
0A4A3                           
0A4A3 A5 10                     	LDA byte_RAM_10
0A4A5 29 07                     	AND #$07
0A4A7 D0 E8                     	BNE FreeSubconsScene_JumpingLoop
0A4A9                           
0A4A9 C6 83                     	DEC FreeSubconsTimer
0A4AB A5 83                     	LDA FreeSubconsTimer
0A4AD C9 25                     	CMP #$25
0A4AF D0 E0                     	BNE FreeSubconsScene_JumpingLoop
0A4B1                           
0A4B1 A0 04                     	LDY #Music2_EndingAndCast
0A4B3 8C 03 06                  	STY MusicQueue2
0A4B6 D0 D9                     	BNE FreeSubconsScene_JumpingLoop
0A4B8                           
0A4B8                           FreeSubconsScene_Exit:
0A4B8 20 00 00                  	JSR EndingSceneTransition
0A4BB                           
0A4BB A5 E6                     	LDA byte_RAM_E6
0A4BD F0 D2                     	BEQ FreeSubconsScene_JumpingLoop
0A4BF                           
0A4BF 60                        	RTS
0A4C0                           
0A4C0                           
0A4C0                           ;
0A4C0                           ; Moves the player, driving the main action in the scene
0A4C0                           ;
0A4C0                           FreeSubconsScene_Player:
0A4C0 A5 84                     	LDA PlayerWalkFrameCounter
0A4C2 F0 00                     	BEQ FreeSubconsScene_Player_AfterWalkFrameCounter
0A4C4                           
0A4C4 C6 84                     	DEC PlayerWalkFrameCounter
0A4C6                           
0A4C6                           FreeSubconsScene_Player_AfterWalkFrameCounter:
0A4C6 A5 82                     	LDA PlayerStateTimer
0A4C8 F0 00                     	BEQ FreeSubconsScene_Player_AfterStateTimer
0A4CA                           
0A4CA C6 82                     	DEC PlayerStateTimer
0A4CC                           
0A4CC                           FreeSubconsScene_Player_AfterStateTimer:
0A4CC A5 28                     	LDA PlayerXLo
0A4CE 8D 28 04                  	STA PlayerScreenX
0A4D1 A5 32                     	LDA PlayerYLo
0A4D3 8D 2B 04                  	STA PlayerScreenYLo
0A4D6 20 00 00                  	JSR RenderPlayer
0A4D9                           
0A4D9 A5 50                     	LDA PlayerState
0A4DB 20 00 00                  	JSR JumpToTableAfterJump
0A4DE                           
0A4DE 00 00                     	.dw FreeSubconsScene_Phase1
0A4E0 00 00                     	.dw FreeSubconsScene_Phase2
0A4E2 00 00                     	.dw FreeSubconsScene_Phase3
0A4E4 00 00                     	.dw FreeSubconsScene_Phase4
0A4E6 00 00                     	.dw FreeSubconsScene_Phase5
0A4E8                           
0A4E8                           
0A4E8                           ; Walking in and first jump
0A4E8                           FreeSubconsScene_Phase1:
0A4E8 20 8C 8D                  	JSR PlayerWalkJumpAnim
0A4EB                           
0A4EB 20 6D 8A                  	JSR ApplyPlayerPhysicsX
0A4EE                           
0A4EE                           	; check x-position to trigger first jump
0A4EE A5 28                     	LDA PlayerXLo
0A4F0 C9 3E                     	CMP #$3E
0A4F2 90 00                     	BCC FreeSubconsScene_PhaseExit
0A4F4                           
0A4F4 E6 50                     	INC PlayerState
0A4F6 E6 99                     	INC PlayerInAir
0A4F8 A9 06                     	LDA #SpriteAnimation_Jumping
0A4FA 85 C7                     	STA PlayerAnimationFrame
0A4FC                           
0A4FC                           FreeSubconsScene_Jump:
0A4FC A9 01                     	LDA #SoundEffect2_Jump
0A4FE 8D 04 06                  	STA SoundEffectQueue2
0A501 4C B6 8C                  	JMP PlayerStartJump
0A504                           
0A504                           
0A504                           ; Physics and second jump
0A504                           FreeSubconsScene_Phase2:
0A504 20 8C 8D                  	JSR PlayerWalkJumpAnim
0A507                           
0A507 20 6D 8A                  	JSR ApplyPlayerPhysicsX
0A50A                           
0A50A 20 00 00                  	JSR ApplyCorkRoomGravity
0A50D                           
0A50D 20 C1 8E                  	JSR ApplyPlayerPhysicsY
0A510                           
0A510 A5 46                     	LDA PlayerYVelocity
0A512 30 00                     	BMI FreeSubconsScene_PhaseExit
0A514                           
0A514                           	; check y-position to trigger second jump
0A514 A5 32                     	LDA PlayerYLo
0A516 C9 A0                     	CMP #$A0
0A518 90 00                     	BCC FreeSubconsScene_Phase2_NoJump
0A51A                           
0A51A                           	; set x-velocity to land second jump on the jar
0A51A A9 0C                     	LDA #$0C
0A51C 85 3C                     	STA PlayerXVelocity
0A51E 4C FC A4                  	JMP FreeSubconsScene_Jump
0A521                           
0A521                           FreeSubconsScene_Phase2_NoJump:
0A521                           	; check the top of the jar
0A521 C9 75                     	CMP #$75
0A523 90 00                     	BCC FreeSubconsScene_PhaseExit
0A525                           
0A525                           	; check x-position for jar
0A525 A5 28                     	LDA PlayerXLo
0A527 C9 70                     	CMP #$70
0A529 90 00                     	BCC FreeSubconsScene_PhaseExit
0A52B                           
0A52B E6 50                     	INC PlayerState
0A52D C6 99                     	DEC PlayerInAir
0A52F                           
0A52F                           FreeSubconsScene_PhaseExit:
0A52F 60                        	RTS
0A530                           
0A530                           
0A530                           ; Start pulling the cork
0A530                           FreeSubconsScene_Phase3:
0A530 20 8C 8D                  	JSR PlayerWalkJumpAnim
0A533                           
0A533 20 6D 8A                  	JSR ApplyPlayerPhysicsX
0A536                           
0A536                           	; check x-position for jar
0A536 A5 28                     	LDA PlayerXLo
0A538 C9 80                     	CMP #$80
0A53A 90 F3                     	BCC FreeSubconsScene_PhaseExit
0A53C                           
0A53C                           	; pull the cork
0A53C E6 50                     	INC PlayerState
0A53E E6 9C                     	INC HoldingItem
0A540 A9 08                     	LDA #SpriteAnimation_Pulling
0A542 85 C7                     	STA PlayerAnimationFrame
0A544 A9 05                     	LDA #$05
0A546 85 8E                     	STA FreeSubconsCorkCounter
0A548 A9 28                     	LDA #$28
0A54A 85 82                     	STA PlayerStateTimer
0A54C 60                        	RTS
0A54D                           
0A54D                           
0A54D                           PullCorkFrameDurations:
0A54D 14                        	.db $14
0A54E 0A                        	.db $0A
0A54F 14                        	.db $14
0A550 0A                        	.db $0A
0A551                           
0A551                           PullCorkOffsets:
0A551 1C                        	.db $1C
0A552 1B                        	.db $1B
0A553 1E                        	.db $1E
0A554 1D                        	.db $1D
0A555 1F                        	.db $1F
0A556                           
0A556                           
0A556                           ; Pull the cork out
0A556                           FreeSubconsScene_Phase4:
0A556                           	; use PlayerStateTimer to hold this frame
0A556 A5 82                     	LDA PlayerStateTimer
0A558 D0 00                     	BNE FreeSubconsScene_Phase4_Exit
0A55A                           
0A55A                           	; next FreeSubconsCorkCounter to move cork
0A55A C6 8E                     	DEC FreeSubconsCorkCounter
0A55C D0 00                     	BNE FreeSubconsScene_Phase4_NextCorkFrame
0A55E                           
0A55E                           	; uncorked! start jumping
0A55E E6 50                     	INC PlayerState
0A560 E6 99                     	INC PlayerInAir
0A562                           
0A562 A9 06                     	LDA #SpriteAnimation_Jumping
0A564 85 C7                     	STA PlayerAnimationFrame
0A566                           
0A566 A9 08                     	LDA #DPCM_ItemPull
0A568 8D 01 06                  	STA DPCMQueue
0A56B                           
0A56B A9 A0                     	LDA #$A0
0A56D 85 4F                     	STA ObjectYVelocity + 8
0A56F 60                        	RTS
0A570                           
0A570                           FreeSubconsScene_Phase4_NextCorkFrame:
0A570 A4 8E                     	LDY FreeSubconsCorkCounter
0A572 B9 4C A5                  	LDA PullCorkFrameDurations - 1, Y
0A575 85 82                     	STA PlayerStateTimer
0A577                           
0A577                           FreeSubconsScene_Phase4_Exit:
0A577 60                        	RTS
0A578                           
0A578                           
0A578                           ; Free Subcons and jump repeatedly
0A578                           FreeSubconsScene_Phase5:
0A578 20 00 00                  	JSR FreeSubconsScene_Subcons
0A57B                           
0A57B 20 00 00                  	JSR ApplyCorkRoomGravity
0A57E                           
0A57E 20 8C 8D                  	JSR PlayerWalkJumpAnim
0A581                           
0A581 20 C1 8E                  	JSR ApplyPlayerPhysicsY
0A584                           
0A584 A5 46                     	LDA PlayerYVelocity
0A586 30 00                     	BMI FreeSubconsScene_Phase5_Exit
0A588                           
0A588                           	; jump when we're on the jar
0A588 A5 32                     	LDA PlayerYLo
0A58A C9 80                     	CMP #$80
0A58C 90 00                     	BCC FreeSubconsScene_Phase5_Exit
0A58E                           
0A58E 4C B6 8C                  	JMP PlayerStartJump
0A591                           
0A591                           FreeSubconsScene_Phase5_Exit:
0A591 60                        	RTS
0A592                           
0A592                           
0A592                           CorkRoomCharacterGravity:
0A592 04                        	.db $04 ; Mario
0A593 04                        	.db $04 ; Princess
0A594 04                        	.db $04 ; Toad
0A595 01                        	.db $01 ; Luigi
0A596                           
0A596                           
0A596                           ApplyCorkRoomGravity:
0A596 A4 8F                     	LDY CurrentCharacter
0A598 B9 92 A5                  	LDA CorkRoomCharacterGravity, Y
0A59B 18                        	CLC
0A59C 65 46                     	ADC PlayerYVelocity
0A59E 85 46                     	STA PlayerYVelocity
0A5A0 60                        	RTS
0A5A1                           
0A5A1                           
0A5A1                           ;
0A5A1                           ; Spits out Subcons and makes them flap their little wings
0A5A1                           ;
0A5A1                           FreeSubconsScene_Subcons:
0A5A1 A2 07                     	LDX #$07
0A5A3                           
0A5A3                           FreeSubconsScene_Subcons_Loop:
0A5A3 86 12                     	STX byte_RAM_12
0A5A5 B5 86                     	LDA ObjectTimer1, X
0A5A7 F0 00                     	BEQ FreeSubconsScene_Subcons_Movement
0A5A9                           
0A5A9 C9 01                     	CMP #$01
0A5AB D0 00                     	BNE FreeSubconsScene_Subcons_Next
0A5AD                           
0A5AD A9 08                     	LDA #SoundEffect1_ThrowItem
0A5AF 8D 02 06                  	STA SoundEffectQueue1
0A5B2 D0 00                     	BNE FreeSubconsScene_Subcons_Next
0A5B4                           
0A5B4                           FreeSubconsScene_Subcons_Movement:
0A5B4 20 00 00                  	JSR ApplyObjectMovement_Bank1
0A5B7                           
0A5B7 B5 47                     	LDA ObjectYVelocity, X
0A5B9 C9 08                     	CMP #$08
0A5BB 30 00                     	BMI FreeSubconsScene_Subcons_Render
0A5BD                           
0A5BD A9 00                     	LDA #$00
0A5BF 95 3D                     	STA ObjectXVelocity, X
0A5C1 A9 F9                     	LDA #$F9
0A5C3 95 47                     	STA ObjectYVelocity, X
0A5C5 BD 32 A4                  	LDA CorkRoomSpriteAttributes + 1, X
0A5C8 49 40                     	EOR #ObjAttrib_Palette0 | ObjAttrib_16x32
0A5CA 95 65                     	STA ObjectAttributes, X
0A5CC                           
0A5CC                           FreeSubconsScene_Subcons_Render:
0A5CC A5 10                     	LDA byte_RAM_10
0A5CE 0A                        	ASL A
0A5CF 29 02                     	AND #$02
0A5D1 85 0F                     	STA byte_RAM_F
0A5D3 20 00 00                  	JSR FreeSubconsScene_Render
0A5D6                           
0A5D6 F6 86                     	INC ObjectTimer1, X
0A5D8                           
0A5D8                           FreeSubconsScene_Subcons_Next:
0A5D8 D6 86                     	DEC ObjectTimer1, X
0A5DA CA                        	DEX
0A5DB 10 C6                     	BPL FreeSubconsScene_Subcons_Loop
0A5DD                           
0A5DD 60                        	RTS
0A5DE                           
0A5DE                           
0A5DE                           
0A5DE                           FreeSubconsScene_Cork:
0A5DE A9 04                     	LDA #$04
0A5E0 85 0F                     	STA byte_RAM_F
0A5E2 A2 08                     	LDX #$08
0A5E4 86 12                     	STX byte_RAM_12
0A5E6 20 00 00                  	JSR FreeSubconsScene_Render
0A5E9                           
0A5E9 A4 8E                     	LDY FreeSubconsCorkCounter
0A5EB D0 00                     	BNE FreeSubconsScene_Cork_Pull
0A5ED                           
0A5ED A5 3B                     	LDA ObjectYLo + 8
0A5EF C9 F0                     	CMP #$F0
0A5F1 B0 00                     	BCS FreeSubconsScene_Cork_Exit
0A5F3                           
0A5F3 4C 00 00                  	JMP ApplyObjectPhysicsY_Bank1
0A5F6                           
0A5F6                           FreeSubconsScene_Cork_Pull:
0A5F6 B9 50 A5                  	LDA PullCorkOffsets - 1, Y
0A5F9 18                        	CLC
0A5FA 65 32                     	ADC PlayerYLo
0A5FC 85 3B                     	STA ObjectYLo + 8
0A5FE                           
0A5FE                           FreeSubconsScene_Cork_Exit:
0A5FE 60                        	RTS
0A5FF                           
0A5FF                           
0A5FF                           CorkRoomSpriteTiles:
0A5FF E8                        	.db $E8 ; subcon left, wings up
0A600 EA                        	.db $EA ; subcon right, wings up
0A601 EC                        	.db $EC ; subcon left, wings down
0A602 EE                        	.db $EE ; subcon right, wings down
0A603 61                        	.db $61 ; cork left
0A604 63                        	.db $63 ; cork right
0A605                           
0A605                           CorkRoomSpriteOAMAddress:
0A605 30                        	.db $30 ; subcon 8
0A606 38                        	.db $38 ; subcon 7
0A607 40                        	.db $40 ; subcon 6
0A608 48                        	.db $48 ; subcon 5
0A609 50                        	.db $50 ; subcon 4
0A60A 58                        	.db $58 ; subcon 3
0A60B 60                        	.db $60 ; subcon 2
0A60C 68                        	.db $68 ; subcon 1
0A60D 00                        	.db $00 ; cork
0A60E                           
0A60E                           
0A60E                           FreeSubconsScene_Render:
0A60E BC 05 A6                  	LDY CorkRoomSpriteOAMAddress, X
0A611 B5 33                     	LDA ObjectYLo, X
0A613 99 00 02                  	STA SpriteDMAArea, Y
0A616 99 04 02                  	STA SpriteDMAArea + 4, Y
0A619 B5 29                     	LDA ObjectXLo, X
0A61B 99 03 02                  	STA SpriteDMAArea + 3, Y
0A61E 18                        	CLC
0A61F 69 08                     	ADC #$08
0A621 99 07 02                  	STA SpriteDMAArea + 7, Y
0A624 B5 65                     	LDA ObjectAttributes, X
0A626 99 02 02                  	STA SpriteDMAArea + 2, Y
0A629 99 06 02                  	STA SpriteDMAArea + 6, Y
0A62C A6 0F                     	LDX byte_RAM_F
0A62E 29 40                     	AND #ObjAttrib_16x32
0A630 D0 00                     	BNE FreeSubconsScene_Render_Flipped
0A632                           
0A632 BD FF A5                  	LDA CorkRoomSpriteTiles, X
0A635 99 01 02                  	STA SpriteDMAArea + 1, Y
0A638 BD 00 A6                  	LDA CorkRoomSpriteTiles + 1, X
0A63B D0 00                     	BNE FreeSubconsScene_Render_Exit
0A63D                           
0A63D                           FreeSubconsScene_Render_Flipped:
0A63D BD 00 A6                  	LDA CorkRoomSpriteTiles + 1, X
0A640 99 01 02                  	STA SpriteDMAArea + 1, Y
0A643 BD FF A5                  	LDA CorkRoomSpriteTiles, X
0A646                           
0A646                           FreeSubconsScene_Render_Exit:
0A646 99 05 02                  	STA SpriteDMAArea + 5, Y
0A649 A6 12                     	LDX byte_RAM_12
0A64B 60                        	RTS
0A64C                           
0A64C                           
0A64C                           EndingCelebrationCeilingTextAndPodium:
0A64C 20 00 20                  	.db $20, $00, $20
0A64F 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0A65F 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0A66F                           
0A66F 20 20 20                  	.db $20, $20, $20
0A672 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0A682 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0A692                           
0A692 20 40 20                  	.db $20, $40, $20
0A695 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0A6A5 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0A6B5                           
0A6B5 20 60 20                  	.db $20, $60, $20
0A6B8 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0A6C8 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0A6D8                           
0A6D8 20 88 01 5A               	.db $20, $88, $01, $5A
0A6DC 20 89 4E 9A               	.db $20, $89, $4E, $9A
0A6E0 20 97 01 5C               	.db $20, $97, $01, $5C
0A6E4 20 A8 C3 9B               	.db $20, $A8, $C3, $9B
0A6E8 20 B7 C3 9B               	.db $20, $B7, $C3, $9B
0A6EC 21 08 01 5B               	.db $21, $08, $01, $5B
0A6F0 21 09 4E 9A               	.db $21, $09, $4E, $9A
0A6F4 21 17 01 5D               	.db $21, $17, $01, $5D
0A6F8 20 AB 0B DC E8 E7 ED EB.. 	.db $20, $AB, $0B, $DC, $E8, $E7, $ED, $EB, $E2, $DB, $EE, $ED, $E8, $EB
0A706 20 E3 04 40 42 44 46      	.db $20, $E3, $04, $40, $42, $44, $46
0A70D 20 F9 04 40 42 44 46      	.db $20, $F9, $04, $40, $42, $44, $46
0A714 21 23 C9 48               	.db $21, $23, $C9, $48
0A718 21 24 C9 49               	.db $21, $24, $C9, $49
0A71C 21 25 C9 4A               	.db $21, $25, $C9, $4A
0A720 21 26 C9 4B               	.db $21, $26, $C9, $4B
0A724 22 43 04 4C 4D 4E 4F      	.db $22, $43, $04, $4C, $4D, $4E, $4F
0A72B 21 03 04 41 43 45 47      	.db $21, $03, $04, $41, $43, $45, $47
0A732 21 19 04 41 43 45 47      	.db $21, $19, $04, $41, $43, $45, $47
0A739 21 39 C9 48               	.db $21, $39, $C9, $48
0A73D 21 3A C9 49               	.db $21, $3A, $C9, $49
0A741 21 3B C9 4A               	.db $21, $3B, $C9, $4A
0A745 21 3C C9 4B               	.db $21, $3C, $C9, $4B
0A749 22 59 04 4C 4D 4E 4F      	.db $22, $59, $04, $4C, $4D, $4E, $4F
0A750 21 CA 4C 54               	.db $21, $CA, $4C, $54
0A754 21 EA 4C 55               	.db $21, $EA, $4C, $55
0A758 22 0B 0A 50 52 50 52 50.. 	.db $22, $0B, $0A, $50, $52, $50, $52, $50, $52, $50, $52, $50, $52
0A765 22 2B 0A 51 53 51 53 51.. 	.db $22, $2B, $0A, $51, $53, $51, $53, $51, $53, $51, $53, $51, $53
0A772 22 4C 02 3A 3B            	.db $22, $4C, $02, $3A, $3B
0A777 22 6C C5 3C               	.db $22, $6C, $C5, $3C
0A77B 22 6D C5 3D               	.db $22, $6D, $C5, $3D
0A77F 22 52 02 3A 3B            	.db $22, $52, $02, $3A, $3B
0A784 22 72 C5 3C               	.db $22, $72, $C5, $3C
0A788 22 73 C5 3D               	.db $22, $73, $C5, $3D
0A78C 00                        	.db $00
0A78D                           
0A78D                           EndingCelebrationFloorAndSubconParade:
0A78D 23 00 20                  	.db $23, $00, $20
0A790 00 02 08 0A 0C 0E 04 06.. 	.db $00, $02, $08, $0A, $0C, $0E, $04, $06, $08, $0A, $04, $06, $0C, $0E, $04, $06
0A7A0 08 0A 00 02 0C 0E 0C 0E.. 	.db $08, $0A, $00, $02, $0C, $0E, $0C, $0E, $00, $02, $04, $06, $04, $06, $08, $0A
0A7B0                           
0A7B0 23 20 20                  	.db $23, $20, $20
0A7B3 01 03 09 0B 0D 0F 05 07.. 	.db $01, $03, $09, $0B, $0D, $0F, $05, $07, $09, $0B, $05, $07, $0D, $0F, $05, $07
0A7C3 09 0B 01 03 0D 0F 0D 0F.. 	.db $09, $0B, $01, $03, $0D, $0F, $0D, $0F, $01, $03, $05, $07, $05, $07, $09, $0B
0A7D3                           
0A7D3 27 00 20                  	.db $27, $00, $20
0A7D6 74 76 74 76 74 76 74 76.. 	.db $74, $76, $74, $76, $74, $76, $74, $76, $74, $76, $74, $76, $74, $76, $74, $76
0A7E6 74 76 74 76 74 76 74 76.. 	.db $74, $76, $74, $76, $74, $76, $74, $76, $74, $76, $74, $76, $74, $76, $74, $76
0A7F6                           
0A7F6 27 20 20                  	.db $27, $20, $20
0A7F9 75 77 75 77 75 77 75 77.. 	.db $75, $77, $75, $77, $75, $77, $75, $77, $75, $77, $75, $77, $75, $77, $75, $77
0A809 75 77 75 77 75 77 75 77.. 	.db $75, $77, $75, $77, $75, $77, $75, $77, $75, $77, $75, $77, $75, $77, $75, $77
0A819                           
0A819 23 40 20                  	.db $23, $40, $20
0A81C 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0A82C 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0A83C                           
0A83C 23 60 20                  	.db $23, $60, $20
0A83F 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0A84F 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0A85F                           
0A85F 23 80 20                  	.db $23, $80, $20
0A862 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0A872 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0A882                           
0A882 23 A0 20                  	.db $23, $A0, $20
0A885 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0A895 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0A8A5                           
0A8A5 27 40 20                  	.db $27, $40, $20
0A8A8 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0A8B8 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0A8C8                           
0A8C8 27 60 20                  	.db $27, $60, $20
0A8CB 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0A8DB 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0A8EB                           
0A8EB 27 80 20                  	.db $27, $80, $20
0A8EE 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0A8FE 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0A90E                           
0A90E 27 A0 20                  	.db $27, $A0, $20
0A911 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0A921 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0A931                           
0A931 23 C0 48 AA               	.db $23, $C0, $48, $AA
0A935 23 C8 08 15 05 FF FF FF.. 	.db $23, $C8, $08, $15, $05, $FF, $FF, $FF, $FF, $15, $45
0A940                           
0A940 23 D0 20                  	.db $23, $D0, $20
0A943 31 00 FF FF FF FF 00 44.. 	.db $31, $00, $FF, $FF, $FF, $FF, $00, $44, $33, $00, $A6, $A5, $A5, $A6, $00, $44
0A953 F3 F0 59 AA AA 96 F0 74.. 	.db $F3, $F0, $59, $AA, $AA, $96, $F0, $74, $DD, $FF, $55, $AA, $AA, $95, $55, $55
0A963                           
0A963 23 F0 48 A5               	.db $23, $F0, $48, $A5
0A967 23 F8 48 0A               	.db $23, $F8, $48, $0A
0A96B 27 F0 48 A5               	.db $27, $F0, $48, $A5
0A96F 27 F8 48 0A               	.db $27, $F8, $48, $0A
0A973 00                        	.db $00
0A974                           
0A974                           EndingCelebrationSubconStandStill:
0A974 23 00 20                  	.db $23, $00, $20
0A977 70 72 70 72 70 72 70 72.. 	.db $70, $72, $70, $72, $70, $72, $70, $72, $70, $72, $70, $72, $70, $72, $70, $72
0A987 70 72 70 72 70 72 70 72.. 	.db $70, $72, $70, $72, $70, $72, $70, $72, $70, $72, $70, $72, $70, $72, $70, $72
0A997 23 20 20                  	.db $23, $20, $20
0A99A 71 73 71 73 71 73 71 73.. 	.db $71, $73, $71, $73, $71, $73, $71, $73, $71, $73, $71, $73, $71, $73, $71, $73
0A9AA 71 73 71 73 71 73 71 73.. 	.db $71, $73, $71, $73, $71, $73, $71, $73, $71, $73, $71, $73, $71, $73, $71, $73
0A9BA 00                        	.db $00
0A9BB                           
0A9BB                           EndingCelebrationUnusedText_THE_END:
0A9BB 21 AC 07                  	.db $21, $AC, $07
0A9BE ED E1 DE FB DE E7 DD      	.db $ED, $E1, $DE, $FB, $DE, $E7, $DD
0A9C5 00                        	.db $00
0A9C6                           
0A9C6                           EndingCelebrationPaletteFade1:
0A9C6 3F 00 20                  	.db $3F, $00, $20
0A9C9 01 30 21 0F               	.db $01, $30, $21, $0F
0A9CD 01 30 16 0F               	.db $01, $30, $16, $0F
0A9D1 01 28 18 0F               	.db $01, $28, $18, $0F
0A9D5 01 30 30 01               	.db $01, $30, $30, $01
0A9D9 01 27 16 0F               	.db $01, $27, $16, $0F
0A9DD 01 37 2A 0F               	.db $01, $37, $2A, $0F
0A9E1 01 27 30 0F               	.db $01, $27, $30, $0F
0A9E5 01 36 25 0F               	.db $01, $36, $25, $0F
0A9E9 00                        	.db $00
0A9EA                           
0A9EA                           EndingCelebrationPaletteFade2:
0A9EA 3F 00 20                  	.db $3F, $00, $20
0A9ED 0F 10 00 0F               	.db $0F, $10, $00, $0F
0A9F1 0F 10 00 0F               	.db $0F, $10, $00, $0F
0A9F5 0F 10 00 0F               	.db $0F, $10, $00, $0F
0A9F9 0F 10 00 0F               	.db $0F, $10, $00, $0F
0A9FD 0F 10 00 0F               	.db $0F, $10, $00, $0F
0AA01 0F 10 00 0F               	.db $0F, $10, $00, $0F
0AA05 0F 10 00 0F               	.db $0F, $10, $00, $0F
0AA09 0F 10 00 0F               	.db $0F, $10, $00, $0F
0AA0D 00                        	.db $00
0AA0E                           
0AA0E                           EndingCelebrationPaletteFade3:
0AA0E 3F 00 20                  	.db $3F, $00, $20
0AA11 0F 00 0F 0F               	.db $0F, $00, $0F, $0F
0AA15 0F 00 0F 0F               	.db $0F, $00, $0F, $0F
0AA19 0F 00 0F 0F               	.db $0F, $00, $0F, $0F
0AA1D 0F 00 0F 0F               	.db $0F, $00, $0F, $0F
0AA21 0F 00 0F 0F               	.db $0F, $00, $0F, $0F
0AA25 0F 00 0F 0F               	.db $0F, $00, $0F, $0F
0AA29 0F 00 0F 0F               	.db $0F, $00, $0F, $0F
0AA2D 0F 00 0F 0F               	.db $0F, $00, $0F, $0F
0AA31 00                        	.db $00
0AA32                           
0AA32                           EndingScreenUpdateIndex:
0AA32 04                        	.db EndingUpdateBuffer_PaletteFade1
0AA33 05                        	.db EndingUpdateBuffer_PaletteFade2 ; 1 ; @TODO This seems wrong, somehow
0AA34 06                        	.db EndingUpdateBuffer_PaletteFade3 ; 2
0AA35                           
0AA35                           ContributorSpriteZeroOAMData:
0AA35 8C FC 20 94               	.db $8C, $FC, $20, $94
0AA39                           
0AA39                           ContributorCharacterOAMData:
0AA39                           	; Mario
0AA39 4F 61 20 50               	.db $4F, $61, $20, $50
0AA3D 4F 63 20 58               	.db $4F, $63, $20, $58
0AA41 5F 65 20 50               	.db $5F, $65, $20, $50
0AA45 5F 67 20 58               	.db $5F, $67, $20, $58
0AA49                           	; Luigi
0AA49 4F 69 21 68               	.db $4F, $69, $21, $68
0AA4D 4F 6B 21 70               	.db $4F, $6B, $21, $70
0AA51 5F 6D 21 68               	.db $5F, $6D, $21, $68
0AA55 5F 6F 21 70               	.db $5F, $6F, $21, $70
0AA59                           	; Toad
0AA59 4F 83 22 88               	.db $4F, $83, $22, $88
0AA5D 4F 83 62 90               	.db $4F, $83, $62, $90
0AA61 5F 87 22 88               	.db $5F, $87, $22, $88
0AA65 5F 87 62 90               	.db $5F, $87, $62, $90
0AA69                           	; Princess
0AA69 4F 8B 23 A0               	.db $4F, $8B, $23, $A0
0AA6D 4F 8D 23 A8               	.db $4F, $8D, $23, $A8
0AA71 5F 8F 23 A0               	.db $5F, $8F, $23, $A0
0AA75 5F 91 23 A8               	.db $5F, $91, $23, $A8
0AA79                           
0AA79                           
0AA79                           ;
0AA79                           ; Shows the part of the ending where the Subcons carry Wart to an uncertain
0AA79                           ; fate while the characters stand and wave
0AA79                           ;
0AA79                           ContributorScene:
0AA79 20 1A A2                  	JSR WaitForNMI_Ending_TurnOffPPU
0AA7C                           
0AA7C A9 00                     	LDA #VMirror
0AA7E 20 00 00                  	JSR ChangeNametableMirroring
0AA81                           
0AA81 20 00 00                  	JSR ClearNametablesAndSprites
0AA84                           
0AA84 A9 40                     	LDA #Stack100_Menu
0AA86 8D 00 01                  	STA StackArea
0AA89 20 00 00                  	JSR EnableNMI_Bank1
0AA8C                           
0AA8C 20 22 A2                  	JSR WaitForNMI_Ending
0AA8F                           
0AA8F A9 02                     	LDA #EndingUpdateBuffer_CeilingTextAndPodium
0AA91 85 11                     	STA ScreenUpdateIndex
0AA93 20 22 A2                  	JSR WaitForNMI_Ending
0AA96                           
0AA96 A9 03                     	LDA #EndingUpdateBuffer_FloorAndSubconParade
0AA98 85 11                     	STA ScreenUpdateIndex
0AA9A 20 22 A2                  	JSR WaitForNMI_Ending
0AA9D                           
0AA9D 20 00 00                  	JSR Ending_GetContributor
0AAA0                           
0AAA0 20 22 A2                  	JSR WaitForNMI_Ending
0AAA3                           
0AAA3 A9 01                     	LDA #HMirror
0AAA5 20 00 00                  	JSR ChangeNametableMirroring
0AAA8                           
0AAA8 A0 03                     	LDY #$03
0AAAA                           ContributorScene_SpriteZeroLoop:
0AAAA B9 35 AA                  	LDA ContributorSpriteZeroOAMData, Y
0AAAD 99 00 02                  	STA SpriteDMAArea, Y
0AAB0 88                        	DEY
0AAB1 10 F7                     	BPL ContributorScene_SpriteZeroLoop
0AAB3                           
0AAB3 A9 00                     	LDA #$00
0AAB5 85 F3                     	STA byte_RAM_F3
0AAB7 85 E6                     	STA byte_RAM_E6
0AAB9                           
0AAB9 A0 3F                     	LDY #$3F
0AABB                           ContributorScene_CharacterLoop:
0AABB B9 39 AA                  	LDA ContributorCharacterOAMData, Y
0AABE 99 10 02                  	STA SpriteDMAArea + $10, Y
0AAC1 88                        	DEY
0AAC2 10 F7                     	BPL ContributorScene_CharacterLoop
0AAC4                           
0AAC4 A9 FF                     	LDA #$FF
0AAC6 85 14                     	STA PlayerXHi
0AAC8 A9 A0                     	LDA #$A0
0AACA 85 28                     	STA PlayerXLo
0AACC A9 08                     	LDA #$08
0AACE 85 3C                     	STA PlayerXVelocity
0AAD0 A9 01                     	LDA #$01
0AAD2 85 EC                     	STA IsHorizontalLevel
0AAD4                           
0AAD4                           loc_BANK1_AAD4:
0AAD4 20 1E A2                  	JSR WaitForNMI_Ending_TurnOnPPU
0AAD7                           
0AAD7 E6 F3                     	INC byte_RAM_F3
0AAD9 E6 10                     	INC byte_RAM_10
0AADB 20 00 00                  	JSR ContributorTicker
0AADE                           
0AADE 20 00 00                  	JSR loc_BANK1_ABCC
0AAE1                           
0AAE1 A5 E6                     	LDA byte_RAM_E6
0AAE3 C9 03                     	CMP #$03
0AAE5 B0 00                     	BCS loc_BANK1_AB20
0AAE7                           
0AAE7                           loc_BANK1_AAE7:
0AAE7 2C 02 20                  	BIT PPUSTATUS
0AAEA 70 FB                     	BVS loc_BANK1_AAE7
0AAEC                           
0AAEC                           loc_BANK1_AAEC:
0AAEC 2C 02 20                  	BIT PPUSTATUS
0AAEF 50 FB                     	BVC loc_BANK1_AAEC
0AAF1                           
0AAF1 A2 02                     	LDX #$02
0AAF3                           
0AAF3                           loc_BANK1_AAF3:
0AAF3 A0 00                     	LDY #$00
0AAF5                           
0AAF5                           loc_BANK1_AAF5:
0AAF5 A5 00                     	LDA byte_RAM_0
0AAF7 A5 00                     	LDA byte_RAM_0
0AAF9 88                        	DEY
0AAFA D0 F9                     	BNE loc_BANK1_AAF5
0AAFC                           
0AAFC CA                        	DEX
0AAFD D0 F4                     	BNE loc_BANK1_AAF3
0AAFF                           
0AAFF AD 02 20                  	LDA PPUSTATUS
0AB02 A5 F2                     	LDA byte_RAM_F2
0AB04 8D 05 20                  	STA PPUSCROLL
0AB07 A9 00                     	LDA #$00
0AB09 8D 05 20                  	STA PPUSCROLL
0AB0C A5 F3                     	LDA byte_RAM_F3
0AB0E C9 0A                     	CMP #$0A
0AB10 90 00                     	BCC loc_BANK1_AB1D
0AB12                           
0AB12 A9 00                     	LDA #$00
0AB14 85 F3                     	STA byte_RAM_F3
0AB16 A5 F2                     	LDA byte_RAM_F2
0AB18 38                        	SEC
0AB19 E9 30                     	SBC #$30
0AB1B 85 F2                     	STA byte_RAM_F2
0AB1D                           
0AB1D                           loc_BANK1_AB1D:
0AB1D 4C D4 AA                  	JMP loc_BANK1_AAD4
0AB20                           
0AB20                           ; ---------------------------------------------------------------------------
0AB20                           
0AB20                           loc_BANK1_AB20:
0AB20 A9 00                     	LDA #VMirror
0AB22 20 00 00                  	JSR ChangeNametableMirroring
0AB25                           
0AB25 A9 01                     	LDA #$01
0AB27 85 F2                     	STA byte_RAM_F2
0AB29 4A                        	LSR A
0AB2A 85 F3                     	STA byte_RAM_F3
0AB2C 85 07                     	STA byte_RAM_7
0AB2E A9 07                     	LDA #EndingUpdateBuffer_SubconStandStill
0AB30 85 11                     	STA ScreenUpdateIndex
0AB32                           
0AB32                           loc_BANK1_AB32:
0AB32 20 22 A2                  	JSR WaitForNMI_Ending
0AB35                           
0AB35 20 00 00                  	JSR EnableNMI_Bank1
0AB38                           
0AB38 E6 F3                     	INC byte_RAM_F3
0AB3A 20 00 00                  	JSR ContributorTicker
0AB3D                           
0AB3D 20 00 00                  	JSR ContributorCharacterAnimation
0AB40                           
0AB40                           loc_BANK1_AB40:
0AB40 2C 02 20                  	BIT PPUSTATUS
0AB43 70 FB                     	BVS loc_BANK1_AB40
0AB45                           
0AB45                           loc_BANK1_AB45:
0AB45 2C 02 20                  	BIT PPUSTATUS
0AB48 50 FB                     	BVC loc_BANK1_AB45
0AB4A                           
0AB4A A2 02                     	LDX #$02
0AB4C                           
0AB4C                           loc_BANK1_AB4C:
0AB4C A0 00                     	LDY #$00
0AB4E                           
0AB4E                           loc_BANK1_AB4E:
0AB4E A5 00                     	LDA byte_RAM_0
0AB50 A5 00                     	LDA byte_RAM_0
0AB52 88                        	DEY
0AB53 D0 F9                     	BNE loc_BANK1_AB4E
0AB55                           
0AB55 CA                        	DEX
0AB56 D0 F4                     	BNE loc_BANK1_AB4C
0AB58                           
0AB58 A9 B0                     	LDA #$B0
0AB5A 05 F2                     	ORA byte_RAM_F2
0AB5C 85 FF                     	STA PPUCtrlMirror
0AB5E 8D 00 20                  	STA PPUCTRL
0AB61 AD 02 20                  	LDA PPUSTATUS
0AB64 A9 00                     	LDA #$00
0AB66 8D 05 20                  	STA PPUSCROLL
0AB69 A9 00                     	LDA #$00
0AB6B 8D 05 20                  	STA PPUSCROLL
0AB6E A5 F3                     	LDA byte_RAM_F3
0AB70 C9 14                     	CMP #$14
0AB72 90 00                     	BCC loc_BANK1_AB80
0AB74                           
0AB74 A9 00                     	LDA #$00
0AB76 85 F3                     	STA byte_RAM_F3
0AB78 A5 F2                     	LDA byte_RAM_F2
0AB7A 49 01                     	EOR #$01
0AB7C 85 F2                     	STA byte_RAM_F2
0AB7E E6 07                     	INC byte_RAM_7
0AB80                           
0AB80                           loc_BANK1_AB80:
0AB80 A5 07                     	LDA byte_RAM_7
0AB82 C9 29                     	CMP #$29
0AB84 90 AC                     	BCC loc_BANK1_AB32
0AB86                           
0AB86 20 00 00                  	JSR EndingSceneTransition
0AB89                           
0AB89 A5 E6                     	LDA byte_RAM_E6
0AB8B C9 04                     	CMP #$04
0AB8D 90 A3                     	BCC loc_BANK1_AB32
0AB8F                           
0AB8F 60                        	RTS
0AB90                           
0AB90                           
0AB90                           ;
0AB90                           ; Advances to the next scene and does the palette transition
0AB90                           ;
0AB90                           EndingSceneTransition:
0AB90 A5 10                     	LDA byte_RAM_10
0AB92 29 03                     	AND #$03
0AB94 D0 00                     	BNE EndingSceneTransition_Exit
0AB96                           
0AB96 E6 E5                     	INC byte_RAM_E5
0AB98 A4 E5                     	LDY byte_RAM_E5
0AB9A C0 03                     	CPY #$03
0AB9C B0 00                     	BCS EndingSceneTransition_Next
0AB9E                           
0AB9E B9 32 AA                  	LDA EndingScreenUpdateIndex, Y
0ABA1 85 11                     	STA ScreenUpdateIndex
0ABA3 60                        	RTS
0ABA4                           
0ABA4                           EndingSceneTransition_Next:
0ABA4 E6 E6                     	INC byte_RAM_E6
0ABA6                           
0ABA6                           EndingSceneTransition_Exit:
0ABA6 60                        	RTS
0ABA7                           
0ABA7                           
0ABA7                           ; ---------------------------------------------------------------------------
0ABA7                           
0ABA7                           loc_BANK1_ABA7:
0ABA7 A5 10                     	LDA byte_RAM_10
0ABA9 29 03                     	AND #$03
0ABAB D0 F9                     	BNE EndingSceneTransition_Exit
0ABAD                           
0ABAD C6 E5                     	DEC byte_RAM_E5
0ABAF A4 E5                     	LDY byte_RAM_E5
0ABB1 B9 32 AA                  	LDA EndingScreenUpdateIndex, Y
0ABB4 85 11                     	STA ScreenUpdateIndex
0ABB6 98                        	TYA
0ABB7 D0 ED                     	BNE EndingSceneTransition_Exit
0ABB9                           
0ABB9 E6 E6                     	INC byte_RAM_E6
0ABBB 60                        	RTS
0ABBC                           
0ABBC                           
0ABBC                           EnableNMI_Bank1:
0ABBC A9 B0                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIEnabled
0ABBE 85 FF                     	STA PPUCtrlMirror
0ABC0 8D 00 20                  	STA PPUCTRL
0ABC3 60                        	RTS
0ABC4                           
0ABC4                           
0ABC4                           DisableNMI_Bank1:
0ABC4 A9 30                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIDisabled
0ABC6 8D 00 20                  	STA PPUCTRL
0ABC9 85 FF                     	STA PPUCtrlMirror
0ABCB 60                        	RTS
0ABCC                           
0ABCC                           
0ABCC                           
0ABCC                           loc_BANK1_ABCC:
0ABCC 20 00 00                  	JSR ContributorCharacterAnimation
0ABCF                           
0ABCF A5 E6                     	LDA byte_RAM_E6
0ABD1 20 00 00                  	JSR JumpToTableAfterJump
0ABD4                           
0ABD4 A7 AB                     	.dw loc_BANK1_ABA7
0ABD6 00 00                     	.dw loc_BANK1_AC0A
0ABD8 00 00                     	.dw loc_BANK1_AC87
0ABDA                           
0ABDA                           
0ABDA                           byte_BANK1_ABDA:
0ABDA C0                        	.db $C0
0ABDB C8                        	.db $C8
0ABDC B8                        	.db $B8
0ABDD B8                        	.db $B8
0ABDE C8                        	.db $C8
0ABDF C0                        	.db $C0
0ABE0                           
0ABE0                           byte_BANK1_ABE0:
0ABE0 C0                        	.db $C0
0ABE1 08                        	.db $08
0ABE2 E0                        	.db $E0
0ABE3 F0                        	.db $F0
0ABE4 D0                        	.db $D0
0ABE5 E8                        	.db $E8
0ABE6                           
0ABE6                           EndingWartTiles:
0ABE6 11                        	.db $11
0ABE7 13                        	.db $13
0ABE8 19                        	.db $19
0ABE9 1B                        	.db $1B
0ABEA 21                        	.db $21
0ABEB 23                        	.db $23
0ABEC 15                        	.db $15
0ABED 17                        	.db $17
0ABEE 1D                        	.db $1D
0ABEF 1F                        	.db $1F
0ABF0 25                        	.db $25
0ABF1 27                        	.db $27
0ABF2                           
0ABF2                           byte_BANK1_ABF2:
0ABF2 00                        	.db $00
0ABF3 08                        	.db $08
0ABF4 10                        	.db $10
0ABF5 18                        	.db $18
0ABF6 20                        	.db $20
0ABF7 28                        	.db $28
0ABF8 00                        	.db $00
0ABF9 08                        	.db $08
0ABFA 10                        	.db $10
0ABFB 18                        	.db $18
0ABFC 20                        	.db $20
0ABFD 28                        	.db $28
0ABFE                           
0ABFE                           byte_BANK1_ABFE:
0ABFE 00                        	.db $00
0ABFF 00                        	.db $00
0AC00 00                        	.db $00
0AC01 00                        	.db $00
0AC02 00                        	.db $00
0AC03 00                        	.db $00
0AC04 10                        	.db $10
0AC05 10                        	.db $10
0AC06 10                        	.db $10
0AC07 10                        	.db $10
0AC08 10                        	.db $10
0AC09 10                        	.db $10
0AC0A                           
0AC0A                           
0AC0A                           ; ---------------------------------------------------------------------------
0AC0A                           
0AC0A                           loc_BANK1_AC0A:
0AC0A 20 6D 8A                  	JSR ApplyPlayerPhysicsX
0AC0D                           
0AC0D A5 14                     	LDA PlayerXHi
0AC0F C9 01                     	CMP #$01
0AC11 D0 00                     	BNE loc_BANK1_AC37
0AC13                           
0AC13 A5 28                     	LDA PlayerXLo
0AC15 C9 20                     	CMP #$20
0AC17 90 00                     	BCC loc_BANK1_AC37
0AC19                           
0AC19                           	INC_abs byte_RAM_E6
0AC19                           	IFDEF COMPATIBILITY
0AC19 EE                        		.db $ee
0AC1A E6 00                     		.dw byte_RAM_E6
0AC1C                           	ELSE
0AC1C                           		INC byte_RAM_E6
0AC1C                           		NOP_compat
0AC1C                           	ENDIF
0AC1C                           
0AC1C A9 A0                     	LDA #$A0
0AC1E 85 10                     	STA byte_RAM_10
0AC20 A2 05                     	LDX #$05
0AC22                           
0AC22                           loc_BANK1_AC22:
0AC22 A9 20                     	LDA #$20
0AC24 95 29                     	STA ObjectXLo, X
0AC26 A9 A8                     	LDA #$A8
0AC28                           
0AC28                           loc_BANK1_AC28:
0AC28 95 33                     	STA ObjectYLo, X
0AC2A BD DA AB                  	LDA byte_BANK1_ABDA, X
0AC2D 95 3D                     	STA ObjectXVelocity, X
0AC2F BD E0 AB                  	LDA byte_BANK1_ABE0, X
0AC32 95 47                     	STA ObjectYVelocity, X
0AC34 CA                        	DEX
0AC35 10 EB                     	BPL loc_BANK1_AC22
0AC37                           
0AC37                           loc_BANK1_AC37:
0AC37 A0 A0                     	LDY #$A0
0AC39 A5 10                     	LDA byte_RAM_10
0AC3B 29 38                     	AND #$38
0AC3D D0 00                     	BNE loc_BANK1_AC40
0AC3F                           
0AC3F 88                        	DEY
0AC40                           
0AC40                           loc_BANK1_AC40:
0AC40 29 08                     	AND #$08
0AC42 D0 00                     	BNE loc_BANK1_AC45
0AC44                           
0AC44 88                        	DEY
0AC45                           
0AC45                           loc_BANK1_AC45:
0AC45 84 32                     	STY PlayerYLo
0AC47 A2 0B                     	LDX #$0B
0AC49 A0 70                     	LDY #$70
0AC4B                           
0AC4B                           loc_BANK1_AC4B:
0AC4B A5 32                     	LDA PlayerYLo
0AC4D 18                        	CLC
0AC4E 7D FE AB                  	ADC byte_BANK1_ABFE, X
0AC51 99 00 02                  	STA SpriteDMAArea, Y
0AC54 BD E6 AB                  	LDA EndingWartTiles, X
0AC57 99 01 02                  	STA SpriteDMAArea + 1, Y
0AC5A A9 01                     	LDA #$01
0AC5C 99 02 02                  	STA SpriteDMAArea + 2, Y
0AC5F A5 28                     	LDA PlayerXLo
0AC61 18                        	CLC
0AC62 7D F2 AB                  	ADC byte_BANK1_ABF2, X
0AC65 99 03 02                  	STA SpriteDMAArea + 3, Y
0AC68 A5 14                     	LDA PlayerXHi
0AC6A                           
0AC6A                           loc_BANK1_AC6A:
0AC6A 69 00                     	ADC #$00
0AC6C F0 00                     	BEQ loc_BANK1_AC73
0AC6E                           
0AC6E A9 F0                     	LDA #$F0
0AC70 99 00 02                  	STA SpriteDMAArea, Y
0AC73                           
0AC73                           loc_BANK1_AC73:
0AC73 C8                        	INY
0AC74 C8                        	INY
0AC75 C8                        	INY
0AC76 C8                        	INY
0AC77 CA                        	DEX
0AC78 10 D1                     	BPL loc_BANK1_AC4B
0AC7A                           
0AC7A 60                        	RTS
0AC7B                           
0AC7B                           
0AC7B                           ZonkTiles:
0AC7B 39                        	.db $39
0AC7C 35                        	.db $35
0AC7D 37                        	.db $37
0AC7E 35                        	.db $35
0AC7F 37                        	.db $37
0AC80 39                        	.db $39
0AC81                           
0AC81                           byte_BANK1_AC81:
0AC81 00                        	.db $00
0AC82 06                        	.db $06
0AC83 03                        	.db $03
0AC84 09                        	.db $09
0AC85 0F                        	.db $0F
0AC86 0C                        	.db $0C
0AC87                           
0AC87                           
0AC87                           loc_BANK1_AC87:
0AC87 A5 10                     	LDA byte_RAM_10
0AC89 D0 00                     	BNE loc_BANK1_ACA4
0AC8B                           
0AC8B                           loc_BANK1_AC8B:
0AC8B 8D 0E 04                  	STA ObjectXSubpixel + 6
0AC8E 8D 18 04                  	STA ObjectYSubpixel + 6
0AC91 85 2F                     	STA ObjectXLo + 6
0AC93 85 10                     	STA byte_RAM_10
0AC95 A9 6F                     	LDA #$6F
0AC97 85 39                     	STA ObjectYLo + 6
0AC99 A9 E6                     	LDA #$E6
0AC9B 85 43                     	STA ObjectXVelocity + 6
0AC9D A9 DA                     	LDA #$DA
0AC9F 85 4D                     	STA ObjectYVelocity + 6
0ACA1                           
0ACA1                           	INC_abs byte_RAM_E6
0ACA1                           	IFDEF COMPATIBILITY
0ACA1 EE                        		.db $ee
0ACA2 E6 00                     		.dw byte_RAM_E6
0ACA4                           	ELSE
0ACA4                           		INC byte_RAM_E6
0ACA4                           		NOP_compat
0ACA4                           	ENDIF
0ACA4                           
0ACA4                           
0ACA4                           loc_BANK1_ACA4:
0ACA4 A2 05                     	LDX #$05
0ACA6                           
0ACA6                           loc_BANK1_ACA6:
0ACA6 86 12                     	STX byte_RAM_12
0ACA8 20 00 00                  	JSR ApplyObjectPhysicsX_Bank1
0ACAB                           
0ACAB 20 00 00                  	JSR ApplyObjectPhysicsY_Bank1
0ACAE                           
0ACAE A0 F0                     	LDY #$F0
0ACB0 A5 10                     	LDA byte_RAM_10
0ACB2 F0 00                     	BEQ loc_BANK1_ACC1
0ACB4                           
0ACB4 29 0F                     	AND #$0F
0ACB6 DD 81 AC                  	CMP byte_BANK1_AC81, X
0ACB9 D0 00                     	BNE loc_BANK1_ACC3
0ACBB                           
0ACBB A9 20                     	LDA #$20
0ACBD 95 29                     	STA ObjectXLo, X
0ACBF A0 A8                     	LDY #$A8
0ACC1                           
0ACC1                           loc_BANK1_ACC1:
0ACC1 94 33                     	STY ObjectYLo, X
0ACC3                           
0ACC3                           loc_BANK1_ACC3:
0ACC3 8A                        	TXA
0ACC4 0A                        	ASL A
0ACC5 0A                        	ASL A
0ACC6 A8                        	TAY
0ACC7 B5 29                     	LDA ObjectXLo, X
0ACC9 C9 80                     	CMP #$80
0ACCB B0 00                     	BCS loc_BANK1_ACD1
0ACCD                           
0ACCD A9 F0                     	LDA #$F0
0ACCF D0 00                     	BNE loc_BANK1_ACD6
0ACD1                           
0ACD1                           loc_BANK1_ACD1:
0ACD1 99 73 02                  	STA SpriteDMAArea + $73, Y
0ACD4 B5 33                     	LDA ObjectYLo, X
0ACD6                           
0ACD6                           loc_BANK1_ACD6:
0ACD6 99 70 02                  	STA SpriteDMAArea + $70, Y
0ACD9 BD 7B AC                  	LDA ZonkTiles, X
0ACDC 99 71 02                  	STA SpriteDMAArea + $71, Y
0ACDF A9 00                     	LDA #$00
0ACE1 99 72 02                  	STA SpriteDMAArea + $72, Y
0ACE4 CA                        	DEX
0ACE5 10 BF                     	BPL loc_BANK1_ACA6
0ACE7                           
0ACE7 60                        	RTS
0ACE8                           
0ACE8                           
0ACE8                           ContributorAnimationTiles:
0ACE8                           ContributorAnimationTiles_Mario:
0ACE8 61                        	.db $61
0ACE9 61                        	.db $61
0ACEA 63                        	.db $63
0ACEB 93                        	.db $93
0ACEC 65                        	.db $65
0ACED 65                        	.db $65
0ACEE 67                        	.db $67
0ACEF 67                        	.db $67
0ACF0                           ContributorAnimationTiles_Luigi:
0ACF0 69                        	.db $69
0ACF1 69                        	.db $69
0ACF2 95                        	.db $95
0ACF3 6B                        	.db $6B
0ACF4 6D                        	.db $6D
0ACF5 6D                        	.db $6D
0ACF6 97                        	.db $97
0ACF7 6F                        	.db $6F
0ACF8                           ContributorAnimationTiles_Toad:
0ACF8 83                        	.db $83
0ACF9 85                        	.db $85
0ACFA 83                        	.db $83
0ACFB 85                        	.db $85
0ACFC 87                        	.db $87
0ACFD 89                        	.db $89
0ACFE 87                        	.db $87
0ACFF 89                        	.db $89
0AD00                           ContributorAnimationTiles_Princess:
0AD00 8B                        	.db $8B
0AD01 8B                        	.db $8B
0AD02 99                        	.db $99
0AD03 8D                        	.db $8D
0AD04 8F                        	.db $8F
0AD05 8F                        	.db $8F
0AD06 91                        	.db $91
0AD07 91                        	.db $91
0AD08                           
0AD08                           ContributorAnimationTilesOffset:
0AD08 06                        	.db (ContributorAnimationTiles_Mario - ContributorAnimationTiles + 6)
0AD09 0E                        	.db (ContributorAnimationTiles_Luigi - ContributorAnimationTiles + 6)
0AD0A 16                        	.db (ContributorAnimationTiles_Toad - ContributorAnimationTiles + 6)
0AD0B 1E                        	.db (ContributorAnimationTiles_Princess - ContributorAnimationTiles + 6)
0AD0C                           
0AD0C                           
0AD0C                           ContributorCharacterAnimation:
0AD0C E6 9B                     	INC PlayerWalkFrame
0AD0E A9 03                     	LDA #$03
0AD10 85 00                     	STA byte_RAM_0
0AD12 A5 9B                     	LDA PlayerWalkFrame
0AD14 85 01                     	STA byte_RAM_1
0AD16 A0 3C                     	LDY #$3C
0AD18                           
0AD18                           ContributorCharacterAnimation_OuterLoop:
0AD18 A6 00                     	LDX byte_RAM_0
0AD1A BD 08 AD                  	LDA ContributorAnimationTilesOffset, X
0AD1D AA                        	TAX
0AD1E E6 01                     	INC byte_RAM_1
0AD20 A5 01                     	LDA byte_RAM_1
0AD22 29 10                     	AND #$10
0AD24 F0 00                     	BEQ ContributorCharacterAnimation_Render
0AD26                           
0AD26 E8                        	INX
0AD27                           
0AD27                           ContributorCharacterAnimation_Render:
0AD27 A9 03                     	LDA #$03
0AD29 85 02                     	STA byte_RAM_2
0AD2B                           ContributorCharacterAnimation_InnerLoop:
0AD2B BD E8 AC                  	LDA ContributorAnimationTiles, X
0AD2E 99 11 02                  	STA SpriteDMAArea + $11, Y
0AD31 CA                        	DEX
0AD32 CA                        	DEX
0AD33 88                        	DEY
0AD34 88                        	DEY
0AD35 88                        	DEY
0AD36 88                        	DEY
0AD37 C6 02                     	DEC byte_RAM_2
0AD39 10 F0                     	BPL ContributorCharacterAnimation_InnerLoop
0AD3B                           
0AD3B C6 00                     	DEC byte_RAM_0
0AD3D 10 D9                     	BPL ContributorCharacterAnimation_OuterLoop
0AD3F                           
0AD3F 60                        	RTS
0AD40                           
0AD40                           
0AD40                           ;
0AD40                           ; Calculates the list of top contributors
0AD40                           ;
0AD40                           Ending_GetContributor:
0AD40 A9 00                     	LDA #$00
0AD42 8D 31 06                  	STA MaxLevelsCompleted
0AD45                           
0AD45 A0 03                     	LDY #$03
0AD47                           Ending_GetContributor_Loop:
0AD47 B9 2D 06                  	LDA CharacterLevelsCompleted, Y
0AD4A CD 31 06                  	CMP MaxLevelsCompleted
0AD4D 90 00                     	BCC Ending_GetContributor_Next
0AD4F                           
0AD4F B9 2D 06                  	LDA CharacterLevelsCompleted, Y
0AD52 8D 31 06                  	STA MaxLevelsCompleted
0AD55                           
0AD55                           Ending_GetContributor_Next:
0AD55 88                        	DEY
0AD56 10 EF                     	BPL Ending_GetContributor_Loop
0AD58                           
0AD58 A2 00                     	LDX #$00
0AD5A A0 03                     	LDY #$03
0AD5C                           Ending_GetContributor_Loop2:
0AD5C B9 2D 06                  	LDA CharacterLevelsCompleted, Y
0AD5F CD 31 06                  	CMP MaxLevelsCompleted
0AD62 D0 00                     	BNE Ending_GetContributor_Next2
0AD64                           
0AD64 98                        	TYA
0AD65 9D BE 05                  	STA Contributors, X
0AD68 E8                        	INX
0AD69                           
0AD69                           Ending_GetContributor_Next2:
0AD69 88                        	DEY
0AD6A 10 F0                     	BPL Ending_GetContributor_Loop2
0AD6C                           
0AD6C CA                        	DEX
0AD6D 8E C2 05                  	STX NumContributors
0AD70 A2 00                     	LDX #$00
0AD72 A9 21                     	LDA #$21
0AD74 9D 01 03                  	STA PPUBuffer_301, X
0AD77 E8                        	INX
0AD78 A9 2A                     	LDA #$2A
0AD7A 9D 01 03                  	STA PPUBuffer_301, X
0AD7D E8                        	INX
0AD7E A9 0C                     	LDA #$0C
0AD80 9D 01 03                  	STA PPUBuffer_301, X
0AD83 E8                        	INX
0AD84 A0 00                     	LDY #$00
0AD86 B9 2D 06                  	LDA CharacterLevelsCompleted, Y
0AD89 20 00 00                  	JSR sub_BANK1_AE43
0AD8C                           
0AD8C 98                        	TYA
0AD8D 9D 01 03                  	STA PPUBuffer_301, X
0AD90 E8                        	INX
0AD91 A5 01                     	LDA byte_RAM_1
0AD93 9D 01 03                  	STA PPUBuffer_301, X
0AD96 E8                        	INX
0AD97 A9 FB                     	LDA #$FB
0AD99 9D 01 03                  	STA PPUBuffer_301, X
0AD9C E8                        	INX
0AD9D A0 03                     	LDY #$03
0AD9F B9 2D 06                  	LDA CharacterLevelsCompleted, Y
0ADA2 20 00 00                  	JSR sub_BANK1_AE43
0ADA5                           
0ADA5 98                        	TYA
0ADA6 9D 01 03                  	STA PPUBuffer_301, X
0ADA9 E8                        	INX
0ADAA A5 01                     	LDA byte_RAM_1
0ADAC 9D 01 03                  	STA PPUBuffer_301, X
0ADAF E8                        	INX
0ADB0                           
0ADB0 A9 FB                     	LDA #$FB
0ADB2 9D 01 03                  	STA PPUBuffer_301, X
0ADB5 E8                        	INX
0ADB6 9D 01 03                  	STA PPUBuffer_301, X
0ADB9 E8                        	INX
0ADBA A0 02                     	LDY #$02
0ADBC B9 2D 06                  	LDA CharacterLevelsCompleted, Y
0ADBF 20 00 00                  	JSR sub_BANK1_AE43
0ADC2                           
0ADC2 98                        	TYA
0ADC3 9D 01 03                  	STA PPUBuffer_301, X
0ADC6 E8                        	INX
0ADC7 A5 01                     	LDA byte_RAM_1
0ADC9 9D 01 03                  	STA PPUBuffer_301, X
0ADCC E8                        	INX
0ADCD A9 FB                     	LDA #$FB
0ADCF 9D 01 03                  	STA PPUBuffer_301, X
0ADD2 E8                        	INX
0ADD3 A0 01                     	LDY #$01
0ADD5 B9 2D 06                  	LDA CharacterLevelsCompleted, Y
0ADD8 20 00 00                  	JSR sub_BANK1_AE43
0ADDB                           
0ADDB 98                        	TYA
0ADDC 9D 01 03                  	STA PPUBuffer_301, X
0ADDF E8                        	INX
0ADE0 A5 01                     	LDA byte_RAM_1
0ADE2 9D 01 03                  	STA PPUBuffer_301, X
0ADE5 E8                        	INX
0ADE6 A9 00                     	LDA #$00
0ADE8 9D 01 03                  	STA PPUBuffer_301, X
0ADEB A9 3C                     	LDA #$3C
0ADED 8D C4 05                  	STA ContributorTimer
0ADF0 60                        	RTS
0ADF1                           
0ADF1                           
0ADF1                           ; =============== S U B R O U T I N E =======================================
0ADF1                           
0ADF1                           ContributorTicker:
0ADF1 CE C4 05                  	DEC ContributorTimer
0ADF4 10 00                     	BPL ContributorTicker_Exit
0ADF6                           
0ADF6 A9 3C                     	LDA #$3C
0ADF8 8D C4 05                  	STA ContributorTimer
0ADFB AC C3 05                  	LDY ContributorIndex
0ADFE B9 BE 05                  	LDA Contributors, Y
0AE01 18                        	CLC
0AE02 69 09                     	ADC #$09
0AE04                           
0AE04                           	STA_abs ScreenUpdateIndex
0AE04                           	IFDEF COMPATIBILITY
0AE04 8D                        		.db $8d
0AE05 11 00                     		.dw ScreenUpdateIndex
0AE07                           	ELSE
0AE07                           		STA ScreenUpdateIndex
0AE07                           		NOP_compat
0AE07                           	ENDIF
0AE07                           
0AE07 CE C3 05                  	DEC ContributorIndex
0AE0A 10 00                     	BPL ContributorTicker_Exit
0AE0C                           
0AE0C AD C2 05                  	LDA NumContributors
0AE0F 8D C3 05                  	STA ContributorIndex
0AE12                           
0AE12                           ContributorTicker_Exit:
0AE12 60                        	RTS
0AE13                           
0AE13                           
0AE13                           EndingCelebrationText_MARIO:
0AE13 20 ED 08 E6 DA EB E2 E8.. 	.db $20, $ED, $08, $E6, $DA, $EB, $E2, $E8, $FB, $FB, $FB
0AE1E 00                        	.db $00
0AE1F                           
0AE1F                           EndingCelebrationText_PRINCESS:
0AE1F 20 ED 08 E9 EB E2 E7 DC.. 	.db $20, $ED, $08, $E9, $EB, $E2, $E7, $DC, $DE, $EC, $EC
0AE2A 00                        	.db $00
0AE2B                           
0AE2B                           EndingCelebrationText_TOAD:
0AE2B 20 ED 08 ED E8 DA DD FB.. 	.db $20, $ED, $08, $ED, $E8, $DA, $DD, $FB, $FB, $FB, $FB
0AE36 00                        	.db $00
0AE37                           
0AE37                           EndingCelebrationText_LUIGI:
0AE37 20 ED 08 E5 EE E2 E0 E2.. 	.db $20, $ED, $08, $E5, $EE, $E2, $E0, $E2, $FB, $FB, $FB
0AE42 00                        	.db $00
0AE43                           
0AE43                           
0AE43                           ; =============== S U B R O U T I N E =======================================
0AE43                           
0AE43                           sub_BANK1_AE43:
0AE43 A0 D0                     	LDY #$D0
0AE45                           
0AE45                           loc_BANK1_AE45:
0AE45 C9 0A                     	CMP #$0A
0AE47 90 00                     	BCC loc_BANK1_AE4F
0AE49                           
0AE49 E9 0A                     	SBC #$0A
0AE4B                           
0AE4B                           loc_BANK1_AE4B:
0AE4B C8                        	INY
0AE4C 4C 45 AE                  	JMP loc_BANK1_AE45
0AE4F                           
0AE4F                           ; ---------------------------------------------------------------------------
0AE4F                           
0AE4F                           loc_BANK1_AE4F:
0AE4F 09 D0                     	ORA #$D0
0AE51 C0 D0                     	CPY #$D0
0AE53 D0 00                     	BNE loc_BANK1_AE57
0AE55                           
0AE55 A0 FB                     	LDY #$FB
0AE57                           
0AE57                           loc_BANK1_AE57:
0AE57 85 01                     	STA byte_RAM_1
0AE59 60                        	RTS
0AE5A                           
0AE5A                           ; End of function sub_BANK1_AE43
0AE5A                           
0AE5A                           ; ---------------------------------------------------------------------------
0AE5A                           
0AE5A                           ; Unused space in the original ($AE5A - $B8FF)
0AE5A                           unusedSpace $B900, $FF
0AE5A                           	IFDEF PRESERVE_UNUSED_SPACE
0AE5A FF FF FF FF FF FF FF FF.. 		.pad $B900, $FF
0B900                           	ENDIF
0B900                           
0B900                           MysteryCharacterData3900:
0B900 FB                        	.db $FB ; @TODO ??? Not sure what this is
0B901 FF                        	.db $FF
0B902 00                        	.db $00
0B903 08                        	.db $08
0B904 0C                        	.db $0C
0B905 18                        	.db $18
0B906 1A                        	.db $1A
0B907                           
0B907                           
0B907                           ;
0B907                           ; NOTE: A copy of this subroutine also exists in Bank 2
0B907                           ;
0B907                           ; Applies object physics for the y-axis
0B907                           ;
0B907                           ; Input
0B907                           ;   X = enemy index
0B907                           ;
0B907                           ApplyObjectPhysicsY_Bank1:
0B907 8A                        	TXA
0B908 18                        	CLC
0B909 69 0A                     	ADC #$0A
0B90B AA                        	TAX
0B90C                           
0B90C                           ;
0B90C                           ; NOTE: A copy of this subroutine also exists in Bank 2
0B90C                           ;
0B90C                           ; Applies object physics for the x-axis
0B90C                           ;
0B90C                           ; Input
0B90C                           ;   X = enemy index, physics direction
0B90C                           ;       ($00-$09 for horizontal, $0A-$13 for vertical)
0B90C                           ;
0B90C                           ; Output
0B90C                           ;   X = RAM_12
0B90C                           ;
0B90C                           ApplyObjectPhysicsX_Bank1:
0B90C                           	; Add acceleration to velocity
0B90C B5 3D                     	LDA ObjectXVelocity, X
0B90E 18                        	CLC
0B90F 7D CC 04                  	ADC ObjectXAcceleration, X
0B912                           
0B912 48                        	PHA
0B913                           	; Lower nybble of velocity is for subpixel position
0B913 0A                        	ASL A
0B914 0A                        	ASL A
0B915 0A                        	ASL A
0B916 0A                        	ASL A
0B917 85 01                     	STA byte_RAM_1
0B919                           
0B919                           	; Upper nybble of velocity is for lo position
0B919 68                        	PLA
0B91A 4A                        	LSR A
0B91B 4A                        	LSR A
0B91C 4A                        	LSR A
0B91D 4A                        	LSR A
0B91E                           
0B91E C9 08                     	CMP #$08
0B920 90 00                     	BCC ApplyObjectPhysics_StoreVelocityLo_Bank1
0B922                           
0B922                           	; Left/up: Carry negative bits through upper nybble
0B922 09 F0                     	ORA #$F0
0B924                           
0B924                           ApplyObjectPhysics_StoreVelocityLo_Bank1:
0B924 85 00                     	STA byte_RAM_0
0B926                           
0B926 A0 00                     	LDY #$00
0B928 0A                        	ASL A
0B929 90 00                     	BCC ApplyObjectPhysics_StoreDirection_Bank1
0B92B                           
0B92B                           	; Left/up
0B92B 88                        	DEY
0B92C                           
0B92C                           ApplyObjectPhysics_StoreDirection_Bank1:
0B92C 84 02                     	STY byte_RAM_2
0B92E                           
0B92E                           	; Add lower nybble of velocity for subpixel position
0B92E BD 08 04                  	LDA ObjectXSubpixel, X
0B931 18                        	CLC
0B932 65 01                     	ADC byte_RAM_1
0B934 9D 08 04                  	STA ObjectXSubpixel, X
0B937                           
0B937                           	; Add upper nybble of velocity for lo position
0B937 B5 29                     	LDA ObjectXLo, X
0B939 65 00                     	ADC byte_RAM_0
0B93B 95 29                     	STA ObjectXLo, X
0B93D                           
0B93D                           ApplyObjectPhysics_PositionHi_Bank1:
0B93D 46 01                     	LSR byte_RAM_1
0B93F B5 15                     	LDA ObjectXHi, X
0B941 65 02                     	ADC byte_RAM_2
0B943 95 15                     	STA ObjectXHi, X
0B945                           
0B945                           ApplyObjectPhysics_Exit_Bank1:
0B945 A6 12                     	LDX byte_RAM_12
0B947 60                        	RTS
0B948                           
0B948                           
0B948                           
0B948                           ;
0B948                           ; Applies object physics
0B948                           ;
0B948                           ; Input
0B948                           ;   X = enemy index
0B948                           ;
0B948                           ApplyObjectMovement_Bank1:
0B948 BD 4A 04                  	LDA ObjectShakeTimer, X
0B94B D0 00                     	BNE ApplyObjectMovement_Vertical_Bank1
0B94D                           
0B94D 20 0C B9                  	JSR ApplyObjectPhysicsX_Bank1
0B950                           
0B950                           ApplyObjectMovement_Vertical_Bank1:
0B950 20 07 B9                  	JSR ApplyObjectPhysicsY_Bank1
0B953                           
0B953 B5 47                     	LDA ObjectYVelocity, X
0B955 30 00                     	BMI ApplyObjectMovement_Gravity_Bank1
0B957                           
0B957                           	; Check terminal velocity
0B957 C9 3E                     	CMP #$3E
0B959 B0 00                     	BCS ApplyObjectMovement_Exit_Bank1
0B95B                           
0B95B                           ApplyObjectMovement_Gravity_Bank1:
0B95B F6 47                     	INC ObjectYVelocity, X
0B95D F6 47                     	INC ObjectYVelocity, X
0B95F                           
0B95F                           ApplyObjectMovement_Exit_Bank1:
0B95F 60                        	RTS
0B960                           
0B960                           
0B960                           DoorAnimation_Locked:
0B960 A9 01                     	LDA #$01
0B962 D0 00                     	BNE DoorAnimation
0B964                           
0B964                           DoorAnimation_Unlocked:
0B964 A9 00                     	LDA #$00
0B966                           
0B966                           DoorAnimation:
0B966 48                        	PHA
0B967 A0 08                     	LDY #$08
0B969                           
0B969                           DoorAnimation_Loop:
0B969                           	; skip if inactive
0B969 B9 51 00                  	LDA EnemyState, Y
0B96C F0 00                     	BEQ DoorAnimation_LoopNext
0B96E                           
0B96E                           	; skip enemies that aren't the door
0B96E B9 90 00                  	LDA ObjectType, Y
0B971 C9 3C                     	CMP #Enemy_SubspaceDoor
0B973 D0 00                     	BNE DoorAnimation_LoopNext
0B975                           
0B975 A9 05                     	LDA #EnemyState_PuffOfSmoke
0B977 99 51 00                  	STA EnemyState, Y
0B97A A9 20                     	LDA #$20
0B97C 99 86 00                  	STA ObjectTimer1, Y
0B97F                           
0B97F                           DoorAnimation_LoopNext:
0B97F 88                        	DEY
0B980 10 E7                     	BPL DoorAnimation_Loop
0B982                           
0B982 20 00 00                  	JSR CreateEnemy_TryAllSlots_Bank1
0B985                           
0B985 30 00                     	BMI DoorAnimation_Exit
0B987                           
0B987 A9 00                     	LDA #$00
0B989 8D BD 04                  	STA DoorAnimationTimer
0B98C 8D B3 04                  	STA SubspaceDoorTimer
0B98F A6 00                     	LDX byte_RAM_0
0B991 68                        	PLA
0B992 9D 77 04                  	STA EnemyArray_477, X
0B995 A9 3C                     	LDA #Enemy_SubspaceDoor
0B997 95 90                     	STA ObjectType, X
0B999 A5 28                     	LDA PlayerXLo
0B99B 69 08                     	ADC #$08
0B99D 29 F0                     	AND #$F0
0B99F 95 29                     	STA ObjectXLo, X
0B9A1 A5 14                     	LDA PlayerXHi
0B9A3 69 00                     	ADC #$00
0B9A5 95 15                     	STA ObjectXHi, X
0B9A7 A5 32                     	LDA PlayerYLo
0B9A9 95 33                     	STA ObjectYLo, X
0B9AB A5 1E                     	LDA PlayerYHi
0B9AD 95 1F                     	STA ObjectYHi, X
0B9AF A9 41                     	LDA #ObjAttrib_Palette1 | ObjAttrib_16x32
0B9B1 95 65                     	STA ObjectAttributes, X
0B9B3 A6 12                     	LDX byte_RAM_12
0B9B5 60                        	RTS
0B9B6                           
0B9B6                           DoorAnimation_Exit:
0B9B6 68                        	PLA
0B9B7 60                        	RTS
0B9B8                           
0B9B8                           
0B9B8                           CreateStarman:
0B9B8 20 00 00                  	JSR CreateEnemy_Bank1
0B9BB                           
0B9BB 30 00                     	BMI CreateStarman_Exit
0B9BD                           
0B9BD A6 00                     	LDX byte_RAM_0
0B9BF A9 45                     	LDA #Enemy_Starman
0B9C1 95 90                     	STA ObjectType, X
0B9C3 AD C0 04                  	LDA ScreenBoundaryLeftLo
0B9C6 69 D0                     	ADC #$D0
0B9C8 95 29                     	STA ObjectXLo, X
0B9CA AD BE 04                  	LDA ScreenBoundaryLeftHi
0B9CD 69 00                     	ADC #$00
0B9CF 95 15                     	STA ObjectXHi, X
0B9D1 A5 CB                     	LDA ScreenYLo
0B9D3 69 E0                     	ADC #$E0
0B9D5 95 33                     	STA ObjectYLo, X
0B9D7 A5 CA                     	LDA ScreenYHi
0B9D9 69 00                     	ADC #$00
0B9DB 95 1F                     	STA ObjectYHi, X
0B9DD 20 00 00                  	JSR loc_BANK1_BA17
0B9E0                           
0B9E0 A6 12                     	LDX byte_RAM_12
0B9E2                           
0B9E2                           CreateStarman_Exit:
0B9E2 60                        	RTS
0B9E3                           
0B9E3                           
0B9E3                           ; =============== S U B R O U T I N E =======================================
0B9E3                           
0B9E3                           EnemyInit_Basic_Bank1:
0B9E3 A9 00                     	LDA #$00
0B9E5 95 86                     	STA ObjectTimer1, X
0B9E7 A9 00                     	LDA #$00
0B9E9 95 79                     	STA EnemyVariable, X
0B9EB                           
0B9EB                           loc_BANK1_B9EB:
0B9EB A9 00                     	LDA #$00
0B9ED 95 B1                     	STA EnemyArray_B1, X
0B9EF 9D 2F 04                  	STA ObjectProjectileTimer, X
0B9F2 95 A8                     	STA ObjectBeingCarriedTimer, X
0B9F4 95 9F                     	STA ObjectAnimationTimer, X
0B9F6 9D 4A 04                  	STA ObjectShakeTimer, X
0B9F9 95 5B                     	STA EnemyCollision, X
0B9FB 9D 38 04                  	STA ObjectStunTimer, X
0B9FE 9D 53 04                  	STA ObjectTimer2, X
0BA01 9D CC 04                  	STA ObjectXAcceleration, X
0BA04 9D D6 04                  	STA ObjectYAcceleration, X
0BA07 9D 5C 04                  	STA ObjectFlashTimer, X
0BA0A 9D 77 04                  	STA EnemyArray_477, X
0BA0D 9D 80 04                  	STA EnemyArray_480, X
0BA10 9D 65 04                  	STA EnemyHP, X
0BA13 95 47                     	STA ObjectYVelocity, X
0BA15 95 3D                     	STA ObjectXVelocity, X
0BA17                           
0BA17                           ; look up object attributes
0BA17                           loc_BANK1_BA17:
0BA17 B4 90                     	LDY ObjectType, X
0BA19 B9 00 00                  	LDA ObjectAttributeTable, Y
0BA1C 29 7F                     	AND #ObjAttrib_Palette | ObjAttrib_Horizontal | ObjAttrib_FrontFacing | ObjAttrib_Mirrored | ObjAttrib_BehindBackground | ObjAttrib_16x32
0BA1E 95 65                     	STA ObjectAttributes, X
0BA20 B9 00 00                  	LDA EnemyArray_46E_Data, Y
0BA23 9D 6E 04                  	STA EnemyArray_46E, X
0BA26 B9 00 00                  	LDA ObjectHitbox_Data, Y
0BA29 9D 89 04                  	STA ObjectHitbox, X
0BA2C B9 00 00                  	LDA EnemyArray_492_Data, Y
0BA2F 9D 92 04                  	STA EnemyArray_492, X
0BA32 60                        	RTS
0BA33                           
0BA33                           ; End of function EnemyInit_Basic_Bank1
0BA33                           
0BA33                           
0BA33                           ;
0BA33                           ; Turns the key into a puff of smoke
0BA33                           ;
0BA33                           ; Input
0BA33                           ;   X = enemy slot
0BA33                           ; Output
0BA33                           ;   X = value of byte_RAM_12
0BA33                           ;
0BA33                           TurnKeyIntoPuffOfSmoke:
0BA33 B5 65                     	LDA ObjectAttributes, X
0BA35 29 FC                     	AND #%11111100
0BA37 09 01                     	ORA #ObjAttrib_Palette1
0BA39 95 65                     	STA ObjectAttributes, X
0BA3B A9 05                     	LDA #EnemyState_PuffOfSmoke
0BA3D 95 51                     	STA EnemyState, X
0BA3F 95 9F                     	STA ObjectAnimationTimer, X
0BA41 A9 1F                     	LDA #$1F
0BA43 95 86                     	STA ObjectTimer1, X
0BA45 A6 12                     	LDX byte_RAM_12
0BA47 60                        	RTS
0BA48                           
0BA48                           
0BA48                           ;
0BA48                           ; NOTE: This is a copy of the "UnlinkEnemyFromRawData" routine in Bank 2, but
0BA48                           ; it is used here for spawning the door animation and Starman objects.
0BA48                           ;
0BA48                           ; Spawned enemies are linked to an offset in the raw enemy data, which prevents
0BA48                           ; from being respawned until they are killed or moved offscreen.
0BA48                           ;
0BA48                           ; This subroutine ensures that the enemy in a particular slot is not linked to
0BA48                           ; the raw enemy data
0BA48                           ;
0BA48                           ; Input
0BA48                           ;   X = enemy slot
0BA48                           ;
0BA48                           UnlinkEnemyFromRawData_Bank1:
0BA48 A9 FF                     	LDA #$FF
0BA4A 9D 41 04                  	STA EnemyRawDataOffset, X
0BA4D 60                        	RTS
0BA4E                           
0BA4E                           
0BA4E                           ;
0BA4E                           ; Updates the area page and tile placement offset
0BA4E                           ;
0BA4E                           ; Input
0BA4E                           ;   byte_RAM_E8 = area page
0BA4E                           ;   byte_RAM_E5 = tile placement offset shift
0BA4E                           ;   byte_RAM_E6 = previous tile placement offset
0BA4E                           ; Output
0BA4E                           ;   RAM_1 = low byte of decoded level data RAM
0BA4E                           ;   RAM_2 = low byte of decoded level data RAM
0BA4E                           ;   byte_RAM_E7 = target tile placement offset
0BA4E                           ;
0BA4E                           SetTileOffsetAndAreaPageAddr_Bank1:
0BA4E A6 E8                     	LDX byte_RAM_E8
0BA50 20 00 00                  	JSR SetAreaPageAddr_Bank1
0BA53                           
0BA53 A5 E6                     	LDA byte_RAM_E6
0BA55 18                        	CLC
0BA56 65 E5                     	ADC byte_RAM_E5
0BA58 85 E7                     	STA byte_RAM_E7
0BA5A 60                        	RTS
0BA5B                           
0BA5B                           
0BA5B                           DecodedLevelPageStartLo_Bank1:
0BA5B 00                        	.db <DecodedLevelData
0BA5C F0                        	.db <(DecodedLevelData+$00F0)
0BA5D E0                        	.db <(DecodedLevelData+$01E0)
0BA5E D0                        	.db <(DecodedLevelData+$02D0)
0BA5F C0                        	.db <(DecodedLevelData+$03C0)
0BA60 B0                        	.db <(DecodedLevelData+$04B0)
0BA61 A0                        	.db <(DecodedLevelData+$05A0)
0BA62 90                        	.db <(DecodedLevelData+$0690)
0BA63 80                        	.db <(DecodedLevelData+$0780)
0BA64 70                        	.db <(DecodedLevelData+$0870)
0BA65 00                        	.db <(SubAreaTileLayout)
0BA66                           
0BA66                           DecodedLevelPageStartHi_Bank1:
0BA66 60                        	.db >DecodedLevelData
0BA67 60                        	.db >(DecodedLevelData+$00F0)
0BA68 61                        	.db >(DecodedLevelData+$01E0)
0BA69 62                        	.db >(DecodedLevelData+$02D0)
0BA6A 63                        	.db >(DecodedLevelData+$03C0)
0BA6B 64                        	.db >(DecodedLevelData+$04B0)
0BA6C 65                        	.db >(DecodedLevelData+$05A0)
0BA6D 66                        	.db >(DecodedLevelData+$0690)
0BA6E 67                        	.db >(DecodedLevelData+$0780)
0BA6F 68                        	.db >(DecodedLevelData+$0870)
0BA70 07                        	.db >(SubAreaTileLayout)
0BA71                           
0BA71                           
0BA71                           ;
0BA71                           ; Updates the area page that we're reading tiles from
0BA71                           ;
0BA71                           ; Input
0BA71                           ;   X = area page
0BA71                           ; Output
0BA71                           ;   byte_RAM_1 = low byte of decoded level data RAM
0BA71                           ;   byte_RAM_2 = low byte of decoded level data RAM
0BA71                           ;
0BA71                           SetAreaPageAddr_Bank1:
0BA71 BD 5B BA                  	LDA DecodedLevelPageStartLo_Bank1, X
0BA74 85 01                     	STA byte_RAM_1
0BA76 BD 66 BA                  	LDA DecodedLevelPageStartHi_Bank1, X
0BA79 85 02                     	STA byte_RAM_2
0BA7B 60                        	RTS
0BA7C                           
0BA7C                           
0BA7C                           ;
0BA7C                           ; Checks whether the player is on a quicksand tile
0BA7C                           ;
0BA7C                           ; Input
0BA7C                           ;   byte_RAM_0 = tile ID
0BA7C                           ; Output
0BA7C                           ;   A = Whether the player is sinking in quicksand
0BA7C                           ;   X = PlayerInAir flag
0BA7C                           ;
0BA7C                           IFNDEF ENABLE_TILE_ATTRIBUTES_TABLE
0BA7C                           PlayerTileCollision_CheckQuicksand:
0BA7C A9 01                     	LDA #$01
0BA7E A4 00                     	LDY byte_RAM_0
0BA80 C0 8A                     	CPY #BackgroundTile_QuicksandSlow
0BA82 F0 00                     	BEQ PlayerTileCollision_QuicksandSlow
0BA84                           
0BA84 C0 8B                     	CPY #BackgroundTile_QuicksandFast
0BA86 F0 00                     	BEQ PlayerTileCollision_QuicksandFast
0BA88                           
0BA88                           ELSE
0BA88                           PlayerTileCollision_CheckQuicksand:
0BA88                           	LDY byte_RAM_0
0BA88                           	LDA InteractiveTileCollisionTable, Y
0BA88                           	AND #%00001100
0BA88                           	CMP #%00001000
0BA88                           
0BA88                           	BNE PlayerTileCollision_NotQuicksand
0BA88                           
0BA88                           	TYA
0BA88                           	AND %00000001
0BA88                           	BNE PlayerTileCollision_QuicksandFast
0BA88                           
0BA88                           	LDA #$01
0BA88                           	BNE PlayerTileCollision_QuicksandSlow
0BA88                           ENDIF
0BA88                           
0BA88                           PlayerTileCollision_NotQuicksand:
0BA88 A9 00                     	LDA #$00
0BA8A 60                        	RTS
0BA8B                           
0BA8B                           PlayerTileCollision_QuicksandFast:
0BA8B A9 08                     	LDA #$08
0BA8D                           
0BA8D                           PlayerTileCollision_QuicksandSlow:
0BA8D 85 46                     	STA PlayerYVelocity
0BA8F AD DF 04                  	LDA QuicksandDepth
0BA92 D0 00                     	BNE loc_BANK1_BA9B
0BA94                           
0BA94 A5 32                     	LDA PlayerYLo
0BA96 29 10                     	AND #$10
0BA98 8D EB 04                  	STA byte_RAM_4EB
0BA9B                           
0BA9B                           loc_BANK1_BA9B:
0BA9B                           	; check if player is too far under
0BA9B A5 32                     	LDA PlayerYLo
0BA9D 29 0F                     	AND #$0F
0BA9F A8                        	TAY
0BAA0 AD EB 04                  	LDA byte_RAM_4EB
0BAA3 45 32                     	EOR PlayerYLo
0BAA5 29 10                     	AND #$10
0BAA7 F0 00                     	BEQ loc_BANK1_BAB6
0BAA9                           
0BAA9                           	; kill if >= this check
0BAA9 C0 0C                     	CPY #$0C
0BAAB 90 00                     	BCC loc_BANK1_BAB4
0BAAD                           
0BAAD A9 00                     	LDA #$00
0BAAF 85 82                     	STA PlayerStateTimer
0BAB1 20 00 00                  	JSR KillPlayer
0BAB4                           
0BAB4                           loc_BANK1_BAB4:
0BAB4 A0 04                     	LDY #$04
0BAB6                           
0BAB6                           loc_BANK1_BAB6:
0BAB6 C0 04                     	CPY #$04
0BAB8 B0 00                     	BCS loc_BANK1_BABC
0BABA                           
0BABA A0 01                     	LDY #$01
0BABC                           
0BABC                           loc_BANK1_BABC:
0BABC 98                        	TYA
0BABD CA                        	DEX
0BABE 60                        	RTS
0BABF                           
0BABF                           
0BABF                           PlayerTileCollision_HurtPlayer:
0BABF A5 85                     	LDA DamageInvulnTime
0BAC1 D0 00                     	BNE locret_BANK1_BAEC
0BAC3                           
0BAC3 AD C2 04                  	LDA PlayerHealth
0BAC6 38                        	SEC
0BAC7 E9 10                     	SBC #$10
0BAC9 90 00                     	BCC loc_BANK1_BAED
0BACB                           
0BACB 8D C2 04                  	STA PlayerHealth
0BACE A9 7F                     	LDA #$7F
0BAD0 85 85                     	STA DamageInvulnTime
0BAD2 AD 28 04                  	LDA PlayerScreenX
0BAD5 38                        	SEC
0BAD6 ED 29 04                  	SBC SpriteTempScreenX
0BAD9 0A                        	ASL A
0BADA 0A                        	ASL A
0BADB 85 3C                     	STA PlayerXVelocity
0BADD A9 C0                     	LDA #$C0
0BADF A4 46                     	LDY PlayerYVelocity
0BAE1 10 00                     	BPL loc_BANK1_BAE5
0BAE3                           
0BAE3 A9 00                     	LDA #$00
0BAE5                           
0BAE5                           loc_BANK1_BAE5:
0BAE5 85 46                     	STA PlayerYVelocity
0BAE7 A9 04                     	LDA #DPCM_PlayerHurt
0BAE9 8D 01 06                  	STA DPCMQueue
0BAEC                           
0BAEC                           locret_BANK1_BAEC:
0BAEC 60                        	RTS
0BAED                           
0BAED                           ; ---------------------------------------------------------------------------
0BAED                           
0BAED                           loc_BANK1_BAED:
0BAED A9 C0                     	LDA #$C0
0BAEF 85 46                     	STA PlayerYVelocity
0BAF1 A9 20                     	LDA #$20
0BAF3 85 82                     	STA PlayerStateTimer
0BAF5 A4 12                     	LDY byte_RAM_12
0BAF7 30 00                     	BMI loc_BANK1_BAFD
0BAF9                           
0BAF9 4A                        	LSR A
0BAFA 99 38 04                  	STA ObjectStunTimer, Y
0BAFD                           
0BAFD                           loc_BANK1_BAFD:
0BAFD 4C 00 00                  	JMP KillPlayer
0BB00                           
0BB00                           
0BB00                           ; ---------------------------------------------------------------------------
0BB00                           
0BB00                           _code_3B00:
0BB00 BC 41 04                  	LDY EnemyRawDataOffset, X
0BB03 30 00                     	BMI loc_BANK1_BB0B
0BB05                           
0BB05 B1 CC                     	LDA (RawEnemyData), Y
0BB07 29 7F                     	AND #$7F
0BB09 91 CC                     	STA (RawEnemyData), Y
0BB0B                           
0BB0B                           loc_BANK1_BB0B:
0BB0B A9 00                     	LDA #$00
0BB0D 95 51                     	STA EnemyState, X
0BB0F 60                        	RTS
0BB10                           
0BB10                           
0BB10                           ;
0BB10                           ; NOTE: This is a copy of the "CreateEnemy" routine in Bank 2, but it is used
0BB10                           ; here for spawning the door animation and Starman objects.
0BB10                           ;
0BB10                           ; Creates a generic red Shyguy enemy and
0BB10                           ; does some basic initialization for it.
0BB10                           ;
0BB10                           ; CreateEnemy_TryAllSlots checks all 9 object slots
0BB10                           ; CreateEnemy only checks the first 6 object slots
0BB10                           ;
0BB10                           ; Output
0BB10                           ;   N = enabled if no empty slot was found
0BB10                           ;   Y = $FF if there no empty slot was found
0BB10                           ;   byte_RAM_0 = slot used
0BB10                           ;
0BB10                           CreateEnemy_TryAllSlots_Bank1:
0BB10 A0 08                     	LDY #$08
0BB12 D0 00                     	BNE CreateEnemy_Bank1_FindSlot
0BB14                           
0BB14                           CreateEnemy_Bank1:
0BB14 A0 05                     	LDY #$05
0BB16                           
0BB16                           CreateEnemy_Bank1_FindSlot:
0BB16 B9 51 00                  	LDA EnemyState, Y
0BB19 F0 00                     	BEQ CreateEnemy_Bank1_FoundSlot
0BB1B                           
0BB1B 88                        	DEY
0BB1C 10 F8                     	BPL CreateEnemy_Bank1_FindSlot
0BB1E                           
0BB1E 60                        	RTS
0BB1F                           
0BB1F                           CreateEnemy_Bank1_FoundSlot:
0BB1F A9 01                     	LDA #EnemyState_Alive
0BB21 99 51 00                  	STA EnemyState, Y
0BB24 4A                        	LSR A
0BB25 99 9B 04                  	STA EnemyArray_SpawnsDoor, Y
0BB28 A9 01                     	LDA #Enemy_ShyguyRed
0BB2A 99 90 00                  	STA ObjectType, Y
0BB2D B5 29                     	LDA ObjectXLo, X
0BB2F 69 05                     	ADC #$05
0BB31 99 29 00                  	STA ObjectXLo, Y
0BB34 B5 15                     	LDA ObjectXHi, X
0BB36 69 00                     	ADC #$00
0BB38 99 15 00                  	STA ObjectXHi, Y
0BB3B B5 33                     	LDA ObjectYLo, X
0BB3D 99 33 00                  	STA ObjectYLo, Y
0BB40 B5 1F                     	LDA ObjectYHi, X
0BB42 99 1F 00                  	STA ObjectYHi, Y
0BB45 84 00                     	STY byte_RAM_0
0BB47 98                        	TYA
0BB48 AA                        	TAX
0BB49                           
0BB49 20 E3 B9                  	JSR EnemyInit_Basic_Bank1
0BB4C 20 48 BA                  	JSR UnlinkEnemyFromRawData_Bank1
0BB4F                           
0BB4F A6 12                     	LDX byte_RAM_12
0BB51 60                        	RTS
0BB52                           
0BB52                           
0BB52                           IFDEF CONTROLLER_2_DEBUG
0BB52                           ChangeCharacterOffsets:
0BB52 00                        	.db $00 ; unused
0BB53 03                        	.db $03 ; Mario to right
0BB54 01                        	.db $01 ; Mario to left
0BB55 00                        	.db $00 ; Princess to right
0BB56 02                        	.db $02 ; Princess to left
0BB57 01                        	.db $01 ; Toad to right
0BB58 03                        	.db $03 ; Toad to left
0BB59 02                        	.db $02 ; Luigi to right
0BB5A 00                        	.db $00 ; Luigi to left
0BB5B                           
0BB5B                           CheckPlayer2Joypad:
0BB5B AD 80 7E                  	LDA ChangeCharacterTimer
0BB5E F0 00                     	BEQ CheckPlayer2Joypad_Go
0BB60                           
0BB60 CE 80 7E                  	DEC ChangeCharacterTimer
0BB63                           
0BB63                           CheckPlayer2Joypad_No:
0BB63 60                        	RTS
0BB64                           
0BB64                           CheckPlayer2Joypad_Go:
0BB64 A5 50                     	LDA PlayerState
0BB66 C9 07                     	CMP #PlayerState_Dying
0BB68 F0 F9                     	BEQ CheckPlayer2Joypad_No
0BB6A                           
0BB6A                           CheckPlayer2Joypad_CheckSelect:
0BB6A A5 F6                     	LDA Player2JoypadPress
0BB6C 29 20                     	AND #ControllerInput_Select
0BB6E F0 00                     	BEQ CheckPlayer2Joypad_CheckUp
0BB70                           
0BB70 AD E7 04                  	LDA CurrentLevel_Init
0BB73 8D 31 05                  	STA CurrentLevel
0BB76 AD E8 04                  	LDA CurrentLevelArea_Init
0BB79 8D 32 05                  	STA CurrentLevelArea
0BB7C AD E9 04                  	LDA CurrentLevelEntryPage_Init
0BB7F 8D 33 05                  	STA CurrentLevelEntryPage
0BB82 AD EA 04                  	LDA TransitionType_Init
0BB85 8D 34 05                  	STA TransitionType
0BB88                           
0BB88 AD E1 04                  	LDA PlayerXLo_Init
0BB8B 85 28                     	STA PlayerXLo
0BB8D AD E2 04                  	LDA PlayerYLo_Init
0BB90 85 32                     	STA PlayerYLo
0BB92 AD E3 04                  	LDA PlayerScreenX_Init
0BB95 8D 28 04                  	STA PlayerScreenX
0BB98 AD E4 04                  	LDA PlayerScreenYLo_Init
0BB9B 8D 2B 04                  	STA PlayerScreenYLo
0BB9E AD E5 04                  	LDA PlayerYVelocity_Init
0BBA1 85 46                     	STA PlayerYVelocity
0BBA3 AD E6 04                  	LDA PlayerState_Init
0BBA6 85 50                     	STA PlayerState
0BBA8                           
0BBA8 A9 00                     	LDA #$00
0BBAA 85 3C                     	STA PlayerXVelocity
0BBAC                           
0BBAC 20 00 00                  	JSR DoAreaReset
0BBAF                           
0BBAF 4C 00 00                  	JMP StartLevel
0BBB2                           
0BBB2                           CheckPlayer2Joypad_CheckUp:
0BBB2 A5 F6                     	LDA Player2JoypadPress
0BBB4 29 08                     	AND #ControllerInput_Up
0BBB6 F0 00                     	BEQ CheckPlayer2Joypad_CheckDown
0BBB8                           
0BBB8 AC C3 04                  	LDY PlayerMaxHealth
0BBBB AD C2 04                  	LDA PlayerHealth
0BBBE D9 00 00                  	CMP PlayerHealthValueByHeartCount, Y
0BBC1 10 00                     	BPL CheckPlayer2Joypad_CheckDown
0BBC3                           
0BBC3 A9 04                     	LDA #SoundEffect1_CherryGet
0BBC5 8D 02 06                  	STA SoundEffectQueue1
0BBC8                           
0BBC8 AC C3 04                  	LDY PlayerMaxHealth
0BBCB AD C2 04                  	LDA PlayerHealth
0BBCE 18                        	CLC
0BBCF 69 10                     	ADC #$10
0BBD1 8D C2 04                  	STA PlayerHealth
0BBD4                           
0BBD4                           CheckPlayer2Joypad_CheckDown:
0BBD4 A5 F6                     	LDA Player2JoypadPress
0BBD6 29 04                     	AND #ControllerInput_Down
0BBD8 F0 00                     	BEQ CheckPlayer2Joypad_CheckStart
0BBDA                           
0BBDA AD C2 04                  	LDA PlayerHealth
0BBDD 29 F0                     	AND #$F0
0BBDF F0 00                     	BEQ CheckPlayer2Joypad_CheckStart
0BBE1                           
0BBE1 A9 04                     	LDA #DPCM_PlayerHurt
0BBE3 8D 01 06                  	STA DPCMQueue
0BBE6                           
0BBE6 AD C2 04                  	LDA PlayerHealth
0BBE9 38                        	SEC
0BBEA E9 10                     	SBC #$10
0BBEC 8D C2 04                  	STA PlayerHealth
0BBEF                           
0BBEF                           CheckPlayer2Joypad_CheckStart:
0BBEF A5 F6                     	LDA Player2JoypadPress
0BBF1 29 10                     	AND #ControllerInput_Start
0BBF3 F0 00                     	BEQ CheckPlayer2Joypad_CheckButtonA
0BBF5                           
0BBF5 A2 FF                     	LDX #$FF
0BBF7 AD FF 04                  	LDA StopwatchTimer
0BBFA F0 00                     	BEQ CheckPlayer2Joypad_SetStopwatchTimer
0BBFC                           
0BBFC E8                        	INX
0BBFD                           
0BBFD                           CheckPlayer2Joypad_SetStopwatchTimer:
0BBFD 8E FF 04                  	STX StopwatchTimer
0BC00                           
0BC00                           CheckPlayer2Joypad_CheckButtonA:
0BC00 A5 F6                     	LDA Player2JoypadPress
0BC02 29 80                     	AND #ControllerInput_A
0BC04 F0 00                     	BEQ CheckPlayer2Joypad_CheckLeftRight
0BC06                           
0BC06 A5 F8                     	LDA Player2JoypadHeld
0BC08 29 40                     	AND #ControllerInput_B
0BC0A F0 00                     	BEQ CheckPlayer2Joypad_NoButtonB
0BC0C                           
0BC0C 20 00 00                  	JSR DebugRandomObject
0BC0F D0 00                     	BNE CheckPlayer2Joypad_CheckLeftRight
0BC11                           
0BC11                           CheckPlayer2Joypad_NoButtonB:
0BC11 20 00 00                  	JSR RandomCarryObject
0BC14                           
0BC14                           CheckPlayer2Joypad_CheckLeftRight:
0BC14 A5 F6                     	LDA Player2JoypadPress
0BC16 29 03                     	AND #ControllerInput_Right | ControllerInput_Left
0BC18 F0 00                     	BEQ CheckPlayer2Joypad_Exit
0BC1A C9 03                     	CMP #ControllerInput_Right | ControllerInput_Left
0BC1C F0 00                     	BEQ CheckPlayer2Joypad_Exit
0BC1E                           
0BC1E 18                        	CLC
0BC1F 65 8F                     	ADC CurrentCharacter
0BC21 65 8F                     	ADC CurrentCharacter
0BC23                           
0BC23 A8                        	TAY
0BC24 B9 52 BB                  	LDA ChangeCharacterOffsets, Y
0BC27                           
0BC27 A2 18                     	LDX #$18
0BC29 8E 80 7E                  	STX ChangeCharacterTimer
0BC2C A2 08                     	LDX #$08
0BC2E 8E 81 7E                  	STX ChangeCharacterPoofTimer
0BC31                           
0BC31 D0 00                     	BNE CheckSetCurrentCharacter
0BC33                           
0BC33                           CheckPlayer2Joypad_Exit:
0BC33 60                        	RTS
0BC34                           
0BC34                           ;
0BC34                           ; Changes the current character
0BC34                           ;
0BC34                           ; Input
0BC34                           ;   A = target character
0BC34                           ;
0BC34                           CheckSetCurrentCharacter:
0BC34 C5 8F                     	CMP CurrentCharacter
0BC36 D0 00                     	BNE SetCurrentCharacter
0BC38                           
0BC38 60                        	RTS
0BC39                           
0BC39                           SetCurrentCharacter:
0BC39 85 8F                     	STA CurrentCharacter
0BC3B                           
0BC3B AD 55 05                  	LDA GravityWithJumpButton
0BC3E 48                        	PHA
0BC3F                           
0BC3F A6 8F                     	LDX CurrentCharacter
0BC41 BC 10 7E                  	LDY StatOffsetsRAM, X
0BC44 A2 00                     	LDX #$00
0BC46                           SetCurrentCharacter_StatsLoop:
0BC46 B9 00 00                  	LDA StatOffsetsRAM + CharacterStats-StatOffsets, Y
0BC49 9D 46 05                  	STA CharacterStatsRAM, X
0BC4C C8                        	INY
0BC4D E8                        	INX
0BC4E E0 17                     	CPX #$17
0BC50 90 F4                     	BCC SetCurrentCharacter_StatsLoop
0BC52                           
0BC52 A5 8F                     	LDA CurrentCharacter
0BC54 0A                        	ASL A
0BC55 0A                        	ASL A
0BC56 A8                        	TAY
0BC57 A2 00                     	LDX #$00
0BC59                           SetCurrentCharacter_PaletteLoop:
0BC59 B9 00 00                  	LDA StatOffsetsRAM + CharacterPalette-StatOffsets, Y
0BC5C 9D 37 06                  	STA RestorePlayerPalette0, X
0BC5F C8                        	INY
0BC60 E8                        	INX
0BC61 E0 04                     	CPX #$04
0BC63 90 F4                     	BCC SetCurrentCharacter_PaletteLoop
0BC65                           
0BC65                           	; load carry offsets
0BC65 A4 8F                     	LDY CurrentCharacter
0BC67 B9 00 00                  	LDA CarryYOffsetsRAM + CarryYOffsetBigLo-CarryYOffsets, Y
0BC6A 8D 00 7F                  	STA ItemCarryYOffsetsRAM
0BC6D B9 00 00                  	LDA CarryYOffsetsRAM + CarryYOffsetSmallLo-CarryYOffsets, Y
0BC70 8D 07 7F                  	STA ItemCarryYOffsetsRAM + $07
0BC73 B9 00 00                  	LDA CarryYOffsetsRAM + CarryYOffsetBigHi-CarryYOffsets, Y
0BC76 8D 0E 7F                  	STA ItemCarryYOffsetsRAM + $0E
0BC79 B9 00 00                  	LDA CarryYOffsetsRAM + CarryYOffsetSmallHi-CarryYOffsets, Y
0BC7C 8D 15 7F                  	STA ItemCarryYOffsetsRAM + $15
0BC7F                           
0BC7F                           	; interrupt floating if this character can't do it
0BC7F AD 53 05                  	LDA JumpFloatLength
0BC82 F0 00                     	BEQ SetCurrentCharacter_SetJumpFloatTimer
0BC84                           
0BC84                           	; if already floating, keep going
0BC84 CD C9 04                  	CMP JumpFloatTimer
0BC87 90 00                     	BCC SetCurrentCharacter_CheckGravityChange
0BC89                           
0BC89                           SetCurrentCharacter_SetJumpFloatTimer:
0BC89 8D C9 04                  	STA JumpFloatTimer
0BC8C                           
0BC8C                           SetCurrentCharacter_CheckGravityChange:
0BC8C                           	; check whether gravity is increasing
0BC8C 68                        	PLA
0BC8D 38                        	SEC
0BC8E ED 55 05                  	SBC GravityWithJumpButton
0BC91 F0 00                     	BEQ SetCurrentCharacter_Update
0BC93                           
0BC93                           	; stash velocity delta in X
0BC93 AA                        	TAX
0BC94                           
0BC94                           	; check whether y-velocity is negative
0BC94 A5 46                     	LDA PlayerYVelocity
0BC96 10 00                     	BPL SetCurrentCharacter_Update
0BC98                           
0BC98 E0 00                     	CPX #$00
0BC9A 10 00                     	BPL SetCurrentCharacter_ClampYVelocity
0BC9C                           
0BC9C                           	; scale y-velocity based on difference in gravity
0BC9C 49 FF                     	EOR #$FF
0BC9E 18                        	CLC
0BC9F 69 01                     	ADC #$01
0BCA1                           
0BCA1 CA                        	DEX
0BCA2                           SetCurrentCharacter_ScaleVelocityYUp_Loop:
0BCA2 0A                        	ASL
0BCA3 E8                        	INX
0BCA4 F0 FC                     	BEQ SetCurrentCharacter_ScaleVelocityYUp_Loop
0BCA6                           
0BCA6 49 FF                     	EOR #$FF
0BCA8 85 46                     	STA PlayerYVelocity
0BCAA                           
0BCAA 4C 00 00                  	JMP SetCurrentCharacter_Update
0BCAD                           
0BCAD                           SetCurrentCharacter_ClampYVelocity:
0BCAD A5 46                     	LDA PlayerYVelocity
0BCAF CD 50 05                  	CMP JumpHeightRunning
0BCB2                           
0BCB2 10 00                     	BPL SetCurrentCharacter_Update
0BCB4                           
0BCB4 AD 4D 05                  	LDA JumpHeightStandingCarrying
0BCB7 85 46                     	STA PlayerYVelocity
0BCB9                           
0BCB9                           SetCurrentCharacter_Update:
0BCB9 EE C6 04                  	INC SkyFlashTimer
0BCBC                           
0BCBC                           	; update chr for character
0BCBC 20 00 00                  	JSR LoadCharacterCHRBanks
0BCBF                           
0BCBF A9 80                     	LDA #DPCM_PlayerDeath
0BCC1 8D 01 06                  	STA DPCMQueue
0BCC4                           
0BCC4                           SetCurrentCharacter_Exit:
0BCC4 60                        	RTS
0BCC5                           
0BCC5                           
0BCC5                           RandomCarryObjectTypes:
0BCC5 32                        	.db #Enemy_VegetableSmall
0BCC6 33                        	.db #Enemy_VegetableLarge
0BCC7 35                        	.db #Enemy_Shell
0BCC8 37                        	.db #Enemy_Bomb
0BCC9 01                        	.db #Enemy_ShyguyRed
0BCCA 02                        	.db #Enemy_Tweeter
0BCCB 05                        	.db #Enemy_SnifitRed
0BCCC 1E                        	.db #Enemy_Egg
0BCCD                           
0BCCD                           ; bit 7: put in player's hands
0BCCD                           ; bit 6: set enemy timer
0BCCD                           ; bit 5: start at bottom of screen
0BCCD                           ; bit 4:
0BCCD                           ; bit 3:
0BCCD                           ; bit 2:
0BCCD                           ; bit 1: set thrown flag
0BCCD                           ; bit 0: disable velocity reset
0BCCD                           RandomCarryObjectAttributes:
0BCCD 80                        	.db %10000000
0BCCE 80                        	.db %10000000
0BCCF 80                        	.db %10000000
0BCD0 C0                        	.db %11000000
0BCD1 81                        	.db %10000001
0BCD2 81                        	.db %10000001
0BCD3 81                        	.db %10000001
0BCD4 81                        	.db %10000001
0BCD5                           
0BCD5                           
0BCD5                           RandomCarryObject:
0BCD5 A5 50                     	LDA PlayerState
0BCD7 D0 00                     	BNE RandomCarryObject_Exit
0BCD9 A5 9C                     	LDA HoldingItem
0BCDB D0 00                     	BNE RandomCarryObject_Exit
0BCDD                           
0BCDD A5 10                     	LDA byte_RAM_10
0BCDF 4A                        	LSR A
0BCE0 4A                        	LSR A
0BCE1 4A                        	LSR A
0BCE2 29 07                     	AND #$07
0BCE4 AA                        	TAX
0BCE5 BD CD BC                  	LDA RandomCarryObjectAttributes, X
0BCE8 8D 83 7E                  	STA CreateObjectAttributes
0BCEB BD C5 BC                  	LDA RandomCarryObjectTypes, X
0BCEE 8D 82 7E                  	STA CreateObjectType
0BCF1                           
0BCF1                           RandomCarryObject_Exit:
0BCF1 60                        	RTS
0BCF2                           
0BCF2                           
0BCF2                           DebugRandomObjectTypes:
0BCF2 37                        	.db #Enemy_Bomb
0BCF3 37                        	.db #Enemy_Bomb
0BCF4 3A                        	.db #Enemy_POWBlock
0BCF5 3A                        	.db #Enemy_POWBlock
0BCF6 3A                        	.db #Enemy_POWBlock
0BCF7 45                        	.db #Enemy_Starman
0BCF8 45                        	.db #Enemy_Starman
0BCF9 45                        	.db #Enemy_Starman
0BCFA                           
0BCFA                           DebugRandomObjectAttributes:
0BCFA 42                        	.db %01000010
0BCFB 42                        	.db %01000010
0BCFC 02                        	.db %00000010
0BCFD 02                        	.db %00000010
0BCFE 02                        	.db %00000010
0BCFF 22                        	.db %00100010
0BD00 22                        	.db %00100010
0BD01 22                        	.db %00100010
0BD02                           
0BD02                           
0BD02                           DebugRandomObject:
0BD02 A5 10                     	LDA byte_RAM_10
0BD04 4A                        	LSR A
0BD05 4A                        	LSR A
0BD06 4A                        	LSR A
0BD07 29 07                     	AND #$07
0BD09 AA                        	TAX
0BD0A BD FA BC                  	LDA DebugRandomObjectAttributes, X
0BD0D 8D 83 7E                  	STA CreateObjectAttributes
0BD10 BD F2 BC                  	LDA DebugRandomObjectTypes, X
0BD13 8D 82 7E                  	STA CreateObjectType
0BD16 60                        	RTS
0BD17                           ENDIF
0BD17 FF FF FF FF FF FF FF FF.. .pad $c000, $ff
0C000                           
0C000                           ; ----------------------------------------
0C000                           ; Banks 2 and 3. Enemy/object code.
0C000                           .base $8000
08000                           .include "src/prg-2-3.asm"
08000                           ;
08000                           ; Bank 2 & Bank 3
08000                           ; ===============
08000                           ;
08000                           ; What's inside:
08000                           ;
08000                           ;   - Enemy initialization and logic
08000                           ;
08000                           
08000                           CarryYOffsets:
08000                           CarryYOffsetBigLo:
08000 FA                        	.db $FA ; Mario
08001 F6                        	.db $F6 ; Princess
08002 FC                        	.db $FC ; Toad
08003 F7                        	.db $F7 ; Luigi
08004                           
08004                           CarryYOffsetBigHi:
08004 FF                        	.db $FF ; Mario
08005 FF                        	.db $FF ; Princess
08006 FF                        	.db $FF ; Toad
08007 FF                        	.db $FF ; Luigi
08008                           
08008                           CarryYOffsetSmallLo:
08008 02                        	.db $02 ; Mario
08009 FE                        	.db $FE ; Princess
0800A 04                        	.db $04 ; Toad
0800B FF                        	.db $FF ; Luigi
0800C                           
0800C                           CarryYOffsetSmallHi:
0800C 00                        	.db $00 ; Mario
0800D FF                        	.db $FF ; Princess
0800E 00                        	.db $00 ; Toad
0800F FF                        	.db $FF ; Luigi
08010                           
08010                           
08010                           AreaMainRoutine:
08010 AD 27 06                  	LDA DoAreaTransition
08013 F0 00                     	BEQ AreaMainRoutine_NoTransition
08015 60                        	RTS
08016                           
08016                           AreaMainRoutine_NoTransition:
08016 AD AE 04                  	LDA AreaInitialized
08019 F0 00                     	BEQ AreaInitialization
0801B                           
0801B 4C 00 00                  	JMP AreaMainRoutine_Gameplay
0801E                           
0801E                           ; ---------------------------------------------------------------------------
0801E                           
0801E                           AreaInitialization:
0801E EE AE 04                  	INC AreaInitialized
08021 8D BA 05                  	STA byte_RAM_5BA
08024 8D C4 04                  	STA POWQuakeTimer
08027 8D C6 04                  	STA SkyFlashTimer
0802A 8D B5 04                  	STA CrystalAndHawkmouthOpenSize
0802D 8D B4 04                  	STA HawkmouthClosing
08030 8D B9 04                  	STA SwarmType
08033 8D B6 04                  	STA HawkmouthOpenTimer
08036 8D FA 04                  	STA ScrollXLock
08039 8D 25 04                  	STA VerticalScrollDirection
0803C 85 3C                     	STA PlayerXVelocity
0803E 85 85                     	STA DamageInvulnTime
08040 85 9C                     	STA HoldingItem
08042 85 82                     	STA PlayerStateTimer
08044 8D C5 04                  	STA BackgroundYOffset
08047 8D FD 04                  	STA PokeyTempScreenX
0804A 8D CA 04                  	STA CrouchJumpTimer
0804D 8D C9 04                  	STA JumpFloatTimer
08050 8D DF 04                  	STA QuicksandDepth
08053 8D B8 04                  	STA BossBeaten
08056                           
08056                           IFDEF RESET_CHR_LATCH
08056                           	LDY #$FF
08056                           	STY BossTileset
08056                           	INC ResetCHRLatch
08056                           ENDIF
08056                           
08056                           ;
08056                           ; Copies all character stats to RAM for hot-swapping the current character
08056                           ;
08056 A2 0F                     	LDX #$0F ; Should always be 0F? Check if problem later. 16 bytes to copy according to offset
08058                           CopyCarryYOffsets_Loop:
08058 BD 00 80                  	LDA CarryYOffsets, X
0805B 9D 00 7E                  	STA CarryYOffsetsRAM, X
0805E CA                        	DEX
0805F 10 F7                     	BPL CopyCarryYOffsets_Loop
08061                           
08061                           	; Resume to normal code
08061 A0 1B                     	LDY #$1B
08063                           AreaInitialization_CarryYOffsetLoop:
08063                           	; Copy the global carrying Y offsets to memory
08063                           	; These are used for every character for different frames of the pickup animation
08063 B9 00 00                  	LDA ItemCarryYOffsets, Y
08066 99 00 7F                  	STA ItemCarryYOffsetsRAM, Y
08069 88                        	DEY
0806A 10 F7                     	BPL AreaInitialization_CarryYOffsetLoop
0806C                           
0806C                           IFDEF CONTROLLER_2_DEBUG
0806C 20 00 00                  	JSR CopyCarryYOffsets
0806F                           ENDIF
0806F                           
0806F                           	; Copy the character-specific FINAL carrying heights into memory
0806F A4 8F                     	LDY CurrentCharacter
08071 B9 00 80                  	LDA CarryYOffsetBigLo, Y
08074 8D 00 7F                  	STA ItemCarryYOffsetsRAM
08077 B9 08 80                  	LDA CarryYOffsetSmallLo, Y
0807A 8D 07 7F                  	STA ItemCarryYOffsetsRAM + $07
0807D B9 04 80                  	LDA CarryYOffsetBigHi, Y
08080 8D 0E 7F                  	STA ItemCarryYOffsetsRAM + $0E
08083 B9 0C 80                  	LDA CarryYOffsetSmallHi, Y
08086 8D 15 7F                  	STA ItemCarryYOffsetsRAM + $15
08089                           
08089 A9 B6                     	LDA #$B6
0808B 8D AC 05                  	STA PseudoRNGSeed
0808E AD 34 05                  	LDA TransitionType
08091                           
08091                           	; Play the slide-whistle when you start the game and drop into 1-1
08091 0D 31 05                  	ORA CurrentLevel
08094 D0 00                     	BNE AreaInitialization_CheckObjectCarriedOver
08096                           
08096 A9 10                     	LDA #SoundEffect2_IntroFallSlide
08098 8D 04 06                  	STA SoundEffectQueue2
0809B                           
0809B                           AreaInitialization_CheckObjectCarriedOver:
0809B AD AF 04                  	LDA ObjectCarriedOver
0809E F0 00                     	BEQ AreaInitialization_SetEnemyData
080A0                           
080A0 A2 05                     	LDX #$05
080A2 86 12                     	STX byte_RAM_12
080A4 C9 3F                     	CMP #Enemy_Mushroom
080A6 F0 00                     	BEQ AreaInitialization_SetEnemyData
080A8                           
080A8 95 90                     	STA ObjectType, X
080AA A0 01                     	LDY #EnemyState_Alive
080AC 84 56                     	STY EnemyState + 5
080AE A0 FF                     	LDY #$FF
080B0 8C 46 04                  	STY EnemyRawDataOffset + 5
080B3 C9 38                     	CMP #Enemy_Rocket
080B5 D0 00                     	BNE AreaInitialization_NonRocketCarryOver
080B7                           
080B7                           AreaInitialization_Rocket:
080B7                           	; A = $38 (Enemy_Rocket)
080B7                           	; X = $05 (from above)
080B7 95 B1                     	STA EnemyArray_B1, X
080B9 9D C7 04                  	STA PlayerInRocket, X ; Bug? This sets ObjectXAcceleration for enemy 0
080BC 9D 77 04                  	STA EnemyArray_477, X
080BF A9 00                     	LDA #$00
080C1 95 15                     	STA ObjectXHi, X
080C3 95 1F                     	STA ObjectYHi, X
080C5 20 00 00                  	JSR SetEnemyAttributes
080C8                           
080C8 A9 F0                     	LDA #$F0
080CA 95 47                     	STA ObjectYVelocity, X
080CC 0A                        	ASL A
080CD 95 33                     	STA ObjectYLo, X
080CF A9 78                     	LDA #$78
080D1 95 29                     	STA ObjectXLo, X
080D3 D0 00                     	BNE AreaInitialization_SetEnemyData
080D5                           
080D5                           AreaInitialization_NonRocketCarryOver:
080D5 48                        	PHA
080D6 8E 2D 04                  	STX ObjectBeingCarriedIndex
080D9 20 00 00                  	JSR EnemyInit_Basic
080DC                           
080DC A9 01                     	LDA #$01
080DE 95 A8                     	STA ObjectBeingCarriedTimer, X
080E0 85 9C                     	STA HoldingItem
080E2 20 00 00                  	JSR CarryObject
080E5                           
080E5 68                        	PLA
080E6 C9 3D                     	CMP #Enemy_Key
080E8 D0 00                     	BNE AreaInitialization_SetEnemyData
080EA                           
080EA                           AreaInitialization_KeyCarryOver:
080EA F6 79                     	INC EnemyVariable, X
080EC CA                        	DEX
080ED 86 12                     	STX byte_RAM_12
080EF A9 01                     	LDA #EnemyState_Alive
080F1 95 51                     	STA EnemyState, X
080F3 A9 17                     	LDA #Enemy_Phanto
080F5 95 90                     	STA ObjectType, X
080F7 20 00 00                  	JSR EnemyInit_Basic
080FA                           
080FA A9 00                     	LDA #$00
080FC 8D BC 05                  	STA PhantoActivateTimer
080FF A5 CB                     	LDA ScreenYLo
08101 95 33                     	STA ObjectYLo, X
08103 A5 CA                     	LDA ScreenYHi
08105 95 1F                     	STA ObjectYHi, X
08107 AD C0 04                  	LDA ScreenBoundaryLeftLo
0810A 95 29                     	STA ObjectXLo, X
0810C AD BE 04                  	LDA ScreenBoundaryLeftHi
0810F 95 15                     	STA ObjectXHi, X
08111 20 00 00                  	JSR UnlinkEnemyFromRawData
08114                           
08114                           AreaInitialization_SetEnemyData:
08114 A9 00                     	LDA #<RawEnemyDataAddr
08116 85 CC                     	STA RawEnemyData
08118 A9 7B                     	LDA #>RawEnemyDataAddr
0811A 85 CD                     	STA RawEnemyData + 1
0811C A5 EC                     	LDA IsHorizontalLevel
0811E D0 00                     	BNE AreaInitialization_HorizontalArea
08120                           
08120                           ;
08120                           ; Loads area enemies based on the vertical screen scroll
08120                           ;
08120                           AreaInitialization_VerticalArea:
08120 A9 14                     	LDA #$14
08122 85 09                     	STA byte_RAM_9
08124 A5 CB                     	LDA ScreenYLo
08126 E9 30                     	SBC #$30
08128 29 F0                     	AND #$F0
0812A 85 05                     	STA byte_RAM_5
0812C A5 CA                     	LDA ScreenYHi
0812E E9 00                     	SBC #$00
08130 85 06                     	STA byte_RAM_6
08132                           
08132                           AreaInitialization_VerticalArea_Loop:
08132 A5 06                     	LDA byte_RAM_6
08134 C9 0B                     	CMP #$0B
08136 B0 00                     	BCS AreaInitialization_VerticalArea_Next
08138                           
08138 20 00 00                  	JSR CheckObjectVerticalSpawnBoundaries_InitializePage
0813B 20 00 00                  	JSR CheckObjectVerticalSpawnBoundaries_InitializePage
0813E                           
0813E                           AreaInitialization_VerticalArea_Next:
0813E 20 00 00                  	JSR IncrementSpawnBoundaryTile
08141                           
08141 C6 09                     	DEC byte_RAM_9
08143 10 ED                     	BPL AreaInitialization_VerticalArea_Loop
08145                           
08145 60                        	RTS
08146                           
08146                           ; End of function AreaMainRoutine
08146                           
08146                           ;
08146                           ; Increments the spawn boundary by one tile, incrementing the page if necessary
08146                           ;
08146                           IncrementSpawnBoundaryTile:
08146 A5 05                     	LDA byte_RAM_5
08148 18                        	CLC
08149 69 10                     	ADC #$10
0814B 85 05                     	STA byte_RAM_5
0814D 90 00                     	BCC IncrementSpawnBoundaryTile_Exit
0814F                           
0814F E6 06                     	INC byte_RAM_6
08151                           
08151                           IncrementSpawnBoundaryTile_Exit:
08151 60                        	RTS
08152                           
08152                           
08152                           ;
08152                           ; Loads area enemies based on the horizontal screen scroll
08152                           ;
08152                           AreaInitialization_HorizontalArea:
08152                           	; Start 3 tiles to the left of the screen boundary
08152 AD C0 04                  	LDA ScreenBoundaryLeftLo
08155 E9 30                     	SBC #$30
08157 29 F0                     	AND #$F0
08159 85 05                     	STA byte_RAM_5
0815B AD BE 04                  	LDA ScreenBoundaryLeftHi
0815E E9 00                     	SBC #$00
08160 85 06                     	STA byte_RAM_6
08162                           
08162                           	; Check a screen and a half screen's worth of objects
08162 A9 17                     	LDA #$17
08164 85 09                     	STA byte_RAM_9
08166                           AreaInitialization_HorizontalArea_Loop:
08166 A5 06                     	LDA byte_RAM_6
08168 C9 0B                     	CMP #$0B
0816A B0 00                     	BCS AreaInitialization_HorizontalArea_Next
0816C                           
0816C 20 00 00                  	JSR CheckObjectHorizontalSpawnBoundaries_InitializePage
0816F 20 00 00                  	JSR CheckObjectHorizontalSpawnBoundaries_InitializePage
08172                           
08172                           AreaInitialization_HorizontalArea_Next:
08172 20 46 81                  	JSR IncrementSpawnBoundaryTile
08175                           
08175 C6 09                     	DEC byte_RAM_9
08177 10 ED                     	BPL AreaInitialization_HorizontalArea_Loop
08179                           
08179 60                        	RTS
0817A                           
0817A                           ;
0817A                           ; Main routine handles
0817A                           ;
0817A                           ; 1. Check object spawn boundaries
0817A                           ; 2. Stopwatch
0817A                           ; 3. Calculate right screen boundary
0817A                           ; 4. Run enemy logic
0817A                           ;
0817A                           AreaMainRoutine_Gameplay:
0817A 20 00 00                  	JSR CheckObjectSpawnBoundaries
0817D                           
0817D                           IFDEF RESET_CHR_LATCH
0817D                           	JSR CheckResetCHRLatch
0817D                           ENDIF
0817D                           
0817D AD FF 04                  	LDA StopwatchTimer
08180 F0 00                     	BEQ AreaMainRoutine_CalculateScreenBoundaryRight
08182                           
08182                           	; Handle the stopwatch
08182 A5 10                     	LDA byte_RAM_10
08184 29 1F                     	AND #%00011111
08186 D0 00                     	BNE AreaMainRoutine_DecrementStopwatch
08188                           
08188 A0 40                     	LDY #SoundEffect1_StopwatchTick
0818A 8C 02 06                  	STY SoundEffectQueue1
0818D                           
0818D                           AreaMainRoutine_DecrementStopwatch:
0818D 4A                        	LSR A
0818E 90 00                     	BCC AreaMainRoutine_CalculateScreenBoundaryRight
08190                           
08190 CE FF 04                  	DEC StopwatchTimer
08193                           
08193                           	; Calculate the screen boundary on the right
08193                           AreaMainRoutine_CalculateScreenBoundaryRight:
08193 AD C0 04                  	LDA ScreenBoundaryLeftLo
08196 18                        	CLC
08197 69 FF                     	ADC #$FF
08199 8D C1 04                  	STA ScreenBoundaryRightLo
0819C AD BE 04                  	LDA ScreenBoundaryLeftHi
0819F 69 00                     	ADC #$00
081A1 8D BF 04                  	STA ScreenBoundaryRightHi
081A4                           
081A4                           	; Loop through objects and
081A4 A2 08                     	LDX #$08
081A6                           AreaMainRoutine_ObjectLoop:
081A6 86 12                     	STX byte_RAM_12
081A8                           
081A8                           	; Determine the DMA offset for the sprite, starting with the enemy ID offset
081A8                           	; by the sprite flicker slot.
081A8 8A                        	TXA
081A9 18                        	CLC
081AA 6D 00 04                  	ADC SpriteFlickerSlot
081AD A8                        	TAY
081AE B9 00 00                  	LDA SpriteFlickerDMAOffset, Y
081B1                           
081B1                           	; If the object is being carried, it gets slot $10
081B1 B4 A8                     	LDY ObjectBeingCarriedTimer, X
081B3 F0 00                     	BEQ AreaMainRoutine_SetObjectDMAOffset
081B5                           
081B5 A9 10                     	LDA #$10
081B7                           
081B7                           	; Unless it's the rocket, in which case it takes slot $00
081B7 B4 90                     	LDY ObjectType, X
081B9 C9 38                     	CMP #Enemy_Rocket
081BB D0 00                     	BNE AreaMainRoutine_SetObjectDMAOffset
081BD                           
081BD A9 00                     	LDA #$00
081BF                           
081BF                           AreaMainRoutine_SetObjectDMAOffset:
081BF 85 F4                     	STA byte_RAM_F4 ; Store object DMA offset
081C1                           
081C1                           	; Is it dead?
081C1 B5 51                     	LDA EnemyState, X
081C3 C9 02                     	CMP #EnemyState_Dead
081C5 B0 00                     	BCS AreaMainRoutine_DecrementObjectTimer1
081C7                           
081C7                           	; Is it affected by the stopwatch?
081C7 B5 90                     	LDA ObjectType, X
081C9 C9 32                     	CMP #Enemy_VegetableSmall
081CB B0 00                     	BCS AreaMainRoutine_DecrementObjectTimer1
081CD                           
081CD                           	; If the stopwatch is running, freeze object timers 1 and 2.
081CD AD FF 04                  	LDA StopwatchTimer
081D0 D0 00                     	BNE AreaMainRoutine_DecrementObjectFlashTimer
081D2                           
081D2                           	; General-purpose time-based behavior
081D2                           AreaMainRoutine_DecrementObjectTimer1:
081D2 B5 86                     	LDA ObjectTimer1, X
081D4 F0 00                     	BEQ AreaMainRoutine_DecrementObjectTimer2
081D6                           
081D6 D6 86                     	DEC ObjectTimer1, X
081D8                           
081D8                           AreaMainRoutine_DecrementObjectTimer2:
081D8 BD 53 04                  	LDA ObjectTimer2, X
081DB F0 00                     	BEQ AreaMainRoutine_DecrementObjectFlashTimer
081DD                           
081DD DE 53 04                  	DEC ObjectTimer2, X
081E0                           
081E0                           	; Flashing palette
081E0                           AreaMainRoutine_DecrementObjectFlashTimer:
081E0 BD 5C 04                  	LDA ObjectFlashTimer, X
081E3 F0 00                     	BEQ AreaMainRoutine_DecrementObjectStunTimer
081E5                           
081E5 DE 5C 04                  	DEC ObjectFlashTimer, X
081E8                           
081E8                           	; Enemy stun timer
081E8                           AreaMainRoutine_DecrementObjectStunTimer:
081E8 BD 38 04                  	LDA ObjectStunTimer, X
081EB F0 00                     	BEQ AreaMainRoutine_ObjectBehavior
081ED                           
081ED A5 10                     	LDA byte_RAM_10
081EF 4A                        	LSR A
081F0 90 00                     	BCC AreaMainRoutine_ObjectBehavior
081F2                           
081F2 DE 38 04                  	DEC ObjectStunTimer, X
081F5                           
081F5                           	; Tick PRNG, update the temprary screen position, and run the object behavior
081F5                           AreaMainRoutine_ObjectBehavior:
081F5 20 00 00                  	JSR TickPseudoRNG
081F8                           
081F8 20 00 00                  	JSR SetSpriteTempScreenPosition
081FB                           
081FB 20 00 00                  	JSR HandleEnemyState
081FE                           
081FE                           	; Next object (previous index), if there is one
081FE A6 12                     	LDX byte_RAM_12
08200 CA                        	DEX
08201 10 A3                     	BPL AreaMainRoutine_ObjectLoop
08203                           
08203                           	; Done with the regular objects! Is there an active swarm currently?
08203 AD B9 04                  	LDA SwarmType
08206 F0 00                     	BEQ HandleEnemyState_Inactive
08208                           
08208                           InitializeSwarm:
08208 38                        	SEC
08209 E9 00                     	SBC #((EnemyInitializationTable_End - EnemyInitializationTable) / 2)
0820B                           
0820B                           InitializeSwarmRelative:
0820B 20 00 00                  	JSR JumpToTableAfterJump
0820E                           
0820E                           
0820E                           GeneratorInitializationTable:
0820E 00 00                     	.dw Swarm_AlbatossCarryingBobOmb
08210 00 00                     	.dw Swarm_BeezoDiving
08212 00 00                     	.dw Swarm_Stop
08214 00 00                     	.dw Generator_VegetableThrower
08216                           GeneratorInitializationTable_End:
08216                           
08216                           
08216                           Swarm_Stop:
08216 A9 00                     	LDA #$00
08218 8D B9 04                  	STA SwarmType
0821B                           
0821B                           HandleEnemyState_Inactive:
0821B 60                        	RTS
0821C                           
0821C                           
0821C                           ;
0821C                           ; The pseudo-random number generator uses four bytes to generate values.
0821C                           ; It runs once for each object slot.
0821C                           ;
0821C                           TickPseudoRNG:
0821C                           DoPRNGBullshitProbably:
0821C A0 00                     	LDY #$00
0821E 20 00 00                  	JSR TickPseudoRNG_Inner
08221                           
08221 C8                        	INY
08222                           
08222                           TickPseudoRNG_Inner:
08222 AD AC 05                  	LDA PseudoRNGSeed
08225 0A                        	ASL A
08226 0A                        	ASL A
08227 38                        	SEC
08228 6D AC 05                  	ADC PseudoRNGSeed
0822B 8D AC 05                  	STA PseudoRNGSeed
0822E                           
0822E 0E AD 05                  	ASL PseudoRNGSeed + 1
08231 A9 20                     	LDA #$20
08233 2C AD 05                  	BIT PseudoRNGSeed + 1
08236                           
08236                           	; Bit 7 of `PseudoRNGSeed + 1` before the shift determines whether the next
08236                           	; branch checks for `== $20` or `!= $20`
08236 90 00                     	BCC TickPseudoRNG_Reversed
08238                           
08238                           	; Increment first for `!= $20`
08238 F0 00                     	BEQ TickPseudoRNG_EOR
0823A D0 00                     	BNE TickPseudoRNG_IncEOR
0823C                           
0823C                           	; Increment first for `== $20`
0823C                           TickPseudoRNG_Reversed:
0823C D0 00                     	BNE TickPseudoRNG_EOR
0823E                           
0823E                           TickPseudoRNG_IncEOR:
0823E EE AD 05                  	INC PseudoRNGSeed + 1
08241                           TickPseudoRNG_EOR:
08241 AD AD 05                  	LDA PseudoRNGSeed + 1
08244 4D AC 05                  	EOR PseudoRNGSeed
08247 99 AE 05                  	STA PseudoRNGValue, Y
0824A                           
0824A 60                        	RTS
0824B                           
0824B                           
0824B                           HandleEnemyState:
0824B B5 51                     	LDA EnemyState, X
0824D 20 00 00                  	JSR JumpToTableAfterJump
08250                           
08250 1B 82                     	.dw HandleEnemyState_Inactive ; 0 (not active)
08252 00 00                     	.dw HandleEnemyState_Alive ; Alive
08254 00 00                     	.dw HandleEnemyState_Dead ; Dead
08256 00 00                     	.dw HandleEnemyState_BlockFizzle ; Block fizzle
08258 00 00                     	.dw HandleEnemyState_BombExploding ; Bomb exploding
0825A 00 00                     	.dw HandleEnemyState_PuffOfSmoke ; Puff of smoke
0825C 00 00                     	.dw HandleEnemyState_Sand ; Sand after digging
0825E 00 00                     	.dw HandleEnemyState_Sinking ; Sinking in quicksand
08260                           
08260                           
08260                           ; Offset from left boundary of screen\
08260                           SpawnBoundaryOffsets:
08260 18                        	.db $18 ; rightward (lo)
08261 E0                        	.db $E0 ; leftward (lo)
08262 01                        	.db $01 ; rightward (hi)
08263 FF                        	.db $FF ; leftward (hi)
08264                           
08264                           
08264                           CheckObjectSpawnBoundaries:
08264 AD B8 04                  	LDA BossBeaten
08267 D0 00                     	BNE CheckObjectSpawnBoundaries_Exit
08269                           
08269 A5 EC                     	LDA IsHorizontalLevel
0826B 20 00 00                  	JSR JumpToTableAfterJump
0826E                           
0826E 00 00                     	.dw CheckObjectVerticalSpawnBoundaries
08270 00 00                     	.dw CheckObjectHorizontalSpawnBoundaries
08272                           
08272                           
08272                           CheckObjectHorizontalSpawnBoundaries:
08272 A4 6E                     	LDY PlayerMovementDirection
08274                           	; Low offset (pixel)
08274 AD C0 04                  	LDA ScreenBoundaryLeftLo
08277 18                        	CLC
08278 79 5F 82                  	ADC SpawnBoundaryOffsets - 1, Y
0827B 29 F0                     	AND #$F0
0827D 85 05                     	STA byte_RAM_5
0827F                           	; High offset (page)
0827F AD BE 04                  	LDA ScreenBoundaryLeftHi
08282 79 61 82                  	ADC SpawnBoundaryOffsets + 1, Y
08285 85 06                     	STA byte_RAM_6
08287 C9 0A                     	CMP #$0A
08289 B0 00                     	BCS CheckObjectSpawnBoundaries_Exit
0828B                           
0828B                           
0828B                           CheckObjectHorizontalSpawnBoundaries_InitializePage:
0828B AD 28 06                  	LDA InSubspaceOrJar
0828E C9 02                     	CMP #$02
08290 F0 00                     	BEQ CheckObjectSpawnBoundaries_Exit
08292                           
08292                           	; Initialize the enemy data page offset
08292 A2 00                     	LDX #$00
08294 86 00                     	STX byte_RAM_0
08296                           CheckObjectHorizontalSpawnBoundaries_InitializePage_Loop:
08296                           	; Stop looping and start checking the individual enemies on the current page
08296 E4 06                     	CPX byte_RAM_6
08298 F0 00                     	BEQ CheckObjectHorizontalSpawnBoundaries_InitializePage_Next
0829A                           
0829A                           	; Advance to the next page of enemy data
0829A A5 00                     	LDA byte_RAM_0
0829C A8                        	TAY
0829D 18                        	CLC
0829E 71 CC                     	ADC (RawEnemyData), Y
082A0 85 00                     	STA byte_RAM_0
082A2 E8                        	INX
082A3 4C 96 82                  	JMP CheckObjectHorizontalSpawnBoundaries_InitializePage_Loop
082A6                           
082A6                           
082A6                           CheckObjectHorizontalSpawnBoundaries_InitializePage_Next:
082A6                           	; We're on the page, now start counting bytes of enemy data
082A6 A4 00                     	LDY byte_RAM_0
082A8 B1 CC                     	LDA (RawEnemyData), Y
082AA 85 01                     	STA byte_RAM_1
082AC A2 FF                     	LDX #$FF
082AE 88                        	DEY
082AF                           
082AF                           CheckObjectHorizontalSpawnBoundaries_InitializePage_NextObject:
082AF C8                        	INY
082B0 C8                        	INY
082B1 E8                        	INX
082B2 E8                        	INX
082B3 E4 01                     	CPX byte_RAM_1
082B5 90 00                     	BCC CheckObjectHorizontalSpawnBoundaries_InitializePage_InitializeObject
082B7                           
082B7 A6 12                     	LDX byte_RAM_12
082B9                           
082B9                           CheckObjectSpawnBoundaries_Exit:
082B9 60                        	RTS
082BA                           
082BA                           
082BA                           CheckObjectHorizontalSpawnBoundaries_InitializePage_InitializeObject:
082BA                           	; If bit 7 of the enemy type is set, it's already active and we should not re-initialize
082BA B1 CC                     	LDA (RawEnemyData), Y
082BC 30 F1                     	BMI CheckObjectHorizontalSpawnBoundaries_InitializePage_NextObject
082BE                           
082BE                           	; Load the x-position of the object
082BE C8                        	INY
082BF B1 CC                     	LDA (RawEnemyData), Y
082C1 88                        	DEY
082C2 29 F0                     	AND #$F0
082C4 C5 05                     	CMP byte_RAM_5
082C6 D0 E7                     	BNE CheckObjectHorizontalSpawnBoundaries_InitializePage_NextObject
082C8                           
082C8                           	; Check if it's a generator/swarm object (end of enemy init table < enemy type > boss types)
082C8 B1 CC                     	LDA (RawEnemyData), Y
082CA C9 5C                     	CMP #Enemy_BossBirdo
082CC B0 00                     	BCS CheckObjectHorizontalSpawnBoundaries_InitializePage_RegularObject
082CE C9 00                     	CMP #((EnemyInitializationTable_End - EnemyInitializationTable) / 2)
082D0 90 00                     	BCC CheckObjectHorizontalSpawnBoundaries_InitializePage_RegularObject
082D2                           
082D2 8D B9 04                  	STA SwarmType
082D5 60                        	RTS
082D6                           
082D6                           
082D6                           CheckObjectHorizontalSpawnBoundaries_InitializePage_RegularObject:
082D6                           	; Look for an enmpy slot for the object
082D6 A2 04                     	LDX #$04
082D8                           CheckObjectHorizontalSpawnBoundaries_InitializePage_RegularObject_Loop:
082D8 B5 51                     	LDA EnemyState, X
082DA F0 00                     	BEQ CheckObjectHorizontalSpawnBoundaries_InitializePage_CreateObject
082DC                           
082DC CA                        	DEX
082DD 10 F9                     	BPL CheckObjectHorizontalSpawnBoundaries_InitializePage_RegularObject_Loop
082DF                           
082DF 60                        	RTS
082E0                           
082E0                           CheckObjectHorizontalSpawnBoundaries_InitializePage_CreateObject:
082E0                           	; Store the object slot used
082E0 86 12                     	STX byte_RAM_12
082E2                           
082E2                           	; Set the x-position of the object (we already looked it up)
082E2 A5 05                     	LDA byte_RAM_5
082E4 95 29                     	STA ObjectXLo, X
082E6 A5 06                     	LDA byte_RAM_6
082E8 95 15                     	STA ObjectXHi, X
082EA                           
082EA                           	; Set the y-position of the object (fetch from the enemy data)
082EA C8                        	INY
082EB B1 CC                     	LDA (RawEnemyData), Y
082ED 88                        	DEY
082EE 0A                        	ASL A
082EF 0A                        	ASL A
082F0 0A                        	ASL A
082F1 0A                        	ASL A
082F2 95 33                     	STA ObjectYLo, X
082F4 A9 00                     	LDA #$00
082F6 95 1F                     	STA ObjectYHi, X
082F8                           
082F8 4C 00 00                  	JMP CheckObjectSpawnBoundaries_InitializePage_PreInitObject
082FB                           
082FB                           
082FB                           CheckObjectVerticalSpawnBoundaries:
082FB A5 10                     	LDA byte_RAM_10
082FD 29 01                     	AND #$01
082FF A8                        	TAY
08300 C8                        	INY
08301 A5 D8                     	LDA NeedsScroll
08303 F0 00                     	BEQ loc_BANK2_82FC
08305                           
08305 29 03                     	AND #$03
08307 49 03                     	EOR #$03
08309 A8                        	TAY
0830A                           
0830A                           loc_BANK2_82FC:
0830A A5 CB                     	LDA ScreenYLo
0830C 18                        	CLC
0830D 79 5F 82                  	ADC SpawnBoundaryOffsets - 1, Y
08310 29 F0                     	AND #$F0
08312 85 05                     	STA byte_RAM_5
08314 A5 CA                     	LDA ScreenYHi
08316 79 61 82                  	ADC SpawnBoundaryOffsets + 1, Y
08319 85 06                     	STA byte_RAM_6
0831B C9 0A                     	CMP #$0A
0831D B0 9A                     	BCS CheckObjectSpawnBoundaries_Exit
0831F                           
0831F                           CheckObjectVerticalSpawnBoundaries_InitializePage:
0831F A2 00                     	LDX #$00
08321 86 00                     	STX byte_RAM_0
08323                           CheckObjectVerticalSpawnBoundaries_InitializePage_Loop:
08323                           	; Stop looping and start checking the individual enemies on the current page
08323 E4 06                     	CPX byte_RAM_6
08325 F0 00                     	BEQ CheckObjectVerticalSpawnBoundaries_InitializePage_Next
08327                           
08327                           	; Advance to the next page of enemy data
08327 A5 00                     	LDA byte_RAM_0
08329 A8                        	TAY
0832A 18                        	CLC
0832B 71 CC                     	ADC (RawEnemyData), Y
0832D 85 00                     	STA byte_RAM_0
0832F E8                        	INX
08330 4C 23 83                  	JMP CheckObjectVerticalSpawnBoundaries_InitializePage_Loop
08333                           
08333                           
08333                           CheckObjectVerticalSpawnBoundaries_InitializePage_Next:
08333                           	; We're on the page, now start counting bytes of enemy data
08333 A4 00                     	LDY byte_RAM_0
08335 B1 CC                     	LDA (RawEnemyData), Y
08337 85 01                     	STA byte_RAM_1
08339 A2 FF                     	LDX #$FF
0833B 88                        	DEY
0833C                           
0833C                           CheckObjectVerticalSpawnBoundaries_InitializePage_NextObject:
0833C C8                        	INY
0833D C8                        	INY
0833E E8                        	INX
0833F E8                        	INX
08340 E4 01                     	CPX byte_RAM_1
08342 90 00                     	BCC CheckObjectVerticalSpawnBoundaries_InitializePage_InitializeObject
08344                           
08344 A6 12                     	LDX byte_RAM_12
08346                           
08346                           CheckObjectVerticalSpawnBoundaries_Exit:
08346 60                        	RTS
08347                           
08347                           
08347                           CheckObjectVerticalSpawnBoundaries_InitializePage_InitializeObject:
08347                           	; If bit 7 of the enemy type is set, it's already active and we should not re-initialize
08347 B1 CC                     	LDA (RawEnemyData), Y
08349 30 F1                     	BMI CheckObjectVerticalSpawnBoundaries_InitializePage_NextObject
0834B                           
0834B                           	; Load the y-position of the object
0834B C8                        	INY
0834C B1 CC                     	LDA (RawEnemyData), Y
0834E 88                        	DEY
0834F 0A                        	ASL A
08350 0A                        	ASL A
08351 0A                        	ASL A
08352 0A                        	ASL A
08353 C5 05                     	CMP byte_RAM_5
08355 D0 E5                     	BNE CheckObjectVerticalSpawnBoundaries_InitializePage_NextObject
08357                           
08357                           	; Check if it's a generator/swarm object (end of enemy init table < enemy type > boss types)
08357 B1 CC                     	LDA (RawEnemyData), Y
08359 C9 5C                     	CMP #Enemy_BossBirdo
0835B B0 00                     	BCS CheckObjectVerticalSpawnBoundaries_InitializePage_RegularObject
0835D C9 00                     	CMP #((EnemyInitializationTable_End - EnemyInitializationTable) / 2)
0835F 90 00                     	BCC CheckObjectVerticalSpawnBoundaries_InitializePage_RegularObject
08361                           
08361 8D B9 04                  	STA SwarmType
08364 60                        	RTS
08365                           
08365                           
08365                           CheckObjectVerticalSpawnBoundaries_InitializePage_RegularObject:
08365 A2 04                     	LDX #$04
08367                           CheckObjectVerticalSpawnBoundaries_InitializePage_RegularObject_Loop:
08367 B5 51                     	LDA EnemyState, X
08369 F0 00                     	BEQ CheckObjectVerticalSpawnBoundaries_InitializePage_CreateObject
0836B                           
0836B CA                        	DEX
0836C 10 F9                     	BPL CheckObjectVerticalSpawnBoundaries_InitializePage_RegularObject_Loop
0836E                           
0836E 60                        	RTS
0836F                           
0836F                           
0836F                           CheckObjectVerticalSpawnBoundaries_InitializePage_CreateObject:
0836F                           	; Store the object slot used
0836F 86 12                     	STX byte_RAM_12
08371                           
08371                           	; Set the y-position of the object (we already looked it up)
08371 A5 05                     	LDA byte_RAM_5
08373 95 33                     	STA ObjectYLo, X
08375 A5 06                     	LDA byte_RAM_6
08377 95 1F                     	STA ObjectYHi, X
08379                           
08379                           	; Set the x-position of the object (fetch from the enemy data)
08379 C8                        	INY
0837A B1 CC                     	LDA (RawEnemyData), Y
0837C 88                        	DEY
0837D 29 F0                     	AND #$F0
0837F 95 29                     	STA ObjectXLo, X
08381 A9 00                     	LDA #$00
08383 95 15                     	STA ObjectXHi, X
08385                           
08385                           CheckObjectSpawnBoundaries_InitializePage_PreInitObject:
08385                           	; Reset the flag to spawn a door
08385 9D 9B 04                  	STA EnemyArray_SpawnsDoor, X
08388                           	; Stash the enemy data offset
08388 84 0C                     	STY byte_RAM_C
0838A                           
0838A                           	; Face the player (horizontal levels only)
0838A B1 CC                     	LDA (RawEnemyData), Y
0838C 29 3F                     	AND #%00111111
0838E C9 32                     	CMP #Enemy_VegetableSmall
08390 B0 00                     	BCS CheckObjectSpawnBoundaries_InitializePage_MarkEnemyData
08392                           
08392 A5 EC                     	LDA IsHorizontalLevel
08394 F0 00                     	BEQ CheckObjectSpawnBoundaries_InitializePage_MarkEnemyData
08396                           
08396 20 00 00                  	JSR EnemyFindWhichSidePlayerIsOn
08399                           
08399 A5 0F                     	LDA byte_RAM_F
0839B 69 18                     	ADC #$18
0839D C9 30                     	CMP #$30
0839F 90 A5                     	BCC CheckObjectVerticalSpawnBoundaries_Exit
083A1                           
083A1                           CheckObjectSpawnBoundaries_InitializePage_MarkEnemyData:
083A1                           	; enable bit 7 of the raw enemy data to indicate that the enemy has spawned
083A1 A4 0C                     	LDY byte_RAM_C
083A3 B1 CC                     	LDA (RawEnemyData), Y
083A5 09 80                     	ORA #%10000000
083A7 91 CC                     	STA (RawEnemyData), Y
083A9                           
083A9                           	; Is this a boss type?
083A9 C9 DC                     	CMP #%10000000 | Enemy_BossBirdo
083AB 29 7F                     	AND #%01111111
083AD 90 00                     	BCC CheckObjectSpawnBoundaries_InitializePage_SetObjectType
083AF                           
083AF                           	; Enable the flag to spawn a door for boss types
083AF 29 3F                     	AND #%00111111
083B1 9D 9B 04                  	STA EnemyArray_SpawnsDoor, X
083B4                           
083B4                           CheckObjectSpawnBoundaries_InitializePage_SetObjectType:
083B4 95 90                     	STA ObjectType, X
083B6 98                        	TYA
083B7 9D 41 04                  	STA EnemyRawDataOffset, X
083BA F6 51                     	INC EnemyState, X
083BC B5 90                     	LDA ObjectType, X
083BE                           
083BE                           InitializeEnemy:
083BE 20 00 00                  	JSR JumpToTableAfterJump
083C1                           
083C1                           EnemyInitializationTable:
083C1 00 00                     	.dw EnemyInit_Basic ; Heart
083C3 00 00                     	.dw EnemyInit_Basic ; ShyguyRed
083C5 00 00                     	.dw EnemyInit_Basic ; Tweeter
083C7 00 00                     	.dw EnemyInit_Basic ; ShyguyPink
083C9 00 00                     	.dw EnemyInit_Basic ; Porcupo
083CB 00 00                     	.dw EnemyInit_Basic ; SnifitRed
083CD 00 00                     	.dw EnemyInit_Stationary ; SnifitGray
083CF 00 00                     	.dw EnemyInit_Basic ; SnifitPink
083D1 00 00                     	.dw EnemyInit_Basic ; Ostro
083D3 00 00                     	.dw EnemyInit_Bobomb ; BobOmb
083D5 00 00                     	.dw EnemyInit_Basic ; AlbatossCarryingBobOmb
083D7 00 00                     	.dw EnemyInit_AlbatossStartRight ; AlbatossStartRight
083D9 00 00                     	.dw EnemyInit_AlbatossStartLeft ; AlbatossStartLeft
083DB 00 00                     	.dw EnemyInit_Basic ; NinjiRunning
083DD 00 00                     	.dw EnemyInit_Stationary ; NinjiJumping
083DF 00 00                     	.dw EnemyInit_BeezoDiving ; BeezoDiving
083E1 00 00                     	.dw EnemyInit_Basic ; BeezoStraight
083E3 00 00                     	.dw EnemyInit_Basic ; WartBubble
083E5 00 00                     	.dw EnemyInit_Basic ; Pidgit
083E7 00 00                     	.dw EnemyInit_Trouter ; Trouter
083E9 00 00                     	.dw EnemyInit_Basic ; Hoopstar
083EB 00 00                     	.dw EnemyInit_JarGenerators ; JarGeneratorShyguy
083ED 00 00                     	.dw EnemyInit_JarGenerators ; JarGeneratorBobOmb
083EF 00 00                     	.dw EnemyInit_Phanto ; Phanto
083F1 00 00                     	.dw EnemyInit_Cobrats ; CobratJar
083F3 00 00                     	.dw EnemyInit_Cobrats ; CobratSand
083F5 00 00                     	.dw EnemyInit_Pokey ; Pokey
083F7 00 00                     	.dw EnemyInit_Basic ; Bullet
083F9 00 00                     	.dw EnemyInit_Birdo ; Birdo
083FB 00 00                     	.dw EnemyInit_Mouser ; Mouser
083FD 00 00                     	.dw EnemyInit_Basic ; Egg
083FF 00 00                     	.dw EnemyInit_Tryclyde ; Tryclyde
08401 00 00                     	.dw EnemyInit_Basic ; Fireball
08403 00 00                     	.dw EnemyInit_Clawgrip ; Clawgrip
08405 00 00                     	.dw EnemyInit_Basic ; ClawgripRock
08407 00 00                     	.dw EnemyInit_Stationary ; PanserStationaryFiresAngled
08409 00 00                     	.dw EnemyInit_Basic ; PanserWalking
0840B 00 00                     	.dw EnemyInit_Stationary ; PanserStationaryFiresUp
0840D 00 00                     	.dw EnemyInit_Basic ; Autobomb
0840F 00 00                     	.dw EnemyInit_Basic ; AutobombFire
08411 00 00                     	.dw EnemyInit_WhaleSpout ; WhaleSpout
08413 00 00                     	.dw EnemyInit_Basic ; Flurry
08415 00 00                     	.dw EnemyInit_Fryguy ; Fryguy
08417 00 00                     	.dw EnemyInit_Fryguy ; FryguySplit
08419 00 00                     	.dw EnemyInit_Wart ; Wart
0841B 00 00                     	.dw EnemyInit_HawkmouthBoss ; HawkmouthBoss
0841D 00 00                     	.dw EnemyInit_Sparks ; Spark1
0841F 00 00                     	.dw EnemyInit_Sparks ; Spark2
08421 00 00                     	.dw EnemyInit_Sparks ; Spark3
08423 00 00                     	.dw EnemyInit_Sparks ; Spark4
08425 00 00                     	.dw EnemyInit_Basic ; VegetableSmall
08427 00 00                     	.dw EnemyInit_Basic ; VegetableLarge
08429 00 00                     	.dw EnemyInit_Basic ; VegetableWart
0842B 00 00                     	.dw EnemyInit_Basic ; Shell
0842D 00 00                     	.dw EnemyInit_Basic ; Coin
0842F 00 00                     	.dw EnemyInit_Basic ; Bomb
08431 00 00                     	.dw EnemyInit_Basic ; Rocket
08433 00 00                     	.dw EnemyInit_Basic ; MushroomBlock
08435 00 00                     	.dw EnemyInit_Basic ; POWBlock
08437 00 00                     	.dw EnemyInit_FallingLogs ; FallingLogs
08439 00 00                     	.dw EnemyInit_Basic ; SubspaceDoor
0843B 00 00                     	.dw EnemyInit_Key ; Key
0843D 00 00                     	.dw EnemyInit_Basic ; SubspacePotion
0843F 00 00                     	.dw EnemyInit_Stationary ; Mushroom
08441 00 00                     	.dw EnemyInit_Stationary ; Mushroom1up
08443 00 00                     	.dw EnemyInit_Basic ; FlyingCarpet
08445 00 00                     	.dw EnemyInit_Hawkmouth ; HawkmouthRight
08447 00 00                     	.dw EnemyInit_Hawkmouth ; HawkmouthLeft
08449 00 00                     	.dw EnemyInit_CrystalBallStarmanStopwatch ; CrystalBall
0844B 00 00                     	.dw EnemyInit_CrystalBallStarmanStopwatch ; Starman
0844D 00 00                     	.dw EnemyInit_CrystalBallStarmanStopwatch ; Stopwatch
0844F                           EnemyInitializationTable_End:
0844F                           
0844F                           
0844F                           ;
0844F                           ; Sets enemy attributes to the default for the object type
0844F                           ;
0844F                           ; Input
0844F                           ;   X = enemy index
0844F                           ;
0844F                           SetEnemyAttributes:
0844F B4 90                     	LDY ObjectType, X
08451 B9 00 00                  	LDA ObjectAttributeTable, Y
08454 29 7F                     	AND #$7F
08456 95 65                     	STA ObjectAttributes, X
08458 B9 00 00                  	LDA EnemyArray_46E_Data, Y
0845B 9D 6E 04                  	STA EnemyArray_46E, X
0845E B9 00 00                  	LDA ObjectHitbox_Data, Y
08461 9D 89 04                  	STA ObjectHitbox, X
08464 B9 00 00                  	LDA EnemyArray_492_Data, Y
08467 9D 92 04                  	STA EnemyArray_492, X
0846A 60                        	RTS
0846B                           
0846B                           
0846B                           ;
0846B                           ; Enemy initialization with a timer reset
0846B                           ;
0846B                           EnemyInit_Basic:
0846B A9 00                     	LDA #$00
0846D 95 86                     	STA ObjectTimer1, X
0846F                           
0846F                           ;
0846F                           ; Enemy initialization without an explicit timer reset
0846F                           ;
0846F                           ; Most things are set to $00
0846F                           ;
0846F                           EnemyInit_BasicWithoutTimer:
0846F A9 00                     	LDA #$00
08471 95 79                     	STA EnemyVariable, X
08473 A9 00                     	LDA #$00 ; You do realize you already LDA #$00, right???
08475 95 B1                     	STA EnemyArray_B1, X
08477 9D 2F 04                  	STA ObjectProjectileTimer, X
0847A 95 A8                     	STA ObjectBeingCarriedTimer, X
0847C 95 9F                     	STA ObjectAnimationTimer, X
0847E 9D 4A 04                  	STA ObjectShakeTimer, X
08481 95 5B                     	STA EnemyCollision, X
08483 9D 38 04                  	STA ObjectStunTimer, X
08486 9D 53 04                  	STA ObjectTimer2, X
08489 9D CC 04                  	STA ObjectXAcceleration, X
0848C 9D D6 04                  	STA ObjectYAcceleration, X
0848F 9D 5C 04                  	STA ObjectFlashTimer, X
08492 9D 77 04                  	STA EnemyArray_477, X
08495 9D 80 04                  	STA EnemyArray_480, X
08498 9D 65 04                  	STA EnemyHP, X
0849B 95 47                     	STA ObjectYVelocity, X
0849D                           
0849D                           EnemyInit_BasicAttributes:
0849D 20 4F 84                  	JSR SetEnemyAttributes
084A0                           
084A0                           ; Initialize enemy movement in direction of player
084A0                           EnemyInit_BasicMovementTowardPlayer:
084A0 20 00 00                  	JSR EnemyFindWhichSidePlayerIsOn
084A3                           
084A3                           ; Initialize enemy movement
084A3                           ; Y = 1 (move to the left)
084A3                           ; Y = 0 (move to the right)
084A3                           EnemyInit_BasicMovement:
084A3 C8                        	INY ; uses using index 1 or 2 of EnemyInitialAccelerationTable
084A4 94 6F                     	STY EnemyMovementDirection, X
084A6 B9 00 00                  	LDA EnemyInitialAccelerationTable, Y
084A9 95 3D                     	STA ObjectXVelocity, X
084AB                           
084AB                           	; Double the speed of objects when bit 6 of 46E is set
084AB BD 6E 04                  	LDA EnemyArray_46E, X
084AE 29 40                     	AND #SpriteFlags46E_DoubleSpeed
084B0 F0 00                     	BEQ EnemyInit_BasicMovementExit
084B2 16 3D                     	ASL ObjectXVelocity, X ; Change the speed of certain objects?
084B4                           
084B4                           EnemyInit_BasicMovementExit:
084B4 60                        	RTS
084B5                           
084B5                           
084B5                           BeezoXOffsetTable:
084B5 FE                        	.db $FE ; If player moving right
084B6 00                        	.db $00 ; If moving left
084B7                           
084B7                           BeezoDiveSpeedTable:
084B7 12 16 1A 1E 22 26 2A 2D   	.db $12, $16, $1A, $1E, $22, $26, $2A, $2D
084BF 30 32 34 37 39 3B 3D 3E   	.db $30, $32, $34, $37, $39, $3B, $3D, $3E
084C7                           
084C7                           EnemyInit_BeezoDiving:
084C7 20 6B 84                  	JSR EnemyInit_Basic
084CA                           
084CA A4 6E                     	LDY PlayerMovementDirection ; $02 = left, $01 = right
084CC AD C0 04                  	LDA ScreenBoundaryLeftLo
084CF 79 B4 84                  	ADC BeezoXOffsetTable - 1, Y
084D2 95 29                     	STA ObjectXLo, X ; Spawn in front of the player to dive at them
084D4 AD BE 04                  	LDA ScreenBoundaryLeftHi
084D7 69 00                     	ADC #$00
084D9 95 15                     	STA ObjectXHi, X
084DB                           
084DB                           ;
084DB                           ; Beezo dives down to the player's y-position at the time of initialization
084DB                           ;
084DB                           EnemyBeezoDiveSetup:
084DB A5 1E                     	LDA PlayerYHi
084DD 10 00                     	BPL EnemyBeezoDiveSetup_GetPlayerYTile
084DF                           
084DF                           	; If above the screen, just abort and use the least descend-y one
084DF A0 00                     	LDY #$00
084E1 F0 00                     	BEQ EnemyBeezoDiveSetup_SetYVelocity
084E3                           
084E3                           	; Check how far down the screen the player is
084E3                           EnemyBeezoDiveSetup_GetPlayerYTile:
084E3 A5 32                     	LDA PlayerYLo
084E5 38                        	SEC
084E6 E5 CB                     	SBC ScreenYLo
084E8                           	; Take the highest 4 bits (round down to 16x16 meta-tile)
084E8 4A                        	LSR A
084E9 4A                        	LSR A
084EA 4A                        	LSR A
084EB 4A                        	LSR A
084EC A8                        	TAY
084ED                           
084ED                           EnemyBeezoDiveSetup_SetYVelocity:
084ED B9 B7 84                  	LDA BeezoDiveSpeedTable, Y
084F0 95 47                     	STA ObjectYVelocity, X
084F2 60                        	RTS
084F3                           
084F3                           
084F3                           EnemyInit_Phanto:
084F3 20 6B 84                  	JSR EnemyInit_Basic
084F6                           
084F6 A9 0C                     	LDA #$0C
084F8 95 3D                     	STA ObjectXVelocity, X
084FA A9 A0                     	LDA #$A0
084FC 8D BC 05                  	STA PhantoActivateTimer
084FF 60                        	RTS
08500                           
08500                           
08500                           EnemyInit_Bobomb:
08500 20 6B 84                  	JSR EnemyInit_Basic
08503                           
08503 A9 FF                     	LDA #$FF
08505 95 86                     	STA ObjectTimer1, X
08507 60                        	RTS
08508                           
08508                           
08508                           HandleEnemyState_Dead:
08508 20 00 00                  	JSR CheckObjectCollision
0850B                           
0850B 20 00 00                  	JSR HandleEnemyScreenBounds
0850E                           
0850E B5 51                     	LDA EnemyState, X
08510 D0 00                     	BNE MakeEnemyFlipUpsideDown
08512                           
08512 BD 9B 04                  	LDA EnemyArray_SpawnsDoor, X
08515 F0 00                     	BEQ EnemyDeathMaybe
08517                           
08517                           HandleEnemyState_Dead_BossBeaten:
08517 8D B8 04                  	STA BossBeaten
0851A 20 00 00                  	JSR DestroyOnscreenEnemies
0851D                           
0851D 20 16 82                  	JSR Swarm_Stop
08520                           
08520 A9 02                     	LDA #Music2_BossClearFanfare
08522 8D 03 06                  	STA MusicQueue2
08525 BD EF 04                  	LDA EndOfLevelDoorPage, X
08528 95 15                     	STA ObjectXHi, X
0852A A9 80                     	LDA #$80
0852C 95 29                     	STA ObjectXLo, X
0852E 0A                        	ASL A
0852F 95 1F                     	STA ObjectYHi, X
08531 A9 B0                     	LDA #$B0
08533 B4 90                     	LDY ObjectType, X
08535 C0 21                     	CPY #Enemy_Clawgrip
08537 D0 00                     	BNE HandleEnemyState_Dead_TurnIntoPuffOfSmoke
08539                           
08539 A9 70                     	LDA #$70
0853B                           
0853B                           HandleEnemyState_Dead_TurnIntoPuffOfSmoke:
0853B 95 33                     	STA ObjectYLo, X
0853D A9 41                     	LDA #ObjAttrib_16x32 | ObjAttrib_Palette1
0853F 95 65                     	STA ObjectAttributes, X
08541 9D 6E 04                  	STA EnemyArray_46E, X
08544 4C 00 00                  	JMP TurnIntoPuffOfSmoke
08547                           
08547                           
08547                           EnemyDeathMaybe:
08547 B5 90                     	LDA ObjectType, X
08549 C9 1B                     	CMP #Enemy_Bullet ; "Stray bullet" enemy type
0854B F0 00                     	BEQ MakeEnemyFlipUpsideDown
0854D                           
0854D EE AD 04                  	INC EnemiesKilledForHeart
08550 AC AD 04                  	LDY EnemiesKilledForHeart
08553 C0 08                     	CPY #$08 ; number of enemies to kill before a heart appears
08555 90 00                     	BCC MakeEnemyFlipUpsideDown
08557                           
08557 A9 00                     	LDA #$00 ; reset enemy kill counter for heart counter
08559 8D AD 04                  	STA EnemiesKilledForHeart
0855C                           
0855C A9 01                     	LDA #EnemyState_Alive ; convert dead enemy to living heart
0855E 95 51                     	STA EnemyState, X
08560 95 65                     	STA ObjectAttributes, X
08562 A9 07                     	LDA #SpriteFlags46E_Damage | SpriteFlags46E_Unliftable | SpriteFlags46E_NoEnemyCollision
08564 9D 6E 04                  	STA EnemyArray_46E, X
08567 A9 00                     	LDA #Enemy_Heart
08569 95 90                     	STA ObjectType, X
0856B B5 33                     	LDA ObjectYLo, X
0856D E9 60                     	SBC #$60 ; subtract this amount from the y position where the enemy despawned
0856F 95 33                     	STA ObjectYLo, X
08571 B5 1F                     	LDA ObjectYHi, X
08573 E9 00                     	SBC #$00
08575 95 1F                     	STA ObjectYHi, X
08577                           
08577                           
08577                           ;
08577                           ; Spawned enemies are linked to an offset in the raw enemy data, which prevents
08577                           ; from being respawned until they are killed or moved offscreen.
08577                           ;
08577                           ; This subroutine ensures that the enemy in a particular slot is not linked to
08577                           ; the raw enemy data
08577                           ;s
08577                           ; Input
08577                           ;   X = enemy slot
08577                           ;
08577                           UnlinkEnemyFromRawData:
08577 A9 FF                     	LDA #$FF
08579 9D 41 04                  	STA EnemyRawDataOffset, X
0857C 60                        	RTS
0857D                           
0857D                           
0857D                           MakeEnemyFlipUpsideDown:
0857D 16 65                     	ASL ObjectAttributes, X ; Shift left...
0857F 38                        	SEC ; Set carry...
08580 76 65                     	ROR ObjectAttributes, X ; Shift right. Effectively sets $80 bit
08582                           
08582                           RenderSpriteAndApplyObjectMovement:
08582 20 00 00                  	JSR RenderSprite
08585                           
08585                           
08585                           ;
08585                           ; Applies object physics
08585                           ;
08585                           ; Input
08585                           ;   X = enemy index
08585                           ;
08585                           ApplyObjectMovement:
08585                           	; disable horiziontal physics while shaking
08585 BD 4A 04                  	LDA ObjectShakeTimer, X
08588 D0 00                     	BNE ApplyObjectMovement_Vertical
0858A                           
0858A 20 00 00                  	JSR ApplyObjectPhysicsX
0858D                           
0858D                           ApplyObjectMovement_Vertical:
0858D 20 00 00                  	JSR ApplyObjectPhysicsY
08590                           
08590 B5 47                     	LDA ObjectYVelocity, X
08592 30 00                     	BMI ApplyObjectMovement_Gravity
08594                           
08594                           	; Check terminal velocity
08594 C9 3E                     	CMP #$3E
08596 B0 00                     	BCS ApplyObjectMovement_Exit
08598                           
08598                           ApplyObjectMovement_Gravity:
08598 F6 47                     	INC ObjectYVelocity, X
0859A F6 47                     	INC ObjectYVelocity, X
0859C                           
0859C                           ApplyObjectMovement_Exit:
0859C 60                        	RTS
0859D                           
0859D                           
0859D                           HandleEnemyState_BlockFizzle:
0859D 20 00 00                  	JSR HandleEnemyScreenBounds
085A0                           
085A0 B5 86                     	LDA ObjectTimer1, X
085A2 F0 00                     	BEQ HandleEnemyState_Exit
085A4                           
085A4 A8                        	TAY
085A5 4A                        	LSR A
085A6 4A                        	LSR A
085A7 29 01                     	AND #$01
085A9 95 6F                     	STA EnemyMovementDirection, X
085AB A9 01                     	LDA #ObjAttrib_Palette1 ; also SpriteFlags46E_Damage
085AD 95 65                     	STA ObjectAttributes, X
085AF 9D 6E 04                  	STA EnemyArray_46E, X
085B2 A9 3C                     	LDA #$3C
085B4 C0 0C                     	CPY #$0C
085B6 90 00                     	BCC loc_BANK2_85AC
085B8                           
085B8 A9 3E                     	LDA #$3E
085BA                           
085BA                           loc_BANK2_85AC:
085BA 4C 00 00                  	JMP RenderSprite_DrawObject
085BD                           
085BD                           
085BD                           HandleEnemyState_Exit:
085BD 4C 00 00                  	JMP EnemyDestroy
085C0                           
085C0                           
085C0                           HandleEnemyState_Sinking:
085C0                           	; Collision detection
085C0 20 00 00                  	JSR HandleEnemyScreenBounds
085C3                           
085C3 20 00 00                  	JSR EnemyBehavior_CheckDamagedInterrupt
085C6                           
085C6 B5 A8                     	LDA ObjectBeingCarriedTimer, X
085C8 F0 00                     	BEQ loc_BANK2_85C1
085CA                           
085CA A9 01                     	LDA #EnemyState_Alive
085CC 95 51                     	STA EnemyState, X
085CE 60                        	RTS
085CF                           
085CF                           
085CF                           loc_BANK2_85C1:
085CF B5 86                     	LDA ObjectTimer1, X
085D1 F0 EA                     	BEQ HandleEnemyState_Exit
085D3                           
085D3 B5 90                     	LDA ObjectType, X
085D5 C9 32                     	CMP #Enemy_VegetableSmall
085D7 B0 00                     	BCS loc_BANK2_85E1
085D9                           
085D9 20 00 00                  	JSR IncrementAnimationTimerBy2
085DC                           
085DC A5 10                     	LDA byte_RAM_10
085DE 29 03                     	AND #$03
085E0 9D 4A 04                  	STA ObjectShakeTimer, X
085E3 A5 10                     	LDA byte_RAM_10
085E5 29 10                     	AND #$10
085E7 4A                        	LSR A
085E8 4A                        	LSR A
085E9 4A                        	LSR A
085EA 4A                        	LSR A
085EB 69 01                     	ADC #$01
085ED 95 6F                     	STA EnemyMovementDirection, X
085EF                           
085EF                           loc_BANK2_85E1:
085EF 20 00 00                  	JSR sub_BANK2_9486
085F2                           
085F2 4C 00 00                  	JMP CheckObjectCollision
085F5                           
085F5                           
085F5                           ExplosionTileXOffsets:
085F5 F8                        	.db $F8
085F6 00                        	.db $00
085F7 F8                        	.db $F8
085F8 00                        	.db $00
085F9 08                        	.db $08
085FA 10                        	.db $10
085FB 08                        	.db $08
085FC 10                        	.db $10
085FD                           
085FD                           ExplosionTileYOffsets:
085FD F8                        	.db $F8
085FE F8                        	.db $F8
085FF                           
085FF                           EnemyInitialAccelerationTable:
085FF                           	; these values are shared with ExplosionTileYOffsets!
085FF 08                        	.db $08
08600 08                        	.db $08
08601 F8                        	.db $F8
08602 F8                        	.db $F8
08603 08                        	.db $08
08604 08                        	.db $08
08605                           
08605                           
08605                           HandleEnemyState_BombExploding:
08605 20 00 00                  	JSR HandleEnemyScreenBounds
08608                           
08608 A5 EE                     	LDA byte_RAM_EE
0860A 05 EF                     	ORA byte_RAM_EF
0860C D0 AF                     	BNE HandleEnemyState_Exit
0860E                           
0860E B5 86                     	LDA ObjectTimer1, X
08610 F0 AB                     	BEQ HandleEnemyState_Exit
08612                           
08612 C9 1A                     	CMP #$1A
08614 B0 00                     	BCS HandleEnemyState_DrawExplosion
08616                           
08616 E9 11                     	SBC #$11
08618 30 00                     	BMI HandleEnemyState_DrawExplosion
0861A                           
0861A A8                        	TAY
0861B 20 00 00                  	JSR ExplodeNearbyBlocks
0861E                           
0861E                           HandleEnemyState_DrawExplosion:
0861E A9 60                     	LDA #$60
08620 85 00                     	STA byte_RAM_0
08622 A2 00                     	LDX #$00
08624 A0 40                     	LDY #$40
08626                           
08626                           HandleEnemyState_DrawExplosion_Loop:
08626 AD 2C 04                  	LDA SpriteTempScreenY
08629 18                        	CLC
0862A 7D FD 85                  	ADC ExplosionTileYOffsets, X
0862D 99 00 02                  	STA SpriteDMAArea, Y
08630 AD 29 04                  	LDA SpriteTempScreenX
08633 18                        	CLC
08634 7D F5 85                  	ADC ExplosionTileXOffsets, X
08637 99 03 02                  	STA SpriteDMAArea + 3, Y
0863A A9 01                     	LDA #$01
0863C 99 02 02                  	STA SpriteDMAArea + 2, Y
0863F A5 00                     	LDA byte_RAM_0
08641 99 01 02                  	STA SpriteDMAArea + 1, Y
08644 18                        	CLC
08645 69 02                     	ADC #$02
08647 85 00                     	STA byte_RAM_0
08649 C8                        	INY
0864A C8                        	INY
0864B C8                        	INY
0864C C8                        	INY
0864D E8                        	INX
0864E E0 08                     	CPX #$08
08650 D0 D4                     	BNE HandleEnemyState_DrawExplosion_Loop
08652                           
08652 A6 12                     	LDX byte_RAM_12
08654 4C 00 00                  	JMP CheckObjectCollision
08657                           
08657                           ; ---------------------------------------------------------------------------
08657                           
08657                           ExplodeNearbyBlocks_Exit:
08657 60                        	RTS
08658                           
08658                           
08658                           ExplosionOffsetXLo:
08658 FB                        	.db $FB
08659 08                        	.db $08
0865A 15                        	.db $15
0865B FB                        	.db $FB
0865C 08                        	.db $08
0865D 15                        	.db $15
0865E FB                        	.db $FB
0865F 08                        	.db $08
08660 15                        	.db $15
08661                           
08661                           ExplosionOffsetXHi:
08661 FF                        	.db $FF
08662 00                        	.db $00
08663 00                        	.db $00
08664 FF                        	.db $FF
08665 00                        	.db $00
08666 00                        	.db $00
08667 FF                        	.db $FF
08668 00                        	.db $00
08669 00                        	.db $00
0866A                           
0866A                           ExplosionOffsetYLo:
0866A FC                        	.db $FC
0866B FC                        	.db $FC
0866C FC                        	.db $FC
0866D 08                        	.db $08
0866E 08                        	.db $08
0866F 08                        	.db $08
08670 14                        	.db $14
08671 14                        	.db $14
08672 14                        	.db $14
08673                           
08673                           ExplosionOffsetYHi:
08673 FF                        	.db $FF
08674 FF                        	.db $FF
08675 FF                        	.db $FF
08676 00                        	.db $00
08677 00                        	.db $00
08678 00                        	.db $00
08679 00                        	.db $00
0867A 00                        	.db $00
0867B 00                        	.db $00
0867C                           
0867C                           ExplosionTileLayoutHi:
0867C 5F                        	.db >(DecodedLevelData - $100)
0867D 06                        	.db >(SubAreaTileLayout - $100)
0867E                           
0867E                           ;
0867E                           ; Blow up blocks near this object
0867E                           ;
0867E                           ; Input
0867E                           ;   X = enemy slot
0867E                           ;   Y = index
0867E                           ;
0867E                           ExplodeNearbyBlocks:
0867E B5 29                     	LDA ObjectXLo, X
08680 18                        	CLC
08681 79 58 86                  	ADC ExplosionOffsetXLo, Y
08684 85 0C                     	STA byte_RAM_C
08686 B5 15                     	LDA ObjectXHi, X
08688 79 61 86                  	ADC ExplosionOffsetXHi, Y
0868B 85 0D                     	STA byte_RAM_D
0868D C9 0B                     	CMP #$0B
0868F B0 C6                     	BCS ExplodeNearbyBlocks_Exit
08691                           
08691 B5 33                     	LDA ObjectYLo, X
08693 79 6A 86                  	ADC ExplosionOffsetYLo, Y
08696 29 F0                     	AND #$F0
08698 85 0E                     	STA byte_RAM_E
0869A 85 0B                     	STA byte_RAM_B
0869C B5 1F                     	LDA ObjectYHi, X
0869E 79 73 86                  	ADC ExplosionOffsetYHi, Y
086A1 85 0F                     	STA byte_RAM_F
086A3 C9 0A                     	CMP #$0A
086A5 B0 B0                     	BCS ExplodeNearbyBlocks_Exit
086A7                           
086A7 A4 EC                     	LDY IsHorizontalLevel
086A9 D0 00                     	BNE loc_BANK2_86BD
086AB                           
086AB                           	; Vertical level
086AB                           
086AB                           	; Convert vertical pixel position to tile position
086AB 4A                        	LSR A
086AC 66 0E                     	ROR byte_RAM_E
086AE 4A                        	LSR A
086AF 66 0E                     	ROR byte_RAM_E
086B1 4A                        	LSR A
086B2 66 0E                     	ROR byte_RAM_E
086B4 4A                        	LSR A
086B5 66 0E                     	ROR byte_RAM_E
086B7 A5 0E                     	LDA byte_RAM_E
086B9                           
086B9                           	; Determine vertical page
086B9 A0 FF                     	LDY #$FF
086BB                           ExplodeNearbyBlocks_VerticalPageLoop:
086BB 38                        	SEC
086BC E9 0F                     	SBC #$0F
086BE C8                        	INY
086BF B0 FA                     	BCS ExplodeNearbyBlocks_VerticalPageLoop
086C1                           
086C1 84 0D                     	STY byte_RAM_D
086C3                           
086C3                           	; Store Y as upper nybble
086C3 69 0F                     	ADC #$0F
086C5 0A                        	ASL A
086C6 0A                        	ASL A
086C7 0A                        	ASL A
086C8 0A                        	ASL A
086C9 85 0E                     	STA byte_RAM_E
086CB                           
086CB                           loc_BANK2_86BD:
086CB                           	; Convert horizontal pixel position to tile position
086CB A5 0C                     	LDA byte_RAM_C
086CD 4A                        	LSR A
086CE 4A                        	LSR A
086CF 4A                        	LSR A
086D0 4A                        	LSR A
086D1 85 04                     	STA byte_RAM_4
086D3                           
086D3                           	; Upper nybble is Y tile, lower nybble is X tile
086D3 05 0E                     	ORA byte_RAM_E
086D5 85 05                     	STA byte_RAM_5
086D7                           
086D7                           	; Determine whether we're in the subarea
086D7 A0 00                     	LDY #$00
086D9 AD BE 04                  	LDA ScreenBoundaryLeftHi
086DC C9 0A                     	CMP #$0A
086DE D0 00                     	BNE loc_BANK2_86D5
086E0                           
086E0                           	; We're in a subarea, treat it as page 0
086E0 84 0D                     	STY byte_RAM_D
086E2 C8                        	INY
086E3                           
086E3                           loc_BANK2_86D5:
086E3 A9 10                     	LDA #$10
086E5 85 07                     	STA byte_RAM_7
086E7 B9 7C 86                  	LDA ExplosionTileLayoutHi, Y
086EA 85 08                     	STA byte_RAM_8
086EC A4 0D                     	LDY byte_RAM_D
086EE                           
086EE                           loc_BANK2_86E0:
086EE A5 07                     	LDA byte_RAM_7
086F0 18                        	CLC
086F1 69 F0                     	ADC #$F0
086F3 85 07                     	STA byte_RAM_7
086F5 A5 08                     	LDA byte_RAM_8
086F7 69 00                     	ADC #$00
086F9 85 08                     	STA byte_RAM_8
086FB 88                        	DEY
086FC 10 F0                     	BPL loc_BANK2_86E0
086FE                           
086FE A4 05                     	LDY byte_RAM_5
08700 B1 07                     	LDA (byte_RAM_7), Y
08702 C9 9D                     	CMP #BackgroundTile_BombableBrick
08704 F0 00                     	BEQ ExplodeNearbyBlocks_DestroyBlock
08706                           
08706 C9 93                     	CMP #BackgroundTile_DiggableSand
08708 F0 00                     	BEQ ExplodeNearbyBlocks_DestroyBlock
0870A                           
0870A C9 72                     	CMP #BackgroundTile_JarSmall
0870C F0 00                     	BEQ ExplodeNearbyBlocks_DestroyBlock
0870E                           
0870E 60                        	RTS
0870F                           
0870F                           
0870F                           ExplodeNearbyBlocks_DestroyBlock:
0870F A9 40                     	LDA #BackgroundTile_Sky
08711 91 07                     	STA (byte_RAM_7), Y
08713                           
08713 A5 0D                     	LDA byte_RAM_D
08715 29 01                     	AND #$01
08717 49 01                     	EOR #$01
08719 0A                        	ASL A
0871A 0A                        	ASL A
0871B A4 EC                     	LDY IsHorizontalLevel
0871D D0 00                     	BNE ExplodeNearbyBlocks_DestroyBlock_UpdatePPU
0871F                           
0871F 0A                        	ASL A
08720                           
08720                           ExplodeNearbyBlocks_DestroyBlock_UpdatePPU:
08720 48                        	PHA
08721 A5 0E                     	LDA byte_RAM_E
08723 85 02                     	STA byte_RAM_2
08725 A5 0C                     	LDA byte_RAM_C
08727 29 F0                     	AND #$F0
08729 85 03                     	STA byte_RAM_3
0872B A9 08                     	LDA #$08
0872D 85 00                     	STA byte_RAM_0
0872F A5 02                     	LDA byte_RAM_2
08731 0A                        	ASL A
08732 26 00                     	ROL byte_RAM_0
08734 0A                        	ASL A
08735 26 00                     	ROL byte_RAM_0
08737 29 E0                     	AND #$E0
08739 85 01                     	STA byte_RAM_1
0873B                           
0873B A5 03                     	LDA byte_RAM_3
0873D 4A                        	LSR A
0873E 4A                        	LSR A
0873F 4A                        	LSR A
08740 05 01                     	ORA byte_RAM_1
08742 AE 00 03                  	LDX byte_RAM_300
08745 9D 02 03                  	STA PPUBuffer_301 + 1, X
08748 18                        	CLC
08749 69 20                     	ADC #$20
0874B 9D 07 03                  	STA PPUBuffer_301 + 6, X
0874E                           
0874E 68                        	PLA
0874F 05 00                     	ORA byte_RAM_0
08751 9D 01 03                  	STA PPUBuffer_301, X
08754 69 00                     	ADC #$00
08756 9D 06 03                  	STA PPUBuffer_301 + 5, X
08759 A9 02                     	LDA #$02
0875B 9D 03 03                  	STA PPUBuffer_301 + 2, X
0875E 9D 08 03                  	STA PPUBuffer_301 + 7, X
08761                           
08761 A9 FA                     	LDA #$FA
08763 9D 04 03                  	STA PPUBuffer_301 + 3, X
08766 9D 05 03                  	STA PPUBuffer_301 + 4, X
08769 9D 09 03                  	STA PPUBuffer_301 + 8, X
0876C 9D 0A 03                  	STA PPUBuffer_301 + 9, X
0876F                           
0876F A9 00                     	LDA #$00
08771 9D 0B 03                  	STA PPUBuffer_301 + 10, X
08774 8A                        	TXA
08775 18                        	CLC
08776 69 0A                     	ADC #$0A
08778 8D 00 03                  	STA byte_RAM_300
0877B                           
0877B                           	; Look for a slot to create a block fizzle sprite
0877B A2 08                     	LDX #$08
0877D                           ExplodeNearbyBlocks_FindSprite_Loop:
0877D B5 51                     	LDA EnemyState, X
0877F F0 00                     	BEQ ExplodeNearbyBlocks_CreateSprite
08781                           
08781 CA                        	DEX
08782 10 F9                     	BPL ExplodeNearbyBlocks_FindSprite_Loop
08784                           
08784 30 00                     	BMI ExplodeNearbyBlocks_CreateSprite_Exit
08786                           
08786                           ExplodeNearbyBlocks_CreateSprite:
08786 A5 0C                     	LDA byte_RAM_C
08788 29 F0                     	AND #$F0
0878A 95 29                     	STA ObjectXLo, X
0878C A5 0D                     	LDA byte_RAM_D
0878E A4 EC                     	LDY IsHorizontalLevel
08790 D0 00                     	BNE ExplodeNearbyBlocks_CreateSprite_Position
08792                           
08792 98                        	TYA
08793                           
08793                           ExplodeNearbyBlocks_CreateSprite_Position:
08793 95 15                     	STA ObjectXHi, X
08795 A5 0B                     	LDA byte_RAM_B
08797 95 33                     	STA ObjectYLo, X
08799 A5 0F                     	LDA byte_RAM_F
0879B 95 1F                     	STA ObjectYHi, X
0879D 20 6F 84                  	JSR EnemyInit_BasicWithoutTimer
087A0                           
087A0 20 00 00                  	JSR SetBlockFizzle
087A3                           
087A3                           ExplodeNearbyBlocks_CreateSprite_Exit:
087A3                           	; Restore next object index
087A3 A6 12                     	LDX byte_RAM_12
087A5                           
087A5                           HandleEnemyState_PuffOfSmoke_Exit:
087A5 60                        	RTS
087A6                           
087A6                           
087A6                           PuffOfSmokeAnimationTable:
087A6 46                        	.db $46
087A7 4A                        	.db $4A
087A8 4E                        	.db $4E
087A9 52                        	.db $52
087AA                           
087AA                           
087AA                           HandleEnemyState_PuffOfSmoke:
087AA 20 00 00                  	JSR HandleEnemyScreenBounds
087AD                           
087AD B5 65                     	LDA ObjectAttributes, X
087AF 09 10                     	ORA #ObjAttrib_Mirrored
087B1 95 65                     	STA ObjectAttributes, X
087B3 B5 86                     	LDA ObjectTimer1, X
087B5 D0 00                     	BNE loc_BANK2_87AC
087B7                           
087B7 4C 00 00                  	JMP HandleEnemyState_PuffOfSmoke_CheckDestroy
087BA                           
087BA                           ; ---------------------------------------------------------------------------
087BA                           
087BA                           loc_BANK2_87AC:
087BA 4A                        	LSR A
087BB 4A                        	LSR A
087BC 4A                        	LSR A
087BD A8                        	TAY
087BE B9 A6 87                  	LDA PuffOfSmokeAnimationTable, Y
087C1 20 00 00                  	JSR RenderSprite_DrawObject
087C4                           
087C4 BD 9B 04                  	LDA EnemyArray_SpawnsDoor, X
087C7 F0 DC                     	BEQ HandleEnemyState_PuffOfSmoke_Exit
087C9                           
087C9 B5 86                     	LDA ObjectTimer1, X
087CB C9 03                     	CMP #$03
087CD D0 D6                     	BNE HandleEnemyState_PuffOfSmoke_Exit
087CF                           
087CF A0 22                     	LDY #$22
087D1 B5 90                     	LDA ObjectType, X
087D3 C9 21                     	CMP #Enemy_Clawgrip
087D5 D0 00                     	BNE loc_BANK2_87CA
087D7                           
087D7                           	; Clawgrip special hack:
087D7                           	; Move the "Draw the door" PPU command
087D7                           	; up 8 tile rows ($100) to be on the platform
087D7 88                        	DEY
087D8                           
087D8                           loc_BANK2_87CA:
087D8 8C 1B 72                  	STY PPUBuffer_EndOfLevelDoor
087DB 8C 22 72                  	STY PPUBuffer_EndOfLevelDoor + $07
087DE C8                        	INY
087DF 8C 29 72                  	STY PPUBuffer_EndOfLevelDoor + $0E
087E2 8C 32 72                  	STY PPUBuffer_EndOfLevelDoor + $17
087E5                           
087E5 A0 03                     	LDY #$03
087E7                           loc_BANK2_87D9:
087E7                           	; Boss door PPU updates
087E7 BD EF 04                  	LDA EndOfLevelDoorPage, X
087EA 29 01                     	AND #%00000001
087EC 0A                        	ASL A
087ED 0A                        	ASL A
087EE 49 04                     	EOR #%00000100
087F0 A6 EC                     	LDX IsHorizontalLevel
087F2 D0 00                     	BNE loc_BANK2_87E7
087F4                           
087F4 0A                        	ASL A
087F5                           
087F5                           loc_BANK2_87E7:
087F5 BE 00 00                  	LDX EndOfLevelDoorRowOffsets, Y
087F8 1D 1B 72                  	ORA PPUBuffer_EndOfLevelDoor, X
087FB 9D 1B 72                  	STA PPUBuffer_EndOfLevelDoor, X
087FE A6 12                     	LDX byte_RAM_12
08800 88                        	DEY
08801 10 E4                     	BPL loc_BANK2_87D9
08803                           
08803 A9 14                     	LDA #$14
08805 85 11                     	STA ScreenUpdateIndex
08807 BC EF 04                  	LDY EndOfLevelDoorPage, X
0880A A9 5F                     	LDA #$5F
0880C 85 01                     	STA byte_RAM_1
0880E A9 10                     	LDA #$10
08810 85 00                     	STA byte_RAM_0
08812                           
08812                           loc_BANK2_8804:
08812 A5 00                     	LDA byte_RAM_0
08814 18                        	CLC
08815 69 F0                     	ADC #$F0
08817 85 00                     	STA byte_RAM_0
08819 A5 01                     	LDA byte_RAM_1
0881B 69 00                     	ADC #$00
0881D 85 01                     	STA byte_RAM_1
0881F 88                        	DEY
08820 10 F0                     	BPL loc_BANK2_8804
08822                           
08822 B5 90                     	LDA ObjectType, X
08824 C9 21                     	CMP #Enemy_Clawgrip
08826 D0 00                     	BNE DrawEndOfLevelDoorTiles
08828                           
08828                           	; Clawgrip special hack:
08828                           	; Move the "Draw the door" PPU command
08828                           	; up 8 tile rows ($100) to be on the platform
08828 A5 00                     	LDA byte_RAM_0
0882A 38                        	SEC
0882B E9 40                     	SBC #$40
0882D 85 00                     	STA byte_RAM_0
0882F A5 01                     	LDA byte_RAM_1
08831 E9 00                     	SBC #$00
08833 85 01                     	STA byte_RAM_1
08835                           
08835                           DrawEndOfLevelDoorTiles:
08835 A0 B8                     	LDY #$B8
08837 A9 56                     	LDA #BackgroundTile_LightDoorEndLevel
08839 91 00                     	STA (byte_RAM_0), Y
0883B A0 C8                     	LDY #$C8
0883D 91 00                     	STA (byte_RAM_0), Y
0883F A9 53                     	LDA #BackgroundTile_LightTrailRight
08841 A0 B9                     	LDY #$B9
08843 91 00                     	STA (byte_RAM_0), Y
08845 A0 CA                     	LDY #$CA
08847 91 00                     	STA (byte_RAM_0), Y
08849 A9 54                     	LDA #BackgroundTile_LightTrail
0884B A0 C9                     	LDY #$C9
0884D 91 00                     	STA (byte_RAM_0), Y
0884F 60                        	RTS
08850                           
08850                           
08850                           HandleEnemyState_PuffOfSmoke_CheckDestroy:
08850                           	; Fryguy flames are extinguished in a puff of smoke
08850 B5 90                     	LDA ObjectType, X
08852 C9 2B                     	CMP #Enemy_FryguySplit
08854 D0 00                     	BNE HandleEnemyState_PuffOfSmoke_Destroy
08856                           
08856 CE F8 04                  	DEC FryguySplitFlames
08859 10 00                     	BPL HandleEnemyState_PuffOfSmoke_Destroy
0885B                           
0885B                           	; Last Fryguy mini flame spawns the door
0885B FE 9B 04                  	INC EnemyArray_SpawnsDoor, X
0885E F6 90                     	INC ObjectType, X
08860 4C 17 85                  	JMP HandleEnemyState_Dead_BossBeaten
08863                           
08863                           HandleEnemyState_PuffOfSmoke_Destroy:
08863 4C 00 00                  	JMP EnemyDestroy
08866                           
08866                           
08866                           HandleEnemyState_Sand:
08866 20 00 00                  	JSR HandleEnemyScreenBounds
08869                           
08869 A9 12                     	LDA #$12
0886B 95 65                     	STA ObjectAttributes, X
0886D B5 86                     	LDA ObjectTimer1, X
0886F F0 00                     	BEQ loc_BANK2_8888
08871                           
08871 A9 F8                     	LDA #$F8
08873 95 47                     	STA ObjectYVelocity, X
08875 20 00 00                  	JSR ApplyObjectPhysicsY
08878                           
08878 A9 B2                     	LDA #$B2
0887A B4 86                     	LDY ObjectTimer1, X
0887C C0 10                     	CPY #$10
0887E B0 00                     	BCS loc_BANK2_8885
08880                           
08880 A9 80                     	LDA #SpriteFlags46E_MirrorAnimation
08882 9D 6E 04                  	STA EnemyArray_46E, X
08885 A9 01                     	LDA #ObjAttrib_Palette1
08887 95 65                     	STA ObjectAttributes, X
08889 0A                        	ASL A
0888A 95 6F                     	STA EnemyMovementDirection, X
0888C F6 9F                     	INC ObjectAnimationTimer, X
0888E 20 00 00                  	JSR IncrementAnimationTimerBy2
08891                           
08891 A9 B4                     	LDA #$B4
08893                           
08893                           loc_BANK2_8885:
08893 4C 00 00                  	JMP RenderSprite_DrawObject
08896                           
08896                           ; ---------------------------------------------------------------------------
08896                           
08896                           loc_BANK2_8888:
08896 EC 2D 04                  	CPX ObjectBeingCarriedIndex
08899 D0 00                     	BNE loc_BANK2_8891
0889B                           
0889B A9 00                     	LDA #$00
0889D 85 9C                     	STA HoldingItem
0889F                           
0889F                           loc_BANK2_8891:
0889F 4C 00 00                  	JMP EnemyDestroy
088A2                           
088A2                           
088A2                           ;
088A2                           ; Ensures that we're properly cropping sprites that are outside of the
088A2                           ; horizontal screenscreen bounds by masking tiles that cross the threshold
088A2                           ;
088A2                           ; Output
088A2                           ;   byte_RAM_EE = sprite clipping (horizontal)
088A2                           ;
088A2                           ScreenSpriteClipping_Horizontal:
088A2 A9 00                     	LDA #$00
088A4 85 EE                     	STA byte_RAM_EE
088A6 B5 65                     	LDA ObjectAttributes, X
088A8 A0 01                     	LDY #$01
088AA                           
088AA                           	; Checks for double-wide sprites
088AA 29 04                     	AND #ObjAttrib_Horizontal
088AC D0 00                     	BNE ScreenSpriteClipping_Horizontal_WideSprite
088AE                           
088AE B5 90                     	LDA ObjectType, X
088B0 C9 1A                     	CMP #Enemy_Pokey
088B2 F0 00                     	BEQ ScreenSpriteClipping_Horizontal_WideSprite
088B4                           
088B4 C9 08                     	CMP #Enemy_Ostro
088B6 F0 00                     	BEQ ScreenSpriteClipping_Horizontal_WideSprite
088B8                           
088B8 C9 2D                     	CMP #Enemy_HawkmouthBoss
088BA F0 00                     	BEQ ScreenSpriteClipping_Horizontal_WideSprite
088BC                           
088BC C9 21                     	CMP #Enemy_Clawgrip
088BE F0 00                     	BEQ ScreenSpriteClipping_Horizontal_WideSprite
088C0                           
088C0 BD 6E 04                  	LDA EnemyArray_46E, X
088C3 29 20                     	AND #SpriteFlags46E_WideSprite
088C5 F0 00                     	BEQ ScreenSpriteClipping_Horizontal_Loop
088C7                           
088C7                           ScreenSpriteClipping_Horizontal_WideSprite:
088C7 A0 03                     	LDY #$03
088C9                           
088C9                           ; seems to be logic for positioning sprites onscreen
088C9                           ScreenSpriteClipping_Horizontal_Loop:
088C9 B5 29                     	LDA ObjectXLo, X
088CB 18                        	CLC
088CC 79 00 00                  	ADC HorizontalScreenBoundsThreshold, Y
088CF 85 0E                     	STA byte_RAM_E
088D1                           
088D1 B5 15                     	LDA ObjectXHi, X
088D3 69 00                     	ADC #$00
088D5 85 0F                     	STA byte_RAM_F
088D7                           
088D7 A5 0E                     	LDA byte_RAM_E
088D9 CD C0 04                  	CMP ScreenBoundaryLeftLo
088DC A5 0F                     	LDA byte_RAM_F
088DE ED BE 04                  	SBC ScreenBoundaryLeftHi
088E1                           
088E1 F0 00                     	BEQ ScreenSpriteClipping_Horizontal_Next
088E3                           
088E3 A5 EE                     	LDA byte_RAM_EE
088E5 19 00 00                  	ORA HorizontalScreenBoundsClipping, Y
088E8 85 EE                     	STA byte_RAM_EE
088EA                           
088EA                           ScreenSpriteClipping_Horizontal_Next:
088EA 88                        	DEY
088EB 10 DC                     	BPL ScreenSpriteClipping_Horizontal_Loop
088ED                           
088ED                           ScreenSpriteClipping_Exit:
088ED 60                        	RTS
088EE                           
088EE                           
088EE                           HorizontalScreenBoundsClipping:
088EE 08                        	.db %00001000
088EF 04                        	.db %00000100
088F0 02                        	.db %00000010
088F1 01                        	.db %00000001
088F2                           
088F2                           HorizontalScreenBoundsThreshold:
088F2 00                        	.db $00
088F3 08                        	.db $08
088F4 10                        	.db $10
088F5 18                        	.db $18
088F6                           
088F6                           
088F6                           ;
088F6                           ; Related to destroying offscreen sprites
088F6                           ;
088F6                           ; Output
088F6                           ;   byte_RAM_EE = sprite clipping (horizontal)
088F6                           ;   byte_RAM_EF = sprite clipping (vertical)
088F6                           ;
088F6                           HandleEnemyScreenBounds:
088F6 20 A2 88                  	JSR ScreenSpriteClipping_Horizontal
088F9                           
088F9                           	; First, determine whether we're doing any vertical cropping
088F9                           ScreenSpriteClipping_Vertical:
088F9 A9 22                     	LDA #$22
088FB B4 90                     	LDY ObjectType, X
088FD C0 2C                     	CPY #Enemy_Wart
088FF F0 00                     	BEQ ScreenSpriteClipping_Vertical_CheckScreenY
08901                           
08901 C0 1F                     	CPY #Enemy_Tryclyde
08903 F0 00                     	BEQ ScreenSpriteClipping_Vertical_CheckScreenY
08905                           
08905 A9 10                     	LDA #$10
08907                           ScreenSpriteClipping_Vertical_CheckScreenY:
08907 75 33                     	ADC ObjectYLo, X
08909 85 00                     	STA byte_RAM_0
0890B B5 1F                     	LDA ObjectYHi, X
0890D 69 00                     	ADC #$00
0890F 85 01                     	STA byte_RAM_1
08911                           
08911 A5 00                     	LDA byte_RAM_0
08913 C5 CB                     	CMP ScreenYLo
08915 A5 01                     	LDA byte_RAM_1
08917 E5 CA                     	SBC ScreenYHi
08919 85 EF                     	STA byte_RAM_EF
0891B                           
0891B                           	; The next few enemies are preserved even when they're offscreen
0891B C0 17                     	CPY #Enemy_Phanto
0891D F0 CE                     	BEQ ScreenSpriteClipping_Exit
0891F                           
0891F C0 41                     	CPY #Enemy_FlyingCarpet
08921 F0 CA                     	BEQ ScreenSpriteClipping_Exit
08923                           
08923 C0 43                     	CPY #Enemy_HawkmouthLeft
08925 F0 C6                     	BEQ ScreenSpriteClipping_Exit
08927                           
08927 C0 2D                     	CPY #Enemy_HawkmouthBoss
08929 F0 C2                     	BEQ ScreenSpriteClipping_Exit
0892B                           
0892B                           	; Optimization? Skips despawn evaluation on alternating frames
0892B 8A                        	TXA
0892C 29 01                     	AND #$01
0892E 85 00                     	STA byte_RAM_0
08930 A5 10                     	LDA byte_RAM_10
08932 29 01                     	AND #$01
08934 45 00                     	EOR byte_RAM_0
08936 D0 B5                     	BNE ScreenSpriteClipping_Exit
08938                           
08938                           	; Calculate vertical despawn boundaries
08938 A5 CB                     	LDA ScreenYLo
0893A E9 30                     	SBC #$30
0893C 85 01                     	STA byte_RAM_1
0893E                           
0893E A5 CA                     	LDA ScreenYHi
08940 E9 00                     	SBC #$00
08942 85 00                     	STA byte_RAM_0
08944 E6 00                     	INC byte_RAM_0
08946                           
08946 A5 CB                     	LDA ScreenYLo
08948 69 FF                     	ADC #$FF
0894A 08                        	PHP
0894B 69 30                     	ADC #$30
0894D 85 03                     	STA byte_RAM_3
0894F                           
0894F A5 CA                     	LDA ScreenYHi
08951 69 00                     	ADC #$00
08953 28                        	PLP
08954 69 00                     	ADC #$00
08956 85 02                     	STA byte_RAM_2
08958 E6 02                     	INC byte_RAM_2
0895A                           
0895A                           	; Evaluate object against vertical despawn boundaries
0895A B5 33                     	LDA ObjectYLo, X
0895C C5 01                     	CMP byte_RAM_1
0895E B4 1F                     	LDY ObjectYHi, X
08960 C8                        	INY
08961 98                        	TYA
08962 E5 00                     	SBC byte_RAM_0
08964 30 00                     	BMI HandleEnemyScreenBounds_CheckCarried
08966                           
08966 B5 33                     	LDA ObjectYLo, X
08968 C5 03                     	CMP byte_RAM_3
0896A B4 1F                     	LDY ObjectYHi, X
0896C C8                        	INY
0896D 98                        	TYA
0896E E5 02                     	SBC byte_RAM_2
08970 10 00                     	BPL HandleEnemyScreenBounds_CheckCarried
08972                           
08972                           	; Calculate horizontal despawn boundaries
08972 AD C0 04                  	LDA ScreenBoundaryLeftLo
08975 E9 30                     	SBC #$30
08977 85 01                     	STA byte_RAM_1
08979                           
08979 AD BE 04                  	LDA ScreenBoundaryLeftHi
0897C E9 00                     	SBC #$00
0897E 85 00                     	STA byte_RAM_0
08980 E6 00                     	INC byte_RAM_0
08982                           
08982 AD C1 04                  	LDA ScreenBoundaryRightLo
08985 69 30                     	ADC #$30
08987 85 03                     	STA byte_RAM_3
08989                           
08989 AD BF 04                  	LDA ScreenBoundaryRightHi
0898C 69 00                     	ADC #$00
0898E 85 02                     	STA byte_RAM_2
08990 E6 02                     	INC byte_RAM_2
08992                           
08992                           	; Evaluate object against horizontal despawn boundaries
08992 B5 29                     	LDA ObjectXLo, X
08994 C5 01                     	CMP byte_RAM_1
08996 B4 15                     	LDY ObjectXHi, X
08998 C8                        	INY
08999 98                        	TYA
0899A E5 00                     	SBC byte_RAM_0
0899C 30 00                     	BMI HandleEnemyScreenBounds_CheckDeathSquawk:
0899E                           
0899E B5 29                     	LDA ObjectXLo, X
089A0 C5 03                     	CMP byte_RAM_3
089A2 B4 15                     	LDY ObjectXHi, X
089A4 C8                        	INY
089A5 98                        	TYA
089A6 E5 02                     	SBC byte_RAM_2
089A8 30 00                     	BMI EnemyDestroy_Exit
089AA                           
089AA                           HandleEnemyScreenBounds_CheckDeathSquawk:
089AA                           	; If this has the boss death squawk, do not despawn
089AA B4 90                     	LDY ObjectType, X
089AC B9 00 00                  	LDA EnemyArray_46E_Data, Y
089AF 29 08                     	AND #SpriteFlags46E_DeathSquawk
089B1 D0 00                     	BNE EnemyDestroy_Exit
089B3                           
089B3                           HandleEnemyScreenBounds_CheckCarried:
089B3                           	; If the player is carrying this object, do not despawn
089B3 B5 A8                     	LDA ObjectBeingCarriedTimer, X
089B5 D0 00                     	BNE EnemyDestroy_Exit
089B7                           
089B7                           EnemyDestroy:
089B7                           	; load raw enemy data offset so we can allow the level object to respawn
089B7 BC 41 04                  	LDY EnemyRawDataOffset, X
089BA                           	; nothing to reset if offset is invalid
089BA 30 00                     	BMI EnemyDestroy_AfterAllowRespawn
089BC                           
089BC                           	; disabling bit 7 allows the object to respawn
089BC B1 CC                     	LDA (RawEnemyData), Y
089BE 29 7F                     	AND #$7F
089C0 91 CC                     	STA (RawEnemyData), Y
089C2                           
089C2                           EnemyDestroy_AfterAllowRespawn:
089C2 A9 00                     	LDA #EnemyState_Inactive
089C4 95 51                     	STA EnemyState, X
089C6                           
089C6                           EnemyDestroy_Exit:
089C6 60                        	RTS
089C7                           
089C7                           
089C7                           ; ---------------------------------------------------------------------------
089C7                           
089C7                           HandleEnemyState_Alive:
089C7 A9 01                     	LDA #$01
089C9 9D A4 04                  	STA ObjectNonSticky, X
089CC BC 2F 04                  	LDY ObjectProjectileTimer, X
089CF 88                        	DEY
089D0 C0 1F                     	CPY #$1F
089D2 B0 00                     	BCS loc_BANK2_89C9
089D4                           
089D4 FE 2F 04                  	INC ObjectProjectileTimer, X
089D7                           
089D7                           loc_BANK2_89C9:
089D7 20 F6 88                  	JSR HandleEnemyScreenBounds
089DA                           
089DA A5 50                     	LDA PlayerState
089DC C9 08                     	CMP #PlayerState_ChangingSize
089DE F0 00                     	BEQ loc_BANK2_89E2
089E0                           
089E0 A5 D8                     	LDA NeedsScroll
089E2 29 04                     	AND #%00000100
089E4 D0 00                     	BNE loc_BANK2_8A07
089E6                           
089E6 AD FF 04                  	LDA StopwatchTimer
089E9 D0 00                     	BNE loc_BANK2_89E2
089EB                           
089EB BD 38 04                  	LDA ObjectStunTimer, X
089EE F0 00                     	BEQ loc_BANK2_8A0A
089F0                           
089F0                           loc_BANK2_89E2:
089F0 B5 90                     	LDA ObjectType, X
089F2                           
089F2                           IFDEF REV_A
089F2                           	CMP #Enemy_FryguySplit
089F2                           	BEQ loc_BANK2_8A0A
089F2                           ENDIF
089F2                           
089F2 C9 00                     	CMP #Enemy_Heart
089F4 F0 00                     	BEQ loc_BANK2_8A0A
089F6                           
089F6 C9 41                     	CMP #Enemy_FlyingCarpet
089F8 F0 00                     	BEQ loc_BANK2_89F0
089FA                           
089FA C9 32                     	CMP #Enemy_VegetableSmall
089FC B0 00                     	BCS loc_BANK2_8A0A
089FE                           
089FE                           loc_BANK2_89F0:
089FE 20 00 00                  	JSR EnemyBehavior_CheckDamagedInterrupt
08A01                           
08A01 BD 2F 04                  	LDA ObjectProjectileTimer, X
08A04 F0 00                     	BEQ loc_BANK2_89FB
08A06                           
08A06 20 85 85                  	JSR ApplyObjectMovement
08A09                           
08A09                           loc_BANK2_89FB:
08A09 B5 A8                     	LDA ObjectBeingCarriedTimer, X
08A0B F0 00                     	BEQ loc_BANK2_8A04
08A0D                           
08A0D D6 9F                     	DEC ObjectAnimationTimer, X
08A0F                           
08A0F                           loc_BANK2_8A01:
08A0F 4C 00 00                  	JMP CarryObject
08A12                           
08A12                           ; ---------------------------------------------------------------------------
08A12                           
08A12                           loc_BANK2_8A04:
08A12 20 00 00                  	JSR CheckObjectCollision
08A15                           
08A15                           loc_BANK2_8A07:
08A15 4C 00 00                  	JMP RenderSprite
08A18                           
08A18                           ; ---------------------------------------------------------------------------
08A18                           
08A18                           loc_BANK2_8A0A:
08A18 A0 01                     	LDY #$01
08A1A B5 3D                     	LDA ObjectXVelocity, X
08A1C F0 00                     	BEQ loc_BANK2_8A15
08A1E                           
08A1E 10 00                     	BPL loc_BANK2_8A13
08A20                           
08A20 C8                        	INY
08A21                           
08A21                           loc_BANK2_8A13:
08A21 94 6F                     	STY EnemyMovementDirection, X
08A23                           
08A23                           loc_BANK2_8A15:
08A23 B4 90                     	LDY ObjectType, X
08A25 B9 00 00                  	LDA ObjectAttributeTable, Y
08A28 29 20                     	AND #ObjAttrib_Palette0 | ObjAttrib_BehindBackground
08A2A D0 00                     	BNE loc_BANK2_8A41
08A2C                           
08A2C B5 65                     	LDA ObjectAttributes, X
08A2E 29 DF                     	AND #ObjAttrib_Palette | ObjAttrib_Horizontal | ObjAttrib_FrontFacing | ObjAttrib_Mirrored | ObjAttrib_16x32 | ObjAttrib_UpsideDown
08A30 95 65                     	STA ObjectAttributes, X
08A32 B5 A8                     	LDA ObjectBeingCarriedTimer, X
08A34 C9 02                     	CMP #$02
08A36 90 00                     	BCC loc_BANK2_8A41
08A38                           
08A38 B5 90                     	LDA ObjectType, X
08A3A C9 09                     	CMP #Enemy_BobOmb
08A3C D0 00                     	BNE loc_BANK2_8A36
08A3E                           
08A3E B5 5B                     	LDA EnemyCollision, X
08A40 29 04                     	AND #CollisionFlags_Down
08A42 D0 00                     	BNE loc_BANK2_8A3B
08A44                           
08A44                           loc_BANK2_8A36:
08A44 B9 00 00                  	LDA ObjectAttributeTable, Y
08A47 10 00                     	BPL loc_BANK2_8A41
08A49                           
08A49                           loc_BANK2_8A3B:
08A49 B5 65                     	LDA ObjectAttributes, X
08A4B 09 20                     	ORA #ObjAttrib_BehindBackground
08A4D 95 65                     	STA ObjectAttributes, X
08A4F                           
08A4F                           loc_BANK2_8A41:
08A4F 20 00 00                  	JSR RunEnemyBehavior
08A52                           
08A52 B5 1F                     	LDA ObjectYHi, X
08A54 30 00                     	BMI loc_BANK2_8A50
08A56                           
08A56 AD 2C 04                  	LDA SpriteTempScreenY
08A59 C9 E8                     	CMP #$E8
08A5B 90 00                     	BCC loc_BANK2_8A50
08A5D                           
08A5D 60                        	RTS
08A5E                           
08A5E                           ; ---------------------------------------------------------------------------
08A5E                           
08A5E                           loc_BANK2_8A50:
08A5E 4C 00 00                  	JMP CheckObjectCollision
08A61                           
08A61                           ; ---------------------------------------------------------------------------
08A61                           
08A61                           RunEnemyBehavior:
08A61 B5 90                     	LDA ObjectType, X
08A63 20 00 00                  	JSR JumpToTableAfterJump
08A66                           
08A66                           
08A66                           EnemyBehaviorPointerTable:
08A66 00 00                     	.dw EnemyBehavior_00 ; $00
08A68 00 00                     	.dw EnemyBehavior_BasicWalker ; $01
08A6A 00 00                     	.dw EnemyBehavior_BasicWalker ; $02
08A6C 00 00                     	.dw EnemyBehavior_BasicWalker ; $03
08A6E 00 00                     	.dw EnemyBehavior_BasicWalker ; $04
08A70 00 00                     	.dw EnemyBehavior_BasicWalker ; $05
08A72 00 00                     	.dw EnemyBehavior_BasicWalker ; $06
08A74 00 00                     	.dw EnemyBehavior_BasicWalker ; $07
08A76 00 00                     	.dw EnemyBehavior_Ostro ; $08
08A78 00 00                     	.dw EnemyBehavior_BobOmb ; $09
08A7A 00 00                     	.dw EnemyBehavior_Albatoss ; $0A
08A7C 00 00                     	.dw EnemyBehavior_Albatoss ; $0B
08A7E 00 00                     	.dw EnemyBehavior_Albatoss ; $0C
08A80 00 00                     	.dw EnemyBehavior_NinjiRunning ; $0D
08A82 00 00                     	.dw EnemyBehavior_NinjiJumping ; $0E
08A84 00 00                     	.dw EnemyBehavior_Beezo ; $0F
08A86 00 00                     	.dw EnemyBehavior_Beezo ; $10
08A88 00 00                     	.dw EnemyBehavior_WartBubble ; $11
08A8A 00 00                     	.dw EnemyBehavior_Pidgit ; $12
08A8C 00 00                     	.dw EnemyBehavior_Trouter ; $13
08A8E 00 00                     	.dw EnemyBehavior_Hoopstar ; $14
08A90 00 00                     	.dw EnemyBehavior_JarGenerators ; $15
08A92 00 00                     	.dw EnemyBehavior_JarGenerators ; $16
08A94 00 00                     	.dw EnemyBehavior_Phanto ; $17
08A96 00 00                     	.dw EnemyBehavior_CobratJar ; $18
08A98 00 00                     	.dw EnemyBehavior_CobratGround ; $19
08A9A 00 00                     	.dw EnemyBehavior_Pokey ; $1A
08A9C 00 00                     	.dw EnemyBehavior_BulletAndEgg ; $1B
08A9E 00 00                     	.dw EnemyBehavior_Birdo ; $1C
08AA0 00 00                     	.dw EnemyBehavior_Mouser ; $1D
08AA2 00 00                     	.dw EnemyBehavior_BulletAndEgg ; $1E
08AA4 00 00                     	.dw EnemyBehavior_Tryclyde ; $1F
08AA6 00 00                     	.dw EnemyBehavior_Fireball ; $20
08AA8 00 00                     	.dw EnemyBehavior_Clawgrip ; $21
08AAA 00 00                     	.dw EnemyBehavior_ClawgripRock ; $22
08AAC 00 00                     	.dw EnemyBehavior_PanserRedAndGray ; $23
08AAE 00 00                     	.dw EnemyBehavior_PanserPink ; $24
08AB0 00 00                     	.dw EnemyBehavior_PanserRedAndGray ; $25
08AB2 00 00                     	.dw EnemyBehavior_Autobomb ; $26
08AB4 00 00                     	.dw EnemyBehavior_AutobombFire ; $27
08AB6 00 00                     	.dw EnemyBehavior_WhaleSpout ; $28
08AB8 00 00                     	.dw EnemyBehavior_Flurry ; $29
08ABA 00 00                     	.dw EnemyBehavior_Fryguy ; $2A
08ABC 00 00                     	.dw EnemyBehavior_FryguySplit ; $2B
08ABE 00 00                     	.dw EnemyBehavior_Wart ; $2C
08AC0 00 00                     	.dw EnemyBehavior_HawkmouthBoss ; $2D
08AC2 00 00                     	.dw EnemyBehavior_Spark ; $2E
08AC4 00 00                     	.dw EnemyBehavior_Spark ; $2F
08AC6 00 00                     	.dw EnemyBehavior_Spark ; $30
08AC8 00 00                     	.dw EnemyBehavior_Spark ; $31
08ACA 00 00                     	.dw EnemyBehavior_Vegetable ; $32
08ACC 00 00                     	.dw EnemyBehavior_Vegetable ; $33
08ACE 00 00                     	.dw EnemyBehavior_Vegetable ; $34
08AD0 00 00                     	.dw EnemyBehavior_Shell ; $35
08AD2 00 00                     	.dw EnemyBehavior_Coin ; $36
08AD4 00 00                     	.dw EnemyBehavior_Bomb ; $37
08AD6 00 00                     	.dw EnemyBehavior_Rocket ; $38
08AD8 00 00                     	.dw EnemyBehavior_MushroomBlockAndPOW ; $39
08ADA 00 00                     	.dw EnemyBehavior_MushroomBlockAndPOW ; $3A
08ADC 00 00                     	.dw EnemyBehavior_FallingLogs ; $3B
08ADE 00 00                     	.dw EnemyBehavior_SubspaceDoor ; $3C
08AE0 00 00                     	.dw EnemyBehavior_Key ; $3D
08AE2 00 00                     	.dw EnemyBehavior_SubspacePotion ; $3E
08AE4 00 00                     	.dw EnemyBehavior_Mushroom ; $3F
08AE6 00 00                     	.dw EnemyBehavior_Mushroom1up ; $40
08AE8 00 00                     	.dw EnemyBehavior_FlyingCarpet ; $41
08AEA 00 00                     	.dw EnemyBehavior_Hawkmouth ; $42
08AEC 00 00                     	.dw EnemyBehavior_Hawkmouth ; $43
08AEE 00 00                     	.dw EnemyBehavior_CrystalBall ; $44
08AF0 00 00                     	.dw EnemyBehavior_Starman ; $45
08AF2 00 00                     	.dw EnemyBehavior_Mushroom ; $46
08AF4                           EnemyBehaviorPointerTable_End:
08AF4                           
08AF4                           
08AF4                           EnemyInit_JarGenerators:
08AF4 20 6B 84                  	JSR EnemyInit_Basic
08AF7                           
08AF7 A9 50                     	LDA #$50
08AF9 95 9F                     	STA ObjectAnimationTimer, X
08AFB 60                        	RTS
08AFC                           
08AFC                           
08AFC                           SparkAccelerationTable:
08AFC F0                        	.db $F0
08AFD E0                        	.db $E0
08AFE F0                        	.db $F0
08AFF E0                        	.db $E0
08B00 10                        	.db $10
08B01 20                        	.db $20
08B02                           
08B02                           
08B02                           EnemyInit_Sparks:
08B02 20 6B 84                  	JSR EnemyInit_Basic
08B05                           
08B05 B4 90                     	LDY ObjectType, X
08B07 B9 CE 8A                  	LDA SparkAccelerationTable - Enemy_Spark1, Y
08B0A 95 3D                     	STA ObjectXVelocity, X
08B0C B9 D0 8A                  	LDA SparkAccelerationTable - Enemy_Spark1 + 2, Y
08B0F 95 47                     	STA ObjectYVelocity, X
08B11 60                        	RTS
08B12                           
08B12                           
08B12                           SparkCollision: ; spark movement based on collision
08B12 0C                        	.db CollisionFlags_Up | CollisionFlags_Down ; horizontal
08B13 03                        	.db CollisionFlags_Left | CollisionFlags_Right ; vertical
08B14                           
08B14                           SparkTurnOffset:
08B14 00                        	.db $00 ; clockwise
08B15 0A                        	.db $0A ; counter-clockwise
08B16                           
08B16                           
08B16                           ;
08B16                           ; Spark movement works by traveling along one axis at a time and turning when
08B16                           ; either colliding along the movement axis or running out of wall along the
08B16                           ; axis perpendicular to movement.
08B16                           ;
08B16                           EnemyBehavior_Spark:
08B16 20 00 00                  	JSR EnemyBehavior_CheckDamagedInterrupt
08B19                           
08B19 20 00 00                  	JSR IncrementAnimationTimerBy2
08B1C                           
08B1C 20 00 00                  	JSR RenderSprite
08B1F                           
08B1F B5 29                     	LDA ObjectXLo, X
08B21 15 33                     	ORA ObjectYLo, X
08B23 29 0F                     	AND #$0F
08B25 D0 00                     	BNE EnemyBehavior_Spark_Move
08B27                           
08B27 20 00 00                  	JSR ObjectTileCollision_SolidBackground
08B2A                           
08B2A BC 77 04                  	LDY EnemyArray_477, X
08B2D B5 5B                     	LDA EnemyCollision, X
08B2F 39 12 8B                  	AND SparkCollision, Y
08B32 F0 00                     	BEQ EnemyBehavior_Spark_Turn
08B34                           
08B34 B9 12 8B                  	LDA SparkCollision, Y
08B37 49 0F                     	EOR #$0F
08B39 35 5B                     	AND EnemyCollision, X
08B3B F0 00                     	BEQ EnemyBehavior_Spark_Move
08B3D                           
08B3D 98                        	TYA
08B3E 49 01                     	EOR #$01
08B40 9D 77 04                  	STA EnemyArray_477, X
08B43 A8                        	TAY
08B44                           
08B44                           ;
08B44                           ; Reverses the direction of movement for the specified axis
08B44                           ;
08B44                           ; Input
08B44                           ;   X = enemy slot
08B44                           ;   Y = movement axis
08B44                           ;
08B44                           EnemyBehavior_Spark_FlipAxisVelocity:
08B44 8A                        	TXA
08B45 18                        	CLC
08B46 79 14 8B                  	ADC SparkTurnOffset, Y
08B49 A8                        	TAY
08B4A B9 3D 00                  	LDA ObjectXVelocity, Y
08B4D 49 FF                     	EOR #$FF
08B4F 69 01                     	ADC #$01
08B51 99 3D 00                  	STA ObjectXVelocity, Y
08B54 60                        	RTS
08B55                           
08B55                           
08B55                           EnemyBehavior_Spark_Turn:
08B55 98                        	TYA
08B56 49 01                     	EOR #$01
08B58 9D 77 04                  	STA EnemyArray_477, X
08B5B 20 44 8B                  	JSR EnemyBehavior_Spark_FlipAxisVelocity
08B5E                           
08B5E                           EnemyBehavior_Spark_Move:
08B5E BD 77 04                  	LDA EnemyArray_477, X
08B61 D0 00                     	BNE EnemyBehavior_Spark_MoveVertical
08B63                           
08B63                           EnemyBehavior_Spark_MoveHorizontal:
08B63 4C 00 00                  	JMP ApplyObjectPhysicsX
08B66                           
08B66                           EnemyBehavior_Spark_MoveVertical:
08B66 4C 00 00                  	JMP ApplyObjectPhysicsY
08B69                           
08B69                           
08B69                           IncrementAnimationTimerBy2:
08B69 F6 9F                     	INC ObjectAnimationTimer, X
08B6B F6 9F                     	INC ObjectAnimationTimer, X
08B6D 60                        	RTS
08B6E                           
08B6E                           
08B6E                           AlbatossSwarmStartXLo:
08B6E F0                        	.db $F0
08B6F 00                        	.db $00
08B70                           
08B70                           AlbatossSwarmStartXHi:
08B70 FF                        	.db $FF
08B71 01                        	.db $01
08B72                           
08B72                           
08B72                           Swarm_AlbatossCarryingBobOmb:
08B72 20 00 00                  	JSR Swarm_CreateEnemy
08B75                           
08B75 79 6E 8B                  	ADC AlbatossSwarmStartXLo, Y
08B78 95 29                     	STA ObjectXLo, X
08B7A AD BE 04                  	LDA ScreenBoundaryLeftHi
08B7D 79 70 8B                  	ADC AlbatossSwarmStartXHi, Y
08B80 95 15                     	STA ObjectXHi, X
08B82 84 01                     	STY byte_RAM_1
08B84 A9 0A                     	LDA #Enemy_AlbatossCarryingBobOmb
08B86 95 90                     	STA ObjectType, X
08B88 20 4F 84                  	JSR SetEnemyAttributes
08B8B                           
08B8B AD AE 05                  	LDA PseudoRNGValue
08B8E 29 1F                     	AND #$1F
08B90 69 20                     	ADC #$20
08B92 95 33                     	STA ObjectYLo, X
08B94 A4 01                     	LDY byte_RAM_1
08B96 20 A3 84                  	JSR EnemyInit_BasicMovement
08B99                           
08B99 16 3D                     	ASL ObjectXVelocity, X
08B9B 60                        	RTS
08B9C                           
08B9C                           
08B9C                           BeezoSwarmStartXLo:
08B9C 00                        	.db $00
08B9D FF                        	.db $FF
08B9E                           
08B9E                           
08B9E                           Swarm_BeezoDiving:
08B9E 20 00 00                  	JSR Swarm_CreateEnemy
08BA1                           
08BA1 79 9C 8B                  	ADC BeezoSwarmStartXLo, Y
08BA4 95 29                     	STA ObjectXLo, X
08BA6 A5 EC                     	LDA IsHorizontalLevel
08BA8 F0 00                     	BEQ Swarm_BeezoDiving_Vertical
08BAA                           
08BAA                           Swarm_BeezoDiving_Horizontal:
08BAA AD BE 04                  	LDA ScreenBoundaryLeftHi
08BAD 69 00                     	ADC #$00
08BAF                           
08BAF                           Swarm_BeezoDiving_Vertical:
08BAF 95 15                     	STA ObjectXHi, X
08BB1 A5 CB                     	LDA ScreenYLo
08BB3 95 33                     	STA ObjectYLo, X
08BB5 A5 CA                     	LDA ScreenYHi
08BB7 95 1F                     	STA ObjectYHi, X
08BB9 84 01                     	STY byte_RAM_1
08BBB A9 0F                     	LDA #Enemy_BeezoDiving
08BBD 95 90                     	STA ObjectType, X
08BBF 20 4F 84                  	JSR SetEnemyAttributes
08BC2                           
08BC2 A4 01                     	LDY byte_RAM_1
08BC4 20 A3 84                  	JSR EnemyInit_BasicMovement
08BC7                           
08BC7 20 DB 84                  	JSR EnemyBeezoDiveSetup
08BCA                           
08BCA 60                        	RTS
08BCB                           
08BCB                           
08BCB                           ;
08BCB                           ; Generates a swarm enemy
08BCB                           ;
08BCB                           ; Output
08BCB                           ;   A = ScreenBoundaryLeftLo
08BCB                           ;   X = enemy slot (byte_RAM_0)
08BCB                           ;   Y = enemy direction
08BCB                           ;
08BCB                           Swarm_CreateEnemy:
08BCB                           	; Pause for the Stopwatch
08BCB AD FF 04                  	LDA StopwatchTimer
08BCE D0 00                     	BNE Swarm_CreateEnemy_Fail
08BD0                           
08BD0                           	; Generate an enemy when the counter overflows
08BD0 AD 23 06                  	LDA SwarmCounter
08BD3 18                        	CLC
08BD4 69 03                     	ADC #$03
08BD6 8D 23 06                  	STA SwarmCounter
08BD9 90 00                     	BCC Swarm_CreateEnemy_Fail
08BDB                           
08BDB                           	; Create the enemy, but bail if it's not possible
08BDB 20 00 00                  	JSR CreateEnemy
08BDE                           
08BDE 30 00                     	BMI Swarm_CreateEnemy_Fail
08BE0                           
08BE0                           	; Pick a direction
08BE0 A0 00                     	LDY #$00
08BE2 A5 10                     	LDA byte_RAM_10
08BE4 29 40                     	AND #$40
08BE6 D0 00                     	BNE Swarm_CreateEnemy_Exit
08BE8                           
08BE8 C8                        	INY
08BE9                           
08BE9                           Swarm_CreateEnemy_Exit:
08BE9 A6 00                     	LDX byte_RAM_0
08BEB AD C0 04                  	LDA ScreenBoundaryLeftLo
08BEE 60                        	RTS
08BEF                           
08BEF                           Swarm_CreateEnemy_Fail:
08BEF                           	; Break out of the parent swarm subroutine
08BEF 68                        	PLA
08BF0 68                        	PLA
08BF1 60                        	RTS
08BF2                           
08BF2                           
08BF2                           EnemyBehavior_Fireball:
08BF2 20 00 00                  	JSR ObjectTileCollision
08BF5                           
08BF5 20 00 00                  	JSR sub_BANK2_927A
08BF8                           
08BF8 20 00 00                  	JSR EnemyBehavior_CheckDamagedInterrupt
08BFB                           
08BFB 20 00 00                  	JSR RenderSprite
08BFE                           
08BFE B5 79                     	LDA EnemyVariable, X
08C00 D0 00                     	BNE EnemyBehavior_Fireball_CheckCollision
08C02                           
08C02 4C 85 85                  	JMP ApplyObjectMovement
08C05                           
08C05                           
08C05                           EnemyBehavior_Fireball_CheckCollision:
08C05 B5 5B                     	LDA EnemyCollision, X
08C07 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
08C09 F0 00                     	BEQ EnemyBehavior_Fireball_Exit
08C0B                           
08C0B 20 00 00                  	JSR TurnIntoPuffOfSmoke
08C0E                           
08C0E                           EnemyBehavior_Fireball_Exit:
08C0E 4C 00 00                  	JMP ApplyObjectPhysics
08C11                           
08C11                           
08C11                           PanserFireXVelocity:
08C11 10                        	.db $10
08C12 F0                        	.db $F0
08C13                           
08C13                           
08C13                           EnemyBehavior_PanserPink:
08C13 B5 9F                     	LDA ObjectAnimationTimer, X
08C15 0A                        	ASL A
08C16 D0 00                     	BNE EnemyBehavior_PanserRedAndGray
08C18                           
08C18 20 A0 84                  	JSR EnemyInit_BasicMovementTowardPlayer
08C1B                           
08C1B                           EnemyBehavior_PanserRedAndGray:
08C1B 20 00 00                  	JSR ObjectTileCollision
08C1E                           
08C1E B5 5B                     	LDA EnemyCollision, X
08C20 48                        	PHA
08C21 29 04                     	AND #CollisionFlags_Down
08C23 F0 00                     	BEQ loc_BANK2_8C1A
08C25                           
08C25 20 00 00                  	JSR ResetObjectYVelocity
08C28                           
08C28                           loc_BANK2_8C1A:
08C28 68                        	PLA
08C29 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
08C2B F0 00                     	BEQ loc_BANK2_8C22
08C2D                           
08C2D 20 00 00                  	JSR EnemyBehavior_TurnAround
08C30                           
08C30                           loc_BANK2_8C22:
08C30 20 85 85                  	JSR ApplyObjectMovement
08C33                           
08C33 A9 83                     	LDA #SpriteFlags46E_Damage | SpriteFlags46E_Unliftable | SpriteFlags46E_MirrorAnimation
08C35 9D 6E 04                  	STA EnemyArray_46E, X
08C38 A9 02                     	LDA #$02
08C3A 95 6F                     	STA EnemyMovementDirection, X
08C3C 20 00 00                  	JSR EnemyBehavior_CheckDamagedInterrupt
08C3F                           
08C3F F6 9F                     	INC ObjectAnimationTimer, X
08C41 B5 9F                     	LDA ObjectAnimationTimer, X
08C43 29 2F                     	AND #$2F
08C45 D0 00                     	BNE loc_BANK2_8C3D
08C47                           
08C47 A9 10                     	LDA #$10
08C49 95 86                     	STA ObjectTimer1, X
08C4B                           
08C4B                           loc_BANK2_8C3D:
08C4B B4 86                     	LDY ObjectTimer1, X
08C4D F0 00                     	BEQ loc_BANK2_8C8E
08C4F                           
08C4F C0 06                     	CPY #$06
08C51 D0 00                     	BNE loc_BANK2_8C7C
08C53                           
08C53 20 00 00                  	JSR CreateEnemy
08C56                           
08C56 30 00                     	BMI loc_BANK2_8C7C
08C58                           
08C58 B5 90                     	LDA ObjectType, X
08C5A 48                        	PHA
08C5B A6 00                     	LDX byte_RAM_0
08C5D AD AE 05                  	LDA PseudoRNGValue
08C60 29 0F                     	AND #$0F
08C62 09 BC                     	ORA #$BC
08C64 95 47                     	STA ObjectYVelocity, X
08C66 20 00 00                  	JSR EnemyFindWhichSidePlayerIsOn
08C69                           
08C69 68                        	PLA
08C6A C9 25                     	CMP #Enemy_PanserStationaryFiresUp
08C6C B9 11 8C                  	LDA PanserFireXVelocity, Y
08C6F 90 00                     	BCC loc_BANK2_8C65
08C71                           
08C71 A9 00                     	LDA #$00
08C73                           
08C73                           loc_BANK2_8C65:
08C73 95 3D                     	STA ObjectXVelocity, X
08C75 B5 29                     	LDA ObjectXLo, X
08C77 E9 05                     	SBC #$05
08C79 95 29                     	STA ObjectXLo, X
08C7B B5 15                     	LDA ObjectXHi, X
08C7D E9 00                     	SBC #$00
08C7F 95 15                     	STA ObjectXHi, X
08C81 A9 20                     	LDA #Enemy_Fireball
08C83 95 90                     	STA ObjectType, X
08C85 20 4F 84                  	JSR SetEnemyAttributes
08C88                           
08C88 A6 12                     	LDX byte_RAM_12
08C8A                           
08C8A                           loc_BANK2_8C7C:
08C8A B5 65                     	LDA ObjectAttributes, X
08C8C 09 10                     	ORA #$10
08C8E 95 65                     	STA ObjectAttributes, X
08C90 A9 AE                     	LDA #$AE
08C92 20 00 00                  	JSR RenderSprite_DrawObject
08C95                           
08C95 B5 65                     	LDA ObjectAttributes, X
08C97 29 EF                     	AND #$EF
08C99 95 65                     	STA ObjectAttributes, X
08C9B 60                        	RTS
08C9C                           
08C9C                           ; ---------------------------------------------------------------------------
08C9C                           
08C9C                           loc_BANK2_8C8E:
08C9C 4C 00 00                  	JMP RenderSprite
08C9F                           
08C9F                           ; ---------------------------------------------------------------------------
08C9F                           
08C9F                           EnemyInit_Key:
08C9F A0 05                     	LDY #$05
08CA1                           
08CA1                           loc_BANK2_8C93:
08CA1 B9 51 00                  	LDA EnemyState, Y
08CA4 F0 00                     	BEQ loc_BANK2_8CA3
08CA6                           
08CA6                           loc_BANK2_8C98:
08CA6 C4 12                     	CPY byte_RAM_12
08CA8 F0 00                     	BEQ loc_BANK2_8CA3
08CAA                           
08CAA B9 90 00                  	LDA ObjectType, Y
08CAD C9 3D                     	CMP #Enemy_Key
08CAF F0 00                     	BEQ loc_BANK2_8CAE
08CB1                           
08CB1                           loc_BANK2_8CA3:
08CB1 88                        	DEY
08CB2 10 ED                     	BPL loc_BANK2_8C93
08CB4                           
08CB4 AD B0 04                  	LDA KeyUsed
08CB7 D0 00                     	BNE loc_BANK2_8CAE
08CB9                           
08CB9                           loc_BANK2_8CAB:
08CB9 4C 00 00                  	JMP EnemyInit_Stationary
08CBC                           
08CBC                           ; ---------------------------------------------------------------------------
08CBC                           
08CBC                           loc_BANK2_8CAE:
08CBC 4C B7 89                  	JMP EnemyDestroy
08CBF                           
08CBF                           ; ---------------------------------------------------------------------------
08CBF                           
08CBF                           EnemyInit_CrystalBallStarmanStopwatch:
08CBF A0 05                     	LDY #$05
08CC1                           
08CC1                           loc_BANK2_8CB3:
08CC1 B9 51 00                  	LDA EnemyState, Y
08CC4 F0 00                     	BEQ loc_BANK2_8CC3
08CC6                           
08CC6 C4 12                     	CPY byte_RAM_12
08CC8 F0 00                     	BEQ loc_BANK2_8CC3
08CCA                           
08CCA B9 90 00                  	LDA ObjectType, Y
08CCD C9 44                     	CMP #Enemy_CrystalBall
08CCF F0 EB                     	BEQ loc_BANK2_8CAE
08CD1                           
08CD1                           loc_BANK2_8CC3:
08CD1 88                        	DEY
08CD2 10 ED                     	BPL loc_BANK2_8CB3
08CD4                           
08CD4 AD B5 04                  	LDA CrystalAndHawkmouthOpenSize
08CD7 D0 E3                     	BNE loc_BANK2_8CAE
08CD9                           
08CD9 F0 DE                     	BEQ loc_BANK2_8CAB
08CDB                           
08CDB 20 00 00                  	JSR CreateEnemy
08CDE                           
08CDE 30 00                     	BMI locret_BANK2_8CF7
08CE0                           
08CE0 A6 00                     	LDX byte_RAM_0
08CE2 A9 45                     	LDA #Enemy_Starman
08CE4 95 90                     	STA ObjectType, X
08CE6 AD C0 04                  	LDA ScreenBoundaryLeftLo
08CE9 69 D0                     	ADC #$D0
08CEB 95 29                     	STA ObjectXLo, X
08CED AD BE 04                  	LDA ScreenBoundaryLeftHi
08CF0 69 00                     	ADC #$00
08CF2 95 15                     	STA ObjectXHi, X
08CF4 A5 CB                     	LDA ScreenYLo
08CF6 69 E0                     	ADC #$E0
08CF8 95 33                     	STA ObjectYLo, X
08CFA A5 CA                     	LDA ScreenYHi
08CFC 69 00                     	ADC #$00
08CFE 95 1F                     	STA ObjectYHi, X
08D00 20 4F 84                  	JSR SetEnemyAttributes
08D03                           
08D03 A6 12                     	LDX byte_RAM_12
08D05                           
08D05                           locret_BANK2_8CF7:
08D05 60                        	RTS
08D06                           
08D06                           ; ---------------------------------------------------------------------------
08D06                           
08D06                           EnemyBehavior_Starman:
08D06 A9 FC                     	LDA #$FC
08D08 95 47                     	STA ObjectYVelocity, X
08D0A A0 F8                     	LDY #$F8
08D0C A5 10                     	LDA byte_RAM_10
08D0E 9D 5C 04                  	STA ObjectFlashTimer, X
08D11 10 00                     	BPL loc_BANK2_8D07
08D13                           
08D13 A0 08                     	LDY #$08
08D15                           
08D15                           loc_BANK2_8D07:
08D15 94 3D                     	STY ObjectXVelocity, X
08D17 4C 82 85                  	JMP RenderSpriteAndApplyObjectMovement
08D1A                           
08D1A                           ; ---------------------------------------------------------------------------
08D1A                           
08D1A                           EnemyBehavior_JarGenerators:
08D1A 20 00 00                  	JSR ObjectTileCollision
08D1D                           
08D1D 29 03                     	AND #$03
08D1F D0 00                     	BNE EnemyBehavior_JarGenerators_Active
08D21                           
08D21 4C B7 89                  	JMP EnemyDestroy
08D24                           
08D24                           EnemyBehavior_JarGenerators_Active:
08D24 F6 9F                     	INC ObjectAnimationTimer, X
08D26 B5 9F                     	LDA ObjectAnimationTimer, X
08D28 0A                        	ASL A
08D29 D0 00                     	BNE locret_BANK2_8D5E
08D2B                           
08D2B 20 00 00                  	JSR CreateEnemy
08D2E                           
08D2E 30 00                     	BMI locret_BANK2_8D5E
08D30                           
08D30 A4 00                     	LDY byte_RAM_0
08D32 B9 29 00                  	LDA ObjectXLo, Y
08D35 38                        	SEC
08D36 E9 06                     	SBC #$06
08D38 99 29 00                  	STA ObjectXLo, Y
08D3B B9 33 00                  	LDA ObjectYLo, Y
08D3E E9 04                     	SBC #$04
08D40 99 33 00                  	STA ObjectYLo, Y
08D43 B9 1F 00                  	LDA ObjectYHi, Y
08D46 E9 00                     	SBC #$00
08D48 99 1F 00                  	STA ObjectYHi, Y
08D4B A9 1A                     	LDA #$1A
08D4D 99 80 04                  	STA EnemyArray_480, Y
08D50 A9 F8                     	LDA #$F8
08D52 99 47 00                  	STA ObjectYVelocity, Y
08D55 B5 90                     	LDA ObjectType, X
08D57 C9 16                     	CMP #Enemy_JarGeneratorBobOmb
08D59 D0 00                     	BNE locret_BANK2_8D5E
08D5B                           
08D5B A9 09                     	LDA #Enemy_BobOmb
08D5D 99 90 00                  	STA ObjectType, Y
08D60 B9 3D 00                  	LDA ObjectXVelocity, Y
08D63 0A                        	ASL A
08D64 99 3D 00                  	STA ObjectXVelocity, Y
08D67 A9 FF                     	LDA #$FF
08D69 99 86 00                  	STA ObjectTimer1, Y
08D6C                           
08D6C                           locret_BANK2_8D5E:
08D6C 60                        	RTS
08D6D                           
08D6D                           
08D6D                           EnemyInit_Hawkmouth:
08D6D D6 33                     	DEC ObjectYLo, X
08D6F D6 33                     	DEC ObjectYLo, X
08D71 A0 01                     	LDY #$01
08D73 8C 1F 71                  	STY HawkmouthCollisionHitboxTop_RAM
08D76 C8                        	INY
08D77 8C 0B 71                  	STY HawkmouthCollisionHitboxLeft_RAM
08D7A                           
08D7A                           
08D7A                           EnemyInit_Stationary:
08D7A 20 6B 84                  	JSR EnemyInit_Basic
08D7D                           
08D7D A9 00                     	LDA #$00
08D7F 95 3D                     	STA ObjectXVelocity, X
08D81 60                        	RTS
08D82                           
08D82                           
08D82                           EnemyBehavior_Hawkmouth:
08D82 A5 EE                     	LDA byte_RAM_EE
08D84 F0 00                     	BEQ loc_BANK2_8D7B
08D86                           
08D86                           loc_BANK2_8D78:
08D86 4C 00 00                  	JMP RenderSprite_HawkmouthLeft
08D89                           
08D89                           ; ---------------------------------------------------------------------------
08D89                           
08D89                           loc_BANK2_8D7B:
08D89 AD B6 04                  	LDA HawkmouthOpenTimer
08D8C F0 00                     	BEQ loc_BANK2_8D8A
08D8E                           
08D8E CE B6 04                  	DEC HawkmouthOpenTimer
08D91 D0 F3                     	BNE loc_BANK2_8D78
08D93                           
08D93 A9 80                     	LDA #SoundEffect1_HawkOpen_WartBarf
08D95 8D 02 06                  	STA SoundEffectQueue1
08D98                           
08D98                           loc_BANK2_8D8A:
08D98 AD B4 04                  	LDA HawkmouthClosing
08D9B F0 00                     	BEQ loc_BANK2_8DBA
08D9D                           
08D9D CE B5 04                  	DEC CrystalAndHawkmouthOpenSize
08DA0 D0 E4                     	BNE loc_BANK2_8D78
08DA2                           
08DA2 A9 00                     	LDA #$00
08DA4 8D B4 04                  	STA HawkmouthClosing
08DA7 A9 01                     	LDA #TransitionType_Door
08DA9 8D 34 05                  	STA TransitionType
08DAC 20 00 00                  	JSR DoAreaReset
08DAF                           
08DAF AC 29 06                  	LDY CurrentLevelRelative
08DB2 AD 35 06                  	LDA CurrentWorldTileset
08DB5 C9 06                     	CMP #$06
08DB7 D0 00                     	BNE loc_BANK2_8DAC
08DB9                           
08DB9 C8                        	INY
08DBA                           
08DBA                           loc_BANK2_8DAC:
08DBA C0 02                     	CPY #$02
08DBC 90 00                     	BCC SetGameModeBonusChance
08DBE                           
08DBE EE 27 06                  	INC DoAreaTransition
08DC1 60                        	RTS
08DC2                           
08DC2                           ; ---------------------------------------------------------------------------
08DC2                           
08DC2                           SetGameModeBonusChance:
08DC2 A9 03                     	LDA #GameMode_BonusChance
08DC4 8D EC 04                  	STA GameMode
08DC7 60                        	RTS
08DC8                           
08DC8                           ; ---------------------------------------------------------------------------
08DC8                           
08DC8                           loc_BANK2_8DBA:
08DC8 AD B5 04                  	LDA CrystalAndHawkmouthOpenSize
08DCB F0 00                     	BEQ RenderSprite_HawkmouthLeft
08DCD                           
08DCD C9 30                     	CMP #$30
08DCF F0 00                     	BEQ loc_BANK2_8DDB
08DD1                           
08DD1 A5 EE                     	LDA byte_RAM_EE
08DD3 29 04                     	AND #$04
08DD5 D0 00                     	BNE RenderSprite_HawkmouthLeft
08DD7                           
08DD7 EE B5 04                  	INC CrystalAndHawkmouthOpenSize
08DDA A5 10                     	LDA byte_RAM_10
08DDC 29 03                     	AND #$03
08DDE D0 00                     	BNE loc_BANK2_8DD8
08DE0                           
08DE0 CE 1F 71                  	DEC HawkmouthCollisionHitboxTop_RAM
08DE3 EE 0B 71                  	INC HawkmouthCollisionHitboxLeft_RAM
08DE6                           
08DE6                           loc_BANK2_8DD8:
08DE6 4C 00 00                  	JMP RenderSprite_HawkmouthLeft
08DE9                           
08DE9                           ; ---------------------------------------------------------------------------
08DE9                           
08DE9                           loc_BANK2_8DDB:
08DE9 B5 5B                     	LDA EnemyCollision, X
08DEB 29 40                     	AND #CollisionFlags_PlayerInsideMaybe
08DED F0 00                     	BEQ RenderSprite_HawkmouthLeft
08DEF                           
08DEF B5 33                     	LDA ObjectYLo, X
08DF1 C5 32                     	CMP PlayerYLo
08DF3 B0 00                     	BCS RenderSprite_HawkmouthLeft
08DF5                           
08DF5 A5 5A                     	LDA PlayerCollision
08DF7 29 04                     	AND #CollisionFlags_Down
08DF9 F0 00                     	BEQ RenderSprite_HawkmouthLeft
08DFB                           
08DFB A5 9C                     	LDA HoldingItem
08DFD D0 00                     	BNE RenderSprite_HawkmouthLeft
08DFF                           
08DFF A9 06                     	LDA #PlayerState_HawkmouthEating
08E01 85 50                     	STA PlayerState
08E03 A9 30                     	LDA #$30
08E05 85 82                     	STA PlayerStateTimer
08E07 A9 FC                     	LDA #$FC
08E09 85 46                     	STA PlayerYVelocity
08E0B A9 80                     	LDA #SoundEffect1_HawkOpen_WartBarf
08E0D 8D 02 06                  	STA SoundEffectQueue1
08E10 EE B4 04                  	INC HawkmouthClosing
08E13                           
08E13                           RenderSprite_HawkmouthLeft:
08E13 A5 EF                     	LDA byte_RAM_EF
08E15 D0 00                     	BNE loc_BANK2_8E60
08E17                           
08E17 B5 90                     	LDA ObjectType, X
08E19 38                        	SEC
08E1A E9 41                     	SBC #$41
08E1C 95 6F                     	STA EnemyMovementDirection, X
08E1E AD B5 04                  	LDA CrystalAndHawkmouthOpenSize
08E21                           
08E21                           ; =============== S U B R O U T I N E =======================================
08E21                           
08E21                           sub_BANK2_8E13:
08E21 85 07                     	STA byte_RAM_7
08E23 4A                        	LSR A
08E24 4A                        	LSR A
08E25 49 FF                     	EOR #$FF
08E27 38                        	SEC
08E28 6D 2C 04                  	ADC SpriteTempScreenY
08E2B 8D 2C 04                  	STA SpriteTempScreenY
08E2E AC BD 04                  	LDY DoorAnimationTimer
08E31 F0 00                     	BEQ loc_BANK2_8E27
08E33                           
08E33 A0 10                     	LDY #$10
08E35                           
08E35                           loc_BANK2_8E27:
08E35 84 F4                     	STY byte_RAM_F4
08E37 A9 8E                     	LDA #$8E
08E39 A4 07                     	LDY byte_RAM_7
08E3B F0 00                     	BEQ loc_BANK2_8E31
08E3D                           
08E3D A9 92                     	LDA #$92
08E3F                           
08E3F                           loc_BANK2_8E31:
08E3F 20 00 00                  	JSR RenderSprite_DrawObject
08E42                           
08E42 A5 07                     	LDA byte_RAM_7
08E44 A8                        	TAY
08E45 4A                        	LSR A
08E46 18                        	CLC
08E47 6D 2C 04                  	ADC SpriteTempScreenY
08E4A 69 08                     	ADC #$08
08E4C C0 00                     	CPY #$00
08E4E D0 00                     	BNE loc_BANK2_8E44
08E50                           
08E50 69 07                     	ADC #$07
08E52                           
08E52                           loc_BANK2_8E44:
08E52 85 00                     	STA byte_RAM_0
08E54 20 00 00                  	JSR FindSpriteSlot
08E57                           
08E57 A2 9A                     	LDX #$9A
08E59 A5 07                     	LDA byte_RAM_7
08E5B F0 00                     	BEQ loc_BANK2_8E58
08E5D                           
08E5D AD B4 04                  	LDA HawkmouthClosing
08E60 F0 00                     	BEQ loc_BANK2_8E56
08E62                           
08E62 A0 10                     	LDY #$10
08E64                           
08E64                           loc_BANK2_8E56:
08E64 A2 96                     	LDX #$96
08E66                           
08E66                           loc_BANK2_8E58:
08E66 84 F4                     	STY byte_RAM_F4
08E68 20 00 00                  	JSR SetSpriteTiles
08E6B                           
08E6B 20 00 00                  	JSR SetSpriteTiles
08E6E                           
08E6E                           loc_BANK2_8E60:
08E6E A6 12                     	LDX byte_RAM_12
08E70 60                        	RTS
08E71                           
08E71                           ; End of function sub_BANK2_8E13
08E71                           
08E71                           ; ---------------------------------------------------------------------------
08E71                           
08E71                           EnemyInit_Trouter:
08E71 20 7A 8D                  	JSR EnemyInit_Stationary
08E74                           
08E74 B5 29                     	LDA ObjectXLo, X
08E76 69 08                     	ADC #$08
08E78 95 29                     	STA ObjectXLo, X
08E7A B5 33                     	LDA ObjectYLo, X
08E7C 4A                        	LSR A
08E7D 4A                        	LSR A
08E7E 4A                        	LSR A
08E7F 4A                        	LSR A
08E80 95 B1                     	STA EnemyArray_B1, X
08E82 A9 80                     	LDA #$80
08E84 95 86                     	STA ObjectTimer1, X
08E86                           
08E86                           EnemyBehavior_Trouter_Exit:
08E86 60                        	RTS
08E87                           
08E87                           
08E87                           ;
08E87                           ; Trouter jump height, which is determined by initial vertical position
08E87                           ;
08E87                           TrouterJumpVelocityY:
08E87 AC                        	.db $AC ; $0
08E88 AE                        	.db $AE ; $1
08E89 B1                        	.db $B1 ; $2
08E8A B5                        	.db $B5 ; $3
08E8B B8                        	.db $B8 ; $4
08E8C BC                        	.db $BC ; $5
08E8D C0                        	.db $C0 ; $6
08E8E C4                        	.db $C4 ; $7
08E8F C8                        	.db $C8 ; $8
08E90 CC                        	.db $CC ; $9
08E91 D2                        	.db $D2 ; $A
08E92 D8                        	.db $D8 ; $B
08E93                           ; They didn't even bother this close to the bottom of the screen!
08E93                           IFDEF EXPAND_TABLES
08E93                           	.db $DF ; $C
08E93                           	.db $E6 ; $D
08E93                           	.db $EF ; $E
08E93                           	.db $F8 ; $F
08E93                           ENDIF
08E93                           
08E93                           TrouterMaxY:
08E93 92                        	.db $92 ; vertical level
08E94 EA                        	.db $EA ; horizontal level
08E95                           
08E95                           
08E95                           EnemyBehavior_Trouter:
08E95 20 00 00                  	JSR EnemyBehavior_CheckDamagedInterrupt
08E98                           
08E98 F6 9F                     	INC ObjectAnimationTimer, X
08E9A 20 00 00                  	JSR EnemyBehavior_Check42FPhysicsInterrupt
08E9D                           
08E9D 20 00 00                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
08EA0                           
08EA0 A9 09                     	LDA #ObjAttrib_Palette1 | ObjAttrib_FrontFacing
08EA2 B4 47                     	LDY ObjectYVelocity, X
08EA4 30 00                     	BMI EnemyBehavior_Trouter_SetObjectAttributes
08EA6                           
08EA6 A9 89                     	LDA #ObjAttrib_Palette1 | ObjAttrib_FrontFacing | ObjAttrib_UpsideDown
08EA8                           EnemyBehavior_Trouter_SetObjectAttributes:
08EA8 95 65                     	STA ObjectAttributes, X
08EAA                           
08EAA A4 EC                     	LDY IsHorizontalLevel
08EAC B5 33                     	LDA ObjectYLo, X
08EAE D9 93 8E                  	CMP TrouterMaxY, Y
08EB1 90 00                     	BCC loc_BANK2_8EB6
08EB3                           
08EB3 B4 86                     	LDY ObjectTimer1, X
08EB5 D0 CF                     	BNE EnemyBehavior_Trouter_Exit
08EB7                           
08EB7 95 33                     	STA ObjectYLo, X
08EB9                           
08EB9 B4 B1                     	LDY EnemyArray_B1, X
08EBB B9 87 8E                  	LDA TrouterJumpVelocityY, Y
08EBE 95 47                     	STA ObjectYVelocity, X
08EC0                           
08EC0 A9 C0                     	LDA #$C0
08EC2 95 86                     	STA ObjectTimer1, X
08EC4                           
08EC4                           loc_BANK2_8EB6:
08EC4 20 00 00                  	JSR ApplyObjectPhysics
08EC7                           
08EC7 F6 47                     	INC ObjectYVelocity, X
08EC9 4C 00 00                  	JMP RenderSprite
08ECC                           
08ECC                           
08ECC                           Enemy_Hoopstar_YVelocity:
08ECC FA                        	.db $FA ; up
08ECD 0C                        	.db $0C ; down
08ECE                           
08ECE                           Enemy_Hoopstar_Attributes:
08ECE 91                        	.db $91 ; up
08ECF 11                        	.db $11 ; down
08ED0                           
08ED0                           
08ED0                           EnemyBehavior_Hoopstar:
08ED0 20 00 00                  	JSR EnemyBehavior_CheckDamagedInterrupt
08ED3                           
08ED3 F6 9F                     	INC ObjectAnimationTimer, X
08ED5 20 00 00                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
08ED8                           
08ED8 20 00 00                  	JSR RenderSprite
08EDB                           
08EDB 20 00 00                  	JSR EnemyBehavior_Check42FPhysicsInterrupt
08EDE                           
08EDE A9 00                     	LDA #$00
08EE0 95 3D                     	STA ObjectXVelocity, X
08EE2                           
08EE2 20 00 00                  	JSR EnemyBehavior_Hoopstar_Climb
08EE5                           
08EE5 BC 77 04                  	LDY EnemyArray_477, X
08EE8 90 00                     	BCC loc_BANK2_8EEC
08EEA                           
08EEA B5 33                     	LDA ObjectYLo, X
08EEC C5 CB                     	CMP ScreenYLo
08EEE B5 1F                     	LDA ObjectYHi, X
08EF0 E5 CA                     	SBC ScreenYHi
08EF2 F0 00                     	BEQ loc_BANK2_8EF3
08EF4                           
08EF4 0A                        	ASL A
08EF5 2A                        	ROL A
08EF6 29 01                     	AND #$01
08EF8 10 00                     	BPL loc_BANK2_8EEF
08EFA                           
08EFA                           loc_BANK2_8EEC:
08EFA 98                        	TYA
08EFB 49 01                     	EOR #$01
08EFD                           
08EFD                           loc_BANK2_8EEF:
08EFD 9D 77 04                  	STA EnemyArray_477, X
08F00 A8                        	TAY
08F01                           
08F01                           loc_BANK2_8EF3:
08F01 B9 CC 8E                  	LDA Enemy_Hoopstar_YVelocity, Y
08F04 95 47                     	STA ObjectYVelocity, X
08F06 B9 CE 8E                  	LDA Enemy_Hoopstar_Attributes, Y
08F09 95 65                     	STA ObjectAttributes, X
08F0B 20 00 00                  	JSR EnemyFindWhichSidePlayerIsOn
08F0E                           
08F0E A5 0F                     	LDA byte_RAM_F
08F10 69 10                     	ADC #$10
08F12 C9 20                     	CMP #$20
08F14 B0 00                     	BCS loc_BANK2_8F0A
08F16                           
08F16 16 47                     	ASL ObjectYVelocity, X
08F18                           
08F18                           loc_BANK2_8F0A:
08F18 4C 00 00                  	JMP ApplyObjectPhysicsY
08F1B                           
08F1B                           ; ---------------------------------------------------------------------------
08F1B                           
08F1B                           EnemyBehavior_00:
08F1B A5 EF                     	LDA byte_RAM_EF
08F1D F0 00                     	BEQ loc_BANK2_8F14
08F1F                           
08F1F 4C B7 89                  	JMP EnemyDestroy
08F22                           
08F22                           ; ---------------------------------------------------------------------------
08F22                           
08F22                           loc_BANK2_8F14:
08F22 A0 FC                     	LDY #$FC
08F24 A5 10                     	LDA byte_RAM_10
08F26 29 20                     	AND #$20
08F28 F0 00                     	BEQ loc_BANK2_8F1E
08F2A                           
08F2A A0 04                     	LDY #$04
08F2C                           
08F2C                           loc_BANK2_8F1E:
08F2C 94 3D                     	STY ObjectXVelocity, X
08F2E A9 F8                     	LDA #$F8
08F30 95 47                     	STA ObjectYVelocity, X
08F32 20 00 00                  	JSR ApplyObjectPhysics
08F35                           
08F35                           RenderSprite_Heart:
08F35 A5 EE                     	LDA byte_RAM_EE
08F37 29 08                     	AND #$08
08F39 05 EF                     	ORA byte_RAM_EF
08F3B D0 00                     	BNE RenderSprite_Heart_Exit
08F3D                           
08F3D                           	; This part of the code seems to only run
08F3D                           	; if the graph we're trying to draw is
08F3D                           	; a heart sprite ...
08F3D A4 F4                     	LDY byte_RAM_F4
08F3F AD 2C 04                  	LDA SpriteTempScreenY
08F42 99 00 02                  	STA SpriteDMAArea, Y
08F45 AD 29 04                  	LDA SpriteTempScreenX
08F48 99 03 02                  	STA SpriteDMAArea + 3, Y
08F4B                           SetHeartSprite:
08F4B A9 D8                     	LDA #$D8
08F4D 99 01 02                  	STA SpriteDMAArea + 1, Y
08F50 A5 10                     	LDA byte_RAM_10
08F52 29 20                     	AND #$20
08F54 49 20                     	EOR #$20
08F56 0A                        	ASL A
08F57 09 01                     	ORA #$01
08F59 99 02 02                  	STA SpriteDMAArea + 2, Y
08F5C                           
08F5C                           RenderSprite_Heart_Exit:
08F5C 60                        	RTS
08F5D                           
08F5D                           
08F5D                           Enemy_Birdo_Attributes:
08F5D 43                        	.db ObjAttrib_Palette3 | ObjAttrib_16x32
08F5E 41                        	.db ObjAttrib_Palette1 | ObjAttrib_16x32
08F5F 42                        	.db ObjAttrib_Palette2 | ObjAttrib_16x32
08F60                           
08F60                           
08F60                           ;
08F60                           ; Initializes a Birdo (and a few other boss enemies, such as Mouser and Clawgrip)
08F60                           ;
08F60                           EnemyInit_Birdo:
08F60 20 6B 84                  	JSR EnemyInit_Basic
08F63                           
08F63 A0 00                     	LDY #$00 ; Default to the Gray Birdo (fires only fireballs)
08F65 B5 29                     	LDA ObjectXLo, X ; Check if this is a special Birdo.
08F67 C9 A0                     	CMP #$A0 ; means this is a Pink Birdo (fires only eggs, slowly)
08F69 F0 00                     	BEQ EnemyInit_Birdo_SetType
08F6B                           
08F6B C8                        	INY
08F6C C9 B0                     	CMP #$B0 ; tile x-position on page = $B
08F6E F0 00                     	BEQ EnemyInit_Birdo_SetType ; If yes, this is a Red Birdo (fires eggs and fireballs)
08F70                           
08F70 C8                        	INY
08F71                           
08F71                           EnemyInit_Birdo_SetType:
08F71 94 79                     	STY EnemyVariable, X ; Set the Birdo type
08F73 B9 5D 8F                  	LDA Enemy_Birdo_Attributes, Y
08F76 95 65                     	STA ObjectAttributes, X
08F78 A9 02                     	LDA #$02
08F7A 9D 65 04                  	STA EnemyHP, X
08F7D                           
08F7D                           EnemyInit_Birdo_Exit:
08F7D B5 15                     	LDA ObjectXHi, X
08F7F 9D EF 04                  	STA EndOfLevelDoorPage, X
08F82 60                        	RTS
08F83                           
08F83                           
08F83                           ProjectileLaunchXOffsets:
08F83 FE                        	.db $FE
08F84 F8                        	.db $F8
08F85                           
08F85                           
08F85                           EnemyBehavior_Birdo:
08F85 20 00 00                  	JSR EnemyBehavior_CheckDamagedInterrupt
08F88                           
08F88 20 00 00                  	JSR ObjectTileCollision
08F8B                           
08F8B A9 00                     	LDA #$00
08F8D 95 3D                     	STA ObjectXVelocity, X
08F8F 20 00 00                  	JSR EnemyFindWhichSidePlayerIsOn
08F92                           
08F92 C8                        	INY
08F93 94 6F                     	STY EnemyMovementDirection, X
08F95 20 00 00                  	JSR RenderSprite
08F98                           
08F98 B5 5B                     	LDA EnemyCollision, X
08F9A 29 04                     	AND #CollisionFlags_Down
08F9C F0 00                     	BEQ loc_BANK2_8FD2
08F9E                           
08F9E 20 00 00                  	JSR ResetObjectYVelocity
08FA1                           
08FA1 A5 10                     	LDA byte_RAM_10
08FA3 D0 00                     	BNE loc_BANK2_8FA3
08FA5                           
08FA5 A9 E0                     	LDA #$E0
08FA7 95 47                     	STA ObjectYVelocity, X
08FA9 D0 00                     	BNE loc_BANK2_8FD2
08FAB                           
08FAB                           
08FAB                           BirdoSpitDelay:
08FAB 7F                        	.db $7F
08FAC 3F                        	.db $3F
08FAD 3F                        	.db $3F
08FAE                           
08FAE                           
08FAE                           ; Health-based Birdo egg/fire chances.
08FAE                           ; If PRNG & $1F >= this, shoot an egg
08FAE                           ; Otherwise, shoot a fireball
08FAE                           BirdoHealthEggProbabilities:
08FAE 08                        	.db $08
08FAF 06                        	.db $06
08FB0 04                        	.db $04
08FB1                           
08FB1                           
08FB1                           loc_BANK2_8FA3:
08FB1 B4 79                     	LDY EnemyVariable, X
08FB3 B9 AB 8F                  	LDA BirdoSpitDelay, Y
08FB6 25 10                     	AND byte_RAM_10
08FB8 D0 00                     	BNE loc_BANK2_8FB6
08FBA                           
08FBA A5 EE                     	LDA byte_RAM_EE
08FBC 29 0C                     	AND #$0C
08FBE D0 00                     	BNE loc_BANK2_8FB6
08FC0                           
08FC0 A9 1C                     	LDA #$1C
08FC2 95 86                     	STA ObjectTimer1, X
08FC4                           
08FC4                           loc_BANK2_8FB6:
08FC4 B4 86                     	LDY ObjectTimer1, X
08FC6 D0 00                     	BNE BirdoBehavior_SpitProjectile
08FC8                           
08FC8 F6 B1                     	INC EnemyArray_B1, X
08FCA B5 B1                     	LDA EnemyArray_B1, X
08FCC 29 40                     	AND #$40
08FCE F0 00                     	BEQ loc_BANK2_901B
08FD0                           
08FD0 20 69 8B                  	JSR IncrementAnimationTimerBy2
08FD3                           
08FD3 A9 0A                     	LDA #$0A
08FD5 B4 B1                     	LDY EnemyArray_B1, X
08FD7 30 00                     	BMI loc_BANK2_8FCD
08FD9                           
08FD9 A9 F6                     	LDA #$F6
08FDB                           
08FDB                           loc_BANK2_8FCD:
08FDB 95 3D                     	STA ObjectXVelocity, X
08FDD 4C 00 00                  	JMP ApplyObjectPhysicsX
08FE0                           
08FE0                           ; ---------------------------------------------------------------------------
08FE0                           
08FE0                           loc_BANK2_8FD2:
08FE0 4C 8D 85                  	JMP ApplyObjectMovement_Vertical
08FE3                           
08FE3                           ; ---------------------------------------------------------------------------
08FE3                           
08FE3                           BirdoBehavior_SpitProjectile:
08FE3 C0 08                     	CPY #$08
08FE5 D0 00                     	BNE loc_BANK2_901B
08FE7                           
08FE7 A9 01                     	LDA #SoundEffect1_BirdoShot
08FE9 8D 02 06                  	STA SoundEffectQueue1
08FEC 20 00 00                  	JSR sub_BANK2_95E5
08FEF                           
08FEF 30 00                     	BMI loc_BANK2_901B
08FF1                           
08FF1 BC 65 04                  	LDY EnemyHP, X
08FF4 B5 79                     	LDA EnemyVariable, X
08FF6 A6 00                     	LDX byte_RAM_0
08FF8 C9 02                     	CMP #$02 ; If we're a Gray Birdo, always shoot fire
08FFA F0 00                     	BEQ _Birdo_SpitFire
08FFC                           
08FFC C9 01                     	CMP #$01 ; If we're a Pink Birdo, always shoot eggs
08FFE D0 00                     	BNE _Birdo_SpitEgg
09000                           
09000 AD AE 05                  	LDA PseudoRNGValue ; Otherwise, randomly determine what to fire
09003 29 1F                     	AND #$1F ; If PRNG & $1F >= our health-probability number,
09005 D9 AE 8F                  	CMP BirdoHealthEggProbabilities, Y ; fire an egg out
09008 B0 00                     	BCS _Birdo_SpitEgg ; Otherwise just fall through to barfing fire
0900A                           
0900A                           _Birdo_SpitFire:
0900A F6 79                     	INC EnemyVariable, X ; Shoot a fireball
0900C A9 20                     	LDA #Enemy_Fireball
0900E D0 00                     	BNE EnemyBehavior_SpitProjectile
09010                           
09010                           _Birdo_SpitEgg:
09010 A9 1E                     	LDA #Enemy_Egg ; Shoot an egg
09012                           
09012                           
09012                           ;
09012                           ; Spits an object (used by Birdo and Autobomb)
09012                           ;
09012                           ; Input
09012                           ;   A = Object type
09012                           ;   X = Enemy index
09012                           ;
09012                           EnemyBehavior_SpitProjectile:
09012 95 90                     	STA ObjectType, X
09014 B5 33                     	LDA ObjectYLo, X
09016 18                        	CLC
09017 69 03                     	ADC #$03
09019 95 33                     	STA ObjectYLo, X
0901B B4 6F                     	LDY EnemyMovementDirection, X
0901D B5 29                     	LDA ObjectXLo, X
0901F 79 82 8F                  	ADC ProjectileLaunchXOffsets - 1, Y
09022 95 29                     	STA ObjectXLo, X
09024 20 4F 84                  	JSR SetEnemyAttributes
09027                           
09027 A6 12                     	LDX byte_RAM_12
09029                           
09029                           loc_BANK2_901B:
09029 4C 00 00                  	JMP RenderSprite
0902C                           
0902C                           
0902C                           ; Unused?
0902C 18                        	.db $18
0902D E8                        	.db $E8
0902E                           
0902E                           ; Maps upper nybble of y-velocity to a corresponding bounce velocity
0902E                           ObjectBounceVelocityY:
0902E FE                        	.db $FE
0902F F8                        	.db $F8
09030 F0                        	.db $F0
09031 E8                        	.db $E8
09032                           
09032                           
09032                           EnemyBehavior_Coin:
09032 20 69 8B                  	JSR IncrementAnimationTimerBy2
09035                           
09035 B5 47                     	LDA ObjectYVelocity, X
09037 C9 EA                     	CMP #$EA
09039 D0 00                     	BNE EnemyBehavior_Mushroom1up
0903B                           
0903B A9 04                     	LDA #SoundEffect2_CoinGet
0903D 8D 04 06                  	STA SoundEffectQueue2
09040                           
09040                           EnemyBehavior_Mushroom1up:
09040 B5 47                     	LDA ObjectYVelocity, X
09042 C9 10                     	CMP #$10
09044 30 00                     	BMI EnemyBehavior_Mushroom
09046                           
09046 20 00 00                  	JSR TurnIntoPuffOfSmoke
09049                           
09049 B5 90                     	LDA ObjectType, X
0904B C9 40                     	CMP #Enemy_Mushroom1up
0904D F0 00                     	BEQ Award1upMushroom
0904F                           
0904F EE 2B 06                  	INC SlotMachineCoins
09052 60                        	RTS
09053                           
09053                           ; ---------------------------------------------------------------------------
09053                           
09053                           Award1upMushroom:
09053 EE 20 06                  	INC Mushroom1upPulled
09056 EE ED 04                  	INC ExtraLives
09059 D0 00                     	BNE loc_BANK2_9050 ; Check if lives overflow. If so, reduce by one again
0905B                           
0905B CE ED 04                  	DEC ExtraLives
0905E                           
0905E                           loc_BANK2_9050:
0905E A9 10                     	LDA #SoundEffect1_1UP
09060 8D 02 06                  	STA SoundEffectQueue1
09063 60                        	RTS
09064                           
09064                           ; ---------------------------------------------------------------------------
09064                           
09064                           EnemyBehavior_CrystalBall:
09064 EE 2C 04                  	INC SpriteTempScreenY
09067 20 00 00                  	JSR AttachObjectToBirdo
0906A                           
0906A                           ;
0906A                           ; Behavior for objects that turn into smoke after you pick them up
0906A                           ; (eg. mushrooms, crystal ball, stopwatch)
0906A                           ;
0906A                           EnemyBehavior_Mushroom:
0906A B5 A8                     	LDA ObjectBeingCarriedTimer, X
0906C C9 01                     	CMP #$01
0906E D0 00                     	BNE EnemyBehavior_Mushroom_StayMaterial
09070                           
09070 A5 9A                     	LDA PlayerDucking
09072 F0 00                     	BEQ EnemyBehavior_Mushroom_PickUp
09074                           
09074                           EnemyBehavior_Mushroom_StayMaterial:
09074 4C 00 00                  	JMP EnemyBehavior_Bomb
09077                           
09077                           EnemyBehavior_Mushroom_PickUp:
09077 20 00 00                  	JSR CarryObject
0907A                           
0907A A9 00                     	LDA #$00
0907C 85 9C                     	STA HoldingItem
0907E 95 A8                     	STA ObjectBeingCarriedTimer, X
09080 20 00 00                  	JSR TurnIntoPuffOfSmoke
09083                           
09083 B5 90                     	LDA ObjectType, X
09085 C9 44                     	CMP #Enemy_CrystalBall
09087 D0 00                     	BNE EnemyBehavior_PickUpNotCrystalBall
09089                           
09089 AD B5 04                  	LDA CrystalAndHawkmouthOpenSize
0908C D0 00                     	BNE EnemyBehavior_CrystalBall_Exit
0908E                           
0908E A9 20                     	LDA #Music2_CrystalGetFanfare
09090 8D 03 06                  	STA MusicQueue2
09093 A9 60                     	LDA #$60
09095 8D B6 04                  	STA HawkmouthOpenTimer
09098 EE B5 04                  	INC CrystalAndHawkmouthOpenSize
0909B                           
0909B                           EnemyBehavior_CrystalBall_Exit:
0909B 60                        	RTS
0909C                           
0909C                           EnemyBehavior_PickUpNotCrystalBall:
0909C C9 40                     	CMP #Enemy_Mushroom1up
0909E F0 00                     	BEQ EnemyBehavior_PickUpMushroom1up
090A0                           
090A0 C9 46                     	CMP #Enemy_Stopwatch
090A2 F0 00                     	BEQ EnemyBehavior_PickUpStopwatch
090A4                           
090A4 C9 3F                     	CMP #Enemy_Mushroom
090A6 D0 00                     	BNE EnemyBehavior_PickUpNotMushroom
090A8                           
090A8                           EnemyBehavior_PickUpMushroom:
090A8 A6 79                     	LDX EnemyVariable
090AA FE FB 04                  	INC Mushroom1Pulled, X
090AD A6 12                     	LDX byte_RAM_12
090AF EE C3 04                  	INC PlayerMaxHealth
090B2 20 00 00                  	JSR RestorePlayerToFullHealth
090B5                           
090B5 A9 01                     	LDA #Music2_MushroomGetJingle
090B7 8D 03 06                  	STA MusicQueue2
090BA 60                        	RTS
090BB                           
090BB                           EnemyBehavior_PickUpMushroom1up:
090BB A9 09                     	LDA #$09
090BD 95 65                     	STA ObjectAttributes, X
090BF                           
090BF                           EnemyBehavior_PickUpNotMushroom:
090BF A9 E0                     	LDA #$E0
090C1 95 47                     	STA ObjectYVelocity, X
090C3 A9 01                     	LDA #$01
090C5 95 51                     	STA EnemyState, X
090C7 60                        	RTS
090C8                           
090C8                           EnemyBehavior_PickUpStopwatch:
090C8 A9 FF                     	LDA #$FF
090CA 8D FF 04                  	STA StopwatchTimer
090CD 60                        	RTS
090CE                           
090CE                           
090CE                           EnemyBehavior_Key:
090CE 20 00 00                  	JSR AttachObjectToBirdo
090D1                           
090D1                           ;
090D1                           ; Behavior for objects that have background collision detection
090D1                           ;
090D1                           EnemyBehavior_Bomb:
090D1 20 00 00                  	JSR ObjectTileCollision
090D4                           
090D4 B5 5B                     	LDA EnemyCollision, X
090D6 48                        	PHA
090D7 35 6F                     	AND EnemyMovementDirection, X
090D9 F0 00                     	BEQ EnemyBehavior_CheckGround
090DB                           
090DB 20 00 00                  	JSR EnemyBehavior_TurnAround
090DE                           
090DE 20 00 00                  	JSR HalfObjectVelocityX
090E1 20 00 00                  	JSR HalfObjectVelocityX
090E4 20 00 00                  	JSR HalfObjectVelocityX
090E7                           
090E7                           EnemyBehavior_CheckGround:
090E7 68                        	PLA
090E8 29 04                     	AND #CollisionFlags_Down
090EA F0 00                     	BEQ EnemyBehavior_CheckBombTimer
090EC                           
090EC                           	; object is touching ground
090EC B5 47                     	LDA ObjectYVelocity, X
090EE C9 09                     	CMP #$09
090F0 90 00                     	BCC EnemyBehavior_Grounded
090F2                           
090F2                           	; object is falling faster than $08
090F2 4A                        	LSR A
090F3 4A                        	LSR A
090F4 4A                        	LSR A
090F5 4A                        	LSR A
090F6 A8                        	TAY
090F7 B9 2E 90                  	LDA ObjectBounceVelocityY, Y
090FA 20 00 00                  	JSR ApplyVelocityYAndHalfObjectVelocityX
090FD                           
090FD 4C 00 00                  	JMP EnemyBehavior_CheckBombTimer
09100                           
09100                           EnemyBehavior_Grounded:
09100 20 00 00                  	JSR ResetObjectYVelocity
09103                           
09103 A5 0B                     	LDA byte_RAM_B
09105 D0 00                     	BNE EnemyBehavior_CheckBombTimer
09107                           
09107 95 3D                     	STA ObjectXVelocity, X
09109                           
09109                           EnemyBehavior_CheckBombTimer:
09109 B5 90                     	LDA ObjectType, X
0910B C9 37                     	CMP #Enemy_Bomb
0910D D0 00                     	BNE EnemyBehavior_Vegetable
0910F                           
0910F B5 86                     	LDA ObjectTimer1, X
09111 D0 00                     	BNE EnemyBehavior_BombTick
09113                           
09113 B4 A8                     	LDY ObjectBeingCarriedTimer, X
09115 F0 00                     	BEQ EnemyBehavior_Bomb_Explode
09117                           
09117 85 9C                     	STA HoldingItem
09119 95 A8                     	STA ObjectBeingCarriedTimer, X
0911B                           
0911B                           EnemyBehavior_Bomb_Explode:
0911B A9 04                     	LDA #EnemyState_BombExploding
0911D 95 51                     	STA EnemyState, X
0911F A9 20                     	LDA #$20
09121 95 86                     	STA ObjectTimer1, X
09123 8D C6 04                  	STA SkyFlashTimer
09126 A9 01                     	LDA #DPCM_DoorOpenBombBom
09128 8D 01 06                  	STA DPCMQueue
0912B 4A                        	LSR A
0912C                           	; A = $00
0912C 9D 2F 04                  	STA ObjectProjectileTimer, X
0912F 60                        	RTS
09130                           
09130                           
09130                           EnemyBehavior_BombTick:
09130 C9 40                     	CMP #$40
09132 B0 00                     	BCS EnemyBehavior_Vegetable
09134                           
09134                           	; bomb flashing
09134 4A                        	LSR A
09135 90 00                     	BCC EnemyBehavior_Vegetable
09137                           
09137 F6 65                     	INC ObjectAttributes, X
09139 B5 65                     	LDA ObjectAttributes, X
0913B 29 FB                     	AND #$FB
0913D 95 65                     	STA ObjectAttributes, X
0913F                           
0913F                           EnemyBehavior_Vegetable:
0913F 20 00 00                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
09142                           
09142 20 85 85                  	JSR ApplyObjectMovement
09145                           
09145                           RenderSprite_VegetableLarge:
09145 B5 B1                     	LDA EnemyArray_B1, X
09147 D0 00                     	BNE loc_BANK2_913E
09149                           
09149 4C 00 00                  	JMP RenderSprite_NotAlbatoss
0914C                           
0914C                           ; ---------------------------------------------------------------------------
0914C                           
0914C                           loc_BANK2_913E:
0914C 4C 00 00                  	JMP RenderSprite_DrawObject
0914F                           
0914F                           ; ---------------------------------------------------------------------------
0914F                           
0914F                           EnemyBehavior_SubspacePotion:
0914F 20 00 00                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
09152                           
09152 20 00 00                  	JSR ObjectTileCollision
09155                           
09155 B5 5B                     	LDA EnemyCollision, X
09157 48                        	PHA
09158 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
0915A F0 00                     	BEQ EnemyBehavior_SubspacePotion_CheckGroundCollision
0915C                           
0915C 20 00 00                  	JSR EnemyBehavior_TurnAround
0915F                           
0915F 20 00 00                  	JSR HalfObjectVelocityX
09162 20 00 00                  	JSR HalfObjectVelocityX
09165                           
09165                           EnemyBehavior_SubspacePotion_CheckGroundCollision:
09165 68                        	PLA
09166 29 04                     	AND #CollisionFlags_Down
09168 F0 D5                     	BEQ EnemyBehavior_Vegetable
0916A                           
0916A 20 00 00                  	JSR ResetObjectYVelocity
0916D                           
0916D B5 33                     	LDA ObjectYLo, X
0916F 38                        	SEC
09170 E9 10                     	SBC #$10
09172 95 33                     	STA ObjectYLo, X
09174 B5 29                     	LDA ObjectXLo, X
09176 69 07                     	ADC #$07
09178 29 F0                     	AND #$F0
0917A 95 29                     	STA ObjectXLo, X
0917C B5 15                     	LDA ObjectXHi, X
0917E 69 00                     	ADC #$00
09180 95 15                     	STA ObjectXHi, X
09182 A9 10                     	LDA #$10
09184 9D 53 04                  	STA ObjectTimer2, X
09187 A9 02                     	LDA #SoundEffect1_PotionDoorBong
09189 8D 02 06                  	STA SoundEffectQueue1
0918C F6 B1                     	INC EnemyArray_B1, X
0918E A9 3C                     	LDA #Enemy_SubspaceDoor
09190 95 90                     	STA ObjectType, X
09192 20 4F 84                  	JSR SetEnemyAttributes
09195                           
09195 A9 10                     	LDA #$10
09197 8D BB 05                  	STA byte_RAM_5BB
0919A                           
0919A                           	; No Subspace Doors allowed in vertical levels
0919A A5 EC                     	LDA IsHorizontalLevel
0919C D0 00                     	BNE EnemyBehavior_SubspacePotion_CreateDoor
0919E                           
0919E A9 40                     	LDA #DPCM_BossHurt
091A0 8D 01 06                  	STA DPCMQueue
091A3 20 B7 89                  	JSR EnemyDestroy
091A6                           
091A6                           EnemyBehavior_SubspacePotion_CreateDoor:
091A6 20 00 00                  	JSR CreateEnemy
091A9                           
091A9 30 00                     	BMI TurnIntoPuffOfSmoke_Exit
091AB                           
091AB A4 00                     	LDY byte_RAM_0
091AD B5 29                     	LDA ObjectXLo, X
091AF 99 29 00                  	STA ObjectXLo, Y
091B2 B5 15                     	LDA ObjectXHi, X
091B4 99 15 00                  	STA ObjectXHi, Y
091B7 A9 41                     	LDA #$41
091B9 99 65 00                  	STA ObjectAttributes, Y
091BC 98                        	TYA
091BD AA                        	TAX
091BE                           
091BE                           
091BE                           ;
091BE                           ; Turns an object into a puff of smoke
091BE                           ;
091BE                           ; Input
091BE                           ;   X = enemy index of object to poof
091BE                           ;
091BE                           TurnIntoPuffOfSmoke:
091BE B5 65                     	LDA ObjectAttributes, X ; Get current object sprite attributes...
091C0 29 FC                     	AND #ObjAttrib_Horizontal | ObjAttrib_FrontFacing | ObjAttrib_Mirrored | ObjAttrib_BehindBackground | ObjAttrib_16x32 | ObjAttrib_UpsideDown
091C2 09 01                     	ORA #ObjAttrib_Palette1
091C4 95 65                     	STA ObjectAttributes, X
091C6 A9 05                     	LDA #EnemyState_PuffOfSmoke
091C8 95 51                     	STA EnemyState, X ; WINNERS DON'T SMOKE SHROOMS
091CA 95 9F                     	STA ObjectAnimationTimer, X ; No idea what this address is for
091CC A9 1F                     	LDA #$1F
091CE 95 86                     	STA ObjectTimer1, X ; Puff-of-smoke animation timer?
091D0 A6 12                     	LDX byte_RAM_12
091D2                           
091D2                           TurnIntoPuffOfSmoke_Exit:
091D2 60                        	RTS
091D3                           
091D3                           
091D3                           byte_BANK2_91C5:
091D3 F8                        	.db $F8
091D4 08                        	.db $08
091D5                           
091D5                           
091D5                           ;
091D5                           ; Look for a Birdo to attach to
091D5                           ;
091D5                           AttachObjectToBirdo:
091D5 B5 79                     	LDA EnemyVariable, X
091D7 D0 00                     	BNE AttachObjectToBirdo_Skip
091D9                           
091D9 A0 05                     	LDY #$05
091DB                           AttachObjectToBirdo_Loop:
091DB B9 51 00                  	LDA EnemyState, Y
091DE C9 01                     	CMP #EnemyState_Alive
091E0 D0 00                     	BNE AttachObjectToBirdo_NotLiveBirdo
091E2                           
091E2 B9 90 00                  	LDA ObjectType, Y
091E5 C9 1C                     	CMP #Enemy_Birdo
091E7 F0 00                     	BEQ AttachObjectToBirdo_DoAttach
091E9                           
091E9                           AttachObjectToBirdo_NotLiveBirdo:
091E9 88                        	DEY
091EA 10 EF                     	BPL AttachObjectToBirdo_Loop
091EC                           
091EC                           AttachObjectToBirdo_Skip:
091EC A9 01                     	LDA #$01
091EE 95 79                     	STA EnemyVariable, X
091F0 4C 4F 84                  	JMP SetEnemyAttributes
091F3                           
091F3                           AttachObjectToBirdo_DoAttach:
091F3 B9 15 00                  	LDA ObjectXHi, Y
091F6 D5 15                     	CMP ObjectXHi, X
091F8 D0 F2                     	BNE AttachObjectToBirdo_Skip
091FA                           
091FA B9 29 00                  	LDA ObjectXLo, Y
091FD 95 29                     	STA ObjectXLo, X
091FF B9 33 00                  	LDA ObjectYLo, Y
09202 69 0E                     	ADC #$0E
09204 95 33                     	STA ObjectYLo, X
09206 20 00 00                  	JSR EnemyFindWhichSidePlayerIsOn
09209                           
09209 B9 D3 91                  	LDA byte_BANK2_91C5, Y
0920C 95 3D                     	STA ObjectXVelocity, X
0920E A9 E0                     	LDA #$E0
09210 95 47                     	STA ObjectYVelocity, X
09212 68                        	PLA
09213 68                        	PLA
09214 A9 07                     	LDA #SpriteFlags46E_Damage | SpriteFlags46E_Unliftable | SpriteFlags46E_NoEnemyCollision
09216 9D 6E 04                  	STA EnemyArray_46E, X
09219 A9 30                     	LDA #$30
0921B 85 F4                     	STA byte_RAM_F4
0921D 4C 00 00                  	JMP RenderSprite
09220                           
09220                           
09220                           
09220                           byte_BANK2_9212:
09220 F0                        	.db $F0
09221                           
09221                           byte_BANK2_9213:
09221 FF                        	.db $FF
09222 00                        	.db $00
09223                           ; ---------------------------------------------------------------------------
09223                           
09223                           EnemyInit_AlbatossStartLeft:
09223 20 6B 84                  	JSR EnemyInit_Basic
09226                           
09226 A9 F0                     	LDA #$F0
09228 D0 00                     	BNE loc_BANK2_9221
0922A                           
0922A                           EnemyInit_AlbatossStartRight:
0922A 20 6B 84                  	JSR EnemyInit_Basic
0922D                           
0922D A9 10                     	LDA #$10
0922F                           
0922F                           loc_BANK2_9221:
0922F 95 3D                     	STA ObjectXVelocity, X
09231 F6 B1                     	INC EnemyArray_B1, X
09233 B5 90                     	LDA ObjectType, X
09235 38                        	SEC
09236                           
09236                           loc_BANK2_9228:
09236 E9 0B                     	SBC #$0B
09238 A8                        	TAY
09239 AD C0 04                  	LDA ScreenBoundaryLeftLo
0923C 79 20 92                  	ADC byte_BANK2_9212, Y
0923F 95 29                     	STA ObjectXLo, X
09241 AD BE 04                  	LDA ScreenBoundaryLeftHi
09244 79 21 92                  	ADC byte_BANK2_9213, Y
09247 95 15                     	STA ObjectXHi, X
09249 60                        	RTS
0924A                           
0924A                           ; ---------------------------------------------------------------------------
0924A                           
0924A                           EnemyBehavior_Albatoss:
0924A 20 00 00                  	JSR RenderSprite_Albatoss
0924D                           
0924D F6 9F                     	INC ObjectAnimationTimer, X
0924F B5 B1                     	LDA EnemyArray_B1, X
09251 D0 00                     	BNE loc_BANK2_9271
09253                           
09253 B5 5B                     	LDA EnemyCollision, X
09255 29 10                     	AND #CollisionFlags_Damage
09257 D0 00                     	BNE loc_BANK2_9256
09259                           
09259 20 00 00                  	JSR EnemyFindWhichSidePlayerIsOn
0925C                           
0925C A5 0F                     	LDA byte_RAM_F
0925E 69 30                     	ADC #$30
09260 C9 60                     	CMP #$60
09262 B0 00                     	BCS loc_BANK2_926E
09264                           
09264                           loc_BANK2_9256:
09264 20 00 00                  	JSR CreateEnemy
09267                           
09267 30 00                     	BMI loc_BANK2_926E
09269                           
09269 A6 00                     	LDX byte_RAM_0
0926B A9 09                     	LDA #Enemy_BobOmb
0926D 95 90                     	STA ObjectType, X
0926F B5 33                     	LDA ObjectYLo, X
09271 69 10                     	ADC #$10
09273 95 33                     	STA ObjectYLo, X
09275 20 00 85                  	JSR EnemyInit_Bobomb
09278                           
09278 A6 12                     	LDX byte_RAM_12
0927A F6 B1                     	INC EnemyArray_B1, X
0927C                           
0927C                           loc_BANK2_926E:
0927C 4C 00 00                  	JMP loc_BANK2_9274
0927F                           
0927F                           ; ---------------------------------------------------------------------------
0927F                           
0927F                           loc_BANK2_9271:
0927F 20 00 00                  	JSR EnemyBehavior_CheckDamagedInterrupt
09282                           
09282                           loc_BANK2_9274:
09282 4C 00 00                  	JMP ApplyObjectPhysicsX
09285                           
09285                           ; ---------------------------------------------------------------------------
09285                           
09285                           EnemyBehavior_AutobombFire:
09285 20 00 00                  	JSR sub_BANK2_9289
09288                           
09288                           sub_BANK2_927A:
09288 16 65                     	ASL ObjectAttributes, X
0928A A5 10                     	LDA byte_RAM_10
0928C 4A                        	LSR A
0928D 4A                        	LSR A
0928E 4A                        	LSR A
0928F 76 65                     	ROR ObjectAttributes, X
09291 60                        	RTS
09292                           
09292                           
09292                           ; Unused?
09292 D0                        	.db $D0
09293 03                        	.db $03
09294                           
09294                           
09294                           EnemyBehavior_BulletAndEgg:
09294 20 00 00                  	JSR ObjectTileCollision
09297                           
09297                           sub_BANK2_9289:
09297 20 00 00                  	JSR EnemyBehavior_CheckDamagedInterrupt
0929A                           
0929A 20 00 00                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
0929D                           
0929D B5 B1                     	LDA EnemyArray_B1, X
0929F 1D 2F 04                  	ORA ObjectProjectileTimer, X
092A2 F0 00                     	BEQ loc_BANK2_9299
092A4                           
092A4 4C 82 85                  	JMP RenderSpriteAndApplyObjectMovement
092A7                           
092A7                           ; ---------------------------------------------------------------------------
092A7                           
092A7                           loc_BANK2_9299:
092A7 B5 47                     	LDA ObjectYVelocity, X
092A9 10 00                     	BPL loc_BANK2_929F
092AB                           
092AB 95 B1                     	STA EnemyArray_B1, X
092AD                           
092AD                           loc_BANK2_929F:
092AD B5 5B                     	LDA EnemyCollision, X
092AF 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
092B1 F0 00                     	BEQ loc_BANK2_92BE
092B3                           
092B3 95 B1                     	STA EnemyArray_B1, X
092B5 B5 90                     	LDA ObjectType, X
092B7 C9 1B                     	CMP #Enemy_Bullet
092B9 D0 00                     	BNE loc_BANK2_92B5
092BB                           
092BB A9 02                     	LDA #EnemyState_Dead
092BD 95 51                     	STA EnemyState, X
092BF F6 33                     	INC ObjectYLo, X
092C1 F6 33                     	INC ObjectYLo, X
092C3                           
092C3                           loc_BANK2_92B5:
092C3 20 00 00                  	JSR EnemyBehavior_TurnAround
092C6                           
092C6 20 00 00                  	JSR HalfObjectVelocityX
092C9                           
092C9 20 00 00                  	JSR HalfObjectVelocityX
092CC                           
092CC                           loc_BANK2_92BE:
092CC 20 00 00                  	JSR ApplyObjectPhysicsX
092CF                           
092CF 4C 00 00                  	JMP RenderSprite
092D2                           
092D2                           ; End of function sub_BANK2_9289
092D2                           
092D2                           
092D2                           ;
092D2                           ; Creates a generic red Shyguy enemy and
092D2                           ; does some basic initialization for it.
092D2                           ;
092D2                           ; CreateEnemy_TryAllSlots checks all 9 object slots
092D2                           ; CreateEnemy only checks the first 6 object slots
092D2                           ;
092D2                           ; Output
092D2                           ;   N = enabled if no empty slot was found
092D2                           ;   Y = $FF if there no empty slot was found
092D2                           ;   byte_RAM_0 = slot used
092D2                           ;
092D2                           CreateEnemy_TryAllSlots:
092D2 A0 08                     	LDY #$08
092D4 D0 00                     	BNE CreateEnemy_FindSlot
092D6                           
092D6                           CreateEnemy:
092D6 A0 05                     	LDY #$05
092D8                           
092D8                           CreateEnemy_FindSlot:
092D8 B9 51 00                  	LDA EnemyState, Y
092DB F0 00                     	BEQ CreateEnemy_FoundSlot
092DD                           
092DD 88                        	DEY
092DE 10 F8                     	BPL CreateEnemy_FindSlot
092E0                           
092E0 60                        	RTS
092E1                           
092E1                           CreateEnemy_FoundSlot:
092E1 A9 01                     	LDA #EnemyState_Alive
092E3 99 51 00                  	STA EnemyState, Y
092E6 4A                        	LSR A
092E7 99 9B 04                  	STA EnemyArray_SpawnsDoor, Y
092EA A9 01                     	LDA #Enemy_ShyguyRed
092EC 99 90 00                  	STA ObjectType, Y
092EF B5 29                     	LDA ObjectXLo, X
092F1 69 05                     	ADC #$05
092F3 99 29 00                  	STA ObjectXLo, Y
092F6 B5 15                     	LDA ObjectXHi, X
092F8 69 00                     	ADC #$00
092FA 99 15 00                  	STA ObjectXHi, Y
092FD B5 33                     	LDA ObjectYLo, X
092FF 99 33 00                  	STA ObjectYLo, Y
09302 B5 1F                     	LDA ObjectYHi, X
09304 99 1F 00                  	STA ObjectYHi, Y
09307 84 00                     	STY byte_RAM_0
09309 98                        	TYA
0930A AA                        	TAX
0930B                           
0930B 20 6B 84                  	JSR EnemyInit_Basic
0930E 20 77 85                  	JSR UnlinkEnemyFromRawData
09311                           
09311 A6 12                     	LDX byte_RAM_12
09313 60                        	RTS
09314                           
09314                           
09314                           Phanto_AccelX:
09314 01                        	.db $01
09315 FF                        	.db $FF
09316                           Phanto_MaxVelX:
09316 30                        	.db $30
09317 D0                        	.db $D0
09318                           Phanto_AccelY:
09318 01                        	.db $01
09319 FF                        	.db $FF ; Exit up
0931A 01                        	.db $01 ; Exit down
0931B                           Phanto_MaxVelY:
0931B 18                        	.db $18
0931C E8                        	.db $E8
0931D 18                        	.db $18
0931E                           
0931E                           EnemyBehavior_Phanto:
0931E BD 4A 04                  	LDA ObjectShakeTimer, X
09321 F0 00                     	BEQ Phanto_AfterDecrementShakeTimer
09323                           
09323 DE 4A 04                  	DEC ObjectShakeTimer, X
09326                           
09326                           Phanto_AfterDecrementShakeTimer:
09326 20 00 00                  	JSR RenderSprite
09329                           
09329 A0 01                     	LDY #$01 ; Move away from player
0932B A5 9C                     	LDA HoldingItem
0932D F0 00                     	BEQ Phanto_Movement
0932F                           
0932F AE 2D 04                  	LDX ObjectBeingCarriedIndex
09332 B5 90                     	LDA ObjectType, X
09334 A6 12                     	LDX byte_RAM_12
09336                           
09336                           	; Strange code. Phanto only chases you if you have the key.
09336                           	; So you should just be able to use BEQ/BNE.
09336                           	; This way seems to imply that Phanto would
09336                           	; chase you if you were carrying a range of items,
09336                           	; but...  what could those items have been?
09336                           	; But instead we do it like this for... reasons.
09336                           	; Nintendo.
09336 C9 3D                     	CMP #Enemy_Key
09338 90 00                     	BCC Phanto_Movement
0933A                           
0933A                           	; Subspace Potion is >= Enemy_Key, so ignore it
0933A C9 3E                     	CMP #Enemy_SubspacePotion
0933C B0 00                     	BCS Phanto_Movement
0933E                           
0933E AD BC 05                  	LDA PhantoActivateTimer
09341 C9 A0                     	CMP #$A0
09343 D0 00                     	BNE Phanto_AfterStartTimer
09345                           
09345                           	; Kick off Phanto activation timer
09345 CE BC 05                  	DEC PhantoActivateTimer
09348                           
09348                           Phanto_AfterStartTimer:
09348 88                        	DEY ; Move toward player
09349                           
09349                           Phanto_Movement:
09349 B5 1F                     	LDA ObjectYHi, X
0934B 18                        	CLC
0934C 69 01                     	ADC #$01
0934E 85 05                     	STA byte_RAM_5
09350 A5 32                     	LDA PlayerYLo
09352 D5 33                     	CMP ObjectYLo, X
09354 A6 1E                     	LDX PlayerYHi
09356 E8                        	INX
09357 8A                        	TXA
09358 A6 12                     	LDX byte_RAM_12
0935A E5 05                     	SBC byte_RAM_5
0935C 10 00                     	BPL loc_BANK2_9351
0935E                           
0935E C8                        	INY ; Other side of player vertically
0935F                           
0935F                           loc_BANK2_9351:
0935F B5 47                     	LDA ObjectYVelocity, X
09361 D9 1B 93                  	CMP Phanto_MaxVelY, Y
09364 F0 00                     	BEQ loc_BANK2_935E
09366                           
09366 18                        	CLC
09367 79 18 93                  	ADC Phanto_AccelY, Y
0936A 95 47                     	STA ObjectYVelocity, X
0936C                           
0936C                           loc_BANK2_935E:
0936C BD 80 04                  	LDA EnemyArray_480, X
0936F 18                        	CLC
09370 69 A0                     	ADC #$A0
09372 9D 80 04                  	STA EnemyArray_480, X
09375 90 00                     	BCC loc_BANK2_937F
09377                           
09377 BD 77 04                  	LDA EnemyArray_477, X
0937A 29 01                     	AND #$01
0937C A8                        	TAY
0937D B5 3D                     	LDA ObjectXVelocity, X
0937F 18                        	CLC
09380 79 14 93                  	ADC Phanto_AccelX, Y
09383 95 3D                     	STA ObjectXVelocity, X
09385 D9 16 93                  	CMP Phanto_MaxVelX, Y
09388 D0 00                     	BNE loc_BANK2_937F
0938A                           
0938A FE 77 04                  	INC EnemyArray_477, X
0938D                           
0938D                           loc_BANK2_937F:
0938D A5 EC                     	LDA IsHorizontalLevel
0938F F0 00                     	BEQ loc_BANK2_9388
09391                           
09391 A5 3C                     	LDA PlayerXVelocity
09393 9D CC 04                  	STA ObjectXAcceleration, X
09396                           
09396                           loc_BANK2_9388:
09396 AC BC 05                  	LDY PhantoActivateTimer
09399 F0 00                     	BEQ Phanto_Activated
0939B                           
0939B                           	; Hold the timer at $A0
0939B C0 A0                     	CPY #$A0
0939D F0 00                     	BEQ Phanto_AfterDecrementActivateTimer
0939F                           
0939F C0 80                     	CPY #$80
093A1 D0 00                     	BNE Phanto_AfterFlashing
093A3                           
093A3                           	; Start flashing
093A3 A9 40                     	LDA #$40
093A5 9D 5C 04                  	STA ObjectFlashTimer, X
093A8                           
093A8                           Phanto_AfterFlashing:
093A8 C0 40                     	CPY #$40
093AA D0 00                     	BNE Phanto_AfterSound
093AC                           
093AC                           	; Start vibrating
093AC A9 40                     	LDA #$40
093AE 9D 4A 04                  	STA ObjectShakeTimer, X
093B1                           
093B1                           	; Play Phanto activation sound effect
093B1 A9 04                     	LDA #SoundEffect3_POWRumble
093B3 8D 05 06                  	STA SoundEffectQueue3
093B6                           
093B6                           Phanto_AfterSound:
093B6 CE BC 05                  	DEC PhantoActivateTimer
093B9                           
093B9                           Phanto_AfterDecrementActivateTimer:
093B9 A9 00                     	LDA #$00
093BB 9D CC 04                  	STA ObjectXAcceleration, X
093BE 95 3D                     	STA ObjectXVelocity, X
093C0 95 47                     	STA ObjectYVelocity, X
093C2                           
093C2                           Phanto_Activated:
093C2 4C 00 00                  	JMP ApplyObjectPhysics
093C5                           
093C5                           
093C5                           Enemy_Ninji_JumpVelocity:
093C5 E8                        	.db $E8
093C6 D0                        	.db $D0
093C7 D8                        	.db $D8
093C8 D0                        	.db $D0
093C9                           
093C9                           
093C9                           EnemyBehavior_NinjiJumping:
093C9 B5 5B                     	LDA EnemyCollision, X
093CB 29 04                     	AND #CollisionFlags_Down
093CD F0 00                     	BEQ EnemyBehavior_Ninji_MidAir
093CF                           
093CF BD 2F 04                  	LDA ObjectProjectileTimer, X
093D2 D0 00                     	BNE EnemyBehavior_NinjiJumping_DetermineJump
093D4                           
093D4                           	; stop x-velocity
093D4 95 3D                     	STA ObjectXVelocity, X
093D6                           
093D6                           EnemyBehavior_NinjiJumping_DetermineJump:
093D6 8A                        	TXA
093D7 0A                        	ASL A
093D8 0A                        	ASL A
093D9 0A                        	ASL A
093DA 65 10                     	ADC byte_RAM_10
093DC 29 3F                     	AND #$3F
093DE D0 00                     	BNE EnemyBehavior_Ninji_MidAir
093E0                           
093E0 B5 9F                     	LDA ObjectAnimationTimer, X
093E2 29 C0                     	AND #$C0
093E4 0A                        	ASL A
093E5 2A                        	ROL A
093E6 2A                        	ROL A
093E7 A8                        	TAY
093E8 B9 C5 93                  	LDA Enemy_Ninji_JumpVelocity, Y
093EB D0 00                     	BNE EnemyBehavior_Ninji_Jump
093ED                           
093ED                           EnemyBehavior_NinjiRunning:
093ED B5 5B                     	LDA EnemyCollision, X
093EF 29 04                     	AND #CollisionFlags_Down
093F1 F0 00                     	BEQ EnemyBehavior_Ninji_MidAir
093F3                           
093F3 A5 32                     	LDA PlayerYLo
093F5 18                        	CLC
093F6 69 10                     	ADC #$10
093F8 D5 33                     	CMP ObjectYLo, X
093FA D0 00                     	BNE EnemyBehavior_Ninji_MidAir
093FC                           
093FC 20 00 00                  	JSR EnemyFindWhichSidePlayerIsOn
093FF                           
093FF C8                        	INY
09400 98                        	TYA
09401 D5 6F                     	CMP EnemyMovementDirection, X
09403 D0 00                     	BNE EnemyBehavior_Ninji_MidAir
09405                           
09405 A5 0F                     	LDA byte_RAM_F
09407 69 28                     	ADC #$28
09409 C9 50                     	CMP #$50
0940B B0 00                     	BCS EnemyBehavior_Ninji_MidAir
0940D                           
0940D A9 D8                     	LDA #$D8
0940F                           
0940F                           EnemyBehavior_Ninji_Jump:
0940F 95 47                     	STA ObjectYVelocity, X
09411 B5 9F                     	LDA ObjectAnimationTimer, X
09413 29 F0                     	AND #$F0
09415 95 9F                     	STA ObjectAnimationTimer, X
09417 20 00 00                  	JSR ApplyObjectPhysicsY
0941A                           
0941A                           EnemyBehavior_Ninji_MidAir:
0941A 4C 00 00                  	JMP EnemyBehavior_BasicWalker
0941D                           
0941D                           ; ---------------------------------------------------------------------------
0941D                           
0941D                           EnemyBehavior_Beezo:
0941D 20 00 00                  	JSR EnemyBehavior_CheckDamagedInterrupt
09420                           
09420 20 00 00                  	JSR RenderSprite
09423                           
09423 F6 9F                     	INC ObjectAnimationTimer, X
09425 20 00 00                  	JSR EnemyBehavior_Check42FPhysicsInterrupt
09428                           
09428 20 69 8B                  	JSR IncrementAnimationTimerBy2
0942B 20 00 00                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
0942E                           
0942E B5 47                     	LDA ObjectYVelocity, X
09430 F0 00                     	BEQ ApplyObjectPhysicsWhoosh
09432                           
09432 10 00                     	BPL EnemyBehavior_Beezo_Diving
09434                           
09434 9D 2F 04                  	STA ObjectProjectileTimer, X
09437                           
09437                           EnemyBehavior_Beezo_Diving:
09437 A5 10                     	LDA byte_RAM_10
09439 4A                        	LSR A
0943A 90 00                     	BCC ApplyObjectPhysics
0943C                           
0943C D6 47                     	DEC ObjectYVelocity, X
0943E                           
0943E                           
0943E                           ;
0943E                           ; Runs horizontal and vertical object physics
0943E                           ;
0943E                           ApplyObjectPhysics:
0943E 20 00 00                  	JSR ApplyObjectPhysicsX
09441 4C 00 00                  	JMP ApplyObjectPhysicsY
09444                           
09444                           
09444                           ;
09444                           ; Runs DOUBLE horizontal and single vertical object physics
09444                           ;
09444                           ApplyObjectPhysicsWhoosh:
09444 20 00 00                  	JSR ApplyObjectPhysicsX
09447 4C 3E 94                  	JMP ApplyObjectPhysics
0944A                           
0944A                           
0944A                           BulletProjectileXSpeeds:
0944A 20                        	.db $20
0944B E0                        	.db $E0
0944C                           
0944C                           
0944C                           EnemyBehavior_BobOmb:
0944C B4 86                     	LDY ObjectTimer1, X
0944E C0 3A                     	CPY #$3A ; When to stop walking
09450 B0 00                     	BCS EnemyBehavior_BasicWalker
09452                           
09452                           	; Stop walking if the BobOmb is touching the ground
09452 B5 5B                     	LDA EnemyCollision, X
09454 29 04                     	AND #CollisionFlags_Down
09456 F0 00                     	BEQ EnemyBehavior_BobOmb_CheckFuse
09458                           
09458 A9 00                     	LDA #$00
0945A 95 3D                     	STA ObjectXVelocity, X
0945C                           
0945C                           EnemyBehavior_BobOmb_CheckFuse:
0945C D6 9F                     	DEC ObjectAnimationTimer, X
0945E 98                        	TYA
0945F D0 00                     	BNE EnemyBehavior_BobOmb_Flash
09461                           
09461                           	; Unset HoldingItem if this BobOmb is being carried
09461 B5 A8                     	LDA ObjectBeingCarriedTimer, X
09463 F0 00                     	BEQ EnemyBehavior_BobOmb_Explode
09465                           
09465 84 9C                     	STY HoldingItem
09467 94 A8                     	STY ObjectBeingCarriedTimer, X
09469                           
09469                           EnemyBehavior_BobOmb_Explode:
09469 4C 1B 91                  	JMP EnemyBehavior_Bomb_Explode
0946C                           
0946C                           
0946C                           EnemyBehavior_BobOmb_Flash:
0946C C9 30                     	CMP #$30 ; When to start flashing
0946E B0 00                     	BCS EnemyBehavior_BasicWalker
09470                           
09470                           	; Palette cycle every other frame
09470 4A                        	LSR A
09471 90 00                     	BCC EnemyBehavior_BasicWalker
09473                           
09473 F6 65                     	INC ObjectAttributes, X
09475 B5 65                     	LDA ObjectAttributes, X
09477 29 FB                     	AND #%11111011
09479 95 65                     	STA ObjectAttributes, X
0947B                           
0947B                           
0947B                           EnemyBehavior_BasicWalker:
0947B 20 00 00                  	JSR ObjectTileCollision
0947E                           
0947E                           loc_BANK2_9470:
0947E 20 00 00                  	JSR EnemyBehavior_CheckDamagedInterrupt
09481                           
09481 BD 80 04                  	LDA EnemyArray_480, X
09484 F0 00                     	BEQ loc_BANK2_9492
09486                           
09486 B5 5B                     	LDA EnemyCollision, X
09488 29 08                     	AND #CollisionFlags_Up
0948A F0 00                     	BEQ loc_BANK2_9481
0948C                           
0948C 4C B7 89                  	JMP EnemyDestroy
0948F                           
0948F                           ; ---------------------------------------------------------------------------
0948F                           
0948F                           loc_BANK2_9481:
0948F DE 80 04                  	DEC EnemyArray_480, X
09492 F6 86                     	INC ObjectTimer1, X
09494                           
09494                           ; =============== S U B R O U T I N E =======================================
09494                           
09494                           sub_BANK2_9486:
09494 B5 65                     	LDA ObjectAttributes, X
09496 09 20                     	ORA #ObjAttrib_BehindBackground
09498 95 65                     	STA ObjectAttributes, X
0949A 20 00 00                  	JSR ApplyObjectPhysicsY
0949D                           
0949D 4C 00 00                  	JMP RenderSprite
094A0                           
094A0                           ; End of function sub_BANK2_9486
094A0                           
094A0                           ; ---------------------------------------------------------------------------
094A0                           
094A0                           ; Object collision with background tiles
094A0                           loc_BANK2_9492:
094A0 B5 5B                     	LDA EnemyCollision, X
094A2 35 6F                     	AND EnemyMovementDirection, X
094A4 F0 00                     	BEQ loc_BANK2_94A6
094A6                           
094A6 20 00 00                  	JSR EnemyBehavior_TurnAround
094A9                           
094A9 BD 2F 04                  	LDA ObjectProjectileTimer, X
094AC F0 00                     	BEQ loc_BANK2_94A6
094AE                           
094AE 20 00 00                  	JSR HalfObjectVelocityX
094B1                           
094B1 20 00 00                  	JSR HalfObjectVelocityX
094B4                           
094B4                           loc_BANK2_94A6:
094B4 F6 9F                     	INC ObjectAnimationTimer, X
094B6 20 00 00                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
094B9                           
094B9                           loc_BANK2_94AB:
094B9 20 00 00                  	JSR RenderSprite
094BC                           
094BC B5 90                     	LDA ObjectType, X
094BE C9 06                     	CMP #Enemy_SnifitGray
094C0 D0 00                     	BNE loc_BANK2_94BB
094C2                           
094C2 BD 2F 04                  	LDA ObjectProjectileTimer, X
094C5 D0 00                     	BNE loc_BANK2_94BB
094C7                           
094C7 95 3D                     	STA ObjectXVelocity, X
094C9                           
094C9                           loc_BANK2_94BB:
094C9 20 85 85                  	JSR ApplyObjectMovement
094CC                           
094CC B5 5B                     	LDA EnemyCollision, X
094CE B4 47                     	LDY ObjectYVelocity, X
094D0 10 00                     	BPL loc_BANK2_9503
094D2                           
094D2 29 08                     	AND #CollisionFlags_Up
094D4 F0 00                     	BEQ loc_BANK2_94CD
094D6                           
094D6 A9 00                     	LDA #$00
094D8 95 47                     	STA ObjectYVelocity, X
094DA 60                        	RTS
094DB                           
094DB                           ; ---------------------------------------------------------------------------
094DB                           
094DB                           loc_BANK2_94CD:
094DB BD 2F 04                  	LDA ObjectProjectileTimer, X
094DE D0 00                     	BNE EnemyBehavior_Walk
094E0                           
094E0                           	; check if this enemy fires bullets when jumping
094E0 B5 90                     	LDA ObjectType, X
094E2 C9 06                     	CMP #Enemy_SnifitGray
094E4 D0 00                     	BNE EnemyBehavior_Walk
094E6                           
094E6                           	; bullet generator
094E6 B5 47                     	LDA ObjectYVelocity, X ; check if enemy is starting to fall
094E8 C9 FE                     	CMP #$FE
094EA D0 00                     	BNE EnemyBehavior_Walk
094EC                           
094EC AD AE 05                  	LDA PseudoRNGValue ; check random number generator
094EF 10 00                     	BPL EnemyBehavior_Walk
094F1                           
094F1                           	; jumper high bullet
094F1 20 00 00                  	JSR CreateBullet
094F4                           
094F4                           EnemyBehavior_Walk:
094F4 D6 9F                     	DEC ObjectAnimationTimer, X
094F6 B5 90                     	LDA ObjectType, X
094F8 C9 07                     	CMP #Enemy_SnifitPink
094FA F0 00                     	BEQ EnemyBehavior_TurnAtCliff
094FC                           
094FC C9 03                     	CMP #Enemy_ShyguyPink
094FE D0 00                     	BNE EnemyBehavior_BasicWalkerExit
09500                           
09500                           EnemyBehavior_TurnAtCliff:
09500                           	; skip if being thrown
09500 BD 2F 04                  	LDA ObjectProjectileTimer, X
09503 D0 00                     	BNE EnemyBehavior_BasicWalkerExit
09505                           
09505                           	; skip if already turning around
09505 BD 77 04                  	LDA EnemyArray_477, X
09508 D0 00                     	BNE EnemyBehavior_BasicWalkerExit
0950A                           
0950A FE 77 04                  	INC EnemyArray_477, X
0950D 4C 00 00                  	JMP EnemyBehavior_TurnAround
09510                           
09510                           EnemyBehavior_BasicWalkerExit:
09510 60                        	RTS
09511                           
09511                           ; ---------------------------------------------------------------------------
09511                           
09511                           loc_BANK2_9503:
09511 29 04                     	AND #$04
09513 F0 C6                     	BEQ loc_BANK2_94CD
09515                           
09515 A9 00                     	LDA #$00
09517 9D 77 04                  	STA EnemyArray_477, X
0951A B4 90                     	LDY ObjectType, X ; Get the current object ID
0951C C0 02                     	CPY #Enemy_Tweeter ; Check if this enemy is a Tweeter
0951E D0 00                     	BNE loc_BANK2_9528 ; If not, go handle some other enemies
09520                           
09520                           	; ...but very, very, very rarely, only
09520                           	; when their timer (that increments once per bounce)
09520                           	; hits #$3F -- almost unnoticable
09520 A9 3F                     	LDA #$3F
09522 20 00 00                  	JSR sub_BANK2_9599
09525                           
09525 F6 79                     	INC EnemyVariable, X ; Make small jump 3 times, then make big jump
09527 A0 F0                     	LDY #$F0
09529 B5 79                     	LDA EnemyVariable, X
0952B 29 03                     	AND #$03 ; Check if the timer is a multiple of 4
0952D D0 00                     	BNE loc_BANK2_9523 ; If not, skip over the next bit
0952F                           
0952F A0 E0                     	LDY #$E0
09531                           
09531                           loc_BANK2_9523:
09531 94 47                     	STY ObjectYVelocity, X ; Set Y acceleration for bouncing
09533 4C 00 00                  	JMP ApplyObjectPhysicsY
09536                           
09536                           ; ---------------------------------------------------------------------------
09536                           
09536                           loc_BANK2_9528:
09536 A9 1F                     	LDA #$1F
09538 C0 09                     	CPY #Enemy_BobOmb
0953A F0 00                     	BEQ sub_BANK2_9599
0953C                           
0953C C0 29                     	CPY #Enemy_Flurry
0953E F0 00                     	BEQ sub_BANK2_9599
09540                           
09540 A9 3F                     	LDA #$3F
09542 C0 0D                     	CPY #Enemy_NinjiRunning
09544 F0 00                     	BEQ sub_BANK2_9599
09546                           
09546                           	; this redundant red snifit check smells funny, almost like there was
09546                           	; some other follow-the-player enemy
09546 A9 7F                     	LDA #$7F ; unused
09548 C0 05                     	CPY #Enemy_SnifitRed
0954A F0 00                     	BEQ EnemyBehavior_Snifit
0954C                           
0954C C0 05                     	CPY #Enemy_SnifitRed
0954E F0 00                     	BEQ EnemyBehavior_Snifit
09550                           
09550 C0 07                     	CPY #Enemy_SnifitPink
09552 F0 00                     	BEQ EnemyBehavior_Snifit
09554                           
09554 C0 06                     	CPY #Enemy_SnifitGray
09556 D0 00                     	BNE loc_BANK2_959D
09558                           
09558 BD 2F 04                  	LDA ObjectProjectileTimer, X
0955B D0 00                     	BNE loc_BANK2_959D
0955D                           
0955D 20 00 00                  	JSR EnemyFindWhichSidePlayerIsOn
09560                           
09560 C8                        	INY
09561 94 6F                     	STY EnemyMovementDirection, X
09563 B5 9F                     	LDA ObjectAnimationTimer, X
09565 29 3F                     	AND #$3F
09567 D0 00                     	BNE EnemyBehavior_Snifit
09569                           
09569 A9 E8                     	LDA #$E8
0956B 95 47                     	STA ObjectYVelocity, X
0956D 4C 00 00                  	JMP ApplyObjectPhysicsY
09570                           
09570                           
09570                           EnemyBehavior_Snifit:
09570 BD 4A 04                  	LDA ObjectShakeTimer, X
09573 F0 00                     	BEQ EnemyBehavior_Snifit_NoBullet
09575                           
09575 D6 9F                     	DEC ObjectAnimationTimer, X
09577 DE 4A 04                  	DEC ObjectShakeTimer, X
0957A D0 00                     	BNE EnemyBehavior_Snifit_NoBullet
0957C                           
0957C                           	; telegraphed bullet (walking snifits)
0957C 20 00 00                  	JSR CreateBullet
0957F                           
0957F 4C 00 00                  	JMP loc_BANK2_95BB
09582                           
09582                           EnemyBehavior_Snifit_NoBullet:
09582 8A                        	TXA
09583 0A                        	ASL A
09584 0A                        	ASL A
09585 0A                        	ASL A
09586 65 10                     	ADC byte_RAM_10
09588 0A                        	ASL A
09589 D0 00                     	BNE EnemyBehavior_Snifit_AnimationTimer
0958B                           
0958B B5 90                     	LDA ObjectType, X
0958D C9 06                     	CMP #Enemy_SnifitGray
0958F D0 00                     	BNE EnemyBehavior_Snifit_CheckPlayerY
09591                           
09591                           	; jumper low bullet
09591 20 00 00                  	JSR CreateBullet
09594                           
09594 4C 00 00                  	JMP EnemyInit_DisableObjectAttributeBit8
09597                           
09597                           
09597                           EnemyBehavior_Snifit_CheckPlayerY:
09597 B5 33                     	LDA ObjectYLo, X
09599 38                        	SEC
0959A E9 10                     	SBC #$10
0959C C5 32                     	CMP PlayerYLo
0959E D0 00                     	BNE EnemyBehavior_Snifit_AnimationTimer
095A0                           
095A0 A9 30                     	LDA #$30 ; shake duration
095A2 9D 4A 04                  	STA ObjectShakeTimer, X
095A5                           
095A5                           EnemyBehavior_Snifit_AnimationTimer:
095A5 A9 7F                     	LDA #$7F
095A7                           
095A7                           ;
095A7                           ; Gives em the ol' razzle-dazzle
095A7                           ;
095A7                           ; Input
095A7                           ;   A = timer mask
095A7                           ;
095A7                           sub_BANK2_9599:
095A7 35 9F                     	AND ObjectAnimationTimer, X
095A9 F0 00                     	BEQ loc_BANK2_95B8
095AB                           
095AB                           loc_BANK2_959D:
095AB BD 2F 04                  	LDA ObjectProjectileTimer, X
095AE F0 00                     	BEQ loc_BANK2_95BB
095B0                           
095B0 B5 47                     	LDA ObjectYVelocity, X
095B2 C9 1A                     	CMP #$1A
095B4 90 00                     	BCC loc_BANK2_95B8
095B6                           
095B6 A9 F0                     	LDA #$F0
095B8                           
095B8                           ;
095B8                           ; Sets the y-velocity, applies vertical physics, and cuts x-velocity in half
095B8                           ;
095B8                           ; Input
095B8                           ;   A = y-velocity
095B8                           ;   X = enemy index
095B8                           ;
095B8                           ApplyVelocityYAndHalfObjectVelocityX:
095B8 20 00 00                  	JSR SetObjectYVelocity
095BB 20 00 00                  	JSR ApplyObjectPhysicsY
095BE                           
095BE                           ;
095BE                           ; Cuts the x-velocity of the current object in half
095BE                           ;
095BE                           ; Input
095BE                           ;   X = enemy index
095BE                           ; Output
095BE                           ;   RAM_0 = previous x-velocity
095BE                           ;
095BE                           HalfObjectVelocityX:
095BE                           	; Store the current X-velocity in RAM_0
095BE B5 3D                     	LDA ObjectXVelocity, X
095C0 85 00                     	STA byte_RAM_0
095C2                           	; Shift left to save the sign in the carry bit
095C2 0A                        	ASL A
095C3                           	; Cut in half and preserve the sign
095C3 76 3D                     	ROR ObjectXVelocity, X
095C5 60                        	RTS
095C6                           
095C6                           
095C6                           ; ---------------------------------------------------------------------------
095C6                           
095C6                           loc_BANK2_95B8:
095C6 20 6F 84                  	JSR EnemyInit_BasicWithoutTimer
095C9                           
095C9                           loc_BANK2_95BB:
095C9 B5 90                     	LDA ObjectType, X
095CB C9 01                     	CMP #Enemy_ShyguyRed
095CD D0 00                     	BNE EnemyInit_DisableObjectAttributeBit8
095CF                           
095CF B5 47                     	LDA ObjectYVelocity, X
095D1 C9 04                     	CMP #$04
095D3 90 00                     	BCC EnemyInit_DisableObjectAttributeBit8
095D5                           
095D5 20 6F 84                  	JSR EnemyInit_BasicWithoutTimer
095D8                           
095D8                           ;
095D8                           ; Disables bit 8 on the object attribute, which causes the object to appear
095D8                           ; behind the background while being pulled
095D8                           ;
095D8                           EnemyInit_DisableObjectAttributeBit8:
095D8 16 65                     	ASL ObjectAttributes, X
095DA 56 65                     	LSR ObjectAttributes, X
095DC                           
095DC                           ;
095DC                           ; Does SetObjectYVelocity with y-velocity of 0
095DC                           ;
095DC                           ResetObjectYVelocity:
095DC A9 00                     	LDA #$00
095DE                           
095DE                           ;
095DE                           ; Sets the y-velocity of an object and shifts it half a tile down if it's not a
095DE                           ; a vegetable
095DE                           ;
095DE                           ; Input
095DE                           ;   A = y-velocity
095DE                           ;   X = enemy index
095DE                           ;
095DE                           SetObjectYVelocity:
095DE 95 47                     	STA ObjectYVelocity, X
095E0 B5 90                     	LDA ObjectType, X
095E2 C9 32                     	CMP #Enemy_VegetableSmall
095E4 B5 33                     	LDA ObjectYLo, X
095E6 B0 00                     	BCS SetObjectYVelocity_Exit
095E8                           
095E8 69 08                     	ADC #$08
095EA 90 00                     	BCC SetObjectYVelocity_Exit
095EC                           
095EC F6 1F                     	INC ObjectYHi, X
095EE                           
095EE                           SetObjectYVelocity_Exit:
095EE 29 F0                     	AND #$F0
095F0 95 33                     	STA ObjectYLo, X
095F2 60                        	RTS
095F3                           
095F3                           
095F3                           ; =============== S U B R O U T I N E =======================================
095F3                           
095F3                           sub_BANK2_95E5:
095F3 20 D2 92                  	JSR CreateEnemy_TryAllSlots
095F6                           
095F6 4C 00 00                  	JMP CreateBullet_WithSlotInY
095F9                           
095F9                           ; End of function sub_BANK2_95E5
095F9                           
095F9                           ; =============== S U B R O U T I N E =======================================
095F9                           
095F9                           CreateBullet:
095F9 20 D6 92                  	JSR CreateEnemy
095FC                           
095FC                           CreateBullet_WithSlotInY:
095FC 30 00                     	BMI CreateBullet_Exit
095FE                           
095FE B4 6F                     	LDY EnemyMovementDirection, X
09600 A6 00                     	LDX byte_RAM_0
09602 B9 49 94                  	LDA BulletProjectileXSpeeds - 1, Y
09605 95 3D                     	STA ObjectXVelocity, X
09607 A9 00                     	LDA #$00
09609 95 47                     	STA ObjectYVelocity, X
0960B A9 1B                     	LDA #Enemy_Bullet
0960D 95 90                     	STA ObjectType, X
0960F 20 4F 84                  	JSR SetEnemyAttributes
09612                           
09612 A6 12                     	LDX byte_RAM_12
09614                           
09614                           CreateBullet_Exit:
09614 60                        	RTS
09615                           
09615                           
09615                           CharacterYOffsetCrouch:
09615 0A                        	.db $0A ; Mario
09616 0E                        	.db $0E ; Princess
09617 0A                        	.db $0A ; Toad
09618 0D                        	.db $0D ; Luigi
09619 04                        	.db $04 ; Small Mario
0961A 07                        	.db $07 ; Small Princess
0961B 04                        	.db $04 ; Small Toad
0961C 06                        	.db $06 ; Small Luigi
0961D                           
0961D                           
0961D                           ; This is run when the player is carrying
0961D                           ; something, to update its position to
0961D                           ; wherever the player is above their head
0961D                           CarryObject:
0961D A5 9D                     	LDA PlayerDirection
0961F 49 01                     	EOR #$01
09621 A8                        	TAY
09622 C8                        	INY
09623 94 6F                     	STY EnemyMovementDirection, X
09625 A5 28                     	LDA PlayerXLo
09627 95 29                     	STA ObjectXLo, X
09629 A5 14                     	LDA PlayerXHi
0962B 95 15                     	STA ObjectXHi, X
0962D                           
0962D A5 1E                     	LDA PlayerYHi
0962F 85 07                     	STA byte_RAM_7
09631 A5 32                     	LDA PlayerYLo
09633 BC 89 04                  	LDY ObjectHitbox, X
09636 C0 03                     	CPY #$03
09638 F0 00                     	BEQ loc_BANK2_9636
0963A                           
0963A C0 02                     	CPY #$02
0963C F0 00                     	BEQ loc_BANK2_9636
0963E                           
0963E E9 0E                     	SBC #$0E
09640 B0 00                     	BCS loc_BANK2_9636
09642                           
09642 C6 07                     	DEC byte_RAM_7
09644                           
09644                           loc_BANK2_9636:
09644 A4 C7                     	LDY PlayerAnimationFrame
09646 C0 04                     	CPY #SpriteAnimation_Ducking
09648 18                        	CLC
09649 D0 00                     	BNE loc_BANK2_964D
0964B                           
0964B AC F6 06                  	LDY PlayerCurrentSize
0964E C0 01                     	CPY #$01
09650 A4 8F                     	LDY CurrentCharacter
09652 90 00                     	BCC loc_BANK2_964A
09654                           
09654 C8                        	INY
09655 C8                        	INY
09656 C8                        	INY
09657 C8                        	INY
09658                           
09658                           loc_BANK2_964A:
09658 79 15 96                  	ADC CharacterYOffsetCrouch, Y
0965B                           
0965B                           loc_BANK2_964D:
0965B 08                        	PHP
0965C B4 A8                     	LDY ObjectBeingCarriedTimer, X
0965E 18                        	CLC
0965F AE F6 06                  	LDX PlayerCurrentSize
09662 F0 00                     	BEQ loc_BANK2_965D
09664                           
09664 C8                        	INY
09665 C8                        	INY
09666 C8                        	INY
09667 C8                        	INY
09668 C8                        	INY
09669 C8                        	INY
0966A C8                        	INY
0966B                           
0966B                           loc_BANK2_965D:
0966B 79 FF 7E                  	ADC ItemCarryYOffsetsRAM - 1, Y
0966E A6 12                     	LDX byte_RAM_12
09670 95 33                     	STA ObjectYLo, X
09672 A5 07                     	LDA byte_RAM_7
09674 79 0D 7F                  	ADC ItemCarryYOffsetsRAM + $D, Y
09677 28                        	PLP
09678 69 00                     	ADC #$00
0967A 95 1F                     	STA ObjectYHi, X
0967C B4 A8                     	LDY ObjectBeingCarriedTimer, X
0967E C0 05                     	CPY #$05
09680 B0 00                     	BCS loc_BANK2_9686
09682                           
09682 B5 90                     	LDA ObjectType, X
09684 C9 32                     	CMP #Enemy_VegetableSmall
09686 B0 00                     	BCS loc_BANK2_9686
09688                           
09688 BD 38 04                  	LDA ObjectStunTimer, X
0968B D0 00                     	BNE loc_BANK2_9681
0968D                           
0968D F6 9F                     	INC ObjectAnimationTimer, X
0968F                           
0968F                           loc_BANK2_9681:
0968F 16 65                     	ASL ObjectAttributes, X
09691 38                        	SEC
09692 76 65                     	ROR ObjectAttributes, X
09694                           
09694                           loc_BANK2_9686:
09694 20 00 00                  	JSR SetSpriteTempScreenPosition
09697                           
09697 4C 00 00                  	JMP RenderSprite
0969A                           
0969A                           
0969A                           ; Unused?
0969A 10                        	.db $10
0969B F0                        	.db $F0
0969C                           
0969C                           
0969C                           EnemyBehavior_MushroomBlockAndPOW:
0969C 20 00 00                  	JSR sub_BANK2_9692
0969F                           
0969F                           EnemyBehavior_MushroomBlockAndPOW_Exit:
0969F 60                        	RTS
096A0                           
096A0                           ; =============== S U B R O U T I N E =======================================
096A0                           
096A0                           sub_BANK2_9692:
096A0 B5 A8                     	LDA ObjectBeingCarriedTimer, X
096A2 F0 00                     	BEQ loc_BANK2_969B
096A4                           
096A4 68                        	PLA
096A5 68                        	PLA
096A6 4C 1D 96                  	JMP CarryObject
096A9                           
096A9                           ; ---------------------------------------------------------------------------
096A9                           
096A9                           loc_BANK2_969B:
096A9 20 00 00                  	JSR RenderSprite
096AC                           
096AC B5 90                     	LDA ObjectType, X
096AE C9 3A                     	CMP #Enemy_POWBlock
096B0 B0 00                     	BCS loc_BANK2_96AA
096B2                           
096B2 20 00 00                  	JSR ObjectTileCollision_SolidBackground
096B5                           
096B5 4C 00 00                  	JMP loc_BANK2_96AD
096B8                           
096B8                           ; ---------------------------------------------------------------------------
096B8                           
096B8                           loc_BANK2_96AA:
096B8 20 00 00                  	JSR ObjectTileCollision
096BB                           
096BB                           loc_BANK2_96AD:
096BB BD 2F 04                  	LDA ObjectProjectileTimer, X
096BE F0 DF                     	BEQ EnemyBehavior_MushroomBlockAndPOW_Exit
096C0                           
096C0 20 85 85                  	JSR ApplyObjectMovement
096C3                           
096C3 68                        	PLA
096C4 68                        	PLA
096C5 B5 5B                     	LDA EnemyCollision, X
096C7 48                        	PHA
096C8 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
096CA F0 00                     	BEQ loc_BANK2_96D4
096CC                           
096CC A9 00                     	LDA #$00
096CE 95 3D                     	STA ObjectXVelocity, X
096D0 B5 29                     	LDA ObjectXLo, X
096D2 69 08                     	ADC #$08
096D4 29 F0                     	AND #$F0
096D6 95 29                     	STA ObjectXLo, X
096D8 A5 EC                     	LDA IsHorizontalLevel
096DA F0 00                     	BEQ loc_BANK2_96D4
096DC                           
096DC B5 15                     	LDA ObjectXHi, X
096DE 69 00                     	ADC #$00
096E0 95 15                     	STA ObjectXHi, X
096E2                           
096E2                           loc_BANK2_96D4:
096E2 68                        	PLA
096E3 B4 47                     	LDY ObjectYVelocity, X
096E5 30 00                     	BMI locret_BANK2_9718
096E7                           
096E7 29 04                     	AND #CollisionFlags_Down
096E9 F0 00                     	BEQ locret_BANK2_9718
096EB                           
096EB A5 0E                     	LDA byte_RAM_E
096ED C9 16                     	CMP #$16
096EF D0 00                     	BNE loc_BANK2_96EC
096F1                           
096F1 B5 3D                     	LDA ObjectXVelocity, X
096F3 F0 00                     	BEQ loc_BANK2_96EC
096F5                           
096F5 A9 14                     	LDA #$14
096F7 4C DE 95                  	JMP SetObjectYVelocity
096FA                           
096FA                           ; ---------------------------------------------------------------------------
096FA                           
096FA                           loc_BANK2_96EC:
096FA B5 90                     	LDA ObjectType, X
096FC C9 3A                     	CMP #Enemy_POWBlock
096FE D0 00                     	BNE loc_BANK2_96FF
09700                           
09700 A9 20                     	LDA #$20
09702 8D C4 04                  	STA POWQuakeTimer
09705 A9 04                     	LDA #SoundEffect3_POWRumble
09707 8D 05 06                  	STA SoundEffectQueue3
0970A 4C 00 00                  	JMP SetBlockFizzle
0970D                           
0970D                           ; ---------------------------------------------------------------------------
0970D                           
0970D                           loc_BANK2_96FF:
0970D B5 47                     	LDA ObjectYVelocity, X
0970F C9 16                     	CMP #$16
09711 90 00                     	BCC loc_BANK2_970D
09713                           
09713 20 DC 95                  	JSR ResetObjectYVelocity
09716                           
09716 A9 F5                     	LDA #$F5
09718 4C B8 95                  	JMP ApplyVelocityYAndHalfObjectVelocityX
0971B                           
0971B                           ; ---------------------------------------------------------------------------
0971B                           
0971B                           loc_BANK2_970D:
0971B 20 DC 95                  	JSR ResetObjectYVelocity
0971E                           
0971E B5 79                     	LDA EnemyVariable, X
09720 20 00 00                  	JSR ReplaceTile
09723                           
09723 4C B7 89                  	JMP EnemyDestroy
09726                           
09726                           ; ---------------------------------------------------------------------------
09726                           
09726                           locret_BANK2_9718:
09726 60                        	RTS
09727                           
09727                           ; End of function sub_BANK2_9692
09727                           
09727                           ; ---------------------------------------------------------------------------
09727                           
09727                           EnemyBehavior_SubspaceDoor:
09727 A9 04                     	LDA #$04
09729 9D 89 04                  	STA ObjectHitbox, X
0972C A9 02                     	LDA #$02
0972E 95 6F                     	STA EnemyMovementDirection, X
09730 AC B7 04                  	LDY SubspaceTimer
09733 F0 00                     	BEQ loc_BANK2_9741
09735                           
09735 A5 10                     	LDA byte_RAM_10
09737 29 03                     	AND #$03
09739 D0 00                     	BNE loc_BANK2_9741
0973B                           
0973B A4 50                     	LDY PlayerState
0973D C0 07                     	CPY #PlayerState_Dying
0973F F0 00                     	BEQ loc_BANK2_9741
09741                           
09741 CE B7 04                  	DEC SubspaceTimer
09744 D0 00                     	BNE loc_BANK2_9741
09746                           
09746 8D 28 06                  	STA InSubspaceOrJar
09749 20 00 00                  	JSR DoAreaReset
0974C                           
0974C 4C 00 00                  	JMP loc_BANK2_97FF
0974F                           
0974F                           ; ---------------------------------------------------------------------------
0974F                           
0974F                           loc_BANK2_9741:
0974F BD 53 04                  	LDA ObjectTimer2, X
09752 D0 D2                     	BNE locret_BANK2_9718
09754                           
09754 AD B3 04                  	LDA SubspaceDoorTimer
09757 F0 00                     	BEQ loc_BANK2_9753
09759                           
09759 CE B3 04                  	DEC SubspaceDoorTimer
0975C D0 00                     	BNE loc_BANK2_9753
0975E                           
0975E 4C BE 91                  	JMP TurnIntoPuffOfSmoke
09761                           
09761                           ; ---------------------------------------------------------------------------
09761                           
09761                           loc_BANK2_9753:
09761 B5 65                     	LDA ObjectAttributes, X
09763 09 40                     	ORA #ObjAttrib_16x32
09765 95 65                     	STA ObjectAttributes, X
09767 AC BD 04                  	LDY DoorAnimationTimer
0976A B9 00 00                  	LDA DoorSpriteAnimation, Y
0976D A0 00                     	LDY #$00
0976F 0A                        	ASL A
09770 90 00                     	BCC loc_BANK2_9767
09772                           
09772 C8                        	INY
09773 94 6F                     	STY EnemyMovementDirection, X
09775                           
09775                           loc_BANK2_9767:
09775 AD BD 04                  	LDA DoorAnimationTimer
09778 F0 00                     	BEQ loc_BANK2_979A
0977A                           
0977A A5 F4                     	LDA byte_RAM_F4
0977C 48                        	PHA
0977D 20 00 00                  	JSR FindSpriteSlot
09780                           
09780 C4 F4                     	CPY byte_RAM_F4
09782 08                        	PHP
09783 B5 6F                     	LDA EnemyMovementDirection, X
09785 C9 01                     	CMP #$01
09787 D0 00                     	BNE loc_BANK2_977F
09789                           
09789 68                        	PLA
0978A 49 01                     	EOR #$01
0978C 48                        	PHA
0978D                           
0978D                           loc_BANK2_977F:
0978D 28                        	PLP
0978E 90 00                     	BCC loc_BANK2_9784
09790                           
09790 84 F4                     	STY byte_RAM_F4
09792                           
09792                           loc_BANK2_9784:
09792 A9 7A                     	LDA #$7A ; Door opening
09794 20 00 00                  	JSR RenderSprite_DrawObject
09797                           
09797 A4 F4                     	LDY byte_RAM_F4
09799 B9 07 02                  	LDA SpriteDMAArea + 7, Y
0979C 38                        	SEC
0979D E9 04                     	SBC #$04
0979F 99 07 02                  	STA SpriteDMAArea + 7, Y
097A2 99 0F 02                  	STA SpriteDMAArea + $F, Y
097A5 68                        	PLA
097A6 85 F4                     	STA byte_RAM_F4
097A8                           
097A8                           loc_BANK2_979A:
097A8 20 00 00                  	JSR FindSpriteSlot
097AB                           
097AB C4 F4                     	CPY byte_RAM_F4
097AD 08                        	PHP
097AE B5 6F                     	LDA EnemyMovementDirection, X
097B0 C9 01                     	CMP #$01
097B2 D0 00                     	BNE loc_BANK2_97AA
097B4                           
097B4 68                        	PLA
097B5 49 01                     	EOR #$01
097B7 48                        	PHA
097B8                           
097B8                           loc_BANK2_97AA:
097B8 28                        	PLP
097B9 B0 00                     	BCS loc_BANK2_97AF
097BB                           
097BB 84 F4                     	STY byte_RAM_F4
097BD                           
097BD                           loc_BANK2_97AF:
097BD AD BD 04                  	LDA DoorAnimationTimer
097C0 C9 19                     	CMP #$19
097C2 90 00                     	BCC loc_BANK2_97BA
097C4                           
097C4 A0 00                     	LDY #$00
097C6 84 F4                     	STY byte_RAM_F4
097C8                           
097C8                           loc_BANK2_97BA:
097C8 A9 76                     	LDA #$76 ; Door
097CA BC 77 04                  	LDY EnemyArray_477, X
097CD F0 00                     	BEQ loc_BANK2_97C3
097CF                           
097CF A9 7E                     	LDA #$7E ; Door with lock
097D1                           
097D1                           loc_BANK2_97C3:
097D1 20 00 00                  	JSR RenderSprite_DrawObject
097D4                           
097D4 AE BD 04                  	LDX DoorAnimationTimer
097D7 F0 00                     	BEQ loc_BANK2_9805
097D9                           
097D9 EE BD 04                  	INC DoorAnimationTimer
097DC A4 F4                     	LDY byte_RAM_F4
097DE BD 00 00                  	LDA DoorSpriteAnimation, X
097E1 30 00                     	BMI loc_BANK2_9805
097E3                           
097E3 18                        	CLC
097E4 79 03 02                  	ADC SpriteDMAArea + 3, Y
097E7 99 03 02                  	STA SpriteDMAArea + 3, Y
097EA 99 0B 02                  	STA SpriteDMAArea + $B, Y
097ED E0 00                     	CPX #(DoorSpriteAnimationEnd-DoorSpriteAnimation)
097EF D0 00                     	BNE loc_BANK2_9805
097F1                           
097F1 A9 00                     	LDA #$00
097F3 8D BD 04                  	STA DoorAnimationTimer
097F6 20 00 00                  	JSR DoAreaReset
097F9                           
097F9 AD 34 05                  	LDA TransitionType
097FC C9 01                     	CMP #TransitionType_Door
097FE D0 00                     	BNE loc_BANK2_97F7
09800                           
09800 EE 27 06                  	INC DoAreaTransition
09803 D0 00                     	BNE loc_BANK2_97FF
09805                           
09805                           loc_BANK2_97F7:
09805 AD 28 06                  	LDA InSubspaceOrJar
09808 49 02                     	EOR #$02
0980A 8D 28 06                  	STA InSubspaceOrJar
0980D                           
0980D                           loc_BANK2_97FF:
0980D 68                        	PLA
0980E 68                        	PLA
0980F 68                        	PLA
09810 68                        	PLA
09811 68                        	PLA
09812 68                        	PLA
09813                           
09813                           loc_BANK2_9805:
09813 A6 12                     	LDX byte_RAM_12
09815 60                        	RTS
09816                           
09816                           
09816                           DoorSpriteAnimation:
09816 00                        	.db $00
09817 01                        	.db $01
09818 01                        	.db $01
09819 02                        	.db $02
0981A 02                        	.db $02
0981B 03                        	.db $03
0981C 04                        	.db $04
0981D 06                        	.db $06
0981E 08                        	.db $08
0981F FF                        	.db $FF
09820 FF                        	.db $FF
09821 FF                        	.db $FF
09822 FF                        	.db $FF
09823 FF                        	.db $FF
09824 FF                        	.db $FF
09825 FF                        	.db $FF
09826 FF                        	.db $FF
09827 FF                        	.db $FF
09828 FF                        	.db $FF
09829 FF                        	.db $FF
0982A FF                        	.db $FF
0982B FF                        	.db $FF
0982C FF                        	.db $FF
0982D FF                        	.db $FF
0982E FF                        	.db $FF
0982F 08                        	.db $08
09830 06                        	.db $06
09831 04                        	.db $04
09832 03                        	.db $03
09833 02                        	.db $02
09834 02                        	.db $02
09835 02                        	.db $02
09836 02                        	.db $02
09837 01                        	.db $01
09838 01                        	.db $01
09839 01                        	.db $01
0983A 01                        	.db $01
0983B 01                        	.db $01
0983C 00                        	.db $00
0983D 00                        	.db $00
0983E 00                        	.db $00
0983F 00                        	.db $00
09840 00                        	.db $00
09841 00                        	.db $00
09842 00                        	.db $00
09843 00                        	.db $00
09844 00                        	.db $00
09845 00                        	.db $00
09846                           DoorSpriteAnimationEnd:
09846 00                        	.db $00
09847                           
09847                           ; Unused?
09847 A9                        	.db $A9
09848 02                        	.db $02
09849 D0                        	.db $D0
0984A 06                        	.db $06
0984B                           
0984B                           
0984B                           ;
0984B                           ; Note: Door animation code copied from Bank 1
0984B                           ;
0984B                           ; It's here, but seems to be unused?
0984B                           ;
0984B                           DoorAnimation_Locked_Bank2:
0984B A9 01                     	LDA #$01
0984D D0 00                     	BNE DoorAnimation_Bank2
0984F                           
0984F                           DoorAnimation_Unlocked_Bank2:
0984F A9 00                     	LDA #$00
09851                           
09851                           DoorAnimation_Bank2:
09851 48                        	PHA
09852 A0 08                     	LDY #$08
09854                           
09854                           DoorAnimation_Loop_Bank2:
09854                           	; skip if inactive
09854 B9 51 00                  	LDA EnemyState, Y
09857 F0 00                     	BEQ DoorAnimation_LoopNext_Bank2
09859                           
09859 B9 90 00                  	LDA ObjectType, Y
0985C C9 3C                     	CMP #Enemy_SubspaceDoor
0985E D0 00                     	BNE DoorAnimation_LoopNext_Bank2
09860                           
09860 A9 05                     	LDA #EnemyState_PuffOfSmoke
09862 99 51 00                  	STA EnemyState, Y
09865 A9 20                     	LDA #$20
09867 99 86 00                  	STA ObjectTimer1, Y
0986A                           
0986A                           DoorAnimation_LoopNext_Bank2:
0986A 88                        	DEY
0986B 10 E7                     	BPL DoorAnimation_Loop_Bank2
0986D                           
0986D 20 D2 92                  	JSR CreateEnemy_TryAllSlots
09870                           
09870 30 00                     	BMI DoorAnimation_Exit_Bank2
09872                           
09872 A9 00                     	LDA #$00
09874 8D BD 04                  	STA DoorAnimationTimer
09877 8D B3 04                  	STA SubspaceDoorTimer
0987A A6 00                     	LDX byte_RAM_0
0987C 68                        	PLA
0987D 9D 77 04                  	STA EnemyArray_477, X
09880 A9 3C                     	LDA #Enemy_SubspaceDoor
09882 95 90                     	STA ObjectType, X
09884 20 4F 84                  	JSR SetEnemyAttributes
09887                           
09887 A5 28                     	LDA PlayerXLo
09889 69 08                     	ADC #$08
0988B 29 F0                     	AND #$F0
0988D 95 29                     	STA ObjectXLo, X
0988F A5 14                     	LDA PlayerXHi
09891 69 00                     	ADC #$00
09893 95 15                     	STA ObjectXHi, X
09895 A5 32                     	LDA PlayerYLo
09897 95 33                     	STA ObjectYLo, X
09899 A5 1E                     	LDA PlayerYHi
0989B 95 1F                     	STA ObjectYHi, X
0989D A9 41                     	LDA #ObjAttrib_Palette1 | ObjAttrib_16x32
0989F 95 65                     	STA ObjectAttributes, X
098A1 A6 12                     	LDX byte_RAM_12
098A3 60                        	RTS
098A4                           
098A4                           DoorAnimation_Exit_Bank2:
098A4 68                        	PLA
098A5 60                        	RTS
098A6                           
098A6                           
098A6                           ShellSpeed:
098A6 1C                        	.db $1C
098A7 E4                        	.db $E4
098A8                           
098A8                           
098A8                           EnemyBehavior_Shell:
098A8 20 00 00                  	JSR ObjectTileCollision
098AB                           
098AB 20 00 00                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
098AE                           
098AE B5 5B                     	LDA EnemyCollision, X
098B0 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
098B2 F0 00                     	BEQ EnemyBehavior_Shell_Slide
098B4                           
098B4                           EnemyBehavior_Shell_Destroy:
098B4 A9 20                     	LDA #SoundEffect1_EnemyHit
098B6 8D 02 06                  	STA SoundEffectQueue1
098B9 4C BE 91                  	JMP TurnIntoPuffOfSmoke
098BC                           
098BC                           
098BC                           EnemyBehavior_Shell_Slide:
098BC B5 5B                     	LDA EnemyCollision, X
098BE 29 04                     	AND #CollisionFlags_Down
098C0 F0 00                     	BEQ EnemyBehavior_Shell_Render
098C2                           
098C2 20 DC 95                  	JSR ResetObjectYVelocity
098C5                           
098C5                           EnemyBehavior_Shell_Render:
098C5 20 00 00                  	JSR RenderSprite
098C8                           
098C8 B4 6F                     	LDY EnemyMovementDirection, X
098CA B9 A5 98                  	LDA ShellSpeed - 1, Y
098CD 95 3D                     	STA ObjectXVelocity, X
098CF 4C 85 85                  	JMP ApplyObjectMovement
098D2                           
098D2                           
098D2                           ;
098D2                           ; Turns the current sprite into a block fizzle
098D2                           ;
098D2                           SetBlockFizzle:
098D2 A9 03                     	LDA #EnemyState_BlockFizzle
098D4 95 51                     	STA EnemyState, X
098D6 A9 18                     	LDA #$18
098D8 95 86                     	STA ObjectTimer1, X
098DA                           
098DA                           SetBlockFizzle_Exit:
098DA 60                        	RTS
098DB                           
098DB                           
098DB                           ;
098DB                           ; Intercepts the normal enemy behavior when the object is being carried
098DB                           ;
098DB                           EnemyBehavior_CheckBeingCarriedTimerInterrupt:
098DB B5 A8                     	LDA ObjectBeingCarriedTimer, X
098DD F0 FB                     	BEQ SetBlockFizzle_Exit
098DF                           
098DF                           	; Cancel previous subroutine and go into carry mode
098DF 68                        	PLA
098E0 68                        	PLA
098E1 4C 1D 96                  	JMP CarryObject
098E4                           
098E4                           
098E4                           ;
098E4                           ; If ObjectProjectileTimer is set, interrupt the EnemyBehavior subroutine and just
098E4                           ; render the sprite and run physics
098E4                           ;
098E4                           ; Input
098E4                           ;   X = enemy index
098E4                           ;
098E4                           EnemyBehavior_Check42FPhysicsInterrupt:
098E4 BD 2F 04                  	LDA ObjectProjectileTimer, X
098E7 F0 00                     	BEQ locret_BANK2_98EA
098E9                           
098E9 68                        	PLA
098EA 68                        	PLA
098EB 4C 82 85                  	JMP RenderSpriteAndApplyObjectMovement
098EE                           
098EE                           
098EE                           EnemyInit_FallingLogs:
098EE 20 7A 8D                  	JSR EnemyInit_Stationary
098F1                           
098F1 9D 38 04                  	STA ObjectStunTimer, X
098F4 B5 33                     	LDA ObjectYLo, X
098F6 95 79                     	STA EnemyVariable, X
098F8                           
098F8                           locret_BANK2_98EA:
098F8 60                        	RTS
098F9                           
098F9                           
098F9                           
098F9                           ; ---------------------------------------------------------------------------
098F9                           
098F9                           EnemyBehavior_FallingLogs:
098F9 16 65                     	ASL ObjectAttributes, X
098FB A5 10                     	LDA byte_RAM_10
098FD 0A                        	ASL A
098FE 0A                        	ASL A
098FF 0A                        	ASL A
09900 0A                        	ASL A
09901 76 65                     	ROR ObjectAttributes, X
09903 B4 B1                     	LDY EnemyArray_B1, X
09905 D0 00                     	BNE loc_BANK2_9919
09907                           
09907                           	; behind background
09907 B5 65                     	LDA ObjectAttributes, X
09909 09 20                     	ORA #ObjAttrib_BehindBackground
0990B 95 65                     	STA ObjectAttributes, X
0990D B5 79                     	LDA EnemyVariable, X
0990F 38                        	SEC
09910 E9 0C                     	SBC #$0C
09912 D5 33                     	CMP ObjectYLo, X
09914 A9 FE                     	LDA #$FE
09916 90 00                     	BCC loc_BANK2_9914
09918                           
09918                           	; in front of background
09918 B5 65                     	LDA ObjectAttributes, X
0991A 29 DF                     	AND #$DF
0991C 95 65                     	STA ObjectAttributes, X
0991E F6 B1                     	INC EnemyArray_B1, X
09920 A9 04                     	LDA #$04
09922                           
09922                           loc_BANK2_9914:
09922 95 47                     	STA ObjectYVelocity, X
09924 4C 00 00                  	JMP loc_BANK2_9921
09927                           
09927                           ; ---------------------------------------------------------------------------
09927                           
09927                           loc_BANK2_9919:
09927 A5 10                     	LDA byte_RAM_10
09929 29 07                     	AND #$07
0992B D0 00                     	BNE loc_BANK2_9921
0992D                           
0992D F6 47                     	INC ObjectYVelocity, X
0992F                           
0992F                           loc_BANK2_9921:
0992F 20 00 00                  	JSR ApplyObjectPhysicsY
09932                           
09932 B5 33                     	LDA ObjectYLo, X
09934 C9 F0                     	CMP #$F0
09936 90 00                     	BCC loc_BANK2_9932
09938                           
09938 A9 00                     	LDA #$00
0993A 95 B1                     	STA EnemyArray_B1, X
0993C B5 79                     	LDA EnemyVariable, X
0993E 95 33                     	STA ObjectYLo, X
09940                           
09940                           loc_BANK2_9932:
09940 4C 00 00                  	JMP RenderSprite
09943                           
09943                           ; ---------------------------------------------------------------------------
09943                           
09943                           ;
09943                           ; Kills all enemies on the screen (ie. POW block quake)
09943                           ;
09943                           KillOnscreenEnemies:
09943 A9 00                     	LDA #$00
09945                           
09945                           ;
09945                           ; Destroys all enemies on the screen
09945                           ;
09945                           ; Input
09945                           ;   A = 0 for POW
09945                           ;
09945                           DestroyOnscreenEnemies:
09945 85 00                     	STA byte_RAM_0
09947 A2 08                     	LDX #$08
09949                           
09949                           DestroyOnscreenEnemies_Loop:
09949 B5 51                     	LDA EnemyState, X
0994B C9 01                     	CMP #EnemyState_Alive
0994D D0 00                     	BNE DestroyOnscreenEnemies_Next
0994F                           
0994F A5 00                     	LDA byte_RAM_0
09951 F0 00                     	BEQ KillOnscreenEnemies_CheckCollision
09953                           
09953 B5 90                     	LDA ObjectType, X
09955 C9 37                     	CMP #Enemy_Bomb
09957 F0 00                     	BEQ DestroyOnscreenEnemies_DestroyItem
09959                           
09959 C9 32                     	CMP #Enemy_VegetableSmall
0995B B0 00                     	BCS DestroyOnscreenEnemies_Next
0995D                           
0995D                           DestroyOnscreenEnemies_DestroyItem:
0995D A5 9C                     	LDA HoldingItem
0995F F0 00                     	BEQ DestroyOnscreenEnemies_Poof
09961                           
09961 EC 2D 04                  	CPX ObjectBeingCarriedIndex
09964 D0 00                     	BNE DestroyOnscreenEnemies_Poof
09966                           
09966 A9 00                     	LDA #$00
09968 85 9C                     	STA HoldingItem
0996A                           
0996A                           DestroyOnscreenEnemies_Poof:
0996A 86 0E                     	STX byte_RAM_E
0996C 20 BE 91                  	JSR TurnIntoPuffOfSmoke
0996F                           
0996F A6 0E                     	LDX byte_RAM_E
09971 4C 00 00                  	JMP DestroyOnscreenEnemies_Next
09974                           
09974                           KillOnscreenEnemies_CheckCollision:
09974 B5 5B                     	LDA EnemyCollision, X
09976 F0 00                     	BEQ DestroyOnscreenEnemies_Next
09978                           
09978                           IFDEF FIX_POW_LOG_GLITCH
09978                           	LDA ObjectType, X
09978                           	CMP #Enemy_VegetableSmall
09978                           	BCS KillOnscreenEnemies_SetCollision
09978                           ENDIF
09978                           
09978                           	; BUG: For object that don't follow normal gravity rules, this will send
09978                           	; them flying into the air, ie. throwing a POW block from a falling log
09978 A9 D8                     	LDA #$D8
0997A 95 47                     	STA ObjectYVelocity, X
0997C                           
0997C                           KillOnscreenEnemies_SetCollision:
0997C B5 5B                     	LDA EnemyCollision, X
0997E 09 10                     	ORA #CollisionFlags_Damage
09980 95 5B                     	STA EnemyCollision, X
09982                           
09982                           DestroyOnscreenEnemies_Next:
09982 CA                        	DEX
09983 10 C4                     	BPL DestroyOnscreenEnemies_Loop
09985                           
09985 A6 12                     	LDX byte_RAM_12
09987 60                        	RTS
09988                           
09988                           
09988                           ;
09988                           ; Checks whether the enemy is taking mortal damage
09988                           ;
09988                           ; If so, play the sound effect, kill the enemy, and cancel the previous enemy
09988                           ; behavior subroutine.
09988                           ;
09988                           ; Input
09988                           ;   X = enemy index
09988                           ;
09988                           EnemyBehavior_CheckDamagedInterrupt:
09988 B5 5B                     	LDA EnemyCollision, X
0998A 29 10                     	AND #CollisionFlags_Damage
0998C F0 00                     	BEQ EnemyBehavior_CheckDamagedInterrupt_Exit
0998E                           
0998E B5 A8                     	LDA ObjectBeingCarriedTimer, X
09990 F0 00                     	BEQ EnemyBehavior_CheckDamagedInterrupt_SoundEffect
09992                           
09992                           	; remove the item from the player's hands
09992 A9 00                     	LDA #$00
09994 85 9C                     	STA HoldingItem
09996                           
09996                           EnemyBehavior_CheckDamagedInterrupt_SoundEffect:
09996 B4 90                     	LDY ObjectType, X
09998                           	; is this enemy a squawker?
09998 B9 00 00                  	LDA EnemyArray_46E_Data, Y
0999B 29 08                     	AND #SpriteFlags46E_DeathSquawk
0999D 0A                        	ASL A ; then A = DPCM_BossDeath
0999E D0 00                     	BNE EnemyBehavior_CheckDamagedInterrupt_BossDeathSound
099A0                           
099A0                           	; normal enemy hit sound
099A0 AD 01 06                  	LDA DPCMQueue
099A3 D0 00                     	BNE EnemyBehavior_CheckDamagedInterrupt_CheckPidgit
099A5                           
099A5 A9 20                     	LDA #SoundEffect1_EnemyHit
099A7 8D 02 06                  	STA SoundEffectQueue1
099AA D0 00                     	BNE EnemyBehavior_CheckDamagedInterrupt_CheckPidgit
099AC                           
099AC                           EnemyBehavior_CheckDamagedInterrupt_BossDeathSound:
099AC                           IFDEF EXPAND_MUSIC
099AC                           	; `DPCM_BossDeath` index changed, but want to preserve addresses
099AC                           	JSR EnemyBehavior_BossDeathSound
099AC                           ELSE
099AC 8D 01 06                  	STA DPCMQueue
099AF                           ENDIF
099AF                           
099AF                           EnemyBehavior_CheckDamagedInterrupt_CheckPidgit:
099AF                           	; killing pidgit leaves a flying carpet behind
099AF C0 12                     	CPY #Enemy_Pidgit
099B1 D0 00                     	BNE EnemyBehavior_CheckDamagedInterrupt_SetDead
099B3                           
099B3 BD 2F 04                  	LDA ObjectProjectileTimer, X
099B6 D0 00                     	BNE EnemyBehavior_CheckDamagedInterrupt_SetDead
099B8                           
099B8 20 00 00                  	JSR CreateFlyingCarpet
099BB                           
099BB                           EnemyBehavior_CheckDamagedInterrupt_SetDead:
099BB A9 02                     	LDA #EnemyState_Dead
099BD 95 51                     	STA EnemyState, X
099BF                           	; interrupt the previous subroutine
099BF 68                        	PLA
099C0 68                        	PLA
099C1                           
099C1                           EnemyBehavior_CheckDamagedInterrupt_Exit:
099C1 60                        	RTS
099C2                           
099C2                           
099C2                           EnemyTilemap1:
099C2                           	; Shyguy
099C2 D0 D2                     	.db $D0, $D2 ; $00
099C4 D4 D6                     	.db $D4, $D6 ; $02
099C6                           	; Wart vegetable (onion)
099C6 F8 F8                     	.db $F8, $F8 ; $04
099C8                           	; Wart vegetable (tomato)
099C8 FA FA                     	.db $FA, $FA ; $06
099CA                           	; Tweeter
099CA CC CE                     	.db $CC, $CE ; $08
099CC CC CE                     	.db $CC, $CE ; $0A
099CE                           	; Porcupo
099CE C8 CA                     	.db $C8, $CA ; $0C
099D0 C8 CA                     	.db $C8, $CA ; $0E
099D2                           	; Snifit
099D2 70 72                     	.db $70, $72 ; $10
099D4 74 76                     	.db $74, $76 ; $12
099D6                           	; BobOmb
099D6 C0 C2                     	.db $C0, $C2 ; $14
099D8 C4 C6                     	.db $C4, $C6 ; $16
099DA                           	; Albatoss
099DA E1 E3                     	.db $E1, $E3 ; $18
099DC E5 E7                     	.db $E5, $E7 ; $1A
099DE E1 E3                     	.db $E1 ,$E3 ; $1C
099E0 E5 E7                     	.db $E5 ,$E7 ; $1E
099E2                           	; Ninji
099E2 78 7A                     	.db $78, $7A ; $20
099E4 7C 7E                     	.db $7C, $7E ; $22
099E6                           	; Beezo
099E6 DC DA                     	.db $DC, $DA ; $24
099E8 DC DE                     	.db $DC, $DE ; $26
099EA                           	; Small vegetable
099EA FE FE                     	.db $FE, $FE ; $28
099EC                           	; Large vegetable
099EC FC FC                     	.db $FC, $FC ; $2A
099EE                           	; Unused? (Leftover third vegetable?)
099EE 94 94                     	.db $94, $94 ; $2C
099F0                           	; Shell
099F0 96 96                     	.db $96, $96 ; $2E
099F2                           	; Coin
099F2 98 98                     	.db $98, $98 ; $30
099F4 9A 9A                     	.db $9A, $9A ; $32
099F6                           	; Bomb
099F6 DB DD                     	.db $DB, $DD ; $34
099F8 DB DD                     	.db $DB, $DD ; $36
099FA                           	; Mushroom block
099FA 7D 7F                     	.db $7D, $7F ; $38
099FC                           	; POW block
099FC C1 C3                     	.db $C1, $C3 ; $3A
099FE                           	; Block fizzle
099FE 8C 8C                     	.db $8C, $8C ; $3C
09A00 8E 8E                     	.db $8E ,$8E ; $3E
09A02                           	; Unused?
09A02 E0 E2                     	.db $E0, $E2 ; $40
09A04                           	; Falling log
09A04 6B 6D                     	.db $6B, $6D ; $42
09A06 6D 6F                     	.db $6D, $6F ; $44
09A08                           	; Puff of smoke, which can be two sprites tall for doors!
09A08 3A 3A                     	.db $3A, $3A ; $46
09A0A 3A 3A                     	.db $3A, $3A ; $48
09A0C 38 38                     	.db $38, $38 ; $4A
09A0E 38 38                     	.db $38, $38 ; $4C
09A10 36 36                     	.db $36, $36 ; $4E
09A12 36 36                     	.db $36, $36 ; $50
09A14 34 34                     	.db $34, $34 ; $52
09A16 34 34                     	.db $34, $34 ; $54
09A18                           	; Bullet
09A18 AE FB                     	.db $AE, $FB ; $56
09A1A AE FB                     	.db $AE, $FB ; $58
09A1C                           	; Birdo
09A1C 80 82                     	.db $80, $82 ; $5A
09A1E 84 86                     	.db $84, $86 ; $5C
09A20 80 82                     	.db $80, $82 ; $5E
09A22 AA AC                     	.db $AA, $AC ; $60
09A24                           	; Birdo (spit)
09A24 88 8A                     	.db $88, $8A ; $62
09A26 84 86                     	.db $84, $86 ; $64
09A28 88 8A                     	.db $88, $8A ; $66
09A2A AA AC                     	.db $AA, $AC ; $68
09A2C                           	; Birdo (hurt)
09A2C BC BE                     	.db $BC, $BE ; $6A
09A2E AA AC                     	.db $AA ,$AC ; $6C
09A30 BC BE                     	.db $BC, $BE ; $6E
09A32 AA AC                     	.db $AA, $AC ; $70
09A34                           	; Egg
09A34 B5 B9                     	.db $B5, $B9 ; $72
09A36 B5 B9                     	.db $B5, $B9 ; $74
09A38                           	; Door
09A38 81 83                     	.db $81, $83 ; $76
09A3A 85 87                     	.db $85, $87 ; $78
09A3C                           	; Door opening
09A3C FF FF                     	.db $FF, $FF ; $7A
09A3E FF FF                     	.db $FF, $FF ; $7C
09A40                           	; Door with lock
09A40 81 83                     	.db $81, $83 ; $7E
09A42 F5 87                     	.db $F5, $87 ; $80
09A44                           	; Key
09A44 C5 C7                     	.db $C5, $C7 ; $82
09A46                           	; Potion
09A46 C9 CB                     	.db $C9, $CB ; $84
09A48                           	; Trouter
09A48 92 94                     	.db $92, $94 ; $86
09A4A                           	; Hoopstar
09A4A 29 29                     	.db $29, $29 ; $88
09A4C 2B 2B                     	.db $2B, $2B ; $8A
09A4E                           	; Phanto
09A4E 3D 3F                     	.db $3D, $3F ; $8C
09A50                           	; Hawkmouth (closed top)
09A50 4C 4E                     	.db $4C, $4E ; $8E
09A52 50 52                     	.db $50, $52 ; $90
09A54                           	; Hawkmouth (open top)
09A54 4C 4E                     	.db $4C, $4E ; $92
09A56 56 58                     	.db $56, $58 ; $94
09A58                           	; Hawkmouth (jaw middle)
09A58 FB 5C                     	.db $FB, $5C ; $96
09A5A                           	; Hawkmouth (jaw bottom)
09A5A FB 5A                     	.db $FB, $5A ; $98
09A5C                           	; Hawkmouth (empty space)
09A5C FB FB                     	.db $FB, $FB ; $9A
09A5E                           	; Hawkmouth (neck)
09A5E FB 54                     	.db $FB, $54 ; $9C
09A60                           	; Crystal Ball
09A60 CF CF                     	.db $CF, $CF ; $9E
09A62                           	; Mushroom
09A62 A5 A5                     	.db $A5, $A5 ; $A0
09A64                           	; 1-Up
09A64 B0 B2                     	.db $B0, $B2 ; $A2
09A66                           	; Stopwatch
09A66 90 90                     	.db $90, $90 ; $A4
09A68                           	; Starman
09A68 CD CD                     	.db $CD, $CD ; $A6
09A6A                           	; Fireball
09A6A A8 A8                     	.db $A8, $A8 ; $A8
09A6C A8 A8                     	.db $A8, $A8 ; $AA
09A6E                           	; Panser
09A6E A0 A2                     	.db $A0, $A2 ; $AC
09A70                           	; Panser (spit)
09A70 A4 A4                     	.db $A4, $A4 ; $AE
09A72                           	; Panser (spit?)
09A72 A4 A4                     	.db $A4, $A4 ; $B0
09A74                           	;  Sand
09A74 4D 4D                     	.db $4D, $4D ; $B2
09A76 8C 8C                     	.db $8C, $8C ; $B4
09A78                           	; Spark
09A78 A6 A6                     	.db $A6, $A6 ; $B6
09A7A AB AB                     	.db $AB, $AB ; $B8
09A7C                           IFDEF EXPAND_TABLES
09A7C                           	unusedSpace EnemyTilemap1 + $100, $FB
09A7C                           ENDIF
09A7C                           
09A7C                           ;
09A7C                           ; Enemy Animation table
09A7C                           ; =====================
09A7C                           ;
09A7C                           ; These point to the tilemaps offset for an object's animation frames.
09A7C                           ;
09A7C                           ; There are two tilemaps, which are toggled via bit 4 of `EnemyArray_46E` data.
09A7C                           ; See `EnemyArray_46E_Data` to reference the values for each enemy.
09A7C                           ;
09A7C                           ; $FF is used to make an enemy invisible
09A7C                           ;
09A7C                           EnemyAnimationTable:
09A7C 00                        	.db $00 ; $00 Enemy_Heart
09A7D 00                        	.db $00 ; $01 Enemy_ShyguyRed
09A7E 08                        	.db $08 ; $02 Enemy_Tweeter
09A7F 00                        	.db $00 ; $03 Enemy_ShyguyPink
09A80 0C                        	.db $0C ; $04 Enemy_Porcupo
09A81 10                        	.db $10 ; $05 Enemy_SnifitRed
09A82 10                        	.db $10 ; $06 Enemy_SnifitGray
09A83 10                        	.db $10 ; $07 Enemy_SnifitPink
09A84 40                        	.db $40 ; $08 Enemy_Ostro
09A85 14                        	.db $14 ; $09 Enemy_BobOmb
09A86 18                        	.db $18 ; $0A Enemy_AlbatossCarryingBobOmb
09A87 18                        	.db $18 ; $0B Enemy_AlbatossStartRight
09A88 18                        	.db $18 ; $0C Enemy_AlbatossStartLeft
09A89 20                        	.db $20 ; $0D Enemy_NinjiRunning
09A8A 20                        	.db $20 ; $0E Enemy_NinjiJumping
09A8B 24                        	.db $24 ; $0F Enemy_BeezoDiving
09A8C 24                        	.db $24 ; $10 Enemy_BeezoStraight
09A8D BE                        	.db $BE ; $11 Enemy_WartBubble
09A8E 00                        	.db $00 ; $12 Enemy_Pidgit
09A8F 86                        	.db $86 ; $13 Enemy_Trouter
09A90 88                        	.db $88 ; $14 Enemy_Hoopstar
09A91 FF                        	.db $FF ; $15 Enemy_JarGeneratorShyguy
09A92 FF                        	.db $FF ; $16 Enemy_JarGeneratorBobOmb
09A93 8C                        	.db $8C ; $17 Enemy_Phanto
09A94 5C                        	.db $5C ; $18 Enemy_CobratJar
09A95 5C                        	.db $5C ; $19 Enemy_CobratSand
09A96 6C                        	.db $6C ; $1A Enemy_Pokey
09A97 56                        	.db $56 ; $1B Enemy_Bullet
09A98 5A                        	.db $5A ; $1C Enemy_Birdo
09A99 14                        	.db $14 ; $1D Enemy_Mouser
09A9A 72                        	.db $72 ; $1E Enemy_Egg
09A9B 00                        	.db $00 ; $1F Enemy_Tryclyde
09A9C A8                        	.db $A8 ; $20 Enemy_Fireball
09A9D 00                        	.db $00 ; $21 Enemy_Clawgrip
09A9E D6                        	.db $D6 ; $22 Enemy_ClawgripRock
09A9F AC                        	.db $AC ; $23 Enemy_PanserStationaryFiresAngled
09AA0 AC                        	.db $AC ; $24 Enemy_PanserWalking
09AA1 AC                        	.db $AC ; $25 Enemy_PanserStationaryFiresUp
09AA2 74                        	.db $74 ; $26 Enemy_Autobomb
09AA3 7A                        	.db $7A ; $27 Enemy_AutobombFire
09AA4 92                        	.db $92 ; $28 Enemy_WhaleSpout
09AA5 9A                        	.db $9A ; $29 Enemy_Flurry
09AA6 80                        	.db $80 ; $2A Enemy_Fryguy
09AA7 90                        	.db $90 ; $2B Enemy_FryguySplit
09AA8 00                        	.db $00 ; $2C Enemy_Wart
09AA9 00                        	.db $00 ; $2D Enemy_HawkmouthBoss
09AAA B6                        	.db $B6 ; $2E Enemy_Spark1
09AAB B6                        	.db $B6 ; $2F Enemy_Spark2
09AAC B6                        	.db $B6 ; $30 Enemy_Spark3
09AAD B6                        	.db $B6 ; $31 Enemy_Spark4
09AAE 28                        	.db $28 ; $32 Enemy_VegetableSmall
09AAF 2A                        	.db $2A ; $33 Enemy_VegetableLarge
09AB0 2C                        	.db $2C ; $34 Enemy_VegetableWart
09AB1 2E                        	.db $2E ; $35 Enemy_Shell
09AB2 30                        	.db $30 ; $36 Enemy_Coin
09AB3 34                        	.db $34 ; $37 Enemy_Bomb
09AB4 00                        	.db $00 ; $38 Enemy_Rocket
09AB5 38                        	.db $38 ; $39 Enemy_MushroomBlock
09AB6 3A                        	.db $3A ; $3A Enemy_POWBlock
09AB7 42                        	.db $42 ; $3B Enemy_FallingLogs
09AB8 82                        	.db $82 ; $3C Enemy_SubspaceDoor
09AB9 82                        	.db $82 ; $3D Enemy_Key
09ABA 84                        	.db $84 ; $3E Enemy_SubspacePotion
09ABB A0                        	.db $A0 ; $3F Enemy_Mushroom
09ABC A2                        	.db $A2 ; $40 Enemy_Mushroom1up
09ABD 04                        	.db $04 ; $41 Enemy_FlyingCarpet
09ABE 8E                        	.db $8E ; $42 Enemy_HawkmouthRight
09ABF 8E                        	.db $8E ; $43 Enemy_HawkmouthLeft
09AC0 9E                        	.db $9E ; $44 Enemy_CrystalBall
09AC1 A6                        	.db $A6 ; $45 Enemy_Starman
09AC2 A4                        	.db $A4 ; $46 Enemy_Stopwatch
09AC3                           
09AC3                           
09AC3                           ;
09AC3                           ; Sets the temporary screen x- and y-position for the current object.
09AC3                           ;
09AC3                           ; If the object is being carried by the player (and it's not the Princess),
09AC3                           ; this will bob the y-position along with the player animation.
09AC3                           ;
09AC3                           SetSpriteTempScreenPosition:
09AC3 B5 33                     	LDA ObjectYLo, X
09AC5 18                        	CLC
09AC6 E5 CB                     	SBC ScreenYLo
09AC8 B4 A8                     	LDY ObjectBeingCarriedTimer, X
09ACA F0 00                     	BEQ SetSpriteTempScreenPosition_Update
09ACC                           
09ACC A4 C7                     	LDY PlayerAnimationFrame
09ACE D0 00                     	BNE SetSpriteTempScreenPosition_Update
09AD0                           
09AD0                           	; Skip making the carried object bob if playing as the Princess
09AD0 A4 8F                     	LDY CurrentCharacter
09AD2 88                        	DEY
09AD3 F0 00                     	BEQ SetSpriteTempScreenPosition_Update
09AD5                           
09AD5 38                        	SEC
09AD6 E9 01                     	SBC #$01
09AD8                           
09AD8                           SetSpriteTempScreenPosition_Update:
09AD8 8D 2C 04                  	STA SpriteTempScreenY
09ADB B5 29                     	LDA ObjectXLo, X
09ADD 38                        	SEC
09ADE ED C0 04                  	SBC ScreenBoundaryLeftLo
09AE1 8D 29 04                  	STA SpriteTempScreenX
09AE4                           
09AE4 60                        	RTS
09AE5                           
09AE5                           
09AE5                           RenderSprite_Birdo:
09AE5 B5 51                     	LDA EnemyState, X
09AE7 C9 01                     	CMP #EnemyState_Alive
09AE9 D0 00                     	BNE loc_BANK2_9AE2
09AEB                           
09AEB BD 5C 04                  	LDA ObjectFlashTimer, X
09AEE F0 00                     	BEQ loc_BANK2_9AE6
09AF0                           
09AF0                           loc_BANK2_9AE2:
09AF0 A9 6A                     	LDA #$6A
09AF2 D0 00                     	BNE loc_BANK2_9AEC
09AF4                           
09AF4                           loc_BANK2_9AE6:
09AF4 B5 86                     	LDA ObjectTimer1, X
09AF6 F0 00                     	BEQ loc_BANK2_9AEF
09AF8                           
09AF8 A9 62                     	LDA #$62
09AFA                           
09AFA                           loc_BANK2_9AEC:
09AFA 4C 00 00                  	JMP RenderSprite_DrawObject
09AFD                           
09AFD                           ; ---------------------------------------------------------------------------
09AFD                           
09AFD                           loc_BANK2_9AEF:
09AFD 4C 00 00                  	JMP RenderSprite_NotAlbatoss
09B00                           
09B00                           
09B00                           RenderSprite_Albatoss:
09B00 A5 EE                     	LDA byte_RAM_EE
09B02 48                        	PHA
09B03 20 00 00                  	JSR RenderSprite_NotAlbatoss
09B06                           
09B06 68                        	PLA
09B07 0A                        	ASL A
09B08 85 EE                     	STA byte_RAM_EE
09B0A B5 B1                     	LDA EnemyArray_B1, X
09B0C 05 EF                     	ORA byte_RAM_EF
09B0E D0 00                     	BNE RenderSprite_Invisible
09B10                           
09B10 AD 29 04                  	LDA SpriteTempScreenX
09B13 69 08                     	ADC #$08
09B15 85 01                     	STA byte_RAM_1
09B17 B5 6F                     	LDA EnemyMovementDirection, X
09B19 85 02                     	STA byte_RAM_2
09B1B A9 01                     	LDA #$01
09B1D 85 03                     	STA byte_RAM_3
09B1F 85 05                     	STA byte_RAM_5
09B21 20 00 00                  	JSR FindSpriteSlot
09B24                           
09B24 A2 14                     	LDX #$14
09B26 4C 00 00                  	JMP loc_BANK2_9C7A
09B29                           
09B29                           
09B29                           ; =============== S U B R O U T I N E =======================================
09B29                           
09B29                           ;
09B29                           ; Renders a sprite for an object based on the enemy animation table lookup
09B29                           ;
09B29                           ; There are a lot of special cases basd on ObjectType
09B29                           ;
09B29                           ; Input
09B29                           ;   X = enemy index
09B29                           ;
09B29                           RenderSprite:
09B29 B4 90                     	LDY ObjectType, X
09B2B B9 7C 9A                  	LDA EnemyAnimationTable, Y
09B2E C9 FF                     	CMP #$FF
09B30 F0 00                     	BEQ RenderSprite_Invisible
09B32                           
09B32 C0 1D                     	CPY #Enemy_Mouser
09B34 D0 00                     	BNE RenderSprite_NotMouser
09B36                           
09B36 4C 00 00                  	JMP RenderSprite_Mouser
09B39                           
09B39                           RenderSprite_NotMouser:
09B39 C0 21                     	CPY #Enemy_Clawgrip
09B3B D0 00                     	BNE RenderSprite_NotClawgrip
09B3D                           
09B3D 4C 00 00                  	JMP RenderSprite_Clawgrip
09B40                           
09B40                           RenderSprite_NotClawgrip:
09B40 C0 22                     	CPY #Enemy_ClawgripRock
09B42 D0 00                     	BNE RenderSprite_NotClawgripRock
09B44                           
09B44 4C 00 00                  	JMP RenderSprite_ClawgripRock
09B47                           
09B47                           RenderSprite_NotClawgripRock:
09B47 C0 2D                     	CPY #Enemy_HawkmouthBoss
09B49 D0 00                     	BNE RenderSprite_NotHawkmouthBoss
09B4B                           
09B4B 4C 00 00                  	JMP RenderSprite_HawkmouthBoss
09B4E                           
09B4E                           RenderSprite_Invisible:
09B4E 60                        	RTS
09B4F                           
09B4F                           RenderSprite_NotHawkmouthBoss:
09B4F C0 12                     	CPY #Enemy_Pidgit
09B51 D0 00                     	BNE RenderSprite_NotPidgit
09B53                           
09B53 4C 00 00                  	JMP RenderSprite_Pidgit
09B56                           
09B56                           RenderSprite_NotPidgit:
09B56 C0 04                     	CPY #Enemy_Porcupo
09B58 D0 00                     	BNE RenderSprite_NotPorcupo
09B5A                           
09B5A 4C 00 00                  	JMP RenderSprite_Porcupo
09B5D                           
09B5D                           RenderSprite_NotPorcupo:
09B5D C0 33                     	CPY #Enemy_VegetableLarge
09B5F D0 00                     	BNE RenderSprite_NotVegetableLarge
09B61                           
09B61 4C 45 91                  	JMP RenderSprite_VegetableLarge
09B64                           
09B64                           RenderSprite_NotVegetableLarge:
09B64 C0 26                     	CPY #Enemy_Autobomb
09B66 D0 00                     	BNE RenderSprite_NotAutobomb
09B68                           
09B68 4C 00 00                  	JMP RenderSprite_Autobomb
09B6B                           
09B6B                           RenderSprite_NotAutobomb:
09B6B C0 2A                     	CPY #Enemy_Fryguy
09B6D D0 00                     	BNE RenderSprite_NotFryguy
09B6F                           
09B6F 4C 00 00                  	JMP RenderSprite_Fryguy
09B72                           
09B72                           RenderSprite_NotFryguy:
09B72 C0 43                     	CPY #Enemy_HawkmouthLeft
09B74 D0 00                     	BNE RenderSprite_NotHawkmouthLeft
09B76                           
09B76 4C 13 8E                  	JMP RenderSprite_HawkmouthLeft
09B79                           
09B79                           RenderSprite_NotHawkmouthLeft:
09B79 C0 2C                     	CPY #Enemy_Wart
09B7B D0 00                     	BNE RenderSprite_NotWart
09B7D                           
09B7D 4C 00 00                  	JMP RenderSprite_Wart
09B80                           
09B80                           RenderSprite_NotWart:
09B80 C0 28                     	CPY #Enemy_WhaleSpout
09B82 D0 00                     	BNE RenderSprite_NotWhaleSpout
09B84                           
09B84 4C 00 00                  	JMP RenderSprite_WhaleSpout
09B87                           
09B87                           RenderSprite_NotWhaleSpout:
09B87 C0 1A                     	CPY #Enemy_Pokey
09B89 D0 00                     	BNE RenderSprite_NotPokey
09B8B                           
09B8B 4C 00 00                  	JMP RenderSprite_Pokey
09B8E                           
09B8E                           RenderSprite_NotPokey:
09B8E C0 00                     	CPY #Enemy_Heart
09B90 D0 00                     	BNE RenderSprite_NotHeart
09B92                           
09B92                           	; This jump appears to never be taken;
09B92                           	; I don't think this code even runs with an enemy ID of 0 (heart)
09B92 4C 35 8F                  	JMP RenderSprite_Heart
09B95                           
09B95                           RenderSprite_NotHeart:
09B95 C0 08                     	CPY #Enemy_Ostro
09B97 D0 00                     	BNE RenderSprite_NotOstro
09B99                           
09B99 4C 00 00                  	JMP RenderSprite_Ostro
09B9C                           
09B9C                           RenderSprite_NotOstro:
09B9C C0 1F                     	CPY #Enemy_Tryclyde
09B9E D0 00                     	BNE RenderSprite_NotTryclyde
09BA0                           
09BA0 4C 00 00                  	JMP RenderSprite_Tryclyde
09BA3                           
09BA3                           RenderSprite_NotTryclyde:
09BA3 C0 1C                     	CPY #Enemy_Birdo
09BA5 D0 00                     	BNE RenderSprite_NotBirdo
09BA7                           
09BA7 4C E5 9A                  	JMP RenderSprite_Birdo
09BAA                           
09BAA                           RenderSprite_NotBirdo:
09BAA C0 0A                     	CPY #Enemy_AlbatossCarryingBobOmb
09BAC 90 00                     	BCC RenderSprite_NotAlbatoss
09BAE                           
09BAE C0 0D                     	CPY #Enemy_NinjiRunning
09BB0 B0 00                     	BCS RenderSprite_NotAlbatoss
09BB2                           
09BB2 4C 00 9B                  	JMP RenderSprite_Albatoss
09BB5                           
09BB5                           RenderSprite_NotAlbatoss:
09BB5 B4 90                     	LDY ObjectType, X
09BB7 C0 38                     	CPY #Enemy_Rocket
09BB9 D0 00                     	BNE RenderSprite_NotRocket
09BBB                           
09BBB 4C 00 00                  	JMP RenderSprite_Rocket
09BBE                           
09BBE                           RenderSprite_NotRocket:
09BBE B9 7C 9A                  	LDA EnemyAnimationTable, Y
09BC1                           
09BC1                           
09BC1                           ;
09BC1                           ; Draws an object to the screen
09BC1                           ;
09BC1                           ; Input
09BC1                           ;   A = tile index
09BC1                           ;   X = enemy index
09BC1                           ;   byte_RAM_EE = sprite clipping
09BC1                           ;   byte_RAM_EF = whether the enemy should be invisible
09BC1                           ;   byte_RAM_F4 = sprite slot offset
09BC1                           ;   SpriteTempScreenX = screen x-position
09BC1                           ;   SpriteTempScreenY = screen y-position
09BC1                           ;
09BC1                           RenderSprite_DrawObject:
09BC1 85 0F                     	STA byte_RAM_F
09BC3 A5 EF                     	LDA byte_RAM_EF
09BC5 D0 87                     	BNE RenderSprite_Invisible
09BC7                           
09BC7                           	; tilemap switcher
09BC7 BD 6E 04                  	LDA EnemyArray_46E, X
09BCA 29 10                     	AND #SpriteFlags46E_Tilemap2
09BCC 85 0B                     	STA byte_RAM_B
09BCE B4 6F                     	LDY EnemyMovementDirection, X
09BD0 B5 65                     	LDA ObjectAttributes, X
09BD2 29 18                     	AND #ObjAttrib_FrontFacing | ObjAttrib_Mirrored
09BD4 F0 00                     	BEQ loc_BANK2_9BD2
09BD6                           
09BD6 A0 02                     	LDY #$02
09BD8 AD 28 06                  	LDA InSubspaceOrJar
09BDB C9 02                     	CMP #$02
09BDD D0 00                     	BNE loc_BANK2_9BD2
09BDF                           
09BDF 88                        	DEY
09BE0                           
09BE0                           loc_BANK2_9BD2:
09BE0 84 02                     	STY byte_RAM_2
09BE2 B5 65                     	LDA ObjectAttributes, X
09BE4 29 44                     	AND #ObjAttrib_16x32 | ObjAttrib_Horizontal
09BE6 85 05                     	STA byte_RAM_5
09BE8 AD 2C 04                  	LDA SpriteTempScreenY
09BEB 85 00                     	STA byte_RAM_0
09BED A9 00                     	LDA #$00
09BEF 85 0D                     	STA byte_RAM_D
09BF1 BD 4A 04                  	LDA ObjectShakeTimer, X
09BF4 29 02                     	AND #$02
09BF6 4A                        	LSR A
09BF7 A4 EE                     	LDY byte_RAM_EE
09BF9 F0 00                     	BEQ loc_BANK2_9BEF
09BFB                           
09BFB A9 00                     	LDA #$00
09BFD                           
09BFD                           loc_BANK2_9BEF:
09BFD 6D 29 04                  	ADC SpriteTempScreenX
09C00 85 01                     	STA byte_RAM_1
09C02 B5 65                     	LDA ObjectAttributes, X
09C04 29 A3                     	AND #ObjAttrib_UpsideDown | ObjAttrib_BehindBackground | ObjAttrib_Palette
09C06 BC 5C 04                  	LDY ObjectFlashTimer, X
09C09 F0 00                     	BEQ loc_BANK2_9C07
09C0B                           
09C0B 29 A0                     	AND #ObjAttrib_UpsideDown | ObjAttrib_BehindBackground
09C0D 85 08                     	STA byte_RAM_8
09C0F 98                        	TYA
09C10 4A                        	LSR A
09C11 29 03                     	AND #$03
09C13 05 08                     	ORA byte_RAM_8
09C15                           
09C15                           loc_BANK2_9C07:
09C15 85 03                     	STA byte_RAM_3
09C17 BD 6E 04                  	LDA EnemyArray_46E, X
09C1A 85 0C                     	STA byte_RAM_C
09C1C 0A                        	ASL A
09C1D B5 9F                     	LDA ObjectAnimationTimer, X
09C1F A6 0F                     	LDX byte_RAM_F
09C21                           ObjectAnimationTimerMask:
09C21 29 08                     	AND #$08 ; determines how often to alternate between animation frames
09C23 F0 00                     	BEQ loc_BANK2_9C31
09C25                           
09C25 90 00                     	BCC loc_BANK2_9C1F
09C27                           
09C27 A9 01                     	LDA #$01
09C29 85 02                     	STA byte_RAM_2
09C2B D0 00                     	BNE loc_BANK2_9C31
09C2D                           
09C2D                           loc_BANK2_9C1F:
09C2D E8                        	INX
09C2E E8                        	INX
09C2F A5 05                     	LDA byte_RAM_5
09C31 29 40                     	AND #$40
09C33 F0 00                     	BEQ loc_BANK2_9C31
09C35                           
09C35 E8                        	INX
09C36 E8                        	INX
09C37 A5 0C                     	LDA byte_RAM_C
09C39 29 20                     	AND #SpriteFlags46E_WideSprite
09C3B F0 00                     	BEQ loc_BANK2_9C31
09C3D                           
09C3D E8                        	INX
09C3E E8                        	INX
09C3F                           
09C3F                           loc_BANK2_9C31:
09C3F A4 F4                     	LDY byte_RAM_F4
09C41 A5 05                     	LDA byte_RAM_5
09C43 29 40                     	AND #$40
09C45 F0 00                     	BEQ loc_BANK2_9C7A
09C47                           
09C47 A5 05                     	LDA byte_RAM_5
09C49 29 04                     	AND #$04
09C4B F0 00                     	BEQ loc_BANK2_9C53
09C4D                           
09C4D A5 EE                     	LDA byte_RAM_EE
09C4F 85 08                     	STA byte_RAM_8
09C51 A5 02                     	LDA byte_RAM_2
09C53 C9 01                     	CMP #$01
09C55 D0 00                     	BNE loc_BANK2_9C53
09C57                           
09C57 A5 01                     	LDA byte_RAM_1
09C59 69 0F                     	ADC #$0F
09C5B 85 01                     	STA byte_RAM_1
09C5D 06 EE                     	ASL byte_RAM_EE
09C5F 06 EE                     	ASL byte_RAM_EE
09C61                           
09C61                           loc_BANK2_9C53:
09C61 20 00 00                  	JSR SetSpriteTiles
09C64                           
09C64 A5 05                     	LDA byte_RAM_5
09C66 29 04                     	AND #$04
09C68 F0 00                     	BEQ loc_BANK2_9C7A
09C6A                           
09C6A AD 2C 04                  	LDA SpriteTempScreenY
09C6D 85 00                     	STA byte_RAM_0
09C6F AD 29 04                  	LDA SpriteTempScreenX
09C72 85 01                     	STA byte_RAM_1
09C74 A5 08                     	LDA byte_RAM_8
09C76 85 EE                     	STA byte_RAM_EE
09C78 A5 02                     	LDA byte_RAM_2
09C7A C9 01                     	CMP #$01
09C7C F0 00                     	BEQ loc_BANK2_9C7A
09C7E                           
09C7E A5 01                     	LDA byte_RAM_1
09C80 69 0F                     	ADC #$0F
09C82 85 01                     	STA byte_RAM_1
09C84 06 EE                     	ASL byte_RAM_EE
09C86 06 EE                     	ASL byte_RAM_EE
09C88                           
09C88                           loc_BANK2_9C7A:
09C88 20 00 00                  	JSR SetSpriteTiles
09C8B                           
09C8B A4 F4                     	LDY byte_RAM_F4
09C8D A5 05                     	LDA byte_RAM_5
09C8F C9 40                     	CMP #$40
09C91 D0 00                     	BNE loc_BANK2_9CD9
09C93                           
09C93 A5 03                     	LDA byte_RAM_3
09C95 10 00                     	BPL loc_BANK2_9CD9
09C97                           
09C97 A5 0C                     	LDA byte_RAM_C
09C99 29 20                     	AND #$20
09C9B F0 00                     	BEQ loc_BANK2_9CBD
09C9D                           
09C9D A6 0D                     	LDX byte_RAM_D
09C9F BD 00 02                  	LDA SpriteDMAArea + $00, X
09CA2 48                        	PHA
09CA3 B9 00 02                  	LDA SpriteDMAArea + $00, Y
09CA6 9D 00 02                  	STA SpriteDMAArea + $00, X
09CA9 68                        	PLA
09CAA                           
09CAA                           loc_BANK2_9C9C:
09CAA 99 00 02                  	STA SpriteDMAArea + $00, Y
09CAD BD 04 02                  	LDA SpriteDMAArea + $04, X
09CB0 48                        	PHA
09CB1 B9 04 02                  	LDA SpriteDMAArea + $04, Y
09CB4 9D 04 02                  	STA SpriteDMAArea + $04, X
09CB7 68                        	PLA
09CB8 99 04 02                  	STA SpriteDMAArea + $04, Y
09CBB BD 08 02                  	LDA SpriteDMAArea + $08, X
09CBE 48                        	PHA
09CBF B9 08 02                  	LDA SpriteDMAArea + $08, Y
09CC2 9D 08 02                  	STA SpriteDMAArea + $08, X
09CC5 68                        	PLA
09CC6 99 08 02                  	STA SpriteDMAArea + $08, Y
09CC9 B0 00                     	BCS loc_BANK2_9CD9
09CCB                           
09CCB                           loc_BANK2_9CBD:
09CCB B9 00 02                  	LDA SpriteDMAArea, Y
09CCE 48                        	PHA
09CCF B9 08 02                  	LDA SpriteDMAArea + $08, Y
09CD2 99 00 02                  	STA SpriteDMAArea + $00, Y
09CD5 68                        	PLA
09CD6 99 08 02                  	STA SpriteDMAArea + $08, Y
09CD9 B9 04 02                  	LDA SpriteDMAArea + $04, Y
09CDC 48                        	PHA
09CDD B9 0C 02                  	LDA SpriteDMAArea + $0C, Y
09CE0 99 04 02                  	STA SpriteDMAArea + $04, Y
09CE3 68                        	PLA
09CE4 99 0C 02                  	STA SpriteDMAArea + $0C, Y
09CE7                           
09CE7                           loc_BANK2_9CD9:
09CE7 A6 12                     	LDX byte_RAM_12
09CE9 B5 65                     	LDA ObjectAttributes, X
09CEB 29 10                     	AND #ObjAttrib_Mirrored
09CED F0 00                     	BEQ locret_BANK2_9CF1
09CEF                           
09CEF A5 03                     	LDA byte_RAM_3
09CF1 99 02 02                  	STA SpriteDMAArea + $02, Y
09CF4 99 0A 02                  	STA SpriteDMAArea + $0A, Y
09CF7 09 40                     	ORA #$40
09CF9 99 06 02                  	STA SpriteDMAArea + $06, Y
09CFC 99 0E 02                  	STA SpriteDMAArea + $0E, Y
09CFF                           
09CFF                           locret_BANK2_9CF1:
09CFF 60                        	RTS
09D00                           
09D00                           
09D00                           ;
09D00                           ; Sets tiles for an object
09D00                           ;
09D00                           ; Input
09D00                           ;   X = tilemap offset
09D00                           ;   Y = sprite slot offset
09D00                           ;   byte_RAM_0 = screen y-offset
09D00                           ;   byte_RAM_1 = screen x-offset
09D00                           ;   byte_RAM_2 = sprite direction: $00 for left, $02 for right
09D00                           ;   byte_RAM_B = use EnemyTilemap2
09D00                           ;   byte_RAM_C = use 24x16 mode when set to $20
09D00                           ;   byte_RAM_EE = used for horizontal clipping/wrapping
09D00                           ; Output
09D00                           ;   X = next tilemap offset
09D00                           ;   Y = next sprite slot offset
09D00                           ;
09D00                           SetSpriteTiles:
09D00 A5 0C                     	LDA byte_RAM_C
09D02 29 20                     	AND #$20
09D04 D0 00                     	BNE SetSpriteTiles_24x16
09D06                           
09D06 A5 0B                     	LDA byte_RAM_B
09D08 D0 00                     	BNE SetSpriteTiles_Tilemap2
09D0A                           
09D0A                           SetSpriteTiles_Tilemap1:
09D0A BD C2 99                  	LDA EnemyTilemap1, X
09D0D 99 01 02                  	STA SpriteDMAArea + 1, Y
09D10 BD C3 99                  	LDA EnemyTilemap1 + 1, X
09D13 99 05 02                  	STA SpriteDMAArea + 5, Y
09D16 D0 00                     	BNE SetSpriteTiles_CheckDirection
09D18                           
09D18                           SetSpriteTiles_Tilemap2:
09D18 BD 00 00                  	LDA EnemyTilemap2, X
09D1B 99 01 02                  	STA SpriteDMAArea + 1, Y
09D1E BD 00 00                  	LDA EnemyTilemap2 + 1, X
09D21 99 05 02                  	STA SpriteDMAArea + 5, Y
09D24                           
09D24                           SetSpriteTiles_CheckDirection:
09D24 A5 02                     	LDA byte_RAM_2
09D26 4A                        	LSR A
09D27 A9 00                     	LDA #$00
09D29 90 00                     	BCC SetSpriteTiles_Left
09D2B                           
09D2B                           SetSpriteTiles_Right:
09D2B B9 01 02                  	LDA SpriteDMAArea + 1, Y
09D2E 48                        	PHA
09D2F B9 05 02                  	LDA SpriteDMAArea + 5, Y
09D32 99 01 02                  	STA SpriteDMAArea + 1, Y
09D35 68                        	PLA
09D36 99 05 02                  	STA SpriteDMAArea + 5, Y
09D39 A9 40                     	LDA #$40
09D3B                           
09D3B                           SetSpriteTiles_Left:
09D3B 05 03                     	ORA byte_RAM_3
09D3D 99 02 02                  	STA SpriteDMAArea + 2, Y
09D40 99 06 02                  	STA SpriteDMAArea + 6, Y
09D43 A9 F8                     	LDA #$F8
09D45 99 00 02                  	STA SpriteDMAArea, Y
09D48 99 04 02                  	STA SpriteDMAArea + 4, Y
09D4B                           
09D4B A5 EE                     	LDA byte_RAM_EE
09D4D 29 08                     	AND #$08
09D4F D0 00                     	BNE loc_BANK2_9D48
09D51                           
09D51 A5 00                     	LDA byte_RAM_0
09D53 99 00 02                  	STA SpriteDMAArea, Y
09D56                           
09D56                           loc_BANK2_9D48:
09D56 A5 EE                     	LDA byte_RAM_EE
09D58 29 04                     	AND #$04
09D5A D0 00                     	BNE loc_BANK2_9D53
09D5C                           
09D5C A5 00                     	LDA byte_RAM_0
09D5E 99 04 02                  	STA SpriteDMAArea + 4, Y
09D61                           
09D61                           loc_BANK2_9D53:
09D61 A5 00                     	LDA byte_RAM_0
09D63 18                        	CLC
09D64 69 10                     	ADC #$10
09D66 85 00                     	STA byte_RAM_0
09D68 A5 01                     	LDA byte_RAM_1
09D6A 99 03 02                  	STA SpriteDMAArea + 3, Y
09D6D 18                        	CLC
09D6E 69 08                     	ADC #$08
09D70 99 07 02                  	STA SpriteDMAArea + 7, Y
09D73 98                        	TYA
09D74 18                        	CLC
09D75 69 08                     	ADC #$08
09D77 A8                        	TAY
09D78 E8                        	INX
09D79 E8                        	INX
09D7A 60                        	RTS
09D7B                           
09D7B                           SetSpriteTiles_24x16:
09D7B BD 00 00                  	LDA EnemyTilemap2, X
09D7E 99 01 02                  	STA SpriteDMAArea + 1, Y
09D81 BD 00 00                  	LDA EnemyTilemap2 + 1, X
09D84 99 05 02                  	STA SpriteDMAArea + 5, Y
09D87 BD 00 00                  	LDA EnemyTilemap2 + 2, X
09D8A 99 09 02                  	STA SpriteDMAArea + 9, Y
09D8D                           
09D8D A5 02                     	LDA byte_RAM_2
09D8F 4A                        	LSR A
09D90 A9 00                     	LDA #$00
09D92 90 00                     	BCC SetSpriteTiles_24x16_Left
09D94                           
09D94                           SetSpriteTiles_24x16_Right:
09D94 B9 01 02                  	LDA SpriteDMAArea + 1, Y
09D97 48                        	PHA
09D98 B9 09 02                  	LDA SpriteDMAArea + 9, Y
09D9B 99 01 02                  	STA SpriteDMAArea + 1, Y
09D9E 68                        	PLA
09D9F 99 09 02                  	STA SpriteDMAArea + 9, Y
09DA2 A9 40                     	LDA #$40
09DA4                           
09DA4                           SetSpriteTiles_24x16_Left:
09DA4 05 03                     	ORA byte_RAM_3
09DA6 99 02 02                  	STA SpriteDMAArea + 2, Y
09DA9 99 06 02                  	STA SpriteDMAArea + 6, Y
09DAC 99 0A 02                  	STA SpriteDMAArea + $A, Y
09DAF A9 F8                     	LDA #$F8
09DB1 99 00 02                  	STA SpriteDMAArea, Y
09DB4 99 04 02                  	STA SpriteDMAArea + 4, Y
09DB7 99 08 02                  	STA SpriteDMAArea + 8, Y
09DBA                           
09DBA A5 EE                     	LDA byte_RAM_EE
09DBC 29 08                     	AND #$08
09DBE D0 00                     	BNE loc_BANK2_9DB7
09DC0                           
09DC0 A5 00                     	LDA byte_RAM_0
09DC2 99 00 02                  	STA SpriteDMAArea, Y
09DC5                           
09DC5                           loc_BANK2_9DB7:
09DC5 A5 EE                     	LDA byte_RAM_EE
09DC7 29 04                     	AND #$04
09DC9 D0 00                     	BNE loc_BANK2_9DC2
09DCB                           
09DCB A5 00                     	LDA byte_RAM_0
09DCD 99 04 02                  	STA SpriteDMAArea + 4, Y
09DD0                           
09DD0                           loc_BANK2_9DC2:
09DD0 A5 EE                     	LDA byte_RAM_EE
09DD2 29 02                     	AND #$02
09DD4 D0 00                     	BNE loc_BANK2_9DCD
09DD6                           
09DD6 A5 00                     	LDA byte_RAM_0
09DD8 99 08 02                  	STA SpriteDMAArea + 8, Y
09DDB                           
09DDB                           loc_BANK2_9DCD:
09DDB A5 00                     	LDA byte_RAM_0
09DDD 18                        	CLC
09DDE 69 10                     	ADC #$10
09DE0 85 00                     	STA byte_RAM_0
09DE2 A5 01                     	LDA byte_RAM_1
09DE4 99 03 02                  	STA SpriteDMAArea + 3, Y
09DE7 69 08                     	ADC #$08
09DE9 99 07 02                  	STA SpriteDMAArea + 7, Y
09DEC 69 08                     	ADC #$08
09DEE 99 0B 02                  	STA SpriteDMAArea + $B, Y
09DF1 8A                        	TXA
09DF2 48                        	PHA
09DF3 20 00 00                  	JSR FindSpriteSlot
09DF6                           
09DF6 68                        	PLA
09DF7 AA                        	TAX
09DF8 A5 0D                     	LDA byte_RAM_D
09DFA D0 00                     	BNE loc_BANK2_9DF0
09DFC                           
09DFC 84 0D                     	STY byte_RAM_D
09DFE                           
09DFE                           loc_BANK2_9DF0:
09DFE E8                        	INX
09DFF E8                        	INX
09E00 E8                        	INX
09E01                           
09E01 60                        	RTS
09E02                           
09E02                           
09E02                           UNUSED_PorcupoOffset:
09E02 04                        	.db $04
09E03 00                        	.db $00
09E04                           PorcupoOffsetXRight:
09E04 FF                        	.db $FF
09E05 FF                        	.db $FF
09E06 00                        	.db $00
09E07 00                        	.db $00
09E08                           PorcupoOffsetXLeft:
09E08 01                        	.db $01
09E09 01                        	.db $01
09E0A 00                        	.db $00
09E0B 00                        	.db $00
09E0C                           PorcupoOffsetYRight:
09E0C 01                        	.db $01
09E0D 00                        	.db $00
09E0E 00                        	.db $00
09E0F 01                        	.db $01
09E10                           PorcupoOffsetYLeft:
09E10 01                        	.db $01
09E11 00                        	.db $00
09E12 00                        	.db $00
09E13 01                        	.db $01
09E14                           
09E14                           
09E14                           RenderSprite_Porcupo:
09E14 20 B5 9B                  	JSR RenderSprite_NotAlbatoss
09E17                           
09E17 A5 EE                     	LDA byte_RAM_EE
09E19 29 0C                     	AND #$0C
09E1B D0 00                     	BNE locret_BANK2_9E3A
09E1D                           
09E1D B5 9F                     	LDA ObjectAnimationTimer, X
09E1F 29 0C                     	AND #$0C
09E21 4A                        	LSR A
09E22 4A                        	LSR A
09E23 85 00                     	STA byte_RAM_0
09E25 B5 6F                     	LDA EnemyMovementDirection, X
09E27 AA                        	TAX
09E28 BD 01 9E                  	LDA PorcupoOffsetXRight - 3, X
09E2B 65 F4                     	ADC byte_RAM_F4
09E2D A8                        	TAY
09E2E 8A                        	TXA
09E2F 0A                        	ASL A
09E30 0A                        	ASL A
09E31 65 00                     	ADC byte_RAM_0
09E33 AA                        	TAX
09E34 B9 00 02                  	LDA SpriteDMAArea, Y
09E37 7D 08 9E                  	ADC PorcupoOffsetYRight - 4, X
09E3A 99 00 02                  	STA SpriteDMAArea, Y
09E3D B9 03 02                  	LDA SpriteDMAArea + 3, Y
09E40 7D 00 9E                  	ADC PorcupoOffsetXRight - 4, X
09E43 99 03 02                  	STA SpriteDMAArea + 3, Y
09E46 A6 12                     	LDX byte_RAM_12
09E48                           
09E48                           locret_BANK2_9E3A:
09E48 60                        	RTS
09E49                           
09E49                           
09E49                           ;
09E49                           ; Compares our position to the player's and returns
09E49                           ;
09E49                           ; Ouput
09E49                           ;   Y = 1 when player is to the left, 0 when player is to the right
09E49                           ;
09E49                           EnemyFindWhichSidePlayerIsOn:
09E49 A5 28                     	LDA PlayerXLo
09E4B F5 29                     	SBC ObjectXLo, X
09E4D 85 0F                     	STA byte_RAM_F
09E4F A5 14                     	LDA PlayerXHi
09E51 A0 00                     	LDY #$00
09E53 F5 15                     	SBC ObjectXHi, X
09E55 B0 00                     	BCS EnemyFindWhichSidePlayerIsOn_Exit
09E57                           
09E57 C8                        	INY
09E58                           
09E58                           EnemyFindWhichSidePlayerIsOn_Exit:
09E58 60                        	RTS
09E59                           
09E59                           
09E59                           ;
09E59                           ; Applies object physics for the y-axis
09E59                           ;
09E59                           ; Input
09E59                           ;   X = enemy index
09E59                           ;
09E59                           ApplyObjectPhysicsY:
09E59 8A                        	TXA
09E5A 18                        	CLC
09E5B 69 0A                     	ADC #$0A
09E5D AA                        	TAX
09E5E                           
09E5E                           ;
09E5E                           ; Applies object physics for the x-axis
09E5E                           ;
09E5E                           ; Input
09E5E                           ;   X = enemy index, physics direction
09E5E                           ;       ($00-$09 for horizontal, $0A-$13 for vertical)
09E5E                           ;
09E5E                           ; Output
09E5E                           ;   X = RAM_12
09E5E                           ;
09E5E                           ApplyObjectPhysicsX:
09E5E                           	; Add acceleration to velocity
09E5E B5 3D                     	LDA ObjectXVelocity, X
09E60 18                        	CLC
09E61 7D CC 04                  	ADC ObjectXAcceleration, X
09E64                           
09E64 48                        	PHA
09E65                           	; Lower nybble of velocity is for subpixel position
09E65 0A                        	ASL A
09E66 0A                        	ASL A
09E67 0A                        	ASL A
09E68 0A                        	ASL A
09E69 85 01                     	STA byte_RAM_1
09E6B                           
09E6B                           	; Upper nybble of velocity is for lo position
09E6B 68                        	PLA
09E6C 4A                        	LSR A
09E6D 4A                        	LSR A
09E6E 4A                        	LSR A
09E6F 4A                        	LSR A
09E70                           
09E70 C9 08                     	CMP #$08
09E72 90 00                     	BCC ApplyObjectPhysics_StoreVelocityLo
09E74                           
09E74                           	; Left/up: Carry negative bits through upper nybble
09E74 09 F0                     	ORA #$F0
09E76                           
09E76                           ApplyObjectPhysics_StoreVelocityLo:
09E76 85 00                     	STA byte_RAM_0
09E78                           
09E78 A0 00                     	LDY #$00
09E7A 0A                        	ASL A
09E7B 90 00                     	BCC ApplyObjectPhysics_StoreDirection
09E7D                           
09E7D                           	; Left/up
09E7D 88                        	DEY
09E7E                           
09E7E                           ApplyObjectPhysics_StoreDirection:
09E7E 84 02                     	STY byte_RAM_2
09E80                           
09E80                           	; Add lower nybble of velocity for subpixel position
09E80 BD 08 04                  	LDA ObjectXSubpixel, X
09E83 18                        	CLC
09E84 65 01                     	ADC byte_RAM_1
09E86 9D 08 04                  	STA ObjectXSubpixel, X
09E89                           
09E89                           	; Add upper nybble of velocity for lo position
09E89 B5 29                     	LDA ObjectXLo, X
09E8B 65 00                     	ADC byte_RAM_0
09E8D 95 29                     	STA ObjectXLo, X
09E8F                           
09E8F 26 01                     	ROL byte_RAM_1
09E91                           
09E91                           	; X < 10 is horizontal physics, X >= 10 is vertical physics
09E91 E0 0A                     	CPX #$0A
09E93 B0 00                     	BCS ApplyObjectPhysics_PositionHi
09E95                           
09E95                           ApplyObjectPhysics_HorizontalSpecialCases:
09E95 A9 00                     	LDA #$00
09E97 9D A4 04                  	STA ObjectNonSticky, X
09E9A B5 90                     	LDA ObjectType, X
09E9C C9 1B                     	CMP #Enemy_Bullet
09E9E F0 00                     	BEQ ApplyObjectPhysics_PositionHi
09EA0                           
09EA0 C9 0F                     	CMP #Enemy_BeezoDiving
09EA2 F0 00                     	BEQ ApplyObjectPhysics_PositionHi
09EA4                           
09EA4 C9 10                     	CMP #Enemy_BeezoStraight
09EA6 F0 00                     	BEQ ApplyObjectPhysics_PositionHi
09EA8                           
09EA8 A4 EC                     	LDY IsHorizontalLevel
09EAA F0 00                     	BEQ ApplyObjectPhysics_Exit
09EAC                           
09EAC                           ApplyObjectPhysics_PositionHi:
09EAC 46 01                     	LSR byte_RAM_1
09EAE B5 15                     	LDA ObjectXHi, X
09EB0 65 02                     	ADC byte_RAM_2
09EB2 95 15                     	STA ObjectXHi, X
09EB4                           
09EB4                           ApplyObjectPhysics_Exit:
09EB4 A6 12                     	LDX byte_RAM_12
09EB6 60                        	RTS
09EB7                           
09EB7                           
09EB7                           EnemyBehavior_TurnAround:
09EB7                           	; flip x-velocity
09EB7 B5 3D                     	LDA ObjectXVelocity, X
09EB9 49 FF                     	EOR #$FF
09EBB 18                        	CLC
09EBC 69 01                     	ADC #$01
09EBE 95 3D                     	STA ObjectXVelocity, X
09EC0                           	; if the enemy is not moving, flip direction next
09EC0 F0 00                     	BEQ EnemyBehavior_TurnAroundExit
09EC2                           
09EC2                           	; flip enemy movement direction
09EC2 B5 6F                     	LDA EnemyMovementDirection, X
09EC4 49 03                     	EOR #$03 ; $01 XOR $03 = $02, $02 XOR $03 = $01
09EC6 95 6F                     	STA EnemyMovementDirection, X
09EC8                           
09EC8                           EnemyBehavior_TurnAroundExit:
09EC8 4C 5E 9E                  	JMP ApplyObjectPhysicsX
09ECB                           
09ECB                           
09ECB                           IFDEF EXPAND_MUSIC
09ECB                           EnemyBehavior_BossDeathSound:
09ECB                           	LDA #DPCM_BossDeath
09ECB                           	STA DPCMQueue
09ECB                           	RTS
09ECB                           ENDIF
09ECB                           
09ECB                           IFDEF FIX_FRYGUY_SPLIT_COUNT
09ECB                           Fryguy_AccelerationX:
09ECB                           	.db $01
09ECB                           	.db $FF
09ECB                           
09ECB                           Fryguy_MaxVelocityX:
09ECB                           	.db $2A
09ECB                           	.db $D6
09ECB                           
09ECB                           Fryguy_AccelerationY:
09ECB                           	.db $01
09ECB                           	.db $FF
09ECB                           
09ECB                           Fryguy_MaxVelocityY:
09ECB                           	.db $18
09ECB                           	.db $E8
09ECB                           
09ECB                           ;
09ECB                           ; Determines whether Fryguy has reached/exceeded max y-velocity
09ECB                           ;
09ECB                           ; Output
09ECB                           ;   C = whether or not the Fryguy should reverse acceleration
09ECB                           ;
09ECB                           Fryguy_IsMaxVelocityY:
09ECB                           	BMI Fryguy_IsMaxVelocityY_Up
09ECB                           	CMP Fryguy_MaxVelocityY
09ECB                           	RTS
09ECB                           Fryguy_IsMaxVelocityY_Up:
09ECB                           	CMP Fryguy_MaxVelocityY + $01
09ECB                           	BEQ Fryguy_IsMaxVelocity_Reverse
09ECB                           	BCC Fryguy_IsMaxVelocity_Reverse
09ECB                           	CLC
09ECB                           	RTS
09ECB                           
09ECB                           Fryguy_IsMaxVelocity_Reverse:
09ECB                           	SEC
09ECB                           	RTS
09ECB                           
09ECB                           ;
09ECB                           ; Determines whether Fryguy has reached/exceeded max x-velocity
09ECB                           ;
09ECB                           ; Output
09ECB                           ;   C = whether or not the Fryguy should reverse acceleration
09ECB                           ;
09ECB                           Fryguy_IsMaxVelocityX:
09ECB                           	BMI Fryguy_IsMaxVelocityX_Left
09ECB                           	CMP Fryguy_MaxVelocityX
09ECB                           	RTS
09ECB                           Fryguy_IsMaxVelocityX_Left:
09ECB                           	CMP Fryguy_MaxVelocityX + $01
09ECB                           	BEQ Fryguy_IsMaxVelocity_Reverse
09ECB                           	BCC Fryguy_IsMaxVelocity_Reverse
09ECB                           	CLC
09ECB                           	RTS
09ECB                           ENDIF
09ECB                           
09ECB                           ; Unused space in the original ($9EBD - $A02F)
09ECB                           unusedSpace $A030, $FF
09ECB                           	IFDEF PRESERVE_UNUSED_SPACE
09ECB FF FF FF FF FF FF FF FF.. 		.pad $A030, $FF
0A030                           	ENDIF
0A030                           
0A030                           
0A030                           EnemyTilemap2:
0A030                           ; Pidgit
0A030 2D 2F                     	.db $2D, $2F ; $00
0A032 2D 2F                     	.db $2D, $2F ; $02
0A034                           	; Flying carpet
0A034 E0 E2                     	.db $E0, $E2 ; $04
0A036 E4 E6                     	.db $E4, $E6 ; $06
0A038 E0 E2                     	.db $E0, $E2 ; $08
0A03A E4 E6                     	.db $E4, $E6 ; $0A
0A03C E8 EA                     	.db $E8, $EA ; $0C
0A03E EC EE                     	.db $EC, $EE ; $0E
0A040 E8 EA                     	.db $E8, $EA ; $10
0A042 EC EE                     	.db $EC, $EE ; $12
0A044                           	; Mouser (3-tiles wide)
0A044 01 03 09                  	.db $01, $03, $09 ; $14
0A047 05 07 0B                  	.db $05, $07, $0B ; $17
0A04A 0D 0F 15                  	.db $0D, $0F, $15 ; $1A
0A04D 11 13 17                  	.db $11, $13, $17 ; $1D
0A050                           	; Mouser (throw)
0A050 01 03 09                  	.db $01, $03, $09 ; $20
0A053 05 19 1B                  	.db $05, $19, $1B ; $23
0A056 01 03 09                  	.db $01, $03, $09 ; $26
0A059 05 19 1B                  	.db $05, $19, $1B ; $29
0A05C                           	; Mouser (hurt)
0A05C 1D 1F 25                  	.db $1D, $1F, $25 ; $2C
0A05F 21 23 27                  	.db $21, $23, $27 ; $2F
0A062 1D 1F 25                  	.db $1D, $1F, $25 ; $32
0A065 21 23 27                  	.db $21, $23, $27 ; $35
0A068                           	; Mouser bomb
0A068 9C 9E                     	.db $9C, $9E ; $38
0A06A 9C 9E                     	.db $9C, $9E ; $3A
0A06C                           	; Ostro Shyguy
0A06C D0 D2                     	.db $D0, $D2 ; $3C
0A06E D4 D6                     	.db $D4, $D6 ; $3E
0A070                           	; Ostro
0A070 F0 F2                     	.db $F0, $F2 ; $40
0A072 F4 F6                     	.db $F4, $F6 ; $42
0A074 F0 F2                     	.db $F0, $F2 ; $44
0A076 F8 FA                     	.db $F8, $FA ; $46
0A078                           	; Tryclyde upper body
0A078 0F 11                     	.db $0F, $11 ; $48
0A07A 13 15                     	.db $13, $15 ; $4A
0A07C                           	; Tryclyde upper body (hurt)
0A07C 1F 11                     	.db $1F, $11 ; $4C
0A07E 13 15                     	.db $13, $15 ; $4E
0A080                           	; Tryclyde lower body (tail up)
0A080 17 19 1B                  	.db $17, $19, $1B ; $50
0A083                           	; Tryclyde lower body (tail down)
0A083 17 19 1D                  	.db $17, $19, $1D ; $53
0A086                           	; Tryclyde head (hurt)
0A086 09 0B                     	.db $09, $0B ; $56
0A088                           	; Tryclyde head
0A088 01 03                     	.db $01, $03 ; $58
0A08A                           	; Tryclyde head (spit)
0A08A 05 07                     	.db $05, $07 ; $5A
0A08C                           	; Cobrat
0A08C 55 59                     	.db $55, $59 ; $5C
0A08E 5B 5D                     	.db $5B, $5D ; $5E
0A090 F0 F2                     	.db $F0, $F2 ; $60
0A092 F4 F6                     	.db $F4, $F6 ; $62
0A094                           	; Cobrat (spit)
0A094 45 59                     	.db $45, $59 ; $64
0A096 5B 5D                     	.db $5B, $5D ; $66
0A098 45 59                     	.db $45, $59 ; $68
0A09A 5B 5D                     	.db $5B, $5D ; $6A
0A09C                           	; Pokey
0A09C E8 EA                     	.db $E8, $EA ; $6C
0A09E EC EE                     	.db $EC, $EE ; $6E
0A0A0 EC EE                     	.db $EC, $EE ; $70
0A0A2 EC EE                     	.db $EC, $EE ; $72
0A0A4                           	; Autobomb
0A0A4 F0 F2                     	.db $F0, $F2 ; $74
0A0A6 F0 F2                     	.db $F0, $F2 ; $76
0A0A8 F4 F6                     	.db $F4, $F6 ; $78
0A0AA                           	; Autobomb Fire
0A0AA F8 FA                     	.db $F8, $FA ; $7A
0A0AC                           	; Autobomb Shyguy
0A0AC D0 D2                     	.db $D0, $D2 ; $7C
0A0AE D4 D6                     	.db $D4, $D6 ; $7E
0A0B0                           	; Fryguy
0A0B0 01 03                     	.db $01, $03 ; $80
0A0B2 05 07                     	.db $05, $07 ; $82
0A0B4 09 0B                     	.db $09, $0B ; $84
0A0B6 0D 0F                     	.db $0D, $0F ; $86
0A0B8                           	; Fryguy (hurt)
0A0B8 01 11                     	.db $01, $11 ; $88
0A0BA 05 15                     	.db $05, $15 ; $8A
0A0BC 13 0B                     	.db $13, $0B ; $8C
0A0BE 17 0F                     	.db $17, $0F ; $8E
0A0C0                           	; Fryguy split
0A0C0 19 1B                     	.db $19,$1B ; $90
0A0C2                           	; Whale spout
0A0C2 2D 2F                     	.db $2D, $2F ; $92
0A0C4                           	; Whale spout (falling)
0A0C4 3A 3A                     	.db $3A, $3A ; $94
0A0C6                           	; Rocket
0A0C6 E0 E2                     	.db $E0, $E2 ; $96
0A0C8 E4 E6                     	.db $E4, $E6 ; $98
0A0CA                           	; Flurry
0A0CA E8 EA                     	.db $E8, $EA ; $9A
0A0CC EC EE                     	.db $EC, $EE ; $9C
0A0CE                           	; Wart top
0A0CE 01 03 05 07               	.db $01, $03, $05, $07 ; $9E
0A0D2                           	; Wart top (spit)
0A0D2 4F 5D 05 07               	.db $4F, $5D, $05, $07 ; $A2
0A0D6                           	; Wart middle
0A0D6 09 0B 0D 0F               	.db $09, $0B, $0D, $0F ; $A6
0A0DA                           	; Wart middle (spit)
0A0DA 27 79 7B 2D               	.db $27, $79, $7B, $2D ; $AA
0A0DE                           	; Wart top (hurt)
0A0DE 4F 2F 45 55               	.db $4F, $2F, $45, $55 ; $AE
0A0E2                           	; Wart bottom (left foot up)
0A0E2 11 13 15 17               	.db $11, $13, $15, $17 ; $B2
0A0E6                           	; Wart bottom (right foot up)
0A0E6 1F 21 23 25               	.db $1F, $21, $23, $25 ; $B6
0A0EA                           	; Wart bottom (standing)
0A0EA 11 13 23 25               	.db $11, $13, $23, $25 ; $BA
0A0EE                           	; Wart bubble
0A0EE 59 59                     	.db $59, $59 ; $BE
0A0F0 5B 5B                     	.db $5B, $5B ; $C0
0A0F2                           	; Clawgrip (claw down)
0A0F2 01 03                     	.db $01, $03 ; $C2
0A0F4 05 07                     	.db $05, $07 ; $C4
0A0F6                           	; Clawgrip (claw up)
0A0F6 09 0B                     	.db $09, $0B ; $C6
0A0F8 0D 0F                     	.db $0D, $0F ; $C8
0A0FA                           	; Clawgrip (reach)
0A0FA FB 11                     	.db $FB, $11 ; $CA
0A0FC 15 17                     	.db $15, $17 ; $CC
0A0FE 13 FB                     	.db $13, $FB ; $CE
0A100 19 1B                     	.db $19, $1B ; $D0
0A102                           	; Clawgrip (pain)
0A102 1D 1F                     	.db $1D, $1F ; $D2
0A104 21 23                     	.db $21, $23 ; $D4
0A106                           	; Clawgrip Rock
0A106 25 27                     	.db $25, $27 ; $D6
0A108 25 27                     	.db $25, $27 ; $D8
0A10A                           IFDEF EXPAND_TABLES
0A10A                           	unusedSpace EnemyTilemap2 + $100, $FB
0A10A                           ENDIF
0A10A                           
0A10A                           
0A10A                           EnemyInit_Clawgrip:
0A10A 20 60 8F                  	JSR EnemyInit_Birdo
0A10D                           
0A10D                           IFDEF RESET_CHR_LATCH
0A10D                           	LDA #$03
0A10D                           	JSR SetBossTileset
0A10D                           ENDIF
0A10D                           
0A10D A9 04                     	LDA #$04
0A10F 9D 65 04                  	STA EnemyHP, X
0A112 A9 00                     	LDA #$00
0A114 95 3D                     	STA ObjectXVelocity, X
0A116 B5 29                     	LDA ObjectXLo, X
0A118 18                        	CLC
0A119 69 04                     	ADC #$04
0A11B 95 29                     	STA ObjectXLo, X
0A11D 4C 4F 84                  	JMP SetEnemyAttributes
0A120                           
0A120                           
0A120                           ClawgripRock_ThrowVelocityY:
0A120 C8                        	.db $C8
0A121 D0                        	.db $D0
0A122 E0                        	.db $E0
0A123 F0                        	.db $F0
0A124 00                        	.db $00
0A125 10                        	.db $10
0A126 20                        	.db $20
0A127 C8                        	.db $C8
0A128                           
0A128                           ClawgripRock_JumpVelocityY:
0A128 DC                        	.db $DC
0A129 E2                        	.db $E2
0A12A E8                        	.db $E8
0A12B F0                        	.db $F0
0A12C F8                        	.db $F8
0A12D E8                        	.db $E8
0A12E DC                        	.db $DC
0A12F DC                        	.db $DC
0A130                           
0A130                           
0A130                           EnemyBehavior_Clawgrip:
0A130 BD 5C 04                  	LDA ObjectFlashTimer, X
0A133 1D 38 04                  	ORA ObjectStunTimer, X
0A136 F0 00                     	BEQ loc_BANK3_A13B
0A138                           
0A138 4C 29 9B                  	JMP RenderSprite
0A13B                           
0A13B                           ; ---------------------------------------------------------------------------
0A13B                           
0A13B                           loc_BANK3_A13B:
0A13B 20 88 99                  	JSR EnemyBehavior_CheckDamagedInterrupt
0A13E                           
0A13E B5 33                     	LDA ObjectYLo, X
0A140 C9 70                     	CMP #$70
0A142 90 00                     	BCC loc_BANK3_A147
0A144                           
0A144 20 DC 95                  	JSR ResetObjectYVelocity
0A147                           
0A147                           loc_BANK3_A147:
0A147 B5 86                     	LDA ObjectTimer1, X
0A149 D0 00                     	BNE loc_BANK3_A179
0A14B                           
0A14B B5 79                     	LDA EnemyVariable, X
0A14D 29 3F                     	AND #$3F
0A14F D0 00                     	BNE loc_BANK3_A168
0A151                           
0A151 AD AE 05                  	LDA PseudoRNGValue
0A154 29 03                     	AND #$03
0A156 F0 00                     	BEQ loc_BANK3_A168
0A158                           
0A158 AC C0 04                  	LDY ScreenBoundaryLeftLo
0A15B 88                        	DEY
0A15C C0 80                     	CPY #$80
0A15E 90 00                     	BCC loc_BANK3_A168
0A160                           
0A160 A9 7F                     	LDA #$7F
0A162 95 86                     	STA ObjectTimer1, X
0A164 A0 00                     	LDY #$00
0A166 F0 00                     	BEQ loc_BANK3_A174
0A168                           
0A168                           loc_BANK3_A168:
0A168 F6 79                     	INC EnemyVariable, X
0A16A A0 F0                     	LDY #$F0
0A16C B5 79                     	LDA EnemyVariable, X
0A16E 29 20                     	AND #$20
0A170 F0 00                     	BEQ loc_BANK3_A174
0A172                           
0A172 A0 10                     	LDY #$10
0A174                           
0A174                           loc_BANK3_A174:
0A174 94 3D                     	STY ObjectXVelocity, X
0A176 4C 00 00                  	JMP loc_BANK3_A1CD
0A179                           
0A179                           ; ---------------------------------------------------------------------------
0A179                           
0A179                           loc_BANK3_A179:
0A179 C9 50                     	CMP #$50
0A17B D0 00                     	BNE loc_BANK3_A17D
0A17D                           
0A17D                           loc_BANK3_A17D:
0A17D C9 20                     	CMP #$20
0A17F D0 00                     	BNE loc_BANK3_A1CD
0A181                           
0A181                           	; Set jump velocity of Clawgrip
0A181 AD AE 05                  	LDA PseudoRNGValue
0A184 29 07                     	AND #$07
0A186 A8                        	TAY
0A187 B9 28 A1                  	LDA ClawgripRock_JumpVelocityY, Y
0A18A 95 47                     	STA ObjectYVelocity, X
0A18C D6 33                     	DEC ObjectYLo, X
0A18E 20 D6 92                  	JSR CreateEnemy
0A191                           
0A191 30 00                     	BMI loc_BANK3_A1CD
0A193                           
0A193                           	; Set y-position of rock
0A193 A4 00                     	LDY byte_RAM_0
0A195 B5 33                     	LDA ObjectYLo, X
0A197 38                        	SEC
0A198 E9 00                     	SBC #$00
0A19A 99 33 00                  	STA ObjectYLo, Y
0A19D                           
0A19D B5 1F                     	LDA ObjectYHi, X
0A19F E9 00                     	SBC #$00
0A1A1 99 1F 00                  	STA ObjectYHi, Y
0A1A4                           
0A1A4                           	; Set x-position of rock
0A1A4 B5 29                     	LDA ObjectXLo, X
0A1A6 18                        	CLC
0A1A7 69 08                     	ADC #$08
0A1A9 99 29 00                  	STA ObjectXLo, Y
0A1AC                           
0A1AC B5 15                     	LDA ObjectXHi, X
0A1AE 69 00                     	ADC #$00
0A1B0 99 15 00                  	STA ObjectXHi, Y
0A1B3                           
0A1B3                           	; Set object type of rock
0A1B3 A6 00                     	LDX byte_RAM_0
0A1B5 A9 22                     	LDA #Enemy_ClawgripRock
0A1B7 95 90                     	STA ObjectType, X
0A1B9                           
0A1B9                           	; Set y-velocity of rock
0A1B9 AD AE 05                  	LDA PseudoRNGValue
0A1BC 29 07                     	AND #$07
0A1BE A8                        	TAY
0A1BF B9 20 A1                  	LDA ClawgripRock_ThrowVelocityY, Y
0A1C2 95 47                     	STA ObjectYVelocity, X
0A1C4                           
0A1C4                           	; Set x-velocity of rock
0A1C4 A9 D0                     	LDA #$D0
0A1C6 95 3D                     	STA ObjectXVelocity, X
0A1C8 20 4F 84                  	JSR SetEnemyAttributes
0A1CB                           
0A1CB A6 12                     	LDX byte_RAM_12
0A1CD                           
0A1CD                           loc_BANK3_A1CD:
0A1CD 20 5E 9E                  	JSR ApplyObjectPhysicsX
0A1D0                           
0A1D0 20 8D 85                  	JSR ApplyObjectMovement_Vertical
0A1D3                           
0A1D3                           loc_BANK3_A1D3:
0A1D3 4C 29 9B                  	JMP RenderSprite
0A1D6                           
0A1D6                           
0A1D6                           ClawgripRockPositionX:
0A1D6 08                        	.db $08 ; hoisting
0A1D7 08                        	.db $08 ; holding low
0A1D8 1C                        	.db $1C ; reaching
0A1D9                           
0A1D9                           ClawgripRockPositionY:
0A1D9 F4                        	.db $F4 ; hoisting
0A1DA 11                        	.db $11 ; holding low
0A1DB 0F                        	.db $0F ; reaching
0A1DC                           
0A1DC                           ClawgripRockHoistOffset:
0A1DC 04                        	.db $04
0A1DD 06                        	.db $06
0A1DE 08                        	.db $08
0A1DF 08                        	.db $08
0A1E0 08                        	.db $08
0A1E1 08                        	.db $08
0A1E2 06                        	.db $06
0A1E3 04                        	.db $04
0A1E4                           
0A1E4                           
0A1E4                           RenderSprite_Clawgrip:
0A1E4                           	LDA_abs byte_RAM_F4
0A1E4                           	IFDEF COMPATIBILITY
0A1E4 AD                        		.db $ad
0A1E5 F4 00                     		.dw byte_RAM_F4
0A1E7                           	ELSE
0A1E7                           		LDA byte_RAM_F4
0A1E7                           		NOP_compat
0A1E7                           	ENDIF
0A1E7                           
0A1E7                           	; store sprite slot
0A1E7 95 B1                     	STA EnemyArray_B1, X
0A1E9 B4 51                     	LDY EnemyState, X
0A1EB 88                        	DEY
0A1EC 98                        	TYA
0A1ED 1D 5C 04                  	ORA ObjectFlashTimer, X
0A1F0 F0 00                     	BEQ loc_BANK3_A1FA
0A1F2                           
0A1F2                           	; Left side, pain
0A1F2 A0 D2                     	LDY #$D2
0A1F4 A9 00                     	LDA #$00
0A1F6 95 86                     	STA ObjectTimer1, X
0A1F8 F0 00                     	BEQ loc_BANK3_A21C
0A1FA                           
0A1FA                           loc_BANK3_A1FA:
0A1FA                           	; Left side, claw down
0A1FA A0 C2                     	LDY #$C2
0A1FC A5 10                     	LDA byte_RAM_10
0A1FE 29 10                     	AND #$10
0A200 D0 00                     	BNE loc_BANK3_A204
0A202                           
0A202                           	; Left side, claw up
0A202 A0 C6                     	LDY #$C6
0A204                           loc_BANK3_A204:
0A204 B5 86                     	LDA ObjectTimer1, X
0A206 F0 00                     	BEQ loc_BANK3_A21C
0A208                           
0A208 A0 CA                     	LDY #$CA
0A20A C9 60                     	CMP #$60
0A20C B0 00                     	BCS loc_BANK3_A21C
0A20E                           
0A20E A0 C2                     	LDY #$C2
0A210 C9 40                     	CMP #$40
0A212 B0 00                     	BCS loc_BANK3_A21C
0A214                           
0A214 A0 C6                     	LDY #$C6
0A216 C9 20                     	CMP #$20
0A218 B0 00                     	BCS loc_BANK3_A21C
0A21A                           
0A21A A0 C2                     	LDY #$C2
0A21C                           loc_BANK3_A21C:
0A21C A9 02                     	LDA #$02
0A21E 95 6F                     	STA EnemyMovementDirection, X
0A220 98                        	TYA
0A221 20 C1 9B                  	JSR RenderSprite_DrawObject
0A224                           
0A224                           RenderSprite_Clawgrip_RightSide:
0A224 A0 C6                     	LDY #$C6
0A226 A5 10                     	LDA byte_RAM_10
0A228 29 10                     	AND #$10
0A22A D0 00                     	BNE loc_BANK3_A22E
0A22C                           
0A22C A0 C2                     	LDY #$C2
0A22E                           
0A22E                           loc_BANK3_A22E:
0A22E B5 86                     	LDA ObjectTimer1, X
0A230 F0 00                     	BEQ loc_BANK3_A246
0A232                           
0A232 A0 CE                     	LDY #$CE
0A234 C9 60                     	CMP #$60
0A236 B0 00                     	BCS loc_BANK3_A246
0A238                           
0A238 A0 C2                     	LDY #$C2
0A23A C9 40                     	CMP #$40
0A23C B0 00                     	BCS loc_BANK3_A246
0A23E                           
0A23E A0 C6                     	LDY #$C6
0A240 C9 20                     	CMP #$20
0A242 B0 00                     	BCS loc_BANK3_A246
0A244                           
0A244 A0 C2                     	LDY #$C2
0A246                           
0A246                           loc_BANK3_A246:
0A246 BD 5C 04                  	LDA ObjectFlashTimer, X
0A249 F0 00                     	BEQ loc_BANK3_A24D
0A24B                           
0A24B A0 D2                     	LDY #$D2
0A24D                           
0A24D                           loc_BANK3_A24D:
0A24D AD 29 04                  	LDA SpriteTempScreenX
0A250 18                        	CLC
0A251 69 10                     	ADC #$10
0A253 8D 29 04                  	STA SpriteTempScreenX
0A256 06 EE                     	ASL byte_RAM_EE
0A258 06 EE                     	ASL byte_RAM_EE
0A25A B5 86                     	LDA ObjectTimer1, X
0A25C C9 60                     	CMP #$60
0A25E B0 00                     	BCS loc_BANK3_A262
0A260                           
0A260 56 6F                     	LSR EnemyMovementDirection, X
0A262                           
0A262                           loc_BANK3_A262:
0A262 98                        	TYA
0A263 48                        	PHA
0A264 20 00 00                  	JSR FindSpriteSlot
0A267                           
0A267 84 F4                     	STY byte_RAM_F4
0A269 68                        	PLA
0A26A 20 C1 9B                  	JSR RenderSprite_DrawObject
0A26D                           
0A26D                           RenderSprite_Clawgrip_Rock:
0A26D B5 86                     	LDA ObjectTimer1, X
0A26F F0 00                     	BEQ loc_BANK3_A2D2
0A271                           
0A271 4A                        	LSR A
0A272 4A                        	LSR A
0A273 4A                        	LSR A
0A274 4A                        	LSR A
0A275 4A                        	LSR A
0A276 F0 00                     	BEQ RenderSprite_Clawgrip_Exit
0A278                           
0A278                           	; Rock x-position
0A278 A8                        	TAY
0A279 B5 29                     	LDA ObjectXLo, X
0A27B 48                        	PHA
0A27C 18                        	CLC
0A27D 79 D5 A1                  	ADC ClawgripRockPositionX - 1, Y
0A280 95 29                     	STA ObjectXLo, X
0A282 38                        	SEC
0A283 ED C0 04                  	SBC ScreenBoundaryLeftLo
0A286 8D 29 04                  	STA SpriteTempScreenX
0A289                           
0A289                           	; Rock y-position
0A289 B5 33                     	LDA ObjectYLo, X
0A28B 18                        	CLC
0A28C 79 D8 A1                  	ADC ClawgripRockPositionY - 1, Y
0A28F 8D 2C 04                  	STA SpriteTempScreenY
0A292 B5 86                     	LDA ObjectTimer1, X
0A294 C9 30                     	CMP #$30
0A296 90 00                     	BCC loc_BANK3_A2AA
0A298                           
0A298 C9 40                     	CMP #$40
0A29A B0 00                     	BCS loc_BANK3_A2AA
0A29C                           
0A29C                           	; Little bounce while hoisting
0A29C 4A                        	LSR A
0A29D 29 07                     	AND #$07
0A29F A8                        	TAY
0A2A0 AD 2C 04                  	LDA SpriteTempScreenY
0A2A3 38                        	SEC
0A2A4 F9 DC A1                  	SBC ClawgripRockHoistOffset, Y
0A2A7 8D 2C 04                  	STA SpriteTempScreenY
0A2AA                           
0A2AA                           loc_BANK3_A2AA:
0A2AA 20 A2 88                  	JSR ScreenSpriteClipping_Horizontal
0A2AD                           
0A2AD A0 00                     	LDY #$00
0A2AF                           	STY_abs byte_RAM_F4
0A2AF                           	IFDEF COMPATIBILITY
0A2AF 8C                        		.db $8c
0A2B0 F4 00                     		.dw byte_RAM_F4
0A2B2                           	ELSE
0A2B2                           		STY byte_RAM_F4
0A2B2                           		NOP_compat
0A2B2                           	ENDIF
0A2B2                           
0A2B2 B5 65                     	LDA ObjectAttributes, X
0A2B4 48                        	PHA
0A2B5 A9 02                     	LDA #ObjAttrib_Palette2
0A2B7 95 65                     	STA ObjectAttributes, X
0A2B9 BD 6E 04                  	LDA EnemyArray_46E, X
0A2BC 48                        	PHA
0A2BD A9 10                     	LDA #SpriteFlags46E_Tilemap2
0A2BF 9D 6E 04                  	STA EnemyArray_46E, X
0A2C2                           RenderSprite_Clawgrip_Rock_Tile:
0A2C2 A9 D6                     	LDA #$D6
0A2C4 20 C1 9B                  	JSR RenderSprite_DrawObject
0A2C7                           
0A2C7                           	; Restore to Clawgrip
0A2C7 68                        	PLA
0A2C8 9D 6E 04                  	STA EnemyArray_46E, X
0A2CB 68                        	PLA
0A2CC 95 65                     	STA ObjectAttributes, X
0A2CE 68                        	PLA
0A2CF 95 29                     	STA ObjectXLo, X
0A2D1                           
0A2D1                           RenderSprite_Clawgrip_Exit:
0A2D1 60                        	RTS
0A2D2                           
0A2D2                           
0A2D2                           loc_BANK3_A2D2:
0A2D2 A5 10                     	LDA byte_RAM_10
0A2D4 29 04                     	AND #$04
0A2D6 F0 00                     	BEQ loc_BANK3_A2E1
0A2D8                           
0A2D8                           	LDX_abs byte_RAM_F4
0A2D8                           	IFDEF COMPATIBILITY
0A2D8 AE                        		.db $ae
0A2D9 F4 00                     		.dw byte_RAM_F4
0A2DB                           	ELSE
0A2DB                           		LDX byte_RAM_F4
0A2DB                           		NOP_compat
0A2DB                           	ENDIF
0A2DB                           
0A2DB DE 0C 02                  	DEC SpriteDMAArea + $C, X
0A2DE A6 12                     	LDX byte_RAM_12
0A2E0 60                        	RTS
0A2E1                           
0A2E1                           loc_BANK3_A2E1:
0A2E1 B5 B1                     	LDA EnemyArray_B1, X
0A2E3 AA                        	TAX
0A2E4 DE 08 02                  	DEC SpriteDMAArea + 8, X
0A2E7 A6 12                     	LDX byte_RAM_12
0A2E9 60                        	RTS
0A2EA                           
0A2EA                           
0A2EA                           EnemyBehavior_ClawgripRock:
0A2EA A9 00                     	LDA #$00
0A2EC 9D 5C 04                  	STA ObjectFlashTimer, X
0A2EF 20 88 99                  	JSR EnemyBehavior_CheckDamagedInterrupt
0A2F2                           
0A2F2 20 DB 98                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
0A2F5                           
0A2F5 20 5E 9E                  	JSR ApplyObjectPhysicsX
0A2F8                           
0A2F8 20 8D 85                  	JSR ApplyObjectMovement_Vertical
0A2FB                           
0A2FB 20 00 00                  	JSR ObjectTileCollision
0A2FE                           
0A2FE B5 5B                     	LDA EnemyCollision, X
0A300 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
0A302 F0 00                     	BEQ loc_BANK3_A30A
0A304                           
0A304 20 B7 9E                  	JSR EnemyBehavior_TurnAround
0A307                           
0A307 20 BE 95                  	JSR HalfObjectVelocityX
0A30A                           
0A30A                           loc_BANK3_A30A:
0A30A B5 5B                     	LDA EnemyCollision, X
0A30C 29 04                     	AND #CollisionFlags_Down
0A30E F0 00                     	BEQ loc_BANK3_A320
0A310                           
0A310 B5 33                     	LDA ObjectYLo, X
0A312 29 F0                     	AND #$F0
0A314 95 33                     	STA ObjectYLo, X
0A316 B5 47                     	LDA ObjectYVelocity, X
0A318 4A                        	LSR A
0A319 49 FF                     	EOR #$FF
0A31B 18                        	CLC
0A31C 69 01                     	ADC #$01
0A31E 95 47                     	STA ObjectYVelocity, X
0A320                           
0A320                           loc_BANK3_A320:
0A320 4C 29 9B                  	JMP RenderSprite
0A323                           
0A323                           ; ---------------------------------------------------------------------------
0A323                           
0A323                           RenderSprite_ClawgripRock:
0A323                           	LDA_abs_X ObjectBeingCarriedTimer ;, X
0A323                           	IFDEF COMPATIBILITY
0A323 BD                        		.db $bd
0A324 A8 00                     		.dw ObjectBeingCarriedTimer
0A326                           	ELSE
0A326                           		LDA ObjectBeingCarriedTimer, X
0A326                           		NOP_compat
0A326                           	ENDIF
0A326                           
0A326 1D 38 04                  	ORA ObjectStunTimer, X
0A329 D0 00                     	BNE loc_BANK3_A362
0A32B                           
0A32B A5 10                     	LDA byte_RAM_10
0A32D 85 00                     	STA byte_RAM_0
0A32F B5 3D                     	LDA ObjectXVelocity, X
0A331 10 00                     	BPL loc_BANK3_A338
0A333                           
0A333 49 FF                     	EOR #$FF
0A335 18                        	CLC
0A336 69 01                     	ADC #$01
0A338                           
0A338                           loc_BANK3_A338:
0A338 C9 20                     	CMP #$20
0A33A B0 00                     	BCS loc_BANK3_A344
0A33C                           
0A33C 46 00                     	LSR byte_RAM_0
0A33E C9 08                     	CMP #$08
0A340 B0 00                     	BCS loc_BANK3_A344
0A342                           
0A342 46 00                     	LSR byte_RAM_0
0A344                           
0A344                           loc_BANK3_A344:
0A344 A5 00                     	LDA byte_RAM_0
0A346 18                        	CLC
0A347 69 04                     	ADC #$04
0A349 29 08                     	AND #$08
0A34B 4A                        	LSR A
0A34C 4A                        	LSR A
0A34D 4A                        	LSR A
0A34E B4 3D                     	LDY ObjectXVelocity, X
0A350 10 00                     	BPL loc_BANK3_A354
0A352                           
0A352 49 01                     	EOR #$01
0A354                           
0A354                           loc_BANK3_A354:
0A354 95 6F                     	STA EnemyMovementDirection, X
0A356 A5 00                     	LDA byte_RAM_0
0A358 29 08                     	AND #$08
0A35A 0A                        	ASL A
0A35B 0A                        	ASL A
0A35C 0A                        	ASL A
0A35D 0A                        	ASL A
0A35E 09 02                     	ORA #$02
0A360 95 65                     	STA ObjectAttributes, X
0A362                           
0A362                           loc_BANK3_A362:
0A362 4C B5 9B                  	JMP RenderSprite_NotAlbatoss
0A365                           
0A365                           
0A365                           FlyingCarpetSpeed:
0A365 00                        	.db $00
0A366 15                        	.db $15
0A367 EB                        	.db $EB
0A368 00                        	.db $00
0A369                           
0A369                           
0A369                           EnemyBehavior_FlyingCarpet:
0A369 20 00 00                  	JSR ObjectTileCollision
0A36C                           
0A36C A5 10                     	LDA byte_RAM_10
0A36E 29 03                     	AND #$03
0A370 D0 00                     	BNE loc_BANK3_A37C
0A372                           
0A372 D6 B1                     	DEC EnemyArray_B1, X
0A374 D0 00                     	BNE loc_BANK3_A37C
0A376                           
0A376 8D B2 04                  	STA PlayerRidingCarpet
0A379 4C B7 89                  	JMP EnemyDestroy
0A37C                           
0A37C                           ; ---------------------------------------------------------------------------
0A37C                           
0A37C                           loc_BANK3_A37C:
0A37C AD B2 04                  	LDA PlayerRidingCarpet
0A37F F0 00                     	BEQ loc_BANK3_A38F
0A381                           
0A381 A5 46                     	LDA PlayerYVelocity
0A383 10 00                     	BPL loc_BANK3_A38F
0A385                           
0A385 A9 00                     	LDA #$00
0A387 95 47                     	STA ObjectYVelocity, X
0A389 8D B2 04                  	STA PlayerRidingCarpet
0A38C 4C 00 00                  	JMP RenderSprite_FlyingCarpet
0A38F                           
0A38F                           ; ---------------------------------------------------------------------------
0A38F                           
0A38F                           loc_BANK3_A38F:
0A38F B5 5B                     	LDA EnemyCollision, X
0A391 29 20                     	AND #$20
0A393 8D B2 04                  	STA PlayerRidingCarpet
0A396 D0 00                     	BNE loc_BANK3_A39B
0A398                           
0A398 4C 00 00                  	JMP loc_BANK3_A42A
0A39B                           
0A39B                           ; ---------------------------------------------------------------------------
0A39B                           
0A39B                           loc_BANK3_A39B:
0A39B B5 3D                     	LDA ObjectXVelocity, X
0A39D F0 00                     	BEQ loc_BANK3_A3A5
0A39F                           
0A39F B5 6F                     	LDA EnemyMovementDirection, X
0A3A1 29 01                     	AND #$01
0A3A3 85 9D                     	STA PlayerDirection
0A3A5                           
0A3A5                           loc_BANK3_A3A5:
0A3A5 B5 33                     	LDA ObjectYLo, X
0A3A7 38                        	SEC
0A3A8 E9 1A                     	SBC #$1A
0A3AA 85 32                     	STA PlayerYLo
0A3AC B5 1F                     	LDA ObjectYHi, X
0A3AE E9 00                     	SBC #$00
0A3B0 85 1E                     	STA PlayerYHi
0A3B2 A5 28                     	LDA PlayerXLo
0A3B4 38                        	SEC
0A3B5 E9 08                     	SBC #$08
0A3B7 95 29                     	STA ObjectXLo, X
0A3B9 A5 14                     	LDA PlayerXHi
0A3BB E9 00                     	SBC #$00
0A3BD 95 15                     	STA ObjectXHi, X
0A3BF A0 01                     	LDY #$01
0A3C1 B5 3D                     	LDA ObjectXVelocity, X
0A3C3 30 00                     	BMI loc_BANK3_A3C7
0A3C5                           
0A3C5 A0 FF                     	LDY #$FF
0A3C7                           
0A3C7                           loc_BANK3_A3C7:
0A3C7 8C CC 71                  	STY FlyingCarpetAcceleration_RAM
0A3CA A5 F7                     	LDA Player1JoypadHeld
0A3CC 29 03                     	AND #ControllerInput_Right | ControllerInput_Left
0A3CE A8                        	TAY
0A3CF                           	AND_abs PlayerCollision
0A3CF                           	IFDEF COMPATIBILITY
0A3CF 2D                        		.db $2d
0A3D0 5A 00                     		.dw PlayerCollision
0A3D2                           	ELSE
0A3D2                           		INC PlayerCollision
0A3D2                           		NOP_compat
0A3D2                           	ENDIF
0A3D2                           
0A3D2 D0 00                     	BNE loc_BANK3_A3E6
0A3D4                           
0A3D4 B9 65 A3                  	LDA FlyingCarpetSpeed, Y
0A3D7 D5 3D                     	CMP ObjectXVelocity, X
0A3D9 F0 00                     	BEQ loc_BANK3_A3E3
0A3DB                           
0A3DB B5 3D                     	LDA ObjectXVelocity, X
0A3DD 18                        	CLC
0A3DE 79 CC 71                  	ADC FlyingCarpetAcceleration_RAM, Y
0A3E1 95 3D                     	STA ObjectXVelocity, X
0A3E3                           
0A3E3                           loc_BANK3_A3E3:
0A3E3 4C 00 00                  	JMP loc_BANK3_A3EA
0A3E6                           
0A3E6                           ; ---------------------------------------------------------------------------
0A3E6                           
0A3E6                           loc_BANK3_A3E6:
0A3E6 A9 00                     	LDA #$00
0A3E8 95 3D                     	STA ObjectXVelocity, X
0A3EA                           
0A3EA                           loc_BANK3_A3EA:
0A3EA A0 01                     	LDY #$01
0A3EC B5 47                     	LDA ObjectYVelocity, X
0A3EE 30 00                     	BMI loc_BANK3_A3F2
0A3F0                           
0A3F0 A0 FF                     	LDY #$FF
0A3F2                           
0A3F2                           loc_BANK3_A3F2:
0A3F2 8C CC 71                  	STY FlyingCarpetAcceleration_RAM
0A3F5 A9 20                     	LDA #$20
0A3F7 CD 2C 04                  	CMP SpriteTempScreenY
0A3FA A9 00                     	LDA #$00
0A3FC 2A                        	ROL A
0A3FD 0A                        	ASL A
0A3FE 0A                        	ASL A
0A3FF 0A                        	ASL A
0A400 25 F7                     	AND Player1JoypadHeld
0A402 D0 00                     	BNE loc_BANK3_A417
0A404                           
0A404 B5 5B                     	LDA EnemyCollision, X
0A406 4A                        	LSR A
0A407 4A                        	LSR A
0A408 29 03                     	AND #$03
0A40A 85 00                     	STA byte_RAM_0
0A40C A5 F7                     	LDA Player1JoypadHeld
0A40E 4A                        	LSR A
0A40F 4A                        	LSR A
0A410 29 03                     	AND #$03
0A412 A8                        	TAY
0A413 25 00                     	AND byte_RAM_0
0A415 F0 00                     	BEQ loc_BANK3_A41B
0A417                           
0A417                           loc_BANK3_A417:
0A417 A9 00                     	LDA #$00
0A419 F0 00                     	BEQ loc_BANK3_A428
0A41B                           
0A41B                           loc_BANK3_A41B:
0A41B B9 65 A3                  	LDA FlyingCarpetSpeed, Y
0A41E D5 47                     	CMP ObjectYVelocity, X
0A420 F0 00                     	BEQ loc_BANK3_A42A
0A422                           
0A422 B5 47                     	LDA ObjectYVelocity, X
0A424 18                        	CLC
0A425 79 CC 71                  	ADC FlyingCarpetAcceleration_RAM, Y
0A428                           
0A428                           loc_BANK3_A428:
0A428 95 47                     	STA ObjectYVelocity, X
0A42A                           
0A42A                           loc_BANK3_A42A:
0A42A 20 5E 9E                  	JSR ApplyObjectPhysicsX
0A42D                           
0A42D 20 59 9E                  	JSR ApplyObjectPhysicsY
0A430                           
0A430 B5 B1                     	LDA EnemyArray_B1, X
0A432 C9 20                     	CMP #$20
0A434 B0 00                     	BCS EnemyBehavior_FlyingCarpet_Render
0A436                           
0A436 A5 10                     	LDA byte_RAM_10
0A438 29 02                     	AND #$02
0A43A                           
0A43A                           loc_BANK3_A43A:
0A43A D0 00                     	BNE EnemyBehavior_FlyingCarpet_Render
0A43C                           
0A43C 60                        	RTS
0A43D                           
0A43D                           EnemyBehavior_FlyingCarpet_Render:
0A43D 4C 00 00                  	JMP RenderSprite_FlyingCarpet
0A440                           
0A440                           
0A440                           CreateFlyingCarpet:
0A440 20 D2 92                  	JSR CreateEnemy_TryAllSlots
0A443                           
0A443 30 00                     	BMI CreateFlyingCarpet_Exit
0A445                           
0A445 A6 00                     	LDX byte_RAM_0
0A447 A4 12                     	LDY byte_RAM_12
0A449 A9 00                     	LDA #$00
0A44B 95 3D                     	STA ObjectXVelocity, X
0A44D 95 47                     	STA ObjectYVelocity, X
0A44F A9 41                     	LDA #Enemy_FlyingCarpet
0A451 95 90                     	STA ObjectType, X
0A453 B9 29 00                  	LDA ObjectXLo, Y
0A456 38                        	SEC
0A457 E9 08                     	SBC #$08
0A459 95 29                     	STA ObjectXLo, X
0A45B B9 15 00                  	LDA ObjectXHi, Y
0A45E E9 00                     	SBC #$00
0A460 95 15                     	STA ObjectXHi, X
0A462 B9 33 00                  	LDA ObjectYLo, Y
0A465 18                        	CLC
0A466 69 0E                     	ADC #$0E
0A468 95 33                     	STA ObjectYLo, X
0A46A B9 1F 00                  	LDA ObjectYHi, Y
0A46D 69 00                     	ADC #$00
0A46F 95 1F                     	STA ObjectYHi, X
0A471 20 4F 84                  	JSR SetEnemyAttributes
0A474                           
0A474                           	; life of carpet
0A474 A9 A0                     	LDA #$A0
0A476 95 B1                     	STA EnemyArray_B1, X
0A478                           
0A478                           CreateFlyingCarpet_Exit:
0A478 A6 12                     	LDX byte_RAM_12
0A47A 60                        	RTS
0A47B                           
0A47B                           
0A47B                           FlyingCarpetMirroring:
0A47B 02                        	.db $02
0A47C 02                        	.db $02
0A47D 01                        	.db $01
0A47E 01                        	.db $01
0A47F                           
0A47F                           FlyingCarpetTilemapIndex:
0A47F 04                        	.db $04
0A480 0C                        	.db $0C
0A481 0C                        	.db $0C
0A482 04                        	.db $04
0A483                           
0A483                           PidgitYAcceleration:
0A483 01                        	.db $01
0A484 FF                        	.db $FF
0A485                           
0A485                           PidgitTurnYVelocity:
0A485 08                        	.db $08
0A486 F8                        	.db $F8
0A487                           
0A487                           PidgitXAcceleration:
0A487 01                        	.db $01
0A488 FF                        	.db $FF
0A489                           
0A489                           PidgitTurnXVelocity:
0A489 20                        	.db $20
0A48A E0                        	.db $E0
0A48B                           
0A48B                           PidgitDiveXVelocity:
0A48B 14                        	.db $14
0A48C EC                        	.db $EC
0A48D                           
0A48D                           
0A48D                           EnemyBehavior_Pidgit:
0A48D 20 88 99                  	JSR EnemyBehavior_CheckDamagedInterrupt
0A490                           
0A490 F6 9F                     	INC ObjectAnimationTimer, X
0A492 BD 2F 04                  	LDA ObjectProjectileTimer, X
0A495 F0 00                     	BEQ EnemyBehavior_Pidgit_Alive
0A497                           
0A497 B5 65                     	LDA ObjectAttributes, X
0A499 09 80                     	ORA #ObjAttrib_UpsideDown
0A49B 95 65                     	STA ObjectAttributes, X
0A49D 20 00 00                  	JSR RenderSprite_Pidgit
0A4A0                           
0A4A0 4C 85 85                  	JMP ApplyObjectMovement
0A4A3                           
0A4A3                           ; ---------------------------------------------------------------------------
0A4A3                           
0A4A3                           EnemyBehavior_Pidgit_Alive:
0A4A3 20 DB 98                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
0A4A6                           
0A4A6 B5 B1                     	LDA EnemyArray_B1, X
0A4A8 F0 00                     	BEQ loc_BANK3_A4C1
0A4AA                           
0A4AA D6 47                     	DEC ObjectYVelocity, X
0A4AC 10 00                     	BPL loc_BANK3_A4BE
0A4AE                           
0A4AE B5 33                     	LDA ObjectYLo, X
0A4B0 C9 30                     	CMP #$30
0A4B2 B0 00                     	BCS loc_BANK3_A4BE
0A4B4                           
0A4B4 A9 00                     	LDA #$00
0A4B6 95 B1                     	STA EnemyArray_B1, X
0A4B8 95 3D                     	STA ObjectXVelocity, X
0A4BA 95 47                     	STA ObjectYVelocity, X
0A4BC D6 86                     	DEC ObjectTimer1, X
0A4BE                           
0A4BE                           loc_BANK3_A4BE:
0A4BE 4C 00 00                  	JMP loc_BANK3_A502
0A4C1                           
0A4C1                           ; ---------------------------------------------------------------------------
0A4C1                           
0A4C1                           loc_BANK3_A4C1:
0A4C1 B5 86                     	LDA ObjectTimer1, X
0A4C3 D0 00                     	BNE loc_BANK3_A4D6
0A4C5                           
0A4C5 A9 30                     	LDA #$30
0A4C7 95 47                     	STA ObjectYVelocity, X
0A4C9 20 49 9E                  	JSR EnemyFindWhichSidePlayerIsOn
0A4CC                           
0A4CC B9 8B A4                  	LDA PidgitDiveXVelocity, Y
0A4CF 95 3D                     	STA ObjectXVelocity, X
0A4D1 F6 B1                     	INC EnemyArray_B1, X
0A4D3 4C 00 00                  	JMP RenderSprite_Pidgit
0A4D6                           
0A4D6                           ; ---------------------------------------------------------------------------
0A4D6                           
0A4D6                           loc_BANK3_A4D6:
0A4D6 BD 80 04                  	LDA EnemyArray_480, X
0A4D9 29 01                     	AND #$01
0A4DB A8                        	TAY
0A4DC B5 47                     	LDA ObjectYVelocity, X
0A4DE 18                        	CLC
0A4DF 79 83 A4                  	ADC PidgitYAcceleration, Y
0A4E2 95 47                     	STA ObjectYVelocity, X
0A4E4 D9 85 A4                  	CMP PidgitTurnYVelocity, Y
0A4E7 D0 00                     	BNE loc_BANK3_A4EC
0A4E9                           
0A4E9 FE 80 04                  	INC EnemyArray_480, X
0A4EC                           
0A4EC                           loc_BANK3_A4EC:
0A4EC BD 77 04                  	LDA EnemyArray_477, X
0A4EF 29 01                     	AND #$01
0A4F1 A8                        	TAY
0A4F2 B5 3D                     	LDA ObjectXVelocity, X
0A4F4 18                        	CLC
0A4F5 79 87 A4                  	ADC PidgitXAcceleration, Y
0A4F8 95 3D                     	STA ObjectXVelocity, X
0A4FA D9 89 A4                  	CMP PidgitTurnXVelocity, Y
0A4FD D0 00                     	BNE loc_BANK3_A502
0A4FF                           
0A4FF FE 77 04                  	INC EnemyArray_477, X
0A502                           
0A502                           loc_BANK3_A502:
0A502 20 59 9E                  	JSR ApplyObjectPhysicsY
0A505                           
0A505 20 5E 9E                  	JSR ApplyObjectPhysicsX
0A508                           
0A508                           
0A508                           RenderSprite_Pidgit:
0A508 20 B5 9B                  	JSR RenderSprite_NotAlbatoss
0A50B                           
0A50B B5 51                     	LDA EnemyState, X
0A50D 38                        	SEC
0A50E E9 01                     	SBC #$01
0A510 1D 2F 04                  	ORA ObjectProjectileTimer, X
0A513 15 A8                     	ORA ObjectBeingCarriedTimer, X
0A515 D0 00                     	BNE RenderSprite_Pidgit_Exit
0A517                           
0A517                           	; Render Pidgit's carpet
0A517 20 00 00                  	JSR FindSpriteSlot
0A51A                           
0A51A                           	STY_abs byte_RAM_F4
0A51A                           	IFDEF COMPATIBILITY
0A51A 8C                        		.db $8c
0A51B F4 00                     		.dw byte_RAM_F4
0A51D                           	ELSE
0A51D                           		STY byte_RAM_F4
0A51D                           		NOP_compat
0A51D                           	ENDIF
0A51D                           
0A51D A9 45                     	LDA #ObjAttrib_Palette1 | ObjAttrib_Horizontal | ObjAttrib_16x32
0A51F 95 65                     	STA ObjectAttributes, X
0A521 B5 29                     	LDA ObjectXLo, X
0A523 48                        	PHA
0A524 38                        	SEC
0A525 E9 08                     	SBC #$08
0A527 95 29                     	STA ObjectXLo, X
0A529 B5 15                     	LDA ObjectXHi, X
0A52B 48                        	PHA
0A52C E9 00                     	SBC #$00
0A52E 95 15                     	STA ObjectXHi, X
0A530 20 A2 88                  	JSR ScreenSpriteClipping_Horizontal
0A533                           
0A533 68                        	PLA
0A534 95 15                     	STA ObjectXHi, X
0A536 68                        	PLA
0A537 95 29                     	STA ObjectXLo, X
0A539 AD 2C 04                  	LDA SpriteTempScreenY
0A53C 18                        	CLC
0A53D 69 0C                     	ADC #$0C
0A53F 8D 2C 04                  	STA SpriteTempScreenY
0A542 AD 29 04                  	LDA SpriteTempScreenX
0A545 E9 07                     	SBC #$07
0A547 8D 29 04                  	STA SpriteTempScreenX
0A54A 20 00 00                  	JSR RenderSprite_FlyingCarpet
0A54D                           
0A54D A9 0D                     	LDA #ObjAttrib_Palette1 | ObjAttrib_Horizontal | ObjAttrib_FrontFacing
0A54F 95 65                     	STA ObjectAttributes, X
0A551                           
0A551                           RenderSprite_Pidgit_Exit:
0A551 60                        	RTS
0A552                           
0A552                           
0A552                           RenderSprite_FlyingCarpet:
0A552 A5 10                     	LDA byte_RAM_10
0A554 4A                        	LSR A
0A555 4A                        	LSR A
0A556 4A                        	LSR A
0A557 29 03                     	AND #$03
0A559 B4 3D                     	LDY ObjectXVelocity, X
0A55B 30 00                     	BMI loc_BANK3_A55F
0A55D                           
0A55D 49 03                     	EOR #$03
0A55F                           
0A55F                           loc_BANK3_A55F:
0A55F A8                        	TAY
0A560 B9 7B A4                  	LDA FlyingCarpetMirroring, Y
0A563 95 6F                     	STA EnemyMovementDirection, X
0A565 B9 7F A4                  	LDA FlyingCarpetTilemapIndex, Y
0A568 4C C1 9B                  	JMP RenderSprite_DrawObject
0A56B                           
0A56B                           
0A56B                           EnemyInit_Mouser:
0A56B 20 60 8F                  	JSR EnemyInit_Birdo
0A56E                           
0A56E                           IFDEF RESET_CHR_LATCH
0A56E                           	LDA #$00
0A56E                           	JSR SetBossTileset
0A56E                           ENDIF
0A56E                           
0A56E A9 02                     	LDA #$02
0A570 AC 35 06                  	LDY CurrentWorldTileset
0A573 F0 00                     	BEQ EnemyInit_Mouser_SetHP
0A575                           
0A575 A9 04                     	LDA #$04
0A577                           
0A577                           EnemyInit_Mouser_SetHP:
0A577 9D 65 04                  	STA EnemyHP, X
0A57A 60                        	RTS
0A57B                           
0A57B                           ;
0A57B                           ; Mouser
0A57B                           ; ======
0A57B                           ;
0A57B                           ; Runs back and forth, throws bombs
0A57B                           ;
0A57B                           ; byte_RAM_10 = timer used for jumping and throwing
0A57B                           ; ObjectFlashTimer = pauses Mouser when not $00
0A57B                           ; ObjectTimer1 = counter used to time throwing (wind up and pitch)
0A57B                           ; EnemyArray_B1 = counter used for movement direction and non-throw pauses
0A57B                           ;
0A57B                           EnemyBehavior_Mouser:
0A57B 20 88 99                  	JSR EnemyBehavior_CheckDamagedInterrupt
0A57E                           
0A57E BD 5C 04                  	LDA ObjectFlashTimer, X
0A581 F0 00                     	BEQ EnemyBehavior_Mouser_Active
0A583                           
0A583 4C 29 9B                  	JMP RenderSprite
0A586                           
0A586                           EnemyBehavior_Mouser_Active:
0A586 20 00 00                  	JSR ObjectTileCollision
0A589                           
0A589 A9 02                     	LDA #$02
0A58B 95 6F                     	STA EnemyMovementDirection, X
0A58D 20 29 9B                  	JSR RenderSprite
0A590                           
0A590 B5 5B                     	LDA EnemyCollision, X
0A592 29 04                     	AND #CollisionFlags_Down
0A594 F0 00                     	BEQ EnemyBehavior_Mouser_Falling
0A596                           
0A596 20 DC 95                  	JSR ResetObjectYVelocity
0A599                           
0A599 A5 10                     	LDA byte_RAM_10
0A59B 29 FF                     	AND #$FF
0A59D D0 00                     	BNE EnemyBehavior_Mouser_Move
0A59F                           
0A59F                           EnemyBehavior_Mouser_Jump:
0A59F A9 D8                     	LDA #$D8
0A5A1 95 47                     	STA ObjectYVelocity, X
0A5A3 D0 00                     	BNE EnemyBehavior_Mouser_Falling
0A5A5                           
0A5A5                           EnemyBehavior_Mouser_Move:
0A5A5 A5 10                     	LDA byte_RAM_10
0A5A7 29 3F                     	AND #$3F
0A5A9 D0 00                     	BNE loc_BANK3_A5AF
0A5AB                           
0A5AB                           	; the wind-up
0A5AB A9 20                     	LDA #$20
0A5AD 95 86                     	STA ObjectTimer1, X
0A5AF                           
0A5AF                           loc_BANK3_A5AF:
0A5AF B4 86                     	LDY ObjectTimer1, X
0A5B1 D0 00                     	BNE EnemyBehavior_Mouser_MaybeThrow
0A5B3                           
0A5B3 F6 B1                     	INC EnemyArray_B1, X
0A5B5 B5 B1                     	LDA EnemyArray_B1, X
0A5B7 29 20                     	AND #$20
0A5B9 F0 00                     	BEQ EnemyBehavior_Mouser_Exit
0A5BB                           
0A5BB F6 9F                     	INC ObjectAnimationTimer, X
0A5BD F6 9F                     	INC ObjectAnimationTimer, X
0A5BF A0 18                     	LDY #$18 ; right
0A5C1 B5 B1                     	LDA EnemyArray_B1, X
0A5C3 29 40                     	AND #$40
0A5C5 D0 00                     	BNE EnemyBehavior_Mouser_PhysicsX
0A5C7                           
0A5C7 A0 E8                     	LDY #$E8 ; left
0A5C9                           
0A5C9                           EnemyBehavior_Mouser_PhysicsX:
0A5C9 94 3D                     	STY ObjectXVelocity, X
0A5CB 4C 5E 9E                  	JMP ApplyObjectPhysicsX
0A5CE                           
0A5CE                           EnemyBehavior_Mouser_MaybeThrow:
0A5CE                           	; the pitch
0A5CE C0 10                     	CPY #$10
0A5D0 D0 00                     	BNE EnemyBehavior_Mouser_Exit
0A5D2                           
0A5D2                           EnemyBehavior_Mouser_Throw:
0A5D2 20 D2 92                  	JSR CreateEnemy_TryAllSlots
0A5D5                           
0A5D5 30 00                     	BMI EnemyBehavior_Mouser_Exit
0A5D7                           
0A5D7 A6 00                     	LDX byte_RAM_0
0A5D9 A9 37                     	LDA #Enemy_Bomb
0A5DB 95 90                     	STA ObjectType, X
0A5DD B5 33                     	LDA ObjectYLo, X
0A5DF 69 03                     	ADC #$03
0A5E1 95 33                     	STA ObjectYLo, X
0A5E3 A9 E0                     	LDA #$E0 ; throw y-velocity
0A5E5 95 47                     	STA ObjectYVelocity, X
0A5E7 20 4F 84                  	JSR SetEnemyAttributes
0A5EA                           
0A5EA A9 FF                     	LDA #$FF ; bomb fuse
0A5EC 95 86                     	STA ObjectTimer1, X
0A5EE A9 E0                     	LDA #$E0 ; throw x-velocity
0A5F0 95 3D                     	STA ObjectXVelocity, X
0A5F2 A6 12                     	LDX byte_RAM_12
0A5F4                           
0A5F4                           EnemyBehavior_Mouser_Exit:
0A5F4 60                        	RTS
0A5F5                           
0A5F5                           EnemyBehavior_Mouser_Falling:
0A5F5 4C 8D 85                  	JMP ApplyObjectMovement_Vertical
0A5F8                           
0A5F8                           
0A5F8                           RenderSprite_Mouser:
0A5F8 B5 51                     	LDA EnemyState, X
0A5FA C9 01                     	CMP #EnemyState_Alive
0A5FC D0 00                     	BNE RenderSprite_Mouser_Hurt
0A5FE                           
0A5FE BD 5C 04                  	LDA ObjectFlashTimer, X
0A601 F0 00                     	BEQ RenderSprite_Mouser_Throw
0A603                           
0A603 F6 9F                     	INC ObjectAnimationTimer, X
0A605 A9 4A                     	LDA #ObjAttrib_16x32 | ObjAttrib_FrontFacing | ObjAttrib_Palette2
0A607 95 65                     	STA ObjectAttributes, X
0A609                           
0A609                           RenderSprite_Mouser_Hurt:
0A609 A9 B3                     	LDA #SpriteFlags46E_Damage | SpriteFlags46E_Unliftable | SpriteFlags46E_Tilemap2 | SpriteFlags46E_WideSprite | SpriteFlags46E_MirrorAnimation
0A60B 9D 6E 04                  	STA EnemyArray_46E, X
0A60E A9 2C                     	LDA #$2C ; hurt sprite
0A610 D0 00                     	BNE RenderSprite_Mouser_DrawObject
0A612                           
0A612                           RenderSprite_Mouser_Throw:
0A612 B4 86                     	LDY ObjectTimer1, X
0A614 88                        	DEY
0A615 C0 10                     	CPY #$10
0A617 B0 00                     	BCS RenderSprite_Mouser_Walk
0A619                           
0A619 A9 20                     	LDA #$20 ; throwing sprite
0A61B                           
0A61B                           RenderSprite_Mouser_DrawObject:
0A61B 20 C1 9B                  	JSR RenderSprite_DrawObject
0A61E                           
0A61E 4C 00 00                  	JMP RenderSprite_Mouser_Exit
0A621                           
0A621                           RenderSprite_Mouser_Walk:
0A621 20 B5 9B                  	JSR RenderSprite_NotAlbatoss
0A624                           
0A624 B5 86                     	LDA ObjectTimer1, X
0A626 C9 10                     	CMP #$10
0A628 90 00                     	BCC RenderSprite_Mouser_Exit
0A62A                           
0A62A                           RenderSprite_Mouser_Bomb:
0A62A A9 01                     	LDA #ObjAttrib_Palette1
0A62C 95 65                     	STA ObjectAttributes, X
0A62E A9 10                     	LDA #SpriteFlags46E_Tilemap2
0A630 9D 6E 04                  	STA EnemyArray_46E, X
0A633 AD 29 04                  	LDA SpriteTempScreenX
0A636 18                        	CLC
0A637 69 0B                     	ADC #$0B
0A639 8D 29 04                  	STA SpriteTempScreenX
0A63C 06 EE                     	ASL byte_RAM_EE
0A63E A0 00                     	LDY #$00
0A640                           	STY_abs byte_RAM_F4
0A640                           	IFDEF COMPATIBILITY
0A640 8C                        		.db $8c
0A641 F4 00                     		.dw byte_RAM_F4
0A643                           	ELSE
0A643                           		STY byte_RAM_F4
0A643                           		NOP_compat
0A643                           	ENDIF
0A643                           RenderSprite_Mouser_Bomb_Tile:
0A643 A9 38                     	LDA #$38 ; could have been $34 from tilemap 1 instead
0A645 20 C1 9B                  	JSR RenderSprite_DrawObject
0A648                           
0A648                           RenderSprite_Mouser_Exit:
0A648                           	; restore Mouser attributes after drawing the bomb
0A648 A9 43                     	LDA #ObjAttrib_16x32 | ObjAttrib_Palette3
0A64A 95 65                     	STA ObjectAttributes, X
0A64C A9 33                     	LDA #SpriteFlags46E_Damage | SpriteFlags46E_Unliftable | SpriteFlags46E_Tilemap2 | SpriteFlags46E_WideSprite
0A64E 9D 6E 04                  	STA EnemyArray_46E, X
0A651                           
0A651 60                        	RTS
0A652                           
0A652                           
0A652                           ; ---------------------------------------------------------------------------
0A652                           byte_BANK3_A652:
0A652 FB                        	.db $FB
0A653 05                        	.db $05
0A654                           ; ---------------------------------------------------------------------------
0A654                           
0A654                           RenderSprite_Ostro:
0A654 20 BE 9B                  	JSR RenderSprite_NotRocket
0A657                           
0A657 A5 EE                     	LDA byte_RAM_EE
0A659 29 0E                     	AND #$0E
0A65B 05 EF                     	ORA byte_RAM_EF
0A65D 15 B1                     	ORA EnemyArray_B1, X
0A65F D0 00                     	BNE locret_BANK3_A67C
0A661                           
0A661 B5 33                     	LDA ObjectYLo, X
0A663 38                        	SEC
0A664 E9 02                     	SBC #$02
0A666 85 00                     	STA byte_RAM_0
0A668 B4 6F                     	LDY EnemyMovementDirection, X
0A66A A5 01                     	LDA byte_RAM_1
0A66C 18                        	CLC
0A66D 79 51 A6                  	ADC byte_BANK3_A652 - 1, Y
0A670 85 01                     	STA byte_RAM_1
0A672 20 00 00                  	JSR FindSpriteSlot
0A675                           
0A675 A2 3C                     	LDX #$3C
0A677 20 00 9D                  	JSR SetSpriteTiles
0A67A                           
0A67A A6 12                     	LDX byte_RAM_12
0A67C                           
0A67C                           locret_BANK3_A67C:
0A67C 60                        	RTS
0A67D                           
0A67D                           ; ---------------------------------------------------------------------------
0A67D                           
0A67D                           EnemyBehavior_Ostro:
0A67D B5 B1                     	LDA EnemyArray_B1, X
0A67F D0 00                     	BNE loc_BANK3_A6DB
0A681                           
0A681 B5 A8                     	LDA ObjectBeingCarriedTimer, X
0A683 F0 00                     	BEQ loc_BANK3_A6BD
0A685                           
0A685 A9 01                     	LDA #Enemy_ShyguyRed
0A687 95 90                     	STA ObjectType, X
0A689 20 4F 84                  	JSR SetEnemyAttributes
0A68C                           
0A68C 20 D6 92                  	JSR CreateEnemy
0A68F                           
0A68F 30 00                     	BMI locret_BANK3_A6BC
0A691                           
0A691 A4 00                     	LDY byte_RAM_0
0A693 A9 08                     	LDA #Enemy_Ostro
0A695 99 90 00                  	STA ObjectType, Y
0A698 99 B1 00                  	STA EnemyArray_B1, Y
0A69B B5 29                     	LDA ObjectXLo, X
0A69D 99 29 00                  	STA ObjectXLo, Y
0A6A0 B5 15                     	LDA ObjectXHi, X
0A6A2 99 15 00                  	STA ObjectXHi, Y
0A6A5 BD 41 04                  	LDA EnemyRawDataOffset, X
0A6A8 99 41 04                  	STA EnemyRawDataOffset, Y
0A6AB A9 FF                     	LDA #$FF
0A6AD 9D 41 04                  	STA EnemyRawDataOffset, X
0A6B0 B5 3D                     	LDA ObjectXVelocity, X
0A6B2 99 3D 00                  	STA ObjectXVelocity, Y
0A6B5 98                        	TYA
0A6B6 AA                        	TAX
0A6B7 20 4F 84                  	JSR SetEnemyAttributes
0A6BA                           
0A6BA A6 12                     	LDX byte_RAM_12
0A6BC                           
0A6BC                           locret_BANK3_A6BC:
0A6BC 60                        	RTS
0A6BD                           
0A6BD                           ; ---------------------------------------------------------------------------
0A6BD                           
0A6BD                           loc_BANK3_A6BD:
0A6BD B5 5B                     	LDA EnemyCollision, X
0A6BF 29 10                     	AND #$10
0A6C1 F0 00                     	BEQ loc_BANK3_A6DB
0A6C3                           
0A6C3 F6 B1                     	INC EnemyArray_B1, X
0A6C5 95 9F                     	STA ObjectAnimationTimer, X
0A6C7 20 D6 92                  	JSR CreateEnemy
0A6CA                           
0A6CA 30 00                     	BMI loc_BANK3_A6DB
0A6CC                           
0A6CC A4 00                     	LDY byte_RAM_0
0A6CE B5 3D                     	LDA ObjectXVelocity, X
0A6D0 99 3D 00                  	STA ObjectXVelocity, Y
0A6D3 A9 20                     	LDA #$20
0A6D5 99 53 04                  	STA ObjectTimer2, Y
0A6D8 4C 00 00                  	JMP loc_BANK3_A6E1
0A6DB                           
0A6DB                           ; ---------------------------------------------------------------------------
0A6DB                           
0A6DB                           loc_BANK3_A6DB:
0A6DB 20 DB 98                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
0A6DE                           
0A6DE 20 88 99                  	JSR EnemyBehavior_CheckDamagedInterrupt
0A6E1                           
0A6E1                           loc_BANK3_A6E1:
0A6E1 20 00 00                  	JSR ObjectTileCollision
0A6E4                           
0A6E4 B5 5B                     	LDA EnemyCollision, X
0A6E6 35 6F                     	AND EnemyMovementDirection, X
0A6E8 F0 00                     	BEQ loc_BANK3_A6ED
0A6EA                           
0A6EA 20 B7 9E                  	JSR EnemyBehavior_TurnAround
0A6ED                           
0A6ED                           loc_BANK3_A6ED:
0A6ED B5 5B                     	LDA EnemyCollision, X
0A6EF 29 04                     	AND #$04
0A6F1 F0 00                     	BEQ loc_BANK3_A70D
0A6F3                           
0A6F3 BD 2F 04                  	LDA ObjectProjectileTimer, X
0A6F6 F0 00                     	BEQ loc_BANK3_A700
0A6F8                           
0A6F8 A9 00                     	LDA #$00
0A6FA 9D 2F 04                  	STA ObjectProjectileTimer, X
0A6FD 20 9D 84                  	JSR EnemyInit_BasicAttributes
0A700                           
0A700                           loc_BANK3_A700:
0A700 B5 9F                     	LDA ObjectAnimationTimer, X
0A702 49 08                     	EOR #$08
0A704 95 9F                     	STA ObjectAnimationTimer, X
0A706 20 DC 95                  	JSR ResetObjectYVelocity
0A709                           
0A709 A9 F0                     	LDA #$F0
0A70B 95 47                     	STA ObjectYVelocity, X
0A70D                           
0A70D                           loc_BANK3_A70D:
0A70D FE 77 04                  	INC EnemyArray_477, X
0A710 B5 B1                     	LDA EnemyArray_B1, X
0A712 D0 00                     	BNE loc_BANK3_A71E
0A714                           
0A714 BD 77 04                  	LDA EnemyArray_477, X
0A717 29 3F                     	AND #$3F
0A719 D0 00                     	BNE loc_BANK3_A71E
0A71B                           
0A71B 20 A0 84                  	JSR EnemyInit_BasicMovementTowardPlayer
0A71E                           
0A71E                           loc_BANK3_A71E:
0A71E 20 85 85                  	JSR ApplyObjectMovement
0A721                           
0A721 4C 29 9B                  	JMP RenderSprite
0A724                           
0A724                           ; ---------------------------------------------------------------------------
0A724                           
0A724                           EnemyInit_Tryclyde:
0A724 20 6B 84                  	JSR EnemyInit_Basic
0A727                           
0A727                           IFDEF RESET_CHR_LATCH
0A727                           	LDA #$01
0A727                           	JSR SetBossTileset
0A727                           ENDIF
0A727                           
0A727 A9 40                     	LDA #$40
0A729 9D 77 04                  	STA EnemyArray_477, X
0A72C A9 02                     	LDA #$02
0A72E 9D 65 04                  	STA EnemyHP, X
0A731 4C 7D 8F                  	JMP EnemyInit_Birdo_Exit
0A734                           
0A734                           
0A734                           TryclydeHeadPosition:
0A734 00                        	.db $00
0A735 FF                        	.db $FF
0A736 FE                        	.db $FE
0A737 FD                        	.db $FD
0A738 FC                        	.db $FC
0A739 FB                        	.db $FB
0A73A FA                        	.db $FA
0A73B F9                        	.db $F9
0A73C F8                        	.db $F8
0A73D F9                        	.db $F9
0A73E FA                        	.db $FA
0A73F FB                        	.db $FB
0A740 FC                        	.db $FC
0A741 FD                        	.db $FD
0A742 FE                        	.db $FE
0A743 FF                        	.db $FF
0A744                           
0A744                           TryclydeFireYVelocity:
0A744 0B                        	.db $0B
0A745 0C                        	.db $0C
0A746 0D                        	.db $0D
0A747 0F                        	.db $0F
0A748 10                        	.db $10
0A749 12                        	.db $12
0A74A 14                        	.db $14
0A74B 17                        	.db $17
0A74C 1A                        	.db $1A
0A74D 1D                        	.db $1D
0A74E 1F                        	.db $1F
0A74F 20                        	.db $20
0A750                           
0A750                           TryclydeFireXVelocity:
0A750 E2                        	.db $E2
0A751 E2                        	.db $E2
0A752 E2                        	.db $E2
0A753 E3                        	.db $E3
0A754 E4                        	.db $E4
0A755 E5                        	.db $E5
0A756 E7                        	.db $E7
0A757 E9                        	.db $E9
0A758 ED                        	.db $ED
0A759 F1                        	.db $F1
0A75A F8                        	.db $F8
0A75B 00                        	.db $00
0A75C                           
0A75C                           
0A75C                           locret_BANK3_A75C:
0A75C 60                        	RTS
0A75D                           
0A75D                           
0A75D                           ;
0A75D                           ; Tryclyde
0A75D                           ; ========
0A75D                           ;
0A75D                           ; Drifts back and forth slightly, spits fire
0A75D                           ;
0A75D                           ; EnemyArray_477 = counter used to determine movement direction and top head position
0A75D                           ; EnemyArray_B1 = counter used to determine whether or not the bottom head should move
0A75D                           ; ObjectFlashTimer = used to determine whether Tryclyde is taking damage
0A75D                           ; EnemyArray_480 = counter used to determine bottom head position
0A75D                           ;
0A75D                           EnemyBehavior_Tryclyde:
0A75D 20 88 99                  	JSR EnemyBehavior_CheckDamagedInterrupt
0A760                           
0A760 A0 00                     	LDY #$00
0A762 BD 77 04                  	LDA EnemyArray_477, X
0A765 0A                        	ASL A
0A766 90 00                     	BCC EnemyBehavior_Tryclyde_PhysicsX
0A768                           
0A768 A0 02                     	LDY #$02
0A76A 0A                        	ASL A
0A76B 90 00                     	BCC EnemyBehavior_Tryclyde_PhysicsX
0A76D                           
0A76D A0 FE                     	LDY #$FE
0A76F                           
0A76F                           EnemyBehavior_Tryclyde_PhysicsX:
0A76F 94 3D                     	STY ObjectXVelocity, X
0A771 20 5E 9E                  	JSR ApplyObjectPhysicsX
0A774                           
0A774 FE 77 04                  	INC EnemyArray_477, X
0A777 B5 B1                     	LDA EnemyArray_B1, X
0A779 18                        	CLC
0A77A 69 D0                     	ADC #$D0
0A77C 95 B1                     	STA EnemyArray_B1, X
0A77E 90 00                     	BCC RenderSprite_Tryclyde
0A780                           
0A780 FE 80 04                  	INC EnemyArray_480, X
0A783                           
0A783                           RenderSprite_Tryclyde:
0A783 A5 EF                     	LDA byte_RAM_EF
0A785 D0 D5                     	BNE locret_BANK3_A75C
0A787                           
0A787 A9 49                     	LDA #ObjAttrib_16x32 | ObjAttrib_FrontFacing | ObjAttrib_Palette1
0A789 95 65                     	STA ObjectAttributes, X
0A78B A0 48                     	LDY #$48 ; static head regular
0A78D B5 51                     	LDA EnemyState, X
0A78F 38                        	SEC
0A790 E9 01                     	SBC #$01
0A792 1D 5C 04                  	ORA ObjectFlashTimer, X
0A795 85 07                     	STA byte_RAM_7
0A797 F0 00                     	BEQ RenderSprite_Tryclyde_DrawBody
0A799                           
0A799 A0 4C                     	LDY #$4C ; static head hurt
0A79B                           
0A79B                           RenderSprite_Tryclyde_DrawBody:
0A79B 98                        	TYA
0A79C A0 30                     	LDY #$30
0A79E                           	STY_abs byte_RAM_F4
0A79E                           	IFDEF COMPATIBILITY
0A79E 8C                        		.db $8c
0A79F F4 00                     		.dw byte_RAM_F4
0A7A1                           	ELSE
0A7A1                           		STY byte_RAM_F4
0A7A1                           		NOP_compat
0A7A1                           	ENDIF
0A7A1 20 C1 9B                  	JSR RenderSprite_DrawObject
0A7A4                           
0A7A4 A9 09                     	LDA #ObjAttrib_Palette1 | ObjAttrib_FrontFacing
0A7A6 95 65                     	STA ObjectAttributes, X
0A7A8 A9 33                     	LDA #SpriteFlags46E_Damage | SpriteFlags46E_Unliftable | SpriteFlags46E_Tilemap2 | SpriteFlags46E_WideSprite
0A7AA 9D 6E 04                  	STA EnemyArray_46E, X
0A7AD B5 29                     	LDA ObjectXLo, X
0A7AF 48                        	PHA
0A7B0 38                        	SEC
0A7B1 E9 08                     	SBC #$08
0A7B3 95 29                     	STA ObjectXLo, X
0A7B5 20 A2 88                  	JSR ScreenSpriteClipping_Horizontal
0A7B8                           
0A7B8 A2 50                     	LDX #$50 ; tail up
0A7BA A5 10                     	LDA byte_RAM_10
0A7BC 29 20                     	AND #$20
0A7BE D0 00                     	BNE RenderSprite_Tryclyde_DrawTail
0A7C0                           
0A7C0 A9 04                     	LDA #$04
0A7C2 25 10                     	AND byte_RAM_10
0A7C4 F0 00                     	BEQ RenderSprite_Tryclyde_DrawTail
0A7C6                           
0A7C6 A2 53                     	LDX #$53 ; tail down
0A7C8                           
0A7C8                           RenderSprite_Tryclyde_DrawTail:
0A7C8                           	; tail
0A7C8 A5 01                     	LDA byte_RAM_1
0A7CA 38                        	SEC
0A7CB E9 08                     	SBC #$08
0A7CD 85 01                     	STA byte_RAM_1
0A7CF A9 20                     	LDA #$20
0A7D1 85 0C                     	STA byte_RAM_C
0A7D3 A0 E0                     	LDY #$E0
0A7D5 20 00 9D                  	JSR SetSpriteTiles
0A7D8                           
0A7D8                           	; top head
0A7D8 A6 12                     	LDX byte_RAM_12
0A7DA B5 29                     	LDA ObjectXLo, X
0A7DC 38                        	SEC
0A7DD E9 08                     	SBC #$08
0A7DF 95 29                     	STA ObjectXLo, X
0A7E1 20 A2 88                  	JSR ScreenSpriteClipping_Horizontal
0A7E4                           
0A7E4 68                        	PLA
0A7E5 95 29                     	STA ObjectXLo, X
0A7E7 A9 13                     	LDA #SpriteFlags46E_Damage | SpriteFlags46E_Unliftable | SpriteFlags46E_Tilemap2
0A7E9 9D 6E 04                  	STA EnemyArray_46E, X
0A7EC B5 33                     	LDA ObjectYLo, X
0A7EE 85 00                     	STA byte_RAM_0
0A7F0 BD 77 04                  	LDA EnemyArray_477, X
0A7F3 29 78                     	AND #$78
0A7F5 4A                        	LSR A
0A7F6 4A                        	LSR A
0A7F7 4A                        	LSR A
0A7F8 A8                        	TAY
0A7F9 B9 34 A7                  	LDA TryclydeHeadPosition, Y
0A7FC 6D 29 04                  	ADC SpriteTempScreenX
0A7FF 69 F0                     	ADC #$F0
0A801 85 01                     	STA byte_RAM_1
0A803 A2 56                     	LDX #$56
0A805 A5 07                     	LDA byte_RAM_7
0A807 D0 00                     	BNE RenderSprite_Tryclyde_DrawTopHead
0A809                           
0A809 A2 58                     	LDX #$58
0A80B 88                        	DEY
0A80C 88                        	DEY
0A80D 88                        	DEY
0A80E 88                        	DEY
0A80F C0 07                     	CPY #$07
0A811 B0 00                     	BCS RenderSprite_Tryclyde_DrawTopHead
0A813                           
0A813 A2 5A                     	LDX #$5A
0A815                           
0A815                           RenderSprite_Tryclyde_DrawTopHead:
0A815 A0 00                     	LDY #$00
0A817 20 00 9D                  	JSR SetSpriteTiles
0A81A                           
0A81A                           	; bottom head
0A81A A6 12                     	LDX byte_RAM_12
0A81C B5 33                     	LDA ObjectYLo, X
0A81E 18                        	CLC
0A81F 69 10                     	ADC #$10
0A821 85 00                     	STA byte_RAM_0
0A823 BD 80 04                  	LDA EnemyArray_480, X
0A826 29 78                     	AND #$78
0A828 4A                        	LSR A
0A829 4A                        	LSR A
0A82A 4A                        	LSR A
0A82B A8                        	TAY
0A82C B9 34 A7                  	LDA TryclydeHeadPosition, Y
0A82F 6D 29 04                  	ADC SpriteTempScreenX
0A832 69 F0                     	ADC #$F0
0A834 85 01                     	STA byte_RAM_1
0A836 A9 00                     	LDA #$00
0A838 85 0C                     	STA byte_RAM_C
0A83A A2 56                     	LDX #$56
0A83C A5 07                     	LDA byte_RAM_7
0A83E D0 00                     	BNE RenderSprite_Tryclyde_DrawBottomHead
0A840                           
0A840 A2 58                     	LDX #$58
0A842 88                        	DEY
0A843 88                        	DEY
0A844 88                        	DEY
0A845 88                        	DEY
0A846 C0 07                     	CPY #$07
0A848 B0 00                     	BCS RenderSprite_Tryclyde_DrawBottomHead
0A84A                           
0A84A A2 5A                     	LDX #$5A
0A84C                           
0A84C                           RenderSprite_Tryclyde_DrawBottomHead:
0A84C A0 08                     	LDY #$08
0A84E 20 00 9D                  	JSR SetSpriteTiles
0A851                           
0A851 A6 12                     	LDX byte_RAM_12
0A853 A9 13                     	LDA #SpriteFlags46E_Damage | SpriteFlags46E_Unliftable | SpriteFlags46E_Tilemap2
0A855 9D 6E 04                  	STA EnemyArray_46E, X
0A858 A5 EE                     	LDA byte_RAM_EE
0A85A D0 00                     	BNE EnemyBehavior_Tryclyde_SpitFireballs
0A85C                           
0A85C                           RenderSprite_Tryclyde_DrawBottomNeck:
0A85C B5 33                     	LDA ObjectYLo, X
0A85E 18                        	CLC
0A85F 69 10                     	ADC #$10
0A861 8D 58 02                  	STA SpriteDMAArea + $58
0A864 A9 0D                     	LDA #$0D ; neck sprite
0A866 8D 59 02                  	STA SpriteDMAArea + $59
0A869 8D 5D 02                  	STA SpriteDMAArea + $5D ; bottom neck
0A86C AD 32 02                  	LDA SpriteDMAArea + $32
0A86F 8D 5A 02                  	STA SpriteDMAArea + $5A
0A872 8D 5E 02                  	STA SpriteDMAArea + $5E ; bottom neck
0A875 A5 01                     	LDA byte_RAM_1
0A877 18                        	CLC
0A878 69 10                     	ADC #$10
0A87A 8D 5B 02                  	STA SpriteDMAArea + $5B
0A87D                           
0A87D                           RenderSprite_Tryclyde_DrawTopNeck:
0A87D B5 33                     	LDA ObjectYLo, X
0A87F 8D 5C 02                  	STA SpriteDMAArea + $5C
0A882 AD 29 04                  	LDA SpriteTempScreenX
0A885 38                        	SEC
0A886 E9 08                     	SBC #$08
0A888 8D 5F 02                  	STA SpriteDMAArea + $5F
0A88B                           
0A88B                           EnemyBehavior_Tryclyde_SpitFireballs:
0A88B A9 00                     	LDA #$00
0A88D 85 05                     	STA byte_RAM_5
0A88F BD 77 04                  	LDA EnemyArray_477, X
0A892 20 00 00                  	JSR EnemyBehavior_Tryclyde_SpitFireball
0A895                           
0A895 E6 05                     	INC byte_RAM_5
0A897 BD 80 04                  	LDA EnemyArray_480, X
0A89A                           
0A89A                           EnemyBehavior_Tryclyde_SpitFireball:
0A89A 29 67                     	AND #$67
0A89C C9 40                     	CMP #$40
0A89E D0 00                     	BNE RenderSprite_Tryclyde_Exit
0A8A0                           
0A8A0 BD 5C 04                  	LDA ObjectFlashTimer, X
0A8A3 D0 00                     	BNE RenderSprite_Tryclyde_Exit
0A8A5                           
0A8A5 20 D6 92                  	JSR CreateEnemy
0A8A8                           
0A8A8 30 00                     	BMI RenderSprite_Tryclyde_Exit
0A8AA                           
0A8AA A9 01                     	LDA #SoundEffect1_BirdoShot
0A8AC 8D 02 06                  	STA SoundEffectQueue1
0A8AF A4 00                     	LDY byte_RAM_0
0A8B1 A9 20                     	LDA #Enemy_Fireball
0A8B3 99 90 00                  	STA ObjectType, Y
0A8B6 99 79 00                  	STA EnemyVariable, Y
0A8B9 99 B1 00                  	STA EnemyArray_B1, Y
0A8BC B5 29                     	LDA ObjectXLo, X
0A8BE E9 18                     	SBC #$18
0A8C0 99 29 00                  	STA ObjectXLo, Y
0A8C3 A5 05                     	LDA byte_RAM_5
0A8C5 F0 00                     	BEQ EnemyBehavior_Tryclyde_GetFireAngle
0A8C7                           
0A8C7 B5 33                     	LDA ObjectYLo, X
0A8C9 18                        	CLC
0A8CA 69 10                     	ADC #$10
0A8CC 99 33 00                  	STA ObjectYLo, Y
0A8CF                           
0A8CF                           EnemyBehavior_Tryclyde_GetFireAngle:
0A8CF                           	; angle the fireball based on the player's position
0A8CF A5 28                     	LDA PlayerXLo
0A8D1 4A                        	LSR A
0A8D2 4A                        	LSR A
0A8D3 4A                        	LSR A
0A8D4 4A                        	LSR A
0A8D5 29 0F                     	AND #$0F
0A8D7 C9 0B                     	CMP #$0B
0A8D9 90 00                     	BCC EnemyBehavior_Tryclyde_SetFireVelocity
0A8DB                           
0A8DB A9 0B                     	LDA #$0B
0A8DD                           
0A8DD                           EnemyBehavior_Tryclyde_SetFireVelocity:
0A8DD AA                        	TAX ; These may be fireball speed pointers
0A8DE BD 44 A7                  	LDA TryclydeFireYVelocity, X
0A8E1 99 47 00                  	STA ObjectYVelocity, Y
0A8E4 BD 50 A7                  	LDA TryclydeFireXVelocity, X
0A8E7 99 3D 00                  	STA ObjectXVelocity, Y
0A8EA                           
0A8EA                           ;
0A8EA                           ; Sets enemy attributes to defaults, restores X, and exits
0A8EA                           ;
0A8EA                           ; Input
0A8EA                           ;   Y = enemy index
0A8EA                           ; Output
0A8EA                           ;   X = enemy index
0A8EA                           ;
0A8EA                           RenderSprite_Tryclyde_ResetAttributes:
0A8EA 98                        	TYA
0A8EB AA                        	TAX
0A8EC 20 4F 84                  	JSR SetEnemyAttributes
0A8EF                           
0A8EF A6 12                     	LDX byte_RAM_12
0A8F1                           
0A8F1                           RenderSprite_Tryclyde_Exit:
0A8F1 60                        	RTS
0A8F2                           
0A8F2                           
0A8F2                           EnemyInit_Cobrats:
0A8F2 20 6B 84                  	JSR EnemyInit_Basic
0A8F5                           
0A8F5 B5 33                     	LDA ObjectYLo, X
0A8F7 38                        	SEC
0A8F8 E9 08                     	SBC #$08
0A8FA 95 79                     	STA EnemyVariable, X
0A8FC 60                        	RTS
0A8FD                           
0A8FD                           
0A8FD                           ;
0A8FD                           ; Cobrat (Ground)
0A8FD                           ; ===============
0A8FD                           ;
0A8FD                           ; Bobs up and down until the player gets close, then jumps up, chases, and shoots bullets
0A8FD                           ;
0A8FD                           ; EnemyVariable = target y-position
0A8FD                           ; EnemyArray_480 = flag that gets enabled when the player gets close
0A8FD                           ; EnemyArray_477 = counter used to determine bobbing direction
0A8FD                           ; ObjectAnimationTimer = counter used to determine how quickly Cobrat turns
0A8FD                           ; ObjectTimer2 = counter used to determine when to fire a bullet
0A8FD                           ;
0A8FD                           EnemyBehavior_CobratGround:
0A8FD 20 88 99                  	JSR EnemyBehavior_CheckDamagedInterrupt
0A900                           
0A900 20 E4 98                  	JSR EnemyBehavior_Check42FPhysicsInterrupt
0A903                           
0A903 20 DB 98                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
0A906                           
0A906 20 00 00                  	JSR ObjectTileCollision
0A909                           
0A909 BD 80 04                  	LDA EnemyArray_480, X
0A90C D0 00                     	BNE EnemyBehavior_CobratGround_Jump
0A90E                           
0A90E 95 3D                     	STA ObjectXVelocity, X
0A910 20 49 9E                  	JSR EnemyFindWhichSidePlayerIsOn
0A913                           
0A913 A5 0F                     	LDA byte_RAM_F
0A915 69 40                     	ADC #$40
0A917 C9 80                     	CMP #$80
0A919 B0 00                     	BCS EnemyBehavior_CobratGround_Bob
0A91B                           
0A91B FE 80 04                  	INC EnemyArray_480, X
0A91E A9 C0                     	LDA #$C0
0A920 95 47                     	STA ObjectYVelocity, X
0A922 D0 00                     	BNE EnemyBehavior_CobratGround_Jump
0A924                           
0A924                           EnemyBehavior_CobratGround_Bob:
0A924 FE 77 04                  	INC EnemyArray_477, X
0A927 A0 FC                     	LDY #$FC
0A929 BD 77 04                  	LDA EnemyArray_477, X
0A92C 29 20                     	AND #$20
0A92E F0 00                     	BEQ EnemyBehavior_CobratGround_BobMovement
0A930                           
0A930 A0 04                     	LDY #$04
0A932                           
0A932                           EnemyBehavior_CobratGround_BobMovement:
0A932 94 47                     	STY ObjectYVelocity, X
0A934 20 59 9E                  	JSR ApplyObjectPhysicsY
0A937                           
0A937 A9 61                     	LDA #ObjAttrib_16x32 | ObjAttrib_BehindBackground | ObjAttrib_Palette1
0A939 95 65                     	STA ObjectAttributes, X
0A93B 4C 29 9B                  	JMP RenderSprite
0A93E                           
0A93E                           EnemyBehavior_CobratGround_Jump:
0A93E B5 47                     	LDA ObjectYVelocity, X
0A940 30 00                     	BMI EnemyBehavior_CobratGround_Movement
0A942                           
0A942 B5 79                     	LDA EnemyVariable, X
0A944 38                        	SEC
0A945 E9 18                     	SBC #$18
0A947 D5 33                     	CMP ObjectYLo, X
0A949 B0 00                     	BCS EnemyBehavior_CobratGround_Movement
0A94B                           
0A94B 95 33                     	STA ObjectYLo, X
0A94D A9 00                     	LDA #$00
0A94F 95 47                     	STA ObjectYVelocity, X
0A951                           
0A951                           EnemyBehavior_CobratGround_Movement:
0A951 20 85 85                  	JSR ApplyObjectMovement
0A954                           
0A954 F6 9F                     	INC ObjectAnimationTimer, X
0A956 B5 9F                     	LDA ObjectAnimationTimer, X
0A958 48                        	PHA
0A959 29 3F                     	AND #$3F
0A95B D0 00                     	BNE EnemyBehavior_CobratGround_AfterBasicMovement
0A95D                           
0A95D 20 A0 84                  	JSR EnemyInit_BasicMovementTowardPlayer
0A960                           
0A960                           EnemyBehavior_CobratGround_AfterBasicMovement:
0A960 68                        	PLA
0A961 D0 00                     	BNE EnemyBehavior_CobratGround_CheckCollision
0A963                           
0A963 A9 18                     	LDA #$18
0A965 9D 53 04                  	STA ObjectTimer2, X
0A968                           
0A968                           EnemyBehavior_CobratGround_CheckCollision:
0A968 B5 5B                     	LDA EnemyCollision, X
0A96A 29 03                     	AND #$03
0A96C F0 00                     	BEQ EnemyBehavior_CobratGround_SetAttributes
0A96E                           
0A96E 20 B7 9E                  	JSR EnemyBehavior_TurnAround
0A971                           
0A971                           EnemyBehavior_CobratGround_SetAttributes:
0A971 A9 41                     	LDA #ObjAttrib_16x32 | ObjAttrib_Palette1
0A973 B4 47                     	LDY ObjectYVelocity, X
0A975 10 00                     	BPL EnemyBehavior_CobratGround_Shoot
0A977                           
0A977 A9 61                     	LDA #ObjAttrib_16x32 | ObjAttrib_BehindBackground | ObjAttrib_Palette1
0A979                           
0A979                           EnemyBehavior_CobratGround_Shoot:
0A979 4C 00 00                  	JMP EnemyBehavior_CobratJar_Shoot
0A97C                           
0A97C                           
0A97C                           ;
0A97C                           ; Cobrat (Jar)
0A97C                           ; ============
0A97C                           ;
0A97C                           ; Bobs up and down, then occasionally jumps up to shoot a bullet at the player
0A97C                           ;
0A97C                           ; EnemyVariable = target y-position
0A97C                           ; EnemyArray_B1 = flag that gets set when the Cobrat jumps
0A97C                           ; byte_RAM_10 = counter used to determine when to jump and fire
0A97C                           ; ObjectTimer2 = counter used to determine when to fire a bullet
0A97C                           ;
0A97C                           EnemyBehavior_CobratJar:
0A97C 20 88 99                  	JSR EnemyBehavior_CheckDamagedInterrupt
0A97F                           
0A97F 20 E4 98                  	JSR EnemyBehavior_Check42FPhysicsInterrupt
0A982                           
0A982 20 DB 98                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
0A985                           
0A985 20 00 00                  	JSR ObjectTileCollision
0A988                           
0A988 B5 5B                     	LDA EnemyCollision, X
0A98A 29 08                     	AND #CollisionFlags_Up
0A98C F0 00                     	BEQ EnemyBehavior_CobratJar_Uncorked
0A98E                           
0A98E                           EnemyBehavior_CobratJar_Corked:
0A98E B5 79                     	LDA EnemyVariable, X
0A990 95 33                     	STA ObjectYLo, X
0A992 60                        	RTS
0A993                           
0A993                           EnemyBehavior_CobratJar_Uncorked:
0A993 20 49 9E                  	JSR EnemyFindWhichSidePlayerIsOn
0A996                           
0A996 C8                        	INY
0A997 94 6F                     	STY EnemyMovementDirection, X
0A999                           
0A999 B5 B1                     	LDA EnemyArray_B1, X
0A99B D0 00                     	BNE EnemyBehavior_CobratJar_Jump
0A99D                           
0A99D B5 86                     	LDA ObjectTimer1, X
0A99F D0 00                     	BNE EnemyBehavior_CobratJar_Bob
0A9A1                           
0A9A1 A9 D0                     	LDA #$D0
0A9A3 95 47                     	STA ObjectYVelocity, X
0A9A5 F6 B1                     	INC EnemyArray_B1, X
0A9A7 4C 00 00                  	JMP EnemyBehavior_CobratJar_Movement
0A9AA                           
0A9AA                           EnemyBehavior_CobratJar_Bob:
0A9AA A0 FC                     	LDY #$FC
0A9AC A5 10                     	LDA byte_RAM_10
0A9AE 29 20                     	AND #$20
0A9B0 F0 00                     	BEQ EnemyBehavior_CobratJar_BobMovement
0A9B2                           
0A9B2 A0 04                     	LDY #$04
0A9B4                           
0A9B4                           EnemyBehavior_CobratJar_BobMovement:
0A9B4 94 47                     	STY ObjectYVelocity, X
0A9B6 20 59 9E                  	JSR ApplyObjectPhysicsY
0A9B9                           
0A9B9 4C 00 00                  	JMP EnemyBehavior_CobratJar_SetAttributes
0A9BC                           
0A9BC                           EnemyBehavior_CobratJar_Jump:
0A9BC F6 9F                     	INC ObjectAnimationTimer, X
0A9BE B5 47                     	LDA ObjectYVelocity, X
0A9C0 30 00                     	BMI EnemyBehavior_CobratJar_Movement
0A9C2                           
0A9C2 D0 00                     	BNE EnemyBehavior_CobratJar_CheckLanding
0A9C4                           
0A9C4 A9 10                     	LDA #$10
0A9C6 9D 53 04                  	STA ObjectTimer2, X
0A9C9                           
0A9C9                           EnemyBehavior_CobratJar_CheckLanding:
0A9C9 B5 47                     	LDA ObjectYVelocity, X
0A9CB 30 00                     	BMI EnemyBehavior_CobratJar_CheckReset
0A9CD                           
0A9CD B5 5B                     	LDA EnemyCollision, X
0A9CF 29 04                     	AND #CollisionFlags_Down
0A9D1 F0 00                     	BEQ EnemyBehavior_CobratJar_CheckReset
0A9D3                           
0A9D3 A5 0E                     	LDA byte_RAM_E
0A9D5 38                        	SEC
0A9D6 E9 6F                     	SBC #$6F
0A9D8 C9 06                     	CMP #$06
0A9DA 90 00                     	BCC EnemyBehavior_CobratJar_CheckReset
0A9DC                           
0A9DC                           EnemyBehavior_CobratJar_Blocked:
0A9DC A9 02                     	LDA #EnemyState_Dead
0A9DE 95 51                     	STA EnemyState, X
0A9E0 A9 E0                     	LDA #$E0
0A9E2 95 47                     	STA ObjectYVelocity, X
0A9E4 A9 40                     	LDA #DPCM_BossHurt
0A9E6 8D 01 06                  	STA DPCMQueue
0A9E9                           
0A9E9                           EnemyBehavior_CobratJar_CheckReset:
0A9E9 B5 79                     	LDA EnemyVariable, X
0A9EB D5 33                     	CMP ObjectYLo, X
0A9ED B0 00                     	BCS EnemyBehavior_CobratJar_Movement
0A9EF                           
0A9EF 95 33                     	STA ObjectYLo, X
0A9F1 A9 00                     	LDA #$00
0A9F3 95 B1                     	STA EnemyArray_B1, X
0A9F5 A9 A0                     	LDA #$A0
0A9F7 95 86                     	STA ObjectTimer1, X
0A9F9                           
0A9F9                           EnemyBehavior_CobratJar_Movement:
0A9F9 20 8D 85                  	JSR ApplyObjectMovement_Vertical
0A9FC                           
0A9FC                           EnemyBehavior_CobratJar_SetAttributes:
0A9FC A9 61                     	LDA #ObjAttrib_16x32 | ObjAttrib_BehindBackground | ObjAttrib_Palette1
0A9FE                           
0A9FE                           EnemyBehavior_CobratJar_Shoot:
0A9FE 95 65                     	STA ObjectAttributes, X
0AA00 BD 53 04                  	LDA ObjectTimer2, X
0AA03 F0 00                     	BEQ EnemyBehavior_CobratJar_Render
0AA05                           
0AA05 C9 05                     	CMP #$05
0AA07 D0 00                     	BNE EnemyBehavior_CobratJar_RenderShot
0AA09                           
0AA09 20 F9 95                  	JSR CreateBullet
0AA0C                           
0AA0C                           EnemyBehavior_CobratJar_RenderShot:
0AA0C A9 64                     	LDA #$64 ; firing bullet
0AA0E 4C C1 9B                  	JMP RenderSprite_DrawObject
0AA11                           
0AA11                           EnemyBehavior_CobratJar_Render:
0AA11 4C 29 9B                  	JMP RenderSprite
0AA14                           
0AA14                           
0AA14                           EnemyInit_Pokey:
0AA14 20 6B 84                  	JSR EnemyInit_Basic
0AA17                           
0AA17 A9 03                     	LDA #$03
0AA19 95 79                     	STA EnemyVariable, X
0AA1B 60                        	RTS
0AA1C                           
0AA1C                           
0AA1C                           PokeyHitbox:
0AA1C 02                        	.db $02
0AA1D 04                        	.db $04
0AA1E 0D                        	.db $0D
0AA1F 0E                        	.db $0E
0AA20                           
0AA20                           
0AA20                           EnemyBehavior_Pokey:
0AA20 B5 79                     	LDA EnemyVariable, X
0AA22 D0 00                     	BNE loc_BANK3_AA2D
0AA24                           
0AA24 20 88 99                  	JSR EnemyBehavior_CheckDamagedInterrupt
0AA27                           
0AA27 20 DB 98                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
0AA2A                           
0AA2A 20 E4 98                  	JSR EnemyBehavior_Check42FPhysicsInterrupt
0AA2D                           
0AA2D                           loc_BANK3_AA2D:
0AA2D B5 5B                     	LDA EnemyCollision, X
0AA2F 29 10                     	AND #$10
0AA31 F0 00                     	BEQ loc_BANK3_AA3A
0AA33                           
0AA33 20 00 00                  	JSR sub_BANK3_AA3E
0AA36                           
0AA36 FE 2F 04                  	INC ObjectProjectileTimer, X
0AA39 60                        	RTS
0AA3A                           
0AA3A                           ; ---------------------------------------------------------------------------
0AA3A                           
0AA3A                           loc_BANK3_AA3A:
0AA3A B5 A8                     	LDA ObjectBeingCarriedTimer, X
0AA3C F0 00                     	BEQ loc_BANK3_AA99
0AA3E                           
0AA3E                           ; =============== S U B R O U T I N E =======================================
0AA3E                           
0AA3E                           sub_BANK3_AA3E:
0AA3E B5 79                     	LDA EnemyVariable, X
0AA40 F0 00                     	BEQ loc_BANK3_AA99
0AA42                           
0AA42 9D 77 04                  	STA EnemyArray_477, X
0AA45 A9 00                     	LDA #$00
0AA47 95 79                     	STA EnemyVariable, X
0AA49 A9 02                     	LDA #$02
0AA4B 9D 89 04                  	STA ObjectHitbox, X
0AA4E BD 41 04                  	LDA EnemyRawDataOffset, X
0AA51 85 06                     	STA byte_RAM_6
0AA53 A9 FF                     	LDA #$FF
0AA55 9D 41 04                  	STA EnemyRawDataOffset, X
0AA58 20 D6 92                  	JSR CreateEnemy
0AA5B                           
0AA5B 30 00                     	BMI loc_BANK3_AA99
0AA5D                           
0AA5D A4 00                     	LDY byte_RAM_0
0AA5F A9 1A                     	LDA #Enemy_Pokey
0AA61 99 90 00                  	STA ObjectType, Y
0AA64 20 EA A8                  	JSR RenderSprite_Tryclyde_ResetAttributes
0AA67                           
0AA67 A4 00                     	LDY byte_RAM_0
0AA69 A5 06                     	LDA byte_RAM_6
0AA6B 99 41 04                  	STA EnemyRawDataOffset, Y
0AA6E BD 77 04                  	LDA EnemyArray_477, X
0AA71 38                        	SEC
0AA72 E9 01                     	SBC #$01
0AA74 99 79 00                  	STA EnemyVariable, Y
0AA77 A8                        	TAY
0AA78                           
0AA78 B9 1C AA                  	LDA PokeyHitbox, Y
0AA7B A4 00                     	LDY byte_RAM_0
0AA7D 99 89 04                  	STA ObjectHitbox, Y
0AA80 B5 29                     	LDA ObjectXLo, X
0AA82 99 29 00                  	STA ObjectXLo, Y
0AA85 B5 15                     	LDA ObjectXHi, X
0AA87 99 15 00                  	STA ObjectXHi, Y
0AA8A B5 33                     	LDA ObjectYLo, X
0AA8C 18                        	CLC
0AA8D 69 10                     	ADC #$10
0AA8F 99 33 00                  	STA ObjectYLo, Y
0AA92 B5 1F                     	LDA ObjectYHi, X
0AA94 69 00                     	ADC #$00
0AA96 99 1F 00                  	STA ObjectYHi, Y
0AA99                           
0AA99                           loc_BANK3_AA99:
0AA99 F6 9F                     	INC ObjectAnimationTimer, X
0AA9B B5 9F                     	LDA ObjectAnimationTimer, X
0AA9D 29 3F                     	AND #$3F
0AA9F D0 00                     	BNE loc_BANK3_AAA4
0AAA1                           
0AAA1 20 A0 84                  	JSR EnemyInit_BasicMovementTowardPlayer
0AAA4                           
0AAA4                           loc_BANK3_AAA4:
0AAA4 20 5E 9E                  	JSR ApplyObjectPhysicsX
0AAA7                           
0AAA7 4C 29 9B                  	JMP RenderSprite
0AAAA                           
0AAAA                           ; End of function sub_BANK3_AA3E
0AAAA                           
0AAAA                           
0AAAA                           PokeyWiggleOffset:
0AAAA 00                        	.db $00
0AAAB 01                        	.db $01
0AAAC 00                        	.db $00
0AAAD FF                        	.db $FF
0AAAE 00                        	.db $00
0AAAF 01                        	.db $01
0AAB0 00                        	.db $00
0AAB1                           
0AAB1                           
0AAB1                           RenderSprite_Pokey:
0AAB1 A0 00                     	LDY #$00
0AAB3 A5 EE                     	LDA byte_RAM_EE
0AAB5 D0 00                     	BNE RenderSprite_Pokey_Segments
0AAB7                           
0AAB7 A5 10                     	LDA byte_RAM_10
0AAB9 29 18                     	AND #$18
0AABB 4A                        	LSR A
0AABC 4A                        	LSR A
0AABD 4A                        	LSR A
0AABE A8                        	TAY
0AABF                           
0AABF                           RenderSprite_Pokey_Segments:
0AABF 84 07                     	STY byte_RAM_7
0AAC1 AD 29 04                  	LDA SpriteTempScreenX
0AAC4 8D FD 04                  	STA PokeyTempScreenX
0AAC7 18                        	CLC
0AAC8 79 AA AA                  	ADC PokeyWiggleOffset, Y
0AACB 8D 29 04                  	STA SpriteTempScreenX
0AACE 20 B5 9B                  	JSR RenderSprite_NotAlbatoss
0AAD1                           
0AAD1 B5 79                     	LDA EnemyVariable, X
0AAD3 85 09                     	STA byte_RAM_9
0AAD5 F0 00                     	BEQ RenderSprite_Pokey_Exit
0AAD7                           
0AAD7 98                        	TYA
0AAD8 18                        	CLC
0AAD9 69 10                     	ADC #$10
0AADB A8                        	TAY
0AADC A6 07                     	LDX byte_RAM_7
0AADE AD FD 04                  	LDA PokeyTempScreenX
0AAE1 7D AB AA                  	ADC PokeyWiggleOffset + 1, X
0AAE4 85 01                     	STA byte_RAM_1
0AAE6 A2 70                     	LDX #$70
0AAE8 20 00 9D                  	JSR SetSpriteTiles
0AAEB                           
0AAEB C6 09                     	DEC byte_RAM_9
0AAED F0 00                     	BEQ RenderSprite_Pokey_Exit
0AAEF                           
0AAEF 20 00 00                  	JSR FindSpriteSlot
0AAF2                           
0AAF2 A6 07                     	LDX byte_RAM_7
0AAF4 AD FD 04                  	LDA PokeyTempScreenX
0AAF7 18                        	CLC
0AAF8 7D AC AA                  	ADC PokeyWiggleOffset + 2, X
0AAFB 85 01                     	STA byte_RAM_1
0AAFD A2 70                     	LDX #$70
0AAFF 20 00 9D                  	JSR SetSpriteTiles
0AB02                           
0AB02 C6 09                     	DEC byte_RAM_9
0AB04 F0 00                     	BEQ RenderSprite_Pokey_Exit
0AB06                           
0AB06 A6 07                     	LDX byte_RAM_7
0AB08 AD FD 04                  	LDA PokeyTempScreenX
0AB0B 18                        	CLC
0AB0C 7D AD AA                  	ADC PokeyWiggleOffset + 3, X
0AB0F 85 01                     	STA byte_RAM_1
0AB11 A2 70                     	LDX #$70
0AB13 20 00 9D                  	JSR SetSpriteTiles
0AB16                           
0AB16                           RenderSprite_Pokey_Exit:
0AB16 A6 12                     	LDX byte_RAM_12
0AB18 60                        	RTS
0AB19                           
0AB19                           
0AB19                           EnemyBehavior_Rocket:
0AB19 B5 B1                     	LDA EnemyArray_B1, X
0AB1B D0 00                     	BNE EnemyBehavior_Rocket_Flying
0AB1D 4C 00 00                  	JMP EnemyBehavior_Rocket_Launching
0AB20                           
0AB20                           EnemyBehavior_Rocket_Flying:
0AB20 A0 03                     	LDY #$03
0AB22 B5 47                     	LDA ObjectYVelocity, X
0AB24 F0 00                     	BEQ EnemyBehavior_Rocket_Slow
0AB26                           
0AB26 C9 FD                     	CMP #$FD
0AB28 90 00                     	BCC EnemyBehavior_Rocket_Fast
0AB2A                           
0AB2A                           EnemyBehavior_Rocket_Slow:
0AB2A A0 3F                     	LDY #$3F
0AB2C EE 29 04                  	INC SpriteTempScreenX
0AB2F A5 10                     	LDA byte_RAM_10
0AB31 29 02                     	AND #$02
0AB33 D0 00                     	BNE EnemyBehavior_Rocket_Fast
0AB35                           
0AB35 CE 29 04                  	DEC SpriteTempScreenX
0AB38 CE 29 04                  	DEC SpriteTempScreenX
0AB3B                           
0AB3B                           EnemyBehavior_Rocket_Fast:
0AB3B 98                        	TYA
0AB3C 25 10                     	AND byte_RAM_10
0AB3E D0 00                     	BNE EnemyBehavior_Rocket_ApplyPhysics
0AB40                           
0AB40 D6 47                     	DEC ObjectYVelocity, X
0AB42                           
0AB42                           EnemyBehavior_Rocket_ApplyPhysics:
0AB42 20 59 9E                  	JSR ApplyObjectPhysicsY
0AB45                           
0AB45 BD 77 04                  	LDA EnemyArray_477, X
0AB48 D0 00                     	BNE EnemyBehavior_Rocket_DroppingOff
0AB4A                           
0AB4A B4 1F                     	LDY ObjectYHi, X
0AB4C 10 00                     	BPL EnemyBehavior_Rocket_Render
0AB4E                           
0AB4E 20 00 00                  	JSR DoAreaReset
0AB51                           
0AB51 A9 38                     	LDA #Enemy_Rocket
0AB53 8D AF 04                  	STA ObjectCarriedOver
0AB56 EE 27 06                  	INC DoAreaTransition
0AB59 A9 05                     	LDA #TransitionType_Rocket
0AB5B 8D 34 05                  	STA TransitionType
0AB5E A9 00                     	LDA #$00
0AB60                           	STA_abs PlayerState
0AB60                           	IFDEF COMPATIBILITY
0AB60 8D                        		.db $8d
0AB61 50 00                     		.dw PlayerState
0AB63                           	ELSE
0AB63                           		STA PlayerState
0AB63                           		NOP_compat
0AB63                           	ENDIF
0AB63                           
0AB63 60                        	RTS
0AB64                           
0AB64                           EnemyBehavior_Rocket_DroppingOff:
0AB64 B5 33                     	LDA ObjectYLo, X
0AB66 C9 30                     	CMP #$30
0AB68 B0 00                     	BCS EnemyBehavior_Rocket_Render
0AB6A                           
0AB6A AC C7 04                  	LDY PlayerInRocket
0AB6D D0 00                     	BNE EnemyBehavior_Rocket_DropPlayer
0AB6F                           
0AB6F C9 18                     	CMP #$18
0AB71 B0 00                     	BCS EnemyBehavior_Rocket_Render
0AB73                           
0AB73 4C 1B 91                  	JMP EnemyBehavior_Bomb_Explode
0AB76                           
0AB76                           EnemyBehavior_Rocket_DropPlayer:
0AB76 A9 00                     	LDA #$00
0AB78 8D C7 04                  	STA PlayerInRocket
0AB7B 85 9C                     	STA HoldingItem
0AB7D 85 3C                     	STA PlayerXVelocity
0AB7F B5 33                     	LDA ObjectYLo, X
0AB81 69 20                     	ADC #$20
0AB83 85 32                     	STA PlayerYLo
0AB85 8D 2B 04                  	STA PlayerScreenYLo
0AB88                           
0AB88                           EnemyBehavior_Rocket_Render:
0AB88 20 00 00                  	JSR RenderSprite_Rocket
0AB8B                           
0AB8B AD 29 04                  	LDA SpriteTempScreenX
0AB8E 38                        	SEC
0AB8F E9 04                     	SBC #$04
0AB91 8D 93 02                  	STA SpriteDMAArea + $93
0AB94 69 07                     	ADC #$07
0AB96 8D 97 02                  	STA SpriteDMAArea + $97
0AB99 69 08                     	ADC #$08
0AB9B 8D 9B 02                  	STA SpriteDMAArea + $9B
0AB9E                           
0AB9E A9 20                     	LDA #$20 ; long trail
0ABA0 B4 47                     	LDY ObjectYVelocity, X
0ABA2 C0 FD                     	CPY #$FD
0ABA4 30 00                     	BMI EnemyBehavior_Rocket_RenderTrails
0ABA6                           
0ABA6 A9 15                     	LDA #$15 ; short trail
0ABA8                           
0ABA8                           EnemyBehavior_Rocket_RenderTrails:
0ABA8 6D 2C 04                  	ADC SpriteTempScreenY
0ABAB 8D 90 02                  	STA SpriteDMAArea + $90
0ABAE 8D 94 02                  	STA SpriteDMAArea + $94
0ABB1 8D 98 02                  	STA SpriteDMAArea + $98
0ABB4 A9 8C                     	LDA #$8C
0ABB6 8D 91 02                  	STA SpriteDMAArea + $91
0ABB9 8D 95 02                  	STA SpriteDMAArea + $95
0ABBC 8D 99 02                  	STA SpriteDMAArea + $99
0ABBF A5 10                     	LDA byte_RAM_10
0ABC1 4A                        	LSR A
0ABC2 29 03                     	AND #$03
0ABC4 85 00                     	STA byte_RAM_0
0ABC6 4A                        	LSR A
0ABC7 6A                        	ROR A
0ABC8 6A                        	ROR A
0ABC9 29 C0                     	AND #$C0
0ABCB 05 00                     	ORA byte_RAM_0
0ABCD 8D 92 02                  	STA SpriteDMAArea + $92
0ABD0 8D 96 02                  	STA SpriteDMAArea + $96
0ABD3 8D 9A 02                  	STA SpriteDMAArea + $9A
0ABD6 60                        	RTS
0ABD7                           
0ABD7                           EnemyBehavior_Rocket_Launching:
0ABD7                           	; Wait until ObjectBeingCarriedTimer reaches 1 to start the boosters
0ABD7 B5 A8                     	LDA ObjectBeingCarriedTimer, X
0ABD9 C9 01                     	CMP #$01
0ABDB D0 00                     	BNE EnemyBehavior_Rocket_Carry
0ABDD                           
0ABDD                           	; Setting EnemyArray_B1 puts the rocket in the area
0ABDD 95 B1                     	STA EnemyArray_B1, X
0ABDF 8D C7 04                  	STA PlayerInRocket
0ABE2 A9 02                     	LDA #SoundEffect3_Rocket
0ABE4 8D 05 06                  	STA SoundEffectQueue3
0ABE7 A9 FE                     	LDA #$FE
0ABE9 95 47                     	STA ObjectYVelocity, X
0ABEB                           
0ABEB                           EnemyBehavior_Rocket_Carry:
0ABEB 20 1D 96                  	JSR CarryObject
0ABEE                           
0ABEE                           RenderSprite_Rocket:
0ABEE AD 2C 04                  	LDA SpriteTempScreenY
0ABF1 85 00                     	STA byte_RAM_0
0ABF3 AD 29 04                  	LDA SpriteTempScreenX
0ABF6 38                        	SEC
0ABF7 E9 08                     	SBC #$08
0ABF9 85 01                     	STA byte_RAM_1
0ABFB A9 02                     	LDA #$02
0ABFD 85 02                     	STA byte_RAM_2
0ABFF 85 05                     	STA byte_RAM_5
0AC01 85 0C                     	STA byte_RAM_C
0AC03 B5 65                     	LDA ObjectAttributes, X
0AC05 29 23                     	AND #$23
0AC07 85 03                     	STA byte_RAM_3
0AC09 A0 00                     	LDY #$00
0AC0B A2 96                     	LDX #$96
0AC0D 20 61 9C                  	JSR loc_BANK2_9C53
0AC10                           
0AC10 A5 01                     	LDA byte_RAM_1
0AC12 18                        	CLC
0AC13 69 10                     	ADC #$10
0AC15 85 01                     	STA byte_RAM_1
0AC17 C6 02                     	DEC byte_RAM_2
0AC19 AD 2C 04                  	LDA SpriteTempScreenY
0AC1C 85 00                     	STA byte_RAM_0
0AC1E A0 10                     	LDY #$10
0AC20 A2 96                     	LDX #$96
0AC22 4C 61 9C                  	JMP loc_BANK2_9C53
0AC25                           
0AC25                           
0AC25                           ; ---------------------------------------------------------------------------
0AC25                           byte_BANK3_AC25:
0AC25 F0                        	.db $F0
0AC26                           
0AC26                           byte_BANK3_AC26:
0AC26 00                        	.db $00
0AC27 F0                        	.db $F0
0AC28                           
0AC28                           
0AC28                           ; =============== S U B R O U T I N E =======================================
0AC28                           
0AC28                           RenderSprite_Fryguy:
0AC28 A9 00                     	LDA #$00
0AC2A 85 EE                     	STA byte_RAM_EE
0AC2C B5 9F                     	LDA ObjectAnimationTimer, X
0AC2E 29 08                     	AND #$08
0AC30 4A                        	LSR A
0AC31 4A                        	LSR A
0AC32 4A                        	LSR A
0AC33 85 07                     	STA byte_RAM_7
0AC35 A4 07                     	LDY byte_RAM_7
0AC37 AD 29 04                  	LDA SpriteTempScreenX
0AC3A 48                        	PHA
0AC3B 18                        	CLC
0AC3C 79 25 AC                  	ADC byte_BANK3_AC25, Y
0AC3F 8D 29 04                  	STA SpriteTempScreenX
0AC42 A9 80                     	LDA #$80
0AC44 BC 5C 04                  	LDY ObjectFlashTimer, X
0AC47 F0 00                     	BEQ loc_BANK3_AC4B
0AC49                           
0AC49 A9 88                     	LDA #$88
0AC4B                           
0AC4B                           loc_BANK3_AC4B:
0AC4B 20 C1 9B                  	JSR RenderSprite_DrawObject
0AC4E                           
0AC4E 20 00 00                  	JSR FindSpriteSlot
0AC51                           
0AC51                           	STY_abs byte_RAM_F4
0AC51                           	IFDEF COMPATIBILITY
0AC51 8C                        		.db $8c
0AC52 F4 00                     		.dw byte_RAM_F4
0AC54                           	ELSE
0AC54                           		STY byte_RAM_F4
0AC54                           		NOP_compat
0AC54                           	ENDIF
0AC54 68                        	PLA
0AC55 18                        	CLC
0AC56 A4 07                     	LDY byte_RAM_7
0AC58 79 26 AC                  	ADC byte_BANK3_AC26, Y
0AC5B 8D 29 04                  	STA SpriteTempScreenX
0AC5E A9 84                     	LDA #$84
0AC60 BC 5C 04                  	LDY ObjectFlashTimer, X
0AC63 F0 00                     	BEQ loc_BANK3_AC67
0AC65                           
0AC65 A9 8C                     	LDA #$8C
0AC67                           
0AC67                           loc_BANK3_AC67:
0AC67 4C C1 9B                  	JMP RenderSprite_DrawObject
0AC6A                           
0AC6A                           
0AC6A                           ; ---------------------------------------------------------------------------
0AC6A                           
0AC6A                           EnemyInit_Fryguy:
0AC6A 20 6B 84                  	JSR EnemyInit_Basic
0AC6D                           
0AC6D                           IFDEF RESET_CHR_LATCH
0AC6D                           	LDA #$02
0AC6D                           	JSR SetBossTileset
0AC6D                           ENDIF
0AC6D                           
0AC6D A9 04                     	LDA #$04
0AC6F 9D 65 04                  	STA EnemyHP, X
0AC72 A9 00                     	LDA #$00
0AC74 95 79                     	STA EnemyVariable, X
0AC76 60                        	RTS
0AC77                           
0AC77                           
0AC77                           FryguySplit_InitVelocityX:
0AC77 E0                        	.db $E0
0AC78 20                        	.db $20
0AC79 F0                        	.db $F0
0AC7A 10                        	.db $10
0AC7B                           
0AC7B                           FryguySplit_InitOffsetX:
0AC7B 04                        	.db $04
0AC7C 0C                        	.db $0C
0AC7D 04                        	.db $04
0AC7E 0C                        	.db $0C
0AC7F                           
0AC7F                           FryguySplit_InitOffsetY:
0AC7F 04                        	.db $04
0AC80 04                        	.db $04
0AC81 0C                        	.db $0C
0AC82 0C                        	.db $0C
0AC83                           
0AC83                           IFNDEF FIX_FRYGUY_SPLIT_COUNT
0AC83                           Fryguy_AccelerationX:
0AC83 01                        	.db $01
0AC84 FF                        	.db $FF
0AC85                           
0AC85                           Fryguy_MaxVelocityX:
0AC85 2A                        	.db $2A
0AC86 D6                        	.db $D6
0AC87                           
0AC87                           Fryguy_AccelerationY:
0AC87 01                        	.db $01
0AC88 FF                        	.db $FF
0AC89                           
0AC89                           Fryguy_MaxVelocityY:
0AC89 18                        	.db $18
0AC8A E8                        	.db $E8
0AC8B                           ELSE
0AC8B                           	NOP
0AC8B                           	NOP
0AC8B                           	NOP
0AC8B                           	NOP
0AC8B                           ENDIF
0AC8B                           
0AC8B                           ;
0AC8B                           ; Fryguy's motion is oscillation based on accelerating in alternate directions
0AC8B                           ; to a max velocity either way
0AC8B                           ;
0AC8B                           EnemyBehavior_Fryguy:
0AC8B A9 02                     	LDA #$02
0AC8D 95 6F                     	STA EnemyMovementDirection, X
0AC8F F6 9F                     	INC ObjectAnimationTimer, X
0AC91 BC 65 04                  	LDY EnemyHP, X
0AC94 88                        	DEY
0AC95 D0 00                     	BNE EnemyBehavior_Fryguy_MaybeCreateFireball
0AC97                           
0AC97                           EnemyBehavior_Fryguy_CreateSplit:
0AC97                           IFDEF FIX_FRYGUY_SPLIT_COUNT
0AC97                           	DEY ; Y=$FF
0AC97                           	STY FryguySplitFlames
0AC97                           ENDIF
0AC97                           EnemyBehavior_Fryguy_CreateSplit_NumFlames:
0AC97 A9 03                     	LDA #$03
0AC99 85 09                     	STA byte_RAM_9
0AC9B                           IFNDEF FIX_FRYGUY_SPLIT_COUNT
0AC9B 8D F8 04                  	STA FryguySplitFlames
0AC9E                           ENDIF
0AC9E 20 B7 89                  	JSR EnemyDestroy
0ACA1                           
0ACA1                           EnemyBehavior_Fryguy_CreateSplitLoop:
0ACA1 20 D6 92                  	JSR CreateEnemy
0ACA4                           
0ACA4 30 00                     	BMI EnemyBehavior_Fryguy_CreateSplit_Next
0ACA6                           
0ACA6                           IFDEF FIX_FRYGUY_SPLIT_COUNT
0ACA6                           	INC FryguySplitFlames
0ACA6                           ENDIF
0ACA6 A4 00                     	LDY byte_RAM_0
0ACA8 B5 1F                     	LDA ObjectYHi, X
0ACAA 99 EF 04                  	STA EndOfLevelDoorPage, Y
0ACAD A9 F0                     	LDA #$F0
0ACAF 99 47 00                  	STA ObjectYVelocity, Y
0ACB2 A9 2B                     	LDA #Enemy_FryguySplit
0ACB4 99 90 00                  	STA ObjectType, Y
0ACB7 A9 30                     	LDA #$30
0ACB9 99 53 04                  	STA ObjectTimer2, Y
0ACBC B5 33                     	LDA ObjectYLo, X
0ACBE 48                        	PHA
0ACBF A6 09                     	LDX byte_RAM_9
0ACC1 BD 77 AC                  	LDA FryguySplit_InitVelocityX, X
0ACC4 99 3D 00                  	STA ObjectXVelocity, Y
0ACC7 AD 29 04                  	LDA SpriteTempScreenX
0ACCA 7D 7B AC                  	ADC FryguySplit_InitOffsetX, X
0ACCD 99 29 00                  	STA ObjectXLo, Y
0ACD0 68                        	PLA
0ACD1 7D 7F AC                  	ADC FryguySplit_InitOffsetY, X
0ACD4 99 33 00                  	STA ObjectYLo, Y
0ACD7 A9 00                     	LDA #$00
0ACD9 99 15 00                  	STA ObjectXHi, Y
0ACDC 98                        	TYA
0ACDD AA                        	TAX
0ACDE 20 4F 84                  	JSR SetEnemyAttributes
0ACE1                           
0ACE1 A6 12                     	LDX byte_RAM_12
0ACE3                           
0ACE3                           EnemyBehavior_Fryguy_CreateSplit_Next:
0ACE3 C6 09                     	DEC byte_RAM_9
0ACE5 10 BA                     	BPL EnemyBehavior_Fryguy_CreateSplitLoop
0ACE7                           
0ACE7                           EnemyBehavior_Fryguy_MaybeCreateFireball:
0ACE7 A5 10                     	LDA byte_RAM_10
0ACE9 29 1F                     	AND #$1F
0ACEB D0 00                     	BNE EnemyBehavior_Fryguy_AfterCreateFireball
0ACED                           
0ACED                           EnemyBehavior_Fryguy_CreateFireball:
0ACED 20 D6 92                  	JSR CreateEnemy
0ACF0                           
0ACF0 A6 00                     	LDX byte_RAM_0
0ACF2 A9 20                     	LDA #Enemy_Fireball
0ACF4 95 90                     	STA ObjectType, X
0ACF6 B5 29                     	LDA ObjectXLo, X
0ACF8 E9 08                     	SBC #$08
0ACFA 95 29                     	STA ObjectXLo, X
0ACFC B5 33                     	LDA ObjectYLo, X
0ACFE 69 18                     	ADC #$18
0AD00 95 33                     	STA ObjectYLo, X
0AD02 20 9D 84                  	JSR EnemyInit_BasicAttributes
0AD05                           
0AD05 A6 12                     	LDX byte_RAM_12
0AD07                           
0AD07                           EnemyBehavior_Fryguy_AfterCreateFireball:
0AD07 A5 10                     	LDA byte_RAM_10
0AD09 29 01                     	AND #$01
0AD0B D0 00                     	BNE EnemyBehavior_Fryguy_ApplyPhysics
0AD0D                           
0AD0D                           EnemyBehavior_Fryguy_AccelerationY:
0AD0D                           	; EnemyVariable used for y-direction
0AD0D B5 79                     	LDA EnemyVariable, X
0AD0F 29 01                     	AND #$01
0AD11 A8                        	TAY
0AD12 B5 47                     	LDA ObjectYVelocity, X
0AD14 18                        	CLC
0AD15 79 87 AC                  	ADC Fryguy_AccelerationY, Y
0AD18 95 47                     	STA ObjectYVelocity, X
0AD1A                           
0AD1A                           IFNDEF FIX_FRYGUY_SPLIT_COUNT
0AD1A D9 89 AC                  	CMP Fryguy_MaxVelocityY, Y
0AD1D D0 00                     	BNE EnemyBehavior_Fryguy_AccelerationX
0AD1F                           ELSE
0AD1F                           	JSR Fryguy_IsMaxVelocityY
0AD1F                           	BCC EnemyBehavior_Fryguy_AccelerationX
0AD1F                           ENDIF
0AD1F                           
0AD1F                           EnemyBehavior_Fryguy_AccelerationY_Reverse:
0AD1F F6 79                     	INC EnemyVariable, X
0AD21                           
0AD21                           EnemyBehavior_Fryguy_AccelerationX:
0AD21                           	; EnemyArray_477 used for x-direction
0AD21 BD 77 04                  	LDA EnemyArray_477, X
0AD24 29 01                     	AND #$01
0AD26 A8                        	TAY
0AD27 B5 3D                     	LDA ObjectXVelocity, X
0AD29 18                        	CLC
0AD2A 79 83 AC                  	ADC Fryguy_AccelerationX, Y
0AD2D 95 3D                     	STA ObjectXVelocity, X
0AD2F                           
0AD2F                           IFNDEF FIX_FRYGUY_SPLIT_COUNT
0AD2F D9 85 AC                  	CMP Fryguy_MaxVelocityX, Y
0AD32 D0 00                     	BNE EnemyBehavior_Fryguy_ApplyPhysics
0AD34                           ELSE
0AD34                           	JSR Fryguy_IsMaxVelocityX
0AD34                           	BCC EnemyBehavior_Fryguy_ApplyPhysics
0AD34                           ENDIF
0AD34                           
0AD34                           EnemyBehavior_Fryguy_AccelerationX_Reverse:
0AD34 FE 77 04                  	INC EnemyArray_477, X
0AD37                           
0AD37                           EnemyBehavior_Fryguy_ApplyPhysics:
0AD37 20 28 AC                  	JSR RenderSprite_Fryguy
0AD3A                           
0AD3A 20 59 9E                  	JSR ApplyObjectPhysicsY
0AD3D                           
0AD3D 4C 5E 9E                  	JMP ApplyObjectPhysicsX
0AD40                           
0AD40                           FryguyFlame_JumpTimeout:
0AD40 3F                        	.db $3F
0AD41 3F                        	.db $3F
0AD42 3F                        	.db $3F
0AD43 7F                        	.db $7F
0AD44                           
0AD44                           FryguyFlame_JumpVelocityY:
0AD44 D4                        	.db $D4
0AD45 D8                        	.db $D8
0AD46 DA                        	.db $DA
0AD47 DE                        	.db $DE
0AD48                           
0AD48                           
0AD48                           EnemyBehavior_FryguySplit:
0AD48 B5 5B                     	LDA EnemyCollision, X
0AD4A 29 10                     	AND #$10
0AD4C F0 00                     	BEQ loc_BANK3_AD59
0AD4E                           
0AD4E 20 00 00                  	JSR PlayBossHurtSound
0AD51                           
0AD51 A9 00                     	LDA #SpriteFlags46E_00
0AD53 9D 6E 04                  	STA EnemyArray_46E, X
0AD56 4C BE 91                  	JMP TurnIntoPuffOfSmoke
0AD59                           
0AD59                           ; ---------------------------------------------------------------------------
0AD59                           
0AD59                           loc_BANK3_AD59:
0AD59 A9 02                     	LDA #$02
0AD5B 95 6F                     	STA EnemyMovementDirection, X
0AD5D A5 10                     	LDA byte_RAM_10
0AD5F 9D 4A 04                  	STA ObjectShakeTimer, X
0AD62 F6 9F                     	INC ObjectAnimationTimer, X
0AD64 F6 9F                     	INC ObjectAnimationTimer, X
0AD66 20 00 00                  	JSR ObjectTileCollision
0AD69                           
0AD69 20 29 9B                  	JSR RenderSprite
0AD6C                           
0AD6C B5 5B                     	LDA EnemyCollision, X
0AD6E 48                        	PHA
0AD6F 29 04                     	AND #CollisionFlags_Down
0AD71 F0 00                     	BEQ loc_BANK3_AD7A
0AD73                           
0AD73 20 DC 95                  	JSR ResetObjectYVelocity
0AD76                           
0AD76 A9 00                     	LDA #$00
0AD78 95 3D                     	STA ObjectXVelocity, X
0AD7A                           
0AD7A                           loc_BANK3_AD7A:
0AD7A 68                        	PLA
0AD7B 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
0AD7D F0 00                     	BEQ loc_BANK3_AD85
0AD7F                           
0AD7F 20 B7 9E                  	JSR EnemyBehavior_TurnAround
0AD82                           
0AD82 20 BE 95                  	JSR HalfObjectVelocityX
0AD85                           
0AD85                           loc_BANK3_AD85:
0AD85 8A                        	TXA
0AD86 0A                        	ASL A
0AD87 0A                        	ASL A
0AD88 0A                        	ASL A
0AD89 65 10                     	ADC byte_RAM_10
0AD8B AC F8 04                  	LDY FryguySplitFlames
0AD8E 39 40 AD                  	AND FryguyFlame_JumpTimeout, Y
0AD91 15 47                     	ORA ObjectYVelocity, X
0AD93 D0 00                     	BNE loc_BANK3_ADAB
0AD95                           
0AD95 AD AE 05                  	LDA PseudoRNGValue
0AD98 29 1F                     	AND #$1F
0AD9A 19 44 AD                  	ORA FryguyFlame_JumpVelocityY, Y
0AD9D 95 47                     	STA ObjectYVelocity, X
0AD9F 20 A0 84                  	JSR EnemyInit_BasicMovementTowardPlayer
0ADA2                           
0ADA2 AD F8 04                  	LDA FryguySplitFlames
0ADA5 C9 02                     	CMP #$02
0ADA7 B0 00                     	BCS loc_BANK3_ADAB
0ADA9                           
0ADA9                           	; Double x-velocity for the last flame
0ADA9 16 3D                     	ASL ObjectXVelocity, X
0ADAB                           
0ADAB                           loc_BANK3_ADAB:
0ADAB                           IFDEF REV_A
0ADAB                           	LDA PlayerState
0ADAB                           	CMP #PlayerState_ChangingSize
0ADAB                           	BEQ +
0ADAB                           ENDIF
0ADAB                           
0ADAB 20 5E 9E                  	JSR ApplyObjectPhysicsX
0ADAE                           
0ADAE 4C 8D 85                  	JMP ApplyObjectMovement_Vertical
0ADB1                           
0ADB1                           IFDEF REV_A
0ADB1                           	+ RTS
0ADB1                           ENDIF
0ADB1                           
0ADB1                           ; ---------------------------------------------------------------------------
0ADB1                           
0ADB1                           EnemyBehavior_Autobomb:
0ADB1 B5 B1                     	LDA EnemyArray_B1, X
0ADB3 D0 00                     	BNE loc_BANK3_ADF9
0ADB5                           
0ADB5 B5 5B                     	LDA EnemyCollision, X
0ADB7 29 10                     	AND #$10
0ADB9 15 A8                     	ORA ObjectBeingCarriedTimer, X
0ADBB F0 00                     	BEQ loc_BANK3_ADF9
0ADBD                           
0ADBD A9 01                     	LDA #Enemy_ShyguyRed
0ADBF 95 90                     	STA ObjectType, X
0ADC1 20 4F 84                  	JSR SetEnemyAttributes
0ADC4                           
0ADC4 BD 41 04                  	LDA EnemyRawDataOffset, X
0ADC7 85 06                     	STA byte_RAM_6
0ADC9 A9 FF                     	LDA #$FF
0ADCB 9D 41 04                  	STA EnemyRawDataOffset, X
0ADCE 20 D6 92                  	JSR CreateEnemy
0ADD1                           
0ADD1 30 00                     	BMI loc_BANK3_ADF9
0ADD3                           
0ADD3 A4 00                     	LDY byte_RAM_0
0ADD5 A5 06                     	LDA byte_RAM_6
0ADD7 99 41 04                  	STA EnemyRawDataOffset, Y
0ADDA B5 29                     	LDA ObjectXLo, X
0ADDC 99 29 00                  	STA ObjectXLo, Y
0ADDF B5 15                     	LDA ObjectXHi, X
0ADE1 99 15 00                  	STA ObjectXHi, Y
0ADE4 A6 00                     	LDX byte_RAM_0
0ADE6 A9 26                     	LDA #Enemy_Autobomb
0ADE8 95 90                     	STA ObjectType, X
0ADEA 20 9D 84                  	JSR EnemyInit_BasicAttributes
0ADED                           
0ADED F6 B1                     	INC EnemyArray_B1, X
0ADEF 20 4F 84                  	JSR SetEnemyAttributes
0ADF2                           
0ADF2 A9 04                     	LDA #$04
0ADF4 9D 89 04                  	STA ObjectHitbox, X
0ADF7 A6 12                     	LDX byte_RAM_12
0ADF9                           
0ADF9                           loc_BANK3_ADF9:
0ADF9 20 88 99                  	JSR EnemyBehavior_CheckDamagedInterrupt
0ADFC                           
0ADFC 20 00 00                  	JSR ObjectTileCollision
0ADFF                           
0ADFF B5 5B                     	LDA EnemyCollision, X
0AE01 48                        	PHA
0AE02 29 04                     	AND #CollisionFlags_Down
0AE04 F0 00                     	BEQ loc_BANK3_AE09
0AE06                           
0AE06 20 DC 95                  	JSR ResetObjectYVelocity
0AE09                           
0AE09                           loc_BANK3_AE09:
0AE09 68                        	PLA
0AE0A 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
0AE0C F0 00                     	BEQ loc_BANK3_AE14
0AE0E                           
0AE0E 20 B7 9E                  	JSR EnemyBehavior_TurnAround
0AE11                           
0AE11 20 5E 9E                  	JSR ApplyObjectPhysicsX
0AE14                           
0AE14                           loc_BANK3_AE14:
0AE14 F6 9F                     	INC ObjectAnimationTimer, X
0AE16 B5 B1                     	LDA EnemyArray_B1, X
0AE18 D0 00                     	BNE loc_BANK3_AE45
0AE1A                           
0AE1A 8A                        	TXA
0AE1B 0A                        	ASL A
0AE1C 0A                        	ASL A
0AE1D 0A                        	ASL A
0AE1E 0A                        	ASL A
0AE1F 65 10                     	ADC byte_RAM_10
0AE21 29 7F                     	AND #$7F
0AE23 D0 00                     	BNE loc_BANK3_AE28
0AE25                           
0AE25 20 A0 84                  	JSR EnemyInit_BasicMovementTowardPlayer
0AE28                           
0AE28                           loc_BANK3_AE28:
0AE28 B5 9F                     	LDA ObjectAnimationTimer, X
0AE2A 29 7F                     	AND #%01111111
0AE2C D0 00                     	BNE loc_BANK3_AE45
0AE2E                           
0AE2E 20 A0 84                  	JSR EnemyInit_BasicMovementTowardPlayer
0AE31                           
0AE31                           	; which bullet?
0AE31 20 F9 95                  	JSR CreateBullet
0AE34                           
0AE34 30 00                     	BMI loc_BANK3_AE45
0AE36                           
0AE36 A6 00                     	LDX byte_RAM_0 ; X has the new enemy index
0AE38 A9 27                     	LDA #Enemy_AutobombFire
0AE3A                           	; Set the enemy type and attributes
0AE3A                           	; BUG: The subroutine overwrites RAM_0 (enemy index)
0AE3A                           	; Should have pushed it to stack instead.
0AE3A 20 12 90                  	JSR EnemyBehavior_SpitProjectile
0AE3D                           
0AE3D A6 00                     	LDX byte_RAM_0
0AE3F D6 33                     	DEC ObjectYLo, X
0AE41 D6 33                     	DEC ObjectYLo, X
0AE43 A6 12                     	LDX byte_RAM_12
0AE45                           
0AE45                           loc_BANK3_AE45:
0AE45 20 85 85                  	JSR ApplyObjectMovement
0AE48                           
0AE48 4C 29 9B                  	JMP RenderSprite
0AE4B                           
0AE4B                           ; ---------------------------------------------------------------------------
0AE4B                           
0AE4B                           RenderSprite_Autobomb:
0AE4B B5 51                     	LDA EnemyState, X
0AE4D C9 01                     	CMP #EnemyState_Alive
0AE4F F0 00                     	BEQ loc_BANK3_AE5C
0AE51                           
0AE51 A9 C1                     	LDA #ObjAttrib_Palette1 | ObjAttrib_16x32 | ObjAttrib_UpsideDown
0AE53 95 65                     	STA ObjectAttributes, X
0AE55 95 9F                     	STA ObjectAnimationTimer, X
0AE57 A9 76                     	LDA #$76
0AE59 4C C1 9B                  	JMP RenderSprite_DrawObject
0AE5C                           
0AE5C                           ; ---------------------------------------------------------------------------
0AE5C                           
0AE5C                           loc_BANK3_AE5C:
0AE5C B5 B1                     	LDA EnemyArray_B1, X
0AE5E D0 00                     	BNE loc_BANK3_AE7C
0AE60                           
0AE60                           	LDA_abs byte_RAM_F4
0AE60                           	IFDEF COMPATIBILITY
0AE60 AD                        		.db $ad
0AE61 F4 00                     		.dw byte_RAM_F4
0AE63                           	ELSE
0AE63                           		LDA byte_RAM_F4
0AE63                           		NOP_compat
0AE63                           	ENDIF
0AE63 48                        	PHA
0AE64 AD 2C 04                  	LDA SpriteTempScreenY
0AE67 18                        	CLC
0AE68 69 F5                     	ADC #$F5
0AE6A 8D 2C 04                  	STA SpriteTempScreenY
0AE6D 20 00 00                  	JSR FindSpriteSlot
0AE70                           
0AE70                           	STY_abs byte_RAM_F4
0AE70                           	IFDEF COMPATIBILITY
0AE70 8C                        		.db $8c
0AE71 F4 00                     		.dw byte_RAM_F4
0AE73                           	ELSE
0AE73                           		STY byte_RAM_F4
0AE73                           		NOP_compat
0AE73                           	ENDIF
0AE73 A9 7C                     	LDA #$7C
0AE75 20 C1 9B                  	JSR RenderSprite_DrawObject
0AE78                           
0AE78 68                        	PLA
0AE79                           	STA_abs byte_RAM_F4
0AE79                           	IFDEF COMPATIBILITY
0AE79 8D                        		.db $8d
0AE7A F4 00                     		.dw byte_RAM_F4
0AE7C                           	ELSE
0AE7C                           		STA byte_RAM_F4
0AE7C                           		NOP_compat
0AE7C                           	ENDIF
0AE7C                           
0AE7C                           loc_BANK3_AE7C:
0AE7C B5 33                     	LDA ObjectYLo, X
0AE7E 8D 2C 04                  	STA SpriteTempScreenY
0AE81 20 B5 9B                  	JSR RenderSprite_NotAlbatoss
0AE84                           
0AE84 A9 02                     	LDA #$02
0AE86 95 6F                     	STA EnemyMovementDirection, X
0AE88 98                        	TYA
0AE89 18                        	CLC
0AE8A 69 08                     	ADC #$08
0AE8C                           	STA_abs byte_RAM_F4
0AE8C                           	IFDEF COMPATIBILITY
0AE8C 8D                        		.db $8d
0AE8D F4 00                     		.dw byte_RAM_F4
0AE8F                           	ELSE
0AE8F                           		STA byte_RAM_F4
0AE8F                           		NOP_compat
0AE8F                           	ENDIF
0AE8F A5 00                     	LDA byte_RAM_0
0AE91 8D 2C 04                  	STA SpriteTempScreenY
0AE94 A9 D0                     	LDA #SpriteFlags46E_Tilemap2 | SpriteFlags46E_DoubleSpeed | SpriteFlags46E_MirrorAnimation
0AE96 9D 6E 04                  	STA EnemyArray_46E, X
0AE99 A9 78                     	LDA #$78
0AE9B 20 C1 9B                  	JSR RenderSprite_DrawObject
0AE9E                           
0AE9E A9 50                     	LDA #SpriteFlags46E_Tilemap2 | SpriteFlags46E_DoubleSpeed
0AEA0 B4 B1                     	LDY EnemyArray_B1, X
0AEA2 F0 00                     	BEQ loc_BANK3_AEA6
0AEA4                           
0AEA4 A9 52                     	LDA #SpriteFlags46E_Unliftable | SpriteFlags46E_Tilemap2 | SpriteFlags46E_DoubleSpeed
0AEA6                           
0AEA6                           loc_BANK3_AEA6:
0AEA6 9D 6E 04                  	STA EnemyArray_46E, X
0AEA9 60                        	RTS
0AEAA                           
0AEAA                           ; ---------------------------------------------------------------------------
0AEAA                           
0AEAA                           EnemyInit_WhaleSpout:
0AEAA 20 6B 84                  	JSR EnemyInit_Basic
0AEAD                           
0AEAD B5 33                     	LDA ObjectYLo, X
0AEAF 95 B1                     	STA EnemyArray_B1, X
0AEB1 60                        	RTS
0AEB2                           
0AEB2                           ; ---------------------------------------------------------------------------
0AEB2                           
0AEB2                           EnemyBehavior_WhaleSpout:
0AEB2 F6 9F                     	INC ObjectAnimationTimer, X
0AEB4 F6 9F                     	INC ObjectAnimationTimer, X
0AEB6 F6 79                     	INC EnemyVariable, X
0AEB8 B5 79                     	LDA EnemyVariable, X
0AEBA C9 40                     	CMP #$40
0AEBC B0 00                     	BCS loc_BANK3_AEC3
0AEBE                           
0AEBE A9 E0                     	LDA #$E0
0AEC0 95 33                     	STA ObjectYLo, X
0AEC2                           
0AEC2                           locret_BANK3_AEC2:
0AEC2 60                        	RTS
0AEC3                           
0AEC3                           ; ---------------------------------------------------------------------------
0AEC3                           
0AEC3                           loc_BANK3_AEC3:
0AEC3 D0 00                     	BNE loc_BANK3_AECD
0AEC5                           
0AEC5 A9 D0                     	LDA #$D0
0AEC7 95 47                     	STA ObjectYVelocity, X
0AEC9 B5 B1                     	LDA EnemyArray_B1, X
0AECB 95 33                     	STA ObjectYLo, X
0AECD                           
0AECD                           loc_BANK3_AECD:
0AECD A9 01                     	LDA #SoundEffect3_WhaleSpout
0AECF 8D 05 06                  	STA SoundEffectQueue3
0AED2 B5 79                     	LDA EnemyVariable, X
0AED4 C9 80                     	CMP #$80
0AED6 90 00                     	BCC loc_BANK3_AEE6
0AED8                           
0AED8 C9 DC                     	CMP #$DC
0AEDA B0 00                     	BCS loc_BANK3_AEE6
0AEDC                           
0AEDC A0 03                     	LDY #$03
0AEDE 29 10                     	AND #$10
0AEE0 F0 00                     	BEQ loc_BANK3_AEE4
0AEE2                           
0AEE2 A0 FB                     	LDY #$FB
0AEE4                           
0AEE4                           loc_BANK3_AEE4:
0AEE4 94 47                     	STY ObjectYVelocity, X
0AEE6                           
0AEE6                           loc_BANK3_AEE6:
0AEE6 F6 47                     	INC ObjectYVelocity, X
0AEE8 20 59 9E                  	JSR ApplyObjectPhysicsY
0AEEB                           
0AEEB                           RenderSprite_WhaleSpout:
0AEEB A5 EE                     	LDA byte_RAM_EE
0AEED 29 0C                     	AND #$C
0AEEF D0 D1                     	BNE locret_BANK3_AEC2
0AEF1                           
0AEF1 B5 79                     	LDA EnemyVariable, X
0AEF3 85 07                     	STA byte_RAM_7
0AEF5 A9 29                     	LDA #$29
0AEF7 95 65                     	STA ObjectAttributes, X
0AEF9 A9 92                     	LDA #$92
0AEFB B4 79                     	LDY EnemyVariable, X
0AEFD C0 DC                     	CPY #$DC
0AEFF 90 00                     	BCC loc_BANK3_AF03
0AF01                           
0AF01 A9 94                     	LDA #$94
0AF03                           
0AF03                           loc_BANK3_AF03:
0AF03 20 C1 9B                  	JSR RenderSprite_DrawObject
0AF06                           
0AF06 20 00 00                  	JSR FindSpriteSlot
0AF09                           
0AF09 A9 55                     	LDA #$55
0AF0B A6 07                     	LDX byte_RAM_7
0AF0D E0 E0                     	CPX #$E0
0AF0F 90 00                     	BCC loc_BANK3_AF13
0AF11                           
0AF11 A9 3A                     	LDA #$3A
0AF13                           
0AF13                           loc_BANK3_AF13:
0AF13 99 01 02                  	STA SpriteDMAArea + 1, Y
0AF16 A9 55                     	LDA #$55
0AF18 E0 E8                     	CPX #$E8
0AF1A 90 00                     	BCC loc_BANK3_AF1E
0AF1C                           
0AF1C A9 3A                     	LDA #$3A
0AF1E                           
0AF1E                           loc_BANK3_AF1E:
0AF1E 99 05 02                  	STA SpriteDMAArea + 5, Y
0AF21 A9 55                     	LDA #$55
0AF23 E0 F0                     	CPX #$F0
0AF25 90 00                     	BCC loc_BANK3_AF29
0AF27                           
0AF27 A9 3A                     	LDA #$3A
0AF29                           
0AF29                           loc_BANK3_AF29:
0AF29 99 09 02                  	STA SpriteDMAArea + 9, Y
0AF2C A9 55                     	LDA #$55
0AF2E E0 F8                     	CPX #$F8
0AF30 90 00                     	BCC loc_BANK3_AF34
0AF32                           
0AF32 A9 3A                     	LDA #$3A
0AF34                           
0AF34                           loc_BANK3_AF34:
0AF34 99 0D 02                  	STA SpriteDMAArea + $D, Y
0AF37                           	LDX_abs byte_RAM_F4
0AF37                           	IFDEF COMPATIBILITY
0AF37 AE                        		.db $ae
0AF38 F4 00                     		.dw byte_RAM_F4
0AF3A                           	ELSE
0AF3A                           		LDX byte_RAM_F4
0AF3A                           		NOP_compat
0AF3A                           	ENDIF
0AF3A BD 02 02                  	LDA SpriteDMAArea + 2, X
0AF3D 99 02 02                  	STA SpriteDMAArea + 2, Y
0AF40 99 06 02                  	STA SpriteDMAArea + 6, Y
0AF43 99 0A 02                  	STA SpriteDMAArea + $A, Y
0AF46 99 0E 02                  	STA SpriteDMAArea + $E, Y
0AF49 AD 29 04                  	LDA SpriteTempScreenX
0AF4C 18                        	CLC
0AF4D 69 04                     	ADC #$04
0AF4F 99 03 02                  	STA SpriteDMAArea + 3, Y
0AF52 99 07 02                  	STA SpriteDMAArea + 7, Y
0AF55 99 0B 02                  	STA SpriteDMAArea + $B, Y
0AF58 99 0F 02                  	STA SpriteDMAArea + $F, Y
0AF5B A6 12                     	LDX byte_RAM_12
0AF5D B5 33                     	LDA ObjectYLo, X
0AF5F 18                        	CLC
0AF60 69 0F                     	ADC #$F
0AF62 99 00 02                  	STA SpriteDMAArea, Y
0AF65 69 10                     	ADC #$10
0AF67 99 04 02                  	STA SpriteDMAArea + 4, Y
0AF6A 69 10                     	ADC #$10
0AF6C 99 08 02                  	STA SpriteDMAArea + 8, Y
0AF6F 69 10                     	ADC #$10
0AF71 99 0C 02                  	STA SpriteDMAArea + $C, Y
0AF74                           
0AF74                           locret_BANK3_AF74:
0AF74 60                        	RTS
0AF75                           
0AF75                           
0AF75                           Flurry_MaxVelocityX:
0AF75 1C                        	.db $1C
0AF76 E4                        	.db $E4
0AF77                           
0AF77                           Flurry_AccelerationX:
0AF77 01                        	.db $01
0AF78 FF                        	.db $FF
0AF79                           
0AF79                           
0AF79                           EnemyBehavior_Flurry:
0AF79 F6 9F                     	INC ObjectAnimationTimer, X
0AF7B 20 88 99                  	JSR EnemyBehavior_CheckDamagedInterrupt
0AF7E                           
0AF7E 20 DB 98                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
0AF81                           
0AF81 20 00 00                  	JSR ObjectTileCollision
0AF84                           
0AF84 B5 5B                     	LDA EnemyCollision, X
0AF86 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
0AF88 F0 00                     	BEQ EnemyBehavior_Flurry_DownCollision
0AF8A                           
0AF8A 20 B7 9E                  	JSR EnemyBehavior_TurnAround
0AF8D                           
0AF8D                           EnemyBehavior_Flurry_DownCollision:
0AF8D B5 5B                     	LDA EnemyCollision, X
0AF8F 29 04                     	AND #CollisionFlags_Down
0AF91 F0 00                     	BEQ loc_BANK3_AFB4
0AF93                           
0AF93 B5 47                     	LDA ObjectYVelocity, X
0AF95 48                        	PHA
0AF96 20 DC 95                  	JSR ResetObjectYVelocity
0AF99                           
0AF99 68                        	PLA
0AF9A BC 2F 04                  	LDY ObjectProjectileTimer, X
0AF9D F0 00                     	BEQ loc_BANK3_AFB4
0AF9F                           
0AF9F C9 18                     	CMP #$18
0AFA1 30 00                     	BMI loc_BANK3_AFAC
0AFA3                           
0AFA3 20 BE 95                  	JSR HalfObjectVelocityX
0AFA6                           
0AFA6 A9 F0                     	LDA #$F0
0AFA8 95 47                     	STA ObjectYVelocity, X
0AFAA D0 00                     	BNE loc_BANK3_AFDA
0AFAC                           
0AFAC                           loc_BANK3_AFAC:
0AFAC A9 00                     	LDA #$00
0AFAE 9D 2F 04                  	STA ObjectProjectileTimer, X
0AFB1 20 4F 84                  	JSR SetEnemyAttributes
0AFB4                           
0AFB4                           loc_BANK3_AFB4:
0AFB4 A5 0E                     	LDA byte_RAM_E
0AFB6 C9 16                     	CMP #$16
0AFB8 F0 00                     	BEQ loc_BANK3_AFBF
0AFBA                           
0AFBA D6 9F                     	DEC ObjectAnimationTimer, X
0AFBC 4C 7E 94                  	JMP loc_BANK2_9470
0AFBF                           
0AFBF                           ; ---------------------------------------------------------------------------
0AFBF                           
0AFBF                           loc_BANK3_AFBF:
0AFBF 20 49 9E                  	JSR EnemyFindWhichSidePlayerIsOn
0AFC2                           
0AFC2 C8                        	INY
0AFC3 94 6F                     	STY EnemyMovementDirection, X
0AFC5 A5 10                     	LDA byte_RAM_10
0AFC7 29 01                     	AND #$01
0AFC9 D0 00                     	BNE loc_BANK3_AFDA
0AFCB                           
0AFCB B5 3D                     	LDA ObjectXVelocity, X
0AFCD D9 74 AF                  	CMP Flurry_MaxVelocityX - 1, Y
0AFD0 F0 00                     	BEQ loc_BANK3_AFDA
0AFD2                           
0AFD2 18                        	CLC
0AFD3 79 76 AF                  	ADC Flurry_AccelerationX - 1, Y
0AFD6 95 3D                     	STA ObjectXVelocity, X
0AFD8 F6 9F                     	INC ObjectAnimationTimer, X
0AFDA                           
0AFDA                           loc_BANK3_AFDA:
0AFDA 20 85 85                  	JSR ApplyObjectMovement
0AFDD                           
0AFDD FE A4 04                  	INC ObjectNonSticky, X
0AFE0 4C 29 9B                  	JMP RenderSprite
0AFE3                           
0AFE3                           ; ---------------------------------------------------------------------------
0AFE3                           
0AFE3                           EnemyInit_HawkmouthBoss:
0AFE3 20 6D 8D                  	JSR EnemyInit_Hawkmouth ; Falls through to EnemyInit_Stationary
0AFE6                           
0AFE6 A9 03                     	LDA #$03
0AFE8 9D 65 04                  	STA EnemyHP, X
0AFEB 60                        	RTS
0AFEC                           
0AFEC                           ; ---------------------------------------------------------------------------
0AFEC                           byte_BANK3_AFEC:
0AFEC 01                        	.db $01
0AFED FF                        	.db $FF
0AFEE                           byte_BANK3_AFEE:
0AFEE 28                        	.db $28
0AFEF D8                        	.db $D8
0AFF0                           byte_BANK3_AFF0:
0AFF0 01                        	.db $01
0AFF1 FF                        	.db $FF
0AFF2                           byte_BANK3_AFF2:
0AFF2 10                        	.db $10
0AFF3 F0                        	.db $F0
0AFF4                           ; ---------------------------------------------------------------------------
0AFF4                           
0AFF4                           EnemyBehavior_HawkmouthBoss:
0AFF4 20 00 00                  	JSR RenderSprite_HawkmouthBoss
0AFF7                           
0AFF7 A9 06                     	LDA #SpriteFlags46E_Unliftable | SpriteFlags46E_NoEnemyCollision
0AFF9 9D 6E 04                  	STA EnemyArray_46E, X
0AFFC A9 02                     	LDA #$02
0AFFE 8D FE 71                  	STA EnemyPlayerCollisionTable_RAM + Enemy_HawkmouthBoss
0B001 AD B5 04                  	LDA CrystalAndHawkmouthOpenSize
0B004 F0 00                     	BEQ locret_BANK3_B05F
0B006                           
0B006 C9 01                     	CMP #$01
0B008 D0 00                     	BNE loc_BANK3_B01C
0B00A                           
0B00A 9D 80 04                  	STA EnemyArray_480, X
0B00D A9 90                     	LDA #$90
0B00F 95 86                     	STA ObjectTimer1, X
0B011 A9 40                     	LDA #$40
0B013 9D 38 04                  	STA ObjectStunTimer, X
0B016 9D 5C 04                  	STA ObjectFlashTimer, X
0B019 8D B5 04                  	STA CrystalAndHawkmouthOpenSize
0B01C                           
0B01C                           loc_BANK3_B01C:
0B01C BD 80 04                  	LDA EnemyArray_480, X
0B01F C9 02                     	CMP #$02
0B021 90 00                     	BCC loc_BANK3_B09B
0B023                           
0B023 B5 B1                     	LDA EnemyArray_B1, X
0B025 D0 00                     	BNE loc_BANK3_B03B
0B027                           
0B027 FE 80 04                  	INC EnemyArray_480, X
0B02A BD 80 04                  	LDA EnemyArray_480, X
0B02D C9 31                     	CMP #$31
0B02F D0 00                     	BNE HawkmouthEat
0B031                           
0B031 BD 53 04                  	LDA ObjectTimer2, X
0B034 D0 00                     	BNE loc_BANK3_B03B
0B036                           
0B036 F6 B1                     	INC EnemyArray_B1, X
0B038 20 00 00                  	JSR sub_BANK3_B095
0B03B                           
0B03B                           loc_BANK3_B03B:
0B03B DE 80 04                  	DEC EnemyArray_480, X
0B03E BC 80 04                  	LDY EnemyArray_480, X
0B041 88                        	DEY
0B042 D0 00                     	BNE HawkmouthEat
0B044                           
0B044 D6 B1                     	DEC EnemyArray_B1, X
0B046 A5 50                     	LDA PlayerState
0B048 C9 06                     	CMP #PlayerState_HawkmouthEating
0B04A D0 00                     	BNE HawkmouthEat
0B04C                           
0B04C A9 01                     	LDA #TransitionType_Door
0B04E 8D 34 05                  	STA TransitionType
0B051 20 00 00                  	JSR DoAreaReset
0B054                           
0B054 A9 09                     	LDA #$09
0B056 85 14                     	STA PlayerXHi
0B058 EE 27 06                  	INC DoAreaTransition
0B05B 68                        	PLA
0B05C 68                        	PLA
0B05D 68                        	PLA
0B05E 68                        	PLA
0B05F                           
0B05F                           locret_BANK3_B05F:
0B05F 60                        	RTS
0B060                           
0B060                           ; ---------------------------------------------------------------------------
0B060                           
0B060                           HawkmouthEat:
0B060 BD 80 04                  	LDA EnemyArray_480, X ; Hawkmouth code?
0B063 C9 30                     	CMP #$30
0B065 D0 00                     	BNE locret_BANK3_B09A
0B067                           
0B067 B5 5B                     	LDA EnemyCollision, X ; make sure the player is inside Hawkmouth
0B069 29 40                     	AND #CollisionFlags_PlayerInsideMaybe
0B06B F0 00                     	BEQ locret_BANK3_B09A
0B06D                           
0B06D A5 9C                     	LDA HoldingItem ; make sure player is not holding something
0B06F D0 00                     	BNE locret_BANK3_B09A
0B071                           
0B071 85 5A                     	STA PlayerCollision ; start eating player
0B073 F6 B1                     	INC EnemyArray_B1, X
0B075 EE B4 04                  	INC HawkmouthClosing
0B078 DE 80 04                  	DEC EnemyArray_480, X
0B07B B5 29                     	LDA ObjectXLo, X
0B07D 85 28                     	STA PlayerXLo
0B07F B5 15                     	LDA ObjectXHi, X
0B081 85 14                     	STA PlayerXHi
0B083 B5 33                     	LDA ObjectYLo, X
0B085 69 10                     	ADC #$10
0B087 85 32                     	STA PlayerYLo
0B089 A9 06                     	LDA #PlayerState_HawkmouthEating
0B08B 85 50                     	STA PlayerState
0B08D A9 60                     	LDA #$60
0B08F 85 82                     	STA PlayerStateTimer
0B091 A9 FC                     	LDA #$FC
0B093 85 46                     	STA PlayerYVelocity
0B095                           
0B095                           ; =============== S U B R O U T I N E =======================================
0B095                           
0B095                           sub_BANK3_B095:
0B095 A9 80                     	LDA #SoundEffect1_HawkOpen_WartBarf
0B097 8D 02 06                  	STA SoundEffectQueue1
0B09A                           
0B09A                           locret_BANK3_B09A:
0B09A 60                        	RTS
0B09B                           
0B09B                           ; End of function sub_BANK3_B095
0B09B                           
0B09B                           ; ---------------------------------------------------------------------------
0B09B                           
0B09B                           loc_BANK3_B09B:
0B09B A9 03                     	LDA #SpriteFlags46E_Damage | SpriteFlags46E_Unliftable
0B09D 9D 6E 04                  	STA EnemyArray_46E, X
0B0A0 A9 00                     	LDA #$00
0B0A2 8D FE 71                  	STA EnemyPlayerCollisionTable_RAM + Enemy_HawkmouthBoss
0B0A5 BD 65 04                  	LDA EnemyHP, X
0B0A8 D0 00                     	BNE loc_BANK3_B0BA
0B0AA                           
0B0AA A9 03                     	LDA #$03 ; Hawkmouth Boss health?
0B0AC 9D 65 04                  	STA EnemyHP, X
0B0AF 20 95 B0                  	JSR sub_BANK3_B095
0B0B2                           
0B0B2 FE 80 04                  	INC EnemyArray_480, X
0B0B5 A9 FF                     	LDA #$FF
0B0B7 9D 53 04                  	STA ObjectTimer2, X
0B0BA                           
0B0BA                           loc_BANK3_B0BA:
0B0BA A5 10                     	LDA byte_RAM_10
0B0BC 4A                        	LSR A
0B0BD 90 00                     	BCC loc_BANK3_B0E3
0B0BF                           
0B0BF B5 79                     	LDA EnemyVariable, X
0B0C1 29 01                     	AND #$01
0B0C3 A8                        	TAY
0B0C4 B5 47                     	LDA ObjectYVelocity, X
0B0C6 18                        	CLC
0B0C7 79 F0 AF                  	ADC byte_BANK3_AFF0, Y
0B0CA 95 47                     	STA ObjectYVelocity, X
0B0CC D9 F2 AF                  	CMP byte_BANK3_AFF2, Y
0B0CF D0 00                     	BNE loc_BANK3_B0D3
0B0D1                           
0B0D1 F6 79                     	INC EnemyVariable, X
0B0D3                           
0B0D3                           loc_BANK3_B0D3:
0B0D3 20 49 9E                  	JSR EnemyFindWhichSidePlayerIsOn
0B0D6                           
0B0D6 B5 3D                     	LDA ObjectXVelocity, X
0B0D8 D9 EE AF                  	CMP byte_BANK3_AFEE, Y
0B0DB F0 00                     	BEQ loc_BANK3_B0E3
0B0DD                           
0B0DD 18                        	CLC
0B0DE 79 EC AF                  	ADC byte_BANK3_AFEC, Y
0B0E1 95 3D                     	STA ObjectXVelocity, X
0B0E3                           
0B0E3                           loc_BANK3_B0E3:
0B0E3 4C 3E 94                  	JMP ApplyObjectPhysics
0B0E6                           
0B0E6                           ; ---------------------------------------------------------------------------
0B0E6                           byte_BANK3_B0E6:
0B0E6 F8                        	.db $F8
0B0E7 10                        	.db $10
0B0E8                           
0B0E8                           ; =============== S U B R O U T I N E =======================================
0B0E8                           
0B0E8                           RenderSprite_HawkmouthBoss:
0B0E8 BD 80 04                  	LDA EnemyArray_480, X
0B0EB 20 21 8E                  	JSR sub_BANK2_8E13
0B0EE                           
0B0EE AD B5 04                  	LDA CrystalAndHawkmouthOpenSize
0B0F1 F0 00                     	BEQ loc_BANK3_B16D
0B0F3                           
0B0F3 A5 EE                     	LDA byte_RAM_EE
0B0F5 29 0C                     	AND #$0C
0B0F7 D0 00                     	BNE loc_BANK3_B16D
0B0F9                           
0B0F9                           	; draw the back of Hawkmouth
0B0F9 B5 86                     	LDA ObjectTimer1, X
0B0FB 85 07                     	STA byte_RAM_7
0B0FD 20 00 00                  	JSR FindSpriteSlot
0B100                           
0B100 A6 02                     	LDX byte_RAM_2
0B102 AD 29 04                  	LDA SpriteTempScreenX
0B105 18                        	CLC
0B106 7D E5 B0                  	ADC byte_BANK3_B0E6 - 1, X
0B109 48                        	PHA
0B10A 08                        	PHP
0B10B CA                        	DEX
0B10C F0 00                     	BEQ loc_BANK3_B112
0B10E                           
0B10E 68                        	PLA
0B10F 49 01                     	EOR #$01
0B111 48                        	PHA
0B112                           
0B112                           loc_BANK3_B112:
0B112 28                        	PLP
0B113 68                        	PLA
0B114 90 00                     	BCC loc_BANK3_B16D
0B116                           
0B116 99 03 02                  	STA SpriteDMAArea + 3, Y
0B119 99 07 02                  	STA SpriteDMAArea + 7, Y
0B11C 99 0B 02                  	STA SpriteDMAArea + $B, Y
0B11F 99 0F 02                  	STA SpriteDMAArea + $F, Y
0B122 AE BD 04                  	LDX DoorAnimationTimer
0B125 F0 00                     	BEQ loc_BANK3_B129
0B127                           
0B127 A2 10                     	LDX #$10
0B129                           
0B129                           loc_BANK3_B129:
0B129 BD 00 02                  	LDA SpriteDMAArea, X
0B12C 99 00 02                  	STA SpriteDMAArea, Y
0B12F 18                        	CLC
0B130 69 10                     	ADC #$10
0B132 99 04 02                  	STA SpriteDMAArea + 4, Y
0B135 A5 07                     	LDA byte_RAM_7
0B137 F0 00                     	BEQ loc_BANK3_B13B
0B139                           
0B139 A9 20                     	LDA #$20
0B13B                           
0B13B                           loc_BANK3_B13B:
0B13B 1D 02 02                  	ORA SpriteDMAArea + 2, X
0B13E 99 02 02                  	STA SpriteDMAArea + 2, Y
0B141 99 06 02                  	STA SpriteDMAArea + 6, Y
0B144 99 0A 02                  	STA SpriteDMAArea + $A, Y
0B147 99 0E 02                  	STA SpriteDMAArea + $E, Y
0B14A                           	LDX_abs byte_RAM_F4
0B14A                           	IFDEF COMPATIBILITY
0B14A AE                        		.db $ae
0B14B F4 00                     		.dw byte_RAM_F4
0B14D                           	ELSE
0B14D                           		LDX byte_RAM_F4
0B14D                           		NOP_compat
0B14D                           	ENDIF
0B14D BD 00 02                  	LDA SpriteDMAArea, X
0B150 99 08 02                  	STA SpriteDMAArea + 8, Y
0B153 18                        	CLC
0B154 69 10                     	ADC #$10
0B156 99 0C 02                  	STA SpriteDMAArea + $C, Y
0B159 A9 F0                     	LDA #$F0
0B15B 99 01 02                  	STA SpriteDMAArea + 1, Y
0B15E A9 F2                     	LDA #$F2
0B160 99 05 02                  	STA SpriteDMAArea + 5, Y
0B163 A9 F4                     	LDA #$F4
0B165 99 09 02                  	STA SpriteDMAArea + 9, Y
0B168 A9 F6                     	LDA #$F6
0B16A 99 0D 02                  	STA SpriteDMAArea + $D, Y
0B16D                           
0B16D                           loc_BANK3_B16D:
0B16D A6 12                     	LDX byte_RAM_12
0B16F 60                        	RTS
0B170                           
0B170                           
0B170                           VegetableThrowerOffsetX:
0B170 08                        	.db $08
0B171 28                        	.db $28
0B172 48                        	.db $48
0B173 28                        	.db $28
0B174                           
0B174                           VegetableThrowerOffsetY:
0B174 94                        	.db $94
0B175 84                        	.db $84
0B176 94                        	.db $94
0B177 84                        	.db $84
0B178                           
0B178                           VegetableThrowerVelocity:
0B178 F8                        	.db $F8
0B179 08                        	.db $08
0B17A F8                        	.db $F8
0B17B 08                        	.db $08
0B17C 08                        	.db $08
0B17D F8                        	.db $F8
0B17E 08                        	.db $08
0B17F F8                        	.db $F8
0B180                           
0B180                           
0B180                           Generator_VegetableThrower:
0B180 A5 9C                     	LDA HoldingItem
0B182 D0 00                     	BNE locret_BANK3_B1CC
0B184                           
0B184 A5 10                     	LDA byte_RAM_10
0B186 29 FF                     	AND #$FF
0B188 D0 00                     	BNE locret_BANK3_B1CC
0B18A                           
0B18A EE F9 04                  	INC VegetableThrowerShotCounter
0B18D 20 D2 92                  	JSR CreateEnemy_TryAllSlots
0B190                           
0B190 30 00                     	BMI locret_BANK3_B1CC
0B192                           
0B192 A6 00                     	LDX byte_RAM_0
0B194 AD F9 04                  	LDA VegetableThrowerShotCounter
0B197 29 07                     	AND #$07
0B199 A8                        	TAY
0B19A B9 78 B1                  	LDA VegetableThrowerVelocity, Y
0B19D 95 3D                     	STA ObjectXVelocity, X
0B19F 98                        	TYA
0B1A0 29 03                     	AND #$03
0B1A2 A8                        	TAY
0B1A3 A9 02                     	LDA #$02
0B1A5 95 15                     	STA ObjectXHi, X
0B1A7 B9 70 B1                  	LDA VegetableThrowerOffsetX, Y
0B1AA 95 29                     	STA ObjectXLo, X
0B1AC B9 74 B1                  	LDA VegetableThrowerOffsetY, Y
0B1AF 95 33                     	STA ObjectYLo, X
0B1B1 A9 00                     	LDA #$00
0B1B3 95 1F                     	STA ObjectYHi, X
0B1B5 AD AE 05                  	LDA PseudoRNGValue
0B1B8 29 03                     	AND #$03
0B1BA C9 02                     	CMP #$02
0B1BC 90 00                     	BCC loc_BANK3_B1C1
0B1BE                           
0B1BE 0A                        	ASL A
0B1BF 95 B1                     	STA EnemyArray_B1, X
0B1C1                           
0B1C1                           loc_BANK3_B1C1:
0B1C1 A0 33                     	LDY #Enemy_VegetableLarge
0B1C3 94 90                     	STY ObjectType, X
0B1C5 20 4F 84                  	JSR SetEnemyAttributes
0B1C8                           
0B1C8 A9 D0                     	LDA #$D0
0B1CA 95 47                     	STA ObjectYVelocity, X
0B1CC                           
0B1CC                           locret_BANK3_B1CC:
0B1CC 60                        	RTS
0B1CD                           
0B1CD                           ; ---------------------------------------------------------------------------
0B1CD                           
0B1CD                           EnemyInit_Wart:
0B1CD 20 6B 84                  	JSR EnemyInit_Basic
0B1D0                           
0B1D0                           IFDEF RESET_CHR_LATCH
0B1D0                           	LDA #$04
0B1D0                           	JSR SetBossTileset
0B1D0                           ENDIF
0B1D0                           
0B1D0 A9 06                     	LDA #$06
0B1D2 9D 65 04                  	STA EnemyHP, X
0B1D5 B5 15                     	LDA ObjectXHi, X
0B1D7 9D EF 04                  	STA EndOfLevelDoorPage, X
0B1DA 60                        	RTS
0B1DB                           
0B1DB                           
0B1DB                           WartBubbleYVelocity:
0B1DB E0                        	.db $E0
0B1DC F0                        	.db $F0
0B1DD E8                        	.db $E8
0B1DE E4                        	.db $E4
0B1DF                           
0B1DF                           
0B1DF                           ;
0B1DF                           ; Wart
0B1DF                           ; ====
0B1DF                           ;
0B1DF                           ; Walks back and forth, spits bubbles
0B1DF                           ;
0B1DF                           ; ObjectTimer1 = counter used to determing the bubble spit distance
0B1DF                           ; EnemyVariable = counter used to pause while walking back and forth
0B1DF                           ; EnemyArray_480 = counter used to determine the bubble spit height
0B1DF                           ; EnemyArray_B1 = counter for death animation
0B1DF                           ; EnemyArray_477 = counter used for alternating steps
0B1DF                           ; ObjectFlashTimer = counter for blinking while hurt
0B1DF                           ;
0B1DF                           EnemyBehavior_Wart:
0B1DF B5 B1                     	LDA EnemyArray_B1, X
0B1E1 D0 00                     	BNE EnemyBehavior_Wart_Death
0B1E3                           
0B1E3 BD 65 04                  	LDA EnemyHP, X
0B1E6 D0 00                     	BNE EnemyBehavior_Wart_Alive
0B1E8                           
0B1E8                           	; start the death sequence
0B1E8 A9 80                     	LDA #$80
0B1EA 95 86                     	STA ObjectTimer1, X
0B1EC 95 B1                     	STA EnemyArray_B1, X
0B1EE D0 00                     	BNE EnemyBehavior_Wart_Exit
0B1F0                           
0B1F0                           EnemyBehavior_Wart_Alive:
0B1F0 F6 79                     	INC EnemyVariable, X
0B1F2 A5 10                     	LDA byte_RAM_10
0B1F4 29 FF                     	AND #%11111111
0B1F6 D0 00                     	BNE EnemyBehavior_Wart_Movement
0B1F8                           
0B1F8                           	; spit bubbles
0B1F8 A9 5F                     	LDA #$5F
0B1FA 95 86                     	STA ObjectTimer1, X
0B1FC                           	; counter that determines which index of WartBubbleYVelocity to use
0B1FC FE 80 04                  	INC EnemyArray_480, X
0B1FF                           
0B1FF                           EnemyBehavior_Wart_Movement:
0B1FF A9 00                     	LDA #$00
0B201 95 3D                     	STA ObjectXVelocity, X
0B203                           
0B203                           	; pause at the end of movement
0B203 B5 79                     	LDA EnemyVariable, X
0B205 29 40                     	AND #%01000000
0B207 F0 00                     	BEQ EnemyBehavior_Wart_PhysicsX
0B209                           
0B209                           	; increment animation timer
0B209 FE 77 04                  	INC EnemyArray_477, X
0B20C A9 F8                     	LDA #$F8 ; left movement
0B20E B4 79                     	LDY EnemyVariable, X
0B210 10 00                     	BPL EnemyBehavior_Wart_SetXVelocity
0B212                           
0B212 A9 08                     	LDA #$08 ; right movement
0B214                           
0B214                           EnemyBehavior_Wart_SetXVelocity:
0B214 95 3D                     	STA ObjectXVelocity, X
0B216                           
0B216                           EnemyBehavior_Wart_PhysicsX:
0B216 20 5E 9E                  	JSR ApplyObjectPhysicsX
0B219                           
0B219 BD 5C 04                  	LDA ObjectFlashTimer, X
0B21C D0 00                     	BNE EnemyBehavior_Wart_Exit
0B21E                           
0B21E B5 86                     	LDA ObjectTimer1, X
0B220 F0 00                     	BEQ EnemyBehavior_Wart_Exit
0B222                           
0B222 29 0F                     	AND #$0F
0B224 D0 00                     	BNE EnemyBehavior_Wart_Exit
0B226                           
0B226                           	; try to create a new enemy for the bubble
0B226 20 D6 92                  	JSR CreateEnemy
0B229                           
0B229 30 00                     	BMI EnemyBehavior_Wart_Exit
0B22B                           
0B22B A9 80                     	LDA #SoundEffect1_HawkOpen_WartBarf
0B22D 8D 02 06                  	STA SoundEffectQueue1
0B230                           	; determines how high to spit the bubble
0B230 BD 80 04                  	LDA EnemyArray_480, X
0B233 29 03                     	AND #$03
0B235 A8                        	TAY
0B236                           	; determines how far to spit the bubble
0B236 B5 86                     	LDA ObjectTimer1, X
0B238                           
0B238                           	; set up the bubble
0B238 A6 00                     	LDX byte_RAM_0
0B23A 4A                        	LSR A
0B23B 49 FF                     	EOR #$FF
0B23D 95 3D                     	STA ObjectXVelocity, X
0B23F B9 DB B1                  	LDA WartBubbleYVelocity, Y
0B242 95 47                     	STA ObjectYVelocity, X
0B244 A9 11                     	LDA #Enemy_WartBubble
0B246 95 90                     	STA ObjectType, X
0B248 B5 33                     	LDA ObjectYLo, X
0B24A 69 08                     	ADC #$08
0B24C 95 33                     	STA ObjectYLo, X
0B24E 20 4F 84                  	JSR SetEnemyAttributes
0B251                           
0B251 A6 12                     	LDX byte_RAM_12
0B253                           
0B253                           EnemyBehavior_Wart_Exit:
0B253 4C 29 9B                  	JMP RenderSprite
0B256                           
0B256                           
0B256                           EnemyBehavior_Wart_Death:
0B256 B5 86                     	LDA ObjectTimer1, X
0B258 F0 00                     	BEQ EnemyBehavior_Wart_DeathFall
0B25A                           
0B25A                           	; going up
0B25A 9D 5C 04                  	STA ObjectFlashTimer, X
0B25D FE 77 04                  	INC EnemyArray_477, X
0B260 FE 77 04                  	INC EnemyArray_477, X
0B263 A9 F0                     	LDA #$F0
0B265 95 47                     	STA ObjectYVelocity, X
0B267 D0 00                     	BNE EnemyBehavior_Wart_Death_Exit
0B269                           
0B269                           EnemyBehavior_Wart_DeathFall:
0B269 A9 04                     	LDA #$04
0B26B 95 3D                     	STA ObjectXVelocity, X
0B26D 20 5E 9E                  	JSR ApplyObjectPhysicsX
0B270                           
0B270 20 59 9E                  	JSR ApplyObjectPhysicsY
0B273                           
0B273                           	; every other frame
0B273 A5 10                     	LDA byte_RAM_10
0B275 4A                        	LSR A
0B276 B0 00                     	BCS EnemyBehavior_Wart_CheckDeathComplete
0B278                           
0B278 F6 47                     	INC ObjectYVelocity, X
0B27A 30 00                     	BMI EnemyBehavior_Wart_CheckDeathComplete
0B27C                           
0B27C A5 10                     	LDA byte_RAM_10
0B27E 29 1F                     	AND #$1F
0B280 D0 00                     	BNE EnemyBehavior_Wart_CheckDeathComplete
0B282                           
0B282 A9 10                     	LDA #DPCM_BossDeath
0B284 8D 01 06                  	STA DPCMQueue
0B287 20 D6 92                  	JSR CreateEnemy
0B28A                           
0B28A A6 00                     	LDX byte_RAM_0
0B28C B5 33                     	LDA ObjectYLo, X
0B28E 69 08                     	ADC #$08
0B290 95 33                     	STA ObjectYLo, X
0B292 20 BE 91                  	JSR TurnIntoPuffOfSmoke
0B295                           
0B295                           EnemyBehavior_Wart_CheckDeathComplete:
0B295 B5 33                     	LDA ObjectYLo, X
0B297 C9 D0                     	CMP #$D0
0B299 90 00                     	BCC EnemyBehavior_Wart_Death_Exit
0B29B                           
0B29B A9 02                     	LDA #EnemyState_Dead
0B29D 95 51                     	STA EnemyState, X
0B29F                           
0B29F                           EnemyBehavior_Wart_Death_Exit:
0B29F 4C 29 9B                  	JMP RenderSprite
0B2A2                           
0B2A2                           
0B2A2                           EnemyBehavior_WartBubble:
0B2A2 F6 9F                     	INC ObjectAnimationTimer, X
0B2A4 20 5E 9E                  	JSR ApplyObjectPhysicsX
0B2A7                           
0B2A7 20 59 9E                  	JSR ApplyObjectPhysicsY
0B2AA                           
0B2AA F6 47                     	INC ObjectYVelocity, X
0B2AC 4C 29 9B                  	JMP RenderSprite
0B2AF                           
0B2AF                           EnemyBehavior_WartBubble_Exit:
0B2AF 60                        	RTS
0B2B0                           
0B2B0                           
0B2B0                           RenderSprite_Wart:
0B2B0                           	LDA_abs byte_RAM_F4
0B2B0                           	IFDEF COMPATIBILITY
0B2B0 AD                        		.db $ad
0B2B1 F4 00                     		.dw byte_RAM_F4
0B2B3                           	ELSE
0B2B3                           		LDA byte_RAM_F4
0B2B3                           		NOP_compat
0B2B3                           	ENDIF
0B2B3 8D 67 72                  	STA WartOAMOffsets_RAM + 2
0B2B6 8D 6B 72                  	STA WartOAMOffsets_RAM + 6
0B2B9 A5 10                     	LDA byte_RAM_10
0B2BB 29 03                     	AND #$03
0B2BD 85 07                     	STA byte_RAM_7
0B2BF A8                        	TAY
0B2C0 B9 65 72                  	LDA WartOAMOffsets_RAM, Y
0B2C3                           	STA_abs byte_RAM_F4
0B2C3                           	IFDEF COMPATIBILITY
0B2C3 8D                        		.db $8d
0B2C4 F4 00                     		.dw byte_RAM_F4
0B2C6                           	ELSE
0B2C6                           		STA byte_RAM_F4
0B2C6                           		NOP_compat
0B2C6                           	ENDIF
0B2C6 A5 EF                     	LDA byte_RAM_EF
0B2C8 D0 E5                     	BNE EnemyBehavior_WartBubble_Exit
0B2CA                           
0B2CA BC 65 04                  	LDY EnemyHP, X
0B2CD D0 00                     	BNE RenderSprite_Wart_AfterObjAttrib
0B2CF                           
0B2CF                           	; he dead
0B2CF A9 4E                     	LDA #ObjAttrib_Horizontal | ObjAttrib_FrontFacing | ObjAttrib_16x32 | ObjAttrib_Palette2
0B2D1 95 65                     	STA ObjectAttributes, X
0B2D3                           
0B2D3                           RenderSprite_Wart_AfterObjAttrib:
0B2D3 A5 EE                     	LDA byte_RAM_EE
0B2D5 48                        	PHA
0B2D6 48                        	PHA
0B2D7 A0 AE                     	LDY #$AE ; top row: shocked
0B2D9 B5 B1                     	LDA EnemyArray_B1, X ; death counter
0B2DB D0 00                     	BNE RenderSprite_Wart_TopHurt
0B2DD                           
0B2DD BD 5C 04                  	LDA ObjectFlashTimer, X ; enemy timer
0B2E0 F0 00                     	BEQ RenderSprite_Wart_TopRegular
0B2E2                           
0B2E2 C9 30                     	CMP #$30
0B2E4 B0 00                     	BCS RenderSprite_Wart_TopHurt
0B2E6                           
0B2E6 29 08                     	AND #$08
0B2E8 D0 00                     	BNE RenderSprite_Wart_TopHurt
0B2EA                           
0B2EA A0 9E                     	LDY #$9E ; top row: blinking
0B2EC                           
0B2EC                           RenderSprite_Wart_TopHurt:
0B2EC 98                        	TYA
0B2ED D0 00                     	BNE RenderSprite_Wart_DrawTop
0B2EF                           
0B2EF                           RenderSprite_Wart_TopRegular:
0B2EF A9 9E                     	LDA #$9E ; top row: regular
0B2F1 B4 86                     	LDY ObjectTimer1, X
0B2F3 F0 00                     	BEQ RenderSprite_Wart_DrawTop
0B2F5                           
0B2F5 A9 A2                     	LDA #$A2 ; top row: spitting
0B2F7                           
0B2F7                           RenderSprite_Wart_DrawTop:
0B2F7 20 C1 9B                  	JSR RenderSprite_DrawObject
0B2FA                           
0B2FA A5 00                     	LDA byte_RAM_0
0B2FC 8D 2C 04                  	STA SpriteTempScreenY
0B2FF A4 07                     	LDY byte_RAM_7
0B301 B9 66 72                  	LDA WartOAMOffsets_RAM + 1, Y
0B304                           	STA_abs byte_RAM_F4
0B304                           	IFDEF COMPATIBILITY
0B304 8D                        		.db $8d
0B305 F4 00                     		.dw byte_RAM_F4
0B307                           	ELSE
0B307                           		STA byte_RAM_F4
0B307                           		NOP_compat
0B307                           	ENDIF
0B307 A0 A6                     	LDY #$A6 ; middle row: regular
0B309 B5 B1                     	LDA EnemyArray_B1, X
0B30B D0 00                     	BNE RenderSprite_Wart_MiddleHurt
0B30D                           
0B30D BD 5C 04                  	LDA ObjectFlashTimer, X
0B310 F0 00                     	BEQ RenderSprite_Wart_MiddleRegular
0B312                           
0B312 C9 30                     	CMP #$30
0B314 B0 00                     	BCS RenderSprite_Wart_MiddleHurt
0B316                           
0B316 29 08                     	AND #$08
0B318 D0 00                     	BNE RenderSprite_Wart_MiddleHurt
0B31A                           
0B31A F0 00                     	BEQ RenderSprite_Wart_DrawMiddle
0B31C                           
0B31C                           RenderSprite_Wart_MiddleRegular:
0B31C B5 86                     	LDA ObjectTimer1, X
0B31E F0 00                     	BEQ RenderSprite_Wart_DrawMiddle
0B320                           
0B320                           RenderSprite_Wart_MiddleHurt:
0B320 A0 AA                     	LDY #$AA ; middle row: spitting
0B322                           
0B322                           RenderSprite_Wart_DrawMiddle:
0B322 68                        	PLA
0B323 85 EE                     	STA byte_RAM_EE
0B325 98                        	TYA
0B326 20 C1 9B                  	JSR RenderSprite_DrawObject
0B329                           
0B329 A5 00                     	LDA byte_RAM_0
0B32B 8D 2C 04                  	STA SpriteTempScreenY
0B32E A4 07                     	LDY byte_RAM_7
0B330 B9 67 72                  	LDA WartOAMOffsets_RAM + 2, Y
0B333                           	STA_abs byte_RAM_F4
0B333                           	IFDEF COMPATIBILITY
0B333 8D                        		.db $8d
0B334 F4 00                     		.dw byte_RAM_F4
0B336                           	ELSE
0B336                           		STA byte_RAM_F4
0B336                           		NOP_compat
0B336                           	ENDIF
0B336 A0 BA                     	LDY #$BA ; bottom row: standing
0B338 B5 3D                     	LDA ObjectXVelocity, X
0B33A F0 00                     	BEQ RenderSprite_Wart_DrawBottom
0B33C                           
0B33C A0 B2                     	LDY #$B2 ; bottom row: left foot up
0B33E BD 77 04                  	LDA EnemyArray_477, X
0B341 29 10                     	AND #$10
0B343 F0 00                     	BEQ RenderSprite_Wart_DrawBottom
0B345                           
0B345 A0 B6                     	LDY #$B6 ; bottom row: right foot up
0B347                           
0B347                           RenderSprite_Wart_DrawBottom:
0B347 68                        	PLA
0B348 85 EE                     	STA byte_RAM_EE
0B34A 98                        	TYA
0B34B 20 C1 9B                  	JSR RenderSprite_DrawObject
0B34E                           
0B34E A5 EE                     	LDA byte_RAM_EE
0B350 D0 00                     	BNE RenderSprite_Wart_Exit
0B352                           
0B352                           	; draw backside
0B352 A4 07                     	LDY byte_RAM_7
0B354 BE 67 72                  	LDX WartOAMOffsets_RAM + 2, Y
0B357 B9 68 72                  	LDA WartOAMOffsets_RAM + 3, Y
0B35A A8                        	TAY
0B35B AD 29 04                  	LDA SpriteTempScreenX
0B35E 18                        	CLC
0B35F 69 20                     	ADC #$20
0B361 B0 00                     	BCS RenderSprite_Wart_Exit
0B363                           
0B363 99 03 02                  	STA SpriteDMAArea + 3, Y
0B366 99 07 02                  	STA SpriteDMAArea + 7, Y
0B369 99 0B 02                  	STA SpriteDMAArea + $B, Y
0B36C A5 00                     	LDA byte_RAM_0
0B36E E9 2F                     	SBC #$2F
0B370 99 00 02                  	STA SpriteDMAArea, Y
0B373 69 0F                     	ADC #$0F
0B375 99 04 02                  	STA SpriteDMAArea + 4, Y
0B378 69 10                     	ADC #$10
0B37A 99 08 02                  	STA SpriteDMAArea + 8, Y
0B37D BD 02 02                  	LDA SpriteDMAArea + 2, X
0B380 99 02 02                  	STA SpriteDMAArea + 2, Y
0B383 99 06 02                  	STA SpriteDMAArea + 6, Y
0B386 99 0A 02                  	STA SpriteDMAArea + $A, Y
0B389 A9 19                     	LDA #$19 ; top
0B38B 99 01 02                  	STA SpriteDMAArea + 1, Y
0B38E A9 1B                     	LDA #$1B ; middle
0B390 99 05 02                  	STA SpriteDMAArea + 5, Y
0B393 A9 1D                     	LDA #$1D ; bottom
0B395 99 09 02                  	STA SpriteDMAArea + 9, Y
0B398                           
0B398                           RenderSprite_Wart_Exit:
0B398 A6 12                     	LDX byte_RAM_12
0B39A 60                        	RTS
0B39B                           
0B39B                           
0B39B                           ; Unused space in the original ($B39B - $B4DF)
0B39B                           unusedSpace $B4E0, $FF
0B39B                           	IFDEF PRESERVE_UNUSED_SPACE
0B39B FF FF FF FF FF FF FF FF.. 		.pad $B4E0, $FF
0B4E0                           	ENDIF
0B4E0                           
0B4E0                           
0B4E0                           ; Used for static objects (e.g. keys)
0B4E0                           ObjectConveyorSpeedTable:
0B4E0 F0                        	.db $F0
0B4E1 10                        	.db $10
0B4E2                           
0B4E2                           
0B4E2                           ;
0B4E2                           ; Determine whether the Hoopstar has reached the end of its climbable range.
0B4E2                           ;
0B4E2                           ; Output
0B4E2                           ;   C = whether or not the Hoopstar is on a climbable tile
0B4E2                           ;
0B4E2                           EnemyBehavior_Hoopstar_Climb:
0B4E2 20 00 00                  	JSR ClearDirectionalCollisionFlags
0B4E5                           
0B4E5 A8                        	TAY
0B4E6 B5 46                     	LDA ObjectYVelocity - 1, X
0B4E8 30 00                     	BMI EnemyBehavior_Hoopstar_ClimbUp
0B4EA                           
0B4EA                           EnemyBehavior_Hoopstar_ClimbDown:
0B4EA C8                        	INY
0B4EB                           
0B4EB                           EnemyBehavior_Hoopstar_ClimbUp:
0B4EB 20 00 00                  	JSR EnemyBehavior_Hoopstar_CheckBackgroundTile
0B4EE                           
0B4EE B0 00                     	BCS EnemyBehavior_Hoopstar_Climb_Exit
0B4F0                           
0B4F0 A5 00                     	LDA byte_RAM_0
0B4F2 C9 82                     	CMP #BackgroundTile_PalmTreeTrunk
0B4F4 F0 00                     	BEQ EnemyBehavior_Hoopstar_Climb_Exit
0B4F6                           
0B4F6 18                        	CLC
0B4F7                           
0B4F7                           EnemyBehavior_Hoopstar_Climb_Exit:
0B4F7 CA                        	DEX
0B4F8 60                        	RTS
0B4F9                           
0B4F9                           
0B4F9                           ;
0B4F9                           ; Object/background collision that treats non-sky background tiles as solid,
0B4F9                           ; such as for Sparks and Mushroom Blocks
0B4F9                           ;
0B4F9                           ObjectTileCollision_SolidBackground:
0B4F9 A9 04                     	LDA #$04
0B4FB D0 00                     	BNE ObjectTileCollision_Main
0B4FD                           
0B4FD                           ;
0B4FD                           ; Normal object/background collision
0B4FD                           ;
0B4FD                           ObjectTileCollision:
0B4FD A9 00                     	LDA #$00
0B4FF                           
0B4FF                           ;
0B4FF                           ; Object Tile Collision
0B4FF                           ; =====================
0B4FF                           ;
0B4FF                           ; Handles object collision with background tiles
0B4FF                           ;
0B4FF                           ; Input
0B4FF                           ;   A = whether or not to treat walk-through tiles as solid
0B4FF                           ;   X = enemy index
0B4FF                           ; Output
0B4FF                           ;  EnemyCollision, X = collision flags
0B4FF                           ;
0B4FF                           ObjectTileCollision_Main:
0B4FF 85 07                     	STA byte_RAM_7
0B501 A9 00                     	LDA #$00
0B503 85 0B                     	STA byte_RAM_B
0B505 85 0E                     	STA byte_RAM_E
0B507 20 00 00                  	JSR ClearDirectionalCollisionFlags
0B50A                           
0B50A 85 08                     	STA byte_RAM_8
0B50C B5 46                     	LDA ObjectYVelocity - 1, X
0B50E 10 00                     	BPL ObjectTileCollision_Downward
0B510                           
0B510                           ObjectTileCollision_Upward:
0B510 20 00 00                  	JSR CheckEnemyTileCollision
0B513                           
0B513 E6 07                     	INC byte_RAM_7
0B515 E6 08                     	INC byte_RAM_8
0B517 D0 00                     	BNE loc_BANK3_B57B
0B519                           
0B519                           ObjectTileCollision_Downward:
0B519 E6 07                     	INC byte_RAM_7
0B51B E6 08                     	INC byte_RAM_8
0B51D 20 00 00                  	JSR CheckEnemyTileCollision
0B520                           
0B520                           ObjectTileCollision_CheckQuicksand:
0B520 B5 8F                     	LDA ObjectType - 1, X
0B522 C9 18                     	CMP #Enemy_CobratJar
0B524 F0 00                     	BEQ ObjectTileCollision_CheckConveyor
0B526                           
0B526 C9 19                     	CMP #Enemy_CobratSand
0B528 F0 00                     	BEQ ObjectTileCollision_CheckConveyor
0B52A                           
0B52A                           IFNDEF ENABLE_TILE_ATTRIBUTES_TABLE
0B52A A5 00                     	LDA byte_RAM_0
0B52C 38                        	SEC
0B52D E9 8A                     	SBC #BackgroundTile_QuicksandSlow
0B52F C9 02                     	CMP #$02
0B531 B0 00                     	BCS ObjectTileCollision_CheckConveyor
0B533                           ELSE
0B533                           	LDY byte_RAM_0
0B533                           	LDA TileInteractionAttributesTable, Y
0B533                           	AND #%00001100
0B533                           	CMP #%00001000
0B533                           	BNE ObjectTileCollision_CheckConveyor
0B533                           
0B533                           	LDA byte_RAM_0
0B533                           	SEC
0B533                           	SBC #BackgroundTile_QuicksandSlow
0B533                           ENDIF
0B533                           
0B533 0A                        	ASL A
0B534 69 01                     	ADC #$01
0B536 95 46                     	STA ObjectYVelocity - 1, X
0B538 A9 07                     	LDA #EnemyState_Sinking
0B53A 95 50                     	STA EnemyState - 1, X
0B53C A9 FF                     	LDA #$FF
0B53E 95 85                     	STA ObjectTimer1 - 1, X
0B540                           
0B540                           ObjectTileCollision_CheckConveyor:
0B540                           IFNDEF ENABLE_TILE_ATTRIBUTES_TABLE
0B540 A5 00                     	LDA byte_RAM_0
0B542 85 0E                     	STA byte_RAM_E
0B544                           
0B544 38                        	SEC
0B545 E9 67                     	SBC #BackgroundTile_ConveyorLeft
0B547 C9 02                     	CMP #$02
0B549 B0 00                     	BCS loc_BANK3_B57B
0B54B                           
0B54B                           ELSE
0B54B                           	LDY byte_RAM_0
0B54B                           	STY byte_RAM_E
0B54B                           
0B54B                           	LDA TileInteractionAttributesTable, Y
0B54B                           	AND #%00001100
0B54B                           	CMP #%00001100
0B54B                           
0B54B                           	BNE loc_BANK3_B57B
0B54B                           
0B54B                           	TYA
0B54B                           	AND #%00000001
0B54B                           ENDIF
0B54B                           
0B54B BC 37 04                  	LDY ObjectStunTimer - 1, X
0B54E D0 00                     	BNE loc_BANK3_B57B
0B550                           
0B550 B4 8F                     	LDY ObjectType - 1, X
0B552 C0 32                     	CPY #Enemy_VegetableSmall
0B554 90 00                     	BCC loc_BANK3_B56C
0B556                           
0B556                           	; Inanimate object on a conveyor belt
0B556 A8                        	TAY
0B557 B5 46                     	LDA ObjectYVelocity - 1, X
0B559 C9 03                     	CMP #$03
0B55B B0 00                     	BCS loc_BANK3_B57B
0B55D                           
0B55D                           	; Check collision flags
0B55D A5 0D                     	LDA byte_RAM_D
0B55F 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
0B561 D0 00                     	BNE loc_BANK3_B57B
0B563                           
0B563 B9 E0 B4                  	LDA ObjectConveyorSpeedTable, Y
0B566 95 3C                     	STA ObjectXVelocity - 1, X
0B568 85 0B                     	STA byte_RAM_B
0B56A D0 00                     	BNE loc_BANK3_B57B
0B56C                           
0B56C                           loc_BANK3_B56C:
0B56C B4 3C                     	LDY ObjectXVelocity - 1, X
0B56E F0 00                     	BEQ loc_BANK3_B579
0B570                           
0B570 55 6E                     	EOR EnemyMovementDirection - 1, X
0B572 4A                        	LSR A
0B573 B0 00                     	BCS loc_BANK3_B579
0B575                           
0B575 D6 9E                     	DEC ObjectAnimationTimer - 1, X
0B577 D6 9E                     	DEC ObjectAnimationTimer - 1, X
0B579                           
0B579                           loc_BANK3_B579:
0B579 F6 9E                     	INC ObjectAnimationTimer - 1, X
0B57B                           
0B57B                           loc_BANK3_B57B:
0B57B B5 3C                     	LDA ObjectXVelocity - 1, X
0B57D 18                        	CLC
0B57E 7D CB 04                  	ADC ObjectXAcceleration - 1, X
0B581 30 00                     	BMI loc_BANK3_B587
0B583                           
0B583 E6 07                     	INC byte_RAM_7
0B585 E6 08                     	INC byte_RAM_8
0B587                           
0B587                           loc_BANK3_B587:
0B587 20 00 00                  	JSR CheckEnemyTileCollision
0B58A                           
0B58A CA                        	DEX
0B58B 60                        	RTS
0B58C                           
0B58C                           
0B58C                           
0B58C                           ;
0B58C                           ; Check collision attributes for the next two tiles
0B58C                           ;
0B58C                           IFNDEF ENABLE_TILE_ATTRIBUTES_TABLE
0B58C                           CheckEnemyTileCollision:
0B58C A4 08                     	LDY byte_RAM_8
0B58E 20 00 00                  	JSR sub_BANK3_BB87
0B591                           
0B591 A4 07                     	LDY byte_RAM_7
0B593 B9 00 00                  	LDA EnemyTileCollisionTable, Y
0B596 A8                        	TAY
0B597 A5 00                     	LDA byte_RAM_0
0B599 20 00 00                  	JSR CheckTileUsesCollisionType_Bank3
0B59C                           
0B59C 90 00                     	BCC CheckEnemyTileCollision_Exit
0B59E                           
0B59E A4 07                     	LDY byte_RAM_7
0B5A0 B9 00 00                  	LDA EnemyEnableCollisionFlagTable, Y
0B5A3 15 5A                     	ORA EnemyCollision - 1, X
0B5A5 95 5A                     	STA EnemyCollision - 1, X
0B5A7                           
0B5A7                           ELSE
0B5A7                           CheckEnemyTileCollision:
0B5A7                           	LDY byte_RAM_8
0B5A7                           	JSR sub_BANK3_BB87
0B5A7                           
0B5A7                           	; check tile attributes
0B5A7                           	LDY byte_RAM_0
0B5A7                           	LDA TileCollisionAttributesTable, Y
0B5A7                           	LDY byte_RAM_7
0B5A7                           	AND CheckEnemyTileCollisionAttributesTable, Y
0B5A7                           
0B5A7                           	BEQ CheckEnemyTileCollision_Exit
0B5A7                           
0B5A7                           	LDA EnemyEnableCollisionFlagTable, Y
0B5A7                           	ORA EnemyCollision - 1, X
0B5A7                           	STA EnemyCollision - 1, X
0B5A7                           ENDIF
0B5A7                           
0B5A7                           CheckEnemyTileCollision_Exit:
0B5A7 E6 07                     	INC byte_RAM_7
0B5A9 E6 08                     	INC byte_RAM_8
0B5AB 60                        	RTS
0B5AC                           
0B5AC                           
0B5AC                           ;
0B5AC                           ; Resets directional collision flags and loads collision data pointer
0B5AC                           ;
0B5AC                           ; Input
0B5AC                           ;   X = enemy index
0B5AC                           ; Output
0B5AC                           ;   byte_RAM_D = previous collision flags
0B5AC                           ;   EnemyCollision = collision flags with up/down/left/right disabled
0B5AC                           ;   A = collision data pointer
0B5AC                           ;   X = X + 1
0B5AC                           ;
0B5AC                           ClearDirectionalCollisionFlags:
0B5AC E8                        	INX
0B5AD B5 5A                     	LDA EnemyCollision - 1, X
0B5AF 85 0D                     	STA byte_RAM_D
0B5B1 29 F0                     	AND #CollisionFlags_Damage | CollisionFlags_PlayerOnTop | CollisionFlags_PlayerInsideMaybe | CollisionFlags_80
0B5B3 95 5A                     	STA EnemyCollision - 1, X
0B5B5 BC 91 04                  	LDY EnemyArray_492 - 1, X
0B5B8 B9 00 00                  	LDA TileCollisionHitboxIndex, Y
0B5BB                           
0B5BB                           ClearDirectionalCollisionFlags_Exit:
0B5BB 60                        	RTS
0B5BC                           
0B5BC                           
0B5BC                           EnemyTileCollisionTable:
0B5BC 02                        	.db $02 ; jumpthrough bottom (y-velocity < 0)
0B5BD 01                        	.db $01 ; jumpthrough top (y-velocity > 0)
0B5BE 02                        	.db $02 ; jumpthrough right (x-velocity < 0)
0B5BF 02                        	.db $02 ; jumpthrough left (x-velocity > 0)
0B5C0 00                        	.db $00 ; treat background as solid
0B5C1 00                        	.db $00 ; treat background as solid
0B5C2 00                        	.db $00 ; treat background as solid
0B5C3 00                        	.db $00 ; treat background as solid
0B5C4                           
0B5C4                           
0B5C4                           IFDEF ENABLE_TILE_ATTRIBUTES_TABLE
0B5C4                           CheckEnemyTileCollisionAttributesTable:
0B5C4                           	.db %00001000 ; bottom (y-velocity < 0)
0B5C4                           	.db %00000100 ; top (y-velocity > 0)
0B5C4                           	.db %00000010 ; right (x-velocity < 0)
0B5C4                           	.db %00000001 ; left (x-velocity > 0)
0B5C4                           	.db %10001000 ; background-interactive bottom (y-velocity < 0)
0B5C4                           	.db %01000100 ; background-interactive top (y-velocity > 0)
0B5C4                           	.db %00100010 ; background-interactive right (x-velocity < 0)
0B5C4                           	.db %00010001 ; background-interactive left (x-velocity > 0)
0B5C4                           ENDIF
0B5C4                           
0B5C4                           EnemyEnableCollisionFlagTable:
0B5C4 08                        	.db CollisionFlags_Up
0B5C5 04                        	.db CollisionFlags_Down
0B5C6 02                        	.db CollisionFlags_Left
0B5C7 01                        	.db CollisionFlags_Right
0B5C8 08                        	.db CollisionFlags_Up
0B5C9 04                        	.db CollisionFlags_Down
0B5CA 02                        	.db CollisionFlags_Left
0B5CB 01                        	.db CollisionFlags_Right
0B5CC                           
0B5CC                           
0B5CC                           ;
0B5CC                           ; Collision detection between objects
0B5CC                           ;
0B5CC                           CheckObjectCollision:
0B5CC A9 00                     	LDA #$00
0B5CE 9D CC 04                  	STA ObjectXAcceleration, X
0B5D1 B5 5B                     	LDA EnemyCollision, X
0B5D3 29 0F                     	AND #CollisionFlags_Right | CollisionFlags_Left | CollisionFlags_Down | CollisionFlags_Up
0B5D5 95 5B                     	STA EnemyCollision, X
0B5D7 B5 51                     	LDA EnemyState, X
0B5D9 C9 04                     	CMP #EnemyState_BombExploding
0B5DB D0 00                     	BNE CheckObjectCollision_NotExplosion
0B5DD                           
0B5DD A0 06                     	LDY #$06 ; bomb explosion hitbox
0B5DF D0 00                     	BNE CheckObjectCollision_ReadHitbox
0B5E1                           
0B5E1                           CheckObjectCollision_NotExplosion:
0B5E1 C9 07                     	CMP #EnemyState_Sinking
0B5E3 F0 00                     	BEQ CheckObjectCollision_CheckObjectBeingCarried
0B5E5                           
0B5E5 B4 90                     	LDY ObjectType, X
0B5E7 C0 1E                     	CPY #Enemy_Egg
0B5E9 F0 00                     	BEQ CheckObjectCollision_CheckObjectAlive
0B5EB                           
0B5EB C0 1A                     	CPY #Enemy_Pokey
0B5ED F0 00                     	BEQ CheckObjectCollision_CheckObjectAlive
0B5EF                           
0B5EF BC 2F 04                  	LDY ObjectProjectileTimer, X
0B5F2 D0 00                     	BNE CheckObjectCollision_CheckObjectBeingCarried
0B5F4                           
0B5F4                           CheckObjectCollision_CheckObjectAlive:
0B5F4 C9 01                     	CMP #EnemyState_Alive
0B5F6 D0 C3                     	BNE ClearDirectionalCollisionFlags_Exit
0B5F8                           
0B5F8                           CheckObjectCollision_CheckObjectBeingCarried:
0B5F8 B5 A8                     	LDA ObjectBeingCarriedTimer, X
0B5FA D0 BF                     	BNE ClearDirectionalCollisionFlags_Exit
0B5FC                           
0B5FC BC 89 04                  	LDY ObjectHitbox, X
0B5FF                           
0B5FF                           CheckObjectCollision_ReadHitbox:
0B5FF B9 28 71                  	LDA ObjectCollisionHitboxWidth_RAM, Y
0B602 85 09                     	STA byte_RAM_9 ; hitbox width
0B604 A9 00                     	LDA #$00
0B606 85 00                     	STA byte_RAM_0
0B608 B9 00 71                  	LDA ObjectCollisionHitboxLeft_RAM, Y
0B60B 10 00                     	BPL CheckObjectCollision_ReadHitbox_Left
0B60D                           
0B60D C6 00                     	DEC byte_RAM_0
0B60F                           
0B60F                           CheckObjectCollision_ReadHitbox_Left:
0B60F 18                        	CLC
0B610 75 29                     	ADC ObjectXLo, X
0B612 85 05                     	STA byte_RAM_5 ; bounding box left low
0B614 B5 15                     	LDA ObjectXHi, X
0B616 65 00                     	ADC byte_RAM_0
0B618 85 01                     	STA byte_RAM_1 ; bounding box left high
0B61A                           	; Vertical levels wrap horizontally, so the high X position is discarded
0B61A A5 EC                     	LDA IsHorizontalLevel
0B61C D0 00                     	BNE CheckObjectCollision_ReadHitbox_Height
0B61E                           
0B61E 85 01                     	STA byte_RAM_1
0B620                           
0B620                           CheckObjectCollision_ReadHitbox_Height:
0B620 B9 3C 71                  	LDA ObjectCollisionHitboxHeight_RAM, Y
0B623 85 0B                     	STA byte_RAM_B ; hitbox height
0B625 A9 00                     	LDA #$00
0B627 85 00                     	STA byte_RAM_0
0B629 B9 14 71                  	LDA ObjectCollisionHitboxTop_RAM, Y
0B62C 10 00                     	BPL CheckObjectCollision_ReadHitbox_Top
0B62E                           
0B62E C6 00                     	DEC byte_RAM_0
0B630                           
0B630                           CheckObjectCollision_ReadHitbox_Top:
0B630 18                        	CLC
0B631 75 33                     	ADC ObjectYLo, X
0B633 85 07                     	STA byte_RAM_7 ; bounding box top low
0B635 B5 1F                     	LDA ObjectYHi, X
0B637 65 00                     	ADC byte_RAM_0
0B639 85 03                     	STA byte_RAM_3 ; bounding box top high
0B63B                           
0B63B                           CheckObjectCollision_Loop:
0B63B 86 ED                     	STX byte_RAM_ED
0B63D 8A                        	TXA
0B63E D0 00                     	BNE CheckObjectCollision_OtherObject
0B640                           
0B640                           	; X = 0
0B640 AD C7 04                  	LDA PlayerInRocket
0B643 0D 1B 04                  	ORA PlayerLock
0B646 D0 00                     	BNE CheckObjectCollision_PlayerCollisionDisabled
0B648                           
0B648 B5 50                     	LDA PlayerState, X
0B64A C9 02                     	CMP #PlayerState_Lifting
0B64C 90 00                     	BCC CheckObjectCollision_PlayerCollisionEnabled
0B64E                           
0B64E                           CheckObjectCollision_PlayerCollisionDisabled:
0B64E 4C 00 00                  	JMP CheckObjectCollision_Next
0B651                           
0B651                           CheckObjectCollision_PlayerCollisionEnabled:
0B651 A4 12                     	LDY byte_RAM_12
0B653 B9 2F 04                  	LDA ObjectProjectileTimer, Y
0B656 F0 00                     	BEQ CheckObjectCollision_ReadPlayerHitbox
0B658                           
0B658                           	; Post-throw grace period
0B658 C9 20                     	CMP #$20
0B65A 90 F2                     	BCC CheckObjectCollision_PlayerCollisionDisabled
0B65C                           
0B65C                           CheckObjectCollision_ReadPlayerHitbox:
0B65C A4 9A                     	LDY PlayerHitbox
0B65E 4C 00 00                  	JMP CheckObjectCollision_OtherObjectReadHitbox
0B661                           
0B661                           
0B661                           CheckObjectCollision_OtherObject:
0B661 A4 12                     	LDY byte_RAM_12
0B663 B9 51 00                  	LDA EnemyState, Y
0B666 C9 04                     	CMP #EnemyState_BombExploding
0B668 F0 00                     	BEQ CheckObjectCollision_CheckOtherObjectState
0B66A                           
0B66A                           	; Check if collision is disabled
0B66A B9 6E 04                  	LDA EnemyArray_46E, Y
0B66D 29 04                     	AND #SpriteFlags46E_NoEnemyCollision
0B66F D0 00                     	BNE CheckObjectCollision_NextIfNotEqual ; effectively `JMP CheckObjectCollision_Next`
0B671                           
0B671                           CheckObjectCollision_CheckOtherObjectState:
0B671 B5 50                     	LDA EnemyState - 1, X
0B673 C9 04                     	CMP #EnemyState_BombExploding ; what does this mean for an enemy?
0B675 D0 00                     	BNE CheckObjectCollision_OtherObjectNotExplosion
0B677                           
0B677 A0 06                     	LDY #$06 ; bomb explosion hitbox
0B679 D0 00                     	BNE CheckObjectCollision_OtherObjectReadHitbox
0B67B                           
0B67B                           CheckObjectCollision_OtherObjectNotExplosion:
0B67B C9 07                     	CMP #EnemyState_Sinking
0B67D F0 00                     	BEQ CheckObjectCollision_CheckOtherObjectBeingCarried
0B67F                           
0B67F B4 8F                     	LDY ObjectType - 1, X
0B681 C0 1E                     	CPY #Enemy_Egg
0B683 F0 00                     	BEQ CheckObjectCollision_CheckOtherObjectAlive
0B685                           
0B685 C0 1A                     	CPY #Enemy_Pokey
0B687 F0 00                     	BEQ CheckObjectCollision_CheckOtherObjectAlive
0B689                           
0B689 BC 2E 04                  	LDY ObjectProjectileTimer - 1, X
0B68C D0 00                     	BNE CheckObjectCollision_CheckOtherObjectBeingCarried
0B68E                           
0B68E                           CheckObjectCollision_CheckOtherObjectAlive:
0B68E C9 01                     	CMP #EnemyState_Alive
0B690                           CheckObjectCollision_NextIfNotEqual:
0B690 D0 00                     	BNE CheckObjectCollision_Next
0B692                           
0B692                           CheckObjectCollision_CheckOtherObjectBeingCarried:
0B692 B5 A7                     	LDA ObjectBeingCarriedTimer - 1, X
0B694 D0 00                     	BNE CheckObjectCollision_Next
0B696                           
0B696 B5 5A                     	LDA EnemyCollision - 1, X
0B698 29 10                     	AND #CollisionFlags_Damage
0B69A D0 00                     	BNE CheckObjectCollision_Next
0B69C                           
0B69C BD 6D 04                  	LDA EnemyArray_46E - 1, X
0B69F 29 04                     	AND #$04
0B6A1 D0 00                     	BNE CheckObjectCollision_Next
0B6A3                           
0B6A3 BC 88 04                  	LDY ObjectHitbox - 1, X
0B6A6                           
0B6A6                           CheckObjectCollision_OtherObjectReadHitbox:
0B6A6 B9 28 71                  	LDA ObjectCollisionHitboxWidth_RAM, Y
0B6A9 85 0A                     	STA byte_RAM_A ; hitbox width
0B6AB A9 00                     	LDA #$00
0B6AD 85 00                     	STA byte_RAM_0
0B6AF B9 00 71                  	LDA ObjectCollisionHitboxLeft_RAM, Y
0B6B2 10 00                     	BPL CheckObjectCollision_OtherObjectReadHitbox_Left
0B6B4                           
0B6B4 C6 00                     	DEC byte_RAM_0
0B6B6                           
0B6B6                           CheckObjectCollision_OtherObjectReadHitbox_Left:
0B6B6 18                        	CLC
0B6B7 75 28                     	ADC ObjectXLo - 1, X
0B6B9 85 06                     	STA byte_RAM_6 ; bounding box left low
0B6BB B5 14                     	LDA ObjectXHi - 1, X
0B6BD 65 00                     	ADC byte_RAM_0
0B6BF 85 02                     	STA byte_RAM_2 ; bounding box left high
0B6C1                           	; Vertical levels wrap horizontally, so the high X position is discarded
0B6C1 A5 EC                     	LDA IsHorizontalLevel
0B6C3 D0 00                     	BNE CheckObjectCollision_OtherObjectReadHitbox_Height
0B6C5                           
0B6C5 85 02                     	STA byte_RAM_2
0B6C7                           
0B6C7                           CheckObjectCollision_OtherObjectReadHitbox_Height:
0B6C7 B9 3C 71                  	LDA ObjectCollisionHitboxHeight_RAM, Y
0B6CA 85 0C                     	STA byte_RAM_C ; hitbox height
0B6CC A9 00                     	LDA #$00
0B6CE 85 00                     	STA byte_RAM_0
0B6D0 B9 14 71                  	LDA ObjectCollisionHitboxTop_RAM, Y
0B6D3 10 00                     	BPL CheckObjectCollision_OtherObjectReadHitbox_Top
0B6D5                           
0B6D5 C6 00                     	DEC byte_RAM_0
0B6D7                           
0B6D7                           CheckObjectCollision_OtherObjectReadHitbox_Top:
0B6D7 18                        	CLC
0B6D8 75 32                     	ADC ObjectYLo - 1, X
0B6DA 85 08                     	STA byte_RAM_8 ; bounding box top low
0B6DC B5 1E                     	LDA ObjectYHi - 1, X
0B6DE 65 00                     	ADC byte_RAM_0
0B6E0 85 04                     	STA byte_RAM_4 ; bounding box top high
0B6E2                           
0B6E2 20 00 00                  	JSR CheckHitboxCollision
0B6E5                           
0B6E5 B0 00                     	BCS CheckObjectCollision_Next
0B6E7                           
0B6E7 A5 0B                     	LDA byte_RAM_B
0B6E9 48                        	PHA
0B6EA 20 00 00                  	JSR EnemyCollisionBehavior
0B6ED                           
0B6ED 68                        	PLA
0B6EE 85 0B                     	STA byte_RAM_B
0B6F0                           
0B6F0                           CheckObjectCollision_Next:
0B6F0 CA                        	DEX
0B6F1 30 00                     	BMI CheckObjectCollision_RestoreObjectSlotExit
0B6F3                           
0B6F3 4C 3B B6                  	JMP CheckObjectCollision_Loop
0B6F6                           
0B6F6                           CheckObjectCollision_RestoreObjectSlotExit:
0B6F6 A6 12                     	LDX byte_RAM_12
0B6F8                           
0B6F8                           CheckObjectCollision_Exit:
0B6F8 60                        	RTS
0B6F9                           
0B6F9                           
0B6F9                           ;
0B6F9                           ; Run the player/object collision handler
0B6F9                           ;
0B6F9                           EnemyCollisionBehavior:
0B6F9 8A                        	TXA
0B6FA D0 00                     	BNE EnemyCollisionBehavior_ReadCollisionType
0B6FC                           
0B6FC A5 9C                     	LDA HoldingItem
0B6FE F0 00                     	BEQ EnemyCollisionBehavior_ReadCollisionType
0B700                           
0B700 AD 2D 04                  	LDA ObjectBeingCarriedIndex
0B703 C5 12                     	CMP byte_RAM_12
0B705 F0 F1                     	BEQ CheckObjectCollision_Exit
0B707                           
0B707                           EnemyCollisionBehavior_ReadCollisionType:
0B707 A4 12                     	LDY byte_RAM_12
0B709 B9 90 00                  	LDA ObjectType, Y
0B70C A8                        	TAY
0B70D B9 D1 71                  	LDA EnemyPlayerCollisionTable_RAM, Y
0B710 20 00 00                  	JSR JumpToTableAfterJump
0B713                           
0B713 00 00                     	.dw EnemyCollisionBehavior_Enemy
0B715 00 00                     	.dw EnemyCollisionBehavior_ProjectileItem
0B717 00 00                     	.dw EnemyCollisionBehavior_Object
0B719 00 00                     	.dw EnemyCollisionBehavior_POW
0B71B 00 00                     	.dw EnemyCollisionBehavior_Door
0B71D                           
0B71D                           
0B71D                           EnemyCollisionBehavior_Door:
0B71D 8A                        	TXA
0B71E D0 00                     	BNE EnemyCollisionBehavior_Exit
0B720                           
0B720 A5 F5                     	LDA Player1JoypadPress
0B722 29 08                     	AND #ControllerInput_Up
0B724 F0 00                     	BEQ EnemyCollisionBehavior_Exit
0B726                           
0B726 A5 5A                     	LDA PlayerCollision
0B728 29 04                     	AND #CollisionFlags_Down
0B72A F0 00                     	BEQ EnemyCollisionBehavior_Exit
0B72C                           
0B72C AD 26 04                  	LDA CollisionResultX
0B72F C9 FA                     	CMP #$FA
0B731 B0 00                     	BCS EnemyCollisionBehavior_Exit
0B733                           
0B733 AD BD 04                  	LDA DoorAnimationTimer
0B736 0D B3 04                  	ORA SubspaceDoorTimer
0B739 D0 00                     	BNE EnemyCollisionBehavior_Exit
0B73B                           
0B73B A5 9C                     	LDA HoldingItem
0B73D F0 00                     	BEQ loc_BANK3_B749
0B73F                           
0B73F AC 2D 04                  	LDY ObjectBeingCarriedIndex
0B742 B9 90 00                  	LDA ObjectType, Y
0B745 C9 3D                     	CMP #Enemy_Key
0B747 D0 00                     	BNE EnemyCollisionBehavior_Exit
0B749                           
0B749                           loc_BANK3_B749:
0B749 A4 12                     	LDY byte_RAM_12
0B74B B9 29 00                  	LDA ObjectXLo, Y
0B74E 85 28                     	STA PlayerXLo
0B750 B9 15 00                  	LDA ObjectXHi, Y
0B753 85 14                     	STA PlayerXHi
0B755 20 00 00                  	JSR StashPlayerPosition
0B758                           
0B758 A9 04                     	LDA #TransitionType_SubSpace
0B75A 8D 34 05                  	STA TransitionType
0B75D 4C 00 00                  	JMP DoorHandling_GoThroughDoor_Bank3
0B760                           
0B760                           EnemyCollisionBehavior_Exit:
0B760 60                        	RTS
0B761                           
0B761                           
0B761                           EnemyCollisionBehavior_Enemy:
0B761 A4 12                     	LDY byte_RAM_12
0B763 8A                        	TXA
0B764 F0 00                     	BEQ CheckCollisionWithPlayer
0B766                           
0B766 B9 5C 04                  	LDA ObjectFlashTimer, Y
0B769 1D 5B 04                  	ORA ObjectFlashTimer - 1, X
0B76C D0 F2                     	BNE EnemyCollisionBehavior_Exit
0B76E                           
0B76E B9 2F 04                  	LDA ObjectProjectileTimer, Y
0B771 D0 00                     	BNE loc_BANK3_B792
0B773                           
0B773 B9 51 00                  	LDA EnemyState, Y
0B776 C9 04                     	CMP #EnemyState_BombExploding
0B778 F0 00                     	BEQ loc_BANK3_B792
0B77A                           
0B77A 8A                        	TXA
0B77B A8                        	TAY
0B77C 88                        	DEY
0B77D A6 12                     	LDX byte_RAM_12
0B77F E8                        	INX
0B780 B9 51 00                  	LDA EnemyState, Y
0B783 C9 04                     	CMP #EnemyState_BombExploding
0B785 F0 00                     	BEQ loc_BANK3_B792
0B787                           
0B787 B9 2F 04                  	LDA ObjectProjectileTimer, Y
0B78A F0 00                     	BEQ loc_BANK3_B7E0
0B78C                           
0B78C B5 5A                     	LDA EnemyCollision - 1, X
0B78E 29 10                     	AND #CollisionFlags_Damage
0B790 D0 00                     	BNE loc_BANK3_B7E0
0B792                           
0B792                           loc_BANK3_B792:
0B792 B9 53 04                  	LDA ObjectTimer2, Y
0B795 19 5C 04                  	ORA ObjectFlashTimer, Y
0B798 D0 00                     	BNE loc_BANK3_B7D7
0B79A                           
0B79A B9 6E 04                  	LDA EnemyArray_46E, Y
0B79D 29 08                     	AND #SpriteFlags46E_DeathSquawk
0B79F F0 00                     	BEQ loc_BANK3_B7A4
0B7A1                           
0B7A1 20 00 00                  	JSR PlayBossHurtSound
0B7A4                           
0B7A4                           loc_BANK3_B7A4:
0B7A4 B9 65 04                  	LDA EnemyHP, Y
0B7A7 38                        	SEC
0B7A8 E9 01                     	SBC #$01
0B7AA 99 65 04                  	STA EnemyHP, Y
0B7AD 30 00                     	BMI loc_BANK3_B7BD
0B7AF                           
0B7AF 20 00 00                  	JSR PlayBossHurtSound
0B7B2                           
0B7B2 A9 21                     	LDA #$21
0B7B4 99 5C 04                  	STA ObjectFlashTimer, Y
0B7B7 4A                        	LSR A
0B7B8 99 38 04                  	STA ObjectStunTimer, Y
0B7BB D0 00                     	BNE loc_BANK3_B7D7
0B7BD                           
0B7BD                           loc_BANK3_B7BD:
0B7BD B9 5B 00                  	LDA EnemyCollision, Y
0B7C0 09 10                     	ORA #CollisionFlags_Damage
0B7C2 99 5B 00                  	STA EnemyCollision, Y
0B7C5 A9 E0                     	LDA #$E0
0B7C7 99 47 00                  	STA ObjectYVelocity, Y
0B7CA B9 3D 00                  	LDA ObjectXVelocity, Y
0B7CD 85 00                     	STA byte_RAM_0
0B7CF 0A                        	ASL A
0B7D0 66 00                     	ROR byte_RAM_0
0B7D2 A5 00                     	LDA byte_RAM_0
0B7D4 99 3D 00                  	STA ObjectXVelocity, Y
0B7D7                           
0B7D7                           loc_BANK3_B7D7:
0B7D7 B5 8F                     	LDA ObjectType - 1, X
0B7D9 C9 32                     	CMP #Enemy_VegetableSmall
0B7DB B0 00                     	BCS loc_BANK3_B7E0
0B7DD                           
0B7DD 20 00 00                  	JSR sub_BANK3_BA5D
0B7E0                           
0B7E0                           loc_BANK3_B7E0:
0B7E0 A6 ED                     	LDX byte_RAM_ED
0B7E2 60                        	RTS
0B7E3                           
0B7E3                           ; ---------------------------------------------------------------------------
0B7E3                           InvincibilityKill_VelocityX:
0B7E3 F8                        	.db $F8 ; to the left
0B7E4 08                        	.db $08 ; to the right
0B7E5                           ; ---------------------------------------------------------------------------
0B7E5                           
0B7E5                           CheckCollisionWithPlayer:
0B7E5 A5 EE                     	LDA byte_RAM_EE
0B7E7 29 08                     	AND #CollisionFlags_Up
0B7E9 D0 00                     	BNE CheckCollisionWithPlayer_Exit
0B7EB                           
0B7EB                           	; check if it's a heart
0B7EB B9 90 00                  	LDA ObjectType, Y
0B7EE D0 00                     	BNE CheckCollisionWithPlayer_NotHeart
0B7F0                           
0B7F0                           	; accept the heart into your life
0B7F0 99 51 00                  	STA EnemyState, Y
0B7F3 A9 04                     	LDA #SoundEffect1_CherryGet
0B7F5 8D 02 06                  	STA SoundEffectQueue1
0B7F8 AC C3 04                  	LDY PlayerMaxHealth
0B7FB AD C2 04                  	LDA PlayerHealth
0B7FE 18                        	CLC
0B7FF 69 10                     	ADC #$10
0B801 8D C2 04                  	STA PlayerHealth
0B804 D9 00 00                  	CMP PlayerHealthValueByHeartCount, Y
0B807 90 00                     	BCC CheckCollisionWithPlayer_Exit
0B809                           
0B809 4C 00 00                  	JMP RestorePlayerToFullHealth
0B80C                           
0B80C                           ; ---------------------------------------------------------------------------
0B80C                           
0B80C                           CheckCollisionWithPlayer_NotHeart:
0B80C C9 17                     	CMP #Enemy_Phanto
0B80E D0 00                     	BNE CheckCollisionWithPlayer_NotPhanto
0B810                           
0B810 AC BC 05                  	LDY PhantoActivateTimer
0B813 D0 00                     	BNE CheckCollisionWithPlayer_Exit
0B815                           
0B815                           CheckCollisionWithPlayer_NotPhanto:
0B815 C9 45                     	CMP #Enemy_Starman
0B817 D0 00                     	BNE CheckCollisionWithPlayer_NotStarman
0B819                           
0B819 A9 3F                     	LDA #$3F
0B81B 8D E0 04                  	STA StarInvincibilityTimer
0B81E A9 10                     	LDA #Music1_Invincible
0B820 8D 00 06                  	STA MusicQueue1
0B823 A9 00                     	LDA #EnemyState_Inactive
0B825 99 51 00                  	STA EnemyState, Y
0B828                           
0B828                           CheckCollisionWithPlayer_Exit:
0B828 60                        	RTS
0B829                           
0B829                           ; ---------------------------------------------------------------------------
0B829                           
0B829                           CheckCollisionWithPlayer_NotStarman:
0B829 C9 28                     	CMP #Enemy_WhaleSpout
0B82B D0 00                     	BNE CheckCollisionWithPlayer_NotWhaleSpout
0B82D                           
0B82D B9 79 00                  	LDA EnemyVariable, Y
0B830 C9 DC                     	CMP #$DC
0B832 B0 00                     	BCS CheckCollisionWithPlayer_Exit2
0B834                           
0B834 AD E0 04                  	LDA StarInvincibilityTimer
0B837 F0 00                     	BEQ CheckCollisionWithPlayer_NotInvincible
0B839                           
0B839 A9 DC                     	LDA #$DC
0B83B 99 79 00                  	STA EnemyVariable, Y
0B83E A9 00                     	LDA #$00
0B840 99 47 00                  	STA ObjectYVelocity, Y
0B843                           
0B843                           CheckCollisionWithPlayer_Exit2:
0B843 60                        	RTS
0B844                           
0B844                           ; ---------------------------------------------------------------------------
0B844                           
0B844                           CheckCollisionWithPlayer_NotWhaleSpout:
0B844 C9 2C                     	CMP #Enemy_Wart
0B846 D0 00                     	BNE CheckCollisionWithPlayer_NotWart
0B848                           
0B848 B5 B1                     	LDA EnemyArray_B1, X
0B84A D0 F7                     	BNE CheckCollisionWithPlayer_Exit2
0B84C                           
0B84C                           CheckCollisionWithPlayer_NotWart:
0B84C AC E0 04                  	LDY StarInvincibilityTimer
0B84F F0 00                     	BEQ CheckCollisionWithPlayer_NotInvincible
0B851                           
0B851                           	; player is invincible
0B851 A6 12                     	LDX byte_RAM_12
0B853 C9 27                     	CMP #Enemy_AutobombFire
0B855 F0 00                     	BEQ CheckCollisionWithPlayer_Poof
0B857                           
0B857 C9 20                     	CMP #Enemy_Fireball
0B859 D0 00                     	BNE CheckCollisionWithPlayer_KillEnemy
0B85B                           
0B85B                           ; turn into a puff of smoke
0B85B                           CheckCollisionWithPlayer_Poof:
0B85B A9 00                     	LDA #SpriteFlags46E_00
0B85D 9D 6E 04                  	STA EnemyArray_46E, X
0B860 20 B4 98                  	JSR EnemyBehavior_Shell_Destroy
0B863                           
0B863 4C 00 00                  	JMP loc_BANK3_B878
0B866                           
0B866                           ; ---------------------------------------------------------------------------
0B866                           
0B866                           ; die and fall off
0B866                           CheckCollisionWithPlayer_KillEnemy:
0B866 20 49 9E                  	JSR EnemyFindWhichSidePlayerIsOn
0B869                           
0B869 B9 E3 B7                  	LDA InvincibilityKill_VelocityX, Y
0B86C 95 3D                     	STA ObjectXVelocity, X
0B86E A9 E0                     	LDA #$E0
0B870 95 47                     	STA ObjectYVelocity, X
0B872 B5 5B                     	LDA EnemyCollision, X
0B874 09 10                     	ORA #CollisionFlags_Damage
0B876 95 5B                     	STA EnemyCollision, X
0B878                           
0B878                           loc_BANK3_B878:
0B878 A6 ED                     	LDX byte_RAM_ED
0B87A A4 12                     	LDY byte_RAM_12
0B87C 60                        	RTS
0B87D                           
0B87D                           ; ---------------------------------------------------------------------------
0B87D                           
0B87D                           CheckCollisionWithPlayer_NotInvincible:
0B87D A4 12                     	LDY byte_RAM_12
0B87F B9 51 00                  	LDA EnemyState, Y
0B882 C9 04                     	CMP #EnemyState_BombExploding
0B884 F0 00                     	BEQ CheckCollisionWithPlayer_HurtPlayer
0B886                           
0B886                           	; should we damage the player for jumping on top?
0B886 B9 6E 04                  	LDA EnemyArray_46E, Y
0B889 29 01                     	AND #SpriteFlags46E_Damage
0B88B D0 00                     	BNE CheckCollisionWithPlayer_HurtPlayer
0B88D                           
0B88D                           	; let player land on top
0B88D 20 00 00                  	JSR DetermineCollisionFlags
0B890                           
0B890 A5 0F                     	LDA byte_RAM_F
0B892 29 0B                     	AND #$0B
0B894 F0 00                     	BEQ CheckCollisionWithPlayer_StandingOnHead
0B896                           
0B896                           CheckCollisionWithPlayer_HurtPlayer:
0B896 4C 00 00                  	JMP DamagePlayer
0B899                           
0B899                           
0B899                           CheckCollisionWithPlayer_StandingOnHead:
0B899 A9 00                     	LDA #$00
0B89B 85 99                     	STA PlayerInAir
0B89D A6 12                     	LDX byte_RAM_12
0B89F B5 5B                     	LDA EnemyCollision, X
0B8A1 09 20                     	ORA #CollisionFlags_PlayerOnTop
0B8A3 95 5B                     	STA EnemyCollision, X
0B8A5                           
0B8A5                           	; can you even lift
0B8A5 BD 6E 04                  	LDA EnemyArray_46E, X
0B8A8 29 02                     	AND #SpriteFlags46E_Unliftable
0B8AA D0 00                     	BNE CheckCollisionWithPlayer_NoLift
0B8AC                           
0B8AC                           	; check B button
0B8AC 24 F5                     	BIT Player1JoypadPress
0B8AE 50 00                     	BVC CheckCollisionWithPlayer_NoLift
0B8B0                           
0B8B0                           	; bail if we already have an item or are ducking
0B8B0 A5 9C                     	LDA HoldingItem
0B8B2 05 9A                     	ORA PlayerDucking
0B8B4 D0 00                     	BNE CheckCollisionWithPlayer_NoLift
0B8B6                           
0B8B6 95 5B                     	STA EnemyCollision, X
0B8B8 8E 2D 04                  	STX ObjectBeingCarriedIndex
0B8BB 9D 4A 04                  	STA ObjectShakeTimer, X
0B8BE A9 07                     	LDA #$07
0B8C0 95 A8                     	STA ObjectBeingCarriedTimer, X
0B8C2 20 00 00                  	JSR SetPlayerStateLifting
0B8C5                           
0B8C5                           	; leave a flying carpet behind if we're picking up pidgit
0B8C5 B5 90                     	LDA ObjectType, X
0B8C7 C9 12                     	CMP #Enemy_Pidgit
0B8C9 D0 00                     	BNE CheckCollisionWithPlayer_NoLift
0B8CB                           
0B8CB 20 40 A4                  	JSR CreateFlyingCarpet
0B8CE                           
0B8CE                           CheckCollisionWithPlayer_NoLift:
0B8CE A6 ED                     	LDX byte_RAM_ED
0B8D0 60                        	RTS
0B8D1                           
0B8D1                           ; End of function CheckCollisionWithPlayer_StandingOnHead
0B8D1                           
0B8D1                           ; ---------------------------------------------------------------------------
0B8D1                           
0B8D1                           EnemyCollisionBehavior_Object:
0B8D1 A4 12                     	LDY byte_RAM_12
0B8D3 8A                        	TXA
0B8D4 F0 00                     	BEQ loc_BANK3_B905
0B8D6                           
0B8D6 B9 90 00                  	LDA ObjectType, Y
0B8D9 C9 3D                     	CMP #Enemy_Key
0B8DB D0 00                     	BNE loc_BANK3_B8E4
0B8DD                           
0B8DD B9 5B 00                  	LDA EnemyCollision, Y
0B8E0 29 04                     	AND #CollisionFlags_Down
0B8E2 D0 00                     	BNE locret_BANK3_B902
0B8E4                           
0B8E4                           loc_BANK3_B8E4:
0B8E4 B9 2F 04                  	LDA ObjectProjectileTimer, Y
0B8E7 D0 00                     	BNE loc_BANK3_B8FF
0B8E9                           
0B8E9 20 00 00                  	JSR DetermineCollisionFlags
0B8EC                           
0B8EC A5 0F                     	LDA byte_RAM_F
0B8EE 35 6E                     	AND EnemyMovementDirection - 1, X
0B8F0 F0 00                     	BEQ loc_BANK3_B8F8
0B8F2                           
0B8F2 CA                        	DEX
0B8F3 20 B7 9E                  	JSR EnemyBehavior_TurnAround
0B8F6                           
0B8F6 A6 ED                     	LDX byte_RAM_ED
0B8F8                           
0B8F8                           loc_BANK3_B8F8:
0B8F8 20 00 00                  	JSR sub_BANK3_BB31
0B8FB                           
0B8FB C0 00                     	CPY #$00
0B8FD F0 00                     	BEQ locret_BANK3_B902
0B8FF                           
0B8FF                           loc_BANK3_B8FF:
0B8FF 4C 00 00                  	JMP loc_BANK3_B9EA
0B902                           
0B902                           ; ---------------------------------------------------------------------------
0B902                           
0B902                           locret_BANK3_B902:
0B902 60                        	RTS
0B903                           
0B903                           
0B903                           CheckCollisionDirectionTable:
0B903 08                        	.db CollisionFlags_Up ; down
0B904 04                        	.db CollisionFlags_Down ; up
0B905                           
0B905                           
0B905                           ; collision with items that the player can stand on
0B905                           loc_BANK3_B905:
0B905 B9 5B 00                  	LDA EnemyCollision, Y
0B908 09 40                     	ORA #CollisionFlags_PlayerInsideMaybe
0B90A 99 5B 00                  	STA EnemyCollision, Y
0B90D 20 00 00                  	JSR DetermineCollisionFlags
0B910                           
0B910 A5 0F                     	LDA byte_RAM_F
0B912 25 6E                     	AND PlayerMovementDirection
0B914 F0 00                     	BEQ loc_BANK3_B919
0B916                           
0B916 20 00 00                  	JSR PlayerHorizontalCollision
0B919                           
0B919                           loc_BANK3_B919:
0B919 A5 0F                     	LDA byte_RAM_F
0B91B 29 04                     	AND #%00000100
0B91D F0 00                     	BEQ loc_BANK3_B922
0B91F                           
0B91F 20 99 B8                  	JSR CheckCollisionWithPlayer_StandingOnHead
0B922                           
0B922                           loc_BANK3_B922:
0B922 20 00 00                  	JSR sub_BANK3_BB31
0B925                           
0B925 C0 01                     	CPY #$01
0B927 D0 00                     	BNE locret_BANK3_B955
0B929                           
0B929 A4 12                     	LDY byte_RAM_12
0B92B B9 47 00                  	LDA ObjectYVelocity, Y
0B92E F0 00                     	BEQ locret_BANK3_B955
0B930                           
0B930 29 80                     	AND #%10000000
0B932 0A                        	ASL A
0B933 2A                        	ROL A
0B934 A8                        	TAY
0B935 A5 0F                     	LDA byte_RAM_F
0B937 39 03 B9                  	AND CheckCollisionDirectionTable, Y
0B93A F0 00                     	BEQ locret_BANK3_B955
0B93C                           
0B93C                           	; Reverse the y-velocity of the object
0B93C A4 12                     	LDY byte_RAM_12
0B93E B9 47 00                  	LDA ObjectYVelocity, Y
0B941 49 FF                     	EOR #$FF
0B943 18                        	CLC
0B944 69 01                     	ADC #$01
0B946 99 47 00                  	STA ObjectYVelocity, Y
0B949                           
0B949                           	; Force the player into a ducking position
0B949 A9 01                     	LDA #$01
0B94B 85 9A                     	STA PlayerDucking
0B94D A9 04                     	LDA #$04
0B94F 85 C7                     	STA PlayerAnimationFrame
0B951 A9 10                     	LDA #$10
0B953 85 82                     	STA PlayerStateTimer
0B955                           
0B955                           locret_BANK3_B955:
0B955 60                        	RTS
0B956                           
0B956                           EnemyCollisionBehavior_POW:
0B956 8A                        	TXA
0B957 F0 FC                     	BEQ locret_BANK3_B955
0B959 4C 00 00                  	JMP loc_BANK3_B9EA
0B95C                           
0B95C                           EnemyCollisionBehavior_ProjectileItem:
0B95C A4 12                     	LDY byte_RAM_12
0B95E 8A                        	TXA
0B95F                           
0B95F                           loc_BANK3_B95F:
0B95F D0 00                     	BNE loc_BANK3_B993
0B961                           
0B961 B9 51 00                  	LDA EnemyState, Y
0B964                           
0B964                           loc_BANK3_B964:
0B964 C9 04                     	CMP #$04
0B966 D0 00                     	BNE loc_BANK3_B96E
0B968                           
0B968 AD E0 04                  	LDA StarInvincibilityTimer
0B96B F0 00                     	BEQ loc_BANK3_B990
0B96D                           
0B96D                           locret_BANK3_B96D:
0B96D 60                        	RTS
0B96E                           
0B96E                           ; ---------------------------------------------------------------------------
0B96E                           
0B96E                           loc_BANK3_B96E:
0B96E 20 00 00                  	JSR DetermineCollisionFlags
0B971                           
0B971 A5 0F                     	LDA byte_RAM_F
0B973 29 08                     	AND #$08
0B975 F0 00                     	BEQ loc_BANK3_B987
0B977                           
0B977 A5 9C                     	LDA HoldingItem
0B979 D0 F2                     	BNE locret_BANK3_B96D
0B97B                           
0B97B A4 12                     	LDY byte_RAM_12
0B97D 8C 2D 04                  	STY ObjectBeingCarriedIndex
0B980 A9 01                     	LDA #$01
0B982 99 A8 00                  	STA ObjectBeingCarriedTimer, Y
0B985 E6 9C                     	INC HoldingItem
0B987                           
0B987                           loc_BANK3_B987:
0B987 A5 0F                     	LDA byte_RAM_F
0B989 29 04                     	AND #$04
0B98B F0 E0                     	BEQ locret_BANK3_B96D
0B98D                           
0B98D 4C 99 B8                  	JMP CheckCollisionWithPlayer_StandingOnHead
0B990                           
0B990                           ; ---------------------------------------------------------------------------
0B990                           
0B990                           loc_BANK3_B990:
0B990 4C 00 00                  	JMP DamagePlayer
0B993                           
0B993                           ; ---------------------------------------------------------------------------
0B993                           
0B993                           loc_BANK3_B993:
0B993 B5 8F                     	LDA ObjectType - 1, X
0B995 C9 2C                     	CMP #Enemy_Wart
0B997 D0 00                     	BNE loc_BANK3_B9B7
0B999                           
0B999 B5 85                     	LDA ObjectTimer1 - 1, X
0B99B F0 00                     	BEQ locret_BANK3_B9F9
0B99D                           
0B99D A9 00                     	LDA #$00
0B99F 99 51 00                  	STA EnemyState, Y
0B9A2 20 00 00                  	JSR sub_BANK3_BA5D
0B9A5                           
0B9A5 A9 60                     	LDA #$60
0B9A7 9D 5B 04                  	STA ObjectFlashTimer - 1, X
0B9AA 4A                        	LSR A
0B9AB 9D 37 04                  	STA ObjectStunTimer - 1, X
0B9AE BD 64 04                  	LDA EnemyHP - 1, X
0B9B1 D0 00                     	BNE locret_BANK3_B9B6
0B9B3                           
0B9B3 EE FA 04                  	INC ScrollXLock
0B9B6                           
0B9B6                           locret_BANK3_B9B6:
0B9B6 60                        	RTS
0B9B7                           
0B9B7                           ; ---------------------------------------------------------------------------
0B9B7                           
0B9B7                           loc_BANK3_B9B7:
0B9B7 C9 32                     	CMP #$32
0B9B9 B0 FB                     	BCS locret_BANK3_B9B6
0B9BB                           
0B9BB C9 11                     	CMP #$11
0B9BD D0 00                     	BNE loc_BANK3_B9CA
0B9BF                           
0B9BF A9 05                     	LDA #$05
0B9C1 99 51 00                  	STA EnemyState, Y
0B9C4 A9 1E                     	LDA #$1E
0B9C6 99 86 00                  	STA ObjectTimer1, Y
0B9C9 60                        	RTS
0B9CA                           
0B9CA                           ; ---------------------------------------------------------------------------
0B9CA                           
0B9CA                           loc_BANK3_B9CA:
0B9CA B9 51 00                  	LDA EnemyState, Y
0B9CD C9 04                     	CMP #$04
0B9CF F0 00                     	BEQ loc_BANK3_B9EC
0B9D1                           
0B9D1 B9 90 00                  	LDA ObjectType, Y
0B9D4 C9 35                     	CMP #Enemy_Shell
0B9D6 F0 00                     	BEQ loc_BANK3_B9EA
0B9D8                           
0B9D8 A9 E8                     	LDA #$E8
0B9DA 99 47 00                  	STA ObjectYVelocity, Y
0B9DD 86 00                     	STX byte_RAM_0
0B9DF B6 3D                     	LDX ObjectXVelocity, Y
0B9E1 30 00                     	BMI loc_BANK3_B9E5
0B9E3                           
0B9E3 A9 18                     	LDA #$18
0B9E5                           
0B9E5                           loc_BANK3_B9E5:
0B9E5 99 3D 00                  	STA ObjectXVelocity, Y
0B9E8 A6 00                     	LDX byte_RAM_0
0B9EA                           
0B9EA                           loc_BANK3_B9EA:
0B9EA A4 12                     	LDY byte_RAM_12
0B9EC                           
0B9EC                           loc_BANK3_B9EC:
0B9EC 20 00 00                  	JSR sub_BANK3_BA5D
0B9EF                           
0B9EF D0 00                     	BNE locret_BANK3_B9F9
0B9F1                           
0B9F1 B5 3C                     	LDA ObjectXVelocity - 1, X
0B9F3 0A                        	ASL A
0B9F4 76 3C                     	ROR ObjectXVelocity - 1, X
0B9F6 0A                        	ASL A
0B9F7 76 3C                     	ROR ObjectXVelocity - 1, X
0B9F9                           
0B9F9                           locret_BANK3_B9F9:
0B9F9 60                        	RTS
0B9FA                           
0B9FA                           ; ---------------------------------------------------------------------------
0B9FA                           
0B9FA                           DamagePlayer:
0B9FA A5 85                     	LDA DamageInvulnTime
0B9FC D0 00                     	BNE locret_BANK3_BA31
0B9FE                           
0B9FE AD C2 04                  	LDA PlayerHealth
0BA01 38                        	SEC
0BA02 E9 10                     	SBC #$10
0BA04 90 00                     	BCC loc_BANK3_BA32
0BA06                           
0BA06 8D C2 04                  	STA PlayerHealth
0BA09 A0 7F                     	LDY #$7F
0BA0B 84 85                     	STY DamageInvulnTime
0BA0D A0 00                     	LDY #$00
0BA0F 84 46                     	STY PlayerYVelocity
0BA11 84 3C                     	STY PlayerXVelocity
0BA13 C9 10                     	CMP #$10
0BA15 90 00                     	BCC loc_BANK3_BA2C
0BA17                           
0BA17 AD 28 04                  	LDA PlayerScreenX
0BA1A 38                        	SEC
0BA1B ED 29 04                  	SBC SpriteTempScreenX
0BA1E 0A                        	ASL A
0BA1F 0A                        	ASL A
0BA20 85 3C                     	STA PlayerXVelocity
0BA22 A9 C0                     	LDA #$C0
0BA24 A4 46                     	LDY PlayerYVelocity
0BA26 10 00                     	BPL loc_BANK3_BA2A
0BA28                           
0BA28 A9 00                     	LDA #$00
0BA2A                           
0BA2A                           loc_BANK3_BA2A:
0BA2A 85 46                     	STA PlayerYVelocity
0BA2C                           
0BA2C                           loc_BANK3_BA2C:
0BA2C A9 04                     	LDA #DPCM_PlayerHurt
0BA2E 8D 01 06                  	STA DPCMQueue
0BA31                           
0BA31                           locret_BANK3_BA31:
0BA31 60                        	RTS
0BA32                           
0BA32                           ; ---------------------------------------------------------------------------
0BA32                           
0BA32                           loc_BANK3_BA32:
0BA32 8A                        	TXA
0BA33                           
0BA33                           loc_BANK3_BA33:
0BA33 48                        	PHA
0BA34 A6 12                     	LDX byte_RAM_12
0BA36 B5 90                     	LDA ObjectType, X
0BA38 C9 0F                     	CMP #Enemy_BeezoDiving
0BA3A B0 00                     	BCS loc_BANK3_BA48
0BA3C                           
0BA3C 20 49 9E                  	JSR EnemyFindWhichSidePlayerIsOn
0BA3F                           
0BA3F C8                        	INY
0BA40 98                        	TYA
0BA41 D5 6F                     	CMP EnemyMovementDirection, X
0BA43 F0 00                     	BEQ loc_BANK3_BA48
0BA45                           
0BA45 20 B7 9E                  	JSR EnemyBehavior_TurnAround
0BA48                           
0BA48                           loc_BANK3_BA48:
0BA48 68                        	PLA
0BA49 AA                        	TAX
0BA4A A9 C0                     	LDA #$C0
0BA4C 85 46                     	STA PlayerYVelocity
0BA4E                           
0BA4E                           loc_BANK3_BA4E:
0BA4E A9 20                     	LDA #$20
0BA50 85 82                     	STA PlayerStateTimer
0BA52 A4 12                     	LDY byte_RAM_12
0BA54 30 00                     	BMI loc_BANK3_BA5A
0BA56                           
0BA56 4A                        	LSR A
0BA57 99 38 04                  	STA ObjectStunTimer, Y
0BA5A                           
0BA5A                           loc_BANK3_BA5A:
0BA5A 4C 00 00                  	JMP KillPlayer
0BA5D                           
0BA5D                           ; =============== S U B R O U T I N E =======================================
0BA5D                           
0BA5D                           ; Damage enemy
0BA5D                           sub_BANK3_BA5D:
0BA5D BD 52 04                  	LDA ObjectTimer2 - 1, X
0BA60 1D 5B 04                  	ORA ObjectFlashTimer - 1, X
0BA63 D0 00                     	BNE locret_BANK3_BA94
0BA65                           
0BA65 BD 6D 04                  	LDA EnemyArray_46E - 1, X
0BA68 29 08                     	AND #Enemy_Ostro
0BA6A F0 00                     	BEQ EnemyTakeDamage
0BA6C                           
0BA6C 20 00 00                  	JSR PlayBossHurtSound
0BA6F                           
0BA6F                           EnemyTakeDamage:
0BA6F DE 64 04                  	DEC EnemyHP - 1, X ; Subtract hit point
0BA72 30 00                     	BMI EnemyKnockout
0BA74                           
0BA74 A9 21                     	LDA #$21 ; Flash
0BA76 9D 5B 04                  	STA ObjectFlashTimer - 1, X
0BA79 4A                        	LSR A
0BA7A                           
0BA7A                           loc_BANK3_BA7A:
0BA7A 9D 37 04                  	STA ObjectStunTimer - 1, X
0BA7D                           
0BA7D                           ; End of function sub_BANK3_BA5D
0BA7D                           
0BA7D                           PlayBossHurtSound:
0BA7D A9 40                     	LDA #DPCM_BossHurt
0BA7F 8D 01 06                  	STA DPCMQueue
0BA82 60                        	RTS
0BA83                           
0BA83                           ; ---------------------------------------------------------------------------
0BA83                           
0BA83                           EnemyKnockout:
0BA83 B5 5A                     	LDA EnemyCollision - 1, X
0BA85 09 10                     	ORA #CollisionFlags_Damage
0BA87 95 5A                     	STA EnemyCollision - 1, X
0BA89 A9 E0                     	LDA #$E0
0BA8B 95 46                     	STA ObjectYVelocity - 1, X
0BA8D B9 3D 00                  	LDA ObjectXVelocity, Y
0BA90 95 3C                     	STA ObjectXVelocity - 1, X
0BA92 A9 00                     	LDA #$00
0BA94                           
0BA94                           locret_BANK3_BA94:
0BA94 60                        	RTS
0BA95                           
0BA95                           ;
0BA95                           ; Determines the collision flags for two objects
0BA95                           ;
0BA95                           ; Input:
0BA95                           ;   RAM_12 = main object
0BA95                           ;   X = collision object (usually player?)
0BA95                           ; Output:
0BA95                           ;   byte_RAM_F = collision flags
0BA95                           ;
0BA95                           DetermineCollisionFlags:
0BA95 A9 00                     	LDA #$00
0BA97 85 0F                     	STA byte_RAM_F
0BA99 A4 12                     	LDY byte_RAM_12 ; stash Y
0BA9B AD 27 04                  	LDA CollisionResultY
0BA9E C9 F6                     	CMP #$F6
0BAA0 B0 00                     	BCS DetermineCollisionFlags_Y
0BAA2                           
0BAA2 B9 29 00                  	LDA ObjectXLo, Y
0BAA5 A0 02                     	LDY #CollisionFlags_Left
0BAA7 D5 28                     	CMP ObjectXLo - 1, X
0BAA9 30 00                     	BMI DetermineCollisionFlags_SetFlagsX
0BAAB                           
0BAAB A0 01                     	LDY #CollisionFlags_Right
0BAAD                           
0BAAD                           DetermineCollisionFlags_SetFlagsX:
0BAAD 84 0F                     	STY byte_RAM_F
0BAAF 98                        	TYA
0BAB0 35 6E                     	AND EnemyMovementDirection - 1, X
0BAB2 F0 00                     	BEQ DetermineCollisionFlags_ExitX
0BAB4                           
0BAB4 A4 12                     	LDY byte_RAM_12 ; restore Y
0BAB6 B9 A4 04                  	LDA ObjectNonSticky, Y
0BAB9 D0 00                     	BNE DetermineCollisionFlags_ExitX
0BABB                           
0BABB                           	; @TODO: Looks like a way to make objects move together horizontally
0BABB B9 3D 00                  	LDA ObjectXVelocity, Y
0BABE 9D CB 04                  	STA ObjectXAcceleration - 1, X
0BAC1                           
0BAC1                           DetermineCollisionFlags_ExitX:
0BAC1 60                        	RTS
0BAC2                           
0BAC2                           
0BAC2                           DetermineCollisionFlags_Y:
0BAC2 B9 33 00                  	LDA ObjectYLo, Y
0BAC5 E0 01                     	CPX #$01
0BAC7 B0 00                     	BCS loc_BANK3_BAD1
0BAC9                           
0BAC9                           IFNDEF PLAYER_HITBOX
0BAC9 48                        	PHA
0BACA A4 9A                     	LDY PlayerDucking
0BACC 68                        	PLA
0BACD 38                        	SEC
0BACE F9 00 00                  	SBC byte_BANK3_BB2F, Y
0BAD1                           ELSE
0BAD1                           	LDY PlayerHitbox
0BAD1                           	SEC
0BAD1                           	SBC #$21
0BAD1                           	CLC
0BAD1                           	ADC ObjectCollisionHitboxHeight, Y
0BAD1                           ENDIF
0BAD1                           
0BAD1                           loc_BANK3_BAD1:
0BAD1 D5 32                     	CMP ObjectYLo - 1, X
0BAD3 30 00                     	BMI loc_BANK3_BB02
0BAD5                           
0BAD5 B5 46                     	LDA ObjectYVelocity - 1, X
0BAD7 30 00                     	BMI DetermineCollisionFlags_ExitY
0BAD9                           
0BAD9 A4 12                     	LDY byte_RAM_12
0BADB B9 A4 04                  	LDA ObjectNonSticky, Y
0BADE D0 00                     	BNE loc_BANK3_BAE6
0BAE0                           
0BAE0 B9 3D 00                  	LDA ObjectXVelocity, Y
0BAE3 9D CB 04                  	STA ObjectXAcceleration - 1, X
0BAE6                           
0BAE6                           loc_BANK3_BAE6:
0BAE6 A0 00                     	LDY #$00
0BAE8 EE 27 04                  	INC CollisionResultY
0BAEB EE 27 04                  	INC CollisionResultY
0BAEE 10 00                     	BPL loc_BANK3_BAF1
0BAF0                           
0BAF0 88                        	DEY
0BAF1                           
0BAF1                           loc_BANK3_BAF1:
0BAF1 AD 27 04                  	LDA CollisionResultY
0BAF4 18                        	CLC
0BAF5 75 32                     	ADC ObjectYLo - 1, X
0BAF7 95 32                     	STA ObjectYLo - 1, X
0BAF9 98                        	TYA
0BAFA 75 1E                     	ADC ObjectYHi - 1, X
0BAFC 95 1E                     	STA ObjectYHi - 1, X
0BAFE A0 04                     	LDY #CollisionFlags_Down
0BB00 D0 00                     	BNE loc_BANK3_BB13
0BB02                           
0BB02                           loc_BANK3_BB02:
0BB02 B5 46                     	LDA ObjectYVelocity - 1, X
0BB04 F0 00                     	BEQ loc_BANK3_BB11
0BB06                           
0BB06 10 00                     	BPL DetermineCollisionFlags_ExitY
0BB08                           
0BB08 A4 12                     	LDY byte_RAM_12
0BB0A B9 90 00                  	LDA ObjectType, Y
0BB0D C9 36                     	CMP #Enemy_Coin
0BB0F F0 00                     	BEQ DetermineCollisionFlags_ExitY
0BB11                           
0BB11                           loc_BANK3_BB11:
0BB11 A0 08                     	LDY #CollisionFlags_Up
0BB13                           
0BB13                           loc_BANK3_BB13:
0BB13 84 0F                     	STY byte_RAM_F
0BB15 A4 12                     	LDY byte_RAM_12
0BB17 B9 A4 04                  	LDA ObjectNonSticky, Y
0BB1A D0 00                     	BNE loc_BANK3_BB22
0BB1C                           
0BB1C                           	; @TODO: Looks like a way to make objects move together vertically
0BB1C B9 47 00                  	LDA ObjectYVelocity, Y
0BB1F 9D D5 04                  	STA ObjectYAcceleration - 1, X
0BB22                           
0BB22                           loc_BANK3_BB22:
0BB22 A9 00                     	LDA #$00
0BB24 95 46                     	STA ObjectYVelocity - 1, X
0BB26 B9 12 04                  	LDA ObjectYSubpixel, Y
0BB29 9D 11 04                  	STA ObjectYSubpixel - 1, X
0BB2C F6 9E                     	INC ObjectAnimationTimer - 1, X
0BB2E                           
0BB2E                           DetermineCollisionFlags_ExitY:
0BB2E 60                        	RTS
0BB2F                           
0BB2F                           
0BB2F                           byte_BANK3_BB2F:
0BB2F 0B                        	.db $0B
0BB30 10                        	.db $10
0BB31                           
0BB31                           ; =============== S U B R O U T I N E =======================================
0BB31                           
0BB31                           sub_BANK3_BB31:
0BB31 A0 00                     	LDY #$00
0BB33 B5 5A                     	LDA EnemyCollision - 1, X
0BB35 05 0F                     	ORA byte_RAM_F
0BB37 29 0C                     	AND #$0C
0BB39 C9 0C                     	CMP #$0C
0BB3B F0 00                     	BEQ loc_BANK3_BB48
0BB3D                           
0BB3D B5 5A                     	LDA EnemyCollision - 1, X
0BB3F 05 0F                     	ORA byte_RAM_F
0BB41 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
0BB43 C9 03                     	CMP #CollisionFlags_Right | CollisionFlags_Left
0BB45 D0 00                     	BNE locret_BANK3_BB49
0BB47                           
0BB47 C8                        	INY
0BB48                           
0BB48                           loc_BANK3_BB48:
0BB48 C8                        	INY
0BB49                           
0BB49                           locret_BANK3_BB49:
0BB49 60                        	RTS
0BB4A                           
0BB4A                           ; End of function sub_BANK3_BB31
0BB4A                           
0BB4A                           ; ---------------------------------------------------------------------------
0BB4A                           _unused_BANK3_BB4A:
0BB4A FF                        	.db $FF ; May not be used, but wasn't marked as data
0BB4B FF                        	.db $FF
0BB4C FF                        	.db $FF
0BB4D FF                        	.db $FF
0BB4E FF                        	.db $FF
0BB4F FF                        	.db $FF
0BB50                           
0BB50                           ; Hoopstar will climb up and down any of these tiles
0BB50                           HoopstarClimbTiles:
0BB50 C2                        	.db BackgroundTile_Vine
0BB51 D4                        	.db BackgroundTile_VineStandable
0BB52 C3                        	.db BackgroundTile_VineBottom
0BB53 C4                        	.db BackgroundTile_ClimbableSky
0BB54 07                        	.db BackgroundTile_Chain
0BB55 80                        	.db BackgroundTile_Ladder
0BB56 81                        	.db BackgroundTile_LadderShadow
0BB57 94                        	.db BackgroundTile_LadderStandable
0BB58 95                        	.db BackgroundTile_LadderStandableShadow
0BB59 17                        	.db BackgroundTile_ChainStandable
0BB5A                           
0BB5A                           
0BB5A                           EnemyBehavior_Hoopstar_CheckBackgroundTile:
0BB5A 20 00 00                  	JSR sub_BANK3_BB87
0BB5D                           
0BB5D A5 00                     	LDA byte_RAM_0
0BB5F                           
0BB5F A0 09                     	LDY #$09
0BB61                           EnemyBehavior_Hoopstar_CheckBackgroundTile_Loop:
0BB61 D9 50 BB                  	CMP HoopstarClimbTiles, Y
0BB64 F0 00                     	BEQ EnemyBehavior_Hoopstar_CheckBackgroundTile_Exit
0BB66 88                        	DEY
0BB67 10 F8                     	BPL EnemyBehavior_Hoopstar_CheckBackgroundTile_Loop
0BB69                           
0BB69 18                        	CLC
0BB6A                           
0BB6A                           EnemyBehavior_Hoopstar_CheckBackgroundTile_Exit:
0BB6A 60                        	RTS
0BB6B                           
0BB6B                           
0BB6B                           ItemCarryYOffsets:
0BB6B F9                        	.db $F9
0BB6C FF                        	.db $FF
0BB6D 00                        	.db $00
0BB6E 08                        	.db $08
0BB6F 0C                        	.db $0C
0BB70 18                        	.db $18
0BB71 1A                        	.db $1A
0BB72 01                        	.db $01
0BB73 06                        	.db $06
0BB74 0A                        	.db $0A
0BB75 0C                        	.db $0C
0BB76 18                        	.db $18
0BB77 1A                        	.db $1A
0BB78 1C                        	.db $1C
0BB79 FF                        	.db $FF
0BB7A FF                        	.db $FF
0BB7B 00                        	.db $00
0BB7C 00                        	.db $00
0BB7D 00                        	.db $00
0BB7E 00                        	.db $00
0BB7F 00                        	.db $00
0BB80 00                        	.db $00
0BB81 00                        	.db $00
0BB82 00                        	.db $00
0BB83 00                        	.db $00
0BB84 00                        	.db $00
0BB85 00                        	.db $00
0BB86 00                        	.db $00
0BB87                           
0BB87                           
0BB87                           ; =============== S U B R O U T I N E =======================================
0BB87                           
0BB87                           ;
0BB87                           ; Seems to determine what kind of tile the object has collided with?
0BB87                           ;
0BB87                           ; Duplicate of subroutine in bank 0: sub_BANK0_924F
0BB87                           ;
0BB87                           ; Input
0BB87                           ;   X = object index (0 = player)
0BB87                           ;   Y = bounding box offset?
0BB87                           ; Output
0BB87                           ;   byte_RAM_0 = tile ID
0BB87                           ;
0BB87                           sub_BANK3_BB87:
0BB87 8A                        	TXA
0BB88 48                        	PHA
0BB89                           
0BB89 A9 00                     	LDA #$00
0BB8B 85 00                     	STA byte_RAM_0
0BB8D 85 01                     	STA byte_RAM_1
0BB8F B9 00 00                  	LDA VerticalTileCollisionHitboxX, Y
0BB92 10 00                     	BPL loc_BANK3_BB96
0BB94                           
0BB94 C6 00                     	DEC byte_RAM_0
0BB96                           
0BB96                           loc_BANK3_BB96:
0BB96 18                        	CLC
0BB97 75 28                     	ADC ObjectXLo - 1, X
0BB99 29 F0                     	AND #$F0
0BB9B 85 05                     	STA byte_RAM_5
0BB9D 08                        	PHP
0BB9E 4A                        	LSR A
0BB9F 4A                        	LSR A
0BBA0 4A                        	LSR A
0BBA1 4A                        	LSR A
0BBA2 85 E5                     	STA byte_RAM_E5
0BBA4 28                        	PLP
0BBA5 B5 14                     	LDA ObjectXHi - 1, X
0BBA7 65 00                     	ADC byte_RAM_0
0BBA9 85 02                     	STA byte_RAM_2
0BBAB 85 03                     	STA byte_RAM_3
0BBAD A5 EC                     	LDA IsHorizontalLevel
0BBAF D0 00                     	BNE loc_BANK3_BBB5
0BBB1                           
0BBB1 85 02                     	STA byte_RAM_2
0BBB3 85 03                     	STA byte_RAM_3
0BBB5                           
0BBB5                           loc_BANK3_BBB5:
0BBB5 B9 00 00                  	LDA VerticalTileCollisionHitboxY, Y
0BBB8 10 00                     	BPL loc_BANK3_BBBC
0BBBA                           
0BBBA C6 01                     	DEC byte_RAM_1
0BBBC                           
0BBBC                           loc_BANK3_BBBC:
0BBBC 18                        	CLC
0BBBD 75 32                     	ADC ObjectYLo - 1, X
0BBBF 29 F0                     	AND #$F0
0BBC1 85 06                     	STA byte_RAM_6
0BBC3 85 E6                     	STA byte_RAM_E6
0BBC5 B5 1E                     	LDA ObjectYHi - 1, X
0BBC7 65 01                     	ADC byte_RAM_1
0BBC9 85 01                     	STA byte_RAM_1
0BBCB 85 04                     	STA byte_RAM_4
0BBCD 20 00 00                  	JSR sub_BANK3_BC2E
0BBD0                           
0BBD0 90 00                     	BCC loc_BANK3_BBD6
0BBD2                           
0BBD2 A9 00                     	LDA #$00
0BBD4 F0 00                     	BEQ loc_BANK3_BBDD
0BBD6                           
0BBD6                           loc_BANK3_BBD6:
0BBD6 20 00 00                  	JSR SetTileOffsetAndAreaPageAddr
0BBD9                           
0BBD9 A4 E7                     	LDY byte_RAM_E7
0BBDB B1 01                     	LDA (byte_RAM_1), Y
0BBDD                           
0BBDD                           loc_BANK3_BBDD:
0BBDD 85 00                     	STA byte_RAM_0
0BBDF 68                        	PLA
0BBE0 AA                        	TAX
0BBE1 60                        	RTS
0BBE2                           
0BBE2                           
0BBE2                           ;
0BBE2                           ; Check whether a tile should use the given collision handler type
0BBE2                           ;
0BBE2                           ; Input
0BBE2                           ;   A = tile ID
0BBE2                           ;   Y = collision handler type (0 = solid for mushroom blocks, 1 = jumpthrough, 2 = solid)
0BBE2                           ; Output
0BBE2                           ;   C = whether or not collision type Y is relevant
0BBE2                           ;
0BBE2                           CheckTileUsesCollisionType_Bank3:
0BBE2 48                        	PHA ; stash tile ID for later
0BBE3                           
0BBE3                           	; determine which tile table to use (0-3)
0BBE3 29 C0                     	AND #$C0
0BBE5 0A                        	ASL A
0BBE6 2A                        	ROL A
0BBE7 2A                        	ROL A
0BBE8                           
0BBE8                           	; add the offset for the type of collision we're checking
0BBE8 79 00 00                  	ADC TileGroupTable_Bank3, Y
0BBEB A8                        	TAY
0BBEC                           
0BBEC                           	; check which side of the tile ID pivot we're on
0BBEC 68                        	PLA
0BBED D9 00 00                  	CMP TileSolidnessTable, Y
0BBF0 60                        	RTS
0BBF1                           
0BBF1                           
0BBF1                           ;
0BBF1                           ; These map the two high bits of a tile to offets in TileSolidnessTable
0BBF1                           ;
0BBF1                           TileGroupTable_Bank3:
0BBF1 00                        	.db $00 ; solid to mushroom blocks
0BBF2 04                        	.db $04 ; solid on top
0BBF3 08                        	.db $08 ; solid on all sides
0BBF4                           
0BBF4                           
0BBF4                           DoorHandling_GoThroughDoor_Bank3:
0BBF4 EE BD 04                  	INC DoorAnimationTimer
0BBF7 EE 1B 04                  	INC PlayerLock
0BBFA 20 00 00                  	JSR SnapPlayerToTile_Bank3
0BBFD                           
0BBFD A9 01                     	LDA #DPCM_DoorOpenBombBom
0BBFF 8D 01 06                  	STA DPCMQueue
0BC02 60                        	RTS
0BC03                           
0BC03                           
0BC03                           ;
0BC03                           ; Checks horizontal collision with the player and stops them if necessary
0BC03                           ;
0BC03                           PlayerHorizontalCollision:
0BC03 A2 00                     	LDX #$00
0BC05 A4 6E                     	LDY PlayerMovementDirection
0BC07 A5 3C                     	LDA PlayerXVelocity
0BC09 59 00 00                  	EOR PlayerCollisionResultTable - 1, Y
0BC0C 10 00                     	BPL loc_BANK3_BC10
0BC0E                           
0BC0E 86 3C                     	STX PlayerXVelocity
0BC10                           
0BC10                           loc_BANK3_BC10:
0BC10 AD CB 04                  	LDA PlayerXAcceleration
0BC13 59 00 00                  	EOR PlayerCollisionResultTable - 1, Y
0BC16 10 00                     	BPL loc_BANK3_BC1B
0BC18                           
0BC18 8E CB 04                  	STX PlayerXAcceleration
0BC1B                           
0BC1B                           loc_BANK3_BC1B:
0BC1B 8E 07 04                  	STX PlayerXSubpixel
0BC1E                           
0BC1E                           locret_BANK3_BC1E:
0BC1E 60                        	RTS
0BC1F                           
0BC1F                           
0BC1F                           ;
0BC1F                           ; Set the player state to lifting and Kick off the lifting animation
0BC1F                           ;
0BC1F                           SetPlayerStateLifting:
0BC1F A9 02                     	LDA #PlayerState_Lifting
0BC21 85 50                     	STA PlayerState
0BC23 A9 06                     	LDA #$06
0BC25 85 82                     	STA PlayerStateTimer
0BC27 A9 08                     	LDA #$08
0BC29 85 C7                     	STA PlayerAnimationFrame
0BC2B E6 9C                     	INC HoldingItem
0BC2D 60                        	RTS
0BC2E                           
0BC2E                           
0BC2E                           ;
0BC2E                           ; @TODO: Figure out what this does exactly
0BC2E                           ;
0BC2E                           sub_BANK3_BC2E:
0BC2E A4 01                     	LDY byte_RAM_1
0BC30 A5 E6                     	LDA byte_RAM_E6
0BC32 20 00 00                  	JSR sub_BANK3_BD6B
0BC35                           
0BC35 84 01                     	STY byte_RAM_1
0BC37 85 E6                     	STA byte_RAM_E6
0BC39 A4 EC                     	LDY IsHorizontalLevel
0BC3B B9 01 00                  	LDA byte_RAM_1, Y
0BC3E 85 E8                     	STA byte_RAM_E8
0BC40 A5 02                     	LDA byte_RAM_2
0BC42 D9 00 00                  	CMP byte_BANK3_BC4D + 1, Y
0BC45 B0 00                     	BCS locret_BANK3_BC4C
0BC47                           
0BC47 A5 01                     	LDA byte_RAM_1
0BC49 D9 00 00                  	CMP byte_BANK3_BC4D, Y
0BC4C                           
0BC4C                           locret_BANK3_BC4C:
0BC4C 60                        	RTS
0BC4D                           
0BC4D                           
0BC4D                           byte_BANK3_BC4D:
0BC4D 0A                        	.db $0A
0BC4E 01                        	.db $01
0BC4F 0B                        	.db $0B
0BC50                           
0BC50                           
0BC50                           ;
0BC50                           ; Replaces a tile when something is thrown
0BC50                           ;
0BC50                           ; Input
0BC50                           ;   A = target tile
0BC50                           ;   X = enemy index of object being thrown
0BC50                           ;
0BC50                           ReplaceTile:
0BC50 48                        	PHA
0BC51 B5 29                     	LDA ObjectXLo, X
0BC53 18                        	CLC
0BC54 69 08                     	ADC #$08
0BC56 08                        	PHP
0BC57 4A                        	LSR A
0BC58 4A                        	LSR A
0BC59 4A                        	LSR A
0BC5A 4A                        	LSR A
0BC5B 85 E5                     	STA byte_RAM_E5
0BC5D 28                        	PLP
0BC5E B5 15                     	LDA ObjectXHi, X
0BC60 A4 EC                     	LDY IsHorizontalLevel
0BC62 F0 00                     	BEQ ReplaceTile_StoreXHi
0BC64                           
0BC64 69 00                     	ADC #$00
0BC66                           
0BC66                           ReplaceTile_StoreXHi:
0BC66 85 02                     	STA byte_RAM_2
0BC68 B5 33                     	LDA ObjectYLo, X
0BC6A 18                        	CLC
0BC6B 69 08                     	ADC #$08
0BC6D 29 F0                     	AND #$F0
0BC6F 85 E6                     	STA byte_RAM_E6
0BC71 B5 1F                     	LDA ObjectYHi, X
0BC73 69 00                     	ADC #$00
0BC75 85 01                     	STA byte_RAM_1
0BC77 20 2E BC                  	JSR sub_BANK3_BC2E
0BC7A                           
0BC7A 68                        	PLA
0BC7B B0 A1                     	BCS locret_BANK3_BC1E
0BC7D                           
0BC7D 86 03                     	STX byte_RAM_3
0BC7F 48                        	PHA
0BC80 20 00 00                  	JSR SetTileOffsetAndAreaPageAddr
0BC83                           
0BC83 68                        	PLA
0BC84 A4 E7                     	LDY byte_RAM_E7
0BC86 91 01                     	STA (byte_RAM_1), Y
0BC88 48                        	PHA
0BC89 AE 00 03                  	LDX byte_RAM_300
0BC8C A9 00                     	LDA #$00
0BC8E 9D 01 03                  	STA PPUBuffer_301, X
0BC91 98                        	TYA
0BC92 29 F0                     	AND #$F0
0BC94 0A                        	ASL A
0BC95 3E 01 03                  	ROL PPUBuffer_301, X
0BC98 0A                        	ASL A
0BC99 3E 01 03                  	ROL PPUBuffer_301, X
0BC9C 9D 02 03                  	STA PPUBuffer_301 + 1, X
0BC9F 98                        	TYA
0BCA0 29 0F                     	AND #$0F
0BCA2 0A                        	ASL A
0BCA3                           
0BCA3 7D 02 03                  	ADC PPUBuffer_301 + 1, X
0BCA6 9D 02 03                  	STA PPUBuffer_301 + 1, X
0BCA9 18                        	CLC
0BCAA 69 20                     	ADC #$20
0BCAC 9D 07 03                  	STA PPUBuffer_301 + 6, X
0BCAF A5 EC                     	LDA IsHorizontalLevel
0BCB1 0A                        	ASL A
0BCB2 A8                        	TAY
0BCB3 A5 01                     	LDA byte_RAM_1
0BCB5 29 10                     	AND #$10
0BCB7 D0 00                     	BNE loc_BANK3_BCBA
0BCB9                           
0BCB9 C8                        	INY
0BCBA                           
0BCBA                           loc_BANK3_BCBA:
0BCBA B9 00 00                  	LDA PPUNametableHi, Y
0BCBD 18                        	CLC
0BCBE 7D 01 03                  	ADC PPUBuffer_301, X
0BCC1 9D 01 03                  	STA PPUBuffer_301, X
0BCC4 9D 06 03                  	STA PPUBuffer_301 + 5, X
0BCC7 A9 02                     	LDA #$02
0BCC9 9D 03 03                  	STA PPUBuffer_301 + 2, X
0BCCC 9D 08 03                  	STA PPUBuffer_301 + 7, X
0BCCF 68                        	PLA
0BCD0 48                        	PHA
0BCD1 29 C0                     	AND #$C0
0BCD3 0A                        	ASL A
0BCD4 2A                        	ROL A
0BCD5 2A                        	ROL A
0BCD6 A8                        	TAY
0BCD7 B9 00 00                  	LDA TileQuadPointersLo, Y
0BCDA 85 00                     	STA byte_RAM_0
0BCDC B9 00 00                  	LDA TileQuadPointersHi, Y
0BCDF 85 01                     	STA byte_RAM_1
0BCE1 68                        	PLA
0BCE2 0A                        	ASL A
0BCE3 0A                        	ASL A
0BCE4 A8                        	TAY
0BCE5 B1 00                     	LDA (byte_RAM_0), Y
0BCE7 9D 04 03                  	STA PPUBuffer_301 + 3, X
0BCEA C8                        	INY
0BCEB B1 00                     	LDA (byte_RAM_0), Y
0BCED 9D 05 03                  	STA PPUBuffer_301 + 4, X
0BCF0 C8                        	INY
0BCF1 B1 00                     	LDA (byte_RAM_0), Y
0BCF3 9D 09 03                  	STA PPUBuffer_301 + 8, X
0BCF6 C8                        	INY
0BCF7 B1 00                     	LDA (byte_RAM_0), Y
0BCF9 9D 0A 03                  	STA PPUBuffer_301 + 9, X
0BCFC A9 00                     	LDA #$00
0BCFE 9D 0B 03                  	STA PPUBuffer_301 + 10, X
0BD01 8A                        	TXA
0BD02 18                        	CLC
0BD03 69 0A                     	ADC #$A
0BD05 8D 00 03                  	STA byte_RAM_300
0BD08 A6 03                     	LDX byte_RAM_3
0BD0A 60                        	RTS
0BD0B                           
0BD0B                           
0BD0B                           ; Another byte of PPU high addresses for horiz/vert levels
0BD0B                           PPUNametableHi:
0BD0B 20                        	.db $20 ; vertical, nametable A
0BD0C 28                        	.db $28 ; vertical, nametable B
0BD0D 20                        	.db $20 ; horizontal, nametable A
0BD0E 24                        	.db $24 ; horizontal, nametable B
0BD0F                           
0BD0F                           
0BD0F                           StashPlayerPosition:
0BD0F AD 28 06                  	LDA InSubspaceOrJar
0BD12 D0 00                     	BNE StashPlayerPosition_Exit
0BD14                           
0BD14 A5 14                     	LDA PlayerXHi
0BD16 8D 0F 05                  	STA PlayerXHi_Backup
0BD19 A5 28                     	LDA PlayerXLo
0BD1B 8D 11 05                  	STA PlayerXLo_Backup
0BD1E A5 1E                     	LDA PlayerYHi
0BD20 8D 10 05                  	STA PlayerYHi_Backup
0BD23 A5 32                     	LDA PlayerYLo
0BD25 8D 12 05                  	STA PlayerYLo_Backup
0BD28                           
0BD28                           StashPlayerPosition_Exit:
0BD28 60                        	RTS
0BD29                           
0BD29                           
0BD29                           ;
0BD29                           ; Updates the area page and tile placement offset @TODO
0BD29                           ;
0BD29                           ; Input
0BD29                           ;   byte_RAM_E8 = area page
0BD29                           ;   byte_RAM_E5 = tile placement offset shift
0BD29                           ;   byte_RAM_E6 = previous tile placement offset
0BD29                           ; Output
0BD29                           ;   RAM_1 = low byte of decoded level data RAM
0BD29                           ;   RAM_2 = low byte of decoded level data RAM
0BD29                           ;   byte_RAM_E7 = target tile placement offset
0BD29                           ;
0BD29                           SetTileOffsetAndAreaPageAddr:
0BD29 A6 E8                     	LDX byte_RAM_E8
0BD2B 20 00 00                  	JSR SetAreaPageAddr
0BD2E                           
0BD2E A5 E6                     	LDA byte_RAM_E6
0BD30 18                        	CLC
0BD31 65 E5                     	ADC byte_RAM_E5
0BD33 85 E7                     	STA byte_RAM_E7
0BD35 60                        	RTS
0BD36                           
0BD36                           
0BD36                           DecodedLevelPageStartLo:
0BD36 00                        	.db <DecodedLevelData
0BD37 F0                        	.db <(DecodedLevelData+$00F0)
0BD38 E0                        	.db <(DecodedLevelData+$01E0)
0BD39 D0                        	.db <(DecodedLevelData+$02D0)
0BD3A C0                        	.db <(DecodedLevelData+$03C0)
0BD3B B0                        	.db <(DecodedLevelData+$04B0)
0BD3C A0                        	.db <(DecodedLevelData+$05A0)
0BD3D 90                        	.db <(DecodedLevelData+$0690)
0BD3E 80                        	.db <(DecodedLevelData+$0780)
0BD3F 70                        	.db <(DecodedLevelData+$0870)
0BD40 00                        	.db <(SubAreaTileLayout)
0BD41                           
0BD41                           DecodedLevelPageStartHi:
0BD41 60                        	.db >DecodedLevelData
0BD42 60                        	.db >(DecodedLevelData+$00F0)
0BD43 61                        	.db >(DecodedLevelData+$01E0)
0BD44 62                        	.db >(DecodedLevelData+$02D0)
0BD45 63                        	.db >(DecodedLevelData+$03C0)
0BD46 64                        	.db >(DecodedLevelData+$04B0)
0BD47 65                        	.db >(DecodedLevelData+$05A0)
0BD48 66                        	.db >(DecodedLevelData+$0690)
0BD49 67                        	.db >(DecodedLevelData+$0780)
0BD4A 68                        	.db >(DecodedLevelData+$0870)
0BD4B 07                        	.db >(SubAreaTileLayout)
0BD4C                           
0BD4C                           
0BD4C                           
0BD4C                           ;
0BD4C                           ; Updates the area page that we're reading tiles from
0BD4C                           ;
0BD4C                           ; Input
0BD4C                           ;   X = area page
0BD4C                           ; Output
0BD4C                           ;   byte_RAM_1 = low byte of decoded level data RAM
0BD4C                           ;   byte_RAM_2 = low byte of decoded level data RAM
0BD4C                           ;
0BD4C                           SetAreaPageAddr:
0BD4C BD 36 BD                  	LDA DecodedLevelPageStartLo, X
0BD4F 85 01                     	STA byte_RAM_1
0BD51 BD 41 BD                  	LDA DecodedLevelPageStartHi, X
0BD54 85 02                     	STA byte_RAM_2
0BD56 60                        	RTS
0BD57                           
0BD57                           
0BD57                           PlayerCollisionResultTable:
0BD57 80                        	.db CollisionFlags_80
0BD58 00                        	.db CollisionFlags_00
0BD59                           
0BD59                           ; =============== S U B R O U T I N E =======================================
0BD59                           
0BD59                           ;
0BD59                           ; Note: Door animation code copied from Bank 0
0BD59                           ;
0BD59                           ; Snaps the player to the closest tile (for entering doors and jars)
0BD59                           ;
0BD59                           SnapPlayerToTile_Bank3:
0BD59 A5 28                     	LDA PlayerXLo
0BD5B 18                        	CLC
0BD5C 69 08                     	ADC #$08
0BD5E 29 F0                     	AND #$F0
0BD60 85 28                     	STA PlayerXLo
0BD62 90 00                     	BCC SnapPlayerToTile_Exit_Bank3
0BD64                           
0BD64 A5 EC                     	LDA IsHorizontalLevel
0BD66 F0 00                     	BEQ SnapPlayerToTile_Exit_Bank3
0BD68                           
0BD68 E6 14                     	INC PlayerXHi
0BD6A                           
0BD6A                           SnapPlayerToTile_Exit_Bank3:
0BD6A 60                        	RTS
0BD6B                           
0BD6B                           
0BD6B                           ; =============== S U B R O U T I N E =======================================
0BD6B                           
0BD6B                           sub_BANK3_BD6B:
0BD6B 85 0F                     	STA byte_RAM_F
0BD6D 98                        	TYA
0BD6E 30 00                     	BMI locret_BANK3_BD81
0BD70                           
0BD70 0A                        	ASL A
0BD71 0A                        	ASL A
0BD72 0A                        	ASL A
0BD73 0A                        	ASL A
0BD74 18                        	CLC
0BD75 65 0F                     	ADC byte_RAM_F
0BD77 B0 00                     	BCS loc_BANK3_BD7D
0BD79                           
0BD79 C9 F0                     	CMP #$F0
0BD7B 90 00                     	BCC locret_BANK3_BD81
0BD7D                           
0BD7D                           loc_BANK3_BD7D:
0BD7D 18                        	CLC
0BD7E 69 10                     	ADC #$10
0BD80 C8                        	INY
0BD81                           
0BD81                           locret_BANK3_BD81:
0BD81 60                        	RTS
0BD82                           
0BD82                           ; End of function sub_BANK3_BD6B
0BD82                           
0BD82                           
0BD82                           ;
0BD82                           ; Checks collision in one dimension (wrapping)
0BD82                           ; Only run when checking horizontal collision in a vertical level
0BD82                           ;
0BD82                           ; ##### Input
0BD82                           ;
0BD82                           ; - `Y`: which dimension to compare `$00` = x, `$02` = y
0BD82                           ; - `byte_RAM_5`/`byte_RAM_7`: bounding box A x/y offset low
0BD82                           ; - `byte_RAM_6`/`byte_RAM_8`: bounding box B x/y offset low
0BD82                           ; - `byte_RAM_9`: bounding box A width/height
0BD82                           ; - `byte_RAM_A`: bounding box B width/height
0BD82                           ;
0BD82                           ; ##### Output
0BD82                           ;
0BD82                           ; - `C`: clear if there is a collision, set if there is no collision
0BD82                           ; - `A`: distance between bounding boxes
0BD82                           ;
0BD82                           CheckHitboxCollisionDimensionWrap:
0BD82 B9 05 00                  	LDA byte_RAM_5, Y
0BD85 38                        	SEC
0BD86 F9 06 00                  	SBC byte_RAM_6, Y
0BD89 10 00                     	BPL CheckHitboxCollisionDimensionWrap_Exit
0BD8B                           
0BD8B 49 FF                     	EOR #$FF
0BD8D 18                        	CLC
0BD8E 69 01                     	ADC #$01
0BD90 CA                        	DEX
0BD91                           
0BD91                           CheckHitboxCollisionDimensionWrap_Exit:
0BD91 38                        	SEC
0BD92 F5 09                     	SBC byte_RAM_9, X
0BD94 60                        	RTS
0BD95                           
0BD95                           
0BD95                           ;
0BD95                           ; Checks collision in one dimension
0BD95                           ;
0BD95                           ; ##### Input
0BD95                           ;
0BD95                           ; - `Y`: which dimension to compare `$00` = x, `$02` = y
0BD95                           ; - `byte_RAM_1`/`byte_RAM_3`: bounding box A x/y offset high
0BD95                           ; - `byte_RAM_2`/`byte_RAM_4`: bounding box B x/y offset high
0BD95                           ; - `byte_RAM_5`/`byte_RAM_7`: bounding box A x/y offset low
0BD95                           ; - `byte_RAM_6`/`byte_RAM_8`: bounding box B x/y offset low
0BD95                           ; - `byte_RAM_9`: bounding box A width/height
0BD95                           ; - `byte_RAM_A`: bounding box B width/height
0BD95                           ;
0BD95                           ; ##### Output
0BD95                           ;
0BD95                           ; - `C`: clear if there is a collision, set if there is no collision
0BD95                           ; - `A`: distance between bounding boxes
0BD95                           ;
0BD95                           CheckHitboxCollisionDimension:
0BD95 B9 05 00                  	LDA byte_RAM_5, Y
0BD98 38                        	SEC
0BD99 F9 06 00                  	SBC byte_RAM_6, Y
0BD9C 99 06 00                  	STA byte_RAM_6, Y
0BD9F B9 01 00                  	LDA byte_RAM_1, Y
0BDA2 F9 02 00                  	SBC byte_RAM_2, Y
0BDA5 10 00                     	BPL loc_BANK3_BDB9
0BDA7                           
0BDA7 49 FF                     	EOR #$FF
0BDA9 48                        	PHA
0BDAA B9 06 00                  	LDA byte_RAM_6, Y
0BDAD 49 FF                     	EOR #$FF
0BDAF 18                        	CLC
0BDB0 69 01                     	ADC #$01
0BDB2 99 06 00                  	STA byte_RAM_6, Y
0BDB5 68                        	PLA
0BDB6 69 00                     	ADC #$00
0BDB8 CA                        	DEX
0BDB9                           
0BDB9                           loc_BANK3_BDB9:
0BDB9 C9 00                     	CMP #$00
0BDBB F0 00                     	BEQ CheckHitboxCollisionDimension_Exit
0BDBD                           
0BDBD 38                        	SEC
0BDBE 60                        	RTS
0BDBF                           
0BDBF                           CheckHitboxCollisionDimension_Exit:
0BDBF B9 06 00                  	LDA byte_RAM_6, Y
0BDC2 F5 09                     	SBC byte_RAM_9, X
0BDC4 60                        	RTS
0BDC5                           
0BDC5                           
0BDC5                           ;
0BDC5                           ; Determines whether two bounding boxes collide
0BDC5                           ;
0BDC5                           ; ##### Input
0BDC5                           ;
0BDC5                           ; - `byte_RAM_1`: bounding box A left high
0BDC5                           ; - `byte_RAM_2`: bounding box B left high
0BDC5                           ; - `byte_RAM_3`: bounding box A top high
0BDC5                           ; - `byte_RAM_4`: bounding box B top high
0BDC5                           ; - `byte_RAM_5`: bounding box A left low
0BDC5                           ; - `byte_RAM_6`: bounding box B left low
0BDC5                           ; - `byte_RAM_7`: bounding box A top low
0BDC5                           ; - `byte_RAM_8`: bounding box B top low
0BDC5                           ; - `byte_RAM_9`: hitbox A width low
0BDC5                           ; - `byte_RAM_A`: hitbox B width low
0BDC5                           ; - `byte_RAM_B`: hitbox A height low
0BDC5                           ; - `byte_RAM_C`: hitbox B height low
0BDC5                           ;
0BDC5                           ; ##### Output
0BDC5                           ;
0BDC5                           ; - `C`: clear if there is a collision, set if there is no collision
0BDC5                           ;
0BDC5                           CheckHitboxCollision:
0BDC5 8A                        	TXA
0BDC6 48                        	PHA
0BDC7 A0 02                     	LDY #$02 ; check vertical collision
0BDC9                           
0BDC9                           CheckHitboxCollision_Loop:
0BDC9 98                        	TYA
0BDCA AA                        	TAX
0BDCB E8                        	INX
0BDCC C0 00                     	CPY #$00 ; check horizontal collision
0BDCE D0 00                     	BNE CheckHitboxCollision_CheckDimensionNoWrap
0BDD0                           
0BDD0 A5 EC                     	LDA IsHorizontalLevel
0BDD2 D0 00                     	BNE CheckHitboxCollision_CheckDimensionNoWrap
0BDD4                           
0BDD4                           	; Horizontal position wraps in a vertical level
0BDD4                           CheckHitboxCollision_CheckDimensionWrap:
0BDD4 20 82 BD                  	JSR CheckHitboxCollisionDimensionWrap
0BDD7 4C 00 00                  	JMP CheckHitboxCollision_AfterCheckDimension
0BDDA                           
0BDDA                           CheckHitboxCollision_CheckDimensionNoWrap:
0BDDA 20 95 BD                  	JSR CheckHitboxCollisionDimension
0BDDD                           
0BDDD                           CheckHitboxCollision_AfterCheckDimension:
0BDDD B0 00                     	BCS CheckHitboxCollision_Exit
0BDDF                           
0BDDF 48                        	PHA
0BDE0 98                        	TYA
0BDE1 4A                        	LSR A
0BDE2 AA                        	TAX
0BDE3 68                        	PLA
0BDE4                           	; store the result
0BDE4 9D 26 04                  	STA CollisionResultX, X
0BDE7 88                        	DEY
0BDE8 88                        	DEY
0BDE9 10 DE                     	BPL CheckHitboxCollision_Loop
0BDEB                           
0BDEB 18                        	CLC
0BDEC                           
0BDEC                           CheckHitboxCollision_Exit:
0BDEC 68                        	PLA
0BDED AA                        	TAX
0BDEE 60                        	RTS
0BDEF                           
0BDEF                           
0BDEF                           ; ---------------------------------------------------------------------------
0BDEF                           HealthBarTiles:
0BDEF BA                        	.db $BA ; 0
0BDF0 BA                        	.db $BA
0BDF1 BA                        	.db $BA
0BDF2 BA                        	.db $BA
0BDF3 B8                        	.db $B8 ; 1
0BDF4 BA                        	.db $BA
0BDF5 BA                        	.db $BA
0BDF6 BA                        	.db $BA
0BDF7 B8                        	.db $B8 ; 2
0BDF8 B8                        	.db $B8
0BDF9 BA                        	.db $BA
0BDFA BA                        	.db $BA
0BDFB B8                        	.db $B8 ; 3
0BDFC B8                        	.db $B8
0BDFD B8                        	.db $B8
0BDFE BA                        	.db $BA
0BDFF B8                        	.db $B8 ; 4
0BE00 B8                        	.db $B8
0BE01 B8                        	.db $B8
0BE02 B8                        	.db $B8
0BE03                           
0BE03                           POWQuakeOffsets:
0BE03 00                        	.db $00
0BE04 03                        	.db $03
0BE05 00                        	.db $00
0BE06 FD                        	.db $FD
0BE07                           
0BE07                           SkyFlashColors:
0BE07 26                        	.db $26
0BE08 2A                        	.db $2A
0BE09 22                        	.db $22
0BE0A 26                        	.db $26
0BE0B                           
0BE0B                           ; =============== S U B R O U T I N E =======================================
0BE0B                           
0BE0B                           AreaSecondaryRoutine:
0BE0B AD C6 04                  	LDA SkyFlashTimer
0BE0E F0 00                     	BEQ AreaSecondaryRoutine_HealthBar
0BE10                           
0BE10                           	; sky flash timer (ie. explosions)
0BE10 CE C6 04                  	DEC SkyFlashTimer
0BE13 AE 00 03                  	LDX byte_RAM_300
0BE16 A9 3F                     	LDA #$3F
0BE18 9D 01 03                  	STA PPUBuffer_301, X
0BE1B A9 10                     	LDA #$10
0BE1D 9D 02 03                  	STA PPUBuffer_301 + 1, X
0BE20 A9 04                     	LDA #$04
0BE22 9D 03 03                  	STA PPUBuffer_301 + 2, X
0BE25 AD BC 04                  	LDA SkyColor
0BE28 AC C6 04                  	LDY SkyFlashTimer
0BE2B F0 00                     	BEQ AreaSecondaryRoutine_PlayerPalette
0BE2D                           
0BE2D 98                        	TYA
0BE2E 29 03                     	AND #$03
0BE30 A8                        	TAY
0BE31 B9 07 BE                  	LDA SkyFlashColors, Y
0BE34                           
0BE34                           AreaSecondaryRoutine_PlayerPalette:
0BE34 9D 04 03                  	STA PPUBuffer_301 + 3, X
0BE37 AD 38 06                  	LDA RestorePlayerPalette1
0BE3A 9D 05 03                  	STA PPUBuffer_301 + 4, X
0BE3D AD 39 06                  	LDA RestorePlayerPalette2
0BE40 9D 06 03                  	STA PPUBuffer_301 + 5, X
0BE43 AD 3A 06                  	LDA RestorePlayerPalette3
0BE46 9D 07 03                  	STA PPUBuffer_301 + 6, X
0BE49 A9 00                     	LDA #$00
0BE4B 9D 08 03                  	STA PPUBuffer_301 + 7, X
0BE4E 8A                        	TXA
0BE4F 18                        	CLC
0BE50 69 07                     	ADC #$07
0BE52 8D 00 03                  	STA byte_RAM_300
0BE55                           
0BE55                           AreaSecondaryRoutine_HealthBar:
0BE55 A9 30                     	LDA #$30
0BE57 85 00                     	STA byte_RAM_0
0BE59 20 00 00                  	JSR FindSpriteSlot
0BE5C                           
0BE5C AD C2 04                  	LDA PlayerHealth
0BE5F F0 00                     	BEQ AreaSecondaryRoutine_HealthBar_Draw
0BE61                           
0BE61 29 F0                     	AND #$F0
0BE63 4A                        	LSR A
0BE64 4A                        	LSR A
0BE65 69 04                     	ADC #$04 ; max health
0BE67                           
0BE67                           AreaSecondaryRoutine_HealthBar_Draw:
0BE67 AA                        	TAX
0BE68                           
0BE68 A9 FE                     	LDA #$FE
0BE6A 85 03                     	STA byte_RAM_3
0BE6C                           AreaSecondaryRoutine_HealthBar_Loop:
0BE6C BD EF BD                  	LDA HealthBarTiles, X
0BE6F 99 01 02                  	STA SpriteDMAArea + 1, Y
0BE72 A9 10                     	LDA #$10
0BE74 99 03 02                  	STA SpriteDMAArea + 3, Y
0BE77 A9 01                     	LDA #$01
0BE79 99 02 02                  	STA SpriteDMAArea + 2, Y
0BE7C A5 00                     	LDA byte_RAM_0
0BE7E 99 00 02                  	STA SpriteDMAArea, Y
0BE81 18                        	CLC
0BE82 69 10                     	ADC #$10
0BE84 85 00                     	STA byte_RAM_0
0BE86 E8                        	INX
0BE87 C8                        	INY
0BE88 C8                        	INY
0BE89 C8                        	INY
0BE8A C8                        	INY
0BE8B E6 03                     	INC byte_RAM_3
0BE8D A5 03                     	LDA byte_RAM_3
0BE8F CD C3 04                  	CMP PlayerMaxHealth
0BE92 D0 D8                     	BNE AreaSecondaryRoutine_HealthBar_Loop
0BE94                           
0BE94                           AreaSecondaryRoutine_POW:
0BE94 AD C4 04                  	LDA POWQuakeTimer
0BE97 F0 00                     	BEQ AreaSecondaryRoutine_Exit
0BE99                           
0BE99 CE C4 04                  	DEC POWQuakeTimer
0BE9C 4A                        	LSR A
0BE9D 29 01                     	AND #$01
0BE9F A8                        	TAY
0BEA0 A5 FC                     	LDA PPUScrollYMirror
0BEA2 10 00                     	BPL AreaSecondaryRoutine_POW_OffsetScreen
0BEA4                           
0BEA4 C8                        	INY
0BEA5 C8                        	INY
0BEA6                           
0BEA6                           AreaSecondaryRoutine_POW_OffsetScreen:
0BEA6 B9 03 BE                  	LDA POWQuakeOffsets, Y
0BEA9 8D C5 04                  	STA BackgroundYOffset
0BEAC 4C 43 99                  	JMP KillOnscreenEnemies
0BEAF                           
0BEAF                           AreaSecondaryRoutine_Exit:
0BEAF 60                        	RTS
0BEB0                           
0BEB0                           IFDEF SM_USA
0BEB0                           	.pad $BFE0, $FF
0BEB0                           	.db "SUPER MARIO USA "
0BEB0                           	.db $00, $00, $64, $45, $33, $04, $01, $0E, $01, $10
0BEB0                           ENDIF
0BEB0                           
0BEB0                           IFDEF RESET_CHR_LATCH
0BEB0                           SetBossTileset:
0BEB0                           	STA BossTileset
0BEB0                           	INC ResetCHRLatch
0BEB0                           	RTS
0BEB0                           ENDIF
0BEB0                           
0BEB0                           
0BEB0                           IFDEF CONTROLLER_2_DEBUG
0BEB0                           ;
0BEB0                           ; Copies all character stats to RAM for hot-swapping the current character
0BEB0                           ;
0BEB0                           CopyCarryYOffsets:
0BEB0 A2 0F                     	LDX #(AreaMainRoutine - CarryYOffsets - 1)
0BEB2                           CopyCarryYOffsets_Loop:
*** Label already defined.
0BEB2 BD 00 80                  	LDA CarryYOffsets, X
0BEB5 9D 00 7E                  	STA CarryYOffsetsRAM, X
0BEB8 CA                        	DEX
0BEB9 10 9D                     	BPL CopyCarryYOffsets_Loop
0BEBB                           
0BEBB 60                        	RTS
0BEBC                           
0BEBC                           AreaDebugRoutine:
0BEBC AD 82 7E                  	LDA CreateObjectType
0BEBF F0 00                     	BEQ AreaDebugRoutine_Exit
0BEC1                           
0BEC1 20 00 00                  	JSR DebugCreateObject
0BEC4                           
0BEC4                           AreaDebugRoutine_Exit:
0BEC4 60                        	RTS
0BEC5                           
0BEC5                           ;
0BEC5                           ; Input
0BEC5                           ;   CreateObjectType = object type
0BEC5                           ;
0BEC5                           DebugCreateObject:
0BEC5 20 D6 92                  	JSR CreateEnemy
0BEC8                           
0BEC8 30 FA                     	BMI AreaDebugRoutine_Exit
0BECA                           
0BECA A6 00                     	LDX byte_RAM_0
0BECC AD 82 7E                  	LDA CreateObjectType
0BECF 95 90                     	STA ObjectType, X
0BED1 AD C0 04                  	LDA ScreenBoundaryLeftLo
0BED4 69 80                     	ADC #$80
0BED6 95 29                     	STA ObjectXLo, X
0BED8 AD BE 04                  	LDA ScreenBoundaryLeftHi
0BEDB 69 00                     	ADC #$00
0BEDD 95 15                     	STA ObjectXHi, X
0BEDF A5 CB                     	LDA ScreenYLo
0BEE1 95 33                     	STA ObjectYLo, X
0BEE3 A5 CA                     	LDA ScreenYHi
0BEE5 69 00                     	ADC #$00
0BEE7 95 1F                     	STA ObjectYHi, X
0BEE9                           
0BEE9 20 BE 83                  	JSR InitializeEnemy
0BEEC                           
0BEEC AD 83 7E                  	LDA CreateObjectAttributes
0BEEF F0 00                     	BEQ DebugCreateObject_ClearObjectType
0BEF1                           
0BEF1                           DebugCreateObject_ObjectCarried:
0BEF1 2E 83 7E                  	ROL CreateObjectAttributes
0BEF4 90 00                     	BCC DebugCreateObject_ObjectTimer
0BEF6                           
0BEF6 A9 01                     	LDA #$01
0BEF8 85 9C                     	STA HoldingItem
0BEFA 95 A8                     	STA ObjectBeingCarriedTimer, X
0BEFC 8E 2D 04                  	STX ObjectBeingCarriedIndex
0BEFF                           
0BEFF A9 04                     	LDA #SoundEffect1_CherryGet
0BF01 8D 02 06                  	STA SoundEffectQueue1
0BF04                           
0BF04                           DebugCreateObject_ObjectTimer:
0BF04 2E 83 7E                  	ROL CreateObjectAttributes
0BF07 90 00                     	BCC DebugCreateObject_ObjectBottomScreen
0BF09                           
0BF09 A9 FF                     	LDA #$FF
0BF0B 95 86                     	STA ObjectTimer1, X
0BF0D                           
0BF0D                           DebugCreateObject_ObjectBottomScreen:
0BF0D 2E 83 7E                  	ROL CreateObjectAttributes
0BF10 90 00                     	BCC DebugCreateObject_Bit4
0BF12                           
0BF12 B5 33                     	LDA ObjectYLo, X
0BF14 18                        	CLC
0BF15 69 E0                     	ADC #$E0
0BF17 95 33                     	STA ObjectYLo, X
0BF19 B5 1F                     	LDA ObjectYHi, X
0BF1B 69 00                     	ADC #$00
0BF1D 95 1F                     	STA ObjectYHi, X
0BF1F                           
0BF1F                           DebugCreateObject_Bit4:
0BF1F 2E 83 7E                  	ROL CreateObjectAttributes
0BF22 90 00                     	BCC DebugCreateObject_Bit3
0BF24                           
0BF24                           DebugCreateObject_Bit3:
0BF24 2E 83 7E                  	ROL CreateObjectAttributes
0BF27 90 00                     	BCC DebugCreateObject_Bit2
0BF29                           
0BF29                           DebugCreateObject_Bit2:
0BF29 2E 83 7E                  	ROL CreateObjectAttributes
0BF2C 90 00                     	BCC DebugCreateObject_ObjectThrown
0BF2E                           
0BF2E                           DebugCreateObject_ObjectThrown:
0BF2E 2E 83 7E                  	ROL CreateObjectAttributes
0BF31 90 00                     	BCC DebugCreateObject_ObjectNoVelocityReset
0BF33                           
0BF33 A9 01                     	LDA #$01
0BF35 9D 2F 04                  	STA ObjectProjectileTimer, X
0BF38                           
0BF38                           DebugCreateObject_ObjectNoVelocityReset:
0BF38 2E 83 7E                  	ROL CreateObjectAttributes
0BF3B B0 00                     	BCS DebugCreateObject_ClearObjectType
0BF3D                           
0BF3D A9 00                     	LDA #$00
0BF3F 95 3D                     	STA ObjectXVelocity, X
0BF41 95 47                     	STA ObjectYVelocity, X
0BF43                           
0BF43                           DebugCreateObject_ClearObjectType:
0BF43 A9 00                     	LDA #$00
0BF45 8D 82 7E                  	STA CreateObjectType
0BF48                           
0BF48                           DebugCreateObject_Exit:
0BF48 60                        	RTS
0BF49                           
0BF49                           ENDIF
0BF49 FF FF FF FF FF FF FF FF.. .pad $c000, $ff
0C000                           
0C000                           ; ----------------------------------------
0C000                           ; Banks 4 and 5. Music engine and song data.
0C000                           .base $8000
08000                           .include "src/prg-4-5.asm"
08000                           ;
08000                           ; Bank 4 & Bank 5
08000                           ; ===============
08000                           ;
08000                           ; What's inside:
08000                           ;
08000                           ;   - Music engine
08000                           ;   - Sound effects engine
08000                           ;   - Sound effect pointers and data
08000                           ;   - Song pointers and data
08000                           ;   - Note length tables (tempos)
08000                           ;   - Instrument tables and data
08000                           ;
08000                           
08000                           StartProcessingSoundQueue:
08000 A9 FF                     	LDA #$FF
08002 8D 17 40                  	STA JOY2
08005 AD 00 01                  	LDA StackArea
08008 C9 41                     	CMP #Stack100_Pause
0800A D0 00                     	BNE ProcessMusicAndSfxQueues
0800C                           
0800C A9 0C                     	LDA #%00001100 ; Mute the two square channels
0800E 8D 15 40                  	STA SND_CHN
08011                           	; You would think you could skip processing,
08011                           	; since if the game is paused, nothing should
08011                           	; be setting new music or whatever.
08011                           	;
08011                           	; You would be correct, except for the suicide code!
08011                           	; That sets MusicQueue2.
08011                           	;
08011                           	; If not for processing it, the music would not
08011                           	; change (or stop) when you used the code. Welp!
08011 4C 00 00                  	JMP ProcessOnlyMusicQueue2
08014                           
08014                           
08014                           ProcessMusicAndSfxQueues:
08014 20 00 00                  	JSR ProcessSoundEffectQueue2
08017                           
08017 20 00 00                  	JSR ProcessSoundEffectQueue1
0801A                           
0801A 20 00 00                  	JSR ProcessSoundEffectQueue3
0801D                           
0801D 20 00 00                  	JSR ProcessDPCMQueue
08020                           
08020                           ProcessOnlyMusicQueue2:
08020 20 00 00                  	JSR ProcessMusicQueue
08023                           
08023                           	; Reset queues
08023 A9 00                     	LDA #$00
08025 8D 04 06                  	STA SoundEffectQueue2
08028 8D 03 06                  	STA MusicQueue2
0802B 8D 02 06                  	STA SoundEffectQueue1
0802E 8D 01 06                  	STA DPCMQueue
08031 8D 00 06                  	STA MusicQueue1
08034 8D 05 06                  	STA SoundEffectQueue3
08037 60                        	RTS
08038                           
08038                           
08038                           ProcessSoundEffectQueue2_Jump:
08038 A9 42                     	LDA #$42
0803A A2 82                     	LDX #$82
0803C A0 A8                     	LDY #$A8
0803E 20 00 00                  	JSR PlaySquare1Sweep
08041                           
08041 A9 22                     	LDA #$22
08043 85 C4                     	STA SoundEffectTimer2
08045                           
08045                           ProcessSoundEffectQueue2_JumpPart2:
08045 A5 C4                     	LDA SoundEffectTimer2
08047 C9 20                     	CMP #$20
08049 D0 00                     	BNE ProcessSoundEffectQueue2_JumpPart3
0804B                           
0804B A2 DF                     	LDX #$DF
0804D A0 F6                     	LDY #$F6
0804F D0 00                     	BNE ProcessSoundEffectQueue2_SetSquare1ThenDecrementTimer
08051                           
08051                           ProcessSoundEffectQueue2_JumpPart3:
08051 C9 1A                     	CMP #$1A
08053 D0 00                     	BNE ProcessSoundEffectQueue2_ThenDecrementTimer
08055                           
08055 A2 C1                     	LDX #$C1
08057 A0 BC                     	LDY #$BC
08059                           
08059                           ProcessSoundEffectQueue2_SetSquare1ThenDecrementTimer:
08059 20 00 00                  	JSR SetSquare1VolumeAndSweep
0805C                           
0805C D0 00                     	BNE ProcessSoundEffectQueue2_ThenDecrementTimer
0805E                           
0805E                           ProcessSoundEffectQueue2_CoinGet:
0805E A9 35                     	LDA #$35
08060 A2 8D                     	LDX #$8D
08062 85 C4                     	STA SoundEffectTimer2
08064                           
08064 A0 7F                     	LDY #$7F
08066 A9 5E                     	LDA #$5E
08068 20 00 00                  	JSR PlaySquare1Sweep
0806B                           
0806B                           ProcessSoundEffectQueue2_CoinGetPart2:
0806B A5 C4                     	LDA SoundEffectTimer2
0806D C9 30                     	CMP #$30
0806F D0 00                     	BNE ProcessSoundEffectQueue2_ThenDecrementTimer
08071                           
08071                           	; The second note of the coin sound effect modifies the frequency directly!
08071                           	; This was probably done to do the "same" thing in similar instructions.
08071                           	;
08071                           	; It's interesting to point out that the closest "regular" note ($68) would
08071                           	; end up with SQ1_LO being $53 instead of $54 from the frequency tweak logic!
08071                           
08071 A9 54                     	LDA #$54
08073 8D 02 40                  	STA SQ1_LO
08076                           
08076                           ProcessSoundEffectQueue2_ThenDecrementTimer:
08076 D0 00                     	BNE ProcessSoundEffectQueue2_DecrementTimer
08078                           
08078                           ProcessSoundEffectQueue2:
08078 AD 0D 06                  	LDA SoundEffectPlaying2
0807B C9 02                     	CMP #SoundEffect2_Climbing
0807D F0 00                     	BEQ ProcessSoundEffectQueue2_DecrementTimer
0807F                           
0807F AC 04 06                  	LDY SoundEffectQueue2
08082 F0 00                     	BEQ ProcessSoundEffectQueue2_None
08084                           
08084 8C 0D 06                  	STY SoundEffectPlaying2
08087 4E 04 06                  	LSR SoundEffectQueue2
0808A B0 AC                     	BCS ProcessSoundEffectQueue2_Jump
0808C                           
0808C 4E 04 06                  	LSR SoundEffectQueue2
0808F B0 00                     	BCS ProcessSoundEffectQueue2_Climbing
08091                           
08091 4E 04 06                  	LSR SoundEffectQueue2
08094 B0 C8                     	BCS ProcessSoundEffectQueue2_CoinGet
08096                           
08096 4E 04 06                  	LSR SoundEffectQueue2
08099 B0 00                     	BCS ProcessSoundEffectQueue2_Shrinking
0809B                           
0809B 4E 04 06                  	LSR SoundEffectQueue2
0809E B0 00                     	BCS ProcessSoundEffectQueue2_IntroFallSlide
080A0                           
080A0 4E 04 06                  	LSR SoundEffectQueue2
080A3 B0 00                     	BCS ProcessSoundEffectQueue2_Growing
080A5                           
080A5                           ProcessSoundEffectQueue2_None:
080A5 AD 0D 06                  	LDA SoundEffectPlaying2
080A8 F0 00                     	BEQ ProcessSoundEffectQueue2_NoneExit
080AA                           
080AA                           	; Jumping
080AA 4A                        	LSR A
080AB B0 98                     	BCS ProcessSoundEffectQueue2_JumpPart2
080AD                           
080AD                           	; Climbing
080AD 4A                        	LSR A
080AE B0 00                     	BCS ProcessSoundEffectQueue2_DecrementTimer
080B0                           
080B0                           	; CoinGet
080B0 4A                        	LSR A
080B1 B0 B8                     	BCS ProcessSoundEffectQueue2_CoinGetPart2
080B3                           
080B3                           	; Shrinking
080B3 4A                        	LSR A
080B4 B0 00                     	BCS ProcessSoundEffectQueue2_ShrinkingPart2
080B6                           
080B6                           	; IntroFallSlide
080B6 4A                        	LSR A
080B7 B0 00                     	BCS ProcessSoundEffectQueue2_DecrementTimer
080B9                           
080B9                           	; Growing
080B9 4A                        	LSR A
080BA B0 00                     	BCS ProcessSoundEffectQueue2_GrowingPart2
080BC                           
080BC                           ProcessSoundEffectQueue2_NoneExit:
080BC 60                        	RTS
080BD                           
080BD                           ProcessSoundEffectQueue2_IntroFallSlide:
080BD A9 60                     	LDA #$60
080BF A0 A5                     	LDY #$A5
080C1 D0 00                     	BNE ProcessSoundEffectQueue2_SingleSweep
080C3                           
080C3                           ProcessSoundEffectQueue2_Climbing:
080C3 8C 0D 06                  	STY SoundEffectPlaying2
080C6 A9 05                     	LDA #$05
080C8 A0 9C                     	LDY #$9C
080CA                           
080CA                           ; A = timer
080CA                           ; Y = sweep
080CA                           ProcessSoundEffectQueue2_SingleSweep:
080CA A2 9E                     	LDX #$9E
080CC 85 C4                     	STA SoundEffectTimer2
080CE A9 60                     	LDA #$60
080D0 20 00 00                  	JSR PlaySquare1Sweep
080D3                           
080D3                           ProcessSoundEffectQueue2_DecrementTimer:
080D3 C6 C4                     	DEC SoundEffectTimer2
080D5 D0 00                     	BNE ProcessSoundEffectQueue2_Exit
080D7                           
080D7 A2 0E                     	LDX #%00001110
080D9 8E 15 40                  	STX SND_CHN
080DC A2 0F                     	LDX #%00001111
080DE 8E 15 40                  	STX SND_CHN
080E1 A2 00                     	LDX #$00
080E3 8E 0D 06                  	STX SoundEffectPlaying2
080E6                           
080E6                           ProcessSoundEffectQueue2_Exit:
080E6 60                        	RTS
080E7                           
080E7                           ProcessSoundEffectQueue2_Shrinking:
080E7 A9 2F                     	LDA #$2F
080E9 85 C4                     	STA SoundEffectTimer2
080EB                           
080EB                           ProcessSoundEffectQueue2_ShrinkingPart2:
080EB A5 C4                     	LDA SoundEffectTimer2
080ED 4A                        	LSR A
080EE B0 00                     	BCS ProcessSoundEffectQueue2_ShrinkingPart3
080F0                           
080F0 4A                        	LSR A
080F1 B0 00                     	BCS ProcessSoundEffectQueue2_ShrinkingPart3
080F3                           
080F3 29 02                     	AND #$02
080F5 F0 00                     	BEQ ProcessSoundEffectQueue2_ShrinkingPart3
080F7                           
080F7 A0 91                     	LDY #$91
080F9 A2 9A                     	LDX #$9A
080FB A9 68                     	LDA #$68
080FD 20 00 00                  	JSR PlaySquare1Sweep
08100                           
08100                           ProcessSoundEffectQueue2_ShrinkingPart3:
08100 4C D3 80                  	JMP ProcessSoundEffectQueue2_DecrementTimer
08103                           
08103                           ProcessSoundEffectQueue2_Growing:
08103 A9 36                     	LDA #$36
08105 85 C4                     	STA SoundEffectTimer2
08107                           
08107                           ProcessSoundEffectQueue2_GrowingPart2:
08107 A5 C4                     	LDA SoundEffectTimer2
08109 4A                        	LSR A
0810A B0 C7                     	BCS ProcessSoundEffectQueue2_DecrementTimer
0810C                           
0810C A8                        	TAY
0810D B9 00 00                  	LDA GrowingSoundData - 1, Y
08110 A2 5D                     	LDX #$5D
08112 A0 7F                     	LDY #$7F
08114 20 00 00                  	JSR PlaySquare1Sweep
08117                           
08117 4C D3 80                  	JMP ProcessSoundEffectQueue2_DecrementTimer
0811A                           
0811A                           ; Fun fact: When you slow this down, you get the SMB1 end of level fanfare.
0811A                           GrowingSoundData:
0811A 6A 74 6A 64 5C 52 5C 52.. 	.db $6A, $74, $6A, $64, $5C, $52, $5C, $52, $4C, $44, $66, $70, $66, $60, $58, $4E
0812A 58 4E 48 40 56 60 56 50.. 	.db $58, $4E, $48, $40, $56, $60, $56, $50, $48, $3E, $48, $3E, $38, $30 ; $10
08138                           
08138                           
08138                           ProcessSoundEffectQueue1:
08138 AD 02 06                  	LDA SoundEffectQueue1
0813B F0 00                     	BEQ ProcessSoundEffectQueue1_None
0813D                           
0813D C9 40                     	CMP #SoundEffect1_StopwatchTick
0813F D0 00                     	BNE ProcessSoundEffectQueue1_Part2
08141                           
08141 AE 07 06                  	LDX SoundEffectPlaying1
08144 F0 00                     	BEQ ProcessSoundEffectQueue1_Part2
08146                           
08146                           ProcessSoundEffectQueue1_None:
08146 AD 07 06                  	LDA SoundEffectPlaying1
08149 D0 00                     	BNE ProcessSoundEffectQueue1_Part3
0814B                           
0814B 60                        	RTS
0814C                           
0814C                           ProcessSoundEffectQueue1_Part2:
0814C 8D 07 06                  	STA SoundEffectPlaying1
0814F A0 00                     	LDY #$00
08151                           
08151                           ProcessSoundEffectQueue1_PointerLoop:
08151 C8                        	INY
08152 4A                        	LSR A
08153 90 FC                     	BCC ProcessSoundEffectQueue1_PointerLoop
08155                           
08155 B9 00 00                  	LDA SoundEffectPointers - 1, Y
08158 85 C1                     	STA SoundEffect1DataOffset
0815A                           
0815A                           ProcessSoundEffectQueue1_Part3:
0815A A4 C1                     	LDY SoundEffect1DataOffset
0815C E6 C1                     	INC SoundEffect1DataOffset
0815E B9 00 00                  	LDA SoundEffectPointers, Y
08161 30 00                     	BMI ProcessSoundEffectQueue1_Patch
08163                           
08163 D0 00                     	BNE ProcessSoundEffectQueue1_Note
08165                           
08165                           	; if it was $00, we're at the end of the data for this sound effect
08165 A2 90                     	LDX #$90
08167 8E 04 40                  	STX SQ2_VOL
0816A A2 18                     	LDX #$18
0816C 8E 07 40                  	STX SQ2_HI
0816F A2 00                     	LDX #$00
08171 8E 06 40                  	STX SQ2_LO
08174 8E 07 06                  	STX SoundEffectPlaying1
08177 60                        	RTS
08178                           
08178                           ProcessSoundEffectQueue1_Patch:
08178 8D 04 40                  	STA SQ2_VOL
0817B A4 C1                     	LDY SoundEffect1DataOffset
0817D E6 C1                     	INC SoundEffect1DataOffset
0817F B9 00 00                  	LDA SoundEffectPointers, Y
08182                           
08182                           ProcessSoundEffectQueue1_Note:
08182 C9 7E                     	CMP #$7E
08184 F0 00                     	BEQ ProcessSoundEffectQueue1_Exit
08186                           
08186 20 00 00                  	JSR PlaySquare2Note
08189                           
08189                           ProcessSoundEffectQueue1_Exit:
08189 A9 7F                     	LDA #$7F
0818B 8D 05 40                  	STA SQ2_SWEEP
0818E                           
0818E 60                        	RTS
0818F                           
0818F                           
0818F                           ;
0818F                           ; Sound effect data
0818F                           ;
0818F                           .include "src/music/sound-effect-data.asm"
0818F                           ;
0818F                           ; Sound effect pointers
0818F                           ;
0818F                           .include "src/music/sound-effect-pointers.asm"
0818F                           SoundEffectPointers:
0818F 00                        	.db SoundEffect1Data_BirdoShot - SoundEffectPointers
08190 00                        	.db SoundEffect1Data_PotionDoorBong - SoundEffectPointers
08191 00                        	.db SoundEffect1Data_CherryGet - SoundEffectPointers
08192 00                        	.db SoundEffect1Data_ThrowItem - SoundEffectPointers
08193 00                        	.db SoundEffect1Data_1UP - SoundEffectPointers
08194 00                        	.db SoundEffect1Data_EnemyHit - SoundEffectPointers
08195 00                        	.db SoundEffect1Data_StopwatchTick - SoundEffectPointers
08196 00                        	.db SoundEffect1Data_HawkOpen_WartBarf - SoundEffectPointers
08197                           
08197                           ; Sound effects themselves
08197                           ;
08197                           .include "src/music/sound-effects/potion-door-bong.asm"
08197                           SoundEffect1Data_PotionDoorBong:
08197 9F                        	.db $9F
08198 10 0E 0C 7E 7E 7E         	.db $10, $0E, $0C, $7E, $7E, $7E
0819E 10 0E 0C 7E 7E 7E         	.db $10, $0E, $0C, $7E, $7E, $7E
081A4 86                        	.db $86
081A5 10 0E 0C 7E 7E 7E 7E 7E.. 	.db $10, $0E, $0C, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E
081B5 00                        	.db $00
081B6                           .include "src/music/sound-effects/throw-item.asm"
081B6                           SoundEffect1Data_ThrowItem:
081B6 9F 64 7E 7E               	.db $9F, $64, $7E, $7E
081BA 9E 68 7E 7E               	.db $9E, $68, $7E, $7E
081BE 9D 6A 7E 7E               	.db $9D, $6A, $7E, $7E
081C2 9C 6E 7E 7E               	.db $9C, $6E, $7E, $7E
081C6 9B 72 7E 7E               	.db $9B, $72, $7E, $7E
081CA 9A 76 7E 7E               	.db $9A, $76, $7E, $7E
081CE 84 78 7E 7E 7E 7E 7E 7E.. 	.db $84, $78, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E
081DC 00                        	.db $00
081DD                           .include "src/music/sound-effects/birdo-shot.asm"
081DD                           SoundEffect1Data_BirdoShot:
081DD 9F 30 34 36 38            	.db $9F, $30, $34, $36, $38
081E2 9F 3C 3E 40 42            	.db $9F, $3C, $3E, $40, $42
081E7 9A 3A 3C 3E 40            	.db $9A, $3A, $3C, $3E, $40
081EC 9C 38 3A 3C 3E            	.db $9C, $38, $3A, $3C, $3E
081F1 96 36 38 3A 3C            	.db $96, $36, $38, $3A, $3C
081F6 98 34 36 38 36            	.db $98, $34, $36, $38, $36
081FB 00                        	.db $00
081FC                           .include "src/music/sound-effects/cherry-get.asm"
081FC                           SoundEffect1Data_CherryGet:
081FC 81 56 7E 64 7E 68         	.db $81, $56, $7E, $64, $7E, $68
08202 00                        	.db $00
08203                           .include "src/music/sound-effects/enemy-hit.asm"
08203                           SoundEffect1Data_EnemyHit:
08203 99 18 1A 18 1C 18 1A      	.db $99, $18, $1A, $18, $1C, $18, $1A
0820A 9B 18 1C 18 20 18 22      	.db $9B, $18, $1C, $18, $20, $18, $22
08211 9F 18 3C 24 30 3C 18 30   	.db $9F, $18, $3C, $24, $30, $3C, $18, $30
08219 00                        	.db $00
0821A                           .include "src/music/sound-effects/stopwatch-tick.asm"
0821A                           SoundEffect1Data_StopwatchTick:
0821A 80                        	.db $80
0821B 68 7E 7E 7E 7E 7E 7E 7E.. 	.db $68, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E
08224 60 7E 7E                  	.db $60, $7E, $7E
08227 64 7E 7E 7E 7E 7E 7E 7E.. 	.db $64, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E
08230 56 7E 7E                  	.db $56, $7E, $7E
08233 00                        	.db $00
08234                           .include "src/music/sound-effects/hawk-open-wart-barf.asm"
08234                           SoundEffect1Data_HawkOpen_WartBarf:
08234 80 1E 1C 1E 1A 18 16 1C.. 	.db $80, $1E, $1C, $1E, $1A, $18, $16, $1C, $18, $1A, $1E, $18
08240 16 14 12 14 16 14 12 2C.. 	.db $16, $14, $12, $14, $16, $14, $12, $2C, $2C, $2A, $2E, $2C
0824C 2A 28 26 28 24 22 20 1E.. 	.db $2A, $28, $26, $28, $24, $22, $20, $1E, $1C, $1A, $18, $16
08258 14 14 12 10 0E 0C 0A 08.. 	.db $14, $14, $12, $10, $0E, $0C, $0A, $08, $08, $06, $04, $02, $02
08265 00                        	.db $00
08266                           .include "src/music/sound-effects/1up.asm"
08266                           SoundEffect1Data_1UP:
08266 81                        	.db $81
08267 5E 7E 7E 7E 7E 7E 7E      	.db $5E, $7E, $7E, $7E, $7E, $7E, $7E
0826E 64 7E 7E 7E 7E 7E 7E      	.db $64, $7E, $7E, $7E, $7E, $7E, $7E
08275 76 7E 7E 7E 7E 7E 7E      	.db $76, $7E, $7E, $7E, $7E, $7E, $7E
0827C 6E 7E 7E 7E 7E 7E 7E      	.db $6E, $7E, $7E, $7E, $7E, $7E, $7E
08283 72 7E 7E 7E 7E 7E 7E      	.db $72, $7E, $7E, $7E, $7E, $7E, $7E
0828A 7C 7E 7E                  	.db $7C, $7E, $7E
0828D 00                        	.db $00
0828E                           
0828E                           
0828E                           ProcessSoundEffectQueue3_WhaleSpout:
0828E A9 02                     	LDA #$02
08290 8D 11 06                  	STA SoundEffectTimer3
08293                           
08293                           ProcessSoundEffectQueue3_WhaleSpoutPart2:
08293 A9 1A                     	LDA #$1A
08295 8D 0C 40                  	STA NOISE_VOL
08298 A9 04                     	LDA #$04
0829A 8D 0E 40                  	STA NOISE_LO
0829D 8D 0F 40                  	STA NOISE_HI
082A0 D0 00                     	BNE ProcessSoundEffectQueue3_DecrementTimer
082A2                           
082A2                           ProcessSoundEffectQueue3:
082A2 AC 05 06                  	LDY SoundEffectQueue3
082A5 F0 00                     	BEQ ProcessSoundEffectQueue3_Part2
082A7                           
082A7 8C 0E 06                  	STY SoundEffectPlaying3
082AA                           
082AA                           	; Whale spout
082AA 4E 05 06                  	LSR SoundEffectQueue3
082AD B0 DF                     	BCS ProcessSoundEffectQueue3_WhaleSpout
082AF                           
082AF                           	; Rocket
082AF 4E 05 06                  	LSR SoundEffectQueue3
082B2 B0 00                     	BCS ProcessSoundEffectQueue3_Rocket
082B4                           
082B4                           	; POW rumble
082B4 4E 05 06                  	LSR SoundEffectQueue3
082B7 B0 00                     	BCS ProcessSoundEffectQueue3_POWRumble
082B9                           
082B9                           ProcessSoundEffectQueue3_Part2:
082B9 AD 0E 06                  	LDA SoundEffectPlaying3
082BC                           
082BC                           	; Whale spout
082BC 4A                        	LSR A
082BD B0 D4                     	BCS ProcessSoundEffectQueue3_WhaleSpoutPart2
082BF                           
082BF                           	; Rocket
082BF 4A                        	LSR A
082C0 B0 00                     	BCS ProcessSoundEffectQueue3_RocketPart2
082C2                           
082C2                           	; POW rumble
082C2 4A                        	LSR A
082C3 B0 00                     	BCS ProcessSoundEffectQueue3_POWRumblePart2
082C5                           
082C5 60                        	RTS
082C6                           
082C6                           ProcessSoundEffectQueue3_Rocket:
082C6                           ProcessSoundEffectQueue3_POWRumble:
082C6 A9 7F                     	LDA #$7F
082C8 8D 11 06                  	STA SoundEffectTimer3
082CB                           
082CB                           ProcessSoundEffectQueue3_RocketPart2:
082CB                           ProcessSoundEffectQueue3_POWRumblePart2:
082CB AC 11 06                  	LDY SoundEffectTimer3
082CE B9 00 00                  	LDA ProcessMusicQueue, Y ; weird, but i guess that's one way to get "random" noise
082D1 09 0C                     	ORA #$0C
082D3 8D 0E 40                  	STA NOISE_LO
082D6 AD 11 06                  	LDA SoundEffectTimer3
082D9 4A                        	LSR A
082DA 4A                        	LSR A
082DB 4A                        	LSR A
082DC 29 1F                     	AND #$1F
082DE 09 10                     	ORA #$10
082E0 8D 0C 40                  	STA NOISE_VOL
082E3 A9 18                     	LDA #$18
082E5 8D 0F 40                  	STA NOISE_HI
082E8                           
082E8                           ProcessSoundEffectQueue3_DecrementTimer:
082E8 CE 11 06                  	DEC SoundEffectTimer3
082EB D0 00                     	BNE ProcessSoundEffectQueue3_Exit
082ED                           
082ED A2 07                     	LDX #$07
082EF 8E 15 40                  	STX SND_CHN
082F2 A2 0F                     	LDX #$0F
082F4 8E 15 40                  	STX SND_CHN
082F7 A2 00                     	LDX #$00
082F9 8E 0E 06                  	STX SoundEffectPlaying3
082FC                           
082FC                           ProcessSoundEffectQueue3_Exit:
082FC 60                        	RTS
082FD                           
082FD                           
082FD                           ProcessDPCMQueue:
082FD AD 01 06                  	LDA DPCMQueue
08300 D0 00                     	BNE ProcessDPCMQueue_Part2
08302                           
08302 AD 08 06                  	LDA DPCMPlaying
08305 F0 00                     	BEQ ProcessDPCMQueue_None
08307                           
08307 CE 0A 06                  	DEC DPCMTimer
0830A D0 00                     	BNE ProcessDPCMQueue_Exit
0830C                           
0830C                           ProcessDPCMQueue_None:
0830C A9 00                     	LDA #$00
0830E 8D 08 06                  	STA DPCMPlaying
08311 A9 0F                     	LDA #%00001111
08313 8D 15 40                  	STA SND_CHN
08316                           
08316                           ProcessDPCMQueue_Exit:
08316 60                        	RTS
08317                           
08317                           ProcessDPCMQueue_Part2:
08317 8D 08 06                  	STA DPCMPlaying
0831A                           IFDEF EXPAND_MUSIC
0831A                           	CMP #$7E
0831A                           	BNE ProcessDPCMQueue_LookUpSample
0831A                           
0831A                           	LDA #$A0
0831A                           	STA DPCMTimer
0831A                           	RTS
0831A                           
0831A                           ProcessDPCMQueue_LookUpSample:
0831A                           ENDIF
0831A A0 00                     	LDY #$00
0831C                           
0831C                           IFNDEF EXPAND_MUSIC
0831C                           ProcessDPCMQueue_PointerLoop:
0831C C8                        	INY
0831D 4A                        	LSR A
0831E 90 FC                     	BCC ProcessDPCMQueue_PointerLoop
08320                           ELSE
08320                           	TAY
08320                           ENDIF
08320                           
08320 B9 00 00                  	LDA DMCFreqTable - 1, Y
08323 8D 10 40                  	STA DMC_FREQ
08326                           
08326 B9 00 00                  	LDA DMCStartTable - 1, Y
08329 8D 12 40                  	STA DMC_START
0832C B9 00 00                  	LDA DMCLengthTable - 1, Y
0832F 8D 13 40                  	STA DMC_LEN
08332 A9 A0                     	LDA #$A0
08334 8D 0A 06                  	STA DPCMTimer
08337 A9 0F                     	LDA #%00001111
08339 8D 15 40                  	STA SND_CHN
0833C A9 1F                     	LDA #%00011111
0833E 8D 15 40                  	STA SND_CHN
08341 60                        	RTS
08342                           
08342                           
08342                           DMCStartTable:
08342 00                        	.db (DPCMSampleData_DoorOpenBombBom - DPCMSampleData)/64 ; $4F
08343 00                        	.db (DPCMSampleData_DrumSample - DPCMSampleData)/64 ; $60
08344 00                        	.db (DPCMSampleData_PlayerHurt - DPCMSampleData)/64 ; $4B
08345 00                        	.db (DPCMSampleData_ItemPull - DPCMSampleData)/64 ; $00
08346 00                        	.db (DPCMSampleData_BossDeath - DPCMSampleData)/64 ; $31
08347 00                        	.db (DPCMSampleData_DrumSample - DPCMSampleData)/64 ; $60
08348 00                        	.db (DPCMSampleData_BossHurt - DPCMSampleData)/64 ; $0E
08349 00                        	.db (DPCMSampleData_PlayerDeath - DPCMSampleData)/64 ; $1D
0834A                           
0834A                           DMCLengthTable:
0834A 00                        	.db (DPCMSampleDataEnd_DoorOpenBombBom - DPCMSampleData_DoorOpenBombBom)/16 ; $43
0834B 00                        	.db (DPCMSampleDataEnd_DrumSample_A - DPCMSampleData_DrumSample)/16 ; $14
0834C 00                        	.db (DPCMSampleDataEnd_PlayerHurt - DPCMSampleData_PlayerHurt)/16 ; $10
0834D 00                        	.db (DPCMSampleDataEnd_ItemPull - DPCMSampleData_ItemPull)/16 ; $38
0834E 00                        	.db (DPCMSampleDataEnd_BossDeath - DPCMSampleData_BossDeath)/16 ; $48
0834F 00                        	.db (DPCMSampleDataEnd_DrumSample_B - DPCMSampleData_DrumSample)/16 ; $28
08350 00                        	.db (DPCMSampleDataEnd_BossHurt - DPCMSampleData_BossHurt)/16 ; $3C
08351 00                        	.db (DPCMSampleDataEnd_PlayerDeath - DPCMSampleData_PlayerDeath)/16 ; $50
08352                           
08352                           DMCFreqTable:
08352 0E                        	.db $0E
08353 0E                        	.db $0E
08354 0F                        	.db $0F
08355 0F                        	.db $0F
08356 0F                        	.db $0F
08357 0F                        	.db $0F
08358 0F                        	.db $0F
08359 0F                        	.db $0F
0835A 60                        	.db $60 ; ???
0835B                           
0835B                           
0835B                           ProcessMusicQueue_ThenReadNoteData:
0835B 4C 00 00                  	JMP ProcessMusicQueue_ReadNoteData
0835E                           
0835E                           ProcessMusicQueue_StopMusic:
0835E 4C 00 00                  	JMP StopMusic
08361                           
08361                           ProcessMusicQueue:
08361 AD 03 06                  	LDA MusicQueue2
08364 30 F8                     	BMI ProcessMusicQueue_StopMusic
08366                           
08366 C9 04                     	CMP #Music2_EndingAndCast
08368 F0 00                     	BEQ ProcessMusicQueue_EndingAndCast
0836A                           
0836A AD 03 06                  	LDA MusicQueue2
0836D D0 00                     	BNE ProcessMusicQueue_Part2
0836F                           
0836F AD 00 06                  	LDA MusicQueue1
08372 D0 00                     	BNE ProcessMusicQueue_MusicQueue1
08374                           
08374 AD 06 06                  	LDA MusicPlaying2
08377 0D 09 06                  	ORA MusicPlaying1
0837A D0 DF                     	BNE ProcessMusicQueue_ThenReadNoteData
0837C                           
0837C 60                        	RTS
0837D                           
0837D                           ProcessMusicQueue_EndingAndCast:
0837D 8D 06 06                  	STA MusicPlaying2
08380 A0 00                     	LDY #$00
08382 8C 09 06                  	STY MusicPlaying1
08385 A0 08                     	LDY #$08 ; index of ending music pointer
08387 D0 00                     	BNE ProcessMusicQueue_ReadFirstPointer
08389                           
08389                           ProcessMusicQueue_MusicQueue1:
08389 8D 09 06                  	STA MusicPlaying1
0838C A0 00                     	LDY #$00
0838E 8C 06 06                  	STY MusicPlaying2
08391 A0 FF                     	LDY #$FF
08393                           
08393                           IFNDEF EXPAND_MUSIC
08393                           ProcessMusicQueue_FirstPointerLoop:
08393 C8                        	INY
08394 4A                        	LSR A
08395 90 FC                     	BCC ProcessMusicQueue_FirstPointerLoop
08397                           ELSE
08397                           	TAY
08397                           	DEY
08397                           ENDIF
08397                           
08397                           ProcessMusicQueue_ReadFirstPointer:
08397 B9 00 00                  	LDA MusicPointersFirstPart, Y
0839A 8D EE 05                  	STA MusicPointerFirstPart
0839D B9 00 00                  	LDA MusicPointersEndPart, Y
083A0 18                        	CLC
083A1 69 02                     	ADC #$02
083A3 8D EF 05                  	STA MusicPointerEndPart
083A6 B9 00 00                  	LDA MusicPointersLoopPart, Y
083A9 8D F0 05                  	STA MusicPointerLoopPart
083AC AD EE 05                  	LDA MusicPointerFirstPart
083AF                           
083AF                           ProcessMusicQueue_SetCurrentPart:
083AF 8D EC 05                  	STA MusicPointerCurrentPart
083B2                           
083B2                           ProcessMusicQueue_SetNextPart:
083B2 EE EC 05                  	INC MusicPointerCurrentPart
083B5 AC EC 05                  	LDY MusicPointerCurrentPart
083B8 CC EF 05                  	CPY MusicPointerEndPart
083BB D0 00                     	BNE ProcessMusicQueue_ReadHeader
083BD                           
083BD AD F0 05                  	LDA MusicPointerLoopPart
083C0 D0 ED                     	BNE ProcessMusicQueue_SetCurrentPart
083C2                           
083C2 4C 00 00                  	JMP StopMusic
083C5                           
083C5                           ProcessMusicQueue_Part2:
083C5 8D 06 06                  	STA MusicPlaying2
083C8 AC 09 06                  	LDY MusicPlaying1
083CB 8C F3 05                  	STY MusicResume1
083CE A0 00                     	LDY #$00
083D0 8C 09 06                  	STY MusicPlaying1
083D3                           
083D3                           IFNDEF EXPAND_MUSIC
083D3                           ProcessMusicQueue_PointerLoop:
083D3 C8                        	INY
083D4 4A                        	LSR A
083D5 90 FC                     	BCC ProcessMusicQueue_PointerLoop
083D7                           ELSE
083D7                           	TAY
083D7                           ENDIF
083D7                           
083D7                           IFNDEF EXPAND_MUSIC
083D7                           ProcessMusicQueue_ReadHeader:
083D7 B9 00 00                  	LDA MusicPartPointers - 1, Y
083DA A8                        	TAY
083DB B9 00 00                  	LDA MusicPartPointers, Y
083DE 8D 12 06                  	STA MusicTempoSetting
083E1 B9 00 00                  	LDA MusicPartPointers + 1, Y
083E4 85 BB                     	STA CurrentMusicPointer
083E6 B9 00 00                  	LDA MusicPartPointers + 2, Y
083E9 85 BC                     	STA CurrentMusicPointer + 1
083EB B9 00 00                  	LDA MusicPartPointers + 3, Y
083EE 8D 15 06                  	STA CurrentMusicTriangleOffset
083F1 B9 00 00                  	LDA MusicPartPointers + 4, Y
083F4 8D 14 06                  	STA CurrentMusicSquare1Offset
083F7 B9 00 00                  	LDA MusicPartPointers + 5, Y
083FA 8D 16 06                  	STA CurrentMusicNoiseOffset
083FD 8D F5 05                  	STA CurrentMusicNoiseStartOffset
08400                           IFDEF PROTOTYPE_MUSIC_UNDERGROUND
08400                           	LDA MusicPartPointers + 6, Y
08400                           ENDIF
08400 8D FF 05                  	STA CurrentMusicDPCMOffset
08403 8D FC 05                  	STA CurrentMusicDPCMStartOffset
08406                           ENDIF
08406                           
08406                           IFDEF EXPAND_MUSIC
08406                           ProcessMusicQueue_ReadHeader:
08406                           	LDA MusicPartPointers - 1, Y
08406                           	TAY
08406                           
08406                           	LDA MusicHeaderPointersLo, Y
08406                           	STA byte_RAM_0
08406                           	LDA MusicHeaderPointersHi, Y
08406                           	STA byte_RAM_0+1
08406                           
08406                           	LDY #$00
08406                           
08406                           	LDA (byte_RAM_0), Y
08406                           	STA MusicTempoSetting
08406                           	INY
08406                           	LDA (byte_RAM_0), Y
08406                           	STA CurrentMusicPointer
08406                           	INY
08406                           	LDA (byte_RAM_0), Y
08406                           	STA CurrentMusicPointer + 1
08406                           	INY
08406                           	LDA (byte_RAM_0), Y
08406                           	STA CurrentMusicTriangleOffset
08406                           	INY
08406                           	LDA (byte_RAM_0), Y
08406                           	STA CurrentMusicSquare1Offset
08406                           	INY
08406                           	LDA (byte_RAM_0), Y
08406                           	STA CurrentMusicNoiseOffset
08406                           	STA CurrentMusicNoiseStartOffset
08406                           	INY
08406                           	LDA (byte_RAM_0), Y
08406                           	STA CurrentMusicDPCMOffset
08406                           	STA CurrentMusicDPCMStartOffset
08406                           ENDIF
08406                           
08406 A9 01                     	LDA #$01
08408 8D 18 06                  	STA MusicSquare2NoteLength
0840B 8D 1A 06                  	STA MusicSquare1NoteLength
0840E 8D 1D 06                  	STA MusicTriangleNoteLength
08411 8D 1E 06                  	STA MusicNoiseNoteLength
08414 8D FA 05                  	STA MusicDPCMNoteLength
08417                           
08417 A9 00                     	LDA #$00
08419 8D 13 06                  	STA CurrentMusicSquare2Offset
0841C 8D 0C 06                  	STA MusicSquare1NoteSweep
0841F                           IFDEF EXPAND_MUSIC
0841F                           	STA MusicSquare1NoteBend
0841F                           	STA MusicSquare2NoteBend
0841F                           ENDIF
0841F                           
0841F A9 0B                     	LDA #%00001011
08421 8D 15 40                  	STA SND_CHN
08424 A9 0F                     	LDA #%00001111
08426 8D 15 40                  	STA SND_CHN
08429                           
08429                           ProcessMusicQueue_ReadNoteData:
08429 CE 18 06                  	DEC MusicSquare2NoteLength
0842C D0 00                     	BNE ProcessMusicQueue_Square2SustainNote
0842E                           
0842E AC 13 06                  	LDY CurrentMusicSquare2Offset
08431 EE 13 06                  	INC CurrentMusicSquare2Offset
08434 B1 BB                     	LDA (CurrentMusicPointer), Y
08436 F0 00                     	BEQ ProcessMusicQueue_EndOfSegment
08438                           
08438 10 00                     	BPL ProcessMusicQueue_Square2Note
0843A                           
0843A D0 00                     	BNE ProcessMusicQueue_Square2Patch
0843C                           
0843C                           ProcessMusicQueue_EndOfSegment:
0843C AD 09 06                  	LDA MusicPlaying1
0843F D0 00                     	BNE ProcessMusicQueue_ThenSetNextPart
08441                           
08441 AD 06 06                  	LDA MusicPlaying2
08444 C9 04                     	CMP #Music2_EndingAndCast
08446 F0 00                     	BEQ ProcessMusicQueue_ThenSetNextPart
08448                           
08448                           IFNDEF EXPAND_MUSIC
08448 29 25                     	AND #Music1_Overworld | Music1_Inside | Music1_Subspace
0844A                           ELSE
0844A                           	JSR CheckStopMusic
0844A                           ENDIF
0844A F0 00                     	BEQ StopMusic
0844C                           
0844C AD F3 05                  	LDA MusicResume1
0844F D0 00                     	BNE ProcessMusicQueue_ResumeMusicQueue1
08451                           
08451                           StopMusic:
08451 A9 00                     	LDA #$00
08453 8D 06 06                  	STA MusicPlaying2
08456 8D 09 06                  	STA MusicPlaying1
08459 8D 15 40                  	STA SND_CHN
0845C A2 0F                     	LDX #%00001111
0845E 8E 15 40                  	STX SND_CHN
08461 60                        	RTS
08462                           
08462                           ProcessMusicQueue_ThenSetNextPart:
08462 4C B2 83                  	JMP ProcessMusicQueue_SetNextPart
08465                           
08465                           ProcessMusicQueue_ResumeMusicQueue1:
08465 4C 89 83                  	JMP ProcessMusicQueue_MusicQueue1
08468                           
08468                           ProcessMusicQueue_Square2Patch:
08468 AA                        	TAX
08469 29 F0                     	AND #$F0
0846B 8D F1 05                  	STA MusicSquare2Patch
0846E 8A                        	TXA
0846F 20 00 00                  	JSR ProcessMusicQueue_PatchNoteLength
08472                           
08472 8D 17 06                  	STA MusicSquare2NoteStartLength
08475                           
08475                           ProcessMusicQueue_Square2NextOffset:
08475 AC 13 06                  	LDY CurrentMusicSquare2Offset
08478 EE 13 06                  	INC CurrentMusicSquare2Offset
0847B B1 BB                     	LDA (CurrentMusicPointer), Y
0847D                           
0847D                           ProcessMusicQueue_Square2Note:
0847D AE 07 06                  	LDX SoundEffectPlaying1
08480 D0 00                     	BNE ProcessMusicQueue_Square2ContinueNote
08482                           
08482 20 00 00                  	JSR PlaySquare2Note
08485                           
08485 A8                        	TAY
08486 D0 00                     	BNE ProcessMusicQueue_Square2StartNote
08488                           
08488 A5 BF                     	LDA MusicSquareInstrumentStartOffset
0848A 4C 00 00                  	JMP ProcessMusicQueue_Square2UpdateNoteOffset
0848D                           
0848D                           ProcessMusicQueue_Square2StartNote:
0848D AD 17 06                  	LDA MusicSquare2NoteStartLength
08490                           	; seems like the next line should be LDX MusicSquareEnvelope based on the equivalent code for square 1?
08490 A6 BF                     	LDX MusicSquareInstrumentStartOffset ; always overridden in the following subroutine...?
08492 20 00 00                  	JSR SetInstrumentStartOffset
08495                           
08495                           ProcessMusicQueue_Square2UpdateNoteOffset:
08495 8D 19 06                  	STA MusicSquare2InstrumentOffset
08498                           
08498                           IFDEF EXPAND_MUSIC
08498                           	JSR CheckSquare2NoteBend
08498                           ENDIF
08498                           
08498 20 00 00                  	JSR SetSquare2VolumeAndSweep
0849B                           
0849B                           ProcessMusicQueue_Square2ContinueNote:
0849B AD 17 06                  	LDA MusicSquare2NoteStartLength
0849E 8D 18 06                  	STA MusicSquare2NoteLength
084A1                           
084A1                           ProcessMusicQueue_Square2SustainNote:
084A1 AE 07 06                  	LDX SoundEffectPlaying1
084A4 D0 00                     	BNE ProcessMusicQueue_Square1
084A6                           
084A6                           IFDEF EXPAND_MUSIC
084A6                           	LDA MusicSquare2NoteBend
084A6                           	BEQ ProcessMusicQueue_LoadSquare2InstrumentOffset
084A6                           
084A6                           	LDA MusicSquare2NoteStartLength
084A6                           	LDX #$04
084A6                           	JSR UpdateNoteBend
084A6                           ENDIF
084A6                           
084A6                           ProcessMusicQueue_LoadSquare2InstrumentOffset:
084A6 AC 19 06                  	LDY MusicSquare2InstrumentOffset
084A9 F0 00                     	BEQ ProcessMusicQueue_LoadSquare2Instrument
084AB                           
084AB CE 19 06                  	DEC MusicSquare2InstrumentOffset
084AE                           
084AE                           ProcessMusicQueue_LoadSquare2Instrument:
084AE AD 17 06                  	LDA MusicSquare2NoteStartLength
084B1 AE F1 05                  	LDX MusicSquare2Patch
084B4 20 00 00                  	JSR LoadSquareInstrumentDVE
084B7                           
084B7 8D 04 40                  	STA SQ2_VOL
084BA A2 7F                     	LDX #$7F
084BC 8E 05 40                  	STX SQ2_SWEEP
084BF                           
084BF                           ProcessMusicQueue_Square1:
084BF CE 1A 06                  	DEC MusicSquare1NoteLength
084C2 D0 00                     	BNE ProcessMusicQueue_Square1SustainNote
084C4                           
084C4                           ProcessMusicQueue_Square1Patch:
084C4 AC 14 06                  	LDY CurrentMusicSquare1Offset
084C7 EE 14 06                  	INC CurrentMusicSquare1Offset
084CA B1 BB                     	LDA (CurrentMusicPointer), Y
084CC 10 00                     	BPL ProcessMusicQueue_Square1AfterPatch
084CE                           
084CE AA                        	TAX
084CF 29 F0                     	AND #$F0
084D1 8D F2 05                  	STA MusicSquare1Patch
084D4 8A                        	TXA
084D5 20 00 00                  	JSR ProcessMusicQueue_PatchNoteLength
084D8                           
084D8 8D ED 05                  	STA MusicSquare1NoteStartLength
084DB                           
084DB                           ProcessMusicQueue_Square1NextOffset:
084DB AC 14 06                  	LDY CurrentMusicSquare1Offset
084DE EE 14 06                  	INC CurrentMusicSquare1Offset
084E1 B1 BB                     	LDA (CurrentMusicPointer), Y
084E3                           
084E3                           ProcessMusicQueue_Square1AfterPatch:
084E3 A8                        	TAY
084E4 D0 00                     	BNE ProcessMusicQueue_Square1Note
084E6                           
084E6 A9 83                     	LDA #$83
084E8 8D 00 40                  	STA SQ1_VOL
084EB A9 94                     	LDA #$94
084ED 8D 01 40                  	STA SQ1_SWEEP
084F0 8D 0C 06                  	STA MusicSquare1NoteSweep
084F3 D0 CF                     	BNE ProcessMusicQueue_Square1Patch
084F5                           
084F5                           ProcessMusicQueue_Square1Note:
084F5 AC 0D 06                  	LDY SoundEffectPlaying2
084F8 D0 00                     	BNE ProcessMusicQueue_Square1ContinueNote
084FA                           
084FA 20 00 00                  	JSR PlaySquare1Note
084FD                           
084FD D0 00                     	BNE ProcessMusicQueue_Square1StartNote
084FF                           
084FF A5 BF                     	LDA MusicSquareInstrumentStartOffset
08501 4C 00 00                  	JMP ProcessMusicQueue_Square1UpdateNoteOffset
08504                           
08504                           ProcessMusicQueue_Square1StartNote:
08504 AD ED 05                  	LDA MusicSquare1NoteStartLength
08507 A6 C0                     	LDX MusicSquareEnvelope ; always overridden in the following subroutine...?
08509 20 00 00                  	JSR SetInstrumentStartOffset
0850C                           
0850C                           ProcessMusicQueue_Square1UpdateNoteOffset:
0850C 8D 1B 06                  	STA MusicSquare1InstrumentOffset
0850F                           
0850F                           IFDEF EXPAND_MUSIC
0850F                           	JSR CheckSquare1NoteBend
0850F                           ENDIF
0850F                           
0850F 20 00 00                  	JSR SetSquare1VolumeAndSweep
08512                           
08512                           ProcessMusicQueue_Square1ContinueNote:
08512 AD ED 05                  	LDA MusicSquare1NoteStartLength
08515 8D 1A 06                  	STA MusicSquare1NoteLength
08518                           
08518                           ProcessMusicQueue_Square1SustainNote:
08518 AD 0D 06                  	LDA SoundEffectPlaying2
0851B D0 00                     	BNE ProcessMusicQueue_Triangle
0851D                           
0851D                           IFDEF EXPAND_MUSIC
0851D                           	LDA MusicSquare1NoteBend
0851D                           	BEQ ProcessMusicQueue_LoadSquare1InstrumentOffset
0851D                           
0851D                           	LDX #$00
0851D                           	LDA MusicSquare1NoteStartLength
0851D                           	JSR UpdateNoteBend
0851D                           ENDIF
0851D                           
0851D                           ProcessMusicQueue_LoadSquare1InstrumentOffset:
0851D AC 1B 06                  	LDY MusicSquare1InstrumentOffset
08520 F0 00                     	BEQ ProcessMusicQueue_Square1AfterDecrementInstrumentOffset
08522                           
08522 CE 1B 06                  	DEC MusicSquare1InstrumentOffset
08525                           
08525                           ProcessMusicQueue_Square1AfterDecrementInstrumentOffset:
08525 AD ED 05                  	LDA MusicSquare1NoteStartLength
08528 AE F2 05                  	LDX MusicSquare1Patch
0852B 20 00 00                  	JSR LoadSquareInstrumentDVE
0852E                           
0852E 8D 00 40                  	STA SQ1_VOL
08531 AD 0C 06                  	LDA MusicSquare1NoteSweep
08534 D0 00                     	BNE ProcessMusicQueue_Square1Sweep
08536                           
08536 A9 7F                     	LDA #$7F
08538                           
08538                           ProcessMusicQueue_Square1Sweep:
08538 8D 01 40                  	STA SQ1_SWEEP
0853B                           
0853B                           ProcessMusicQueue_Triangle:
0853B AD 15 06                  	LDA CurrentMusicTriangleOffset
0853E F0 00                     	BEQ ProcessMusicQueue_NoiseDPCM
08540                           
08540 CE 1D 06                  	DEC MusicTriangleNoteLength
08543 D0 00                     	BNE ProcessMusicQueue_NoiseDPCM
08545                           
08545 AC 15 06                  	LDY CurrentMusicTriangleOffset
08548 EE 15 06                  	INC CurrentMusicTriangleOffset
0854B B1 BB                     	LDA (CurrentMusicPointer), Y
0854D F0 00                     	BEQ ProcessMusicQueue_TriangleSetLength
0854F                           
0854F 10 00                     	BPL ProcessMusicQueue_TriangleNote
08551                           
08551 20 00 00                  	JSR ProcessMusicQueue_PatchNoteLength
08554                           
08554 8D 1C 06                  	STA MusicTriangleNoteStartLength
08557 A9 1F                     	LDA #$1F
08559 8D 08 40                  	STA TRI_LINEAR
0855C AC 15 06                  	LDY CurrentMusicTriangleOffset
0855F EE 15 06                  	INC CurrentMusicTriangleOffset
08562 B1 BB                     	LDA (CurrentMusicPointer), Y
08564 F0 00                     	BEQ ProcessMusicQueue_TriangleSetLength
08566                           
08566                           ProcessMusicQueue_TriangleNote:
08566 20 00 00                  	JSR PlayTriangleNote
08569                           
08569 AE 1C 06                  	LDX MusicTriangleNoteStartLength
0856C 8E 1D 06                  	STX MusicTriangleNoteLength
0856F 8A                        	TXA
08570 C9 0A                     	CMP #$0A
08572 90 00                     	BCC ProcessMusicQueue_TriangleNoteShort
08574                           
08574 C9 1E                     	CMP #$1E
08576 B0 00                     	BCS ProcessMusicQueue_TriangleNoteLong
08578                           
08578                           ProcessMusicQueue_TriangleNoteMedium:
08578 A9 24                     	LDA #$24
0857A D0 00                     	BNE ProcessMusicQueue_TriangleSetLength
0857C                           
0857C                           ProcessMusicQueue_TriangleNoteShort:
0857C A9 18                     	LDA #$18
0857E D0 00                     	BNE ProcessMusicQueue_TriangleSetLength
08580                           
08580                           ProcessMusicQueue_TriangleNoteLong:
08580 A9 6F                     	LDA #$6F
08582                           
08582                           ProcessMusicQueue_TriangleSetLength:
08582 8D 08 40                  	STA TRI_LINEAR
08585                           
08585                           ProcessMusicQueue_NoiseDPCM:
08585                           IFNDEF EXPAND_MUSIC
08585                           	IFNDEF PROTOTYPE_MUSIC_UNDERGROUND
08585                           		IFNDEF PROTOTYPE_MUSIC_STARMAN
08585                           			; skip to DPCM for underground/invincibility music
08585 AD 09 06                  			LDA MusicPlaying1
08588 29 14                     			AND #Music1_Inside | Music1_Invincible
0858A D0 00                     			BNE ProcessMusicQueue_DPCM
0858C                           		ELSE
0858C                           			; skip to DPCM for underground music ONLY
0858C                           			LDA MusicPlaying1
0858C                           			AND #Music1_Inside
0858C                           			BNE ProcessMusicQueue_DPCM
0858C                           		ENDIF
0858C                           	ELSE
0858C                           		IFNDEF PROTOTYPE_MUSIC_STARMAN
0858C                           			; no starman, underground
0858C                           			LDA MusicPlaying1
0858C                           			AND #Music1_Invincible
0858C                           			BNE ProcessMusicQueue_DPCM
0858C                           		ENDIF
0858C                           	ENDIF
0858C                           ENDIF
0858C                           
0858C                           ProcessMusicQueue_Noise:
0858C AD 16 06                  	LDA CurrentMusicNoiseOffset
0858F F0 00                     	BEQ ProcessMusicQueue_ThenNoiseEnd
08591                           
08591 CE 1E 06                  	DEC MusicNoiseNoteLength
08594 D0 00                     	BNE ProcessMusicQueue_ThenNoiseEnd
08596                           
08596                           ProcessMusicQueue_NoiseByte:
08596 AC 16 06                  	LDY CurrentMusicNoiseOffset
08599 EE 16 06                  	INC CurrentMusicNoiseOffset
0859C B1 BB                     	LDA (CurrentMusicPointer), Y
0859E F0 00                     	BEQ ProcessMusicQueue_NoiseLoopSegment
085A0                           
085A0 10 00                     	BPL ProcessMusicQueue_NoiseNote
085A2                           
085A2 20 00 00                  	JSR ProcessMusicQueue_PatchNoteLength
085A5                           
085A5 8D 1F 06                  	STA MusicNoiseNoteStartLength
085A8 AC 16 06                  	LDY CurrentMusicNoiseOffset
085AB EE 16 06                  	INC CurrentMusicNoiseOffset
085AE B1 BB                     	LDA (CurrentMusicPointer), Y
085B0 F0 00                     	BEQ ProcessMusicQueue_NoiseLoopSegment
085B2                           
085B2                           ProcessMusicQueue_NoiseNote:
085B2 4A                        	LSR A
085B3 A8                        	TAY
085B4 B9 00 00                  	LDA NoiseVolTable, Y
085B7 8D 0C 40                  	STA NOISE_VOL
085BA B9 00 00                  	LDA NoiseLoTable, Y
085BD 8D 0E 40                  	STA NOISE_LO
085C0 B9 00 00                  	LDA NoiseHiTable, Y
085C3 8D 0F 40                  	STA NOISE_HI
085C6 AD 1F 06                  	LDA MusicNoiseNoteStartLength
085C9 8D 1E 06                  	STA MusicNoiseNoteLength
085CC                           
085CC                           ProcessMusicQueue_ThenNoiseEnd:
085CC 4C 00 00                  	JMP ProcessMusicQueue_NoiseEnd
085CF                           
085CF                           ProcessMusicQueue_NoiseLoopSegment:
085CF AD F5 05                  	LDA CurrentMusicNoiseStartOffset
085D2 8D 16 06                  	STA CurrentMusicNoiseOffset
085D5 4C 96 85                  	JMP ProcessMusicQueue_NoiseByte
085D8                           
085D8                           ProcessMusicQueue_NoiseEnd:
085D8                           IFNDEF EXPAND_MUSIC
085D8 AD 09 06                  	LDA MusicPlaying1
085DB                           	IFNDEF PROTOTYPE_MUSIC_STARMAN
085DB 29 14                     		AND #Music1_Inside | Music1_Invincible
085DD                           	ELSE
085DD                           		AND #Music1_Inside
085DD                           	ENDIF
085DD D0 00                     	BNE ProcessMusicQueue_DPCM
085DF                           
085DF 60                        	RTS
085E0                           ENDIF
085E0                           
085E0                           ProcessMusicQueue_DPCM:
085E0 AD FF 05                  	LDA CurrentMusicDPCMOffset
085E3 F0 00                     	BEQ ProcessMusicQueue_DPCMEnd
085E5                           
085E5 CE FA 05                  	DEC MusicDPCMNoteLength
085E8 D0 00                     	BNE ProcessMusicQueue_DPCMEnd
085EA                           
085EA                           ProcessMusicQueue_DPCMByte:
085EA AC FF 05                  	LDY CurrentMusicDPCMOffset
085ED EE FF 05                  	INC CurrentMusicDPCMOffset
085F0 B1 BB                     	LDA (CurrentMusicPointer), Y
085F2 F0 00                     	BEQ ProcessMusicQueue_DPCMLoopSegment
085F4                           
085F4 10 00                     	BPL ProcessMusicQueue_DPCMNote
085F6                           
085F6 20 00 00                  	JSR ProcessMusicQueue_PatchNoteLength
085F9                           
085F9 8D FB 05                  	STA MusicDPCMNoteStartLength
085FC AC FF 05                  	LDY CurrentMusicDPCMOffset
085FF EE FF 05                  	INC CurrentMusicDPCMOffset
08602 B1 BB                     	LDA (CurrentMusicPointer), Y
08604 F0 00                     	BEQ ProcessMusicQueue_DPCMLoopSegment
08606                           
08606                           ProcessMusicQueue_DPCMNote:
08606                           	; POI: This left shift precludes using the first DPCM sample (bomb explosion) in the DPCM track.
08606                           	; This could be to allow $80 for a "rest" note on the DPCM track, but none of the in-game music
08606                           	; takes advantage of that.
08606                           IFNDEF EXPAND_MUSIC
08606 0A                        	ASL A
08607                           ENDIF
08607 8D 01 06                  	STA DPCMQueue
0860A 20 FD 82                  	JSR ProcessDPCMQueue
0860D                           
0860D AD FB 05                  	LDA MusicDPCMNoteStartLength
08610 8D FA 05                  	STA MusicDPCMNoteLength
08613                           
08613                           ProcessMusicQueue_DPCMEnd:
08613 60                        	RTS
08614                           
08614                           ProcessMusicQueue_DPCMLoopSegment:
08614 AD FC 05                  	LDA CurrentMusicDPCMStartOffset
08617 8D FF 05                  	STA CurrentMusicDPCMOffset
0861A 4C EA 85                  	JMP ProcessMusicQueue_DPCMByte
0861D                           
0861D                           
0861D                           NoiseVolTable:
0861D 10                        	.db $10
0861E 1E                        	.db $1E
0861F 1F                        	.db $1F
08620 16                        	.db $16
08621                           
08621                           NoiseLoTable:
08621 00                        	.db $00
08622 03                        	.db $03
08623 0A                        	.db $0A
08624 02                        	.db $02
08625                           
08625                           NoiseHiTable:
08625 00                        	.db $00
08626 18                        	.db $18
08627 18                        	.db $18
08628 58                        	.db $58
08629                           
08629                           
08629                           ; Input
08629                           ;   A = full patch byte
08629                           ; Output
08629                           ;   A = new note length
08629                           ProcessMusicQueue_PatchNoteLength:
08629 29 0F                     	AND #$0F
0862B 18                        	CLC
0862C 6D 12 06                  	ADC MusicTempoSetting
0862F A8                        	TAY
08630 B9 00 00                  	LDA NoteLengthTable, Y
08633 60                        	RTS
08634                           
08634                           ; Input
08634                           ;   A = note start length, >= $13 for table A, < $13 for instrument table B
08634                           ; Ouput
08634                           ;   A = starting instrument offset ($16 for short, $3F for long)
08634                           ;   X = duty/volume/envelope ($82)
08634                           ;   Y = sweep ($7F)
08634                           ;
08634                           SetInstrumentStartOffset:
08634 C9 13                     	CMP #$13
08636 90 00                     	BCC SetInstrumentStartOffset_Short
08638 A9 3F                     	LDA #$3F
0863A D0 00                     	BNE SetInstrumentStartOffset_Exit
0863C                           SetInstrumentStartOffset_Short:
0863C A9 16                     	LDA #$16
0863E                           SetInstrumentStartOffset_Exit:
0863E A2 82                     	LDX #$82
08640 A0 7F                     	LDY #$7F
08642 60                        	RTS
08643                           
08643                           ;
08643                           ; Loads instrument data for a square channel
08643                           ;
08643                           ; Each instrument has two lookup tables based on the note length.
08643                           ;
08643                           ; Input
08643                           ;   A = note length, >= $13 for table A, < $13 for instrument table B
08643                           ;   X = instrument patch
08643                           ;   Y = instrument offset
08643                           ; Output
08643                           ;   A = duty/volume/envelope
08643                           ;
08643                           LoadSquareInstrumentDVE:
08643 E0 90                     	CPX #$90
08645 F0 00                     	BEQ LoadSquareInstrumentDVE_90_E0
08647                           
08647 E0 E0                     	CPX #$E0
08649 F0 00                     	BEQ LoadSquareInstrumentDVE_90_E0
0864B                           
0864B E0 A0                     	CPX #$A0
0864D F0 00                     	BEQ LoadSquareInstrumentDVE_A0
0864F                           
0864F E0 B0                     	CPX #$B0
08651 F0 00                     	BEQ LoadSquareInstrumentDVE_B0
08653                           
08653 E0 C0                     	CPX #$C0
08655 F0 00                     	BEQ LoadSquareInstrumentDVE_C0
08657                           
08657 E0 D0                     	CPX #$D0
08659 F0 00                     	BEQ LoadSquareInstrumentDVE_D0
0865B                           
0865B E0 F0                     	CPX #$F0
0865D F0 00                     	BEQ LoadSquareInstrumentDVE_F0
0865F                           
0865F                           LoadSquareInstrumentDVE_80:
0865F C9 13                     	CMP #$13
08661 90 00                     	BCC LoadSquareInstrumentDVE_80_Short
08663 B9 00 00                  	LDA InstrumentDVE_80, Y
08666 D0 00                     	BNE LoadSquareInstrumentDVE_80_Exit
08668                           LoadSquareInstrumentDVE_80_Short:
08668 B9 00 00                  	LDA InstrumentDVE_80_Short, Y
0866B                           LoadSquareInstrumentDVE_80_Exit:
0866B 60                        	RTS
0866C                           
0866C                           LoadSquareInstrumentDVE_90_E0:
0866C C9 13                     	CMP #$13
0866E 90 00                     	BCC LoadSquareInstrumentDVE_90_E0_Short
08670 B9 00 00                  	LDA InstrumentDVE_90_E0, Y
08673 D0 00                     	BNE LoadSquareInstrumentDVE_90_E0_Exit
08675                           LoadSquareInstrumentDVE_90_E0_Short:
08675 B9 00 00                  	LDA InstrumentDVE_90_E0_Short, Y
08678                           LoadSquareInstrumentDVE_90_E0_Exit:
08678 60                        	RTS
08679                           
08679                           LoadSquareInstrumentDVE_A0:
08679 C9 13                     	CMP #$13
0867B 90 00                     	BCC LoadSquareInstrumentDVE_A0_Short
0867D B9 00 00                  	LDA InstrumentDVE_A0, Y
08680 D0 00                     	BNE LoadSquareInstrumentDVE_A0_Exit
08682                           LoadSquareInstrumentDVE_A0_Short:
08682 B9 00 00                  	LDA InstrumentDVE_A0_Short, Y
08685                           LoadSquareInstrumentDVE_A0_Exit:
08685 60                        	RTS
08686                           
08686                           LoadSquareInstrumentDVE_B0:
08686 C9 13                     	CMP #$13
08688 90 00                     	BCC LoadSquareInstrumentDVE_B0_Short
0868A B9 00 00                  	LDA InstrumentDVE_B0, Y
0868D D0 00                     	BNE LoadSquareInstrumentDVE_B0_Exit
0868F                           LoadSquareInstrumentDVE_B0_Short:
0868F B9 00 00                  	LDA InstrumentDVE_B0_Short, Y
08692                           LoadSquareInstrumentDVE_B0_Exit:
08692 60                        	RTS
08693                           
08693                           LoadSquareInstrumentDVE_C0:
08693 C9 13                     	CMP #$13
08695 90 00                     	BCC LoadSquareInstrumentDVE_C0_Short
08697 B9 00 00                  	LDA InstrumentDVE_C0, Y
0869A D0 00                     	BNE LoadSquareInstrumentDVE_C0_Exit
0869C                           LoadSquareInstrumentDVE_C0_Short:
0869C B9 00 00                  	LDA InstrumentDVE_C0_Short, Y
0869F                           LoadSquareInstrumentDVE_C0_Exit:
0869F 60                        	RTS
086A0                           
086A0                           LoadSquareInstrumentDVE_F0:
086A0 C9 13                     	CMP #$13
086A2 90 00                     	BCC LoadSquareInstrumentDVE_F0_Short
086A4 B9 00 00                  	LDA InstrumentDVE_F0, Y
086A7 D0 00                     	BNE LoadSquareInstrumentDVE_F0_Exit
086A9                           LoadSquareInstrumentDVE_F0_Short:
086A9 B9 00 00                  	LDA InstrumentDVE_F0_Short, Y
086AC                           LoadSquareInstrumentDVE_F0_Exit:
086AC 60                        	RTS
086AD                           
086AD                           LoadSquareInstrumentDVE_D0:
086AD C9 13                     	CMP #$13
086AF 90 00                     	BCC LoadSquareInstrumentDVE_D0_Short
086B1 B9 00 00                  	LDA InstrumentDVE_D0, Y
086B4 D0 00                     	BNE LoadSquareInstrumentDVE_D0_Exit
086B6                           LoadSquareInstrumentDVE_D0_Short:
086B6 B9 00 00                  	LDA InstrumentDVE_D0_Short, Y
086B9                           LoadSquareInstrumentDVE_D0_Exit:
086B9 60                        	RTS
086BA                           
086BA                           
086BA                           ; Sets volume/sweep on Square 1 channel
086BA                           ;
086BA                           ; Input
086BA                           ;   X = duty/volume/envelope
086BA                           ;   Y = sweep
086BA                           SetSquare1VolumeAndSweep:
086BA 8C 01 40                  	STY SQ1_SWEEP
086BD 8E 00 40                  	STX SQ1_VOL
086C0 60                        	RTS
086C1                           
086C1                           ; Sets volume/sweep on Square 2 channel
086C1                           ;
086C1                           ; Input
086C1                           ;   X = duty/volume/envelope
086C1                           ;   Y = sweep
086C1                           SetSquare2VolumeAndSweep:
086C1 8E 04 40                  	STX SQ2_VOL
086C4 8C 05 40                  	STY SQ2_SWEEP
086C7 60                        	RTS
086C8                           
086C8                           ; Sets volume/sweep on Square 1 channel and plays a note
086C8                           ;
086C8                           ; Input
086C8                           ;   A = note
086C8                           ;   X = duty/volume/envelope
086C8                           ;   Y = sweep
086C8                           PlaySquare1Sweep:
086C8 8E 00 40                  	STX SQ1_VOL
086CB 8C 01 40                  	STY SQ1_SWEEP
086CE                           
086CE                           ; Play a note on the Square 1 channel
086CE                           ;
086CE                           ; Input
086CE                           ;   A = note
086CE                           PlaySquare1Note:
086CE A2 00                     	LDX #$00
086D0                           
086D0                           ; Plays a note
086D0                           ;
086D0                           ; Input
086D0                           ;   A = note
086D0                           ;   X = channel
086D0                           ;       $00: square 1
086D0                           ;       $04: square 2
086D0                           ;       $08: triangle
086D0                           ;       $0C: noise
086D0                           ; Output
086D0                           ;   A = $00 for rest, hi frequency otherwise
086D0                           PlayNote:
086D0 C9 7E                     	CMP #$7E
086D2 D0 00                     	BNE PlayNote_NotRest
086D4                           
086D4 A9 10                     	LDA #$10
086D6 9D 00 40                  	STA SQ1_VOL, X
086D9 A9 00                     	LDA #$00
086DB 60                        	RTS
086DC                           
086DC                           PlayNote_NotRest:
086DC A0 01                     	LDY #$01
086DE 8C F4 05                  	STY NextOctave
086E1 48                        	PHA
086E2 A8                        	TAY
086E3 30 00                     	BMI PlayNote_LoadFrequencyData
086E5                           
086E5                           PlayNote_IncrementOctave:
086E5 EE F4 05                  	INC NextOctave
086E8 38                        	SEC
086E9 E9 18                     	SBC #$18
086EB 10 F8                     	BPL PlayNote_IncrementOctave
086ED                           
086ED                           PlayNote_LoadFrequencyData:
086ED 18                        	CLC
086EE 69 18                     	ADC #$18
086F0 A8                        	TAY
086F1 B9 00 00                  	LDA NoteFrequencyData, Y
086F4 85 BD                     	STA NextFrequencyLo
086F6 B9 00 00                  	LDA NoteFrequencyData + 1, Y
086F9 85 BE                     	STA NextFrequencyHi
086FB                           
086FB                           PlayNote_FrequencyOctaveLoop:
086FB 46 BE                     	LSR NextFrequencyHi
086FD 66 BD                     	ROR NextFrequencyLo
086FF CE F4 05                  	DEC NextOctave
08702 D0 F7                     	BNE PlayNote_FrequencyOctaveLoop
08704                           
08704 68                        	PLA
08705 C9 38                     	CMP #$38
08707 90 00                     	BCC PlayNote_CheckSquareChorus
08709                           
08709                           	; tweak the frequency for notes >= $38
08709 C6 BD                     	DEC NextFrequencyLo
0870B                           
0870B                           ;
0870B                           ; Square 2 plays slightly detuned when Square 1 is using instrument E0
0870B                           ;
0870B                           ; This can be used to achieve a honky tonk piano effect, which is used for the
0870B                           ; title screen as well as the bridge of the overworld theme.
0870B                           ;
0870B                           PlayNote_CheckSquareChorus:
0870B 8A                        	TXA
0870C C9 04                     	CMP #APUOffset_Square2
0870E D0 00                     	BNE PlayNote_SetFrequency
08710                           
08710 AD F2 05                  	LDA MusicSquare1Patch
08713 C9 E0                     	CMP #$E0
08715 F0 00                     	BEQ PlayNote_SetFrequency_Square2Detuned
08717                           
08717                           IFDEF EXPAND_MUSIC
08717                           	LDA MusicSquare1NoteBend, X
08717                           	BNE NoteBendStashFrequency
08717                           ENDIF
08717                           
08717                           PlayNote_SetFrequency:
08717 A5 BD                     	LDA NextFrequencyLo
08719 9D 02 40                  	STA SQ1_LO, X
0871C 9D F9 05                  	STA MusicSquare1Lo, X ; unused
0871F A5 BE                     	LDA NextFrequencyHi
08721 09 08                     	ORA #$08
08723 9D 03 40                  	STA SQ1_HI, X
08726 60                        	RTS
08727                           
08727                           PlayNote_SetFrequency_Square2Detuned:
08727 A5 BD                     	LDA NextFrequencyLo
08729 38                        	SEC
0872A E9 02                     	SBC #$02
0872C 8D 06 40                  	STA SQ2_LO
0872F 85 C2                     	STA MusicSquare2Lo
08731 A5 BE                     	LDA NextFrequencyHi
08733 09 08                     	ORA #$08
08735 8D 07 40                  	STA SQ2_HI
08738 60                        	RTS
08739                           
08739                           ; (not referenced)
08739                           ; Sets volume/sweep on Square 2 channel and plays a note
08739                           ;
08739                           ; Input
08739                           ;   A = note
08739                           ;   X = duty/volume/envelope
08739                           ;   Y = sweep
08739                           PlaySquare2Sweep:
08739 8E 04 40                  	STX SQ2_VOL
0873C 8C 05 40                  	STY SQ2_SWEEP
0873F                           
0873F                           ; Play a note on the Square 2 channel
0873F                           ;
0873F                           ; Input
0873F                           ;   A = note
0873F                           PlaySquare2Note:
0873F A2 04                     	LDX #APUOffset_Square2
08741 D0 8D                     	BNE PlayNote
08743                           
08743                           ; Play a note on the Triangle channel
08743                           ;
08743                           ; Input
08743                           ;   A = note
08743                           PlayTriangleNote:
08743 A2 08                     	LDX #APUOffset_Triangle
08745 D0 89                     	BNE PlayNote
08747                           
08747                           
08747                           IFDEF EXPAND_MUSIC
08747                           ;
08747                           ; Determines whether the currently playing track should stop
08747                           ;
08747                           ; Input
08747                           ;   A = MusicPlaying2
08747                           ;
08747                           CheckStopMusic:
08747                           	CMP #Music1_Overworld
08747                           	BEQ CheckStopMusic_Resume
08747                           	CMP #Music1_Inside
08747                           	BEQ CheckStopMusic_Resume
08747                           	CMP #Music1_Subspace
08747                           	BEQ CheckStopMusic_Resume
08747                           
08747                           CheckStopMusic_Stop:
08747                           	LDA #$00
08747                           	RTS
08747                           
08747                           CheckStopMusic_Resume:
08747                           	LDA #$01
08747                           	RTS
08747                           
08747                           
08747                           ;
08747                           ; Reads ahead to see if we have a note bend
08747                           ;
08747                           CheckSquare2NoteBend:
08747                           	LDY CurrentMusicSquare2Offset
08747                           	LDA (CurrentMusicPointer), Y
08747                           	CMP #$FF
08747                           	BNE CheckSquare2NoteBend_Exit
08747                           
08747                           	INC CurrentMusicSquare2Offset
08747                           
08747                           	LDA MusicSquare2Lo
08747                           	STA MusicSquare2NoteBend
08747                           
08747                           	PLA
08747                           	PLA
08747                           	JMP ProcessMusicQueue_Square2NextOffset
08747                           
08747                           CheckSquare2NoteBend_Exit:
08747                           	RTS
08747                           
08747                           
08747                           ;
08747                           ; Reads ahead to see if we have a note bend
08747                           ;
08747                           CheckSquare1NoteBend:
08747                           	LDY CurrentMusicSquare1Offset
08747                           	LDA (CurrentMusicPointer), Y
08747                           	CMP #$FF
08747                           	BNE CheckSquare1NoteBend_Exit
08747                           
08747                           	INC CurrentMusicSquare1Offset
08747                           
08747                           	LDA MusicSquare1Lo
08747                           	STA MusicSquare1NoteBend
08747                           
08747                           	PLA
08747                           	PLA
08747                           	JMP ProcessMusicQueue_Square1NextOffset
08747                           
08747                           CheckSquare1NoteBend_Exit:
08747                           	RTS
08747                           
08747                           
08747                           NoteBendStashFrequency:
08747                           	; If bend is in effect, this stores the last set frequency
08747                           	LDA <NextFrequencyLo
08747                           	STA MusicSquare1Lo, X
08747                           	RTS
08747                           
08747                           
08747                           ;
08747                           ; Updates note bend
08747                           ;
08747                           ; Input
08747                           ;   A = rest time remaining
08747                           ;   X = channel
08747                           ;       $00: square 1
08747                           ;       $04: square 2
08747                           ;
08747                           UpdateNoteBend:
08747                           	AND #%00000011
08747                           	CMP #$03
08747                           	BEQ UpdateNoteBend_AfterDecrement
08747                           
08747                           	DEC MusicSquare1NoteBend, X
08747                           
08747                           UpdateNoteBend_AfterDecrement:
08747                           	LDA MusicSquare1NoteBend, X
08747                           	CMP MusicSquare1Lo, X
08747                           	BCS UpdateNoteBend_Exit
08747                           
08747                           	LDA #$00
08747                           	STA MusicSquare1NoteBend, X
08747                           	LDA MusicSquare1Lo, X
08747                           
08747                           UpdateNoteBend_Exit:
08747                           	STA SQ1_LO, X
08747                           	RTS
08747                           ENDIF
08747                           
08747                           
08747                           ;
08747                           ; -------------------------------------------------------------------------
08747                           ; Various bits of the music engine have been extracted into separate files;
08747                           ; see the individual files for details on the formats within
08747                           ;
08747                           
08747                           ; Frequency table for notes; standard between various Mario games
08747                           .include "src/music/frequency-table.asm";
08747                           NoteFrequencyData:
08747 B8 1A                     	.dw $1AB8 ; C
08749 38 19                     	.dw $1938 ; C# / Db
0874B CC 17                     	.dw $17CC ; D
0874D 78 16                     	.dw $1678 ; D# / Eb
0874F 34 15                     	.dw $1534 ; E
08751 04 14                     	.dw $1404 ; F
08753 E4 12                     	.dw $12E4 ; F# / Gb
08755 D4 11                     	.dw $11D4 ; G
08757 D4 10                     	.dw $10D4 ; G# / Ab
08759 E0 0F                     	.dw $0FE0 ; A
0875B FC 0E                     	.dw $0EFC ; A# / Bb
0875D 24 0E                     	.dw $0E24 ; B
0875F                           
0875F                           ; Unused space in the original ($875F - $8EFF)
0875F                           unusedSpace $8F00, $FF
0875F                           	IFDEF PRESERVE_UNUSED_SPACE
0875F FF FF FF FF FF FF FF FF.. 		.pad $8F00, $FF
08F00                           	ENDIF
08F00                           
08F00                           ; Note lengths for various BPM settings
08F00                           .include "src/music/note-lengths.asm";
08F00                           ;
08F00                           ; Note Lengths
08F00                           ; ============
08F00                           ;
08F00                           ; These are lookup tables used to determine note lengths (in ticks).
08F00                           ;
08F00                           ; There are a few weird values floating around, but it's generally broken into
08F00                           ; groups of 13 note lengths that correspond to a tempo as follows:
08F00                           ;
08F00                           ; $x0: 1/16 note (rounding down)
08F00                           ; $x1: 1/16 note (rounding up)
08F00                           ; $x2: 1/4 note triplet (rounding down)
08F00                           ; $x3: 1/4 note triplet (rounding up)
08F00                           ; $x4: 1/8 note
08F00                           ; $x5: dotted 1/8 note
08F00                           ; $x6: 1/2 note triplet (rounding down)
08F00                           ; $x7: 1/2 note triplet (rounding up)
08F00                           ; $x8: 1/4 note
08F00                           ; $x9: dotted 1/4 note
08F00                           ; $xA: 1/2 note
08F00                           ; $xB: dotted 1/2 note
08F00                           ; $xC: whole note
08F00                           ; $xD: dotted whole note (usually not defined)
08F00                           ; $xE: double note (usually note defined)
08F00                           ; $xF: usually not defined
08F00                           ;
08F00                           ; 14400 is the number of ticks in a minute (4 ticks * 60 fps * 60 seconds), and
08F00                           ; you can work out the tempo by dividing 14400 by the length of a whole note.
08F00                           ;
08F00                           NoteLengthTable:
08F00                           
08F00                           ; Character Select
08F00                           ; Star
08F00                           ; Crystal
08F00                           ; Game Over
08F00                           ; Boss Beaten
08F00                           NoteLengthTable_300bpm:
08F00                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
08F00 03 03 04 04 06 09 08 08.. 	.db $03, $03, $04, $04, $06, $09, $08, $08, $0C, $12, $18, $24, $30
08F0D                           
08F0D                           NoteLengthTable_257bpm: ; rounded
08F0D                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
08F0D 03 04 05 04 07 0A 09 0A.. 	.db $03, $04, $05, $04, $07, $0A, $09, $0A, $0E, $15, $1C, $2A, $38
08F1A 0B                        	.db $0B ; junk?
08F1B                           
08F1B                           ; Title Screen
08F1B                           NoteLengthTable_225bpm:
08F1B                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
08F1B 04 04 05 06 08 0C 0B 0A.. 	.db $04, $04, $05, $06, $08, $0C, $0B, $0A, $10, $18, $20, $30, $40
08F28                           
08F28                           ; Overworld
08F28                           ; Boss
08F28                           ; Wart
08F28                           ; Death
08F28                           ; Subspace
08F28                           NoteLengthTable_200bpm:
08F28                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
08F28 04 05 06 06 09 0D 0C 0C.. 	.db $04, $05, $06, $06, $09, $0D, $0C, $0C, $12, $1B, $24, $36, $48
08F35 0E 03                     	.db $0E, $03 ; junk?
08F37                           
08F37                           NoteLengthTable_180bpm:
08F37                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
08F37 05 05 07 06 0A 0F 0D 0E.. 	.db $05, $05, $07, $06, $0A, $0F, $0D, $0E, $14, $1E, $28, $3C, $50
08F44                           
08F44                           NoteLengthTable_164bpm: ; rounded, 163.64 bpm
08F44                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
08F44 05 06 07 08 0B 10 0F 0E.. 	.db $05, $06, $07, $08, $0B, $10, $0F, $0E, $16, $21, $2C, $42, $58
08F51 11                        	.db $11 ; junk?
08F52                           
08F52                           ; Bonus Chance
08F52                           NoteLengthTable_150bpm:
08F52                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
08F52 06 06 08 08 0C 12 10 10.. 	.db $06, $06, $08, $08, $0C, $12, $10, $10, $18, $24, $30, $48, $60
08F5F 02                        	.db $02 ; junk?
08F60                           
08F60                           NoteLengthTable_138bpm: ; rounded, 138.46 bpm
08F60                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
08F60 06 07 09 08 0D 13 11 12.. 	.db $06, $07, $09, $08, $0D, $13, $11, $12, $1A, $27, $34, $4E, $68
08F6D 14                        	.db $14 ; junk?
08F6E                           
08F6E                           ; Underground
08F6E                           ; Ending
08F6E                           NoteLengthTable_129bpm: ; rounded, 128.57
08F6E                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
08F6E 07 07 09 0A 0E 15 13 12.. 	.db $07, $07, $09, $0A, $0E, $15, $13, $12, $1C, $2A, $38, $54, $70
08F7B 03 04                     	.db $03, $04 ; junk?
08F7D                           
08F7D                           NoteLengthTable_120bpm:
08F7D                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
08F7D 07 08 0A 0A 0F 16 14 14.. 	.db $07, $08, $0A, $0A, $0F, $16, $14, $14, $1E, $2D, $3C, $5A, $78
08F8A 17                        	.db $17 ; junk?
08F8B                           
08F8B                           NoteLengthTable_112bpm: ; rounded, 112.5 bpm
08F8B                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
08F8B 08 08 0B 0A 10 18 15 16.. 	.db $08, $08, $0B, $0A, $10, $18, $15, $16, $20, $30, $40, $60, $80
08F98                           
08F98                           NoteLengthTable_106bpm: ; rounded, 105.88 bpm
08F98                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
08F98 08 09 0B 0C 11 19 15 16.. 	.db $08, $09, $0B, $0C, $11, $19, $15, $16, $22, $33, $44, $60, $88
08FA5 1A                        	.db $1A ; junk?
08FA6                           
08FA6                           NoteLengthTable_100bpm:
08FA6                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
08FA6 09 09 0C 0C 12 1B 18 18.. 	.db $09, $09, $0C, $0C, $12, $1B, $18, $18, $24, $36, $48, $6C, $90
08FB3                           
08FB3                           ; Unused space in the original ($8FB3 - $8FFF)
08FB3                           unusedSpace $9000, $FF
08FB3                           	IFDEF PRESERVE_UNUSED_SPACE
08FB3 FF FF FF FF FF FF FF FF.. 		.pad $9000, $FF
09000                           	ENDIF
09000                           
09000                           ; Pointers to music segments
09000                           IFNDEF EXPAND_MUSIC
09000                           	.include "src/music/music-part-pointers.asm"
09000                           ;
09000                           ; Music Part Pointers
09000                           ; ===================
09000                           ;
09000                           ; These are the pointers to various music segments used to cue those themes in
09000                           ; the game as well as handle relative offsets for looping segments
09000                           ;
09000                           MusicPartPointers:
09000                           
09000                           ; These pointers correspond to MusicQueue2 fanfares that temporarily interrupt
09000                           ; the current background music
09000                           MusicPartPointers_Mushroom:
09000                           	musicPart MusicHeaderMushroomBonusChance
09000 00                        	.db (MusicHeaderMushroomBonusChance - MusicPartPointers)
09001                           
09001                           MusicPartPointers_BossBeaten:
09001                           	musicPart MusicHeaderBossBeaten
09001 00                        	.db (MusicHeaderBossBeaten - MusicPartPointers)
09002                           
09002                           ; This version of the crystal fanfare is unused, because special logic in
09002                           ; ProcessMusicQueue uses this slot for the ending theme instead.
09002                           MusicPartPointers_CrystalUnused:
09002                           	musicPart MusicHeaderCrystal
09002 00                        	.db (MusicHeaderCrystal - MusicPartPointers)
09003                           
09003                           MusicPartPointers_Death:
09003                           	musicPart MusicHeaderDeath
09003 00                        	.db (MusicHeaderDeath - MusicPartPointers)
09004                           
09004                           MusicPartPointers_GameOver:
09004                           	musicPart MusicHeaderGameOver
09004 00                        	.db (MusicHeaderGameOver - MusicPartPointers)
09005                           
09005                           MusicPartPointers_Crystal:
09005                           	musicPart MusicHeaderCrystal
09005 00                        	.db (MusicHeaderCrystal - MusicPartPointers)
09006                           
09006                           MusicPartPointers_BonusChance:
09006                           	musicPart MusicHeaderMushroomBonusChance
09006 00                        	.db (MusicHeaderMushroomBonusChance - MusicPartPointers)
09007                           
09007                           ; The rest of the pointers correspond to music that uses the pointer tables
09007                           ; with support for segment-based looping.
09007                           MusicPartPointers_CharacterSelect:
09007                           	musicPart MusicHeaderCharacterSelect1
09007 00                        	.db (MusicHeaderCharacterSelect1 - MusicPartPointers)
09008                           MusicPartPointers_CharacterSelectLoop:
09008                           	musicPart MusicHeaderCharacterSelect2
09008 00                        	.db (MusicHeaderCharacterSelect2 - MusicPartPointers)
09009                           	musicPart MusicHeaderCharacterSelect3
09009 00                        	.db (MusicHeaderCharacterSelect3 - MusicPartPointers)
0900A                           	musicPart MusicHeaderCharacterSelect2
0900A 00                        	.db (MusicHeaderCharacterSelect2 - MusicPartPointers)
0900B                           	musicPart MusicHeaderCharacterSelect4
0900B 00                        	.db (MusicHeaderCharacterSelect4 - MusicPartPointers)
0900C                           	musicPart MusicHeaderCharacterSelect5
0900C 00                        	.db (MusicHeaderCharacterSelect5 - MusicPartPointers)
0900D                           	musicPart MusicHeaderCharacterSelect6
0900D 00                        	.db (MusicHeaderCharacterSelect6 - MusicPartPointers)
0900E                           	musicPart MusicHeaderCharacterSelect7
0900E 00                        	.db (MusicHeaderCharacterSelect7 - MusicPartPointers)
0900F                           MusicPartPointers_CharacterSelectEnd:
0900F                           	musicPart MusicHeaderCharacterSelect8
0900F 00                        	.db (MusicHeaderCharacterSelect8 - MusicPartPointers)
09010                           
09010                           
09010                           MusicPartPointers_Overworld:
09010                           	musicPart MusicHeaderOverworld1
09010 00                        	.db (MusicHeaderOverworld1 - MusicPartPointers)
09011                           MusicPartPointers_OverworldLoop:
09011                           	musicPart MusicHeaderOverworld2
09011 00                        	.db (MusicHeaderOverworld2 - MusicPartPointers)
09012                           	musicPart MusicHeaderOverworld3
09012 00                        	.db (MusicHeaderOverworld3 - MusicPartPointers)
09013                           	musicPart MusicHeaderOverworld4
09013 00                        	.db (MusicHeaderOverworld4 - MusicPartPointers)
09014                           	musicPart MusicHeaderOverworld3
09014 00                        	.db (MusicHeaderOverworld3 - MusicPartPointers)
09015                           	musicPart MusicHeaderOverworld5
09015 00                        	.db (MusicHeaderOverworld5 - MusicPartPointers)
09016                           MusicPartPointers_OverworldEnd:
09016                           	musicPart MusicHeaderOverworld6
09016 00                        	.db (MusicHeaderOverworld6 - MusicPartPointers)
09017                           
09017                           
09017                           MusicPartPointers_Boss:
09017                           MusicPartPointers_BossLoop:
09017                           MusicPartPointers_BossEnd:
09017                           	musicPart MusicHeaderBoss
09017 00                        	.db (MusicHeaderBoss - MusicPartPointers)
09018                           
09018                           
09018                           IFNDEF PROTOTYPE_MUSIC_STARMAN
09018                           MusicPartPointers_Star:
09018                           MusicPartPointers_StarLoop:
09018                           MusicPartPointers_StarEnd:
09018                           	musicPart MusicHeaderStar
09018 00                        	.db (MusicHeaderStar - MusicPartPointers)
09019                           ELSE
09019                           MusicPartPointers_StarBeta:
09019                           MusicPartPointers_StarBetaLoop:
09019                           MusicPartPointers_StarBetaEnd:
09019                           	musicPart MusicHeaderStarBeta
09019                           ENDIF
09019                           
09019                           MusicPartPointers_Wart:
09019                           MusicPartPointers_WartLoop:
09019                           MusicPartPointers_WartEnd:
09019                           	musicPart MusicHeaderWart
09019 00                        	.db (MusicHeaderWart - MusicPartPointers)
0901A                           
0901A                           
0901A                           MusicPartPointers_TitleScreen:
0901A                           	musicPart MusicHeaderTitleScreen1
0901A 00                        	.db (MusicHeaderTitleScreen1 - MusicPartPointers)
0901B                           	musicPart MusicHeaderTitleScreen2
0901B 00                        	.db (MusicHeaderTitleScreen2 - MusicPartPointers)
0901C                           	musicPart MusicHeaderTitleScreen3
0901C 00                        	.db (MusicHeaderTitleScreen3 - MusicPartPointers)
0901D                           MusicPartPointers_TitleScreenEnd:
0901D                           	musicPart MusicHeaderTitleScreen4
0901D 00                        	.db (MusicHeaderTitleScreen4 - MusicPartPointers)
0901E                           
0901E                           
0901E                           MusicPartPointers_SubSpace:
0901E                           MusicPartPointers_SubSpaceLoop:
0901E                           	musicPart MusicHeaderSubspace1
0901E 00                        	.db (MusicHeaderSubspace1 - MusicPartPointers)
0901F                           	musicPart MusicHeaderSubspace2
0901F 00                        	.db (MusicHeaderSubspace2 - MusicPartPointers)
09020                           	musicPart MusicHeaderSubspace3
09020 00                        	.db (MusicHeaderSubspace3 - MusicPartPointers)
09021                           	musicPart MusicHeaderSubspace2
09021 00                        	.db (MusicHeaderSubspace2 - MusicPartPointers)
09022                           MusicPartPointers_SubSpaceEnd:
09022                           	musicPart MusicHeaderSubspace4
09022 00                        	.db (MusicHeaderSubspace4 - MusicPartPointers)
09023                           
09023                           
09023                           MusicPartPointers_Ending:
09023                           	musicPart MusicHeaderEnding1
09023 00                        	.db (MusicHeaderEnding1 - MusicPartPointers)
09024                           	musicPart MusicHeaderEnding2
09024 00                        	.db (MusicHeaderEnding2 - MusicPartPointers)
09025                           	musicPart MusicHeaderEnding3
09025 00                        	.db (MusicHeaderEnding3 - MusicPartPointers)
09026                           	musicPart MusicHeaderEnding4
09026 00                        	.db (MusicHeaderEnding4 - MusicPartPointers)
09027                           IFNDEF PROTOTYPE_MUSIC_ENDING
09027                           	musicPart MusicHeaderEnding5
09027 00                        	.db (MusicHeaderEnding5 - MusicPartPointers)
09028                           MusicPartPointers_EndingLoop:
09028                           MusicPartPointers_EndingEnd:
09028                           	musicPart MusicHeaderEnding6
09028 00                        	.db (MusicHeaderEnding6 - MusicPartPointers)
09029                           ELSE
09029                           MusicPartPointers_EndingEnd:
09029                           	musicPart MusicHeaderEnding5
09029                           ENDIF
09029                           
09029                           
09029                           IFNDEF PROTOTYPE_MUSIC_UNDERGROUND
09029                           MusicPartPointers_Underground:
09029                           MusicPartPointers_UndergroundLoop:
09029                           MusicPartPointers_UndergroundEnd:
09029                           	musicPart MusicHeaderUnderground
09029 00                        	.db (MusicHeaderUnderground - MusicPartPointers)
0902A                           ELSE
0902A                           MusicPartPointers_UndergroundBeta:
0902A                           MusicPartPointers_UndergroundBetaLoop:
0902A                           	musicPart MusicHeaderUndergroundBeta1
0902A                           	musicPart MusicHeaderUndergroundBeta1
0902A                           	musicPart MusicHeaderUndergroundBeta2
0902A                           MusicPartPointers_UndergroundBetaEnd:
0902A                           	musicPart MusicHeaderUndergroundBeta2
0902A                           ENDIF
0902A                           ELSE
0902A                           	.include "src/music/music-part-pointers-expanded.asm"
0902A                           ENDIF
0902A                           
0902A                           ; Headers for songs (BPM, tracks to use, etc)
0902A                           .include "src/music/music-headers.asm"
0902A                           ;
0902A                           ; Music Headers
0902A                           ; =============
0902A                           ;
0902A                           ; These are broken down by song segment and point to the note length table and
0902A                           ; and individual channel data. Square 2 is the main pointer, and triangle,
0902A                           ; square 1, and noise are stored as offets relative to the main pointer.
0902A                           ;
0902A                           ; Bytes:
0902A                           ;   00: Note length table (from $8F00)
0902A                           ;   01: Main address / Square 2 (lo)
0902A                           ;   02: Main address / Square 2 (hi)
0902A                           ;   03: Triangle offset from main
0902A                           ;   04: Square 1 offset from main
0902A                           ;   05: Noise/DPCM offset from main
0902A                           ;
0902A                           ; For the musicHeader macro, specifying $00 is "none", -1 for noise/pcm is "omit".
0902A                           ; Some of the music headers use the $00 from the next header's note length table,
0902A                           ; to save one byte (in a ROM /full/ of unused space...)
0902A                           ;
0902A                           ; This turns out to be important because the music part pointers are stored as
0902A                           ; offsets from MusicPartPointers, which means they can't be larger than $FF!
0902A                           ;
0902A                           MusicPartHeaders:
0902A                           
0902A                           ; ----------------------------------------
0902A                           ; Character select segments 1 through 5
0902A                           ; (6 through 8 are a ways below this)
0902A                           MusicHeaderCharacterSelect1:
0902A                           	musicHeader NoteLengthTable_300bpm, MusicDataCharacterSelect1, MusicDataCharacterSelect1_Triangle, MusicDataCharacterSelect1_Square1, MusicDataCharacterSelect1_Noise, -1
0902A                           	noteLength NoteLengthTable_300bpm
0902A 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
0902B 00 00                     	.dw MusicDataCharacterSelect1
0902D                           	IF MusicDataCharacterSelect1_Triangle <= 0
0902D                           		.db $00
0902D                           	ELSE
0902D                           		.db (MusicDataCharacterSelect1_Triangle - MusicDataCharacterSelect1)
0902D                           	ENDIF
0902D                           	IF MusicDataCharacterSelect1_Square1 <= 0
0902D                           		.db $00
0902D                           	ELSE
0902D                           		.db (MusicDataCharacterSelect1_Square1 - MusicDataCharacterSelect1)
0902D                           	ENDIF
0902D                           
0902D                           	IFNDEF EXPAND_MUSIC
0902D                           		IF MusicDataCharacterSelect1_Noise = 0
0902D                           			.db $00
0902D                           		ELSEIF MusicDataCharacterSelect1_Noise > 0
0902D                           			.db (MusicDataCharacterSelect1_Noise - MusicDataCharacterSelect1)
0902D                           		ENDIF
0902D                           		IF -1 = 0
0902D                           			.db $00
0902D                           		ELSEIF -1 > 0
0902D                           			.db (-1 - MusicDataCharacterSelect1)
0902D                           		ENDIF
0902D                           	ELSE
0902D                           		IF MusicDataCharacterSelect1_Noise <= 0
0902D                           			.db $00
0902D                           		ELSE
0902D                           			.db (MusicDataCharacterSelect1_Noise - MusicDataCharacterSelect1)
0902D                           		ENDIF
0902D                           		IF -1 <= 0
0902D                           			.db $00
0902D                           		ELSE
0902D                           			.db (-1 - MusicDataCharacterSelect1)
0902D                           		ENDIF
0902D                           	ENDIF
0902D                           
0902D                           MusicHeaderCharacterSelect2:
0902D                           	musicHeader NoteLengthTable_300bpm, MusicDataCharacterSelect2, MusicDataCharacterSelect2_Triangle, MusicDataCharacterSelect2_Square1, MusicDataCharacterSelect2_Noise, -1
0902D                           	noteLength NoteLengthTable_300bpm
0902D 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
0902E 00 00                     	.dw MusicDataCharacterSelect2
09030                           	IF MusicDataCharacterSelect2_Triangle <= 0
09030                           		.db $00
09030                           	ELSE
09030                           		.db (MusicDataCharacterSelect2_Triangle - MusicDataCharacterSelect2)
09030                           	ENDIF
09030                           	IF MusicDataCharacterSelect2_Square1 <= 0
09030                           		.db $00
09030                           	ELSE
09030                           		.db (MusicDataCharacterSelect2_Square1 - MusicDataCharacterSelect2)
09030                           	ENDIF
09030                           
09030                           	IFNDEF EXPAND_MUSIC
09030                           		IF MusicDataCharacterSelect2_Noise = 0
09030                           			.db $00
09030                           		ELSEIF MusicDataCharacterSelect2_Noise > 0
09030                           			.db (MusicDataCharacterSelect2_Noise - MusicDataCharacterSelect2)
09030                           		ENDIF
09030                           		IF -1 = 0
09030                           			.db $00
09030                           		ELSEIF -1 > 0
09030                           			.db (-1 - MusicDataCharacterSelect2)
09030                           		ENDIF
09030                           	ELSE
09030                           		IF MusicDataCharacterSelect2_Noise <= 0
09030                           			.db $00
09030                           		ELSE
09030                           			.db (MusicDataCharacterSelect2_Noise - MusicDataCharacterSelect2)
09030                           		ENDIF
09030                           		IF -1 <= 0
09030                           			.db $00
09030                           		ELSE
09030                           			.db (-1 - MusicDataCharacterSelect2)
09030                           		ENDIF
09030                           	ENDIF
09030                           
09030                           MusicHeaderCharacterSelect3:
09030                           	musicHeader NoteLengthTable_300bpm, MusicDataCharacterSelect3, MusicDataCharacterSelect3_Triangle, MusicDataCharacterSelect3_Square1, MusicDataCharacterSelect3_Noise, -1
09030                           	noteLength NoteLengthTable_300bpm
09030 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
09031 00 00                     	.dw MusicDataCharacterSelect3
09033                           	IF MusicDataCharacterSelect3_Triangle <= 0
09033                           		.db $00
09033                           	ELSE
09033                           		.db (MusicDataCharacterSelect3_Triangle - MusicDataCharacterSelect3)
09033                           	ENDIF
09033                           	IF MusicDataCharacterSelect3_Square1 <= 0
09033                           		.db $00
09033                           	ELSE
09033                           		.db (MusicDataCharacterSelect3_Square1 - MusicDataCharacterSelect3)
09033                           	ENDIF
09033                           
09033                           	IFNDEF EXPAND_MUSIC
09033                           		IF MusicDataCharacterSelect3_Noise = 0
09033                           			.db $00
09033                           		ELSEIF MusicDataCharacterSelect3_Noise > 0
09033                           			.db (MusicDataCharacterSelect3_Noise - MusicDataCharacterSelect3)
09033                           		ENDIF
09033                           		IF -1 = 0
09033                           			.db $00
09033                           		ELSEIF -1 > 0
09033                           			.db (-1 - MusicDataCharacterSelect3)
09033                           		ENDIF
09033                           	ELSE
09033                           		IF MusicDataCharacterSelect3_Noise <= 0
09033                           			.db $00
09033                           		ELSE
09033                           			.db (MusicDataCharacterSelect3_Noise - MusicDataCharacterSelect3)
09033                           		ENDIF
09033                           		IF -1 <= 0
09033                           			.db $00
09033                           		ELSE
09033                           			.db (-1 - MusicDataCharacterSelect3)
09033                           		ENDIF
09033                           	ENDIF
09033                           
09033                           MusicHeaderCharacterSelect4:
09033                           	musicHeader NoteLengthTable_300bpm, MusicDataCharacterSelect4, MusicDataCharacterSelect4_Triangle, MusicDataCharacterSelect4_Square1, MusicDataCharacterSelect4_Noise, -1
09033                           	noteLength NoteLengthTable_300bpm
09033 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
09034 00 00                     	.dw MusicDataCharacterSelect4
09036                           	IF MusicDataCharacterSelect4_Triangle <= 0
09036                           		.db $00
09036                           	ELSE
09036                           		.db (MusicDataCharacterSelect4_Triangle - MusicDataCharacterSelect4)
09036                           	ENDIF
09036                           	IF MusicDataCharacterSelect4_Square1 <= 0
09036                           		.db $00
09036                           	ELSE
09036                           		.db (MusicDataCharacterSelect4_Square1 - MusicDataCharacterSelect4)
09036                           	ENDIF
09036                           
09036                           	IFNDEF EXPAND_MUSIC
09036                           		IF MusicDataCharacterSelect4_Noise = 0
09036                           			.db $00
09036                           		ELSEIF MusicDataCharacterSelect4_Noise > 0
09036                           			.db (MusicDataCharacterSelect4_Noise - MusicDataCharacterSelect4)
09036                           		ENDIF
09036                           		IF -1 = 0
09036                           			.db $00
09036                           		ELSEIF -1 > 0
09036                           			.db (-1 - MusicDataCharacterSelect4)
09036                           		ENDIF
09036                           	ELSE
09036                           		IF MusicDataCharacterSelect4_Noise <= 0
09036                           			.db $00
09036                           		ELSE
09036                           			.db (MusicDataCharacterSelect4_Noise - MusicDataCharacterSelect4)
09036                           		ENDIF
09036                           		IF -1 <= 0
09036                           			.db $00
09036                           		ELSE
09036                           			.db (-1 - MusicDataCharacterSelect4)
09036                           		ENDIF
09036                           	ENDIF
09036                           
09036                           MusicHeaderCharacterSelect5:
09036                           	musicHeader NoteLengthTable_300bpm, MusicDataCharacterSelect5, MusicDataCharacterSelect5_Triangle, MusicDataCharacterSelect5_Square1, MusicDataCharacterSelect5_Noise, -1
09036                           	noteLength NoteLengthTable_300bpm
09036 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
09037 00 00                     	.dw MusicDataCharacterSelect5
09039                           	IF MusicDataCharacterSelect5_Triangle <= 0
09039                           		.db $00
09039                           	ELSE
09039                           		.db (MusicDataCharacterSelect5_Triangle - MusicDataCharacterSelect5)
09039                           	ENDIF
09039                           	IF MusicDataCharacterSelect5_Square1 <= 0
09039                           		.db $00
09039                           	ELSE
09039                           		.db (MusicDataCharacterSelect5_Square1 - MusicDataCharacterSelect5)
09039                           	ENDIF
09039                           
09039                           	IFNDEF EXPAND_MUSIC
09039                           		IF MusicDataCharacterSelect5_Noise = 0
09039                           			.db $00
09039                           		ELSEIF MusicDataCharacterSelect5_Noise > 0
09039                           			.db (MusicDataCharacterSelect5_Noise - MusicDataCharacterSelect5)
09039                           		ENDIF
09039                           		IF -1 = 0
09039                           			.db $00
09039                           		ELSEIF -1 > 0
09039                           			.db (-1 - MusicDataCharacterSelect5)
09039                           		ENDIF
09039                           	ELSE
09039                           		IF MusicDataCharacterSelect5_Noise <= 0
09039                           			.db $00
09039                           		ELSE
09039                           			.db (MusicDataCharacterSelect5_Noise - MusicDataCharacterSelect5)
09039                           		ENDIF
09039                           		IF -1 <= 0
09039                           			.db $00
09039                           		ELSE
09039                           			.db (-1 - MusicDataCharacterSelect5)
09039                           		ENDIF
09039                           	ENDIF
09039                           
09039                           ; ----------------------------------------
09039                           ; Overworld music headers
09039                           MusicHeaderOverworld1:
09039                           	musicHeader NoteLengthTable_200bpm, MusicDataOverworld1, MusicDataOverworld1_Triangle, MusicDataOverworld1_Square1, MusicDataOverworld1_Noise, -1
09039                           	noteLength NoteLengthTable_200bpm
09039 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
0903A 00 00                     	.dw MusicDataOverworld1
0903C                           	IF MusicDataOverworld1_Triangle <= 0
0903C                           		.db $00
0903C                           	ELSE
0903C                           		.db (MusicDataOverworld1_Triangle - MusicDataOverworld1)
0903C                           	ENDIF
0903C                           	IF MusicDataOverworld1_Square1 <= 0
0903C                           		.db $00
0903C                           	ELSE
0903C                           		.db (MusicDataOverworld1_Square1 - MusicDataOverworld1)
0903C                           	ENDIF
0903C                           
0903C                           	IFNDEF EXPAND_MUSIC
0903C                           		IF MusicDataOverworld1_Noise = 0
0903C                           			.db $00
0903C                           		ELSEIF MusicDataOverworld1_Noise > 0
0903C                           			.db (MusicDataOverworld1_Noise - MusicDataOverworld1)
0903C                           		ENDIF
0903C                           		IF -1 = 0
0903C                           			.db $00
0903C                           		ELSEIF -1 > 0
0903C                           			.db (-1 - MusicDataOverworld1)
0903C                           		ENDIF
0903C                           	ELSE
0903C                           		IF MusicDataOverworld1_Noise <= 0
0903C                           			.db $00
0903C                           		ELSE
0903C                           			.db (MusicDataOverworld1_Noise - MusicDataOverworld1)
0903C                           		ENDIF
0903C                           		IF -1 <= 0
0903C                           			.db $00
0903C                           		ELSE
0903C                           			.db (-1 - MusicDataOverworld1)
0903C                           		ENDIF
0903C                           	ENDIF
0903C                           
0903C                           MusicHeaderOverworld2:
0903C                           	musicHeader NoteLengthTable_200bpm, MusicDataOverworld2, MusicDataOverworld2_Triangle, MusicDataOverworld2_Square1, MusicDataOverworld2_Noise, -1
0903C                           	noteLength NoteLengthTable_200bpm
0903C 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
0903D 00 00                     	.dw MusicDataOverworld2
0903F                           	IF MusicDataOverworld2_Triangle <= 0
0903F                           		.db $00
0903F                           	ELSE
0903F                           		.db (MusicDataOverworld2_Triangle - MusicDataOverworld2)
0903F                           	ENDIF
0903F                           	IF MusicDataOverworld2_Square1 <= 0
0903F                           		.db $00
0903F                           	ELSE
0903F                           		.db (MusicDataOverworld2_Square1 - MusicDataOverworld2)
0903F                           	ENDIF
0903F                           
0903F                           	IFNDEF EXPAND_MUSIC
0903F                           		IF MusicDataOverworld2_Noise = 0
0903F                           			.db $00
0903F                           		ELSEIF MusicDataOverworld2_Noise > 0
0903F                           			.db (MusicDataOverworld2_Noise - MusicDataOverworld2)
0903F                           		ENDIF
0903F                           		IF -1 = 0
0903F                           			.db $00
0903F                           		ELSEIF -1 > 0
0903F                           			.db (-1 - MusicDataOverworld2)
0903F                           		ENDIF
0903F                           	ELSE
0903F                           		IF MusicDataOverworld2_Noise <= 0
0903F                           			.db $00
0903F                           		ELSE
0903F                           			.db (MusicDataOverworld2_Noise - MusicDataOverworld2)
0903F                           		ENDIF
0903F                           		IF -1 <= 0
0903F                           			.db $00
0903F                           		ELSE
0903F                           			.db (-1 - MusicDataOverworld2)
0903F                           		ENDIF
0903F                           	ENDIF
0903F                           
0903F                           MusicHeaderOverworld3:
0903F                           	musicHeader NoteLengthTable_200bpm, MusicDataOverworld3, MusicDataOverworld3_Triangle, MusicDataOverworld3_Square1, MusicDataOverworld3_Noise, -1
0903F                           	noteLength NoteLengthTable_200bpm
0903F 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
09040 00 00                     	.dw MusicDataOverworld3
09042                           	IF MusicDataOverworld3_Triangle <= 0
09042                           		.db $00
09042                           	ELSE
09042                           		.db (MusicDataOverworld3_Triangle - MusicDataOverworld3)
09042                           	ENDIF
09042                           	IF MusicDataOverworld3_Square1 <= 0
09042                           		.db $00
09042                           	ELSE
09042                           		.db (MusicDataOverworld3_Square1 - MusicDataOverworld3)
09042                           	ENDIF
09042                           
09042                           	IFNDEF EXPAND_MUSIC
09042                           		IF MusicDataOverworld3_Noise = 0
09042                           			.db $00
09042                           		ELSEIF MusicDataOverworld3_Noise > 0
09042                           			.db (MusicDataOverworld3_Noise - MusicDataOverworld3)
09042                           		ENDIF
09042                           		IF -1 = 0
09042                           			.db $00
09042                           		ELSEIF -1 > 0
09042                           			.db (-1 - MusicDataOverworld3)
09042                           		ENDIF
09042                           	ELSE
09042                           		IF MusicDataOverworld3_Noise <= 0
09042                           			.db $00
09042                           		ELSE
09042                           			.db (MusicDataOverworld3_Noise - MusicDataOverworld3)
09042                           		ENDIF
09042                           		IF -1 <= 0
09042                           			.db $00
09042                           		ELSE
09042                           			.db (-1 - MusicDataOverworld3)
09042                           		ENDIF
09042                           	ENDIF
09042                           
09042                           MusicHeaderOverworld4:
09042                           	musicHeader NoteLengthTable_200bpm, MusicDataOverworld4, MusicDataOverworld4_Triangle, MusicDataOverworld4_Square1, MusicDataOverworld4_Noise, -1
09042                           	noteLength NoteLengthTable_200bpm
09042 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
09043 00 00                     	.dw MusicDataOverworld4
09045                           	IF MusicDataOverworld4_Triangle <= 0
09045                           		.db $00
09045                           	ELSE
09045                           		.db (MusicDataOverworld4_Triangle - MusicDataOverworld4)
09045                           	ENDIF
09045                           	IF MusicDataOverworld4_Square1 <= 0
09045                           		.db $00
09045                           	ELSE
09045                           		.db (MusicDataOverworld4_Square1 - MusicDataOverworld4)
09045                           	ENDIF
09045                           
09045                           	IFNDEF EXPAND_MUSIC
09045                           		IF MusicDataOverworld4_Noise = 0
09045                           			.db $00
09045                           		ELSEIF MusicDataOverworld4_Noise > 0
09045                           			.db (MusicDataOverworld4_Noise - MusicDataOverworld4)
09045                           		ENDIF
09045                           		IF -1 = 0
09045                           			.db $00
09045                           		ELSEIF -1 > 0
09045                           			.db (-1 - MusicDataOverworld4)
09045                           		ENDIF
09045                           	ELSE
09045                           		IF MusicDataOverworld4_Noise <= 0
09045                           			.db $00
09045                           		ELSE
09045                           			.db (MusicDataOverworld4_Noise - MusicDataOverworld4)
09045                           		ENDIF
09045                           		IF -1 <= 0
09045                           			.db $00
09045                           		ELSE
09045                           			.db (-1 - MusicDataOverworld4)
09045                           		ENDIF
09045                           	ENDIF
09045                           
09045                           MusicHeaderOverworld5:
09045                           	musicHeader NoteLengthTable_200bpm, MusicDataOverworld5, MusicDataOverworld5_Triangle, MusicDataOverworld5_Square1, MusicDataOverworld5_Noise, -1
09045                           	noteLength NoteLengthTable_200bpm
09045 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
09046 00 00                     	.dw MusicDataOverworld5
09048                           	IF MusicDataOverworld5_Triangle <= 0
09048                           		.db $00
09048                           	ELSE
09048                           		.db (MusicDataOverworld5_Triangle - MusicDataOverworld5)
09048                           	ENDIF
09048                           	IF MusicDataOverworld5_Square1 <= 0
09048                           		.db $00
09048                           	ELSE
09048                           		.db (MusicDataOverworld5_Square1 - MusicDataOverworld5)
09048                           	ENDIF
09048                           
09048                           	IFNDEF EXPAND_MUSIC
09048                           		IF MusicDataOverworld5_Noise = 0
09048                           			.db $00
09048                           		ELSEIF MusicDataOverworld5_Noise > 0
09048                           			.db (MusicDataOverworld5_Noise - MusicDataOverworld5)
09048                           		ENDIF
09048                           		IF -1 = 0
09048                           			.db $00
09048                           		ELSEIF -1 > 0
09048                           			.db (-1 - MusicDataOverworld5)
09048                           		ENDIF
09048                           	ELSE
09048                           		IF MusicDataOverworld5_Noise <= 0
09048                           			.db $00
09048                           		ELSE
09048                           			.db (MusicDataOverworld5_Noise - MusicDataOverworld5)
09048                           		ENDIF
09048                           		IF -1 <= 0
09048                           			.db $00
09048                           		ELSE
09048                           			.db (-1 - MusicDataOverworld5)
09048                           		ENDIF
09048                           	ENDIF
09048                           
09048                           MusicHeaderOverworld6:
09048                           	musicHeader NoteLengthTable_200bpm, MusicDataOverworld6, MusicDataOverworld6_Triangle, MusicDataOverworld6_Square1, MusicDataOverworld6_Noise, -1
09048                           	noteLength NoteLengthTable_200bpm
09048 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
09049 00 00                     	.dw MusicDataOverworld6
0904B                           	IF MusicDataOverworld6_Triangle <= 0
0904B                           		.db $00
0904B                           	ELSE
0904B                           		.db (MusicDataOverworld6_Triangle - MusicDataOverworld6)
0904B                           	ENDIF
0904B                           	IF MusicDataOverworld6_Square1 <= 0
0904B                           		.db $00
0904B                           	ELSE
0904B                           		.db (MusicDataOverworld6_Square1 - MusicDataOverworld6)
0904B                           	ENDIF
0904B                           
0904B                           	IFNDEF EXPAND_MUSIC
0904B                           		IF MusicDataOverworld6_Noise = 0
0904B                           			.db $00
0904B                           		ELSEIF MusicDataOverworld6_Noise > 0
0904B                           			.db (MusicDataOverworld6_Noise - MusicDataOverworld6)
0904B                           		ENDIF
0904B                           		IF -1 = 0
0904B                           			.db $00
0904B                           		ELSEIF -1 > 0
0904B                           			.db (-1 - MusicDataOverworld6)
0904B                           		ENDIF
0904B                           	ELSE
0904B                           		IF MusicDataOverworld6_Noise <= 0
0904B                           			.db $00
0904B                           		ELSE
0904B                           			.db (MusicDataOverworld6_Noise - MusicDataOverworld6)
0904B                           		ENDIF
0904B                           		IF -1 <= 0
0904B                           			.db $00
0904B                           		ELSE
0904B                           			.db (-1 - MusicDataOverworld6)
0904B                           		ENDIF
0904B                           	ENDIF
0904B                           
0904B                           ; ----------------------------------------
0904B                           ; Underground music
0904B                           IFNDEF PROTOTYPE_MUSIC_UNDERGROUND
0904B                           MusicHeaderUnderground:
0904B                           	musicHeader NoteLengthTable_129bpm, MusicDataUnderground, MusicDataUnderground_Triangle, MusicDataUnderground_Square1, -1, MusicDataUnderground_DPCM
0904B                           	noteLength NoteLengthTable_129bpm
0904B 6E                        	.db (NoteLengthTable_129bpm - NoteLengthTable)
0904C 00 00                     	.dw MusicDataUnderground
0904E                           	IF MusicDataUnderground_Triangle <= 0
0904E                           		.db $00
0904E                           	ELSE
0904E                           		.db (MusicDataUnderground_Triangle - MusicDataUnderground)
0904E                           	ENDIF
0904E                           	IF MusicDataUnderground_Square1 <= 0
0904E                           		.db $00
0904E                           	ELSE
0904E                           		.db (MusicDataUnderground_Square1 - MusicDataUnderground)
0904E                           	ENDIF
0904E                           
0904E                           	IFNDEF EXPAND_MUSIC
0904E                           		IF -1 = 0
0904E                           			.db $00
0904E                           		ELSEIF -1 > 0
0904E                           			.db (-1 - MusicDataUnderground)
0904E                           		ENDIF
0904E                           		IF MusicDataUnderground_DPCM = 0
0904E                           			.db $00
0904E                           		ELSEIF MusicDataUnderground_DPCM > 0
0904E                           			.db (MusicDataUnderground_DPCM - MusicDataUnderground)
0904E                           		ENDIF
0904E                           	ELSE
0904E                           		IF -1 <= 0
0904E                           			.db $00
0904E                           		ELSE
0904E                           			.db (-1 - MusicDataUnderground)
0904E                           		ENDIF
0904E                           		IF MusicDataUnderground_DPCM <= 0
0904E                           			.db $00
0904E                           		ELSE
0904E                           			.db (MusicDataUnderground_DPCM - MusicDataUnderground)
0904E                           		ENDIF
0904E                           	ENDIF
0904E                           ENDIF
0904E                           
0904E                           ; ----------------------------------------
0904E                           ; Boss and boss area music
0904E                           MusicHeaderBoss:
0904E                           IFNDEF PROTOTYPE_MUSIC_ENDING
0904E                           	musicHeader NoteLengthTable_200bpm, MusicDataBoss, MusicDataBoss_Triangle, MusicDataBoss_Square1, $00, -1
0904E                           	noteLength NoteLengthTable_200bpm
0904E 00                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
0904F 00 00                     	.dw MusicDataBoss
09051                           	IF MusicDataBoss_Triangle <= 0
09051                           		.db $00
09051                           	ELSE
09051                           		.db (MusicDataBoss_Triangle - MusicDataBoss)
09051                           	ENDIF
09051                           	IF MusicDataBoss_Square1 <= 0
09051                           		.db $00
09051                           	ELSE
09051                           		.db (MusicDataBoss_Square1 - MusicDataBoss)
09051                           	ENDIF
09051                           
09051                           	IFNDEF EXPAND_MUSIC
09051                           		IF $00 = 0
09051 00                        			.db $00
09052                           		ELSEIF $00 > 0
09052                           			.db ($00 - MusicDataBoss)
09052                           		ENDIF
09052                           		IF -1 = 0
09052                           			.db $00
09052                           		ELSEIF -1 > 0
09052                           			.db (-1 - MusicDataBoss)
09052                           		ENDIF
09052                           	ELSE
09052                           		IF $00 <= 0
09052                           			.db $00
09052                           		ELSE
09052                           			.db ($00 - MusicDataBoss)
09052                           		ENDIF
09052                           		IF -1 <= 0
09052                           			.db $00
09052                           		ELSE
09052                           			.db (-1 - MusicDataBoss)
09052                           		ENDIF
09052                           	ENDIF
09052                           ELSE
09052                           	; sharing $00 with NoteLengthTable_300bpm from the segment below
09052                           	; (we're scrounging for bytes to avoid overflowing the music header table)
09052                           	musicHeader NoteLengthTable_200bpm, MusicDataBoss, MusicDataBoss_Triangle, MusicDataBoss_Square1, -1, -1
09052                           ENDIF
09052                           
09052                           ; ----------------------------------------
09052                           ; Starman music
09052                           IFNDEF PROTOTYPE_MUSIC_STARMAN
09052                           MusicHeaderStar:
09052                           	IFNDEF PROTOTYPE_MUSIC_UNDERGROUND
09052                           		musicHeader NoteLengthTable_300bpm, MusicDataStar, MusicDataStar_Triangle, MusicDataStar_Square1, -1, MusicDataStar_DPCM
09052                           	noteLength NoteLengthTable_300bpm
09052 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
09053 00 00                     	.dw MusicDataStar
09055                           	IF MusicDataStar_Triangle <= 0
09055                           		.db $00
09055                           	ELSE
09055                           		.db (MusicDataStar_Triangle - MusicDataStar)
09055                           	ENDIF
09055                           	IF MusicDataStar_Square1 <= 0
09055                           		.db $00
09055                           	ELSE
09055                           		.db (MusicDataStar_Square1 - MusicDataStar)
09055                           	ENDIF
09055                           
09055                           	IFNDEF EXPAND_MUSIC
09055                           		IF -1 = 0
09055                           			.db $00
09055                           		ELSEIF -1 > 0
09055                           			.db (-1 - MusicDataStar)
09055                           		ENDIF
09055                           		IF MusicDataStar_DPCM = 0
09055                           			.db $00
09055                           		ELSEIF MusicDataStar_DPCM > 0
09055                           			.db (MusicDataStar_DPCM - MusicDataStar)
09055                           		ENDIF
09055                           	ELSE
09055                           		IF -1 <= 0
09055                           			.db $00
09055                           		ELSE
09055                           			.db (-1 - MusicDataStar)
09055                           		ENDIF
09055                           		IF MusicDataStar_DPCM <= 0
09055                           			.db $00
09055                           		ELSE
09055                           			.db (MusicDataStar_DPCM - MusicDataStar)
09055                           		ENDIF
09055                           	ENDIF
09055                           	ELSE
09055                           		musicHeader NoteLengthTable_300bpm, MusicDataStar, MusicDataStar_Triangle, MusicDataStar_Square1, $00, MusicDataStar_DPCM
09055                           	ENDIF
09055                           ELSE
09055                           MusicHeaderStarBeta:
09055                           	musicHeader NoteLengthTable_300bpm, MusicDataStarBeta, MusicDataStarBeta_Triangle, MusicDataStarBeta_Square1, MusicDataStarBeta_Noise, -1
09055                           ENDIF
09055                           
09055                           ; ----------------------------------------
09055                           ; Wart's final boss music
09055                           MusicHeaderWart:
09055                           IFNDEF PROTOTYPE_MUSIC_ENDING
09055                           	musicHeader NoteLengthTable_200bpm, MusicDataWart, MusicDataWart_Triangle, MusicDataWart_Square1, $00, -1
09055                           	noteLength NoteLengthTable_200bpm
09055 00                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
09056 00 00                     	.dw MusicDataWart
09058                           	IF MusicDataWart_Triangle <= 0
09058                           		.db $00
09058                           	ELSE
09058                           		.db (MusicDataWart_Triangle - MusicDataWart)
09058                           	ENDIF
09058                           	IF MusicDataWart_Square1 <= 0
09058                           		.db $00
09058                           	ELSE
09058                           		.db (MusicDataWart_Square1 - MusicDataWart)
09058                           	ENDIF
09058                           
09058                           	IFNDEF EXPAND_MUSIC
09058                           		IF $00 = 0
09058 00                        			.db $00
09059                           		ELSEIF $00 > 0
09059                           			.db ($00 - MusicDataWart)
09059                           		ENDIF
09059                           		IF -1 = 0
09059                           			.db $00
09059                           		ELSEIF -1 > 0
09059                           			.db (-1 - MusicDataWart)
09059                           		ENDIF
09059                           	ELSE
09059                           		IF $00 <= 0
09059                           			.db $00
09059                           		ELSE
09059                           			.db ($00 - MusicDataWart)
09059                           		ENDIF
09059                           		IF -1 <= 0
09059                           			.db $00
09059                           		ELSE
09059                           			.db (-1 - MusicDataWart)
09059                           		ENDIF
09059                           	ENDIF
09059                           ELSE
09059                           	; sharing $00 with NoteLengthTable_300bpm from the segment below
09059                           	; (we're scrounging for bytes to avoid overflowing the music header table)
09059                           	musicHeader NoteLengthTable_200bpm, MusicDataWart, MusicDataWart_Triangle, MusicDataWart_Square1, -1, -1
09059                           ENDIF
09059                           
09059                           ; ----------------------------------------
09059                           ; Various shorter jingles, extra character select segments (8, 7, 6), and other potpourri
09059                           
09059                           MusicHeaderCrystal:
09059                           	musicHeader NoteLengthTable_300bpm, MusicDataCrystal, MusicDataCrystal_Triangle, MusicDataCrystal_Square1, -1, -1
09059                           	noteLength NoteLengthTable_300bpm
09059 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
0905A 00 00                     	.dw MusicDataCrystal
0905C                           	IF MusicDataCrystal_Triangle <= 0
0905C                           		.db $00
0905C                           	ELSE
0905C                           		.db (MusicDataCrystal_Triangle - MusicDataCrystal)
0905C                           	ENDIF
0905C                           	IF MusicDataCrystal_Square1 <= 0
0905C                           		.db $00
0905C                           	ELSE
0905C                           		.db (MusicDataCrystal_Square1 - MusicDataCrystal)
0905C                           	ENDIF
0905C                           
0905C                           	IFNDEF EXPAND_MUSIC
0905C                           		IF -1 = 0
0905C                           			.db $00
0905C                           		ELSEIF -1 > 0
0905C                           			.db (-1 - MusicDataCrystal)
0905C                           		ENDIF
0905C                           		IF -1 = 0
0905C                           			.db $00
0905C                           		ELSEIF -1 > 0
0905C                           			.db (-1 - MusicDataCrystal)
0905C                           		ENDIF
0905C                           	ELSE
0905C                           		IF -1 <= 0
0905C                           			.db $00
0905C                           		ELSE
0905C                           			.db (-1 - MusicDataCrystal)
0905C                           		ENDIF
0905C                           		IF -1 <= 0
0905C                           			.db $00
0905C                           		ELSE
0905C                           			.db (-1 - MusicDataCrystal)
0905C                           		ENDIF
0905C                           	ENDIF
0905C                           
0905C                           MusicHeaderGameOver:
0905C                            	musicHeader NoteLengthTable_300bpm, MusicDataGameOver, MusicDataGameOver_Triangle, MusicDataGameOver_Square1, -1, -1
0905C                           	noteLength NoteLengthTable_300bpm
0905C 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
0905D 00 00                     	.dw MusicDataGameOver
0905F                           	IF MusicDataGameOver_Triangle <= 0
0905F                           		.db $00
0905F                           	ELSE
0905F                           		.db (MusicDataGameOver_Triangle - MusicDataGameOver)
0905F                           	ENDIF
0905F                           	IF MusicDataGameOver_Square1 <= 0
0905F                           		.db $00
0905F                           	ELSE
0905F                           		.db (MusicDataGameOver_Square1 - MusicDataGameOver)
0905F                           	ENDIF
0905F                           
0905F                           	IFNDEF EXPAND_MUSIC
0905F                           		IF -1 = 0
0905F                           			.db $00
0905F                           		ELSEIF -1 > 0
0905F                           			.db (-1 - MusicDataGameOver)
0905F                           		ENDIF
0905F                           		IF -1 = 0
0905F                           			.db $00
0905F                           		ELSEIF -1 > 0
0905F                           			.db (-1 - MusicDataGameOver)
0905F                           		ENDIF
0905F                           	ELSE
0905F                           		IF -1 <= 0
0905F                           			.db $00
0905F                           		ELSE
0905F                           			.db (-1 - MusicDataGameOver)
0905F                           		ENDIF
0905F                           		IF -1 <= 0
0905F                           			.db $00
0905F                           		ELSE
0905F                           			.db (-1 - MusicDataGameOver)
0905F                           		ENDIF
0905F                           	ENDIF
0905F                           
0905F                           MusicHeaderBossBeaten:
0905F                            	musicHeader NoteLengthTable_300bpm, MusicDataBossBeaten, MusicDataBossBeaten_Triangle, MusicDataBossBeaten_Square1, -1, -1
0905F                           	noteLength NoteLengthTable_300bpm
0905F 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
09060 00 00                     	.dw MusicDataBossBeaten
09062                           	IF MusicDataBossBeaten_Triangle <= 0
09062                           		.db $00
09062                           	ELSE
09062                           		.db (MusicDataBossBeaten_Triangle - MusicDataBossBeaten)
09062                           	ENDIF
09062                           	IF MusicDataBossBeaten_Square1 <= 0
09062                           		.db $00
09062                           	ELSE
09062                           		.db (MusicDataBossBeaten_Square1 - MusicDataBossBeaten)
09062                           	ENDIF
09062                           
09062                           	IFNDEF EXPAND_MUSIC
09062                           		IF -1 = 0
09062                           			.db $00
09062                           		ELSEIF -1 > 0
09062                           			.db (-1 - MusicDataBossBeaten)
09062                           		ENDIF
09062                           		IF -1 = 0
09062                           			.db $00
09062                           		ELSEIF -1 > 0
09062                           			.db (-1 - MusicDataBossBeaten)
09062                           		ENDIF
09062                           	ELSE
09062                           		IF -1 <= 0
09062                           			.db $00
09062                           		ELSE
09062                           			.db (-1 - MusicDataBossBeaten)
09062                           		ENDIF
09062                           		IF -1 <= 0
09062                           			.db $00
09062                           		ELSE
09062                           			.db (-1 - MusicDataBossBeaten)
09062                           		ENDIF
09062                           	ENDIF
09062                           
09062                           MusicHeaderCharacterSelect8:
09062                           	musicHeader NoteLengthTable_300bpm, MusicDataCharacterSelect8, MusicDataCharacterSelect8_Triangle, MusicDataCharacterSelect8_Square1, MusicDataCharacterSelect8_Noise, -1
09062                           	noteLength NoteLengthTable_300bpm
09062 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
09063 00 00                     	.dw MusicDataCharacterSelect8
09065                           	IF MusicDataCharacterSelect8_Triangle <= 0
09065                           		.db $00
09065                           	ELSE
09065                           		.db (MusicDataCharacterSelect8_Triangle - MusicDataCharacterSelect8)
09065                           	ENDIF
09065                           	IF MusicDataCharacterSelect8_Square1 <= 0
09065                           		.db $00
09065                           	ELSE
09065                           		.db (MusicDataCharacterSelect8_Square1 - MusicDataCharacterSelect8)
09065                           	ENDIF
09065                           
09065                           	IFNDEF EXPAND_MUSIC
09065                           		IF MusicDataCharacterSelect8_Noise = 0
09065                           			.db $00
09065                           		ELSEIF MusicDataCharacterSelect8_Noise > 0
09065                           			.db (MusicDataCharacterSelect8_Noise - MusicDataCharacterSelect8)
09065                           		ENDIF
09065                           		IF -1 = 0
09065                           			.db $00
09065                           		ELSEIF -1 > 0
09065                           			.db (-1 - MusicDataCharacterSelect8)
09065                           		ENDIF
09065                           	ELSE
09065                           		IF MusicDataCharacterSelect8_Noise <= 0
09065                           			.db $00
09065                           		ELSE
09065                           			.db (MusicDataCharacterSelect8_Noise - MusicDataCharacterSelect8)
09065                           		ENDIF
09065                           		IF -1 <= 0
09065                           			.db $00
09065                           		ELSE
09065                           			.db (-1 - MusicDataCharacterSelect8)
09065                           		ENDIF
09065                           	ENDIF
09065                           
09065                           MusicHeaderMushroomBonusChance:
09065                            	musicHeader NoteLengthTable_150bpm, MusicDataMushroomBonusChance, $00, MusicDataMushroomBonusChance_Square1, -1, -1
09065                           	noteLength NoteLengthTable_150bpm
09065 52                        	.db (NoteLengthTable_150bpm - NoteLengthTable)
09066 00 00                     	.dw MusicDataMushroomBonusChance
09068                           	IF $00 <= 0
09068 00                        		.db $00
09069                           	ELSE
09069                           		.db ($00 - MusicDataMushroomBonusChance)
09069                           	ENDIF
09069                           	IF MusicDataMushroomBonusChance_Square1 <= 0
09069                           		.db $00
09069                           	ELSE
09069                           		.db (MusicDataMushroomBonusChance_Square1 - MusicDataMushroomBonusChance)
09069                           	ENDIF
09069                           
09069                           	IFNDEF EXPAND_MUSIC
09069                           		IF -1 = 0
09069                           			.db $00
09069                           		ELSEIF -1 > 0
09069                           			.db (-1 - MusicDataMushroomBonusChance)
09069                           		ENDIF
09069                           		IF -1 = 0
09069                           			.db $00
09069                           		ELSEIF -1 > 0
09069                           			.db (-1 - MusicDataMushroomBonusChance)
09069                           		ENDIF
09069                           	ELSE
09069                           		IF -1 <= 0
09069                           			.db $00
09069                           		ELSE
09069                           			.db (-1 - MusicDataMushroomBonusChance)
09069                           		ENDIF
09069                           		IF -1 <= 0
09069                           			.db $00
09069                           		ELSE
09069                           			.db (-1 - MusicDataMushroomBonusChance)
09069                           		ENDIF
09069                           	ENDIF
09069                           
09069                           MusicHeaderCharacterSelect7:
09069                           	musicHeader NoteLengthTable_300bpm, MusicDataCharacterSelect7, MusicDataCharacterSelect7_Triangle, MusicDataCharacterSelect7_Square1, MusicDataCharacterSelect7_Noise, -1
09069                           	noteLength NoteLengthTable_300bpm
09069 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
0906A 00 00                     	.dw MusicDataCharacterSelect7
0906C                           	IF MusicDataCharacterSelect7_Triangle <= 0
0906C                           		.db $00
0906C                           	ELSE
0906C                           		.db (MusicDataCharacterSelect7_Triangle - MusicDataCharacterSelect7)
0906C                           	ENDIF
0906C                           	IF MusicDataCharacterSelect7_Square1 <= 0
0906C                           		.db $00
0906C                           	ELSE
0906C                           		.db (MusicDataCharacterSelect7_Square1 - MusicDataCharacterSelect7)
0906C                           	ENDIF
0906C                           
0906C                           	IFNDEF EXPAND_MUSIC
0906C                           		IF MusicDataCharacterSelect7_Noise = 0
0906C                           			.db $00
0906C                           		ELSEIF MusicDataCharacterSelect7_Noise > 0
0906C                           			.db (MusicDataCharacterSelect7_Noise - MusicDataCharacterSelect7)
0906C                           		ENDIF
0906C                           		IF -1 = 0
0906C                           			.db $00
0906C                           		ELSEIF -1 > 0
0906C                           			.db (-1 - MusicDataCharacterSelect7)
0906C                           		ENDIF
0906C                           	ELSE
0906C                           		IF MusicDataCharacterSelect7_Noise <= 0
0906C                           			.db $00
0906C                           		ELSE
0906C                           			.db (MusicDataCharacterSelect7_Noise - MusicDataCharacterSelect7)
0906C                           		ENDIF
0906C                           		IF -1 <= 0
0906C                           			.db $00
0906C                           		ELSE
0906C                           			.db (-1 - MusicDataCharacterSelect7)
0906C                           		ENDIF
0906C                           	ENDIF
0906C                           
0906C                           MusicHeaderDeath:
0906C                            	musicHeader NoteLengthTable_200bpm, MusicDataDeath, MusicDataDeath_Triangle, MusicDataDeath_Square1, -1, -1
0906C                           	noteLength NoteLengthTable_200bpm
0906C 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
0906D 00 00                     	.dw MusicDataDeath
0906F                           	IF MusicDataDeath_Triangle <= 0
0906F                           		.db $00
0906F                           	ELSE
0906F                           		.db (MusicDataDeath_Triangle - MusicDataDeath)
0906F                           	ENDIF
0906F                           	IF MusicDataDeath_Square1 <= 0
0906F                           		.db $00
0906F                           	ELSE
0906F                           		.db (MusicDataDeath_Square1 - MusicDataDeath)
0906F                           	ENDIF
0906F                           
0906F                           	IFNDEF EXPAND_MUSIC
0906F                           		IF -1 = 0
0906F                           			.db $00
0906F                           		ELSEIF -1 > 0
0906F                           			.db (-1 - MusicDataDeath)
0906F                           		ENDIF
0906F                           		IF -1 = 0
0906F                           			.db $00
0906F                           		ELSEIF -1 > 0
0906F                           			.db (-1 - MusicDataDeath)
0906F                           		ENDIF
0906F                           	ELSE
0906F                           		IF -1 <= 0
0906F                           			.db $00
0906F                           		ELSE
0906F                           			.db (-1 - MusicDataDeath)
0906F                           		ENDIF
0906F                           		IF -1 <= 0
0906F                           			.db $00
0906F                           		ELSE
0906F                           			.db (-1 - MusicDataDeath)
0906F                           		ENDIF
0906F                           	ENDIF
0906F                           
0906F                           MusicHeaderCharacterSelect6:
0906F                           	musicHeader NoteLengthTable_300bpm, MusicDataCharacterSelect6, MusicDataCharacterSelect6_Triangle, MusicDataCharacterSelect6_Square1, MusicDataCharacterSelect6_Noise, -1
0906F                           	noteLength NoteLengthTable_300bpm
0906F 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
09070 00 00                     	.dw MusicDataCharacterSelect6
09072                           	IF MusicDataCharacterSelect6_Triangle <= 0
09072                           		.db $00
09072                           	ELSE
09072                           		.db (MusicDataCharacterSelect6_Triangle - MusicDataCharacterSelect6)
09072                           	ENDIF
09072                           	IF MusicDataCharacterSelect6_Square1 <= 0
09072                           		.db $00
09072                           	ELSE
09072                           		.db (MusicDataCharacterSelect6_Square1 - MusicDataCharacterSelect6)
09072                           	ENDIF
09072                           
09072                           	IFNDEF EXPAND_MUSIC
09072                           		IF MusicDataCharacterSelect6_Noise = 0
09072                           			.db $00
09072                           		ELSEIF MusicDataCharacterSelect6_Noise > 0
09072                           			.db (MusicDataCharacterSelect6_Noise - MusicDataCharacterSelect6)
09072                           		ENDIF
09072                           		IF -1 = 0
09072                           			.db $00
09072                           		ELSEIF -1 > 0
09072                           			.db (-1 - MusicDataCharacterSelect6)
09072                           		ENDIF
09072                           	ELSE
09072                           		IF MusicDataCharacterSelect6_Noise <= 0
09072                           			.db $00
09072                           		ELSE
09072                           			.db (MusicDataCharacterSelect6_Noise - MusicDataCharacterSelect6)
09072                           		ENDIF
09072                           		IF -1 <= 0
09072                           			.db $00
09072                           		ELSE
09072                           			.db (-1 - MusicDataCharacterSelect6)
09072                           		ENDIF
09072                           	ENDIF
09072                           
09072                           ; ----------------------------------------
09072                           ; Title screen segments
09072                           
09072                           MusicHeaderTitleScreen2:
09072                           	musicHeader NoteLengthTable_225bpm, MusicDataTitleScreen2, MusicDataTitleScreen2_Triangle, MusicDataTitleScreen2_Square1, MusicDataTitleScreen2_Noise, -1
09072                           	noteLength NoteLengthTable_225bpm
09072 1B                        	.db (NoteLengthTable_225bpm - NoteLengthTable)
09073 00 00                     	.dw MusicDataTitleScreen2
09075                           	IF MusicDataTitleScreen2_Triangle <= 0
09075                           		.db $00
09075                           	ELSE
09075                           		.db (MusicDataTitleScreen2_Triangle - MusicDataTitleScreen2)
09075                           	ENDIF
09075                           	IF MusicDataTitleScreen2_Square1 <= 0
09075                           		.db $00
09075                           	ELSE
09075                           		.db (MusicDataTitleScreen2_Square1 - MusicDataTitleScreen2)
09075                           	ENDIF
09075                           
09075                           	IFNDEF EXPAND_MUSIC
09075                           		IF MusicDataTitleScreen2_Noise = 0
09075                           			.db $00
09075                           		ELSEIF MusicDataTitleScreen2_Noise > 0
09075                           			.db (MusicDataTitleScreen2_Noise - MusicDataTitleScreen2)
09075                           		ENDIF
09075                           		IF -1 = 0
09075                           			.db $00
09075                           		ELSEIF -1 > 0
09075                           			.db (-1 - MusicDataTitleScreen2)
09075                           		ENDIF
09075                           	ELSE
09075                           		IF MusicDataTitleScreen2_Noise <= 0
09075                           			.db $00
09075                           		ELSE
09075                           			.db (MusicDataTitleScreen2_Noise - MusicDataTitleScreen2)
09075                           		ENDIF
09075                           		IF -1 <= 0
09075                           			.db $00
09075                           		ELSE
09075                           			.db (-1 - MusicDataTitleScreen2)
09075                           		ENDIF
09075                           	ENDIF
09075                           
09075                           MusicHeaderTitleScreen1:
09075                           	musicHeader NoteLengthTable_225bpm, MusicDataTitleScreen1, MusicDataTitleScreen1_Triangle, MusicDataTitleScreen1_Square1, MusicDataTitleScreen1_Noise, -1
09075                           	noteLength NoteLengthTable_225bpm
09075 1B                        	.db (NoteLengthTable_225bpm - NoteLengthTable)
09076 00 00                     	.dw MusicDataTitleScreen1
09078                           	IF MusicDataTitleScreen1_Triangle <= 0
09078                           		.db $00
09078                           	ELSE
09078                           		.db (MusicDataTitleScreen1_Triangle - MusicDataTitleScreen1)
09078                           	ENDIF
09078                           	IF MusicDataTitleScreen1_Square1 <= 0
09078                           		.db $00
09078                           	ELSE
09078                           		.db (MusicDataTitleScreen1_Square1 - MusicDataTitleScreen1)
09078                           	ENDIF
09078                           
09078                           	IFNDEF EXPAND_MUSIC
09078                           		IF MusicDataTitleScreen1_Noise = 0
09078                           			.db $00
09078                           		ELSEIF MusicDataTitleScreen1_Noise > 0
09078                           			.db (MusicDataTitleScreen1_Noise - MusicDataTitleScreen1)
09078                           		ENDIF
09078                           		IF -1 = 0
09078                           			.db $00
09078                           		ELSEIF -1 > 0
09078                           			.db (-1 - MusicDataTitleScreen1)
09078                           		ENDIF
09078                           	ELSE
09078                           		IF MusicDataTitleScreen1_Noise <= 0
09078                           			.db $00
09078                           		ELSE
09078                           			.db (MusicDataTitleScreen1_Noise - MusicDataTitleScreen1)
09078                           		ENDIF
09078                           		IF -1 <= 0
09078                           			.db $00
09078                           		ELSE
09078                           			.db (-1 - MusicDataTitleScreen1)
09078                           		ENDIF
09078                           	ENDIF
09078                           
09078                           MusicHeaderTitleScreen3:
09078                           	musicHeader NoteLengthTable_225bpm, MusicDataTitleScreen3, MusicDataTitleScreen3_Triangle, MusicDataTitleScreen3_Square1, MusicDataTitleScreen3_Noise, -1
09078                           	noteLength NoteLengthTable_225bpm
09078 1B                        	.db (NoteLengthTable_225bpm - NoteLengthTable)
09079 00 00                     	.dw MusicDataTitleScreen3
0907B                           	IF MusicDataTitleScreen3_Triangle <= 0
0907B                           		.db $00
0907B                           	ELSE
0907B                           		.db (MusicDataTitleScreen3_Triangle - MusicDataTitleScreen3)
0907B                           	ENDIF
0907B                           	IF MusicDataTitleScreen3_Square1 <= 0
0907B                           		.db $00
0907B                           	ELSE
0907B                           		.db (MusicDataTitleScreen3_Square1 - MusicDataTitleScreen3)
0907B                           	ENDIF
0907B                           
0907B                           	IFNDEF EXPAND_MUSIC
0907B                           		IF MusicDataTitleScreen3_Noise = 0
0907B                           			.db $00
0907B                           		ELSEIF MusicDataTitleScreen3_Noise > 0
0907B                           			.db (MusicDataTitleScreen3_Noise - MusicDataTitleScreen3)
0907B                           		ENDIF
0907B                           		IF -1 = 0
0907B                           			.db $00
0907B                           		ELSEIF -1 > 0
0907B                           			.db (-1 - MusicDataTitleScreen3)
0907B                           		ENDIF
0907B                           	ELSE
0907B                           		IF MusicDataTitleScreen3_Noise <= 0
0907B                           			.db $00
0907B                           		ELSE
0907B                           			.db (MusicDataTitleScreen3_Noise - MusicDataTitleScreen3)
0907B                           		ENDIF
0907B                           		IF -1 <= 0
0907B                           			.db $00
0907B                           		ELSE
0907B                           			.db (-1 - MusicDataTitleScreen3)
0907B                           		ENDIF
0907B                           	ENDIF
0907B                           
0907B                           MusicHeaderTitleScreen4:
0907B                           	musicHeader NoteLengthTable_225bpm, MusicDataTitleScreen4, MusicDataTitleScreen4_Triangle, MusicDataTitleScreen4_Square1, MusicDataTitleScreen4_Noise, -1
0907B                           	noteLength NoteLengthTable_225bpm
0907B 1B                        	.db (NoteLengthTable_225bpm - NoteLengthTable)
0907C 00 00                     	.dw MusicDataTitleScreen4
0907E                           	IF MusicDataTitleScreen4_Triangle <= 0
0907E                           		.db $00
0907E                           	ELSE
0907E                           		.db (MusicDataTitleScreen4_Triangle - MusicDataTitleScreen4)
0907E                           	ENDIF
0907E                           	IF MusicDataTitleScreen4_Square1 <= 0
0907E                           		.db $00
0907E                           	ELSE
0907E                           		.db (MusicDataTitleScreen4_Square1 - MusicDataTitleScreen4)
0907E                           	ENDIF
0907E                           
0907E                           	IFNDEF EXPAND_MUSIC
0907E                           		IF MusicDataTitleScreen4_Noise = 0
0907E                           			.db $00
0907E                           		ELSEIF MusicDataTitleScreen4_Noise > 0
0907E                           			.db (MusicDataTitleScreen4_Noise - MusicDataTitleScreen4)
0907E                           		ENDIF
0907E                           		IF -1 = 0
0907E                           			.db $00
0907E                           		ELSEIF -1 > 0
0907E                           			.db (-1 - MusicDataTitleScreen4)
0907E                           		ENDIF
0907E                           	ELSE
0907E                           		IF MusicDataTitleScreen4_Noise <= 0
0907E                           			.db $00
0907E                           		ELSE
0907E                           			.db (MusicDataTitleScreen4_Noise - MusicDataTitleScreen4)
0907E                           		ENDIF
0907E                           		IF -1 <= 0
0907E                           			.db $00
0907E                           		ELSE
0907E                           			.db (-1 - MusicDataTitleScreen4)
0907E                           		ENDIF
0907E                           	ENDIF
0907E                           
0907E                           ; ----------------------------------------
0907E                           ; Subspace music, quite longer than normally heard
0907E                           
0907E                           MusicHeaderSubspace1:
0907E                           	musicHeader NoteLengthTable_200bpm, MusicDataSubspace1, MusicDataSubspace1_Triangle, MusicDataSubspace1_Square1, MusicDataSubspace1_Noise, -1
0907E                           	noteLength NoteLengthTable_200bpm
0907E 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
0907F 00 00                     	.dw MusicDataSubspace1
09081                           	IF MusicDataSubspace1_Triangle <= 0
09081                           		.db $00
09081                           	ELSE
09081                           		.db (MusicDataSubspace1_Triangle - MusicDataSubspace1)
09081                           	ENDIF
09081                           	IF MusicDataSubspace1_Square1 <= 0
09081                           		.db $00
09081                           	ELSE
09081                           		.db (MusicDataSubspace1_Square1 - MusicDataSubspace1)
09081                           	ENDIF
09081                           
09081                           	IFNDEF EXPAND_MUSIC
09081                           		IF MusicDataSubspace1_Noise = 0
09081                           			.db $00
09081                           		ELSEIF MusicDataSubspace1_Noise > 0
09081                           			.db (MusicDataSubspace1_Noise - MusicDataSubspace1)
09081                           		ENDIF
09081                           		IF -1 = 0
09081                           			.db $00
09081                           		ELSEIF -1 > 0
09081                           			.db (-1 - MusicDataSubspace1)
09081                           		ENDIF
09081                           	ELSE
09081                           		IF MusicDataSubspace1_Noise <= 0
09081                           			.db $00
09081                           		ELSE
09081                           			.db (MusicDataSubspace1_Noise - MusicDataSubspace1)
09081                           		ENDIF
09081                           		IF -1 <= 0
09081                           			.db $00
09081                           		ELSE
09081                           			.db (-1 - MusicDataSubspace1)
09081                           		ENDIF
09081                           	ENDIF
09081                           
09081                           MusicHeaderSubspace2:
09081                           	musicHeader NoteLengthTable_200bpm, MusicDataSubspace2, MusicDataSubspace2_Triangle, MusicDataSubspace2_Square1, MusicDataSubspace2_Noise, -1
09081                           	noteLength NoteLengthTable_200bpm
09081 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
09082 00 00                     	.dw MusicDataSubspace2
09084                           	IF MusicDataSubspace2_Triangle <= 0
09084                           		.db $00
09084                           	ELSE
09084                           		.db (MusicDataSubspace2_Triangle - MusicDataSubspace2)
09084                           	ENDIF
09084                           	IF MusicDataSubspace2_Square1 <= 0
09084                           		.db $00
09084                           	ELSE
09084                           		.db (MusicDataSubspace2_Square1 - MusicDataSubspace2)
09084                           	ENDIF
09084                           
09084                           	IFNDEF EXPAND_MUSIC
09084                           		IF MusicDataSubspace2_Noise = 0
09084                           			.db $00
09084                           		ELSEIF MusicDataSubspace2_Noise > 0
09084                           			.db (MusicDataSubspace2_Noise - MusicDataSubspace2)
09084                           		ENDIF
09084                           		IF -1 = 0
09084                           			.db $00
09084                           		ELSEIF -1 > 0
09084                           			.db (-1 - MusicDataSubspace2)
09084                           		ENDIF
09084                           	ELSE
09084                           		IF MusicDataSubspace2_Noise <= 0
09084                           			.db $00
09084                           		ELSE
09084                           			.db (MusicDataSubspace2_Noise - MusicDataSubspace2)
09084                           		ENDIF
09084                           		IF -1 <= 0
09084                           			.db $00
09084                           		ELSE
09084                           			.db (-1 - MusicDataSubspace2)
09084                           		ENDIF
09084                           	ENDIF
09084                           
09084                           MusicHeaderSubspace3:
09084                           	musicHeader NoteLengthTable_200bpm, MusicDataSubspace3, MusicDataSubspace3_Triangle, MusicDataSubspace3_Square1, MusicDataSubspace3_Noise, -1
09084                           	noteLength NoteLengthTable_200bpm
09084 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
09085 00 00                     	.dw MusicDataSubspace3
09087                           	IF MusicDataSubspace3_Triangle <= 0
09087                           		.db $00
09087                           	ELSE
09087                           		.db (MusicDataSubspace3_Triangle - MusicDataSubspace3)
09087                           	ENDIF
09087                           	IF MusicDataSubspace3_Square1 <= 0
09087                           		.db $00
09087                           	ELSE
09087                           		.db (MusicDataSubspace3_Square1 - MusicDataSubspace3)
09087                           	ENDIF
09087                           
09087                           	IFNDEF EXPAND_MUSIC
09087                           		IF MusicDataSubspace3_Noise = 0
09087                           			.db $00
09087                           		ELSEIF MusicDataSubspace3_Noise > 0
09087                           			.db (MusicDataSubspace3_Noise - MusicDataSubspace3)
09087                           		ENDIF
09087                           		IF -1 = 0
09087                           			.db $00
09087                           		ELSEIF -1 > 0
09087                           			.db (-1 - MusicDataSubspace3)
09087                           		ENDIF
09087                           	ELSE
09087                           		IF MusicDataSubspace3_Noise <= 0
09087                           			.db $00
09087                           		ELSE
09087                           			.db (MusicDataSubspace3_Noise - MusicDataSubspace3)
09087                           		ENDIF
09087                           		IF -1 <= 0
09087                           			.db $00
09087                           		ELSE
09087                           			.db (-1 - MusicDataSubspace3)
09087                           		ENDIF
09087                           	ENDIF
09087                           
09087                           MusicHeaderSubspace4:
09087                           	musicHeader NoteLengthTable_200bpm, MusicDataSubspace4, MusicDataSubspace4_Triangle, MusicDataSubspace4_Square1, MusicDataSubspace4_Noise, -1
09087                           	noteLength NoteLengthTable_200bpm
09087 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
09088 00 00                     	.dw MusicDataSubspace4
0908A                           	IF MusicDataSubspace4_Triangle <= 0
0908A                           		.db $00
0908A                           	ELSE
0908A                           		.db (MusicDataSubspace4_Triangle - MusicDataSubspace4)
0908A                           	ENDIF
0908A                           	IF MusicDataSubspace4_Square1 <= 0
0908A                           		.db $00
0908A                           	ELSE
0908A                           		.db (MusicDataSubspace4_Square1 - MusicDataSubspace4)
0908A                           	ENDIF
0908A                           
0908A                           	IFNDEF EXPAND_MUSIC
0908A                           		IF MusicDataSubspace4_Noise = 0
0908A                           			.db $00
0908A                           		ELSEIF MusicDataSubspace4_Noise > 0
0908A                           			.db (MusicDataSubspace4_Noise - MusicDataSubspace4)
0908A                           		ENDIF
0908A                           		IF -1 = 0
0908A                           			.db $00
0908A                           		ELSEIF -1 > 0
0908A                           			.db (-1 - MusicDataSubspace4)
0908A                           		ENDIF
0908A                           	ELSE
0908A                           		IF MusicDataSubspace4_Noise <= 0
0908A                           			.db $00
0908A                           		ELSE
0908A                           			.db (MusicDataSubspace4_Noise - MusicDataSubspace4)
0908A                           		ENDIF
0908A                           		IF -1 <= 0
0908A                           			.db $00
0908A                           		ELSE
0908A                           			.db (-1 - MusicDataSubspace4)
0908A                           		ENDIF
0908A                           	ENDIF
0908A                           
0908A                           ; ----------------------------------------
0908A                           ; Ending music
0908A                           
0908A                           MusicHeaderEnding1:
0908A                           	musicHeader NoteLengthTable_129bpm, MusicDataEnding1, MusicDataEnding1_Triangle, MusicDataEnding1_Square1, MusicDataEnding1_Noise, -1
0908A                           	noteLength NoteLengthTable_129bpm
0908A 6E                        	.db (NoteLengthTable_129bpm - NoteLengthTable)
0908B 00 00                     	.dw MusicDataEnding1
0908D                           	IF MusicDataEnding1_Triangle <= 0
0908D                           		.db $00
0908D                           	ELSE
0908D                           		.db (MusicDataEnding1_Triangle - MusicDataEnding1)
0908D                           	ENDIF
0908D                           	IF MusicDataEnding1_Square1 <= 0
0908D                           		.db $00
0908D                           	ELSE
0908D                           		.db (MusicDataEnding1_Square1 - MusicDataEnding1)
0908D                           	ENDIF
0908D                           
0908D                           	IFNDEF EXPAND_MUSIC
0908D                           		IF MusicDataEnding1_Noise = 0
0908D                           			.db $00
0908D                           		ELSEIF MusicDataEnding1_Noise > 0
0908D                           			.db (MusicDataEnding1_Noise - MusicDataEnding1)
0908D                           		ENDIF
0908D                           		IF -1 = 0
0908D                           			.db $00
0908D                           		ELSEIF -1 > 0
0908D                           			.db (-1 - MusicDataEnding1)
0908D                           		ENDIF
0908D                           	ELSE
0908D                           		IF MusicDataEnding1_Noise <= 0
0908D                           			.db $00
0908D                           		ELSE
0908D                           			.db (MusicDataEnding1_Noise - MusicDataEnding1)
0908D                           		ENDIF
0908D                           		IF -1 <= 0
0908D                           			.db $00
0908D                           		ELSE
0908D                           			.db (-1 - MusicDataEnding1)
0908D                           		ENDIF
0908D                           	ENDIF
0908D                           
0908D                           MusicHeaderEnding3:
0908D                           	musicHeader NoteLengthTable_129bpm, MusicDataEnding3, MusicDataEnding3_Triangle, MusicDataEnding3_Square1, MusicDataEnding3_Noise, -1
0908D                           	noteLength NoteLengthTable_129bpm
0908D 6E                        	.db (NoteLengthTable_129bpm - NoteLengthTable)
0908E 00 00                     	.dw MusicDataEnding3
09090                           	IF MusicDataEnding3_Triangle <= 0
09090                           		.db $00
09090                           	ELSE
09090                           		.db (MusicDataEnding3_Triangle - MusicDataEnding3)
09090                           	ENDIF
09090                           	IF MusicDataEnding3_Square1 <= 0
09090                           		.db $00
09090                           	ELSE
09090                           		.db (MusicDataEnding3_Square1 - MusicDataEnding3)
09090                           	ENDIF
09090                           
09090                           	IFNDEF EXPAND_MUSIC
09090                           		IF MusicDataEnding3_Noise = 0
09090                           			.db $00
09090                           		ELSEIF MusicDataEnding3_Noise > 0
09090                           			.db (MusicDataEnding3_Noise - MusicDataEnding3)
09090                           		ENDIF
09090                           		IF -1 = 0
09090                           			.db $00
09090                           		ELSEIF -1 > 0
09090                           			.db (-1 - MusicDataEnding3)
09090                           		ENDIF
09090                           	ELSE
09090                           		IF MusicDataEnding3_Noise <= 0
09090                           			.db $00
09090                           		ELSE
09090                           			.db (MusicDataEnding3_Noise - MusicDataEnding3)
09090                           		ENDIF
09090                           		IF -1 <= 0
09090                           			.db $00
09090                           		ELSE
09090                           			.db (-1 - MusicDataEnding3)
09090                           		ENDIF
09090                           	ENDIF
09090                           
09090                           MusicHeaderEnding2:
09090                           	musicHeader NoteLengthTable_129bpm, MusicDataEnding2, MusicDataEnding2_Triangle, MusicDataEnding2_Square1, MusicDataEnding2_Noise, -1
09090                           	noteLength NoteLengthTable_129bpm
09090 6E                        	.db (NoteLengthTable_129bpm - NoteLengthTable)
09091 00 00                     	.dw MusicDataEnding2
09093                           	IF MusicDataEnding2_Triangle <= 0
09093                           		.db $00
09093                           	ELSE
09093                           		.db (MusicDataEnding2_Triangle - MusicDataEnding2)
09093                           	ENDIF
09093                           	IF MusicDataEnding2_Square1 <= 0
09093                           		.db $00
09093                           	ELSE
09093                           		.db (MusicDataEnding2_Square1 - MusicDataEnding2)
09093                           	ENDIF
09093                           
09093                           	IFNDEF EXPAND_MUSIC
09093                           		IF MusicDataEnding2_Noise = 0
09093                           			.db $00
09093                           		ELSEIF MusicDataEnding2_Noise > 0
09093                           			.db (MusicDataEnding2_Noise - MusicDataEnding2)
09093                           		ENDIF
09093                           		IF -1 = 0
09093                           			.db $00
09093                           		ELSEIF -1 > 0
09093                           			.db (-1 - MusicDataEnding2)
09093                           		ENDIF
09093                           	ELSE
09093                           		IF MusicDataEnding2_Noise <= 0
09093                           			.db $00
09093                           		ELSE
09093                           			.db (MusicDataEnding2_Noise - MusicDataEnding2)
09093                           		ENDIF
09093                           		IF -1 <= 0
09093                           			.db $00
09093                           		ELSE
09093                           			.db (-1 - MusicDataEnding2)
09093                           		ENDIF
09093                           	ENDIF
09093                           
09093                           MusicHeaderEnding5:
09093                           	musicHeader NoteLengthTable_129bpm, MusicDataEnding5, MusicDataEnding5_Triangle, MusicDataEnding5_Square1, MusicDataEnding5_Noise, -1
09093                           	noteLength NoteLengthTable_129bpm
09093 6E                        	.db (NoteLengthTable_129bpm - NoteLengthTable)
09094 00 00                     	.dw MusicDataEnding5
09096                           	IF MusicDataEnding5_Triangle <= 0
09096                           		.db $00
09096                           	ELSE
09096                           		.db (MusicDataEnding5_Triangle - MusicDataEnding5)
09096                           	ENDIF
09096                           	IF MusicDataEnding5_Square1 <= 0
09096                           		.db $00
09096                           	ELSE
09096                           		.db (MusicDataEnding5_Square1 - MusicDataEnding5)
09096                           	ENDIF
09096                           
09096                           	IFNDEF EXPAND_MUSIC
09096                           		IF MusicDataEnding5_Noise = 0
09096                           			.db $00
09096                           		ELSEIF MusicDataEnding5_Noise > 0
09096                           			.db (MusicDataEnding5_Noise - MusicDataEnding5)
09096                           		ENDIF
09096                           		IF -1 = 0
09096                           			.db $00
09096                           		ELSEIF -1 > 0
09096                           			.db (-1 - MusicDataEnding5)
09096                           		ENDIF
09096                           	ELSE
09096                           		IF MusicDataEnding5_Noise <= 0
09096                           			.db $00
09096                           		ELSE
09096                           			.db (MusicDataEnding5_Noise - MusicDataEnding5)
09096                           		ENDIF
09096                           		IF -1 <= 0
09096                           			.db $00
09096                           		ELSE
09096                           			.db (-1 - MusicDataEnding5)
09096                           		ENDIF
09096                           	ENDIF
09096                           
09096                           MusicHeaderEnding4:
09096                           	musicHeader NoteLengthTable_129bpm, MusicDataEnding4, MusicDataEnding4_Triangle, MusicDataEnding4_Square1, MusicDataEnding4_Noise, -1
09096                           	noteLength NoteLengthTable_129bpm
09096 6E                        	.db (NoteLengthTable_129bpm - NoteLengthTable)
09097 00 00                     	.dw MusicDataEnding4
09099                           	IF MusicDataEnding4_Triangle <= 0
09099                           		.db $00
09099                           	ELSE
09099                           		.db (MusicDataEnding4_Triangle - MusicDataEnding4)
09099                           	ENDIF
09099                           	IF MusicDataEnding4_Square1 <= 0
09099                           		.db $00
09099                           	ELSE
09099                           		.db (MusicDataEnding4_Square1 - MusicDataEnding4)
09099                           	ENDIF
09099                           
09099                           	IFNDEF EXPAND_MUSIC
09099                           		IF MusicDataEnding4_Noise = 0
09099                           			.db $00
09099                           		ELSEIF MusicDataEnding4_Noise > 0
09099                           			.db (MusicDataEnding4_Noise - MusicDataEnding4)
09099                           		ENDIF
09099                           		IF -1 = 0
09099                           			.db $00
09099                           		ELSEIF -1 > 0
09099                           			.db (-1 - MusicDataEnding4)
09099                           		ENDIF
09099                           	ELSE
09099                           		IF MusicDataEnding4_Noise <= 0
09099                           			.db $00
09099                           		ELSE
09099                           			.db (MusicDataEnding4_Noise - MusicDataEnding4)
09099                           		ENDIF
09099                           		IF -1 <= 0
09099                           			.db $00
09099                           		ELSE
09099                           			.db (-1 - MusicDataEnding4)
09099                           		ENDIF
09099                           	ENDIF
09099                           
09099                           IFNDEF PROTOTYPE_MUSIC_ENDING
09099                           MusicHeaderEnding6:
09099                           	musicHeader NoteLengthTable_129bpm, MusicDataEnding6, $00, MusicDataEnding6_Square1, $00, -1
09099                           	noteLength NoteLengthTable_129bpm
09099 6E                        	.db (NoteLengthTable_129bpm - NoteLengthTable)
0909A 00 00                     	.dw MusicDataEnding6
0909C                           	IF $00 <= 0
0909C 00                        		.db $00
0909D                           	ELSE
0909D                           		.db ($00 - MusicDataEnding6)
0909D                           	ENDIF
0909D                           	IF MusicDataEnding6_Square1 <= 0
0909D                           		.db $00
0909D                           	ELSE
0909D                           		.db (MusicDataEnding6_Square1 - MusicDataEnding6)
0909D                           	ENDIF
0909D                           
0909D                           	IFNDEF EXPAND_MUSIC
0909D                           		IF $00 = 0
0909D 00                        			.db $00
0909E                           		ELSEIF $00 > 0
0909E                           			.db ($00 - MusicDataEnding6)
0909E                           		ENDIF
0909E                           		IF -1 = 0
0909E                           			.db $00
0909E                           		ELSEIF -1 > 0
0909E                           			.db (-1 - MusicDataEnding6)
0909E                           		ENDIF
0909E                           	ELSE
0909E                           		IF $00 <= 0
0909E                           			.db $00
0909E                           		ELSE
0909E                           			.db ($00 - MusicDataEnding6)
0909E                           		ENDIF
0909E                           		IF -1 <= 0
0909E                           			.db $00
0909E                           		ELSE
0909E                           			.db (-1 - MusicDataEnding6)
0909E                           		ENDIF
0909E                           	ENDIF
0909E                           ENDIF
0909E                           
0909E                           IFDEF PROTOTYPE_MUSIC_UNDERGROUND
0909E                           ; Much cooler SMB3-esque underground music...
0909E                           ; apparently using /both/ noise and DPCM (!)
0909E                           MusicHeaderUndergroundBeta1:
0909E                           	musicHeader NoteLengthTable_200bpm, MusicDataUndergroundBeta1, MusicDataUndergroundBeta1_Triangle, MusicDataUndergroundBeta1_Square1, MusicDataUndergroundBeta1_Noise, MusicDataUndergroundBeta1_DPCM
0909E                           MusicHeaderUndergroundBeta2:
0909E                           	musicHeader NoteLengthTable_200bpm, MusicDataUndergroundBeta2, MusicDataUndergroundBeta2_Triangle, MusicDataUndergroundBeta2_Square1, MusicDataUndergroundBeta2_Noise, MusicDataUndergroundBeta2_DPCM
0909E                           ENDIF
0909E                           
0909E                           ; More music pointers
0909E                           .include "src/music/music-pointers.asm"
0909E                           ;
0909E                           ; Music Pointers
0909E                           ; ==============
0909E                           ;
0909E                           ; These pointers are set up the master song table and are used in conjunction
0909E                           ; with the music part pointers to determine where those songs start and loop
0909E                           ;
0909E                           
0909E                           MusicPointersFirstPart:
0909E                           	musicPart MusicPartPointers_Overworld
0909E 10                        	.db (MusicPartPointers_Overworld - MusicPartPointers)
0909F                           	musicPart MusicPartPointers_CharacterSelect
0909F 07                        	.db (MusicPartPointers_CharacterSelect - MusicPartPointers)
090A0                           
090A0                           IFNDEF PROTOTYPE_MUSIC_UNDERGROUND
090A0                           	musicPart MusicPartPointers_Underground
090A0 29                        	.db (MusicPartPointers_Underground - MusicPartPointers)
090A1                           ELSE
090A1                           	musicPart MusicPartPointers_UndergroundBeta
090A1                           ENDIF
090A1                           
090A1                           	musicPart MusicPartPointers_Boss
090A1 17                        	.db (MusicPartPointers_Boss - MusicPartPointers)
090A2                           
090A2                           IFNDEF PROTOTYPE_MUSIC_STARMAN
090A2                           	musicPart MusicPartPointers_Star
090A2 18                        	.db (MusicPartPointers_Star - MusicPartPointers)
090A3                           ELSE
090A3                           	musicPart MusicPartPointers_StarBeta
090A3                           ENDIF
090A3                           	musicPart MusicPartPointers_SubSpace
090A3 1E                        	.db (MusicPartPointers_SubSpace - MusicPartPointers)
090A4                           	musicPart MusicPartPointers_Wart
090A4 19                        	.db (MusicPartPointers_Wart - MusicPartPointers)
090A5                           	musicPart MusicPartPointers_TitleScreen
090A5 1A                        	.db (MusicPartPointers_TitleScreen - MusicPartPointers)
090A6                           	musicPart MusicPartPointers_Ending
090A6 23                        	.db (MusicPartPointers_Ending - MusicPartPointers)
090A7                           
090A7                           IFDEF EXPAND_MUSIC
090A7                           .pad MusicPointersFirstPart + $100, $FF
090A7                           ENDIF
090A7                           
090A7                           MusicPointersEndPart:
090A7                           	musicPart MusicPartPointers_OverworldEnd
090A7 16                        	.db (MusicPartPointers_OverworldEnd - MusicPartPointers)
090A8                           	musicPart MusicPartPointers_CharacterSelectEnd
090A8 0F                        	.db (MusicPartPointers_CharacterSelectEnd - MusicPartPointers)
090A9                           
090A9                           IFNDEF PROTOTYPE_MUSIC_UNDERGROUND
090A9                           	musicPart MusicPartPointers_UndergroundEnd
090A9 29                        	.db (MusicPartPointers_UndergroundEnd - MusicPartPointers)
090AA                           ELSE
090AA                           	musicPart MusicPartPointers_UndergroundBetaEnd
090AA                           ENDIF
090AA                           
090AA                           	musicPart MusicPartPointers_BossEnd
090AA 17                        	.db (MusicPartPointers_BossEnd - MusicPartPointers)
090AB                           
090AB                           IFNDEF PROTOTYPE_MUSIC_STARMAN
090AB                           	musicPart MusicPartPointers_StarEnd
090AB 18                        	.db (MusicPartPointers_StarEnd - MusicPartPointers)
090AC                           ELSE
090AC                           	musicPart MusicPartPointers_StarBetaEnd
090AC                           ENDIF
090AC                           
090AC                           	musicPart MusicPartPointers_SubSpaceEnd
090AC 22                        	.db (MusicPartPointers_SubSpaceEnd - MusicPartPointers)
090AD                           	musicPart MusicPartPointers_WartEnd
090AD 19                        	.db (MusicPartPointers_WartEnd - MusicPartPointers)
090AE                           	musicPart MusicPartPointers_TitleScreenEnd
090AE 1D                        	.db (MusicPartPointers_TitleScreenEnd - MusicPartPointers)
090AF                           	musicPart MusicPartPointers_EndingEnd
090AF 28                        	.db (MusicPartPointers_EndingEnd - MusicPartPointers)
090B0                           
090B0                           IFDEF EXPAND_MUSIC
090B0                           .pad MusicPointersEndPart + $100, $FF
090B0                           ENDIF
090B0                           
090B0                           MusicPointersLoopPart:
090B0                           	musicPart MusicPartPointers_OverworldLoop
090B0 11                        	.db (MusicPartPointers_OverworldLoop - MusicPartPointers)
090B1                           	musicPart MusicPartPointers_CharacterSelectLoop
090B1 08                        	.db (MusicPartPointers_CharacterSelectLoop - MusicPartPointers)
090B2                           
090B2                           IFNDEF PROTOTYPE_MUSIC_UNDERGROUND
090B2                           	musicPart MusicPartPointers_UndergroundLoop
090B2 29                        	.db (MusicPartPointers_UndergroundLoop - MusicPartPointers)
090B3                           ELSE
090B3                           	musicPart MusicPartPointers_UndergroundBetaLoop
090B3                           ENDIF
090B3                           
090B3                           	musicPart MusicPartPointers_BossLoop
090B3 17                        	.db (MusicPartPointers_BossLoop - MusicPartPointers)
090B4                           
090B4                           IFNDEF PROTOTYPE_MUSIC_STARMAN
090B4                           	musicPart MusicPartPointers_StarLoop
090B4 18                        	.db (MusicPartPointers_StarLoop - MusicPartPointers)
090B5                           ELSE
090B5                           	musicPart MusicPartPointers_StarBetaLoop
090B5                           ENDIF
090B5                           
090B5                           	musicPart MusicPartPointers_SubSpaceLoop
090B5 1E                        	.db (MusicPartPointers_SubSpaceLoop - MusicPartPointers)
090B6                           	musicPart MusicPartPointers_WartEnd
090B6 19                        	.db (MusicPartPointers_WartEnd - MusicPartPointers)
090B7 00                        	.db $00 ; title screen, no loop
090B8                           
090B8                           IFNDEF PROTOTYPE_MUSIC_ENDING
090B8                           	musicPart MusicPartPointers_EndingLoop
090B8 28                        	.db (MusicPartPointers_EndingLoop - MusicPartPointers)
090B9                           ELSE
090B9                           	.db $00 ; ending, no loop
090B9                           ENDIF
090B9                           
090B9                           IFDEF EXPAND_MUSIC
090B9                           .pad MusicPointersLoopPart + $100, $FF
090B9                           ENDIF
090B9                           
090B9                           ; Music and track data
090B9                           .include "src/music/music-data.asm"
090B9                           ;
090B9                           ; Music Data
090B9                           ; ==========
090B9                           ;
090B9                           ; Each segment of music is broken down into tracks for individual instruments.
090B9                           ;
090B9                           ; Square 2:
090B9                           ;   $00: End of segment
090B9                           ;   $01-$7D: Note On
090B9                           ;   $7E: Rest
090B9                           ;   $80-$FE: first nybble is the instrument, second nybble is the note length
090B9                           ;            as determined by the note length lookup table. The next byte is
090B9                           ;            expected to be a Note On.
090B9                           ;   $FF: activate bend if used after a Note On
090B9                           ;
090B9                           ; Square 1 is the same as Square 2, except for the following:
090B9                           ;   $00: Activate a ramp effect
090B9                           ;
090B9                           ; Triangle is the same as Square 2, except for the following:
090B9                           ;   $00: Mute output (triangle channel is constant volume otherwise)
090B9                           ;   $80-$FF: second nybble is the note length from the note length lookup table
090B9                           ;
090B9                           ; Noise/DPCM:
090B9                           ;   $00: Restart (used for looping percussion within a segment)
090B9                           ;   $01: Rest
090B9                           ;   $02-$7F: Various note-on values, low bit is ignored
090B9                           ;   $02: Closed Hi-Hat
090B9                           ;   $04: Kick
090B9                           ;   $06: Open Hi-Hat
090B9                           ;   $08: Quiet Hi-Hat
090B9                           ;   $0A: Crash Cymbal
090B9                           ;   $0C: Brushed Snare
090B9                           ;   $0E: Muted Crash
090B9                           ;   $10: Snare
090B9                           ;   $12: Deep Kick
090B9                           ;   $14: High Static
090B9                           ;   $16: Low Static
090B9                           ;   $18: Ride
090B9                           ;   $1A: Closed Hi-Hat
090B9                           ;   $1C: Medium Static
090B9                           ;   $1E: Obnoxious Crash
090B9                           ;   $80-$FF: second nybble is the note length from the note length lookup table
090B9                           ;
090B9                           ; DPCM is the same as Noise, except for the following:
090B9                           ;
090B9                           ; The SMB3 disassembly is a good reference, since the format is the same:
090B9                           ; http://sonicepoch.com/sm3mix/disassembly.html#TRACK
090B9                           ;
090B9                           MusicData:
090B9                           
090B9                           ;
090B9                           ; Ending music
090B9                           ; Segments 3 and 4 share a noise track (set in segment 4)
090B9                           ;
090B9                           .include "src/music/segments/ending/ending-1.asm"
090B9                           MusicDataEnding1:
090B9                           MusicDataEnding1_Square2:
090B9 8A                        	.db $8A
090BA 50                        	.db $50
090BB 84                        	.db $84
090BC 7E                        	.db $7E
090BD 52                        	.db $52
090BE 50                        	.db $50
090BF 48                        	.db $48
090C0 82                        	.db $82
090C1 4C                        	.db $4C
090C2 7E                        	.db $7E
090C3 83                        	.db $83
090C4 50                        	.db $50
090C5 8A                        	.db $8A
090C6 52                        	.db $52
090C7 88                        	.db $88
090C8 4C                        	.db $4C
090C9 8A                        	.db $8A
090CA 56                        	.db $56
090CB 82                        	.db $82
090CC 7E                        	.db $7E
090CD 7E                        	.db $7E
090CE 52                        	.db $52
090CF 52                        	.db $52
090D0 83                        	.db $83
090D1 50                        	.db $50
090D2 4C                        	.db $4C
090D3 8B                        	.db $8B
090D4 50                        	.db $50
090D5 88                        	.db $88
090D6 4C                        	.db $4C
090D7 00                        	.db $00
090D8                           MusicDataEnding1_Square1:
090D8 8A                        	.db $8A
090D9 3E                        	.db $3E
090DA 84                        	.db $84
090DB 7E                        	.db $7E
090DC 42                        	.db $42
090DD 3E                        	.db $3E
090DE 38                        	.db $38
090DF 82                        	.db $82
090E0 3A                        	.db $3A
090E1 7E                        	.db $7E
090E2 83                        	.db $83
090E3 3E                        	.db $3E
090E4 8A                        	.db $8A
090E5 44                        	.db $44
090E6 88                        	.db $88
090E7 3A                        	.db $3A
090E8 8A                        	.db $8A
090E9 44                        	.db $44
090EA 82                        	.db $82
090EB 7E                        	.db $7E
090EC 7E                        	.db $7E
090ED 44                        	.db $44
090EE 44                        	.db $44
090EF 83                        	.db $83
090F0 3E                        	.db $3E
090F1 3A                        	.db $3A
090F2 8B                        	.db $8B
090F3 3E                        	.db $3E
090F4 88                        	.db $88
090F5 3A                        	.db $3A
090F6                           MusicDataEnding1_Triangle:
090F6 88                        	.db $88
090F7 30                        	.db $30
090F8 82                        	.db $82
090F9 30                        	.db $30
090FA 30                        	.db $30
090FB 83                        	.db $83
090FC 30                        	.db $30
090FD 84                        	.db $84
090FE 30                        	.db $30
090FF 30                        	.db $30
09100 30                        	.db $30
09101 30                        	.db $30
09102 88                        	.db $88
09103 30                        	.db $30
09104 82                        	.db $82
09105 30                        	.db $30
09106 30                        	.db $30
09107 83                        	.db $83
09108 30                        	.db $30
09109 84                        	.db $84
0910A 30                        	.db $30
0910B 30                        	.db $30
0910C 30                        	.db $30
0910D 30                        	.db $30
0910E 88                        	.db $88
0910F 30                        	.db $30
09110 82                        	.db $82
09111 30                        	.db $30
09112 30                        	.db $30
09113 83                        	.db $83
09114 30                        	.db $30
09115 84                        	.db $84
09116 30                        	.db $30
09117 30                        	.db $30
09118 30                        	.db $30
09119 30                        	.db $30
0911A 88                        	.db $88
0911B 30                        	.db $30
0911C 82                        	.db $82
0911D 30                        	.db $30
0911E 30                        	.db $30
0911F 83                        	.db $83
09120 30                        	.db $30
09121 84                        	.db $84
09122 30                        	.db $30
09123 30                        	.db $30
09124 2E                        	.db $2E
09125 2E                        	.db $2E
09126                           MusicDataEnding1_Noise:
09126 88                        	.db $88
09127 10                        	.db $10
09128 82                        	.db $82
09129 10                        	.db $10
0912A 82                        	.db $82
0912B 10                        	.db $10
0912C 83                        	.db $83
0912D 10                        	.db $10
0912E 84                        	.db $84
0912F 10                        	.db $10
09130 84                        	.db $84
09131 10                        	.db $10
09132 84                        	.db $84
09133 10                        	.db $10
09134 84                        	.db $84
09135 10                        	.db $10
09136 00                        	.db $00
09137                           .include "src/music/segments/ending/ending-3.asm"
09137                           MusicDataEnding3:
09137                           MusicDataEnding3_Square2:
09137 8A                        	.db $8A
09138 50                        	.db $50
09139 84                        	.db $84
0913A 7E                        	.db $7E
0913B 52                        	.db $52
0913C 50                        	.db $50
0913D 48                        	.db $48
0913E 82                        	.db $82
0913F 4C                        	.db $4C
09140 7E                        	.db $7E
09141 83                        	.db $83
09142 4C                        	.db $4C
09143 8A                        	.db $8A
09144 56                        	.db $56
09145 88                        	.db $88
09146 3E                        	.db $3E
09147 8A                        	.db $8A
09148 4C                        	.db $4C
09149 84                        	.db $84
0914A 7E                        	.db $7E
0914B 4E                        	.db $4E
0914C 4C                        	.db $4C
0914D 44                        	.db $44
0914E 82                        	.db $82
0914F 48                        	.db $48
09150 7E                        	.db $7E
09151 83                        	.db $83
09152 48                        	.db $48
09153 8A                        	.db $8A
09154 52                        	.db $52
09155 88                        	.db $88
09156 3A                        	.db $3A
09157 00                        	.db $00
09158                           MusicDataEnding3_Square1:
09158 8A                        	.db $8A
09159 48                        	.db $48
0915A 84                        	.db $84
0915B 7E                        	.db $7E
0915C 48                        	.db $48
0915D 48                        	.db $48
0915E 3E                        	.db $3E
0915F 82                        	.db $82
09160 46                        	.db $46
09161 7E                        	.db $7E
09162 83                        	.db $83
09163 46                        	.db $46
09164 8A                        	.db $8A
09165 4C                        	.db $4C
09166 88                        	.db $88
09167 34                        	.db $34
09168 8A                        	.db $8A
09169 44                        	.db $44
0916A 84                        	.db $84
0916B 7E                        	.db $7E
0916C 44                        	.db $44
0916D 44                        	.db $44
0916E 3A                        	.db $3A
0916F 82                        	.db $82
09170 42                        	.db $42
09171 7E                        	.db $7E
09172 83                        	.db $83
09173 42                        	.db $42
09174 8A                        	.db $8A
09175 48                        	.db $48
09176 88                        	.db $88
09177 30                        	.db $30
09178                           MusicDataEnding3_Triangle:
09178 88                        	.db $88
09179 30                        	.db $30
0917A 82                        	.db $82
0917B 30                        	.db $30
0917C 30                        	.db $30
0917D 83                        	.db $83
0917E 30                        	.db $30
0917F 84                        	.db $84
09180 30                        	.db $30
09181 30                        	.db $30
09182 30                        	.db $30
09183 30                        	.db $30
09184 88                        	.db $88
09185 2E                        	.db $2E
09186 82                        	.db $82
09187 2E                        	.db $2E
09188 2E                        	.db $2E
09189 83                        	.db $83
0918A 2E                        	.db $2E
0918B 84                        	.db $84
0918C 2E                        	.db $2E
0918D 2E                        	.db $2E
0918E 2E                        	.db $2E
0918F 2E                        	.db $2E
09190 88                        	.db $88
09191 2C                        	.db $2C
09192 82                        	.db $82
09193 2C                        	.db $2C
09194 2C                        	.db $2C
09195 83                        	.db $83
09196 2C                        	.db $2C
09197 84                        	.db $84
09198 2C                        	.db $2C
09199 2C                        	.db $2C
0919A 2C                        	.db $2C
0919B 2C                        	.db $2C
0919C 88                        	.db $88
0919D 2A                        	.db $2A
0919E 82                        	.db $82
0919F 2A                        	.db $2A
091A0 2A                        	.db $2A
091A1 83                        	.db $83
091A2 2A                        	.db $2A
091A3 84                        	.db $84
091A4 2A                        	.db $2A
091A5 2A                        	.db $2A
091A6 2A                        	.db $2A
091A7 2A                        	.db $2A
091A8                           .include "src/music/segments/ending/ending-4.asm"
091A8                           MusicDataEnding4:
091A8                           MusicDataEnding4_Square2:
091A8 8A                        	.db $8A
091A9 48                        	.db $48
091AA 84                        	.db $84
091AB 7E                        	.db $7E
091AC 48                        	.db $48
091AD 4C                        	.db $4C
091AE 52                        	.db $52
091AF 8A                        	.db $8A
091B0 50                        	.db $50
091B1 88                        	.db $88
091B2 48                        	.db $48
091B3 3E                        	.db $3E
091B4 8A                        	.db $8A
091B5 42                        	.db $42
091B6 84                        	.db $84
091B7 7E                        	.db $7E
091B8 42                        	.db $42
091B9 46                        	.db $46
091BA 48                        	.db $48
091BB 8A                        	.db $8A
091BC 42                        	.db $42
091BD 84                        	.db $84
091BE 7E                        	.db $7E
091BF 42                        	.db $42
091C0 46                        	.db $46
091C1 50                        	.db $50
091C2 00                        	.db $00
091C3                           MusicDataEnding3_Noise:
091C3                           MusicDataEnding4_Noise:
091C3 88                        	.db $88
091C4 10                        	.db $10
091C5 82                        	.db $82
091C6 10                        	.db $10
091C7 10                        	.db $10
091C8 83                        	.db $83
091C9 10                        	.db $10
091CA 84                        	.db $84
091CB 10                        	.db $10
091CC 84                        	.db $84
091CD 10                        	.db $10
091CE 10                        	.db $10
091CF 10                        	.db $10
091D0 00                        	.db $00
091D1                           MusicDataEnding4_Square1:
091D1 8A                        	.db $8A
091D2 40                        	.db $40
091D3 84                        	.db $84
091D4 7E                        	.db $7E
091D5 40                        	.db $40
091D6 40                        	.db $40
091D7 48                        	.db $48
091D8 8A                        	.db $8A
091D9 48                        	.db $48
091DA 88                        	.db $88
091DB 3E                        	.db $3E
091DC 38                        	.db $38
091DD 8A                        	.db $8A
091DE 3A                        	.db $3A
091DF 84                        	.db $84
091E0 7E                        	.db $7E
091E1 3A                        	.db $3A
091E2 3A                        	.db $3A
091E3 42                        	.db $42
091E4 8A                        	.db $8A
091E5 3A                        	.db $3A
091E6 84                        	.db $84
091E7 7E                        	.db $7E
091E8 3A                        	.db $3A
091E9 3A                        	.db $3A
091EA 3A                        	.db $3A
091EB                           MusicDataEnding4_Triangle:
091EB 88                        	.db $88
091EC 28                        	.db $28
091ED 82                        	.db $82
091EE 28                        	.db $28
091EF 28                        	.db $28
091F0 83                        	.db $83
091F1 28                        	.db $28
091F2 84                        	.db $84
091F3 28                        	.db $28
091F4 28                        	.db $28
091F5 28                        	.db $28
091F6 28                        	.db $28
091F7 88                        	.db $88
091F8 26                        	.db $26
091F9 82                        	.db $82
091FA 26                        	.db $26
091FB 26                        	.db $26
091FC 83                        	.db $83
091FD 26                        	.db $26
091FE 84                        	.db $84
091FF 26                        	.db $26
09200 26                        	.db $26
09201 26                        	.db $26
09202 26                        	.db $26
09203 88                        	.db $88
09204 34                        	.db $34
09205 82                        	.db $82
09206 34                        	.db $34
09207 34                        	.db $34
09208 83                        	.db $83
09209 34                        	.db $34
0920A 84                        	.db $84
0920B 34                        	.db $34
0920C 34                        	.db $34
0920D 34                        	.db $34
0920E 34                        	.db $34
0920F 88                        	.db $88
09210 26                        	.db $26
09211 82                        	.db $82
09212 26                        	.db $26
09213 26                        	.db $26
09214 83                        	.db $83
09215 26                        	.db $26
09216 84                        	.db $84
09217 26                        	.db $26
09218 26                        	.db $26
09219 26                        	.db $26
0921A 26                        	.db $26
0921B                           .include "src/music/segments/ending/ending-2.asm"
0921B                           MusicDataEnding2:
0921B                           MusicDataEnding2_Square2:
0921B 8A                        	.db $8A
0921C 48                        	.db $48
0921D 84                        	.db $84
0921E 7E                        	.db $7E
0921F 46                        	.db $46
09220 48                        	.db $48
09221 4C                        	.db $4C
09222 8A                        	.db $8A
09223 48                        	.db $48
09224 84                        	.db $84
09225 7E                        	.db $7E
09226 46                        	.db $46
09227 48                        	.db $48
09228 4C                        	.db $4C
09229 8A                        	.db $8A
0922A 48                        	.db $48
0922B 84                        	.db $84
0922C 7E                        	.db $7E
0922D 42                        	.db $42
0922E 48                        	.db $48
0922F 4C                        	.db $4C
09230 8A                        	.db $8A
09231 56                        	.db $56
09232 7E                        	.db $7E
09233 00                        	.db $00
09234                           MusicDataEnding2_Noise:
09234 88                        	.db $88
09235 10                        	.db $10
09236 82                        	.db $82
09237 10                        	.db $10
09238 82                        	.db $82
09239 10                        	.db $10
0923A 83                        	.db $83
0923B 10                        	.db $10
0923C 84                        	.db $84
0923D 10                        	.db $10
0923E 84                        	.db $84
0923F 10                        	.db $10
09240 84                        	.db $84
09241 10                        	.db $10
09242 84                        	.db $84
09243 10                        	.db $10
09244 00                        	.db $00
09245                           MusicDataEnding2_Triangle:
09245 88                        	.db $88
09246 2A                        	.db $2A
09247 82                        	.db $82
09248 2A                        	.db $2A
09249 2A                        	.db $2A
0924A 83                        	.db $83
0924B 2A                        	.db $2A
0924C 84                        	.db $84
0924D 28                        	.db $28
0924E 28                        	.db $28
0924F 28                        	.db $28
09250 28                        	.db $28
09251 88                        	.db $88
09252 26                        	.db $26
09253 82                        	.db $82
09254 26                        	.db $26
09255 26                        	.db $26
09256 83                        	.db $83
09257 26                        	.db $26
09258 84                        	.db $84
09259 24                        	.db $24
0925A 24                        	.db $24
0925B 24                        	.db $24
0925C 24                        	.db $24
0925D 88                        	.db $88
0925E 22                        	.db $22
0925F 82                        	.db $82
09260 22                        	.db $22
09261 22                        	.db $22
09262 83                        	.db $83
09263 22                        	.db $22
09264 84                        	.db $84
09265 22                        	.db $22
09266 22                        	.db $22
09267 22                        	.db $22
09268 22                        	.db $22
09269 88                        	.db $88
0926A 26                        	.db $26
0926B 82                        	.db $82
0926C 26                        	.db $26
0926D 26                        	.db $26
0926E 83                        	.db $83
0926F 26                        	.db $26
09270 84                        	.db $84
09271 26                        	.db $26
09272 26                        	.db $26
09273 26                        	.db $26
09274 26                        	.db $26
09275                           MusicDataEnding2_Square1:
09275 8A                        	.db $8A
09276 38                        	.db $38
09277 84                        	.db $84
09278 7E                        	.db $7E
09279 3A                        	.db $3A
0927A 3A                        	.db $3A
0927B 3A                        	.db $3A
0927C 8A                        	.db $8A
0927D 38                        	.db $38
0927E 84                        	.db $84
0927F 7E                        	.db $7E
09280 36                        	.db $36
09281 36                        	.db $36
09282 36                        	.db $36
09283 8A                        	.db $8A
09284 34                        	.db $34
09285 84                        	.db $84
09286 7E                        	.db $7E
09287 30                        	.db $30
09288 3A                        	.db $3A
09289 3A                        	.db $3A
0928A 8A                        	.db $8A
0928B 48                        	.db $48
0928C 46                        	.db $46
0928D                           IFNDEF PROTOTYPE_MUSIC_ENDING
0928D                           	.include "src/music/segments/ending/ending-5.asm"
0928D                           MusicDataEnding5:
0928D                           MusicDataEnding5_Square2:
0928D 8A                        	.db $8A
0928E 48                        	.db $48
0928F 48                        	.db $48
09290 88                        	.db $88
09291 48                        	.db $48
09292 84                        	.db $84
09293 26                        	.db $26
09294 26                        	.db $26
09295 26                        	.db $26
09296 8A                        	.db $8A
09297 26                        	.db $26
09298 7E                        	.db $7E
09299 8C                        	.db $8C
0929A 7E                        	.db $7E
0929B 88                        	.db $88
0929C 7E                        	.db $7E
0929D FC                        	.db $FC
0929E 7E                        	.db $7E
0929F 7E                        	.db $7E
092A0 00                        	.db $00
092A1                           MusicDataEnding5_Square1:
092A1 88                        	.db $88
092A2 40                        	.db $40
092A3 82                        	.db $82
092A4 40                        	.db $40
092A5 40                        	.db $40
092A6 83                        	.db $83
092A7 40                        	.db $40
092A8 88                        	.db $88
092A9 3A                        	.db $3A
092AA 82                        	.db $82
092AB 3A                        	.db $3A
092AC 3A                        	.db $3A
092AD 83                        	.db $83
092AE 3A                        	.db $3A
092AF 88                        	.db $88
092B0 38                        	.db $38
092B1 84                        	.db $84
092B2 18                        	.db $18
092B3 18                        	.db $18
092B4 18                        	.db $18
092B5 88                        	.db $88
092B6 18                        	.db $18
092B7 F4                        	.db $F4
092B8 48                        	.db $48
092B9 56                        	.db $56
092BA 50                        	.db $50
092BB 56                        	.db $56
092BC 46                        	.db $46
092BD 56                        	.db $56
092BE 4C                        	.db $4C
092BF 56                        	.db $56
092C0 42                        	.db $42
092C1 56                        	.db $56
092C2 50                        	.db $50
092C3 56                        	.db $56
092C4 46                        	.db $46
092C5 56                        	.db $56
092C6 4C                        	.db $4C
092C7 56                        	.db $56
092C8 F4                        	.db $F4
092C9 48                        	.db $48
092CA 56                        	.db $56
092CB 50                        	.db $50
092CC 56                        	.db $56
092CD 46                        	.db $46
092CE 56                        	.db $56
092CF 4C                        	.db $4C
092D0 56                        	.db $56
092D1 42                        	.db $42
092D2 56                        	.db $56
092D3 50                        	.db $50
092D4 56                        	.db $56
092D5 46                        	.db $46
092D6 56                        	.db $56
092D7 4C                        	.db $4C
092D8 56                        	.db $56
092D9                           MusicDataEnding5_Triangle:
092D9 88                        	.db $88
092DA 28                        	.db $28
092DB 82                        	.db $82
092DC 28                        	.db $28
092DD 28                        	.db $28
092DE 83                        	.db $83
092DF 28                        	.db $28
092E0 88                        	.db $88
092E1 2C                        	.db $2C
092E2 82                        	.db $82
092E3 2C                        	.db $2C
092E4 2C                        	.db $2C
092E5 83                        	.db $83
092E6 2C                        	.db $2C
092E7 88                        	.db $88
092E8 30                        	.db $30
092E9 84                        	.db $84
092EA 30                        	.db $30
092EB 30                        	.db $30
092EC 30                        	.db $30
092ED 8A                        	.db $8A
092EE 30                        	.db $30
092EF 7E                        	.db $7E
092F0 8C                        	.db $8C
092F1 7E                        	.db $7E
092F2 7E                        	.db $7E
092F3 7E                        	.db $7E
092F4 7E                        	.db $7E
092F5                           MusicDataEnding5_Noise:
092F5 88                        	.db $88
092F6 10                        	.db $10
092F7 82                        	.db $82
092F8 10                        	.db $10
092F9 10                        	.db $10
092FA 83                        	.db $83
092FB 10                        	.db $10
092FC 88                        	.db $88
092FD 10                        	.db $10
092FE 82                        	.db $82
092FF 10                        	.db $10
09300 10                        	.db $10
09301 83                        	.db $83
09302 10                        	.db $10
09303 88                        	.db $88
09304 10                        	.db $10
09305 84                        	.db $84
09306 10                        	.db $10
09307 10                        	.db $10
09308 10                        	.db $10
09309 8A                        	.db $8A
0930A 10                        	.db $10
0930B 01                        	.db $01
0930C 8C                        	.db $8C
0930D 01                        	.db $01
0930E 01                        	.db $01
0930F 01                        	.db $01
09310 01                        	.db $01
09311                           	.include "src/music/segments/ending/ending-6.asm"
09311                           IFNDEF PROTOTYPE_MUSIC
09311                           MusicDataEnding6:
09311                           MusicDataEnding6_Square2:
09311 F4                        	.db $F4
09312 68                        	.db $68
09313 6A                        	.db $6A
09314 6E                        	.db $6E
09315 64                        	.db $64
09316 7E                        	.db $7E
09317 64                        	.db $64
09318 7E                        	.db $7E
09319 64                        	.db $64
0931A 60                        	.db $60
0931B 64                        	.db $64
0931C 68                        	.db $68
0931D 5E                        	.db $5E
0931E 7E                        	.db $7E
0931F 5E                        	.db $5E
09320 7E                        	.db $7E
09321 56                        	.db $56
09322 5A                        	.db $5A
09323 5E                        	.db $5E
09324 60                        	.db $60
09325 56                        	.db $56
09326 7E                        	.db $7E
09327 56                        	.db $56
09328 54                        	.db $54
09329 56                        	.db $56
0932A 5A                        	.db $5A
0932B 5E                        	.db $5E
0932C 60                        	.db $60
0932D 5E                        	.db $5E
0932E 7E                        	.db $7E
0932F 60                        	.db $60
09330 64                        	.db $64
09331 7E                        	.db $7E
09332 68                        	.db $68
09333 6A                        	.db $6A
09334 6E                        	.db $6E
09335 64                        	.db $64
09336 7E                        	.db $7E
09337 64                        	.db $64
09338 6E                        	.db $6E
09339 76                        	.db $76
0933A 78                        	.db $78
0933B 7C                        	.db $7C
0933C 78                        	.db $78
0933D 76                        	.db $76
0933E 7E                        	.db $7E
0933F 72                        	.db $72
09340 6E                        	.db $6E
09341 6A                        	.db $6A
09342 68                        	.db $68
09343 6A                        	.db $6A
09344 6E                        	.db $6E
09345 64                        	.db $64
09346 7E                        	.db $7E
09347 64                        	.db $64
09348 60                        	.db $60
09349 5E                        	.db $5E
0934A 60                        	.db $60
0934B 7E                        	.db $7E
0934C FB                        	.db $FB
0934D 7E                        	.db $7E
0934E F4                        	.db $F4
0934F 60                        	.db $60
09350 64                        	.db $64
09351 60                        	.db $60
09352 64                        	.db $64
09353 7E                        	.db $7E
09354 66                        	.db $66
09355 6A                        	.db $6A
09356 6E                        	.db $6E
09357 FC                        	.db $FC
09358 7E                        	.db $7E
09359 F4                        	.db $F4
0935A 60                        	.db $60
0935B 64                        	.db $64
0935C 60                        	.db $60
0935D 64                        	.db $64
0935E 7E                        	.db $7E
0935F 66                        	.db $66
09360 7E                        	.db $7E
09361 6A                        	.db $6A
09362 6E                        	.db $6E
09363 7E                        	.db $7E
09364 FB                        	.db $FB
09365 7E                        	.db $7E
09366 F4                        	.db $F4
09367 60                        	.db $60
09368 64                        	.db $64
09369 60                        	.db $60
0936A 64                        	.db $64
0936B 7E                        	.db $7E
0936C 66                        	.db $66
0936D 6A                        	.db $6A
0936E 6E                        	.db $6E
0936F 7E                        	.db $7E
09370 68                        	.db $68
09371 60                        	.db $60
09372 56                        	.db $56
09373 FA                        	.db $FA
09374 7E                        	.db $7E
09375 F4                        	.db $F4
09376 60                        	.db $60
09377 64                        	.db $64
09378 60                        	.db $60
09379 64                        	.db $64
0937A 7E                        	.db $7E
0937B 5A                        	.db $5A
0937C 5E                        	.db $5E
0937D 60                        	.db $60
0937E 64                        	.db $64
0937F 7E                        	.db $7E
09380 8B                        	.db $8B
09381 7E                        	.db $7E
09382 00                        	.db $00
09383                           MusicDataEnding6_Square1:
09383 F4                        	.db $F4
09384 48                        	.db $48
09385 56                        	.db $56
09386 50                        	.db $50
09387 56                        	.db $56
09388 46                        	.db $46
09389 56                        	.db $56
0938A 4C                        	.db $4C
0938B 56                        	.db $56
0938C 42                        	.db $42
0938D 56                        	.db $56
0938E 50                        	.db $50
0938F 56                        	.db $56
09390 3E                        	.db $3E
09391 56                        	.db $56
09392 4C                        	.db $4C
09393 56                        	.db $56
09394 3A                        	.db $3A
09395 52                        	.db $52
09396 48                        	.db $48
09397 52                        	.db $52
09398 38                        	.db $38
09399 50                        	.db $50
0939A 46                        	.db $46
0939B 50                        	.db $50
0939C 34                        	.db $34
0939D 4C                        	.db $4C
0939E 42                        	.db $42
0939F 4C                        	.db $4C
093A0 3E                        	.db $3E
093A1 52                        	.db $52
093A2 46                        	.db $46
093A3 52                        	.db $52
093A4 48                        	.db $48
093A5 56                        	.db $56
093A6 50                        	.db $50
093A7 56                        	.db $56
093A8 46                        	.db $46
093A9 56                        	.db $56
093AA 4C                        	.db $4C
093AB 56                        	.db $56
093AC 44                        	.db $44
093AD 52                        	.db $52
093AE 4C                        	.db $4C
093AF 52                        	.db $52
093B0 42                        	.db $42
093B1 52                        	.db $52
093B2 48                        	.db $48
093B3 52                        	.db $52
093B4 3E                        	.db $3E
093B5 50                        	.db $50
093B6 48                        	.db $48
093B7 50                        	.db $50
093B8 3E                        	.db $3E
093B9 4C                        	.db $4C
093BA 46                        	.db $46
093BB 4C                        	.db $4C
093BC 48                        	.db $48
093BD 56                        	.db $56
093BE 50                        	.db $50
093BF 56                        	.db $56
093C0 48                        	.db $48
093C1 56                        	.db $56
093C2 50                        	.db $50
093C3 56                        	.db $56
093C4 40                        	.db $40
093C5 4E                        	.db $4E
093C6 48                        	.db $48
093C7 4E                        	.db $4E
093C8 40                        	.db $40
093C9 4E                        	.db $4E
093CA 48                        	.db $48
093CB 4E                        	.db $4E
093CC 3E                        	.db $3E
093CD 50                        	.db $50
093CE 48                        	.db $48
093CF 50                        	.db $50
093D0 3E                        	.db $3E
093D1 50                        	.db $50
093D2 48                        	.db $48
093D3 50                        	.db $50
093D4 40                        	.db $40
093D5 4E                        	.db $4E
093D6 48                        	.db $48
093D7 4E                        	.db $4E
093D8 40                        	.db $40
093D9 4E                        	.db $4E
093DA 48                        	.db $48
093DB 4E                        	.db $4E
093DC 3E                        	.db $3E
093DD 50                        	.db $50
093DE 48                        	.db $48
093DF 50                        	.db $50
093E0 3E                        	.db $3E
093E1 50                        	.db $50
093E2 48                        	.db $48
093E3 50                        	.db $50
093E4 40                        	.db $40
093E5 4E                        	.db $4E
093E6 48                        	.db $48
093E7 4E                        	.db $4E
093E8 40                        	.db $40
093E9 4E                        	.db $4E
093EA 48                        	.db $48
093EB 4E                        	.db $4E
093EC 3E                        	.db $3E
093ED 50                        	.db $50
093EE 48                        	.db $48
093EF 50                        	.db $50
093F0 3E                        	.db $3E
093F1 50                        	.db $50
093F2 48                        	.db $48
093F3 50                        	.db $50
093F4 3C                        	.db $3C
093F5 4C                        	.db $4C
093F6 48                        	.db $48
093F7 4C                        	.db $4C
093F8 3C                        	.db $3C
093F9 4C                        	.db $4C
093FA 48                        	.db $48
093FB 4C                        	.db $4C
093FC 3E                        	.db $3E
093FD 4C                        	.db $4C
093FE 46                        	.db $46
093FF 4C                        	.db $4C
09400 3E                        	.db $3E
09401 52                        	.db $52
09402 4C                        	.db $4C
09403 5E                        	.db $5E
09404                           ENDIF
09404                           ELSE
09404                           	.include "src/music/segments/ending/ending-5-prototype.asm"
09404                           ENDIF
09404                           
09404                           ;
09404                           ; Starman music
09404                           ;
09404                           IFNDEF PROTOTYPE_MUSIC_STARMAN
09404                           	.include "src/music/segments/star/star.asm"
09404                           MusicDataStar:
09404                           MusicDataStar_Square2:
09404 98                        	.db $98
09405 48                        	.db $48
09406 48                        	.db $48
09407 48                        	.db $48
09408 94                        	.db $94
09409 7E                        	.db $7E
0940A 48                        	.db $48
0940B 7E                        	.db $7E
0940C 99                        	.db $99
0940D 48                        	.db $48
0940E 98                        	.db $98
0940F 48                        	.db $48
09410 48                        	.db $48
09411 46                        	.db $46
09412 46                        	.db $46
09413 46                        	.db $46
09414 94                        	.db $94
09415 7E                        	.db $7E
09416 46                        	.db $46
09417 7E                        	.db $7E
09418 99                        	.db $99
09419 46                        	.db $46
0941A 98                        	.db $98
0941B 46                        	.db $46
0941C 46                        	.db $46
0941D 00                        	.db $00
0941E                           
0941E                           MusicDataStar_Square1:
0941E 98                        	.db $98
0941F 3A                        	.db $3A
09420 3A                        	.db $3A
09421 3A                        	.db $3A
09422 94                        	.db $94
09423 34                        	.db $34
09424 98                        	.db $98
09425 3A                        	.db $3A
09426 3A                        	.db $3A
09427 94                        	.db $94
09428 34                        	.db $34
09429 3A                        	.db $3A
0942A 34                        	.db $34
0942B 98                        	.db $98
0942C 3A                        	.db $3A
0942D 38                        	.db $38
0942E 38                        	.db $38
0942F 38                        	.db $38
09430 94                        	.db $94
09431 30                        	.db $30
09432 98                        	.db $98
09433 38                        	.db $38
09434 38                        	.db $38
09435 94                        	.db $94
09436 30                        	.db $30
09437 38                        	.db $38
09438 30                        	.db $30
09439 98                        	.db $98
0943A 38                        	.db $38
0943B                           
0943B                           MusicDataStar_Triangle:
0943B 9A                        	.db $9A
0943C 34                        	.db $34
0943D 99                        	.db $99
0943E 42                        	.db $42
0943F 4C                        	.db $4C
09440 98                        	.db $98
09441 7E                        	.db $7E
09442 42                        	.db $42
09443 4C                        	.db $4C
09444 9A                        	.db $9A
09445 30                        	.db $30
09446 99                        	.db $99
09447 3E                        	.db $3E
09448 48                        	.db $48
09449 98                        	.db $98
0944A 7E                        	.db $7E
0944B 3E                        	.db $3E
0944C 48                        	.db $48
0944D                           
0944D                           MusicDataStar_DPCM:
0944D                           IFNDEF EXPAND_MUSIC
0944D 94 01                     	.db $94, $01
0944F 98 10                     	.db $98, $10
09451 94 10 10 10 01 01         	.db $94, $10, $10, $10, $01, $01
09457 00                        	.db $00
09458                           ELSE
09458                           	.db $94, $02
09458                           	.db $98, $06
09458                           	.db $94, $06, $06, $06, $02, $02
09458                           	.db $00
09458                           ENDIF
09458                           ELSE
09458                           	.include "src/music/segments/star/star-prototype.asm"
09458                           ENDIF
09458                           
09458                           ;
09458                           ; Underground music
09458                           ; (including prototype version)
09458                           ;
09458                           IFNDEF PROTOTYPE_MUSIC_UNDERGROUND
09458                           	.include "src/music/segments/underground/underground.asm"
09458                           MusicDataUnderground:
09458                           MusicDataUnderground_Square2:
09458 A4                        	.db $A4
09459 0A                        	.db $0A
0945A 18                        	.db $18
0945B 22                        	.db $22
0945C 84                        	.db $84
0945D 40                        	.db $40
0945E 7E                        	.db $7E
0945F 89                        	.db $89
09460 42                        	.db $42
09461 A4                        	.db $A4
09462 0A                        	.db $0A
09463 18                        	.db $18
09464 22                        	.db $22
09465 84                        	.db $84
09466 40                        	.db $40
09467 7E                        	.db $7E
09468 89                        	.db $89
09469 3E                        	.db $3E
0946A B8                        	.db $B8
0946B 7E                        	.db $7E
0946C B9                        	.db $B9
0946D 48                        	.db $48
0946E 44                        	.db $44
0946F B8                        	.db $B8
09470 3A                        	.db $3A
09471 B9                        	.db $B9
09472 40                        	.db $40
09473 B8                        	.db $B8
09474 44                        	.db $44
09475 B4                        	.db $B4
09476 36                        	.db $36
09477 B8                        	.db $B8
09478 3A                        	.db $3A
09479 B9                        	.db $B9
0947A 30                        	.db $30
0947B B9                        	.db $B9
0947C 34                        	.db $34
0947D BB                        	.db $BB
0947E 36                        	.db $36
0947F B8                        	.db $B8
09480 7E                        	.db $7E
09481 00                        	.db $00
09482                           
09482                           MusicDataUnderground_Square1:
09482 B4                        	.db $B4
09483 0A                        	.db $0A
09484 18                        	.db $18
09485 22                        	.db $22
09486 84                        	.db $84
09487 36                        	.db $36
09488 7E                        	.db $7E
09489 89                        	.db $89
0948A 38                        	.db $38
0948B B4                        	.db $B4
0948C 0A                        	.db $0A
0948D 18                        	.db $18
0948E 22                        	.db $22
0948F 84                        	.db $84
09490 36                        	.db $36
09491 7E                        	.db $7E
09492 89                        	.db $89
09493 34                        	.db $34
09494 B8                        	.db $B8
09495 7E                        	.db $7E
09496 B9                        	.db $B9
09497 3A                        	.db $3A
09498 36                        	.db $36
09499 B8                        	.db $B8
0949A 30                        	.db $30
0949B B9                        	.db $B9
0949C 36                        	.db $36
0949D B8                        	.db $B8
0949E 3A                        	.db $3A
0949F B4                        	.db $B4
094A0 2C                        	.db $2C
094A1 B8                        	.db $B8
094A2 30                        	.db $30
094A3 B9                        	.db $B9
094A4 22                        	.db $22
094A5 B9                        	.db $B9
094A6 26                        	.db $26
094A7 BB                        	.db $BB
094A8 28                        	.db $28
094A9 B8                        	.db $B8
094AA 7E                        	.db $7E
094AB                           
094AB                           MusicDataUnderground_Triangle:
094AB 84                        	.db $84
094AC 22                        	.db $22
094AD 30                        	.db $30
094AE 3A                        	.db $3A
094AF 42                        	.db $42
094B0 7E                        	.db $7E
094B1 44                        	.db $44
094B2 3A                        	.db $3A
094B3 30                        	.db $30
094B4 22                        	.db $22
094B5 30                        	.db $30
094B6 3A                        	.db $3A
094B7 42                        	.db $42
094B8 7E                        	.db $7E
094B9 40                        	.db $40
094BA 3A                        	.db $3A
094BB 30                        	.db $30
094BC 22                        	.db $22
094BD 30                        	.db $30
094BE 3A                        	.db $3A
094BF 30                        	.db $30
094C0 7E                        	.db $7E
094C1 40                        	.db $40
094C2 3A                        	.db $3A
094C3 30                        	.db $30
094C4 22                        	.db $22
094C5 30                        	.db $30
094C6 3A                        	.db $3A
094C7 30                        	.db $30
094C8 7E                        	.db $7E
094C9 40                        	.db $40
094CA 3A                        	.db $3A
094CB 30                        	.db $30
094CC 22                        	.db $22
094CD 30                        	.db $30
094CE 3A                        	.db $3A
094CF 30                        	.db $30
094D0 7E                        	.db $7E
094D1 40                        	.db $40
094D2 3A                        	.db $3A
094D3 30                        	.db $30
094D4 22                        	.db $22
094D5 30                        	.db $30
094D6 3A                        	.db $3A
094D7 30                        	.db $30
094D8 7E                        	.db $7E
094D9 40                        	.db $40
094DA 3A                        	.db $3A
094DB 30                        	.db $30
094DC                           
094DC                           MusicDataUnderground_DPCM:
094DC                           IFNDEF EXPAND_MUSIC
094DC 85 01                     	.db $85, $01
094DE 8D 10                     	.db $8D, $10
094E0 8E 10                     	.db $8E, $10
094E2 84 10                     	.db $84, $10
094E4 88 10                     	.db $88, $10
094E6 84 01 01 01               	.db $84, $01, $01, $01
094EA 00                        	.db $00
094EB                           ELSE
094EB                           	.db $85, $02
094EB                           	.db $8D, $06
094EB                           	.db $8E, $06
094EB                           	.db $84, $06
094EB                           	.db $88, $06
094EB                           	.db $84, $02, $02, $02
094EB                           	.db $00
094EB                           ENDIF
094EB                           ELSE
094EB                           	.include "src/music/segments/underground/underground-prototype.asm"
094EB                           ENDIF
094EB                           
094EB                           ;
094EB                           ; Subspace music
094EB                           ; Segments 1 and 2 share the same noise track,
094EB                           ; as do segments 3 and 4 (defined in 2 and 4)
094EB                           ;
094EB                           .include "src/music/segments/subspace/subspace-1.asm"
094EB                           MusicDataSubspace1:
094EB                           MusicDataSubspace1_Square2:
094EB 99                        	.db $99
094EC 48                        	.db $48
094ED 3E                        	.db $3E
094EE 38                        	.db $38
094EF 98                        	.db $98
094F0 42                        	.db $42
094F1 46                        	.db $46
094F2 94                        	.db $94
094F3 44                        	.db $44
094F4 42                        	.db $42
094F5 7E                        	.db $7E
094F6 96                        	.db $96
094F7 3E                        	.db $3E
094F8 50                        	.db $50
094F9 56                        	.db $56
094FA 94                        	.db $94
094FB 5A                        	.db $5A
094FC 7E                        	.db $7E
094FD 52                        	.db $52
094FE 98                        	.db $98
094FF 56                        	.db $56
09500 50                        	.db $50
09501 94                        	.db $94
09502 48                        	.db $48
09503 4C                        	.db $4C
09504 99                        	.db $99
09505 46                        	.db $46
09506 00                        	.db $00
09507                           MusicDataSubspace1_Square1:
09507 99                        	.db $99
09508 38                        	.db $38
09509 30                        	.db $30
0950A 26                        	.db $26
0950B 98                        	.db $98
0950C 30                        	.db $30
0950D 34                        	.db $34
0950E 94                        	.db $94
0950F 32                        	.db $32
09510 98                        	.db $98
09511 30                        	.db $30
09512 96                        	.db $96
09513 30                        	.db $30
09514 3E                        	.db $3E
09515 46                        	.db $46
09516 98                        	.db $98
09517 48                        	.db $48
09518 94                        	.db $94
09519 42                        	.db $42
0951A 98                        	.db $98
0951B 46                        	.db $46
0951C 98                        	.db $98
0951D 42                        	.db $42
0951E 94                        	.db $94
0951F 38                        	.db $38
09520 3A                        	.db $3A
09521 99                        	.db $99
09522 34                        	.db $34
09523                           MusicDataSubspace1_Triangle:
09523 99                        	.db $99
09524 3E                        	.db $3E
09525 38                        	.db $38
09526 30                        	.db $30
09527 98                        	.db $98
09528 3A                        	.db $3A
09529 3E                        	.db $3E
0952A 94                        	.db $94
0952B 3C                        	.db $3C
0952C 3A                        	.db $3A
0952D 7E                        	.db $7E
0952E 96                        	.db $96
0952F 38                        	.db $38
09530 48                        	.db $48
09531 50                        	.db $50
09532 94                        	.db $94
09533 52                        	.db $52
09534 7E                        	.db $7E
09535 4C                        	.db $4C
09536 50                        	.db $50
09537 7E                        	.db $7E
09538 48                        	.db $48
09539 7E                        	.db $7E
0953A 42                        	.db $42
0953B 46                        	.db $46
0953C 99                        	.db $99
0953D 3E                        	.db $3E
0953E                           .include "src/music/segments/subspace/subspace-2.asm"
0953E                           MusicDataSubspace2:
0953E                           MusicDataSubspace2_Square2:
0953E 98                        	.db $98
0953F 7E                        	.db $7E
09540 94                        	.db $94
09541 56                        	.db $56
09542 54                        	.db $54
09543 52                        	.db $52
09544 4E                        	.db $4E
09545 7E                        	.db $7E
09546 50                        	.db $50
09547 7E                        	.db $7E
09548 40                        	.db $40
09549 42                        	.db $42
0954A 48                        	.db $48
0954B 7E                        	.db $7E
0954C 42                        	.db $42
0954D 48                        	.db $48
0954E 4C                        	.db $4C
0954F 00                        	.db $00
09550                           MusicDataSubspace2_Square1:
09550 98                        	.db $98
09551 7E                        	.db $7E
09552 94                        	.db $94
09553 50                        	.db $50
09554 4E                        	.db $4E
09555 4C                        	.db $4C
09556 98                        	.db $98
09557 46                        	.db $46
09558 94                        	.db $94
09559 48                        	.db $48
0955A 7E                        	.db $7E
0955B 38                        	.db $38
0955C 3A                        	.db $3A
0955D 3E                        	.db $3E
0955E 7E                        	.db $7E
0955F 30                        	.db $30
09560 38                        	.db $38
09561 3A                        	.db $3A
09562                           MusicDataSubspace2_Triangle:
09562 99                        	.db $99
09563 30                        	.db $30
09564 3E                        	.db $3E
09565 98                        	.db $98
09566 48                        	.db $48
09567 99                        	.db $99
09568 3A                        	.db $3A
09569 94                        	.db $94
0956A 48                        	.db $48
0956B 98                        	.db $98
0956C 48                        	.db $48
0956D 3A                        	.db $3A
0956E                           MusicDataSubspace1_Noise:
0956E                           MusicDataSubspace2_Noise:
0956E 98                        	.db $98
0956F 04                        	.db $04
09570 92                        	.db $92
09571 02                        	.db $02
09572 01                        	.db $01
09573 02                        	.db $02
09574 98                        	.db $98
09575 06                        	.db $06
09576 92                        	.db $92
09577 02                        	.db $02
09578 01                        	.db $01
09579 02                        	.db $02
0957A 00                        	.db $00
0957B                           .include "src/music/segments/subspace/subspace-3.asm"
0957B                           MusicDataSubspace3:
0957B                           MusicDataSubspace3_Square2:
0957B 98                        	.db $98
0957C 7E                        	.db $7E
0957D 94                        	.db $94
0957E 56                        	.db $56
0957F 54                        	.db $54
09580 52                        	.db $52
09581 4E                        	.db $4E
09582 7E                        	.db $7E
09583 50                        	.db $50
09584 7E                        	.db $7E
09585 60                        	.db $60
09586 7E                        	.db $7E
09587 60                        	.db $60
09588 9A                        	.db $9A
09589 60                        	.db $60
0958A 00                        	.db $00
0958B                           MusicDataSubspace3_Square1:
0958B 98                        	.db $98
0958C 7E                        	.db $7E
0958D 94                        	.db $94
0958E 50                        	.db $50
0958F 4E                        	.db $4E
09590 4C                        	.db $4C
09591 98                        	.db $98
09592 46                        	.db $46
09593 94                        	.db $94
09594 48                        	.db $48
09595 7E                        	.db $7E
09596 98                        	.db $98
09597 52                        	.db $52
09598 94                        	.db $94
09599 52                        	.db $52
0959A 52                        	.db $52
0959B 99                        	.db $99
0959C 7E                        	.db $7E
0959D                           MusicDataSubspace3_Triangle:
0959D 99                        	.db $99
0959E 30                        	.db $30
0959F 38                        	.db $38
095A0 94                        	.db $94
095A1 3E                        	.db $3E
095A2 98                        	.db $98
095A3 48                        	.db $48
095A4 6E                        	.db $6E
095A5 94                        	.db $94
095A6 6E                        	.db $6E
095A7 98                        	.db $98
095A8 6E                        	.db $6E
095A9 3E                        	.db $3E
095AA                           .include "src/music/segments/subspace/subspace-4.asm"
095AA                           MusicDataSubspace4:
095AA                           MusicDataSubspace4_Square2:
095AA 98                        	.db $98
095AB 7E                        	.db $7E
095AC 99                        	.db $99
095AD 4E                        	.db $4E
095AE 99                        	.db $99
095AF 4C                        	.db $4C
095B0 9A                        	.db $9A
095B1 48                        	.db $48
095B2 7E                        	.db $7E
095B3 00                        	.db $00
095B4                           MusicDataSubspace4_Square1:
095B4 98                        	.db $98
095B5 7E                        	.db $7E
095B6 94                        	.db $94
095B7 40                        	.db $40
095B8 98                        	.db $98
095B9 7E                        	.db $7E
095BA 94                        	.db $94
095BB 3A                        	.db $3A
095BC 98                        	.db $98
095BD 7E                        	.db $7E
095BE 9A                        	.db $9A
095BF 38                        	.db $38
095C0 7E                        	.db $7E
095C1                           MusicDataSubspace4_Triangle:
095C1 98                        	.db $98
095C2 30                        	.db $30
095C3 99                        	.db $99
095C4 40                        	.db $40
095C5 44                        	.db $44
095C6 48                        	.db $48
095C7 94                        	.db $94
095C8 3E                        	.db $3E
095C9 98                        	.db $98
095CA 3E                        	.db $3E
095CB 30                        	.db $30
095CC                           MusicDataSubspace3_Noise:
095CC                           MusicDataSubspace4_Noise:
095CC 98                        	.db $98
095CD 04                        	.db $04
095CE 92                        	.db $92
095CF 02                        	.db $02
095D0 01                        	.db $01
095D1 02                        	.db $02
095D2 98                        	.db $98
095D3 06                        	.db $06
095D4 92                        	.db $92
095D5 02                        	.db $02
095D6 01                        	.db $01
095D7 02                        	.db $02
095D8 00                        	.db $00
095D9                           
095D9                           ;
095D9                           ; Title screen music
095D9                           ;
095D9                           .include "src/music/segments/title/title-1.asm"
095D9                           MusicDataTitleScreen1:
095D9                           MusicDataTitleScreen1_Square2:
095D9 E4                        	.db $E4
095DA 6E                        	.db $6E
095DB E8                        	.db $E8
095DC 6A                        	.db $6A
095DD E4                        	.db $E4
095DE 64                        	.db $64
095DF E8                        	.db $E8
095E0 5E                        	.db $5E
095E1 E4                        	.db $E4
095E2 56                        	.db $56
095E3 E8                        	.db $E8
095E4 52                        	.db $52
095E5 E4                        	.db $E4
095E6 4C                        	.db $4C
095E7 E8                        	.db $E8
095E8 46                        	.db $46
095E9 E4                        	.db $E4
095EA 3E                        	.db $3E
095EB E8                        	.db $E8
095EC 3C                        	.db $3C
095ED E4                        	.db $E4
095EE 3A                        	.db $3A
095EF 34                        	.db $34
095F0 2E                        	.db $2E
095F1 E8                        	.db $E8
095F2 26                        	.db $26
095F3 7E                        	.db $7E
095F4 3E                        	.db $3E
095F5 E8                        	.db $E8
095F6 56                        	.db $56
095F7 7E                        	.db $7E
095F8 E9                        	.db $E9
095F9 3E                        	.db $3E
095FA 00                        	.db $00
095FB                           MusicDataTitleScreen1_Square1:
095FB E4                        	.db $E4
095FC 56                        	.db $56
095FD E8                        	.db $E8
095FE 52                        	.db $52
095FF E4                        	.db $E4
09600 4C                        	.db $4C
09601 E8                        	.db $E8
09602 46                        	.db $46
09603 E4                        	.db $E4
09604 3E                        	.db $3E
09605 E8                        	.db $E8
09606 3A                        	.db $3A
09607 E4                        	.db $E4
09608 34                        	.db $34
09609 E8                        	.db $E8
0960A 2E                        	.db $2E
0960B E4                        	.db $E4
0960C 26                        	.db $26
0960D E8                        	.db $E8
0960E 24                        	.db $24
0960F E4                        	.db $E4
09610 22                        	.db $22
09611 1C                        	.db $1C
09612 16                        	.db $16
09613 E8                        	.db $E8
09614 0E                        	.db $0E
09615 7E                        	.db $7E
09616 26                        	.db $26
09617 E8                        	.db $E8
09618 46                        	.db $46
09619 7E                        	.db $7E
0961A E9                        	.db $E9
0961B 3E                        	.db $3E
0961C                           MusicDataTitleScreen1_Triangle:
0961C EB                        	.db $EB
0961D 7E                        	.db $7E
0961E 7E                        	.db $7E
0961F E4                        	.db $E4
09620 3E                        	.db $3E
09621 E8                        	.db $E8
09622 3C                        	.db $3C
09623 E4                        	.db $E4
09624 3A                        	.db $3A
09625 34                        	.db $34
09626 2E                        	.db $2E
09627 E8                        	.db $E8
09628 3E                        	.db $3E
09629 7E                        	.db $7E
0962A 7E                        	.db $7E
0962B E8                        	.db $E8
0962C 4C                        	.db $4C
0962D 7E                        	.db $7E
0962E 89                        	.db $89
0962F 7E                        	.db $7E
09630                           MusicDataTitleScreen1_Noise:
09630 E8                        	.db $E8
09631 10                        	.db $10
09632 02                        	.db $02
09633 06                        	.db $06
09634 10                        	.db $10
09635 02                        	.db $02
09636 06                        	.db $06
09637 10                        	.db $10
09638 02                        	.db $02
09639 06                        	.db $06
0963A 10                        	.db $10
0963B 01                        	.db $01
0963C 10                        	.db $10
0963D 10                        	.db $10
0963E 01                        	.db $01
0963F 01                        	.db $01
09640 EA                        	.db $EA
09641 01                        	.db $01
09642                           .include "src/music/segments/title/title-2.asm"
09642                           MusicDataTitleScreen2:
09642                           MusicDataTitleScreen2_Square2:
09642 E4                        	.db $E4
09643 50                        	.db $50
09644 3E                        	.db $3E
09645 48                        	.db $48
09646 50                        	.db $50
09647 7E                        	.db $7E
09648 3E                        	.db $3E
09649 4E                        	.db $4E
0964A 3E                        	.db $3E
0964B 46                        	.db $46
0964C 4E                        	.db $4E
0964D 7E                        	.db $7E
0964E 3E                        	.db $3E
0964F EB                        	.db $EB
09650 50                        	.db $50
09651 E4                        	.db $E4
09652 7E                        	.db $7E
09653 7E                        	.db $7E
09654 42                        	.db $42
09655 46                        	.db $46
09656 48                        	.db $48
09657 4C                        	.db $4C
09658 50                        	.db $50
09659 3E                        	.db $3E
0965A 48                        	.db $48
0965B 50                        	.db $50
0965C 7E                        	.db $7E
0965D 3E                        	.db $3E
0965E 4E                        	.db $4E
0965F 3E                        	.db $3E
09660 46                        	.db $46
09661 52                        	.db $52
09662 7E                        	.db $7E
09663 3E                        	.db $3E
09664 E9                        	.db $E9
09665 50                        	.db $50
09666 E4                        	.db $E4
09667 26                        	.db $26
09668 2A                        	.db $2A
09669 26                        	.db $26
0966A E8                        	.db $E8
0966B 2E                        	.db $2E
0966C 2A                        	.db $2A
0966D 26                        	.db $26
0966E E4                        	.db $E4
0966F 4C                        	.db $4C
09670 3E                        	.db $3E
09671 46                        	.db $46
09672 4C                        	.db $4C
09673 7E                        	.db $7E
09674 3E                        	.db $3E
09675 4A                        	.db $4A
09676 3E                        	.db $3E
09677 44                        	.db $44
09678 4A                        	.db $4A
09679 7E                        	.db $7E
0967A 3E                        	.db $3E
0967B EB                        	.db $EB
0967C 4C                        	.db $4C
0967D E4                        	.db $E4
0967E 7E                        	.db $7E
0967F 7E                        	.db $7E
09680 42                        	.db $42
09681 46                        	.db $46
09682 48                        	.db $48
09683 4A                        	.db $4A
09684 4C                        	.db $4C
09685 3E                        	.db $3E
09686 46                        	.db $46
09687 4C                        	.db $4C
09688 7E                        	.db $7E
09689 3E                        	.db $3E
0968A 46                        	.db $46
0968B 3E                        	.db $3E
0968C 46                        	.db $46
0968D 52                        	.db $52
0968E 7E                        	.db $7E
0968F 46                        	.db $46
09690 E9                        	.db $E9
09691 50                        	.db $50
09692 E4                        	.db $E4
09693 26                        	.db $26
09694 2A                        	.db $2A
09695 26                        	.db $26
09696 E8                        	.db $E8
09697 2E                        	.db $2E
09698 30                        	.db $30
09699 34                        	.db $34
0969A 00                        	.db $00
0969B                           MusicDataTitleScreen2_Noise:
0969B B8                        	.db $B8
0969C 02                        	.db $02
0969D 10                        	.db $10
0969E 10                        	.db $10
0969F 02                        	.db $02
096A0 B4                        	.db $B4
096A1 10                        	.db $10
096A2 10                        	.db $10
096A3 B8                        	.db $B8
096A4 10                        	.db $10
096A5 00                        	.db $00
096A6                           MusicDataTitleScreen2_Square1:
096A6 E4                        	.db $E4
096A7 38                        	.db $38
096A8 3E                        	.db $3E
096A9 48                        	.db $48
096AA 38                        	.db $38
096AB 7E                        	.db $7E
096AC 3E                        	.db $3E
096AD 36                        	.db $36
096AE 3E                        	.db $3E
096AF 46                        	.db $46
096B0 36                        	.db $36
096B1 7E                        	.db $7E
096B2 3E                        	.db $3E
096B3 EB                        	.db $EB
096B4 38                        	.db $38
096B5 E4                        	.db $E4
096B6 7E                        	.db $7E
096B7 7E                        	.db $7E
096B8 42                        	.db $42
096B9 46                        	.db $46
096BA 48                        	.db $48
096BB 4C                        	.db $4C
096BC 38                        	.db $38
096BD 3E                        	.db $3E
096BE 48                        	.db $48
096BF 38                        	.db $38
096C0 7E                        	.db $7E
096C1 3E                        	.db $3E
096C2 36                        	.db $36
096C3 3E                        	.db $3E
096C4 46                        	.db $46
096C5 3A                        	.db $3A
096C6 7E                        	.db $7E
096C7 3E                        	.db $3E
096C8 E9                        	.db $E9
096C9 48                        	.db $48
096CA E4                        	.db $E4
096CB 26                        	.db $26
096CC 2A                        	.db $2A
096CD 26                        	.db $26
096CE E8                        	.db $E8
096CF 2E                        	.db $2E
096D0 2A                        	.db $2A
096D1 26                        	.db $26
096D2 E4                        	.db $E4
096D3 34                        	.db $34
096D4 3E                        	.db $3E
096D5 46                        	.db $46
096D6 34                        	.db $34
096D7 7E                        	.db $7E
096D8 3E                        	.db $3E
096D9 32                        	.db $32
096DA 3E                        	.db $3E
096DB 44                        	.db $44
096DC 32                        	.db $32
096DD 7E                        	.db $7E
096DE 3E                        	.db $3E
096DF EB                        	.db $EB
096E0 34                        	.db $34
096E1 E4                        	.db $E4
096E2 7E                        	.db $7E
096E3 7E                        	.db $7E
096E4 42                        	.db $42
096E5 46                        	.db $46
096E6 48                        	.db $48
096E7 4A                        	.db $4A
096E8 34                        	.db $34
096E9 3E                        	.db $3E
096EA 46                        	.db $46
096EB 34                        	.db $34
096EC 7E                        	.db $7E
096ED 3E                        	.db $3E
096EE 2E                        	.db $2E
096EF 3E                        	.db $3E
096F0 46                        	.db $46
096F1 3A                        	.db $3A
096F2 7E                        	.db $7E
096F3 46                        	.db $46
096F4 E9                        	.db $E9
096F5 48                        	.db $48
096F6 E4                        	.db $E4
096F7 26                        	.db $26
096F8 2A                        	.db $2A
096F9 26                        	.db $26
096FA E8                        	.db $E8
096FB 2E                        	.db $2E
096FC 30                        	.db $30
096FD 34                        	.db $34
096FE                           MusicDataTitleScreen2_Triangle:
096FE 88                        	.db $88
096FF 48                        	.db $48
09700 56                        	.db $56
09701 56                        	.db $56
09702 46                        	.db $46
09703 56                        	.db $56
09704 56                        	.db $56
09705 48                        	.db $48
09706 56                        	.db $56
09707 56                        	.db $56
09708 3E                        	.db $3E
09709 56                        	.db $56
0970A 56                        	.db $56
0970B 48                        	.db $48
0970C 56                        	.db $56
0970D 56                        	.db $56
0970E 46                        	.db $46
0970F 56                        	.db $56
09710 56                        	.db $56
09711 48                        	.db $48
09712 56                        	.db $56
09713 56                        	.db $56
09714 3E                        	.db $3E
09715 56                        	.db $56
09716 56                        	.db $56
09717 4C                        	.db $4C
09718 56                        	.db $56
09719 56                        	.db $56
0971A 4A                        	.db $4A
0971B 54                        	.db $54
0971C 54                        	.db $54
0971D 4C                        	.db $4C
0971E 56                        	.db $56
0971F 56                        	.db $56
09720 46                        	.db $46
09721 56                        	.db $56
09722 56                        	.db $56
09723 4C                        	.db $4C
09724 56                        	.db $56
09725 56                        	.db $56
09726 46                        	.db $46
09727 56                        	.db $56
09728 56                        	.db $56
09729 48                        	.db $48
0972A 56                        	.db $56
0972B 56                        	.db $56
0972C 3E                        	.db $3E
0972D 56                        	.db $56
0972E 56                        	.db $56
0972F                           .include "src/music/segments/title/title-3.asm"
0972F                           MusicDataTitleScreen3:
0972F                           MusicDataTitleScreen3_Square2:
0972F E4                        	.db $E4
09730 56                        	.db $56
09731 48                        	.db $48
09732 7E                        	.db $7E
09733 56                        	.db $56
09734 7E                        	.db $7E
09735 48                        	.db $48
09736 56                        	.db $56
09737 46                        	.db $46
09738 7E                        	.db $7E
09739 56                        	.db $56
0973A 7E                        	.db $7E
0973B 46                        	.db $46
0973C 56                        	.db $56
0973D 44                        	.db $44
0973E 7E                        	.db $7E
0973F 56                        	.db $56
09740 7E                        	.db $7E
09741 44                        	.db $44
09742 56                        	.db $56
09743 7E                        	.db $7E
09744 5A                        	.db $5A
09745 7E                        	.db $7E
09746 E6                        	.db $E6
09747 7E                        	.db $7E
09748 E4                        	.db $E4
09749 56                        	.db $56
0974A 52                        	.db $52
0974B 42                        	.db $42
0974C 7E                        	.db $7E
0974D 52                        	.db $52
0974E 7E                        	.db $7E
0974F 42                        	.db $42
09750 52                        	.db $52
09751 42                        	.db $42
09752 7E                        	.db $7E
09753 52                        	.db $52
09754 7E                        	.db $7E
09755 42                        	.db $42
09756 52                        	.db $52
09757 42                        	.db $42
09758 7E                        	.db $7E
09759 52                        	.db $52
0975A 7E                        	.db $7E
0975B 42                        	.db $42
0975C 52                        	.db $52
0975D 7E                        	.db $7E
0975E 56                        	.db $56
0975F 7E                        	.db $7E
09760 E6                        	.db $E6
09761 7E                        	.db $7E
09762 E4                        	.db $E4
09763 52                        	.db $52
09764 50                        	.db $50
09765 3E                        	.db $3E
09766 3E                        	.db $3E
09767 50                        	.db $50
09768 7E                        	.db $7E
09769 3E                        	.db $3E
0976A E8                        	.db $E8
0976B 42                        	.db $42
0976C 46                        	.db $46
0976D 52                        	.db $52
0976E E4                        	.db $E4
0976F 50                        	.db $50
09770 50                        	.db $50
09771 E9                        	.db $E9
09772 50                        	.db $50
09773 E4                        	.db $E4
09774 46                        	.db $46
09775 00                        	.db $00
09776                           MusicDataTitleScreen3_Square1:
09776 E4                        	.db $E4
09777 50                        	.db $50
09778 48                        	.db $48
09779 7E                        	.db $7E
0977A 50                        	.db $50
0977B 7E                        	.db $7E
0977C 48                        	.db $48
0977D 4C                        	.db $4C
0977E 46                        	.db $46
0977F 7E                        	.db $7E
09780 4C                        	.db $4C
09781 7E                        	.db $7E
09782 46                        	.db $46
09783 4A                        	.db $4A
09784 44                        	.db $44
09785 7E                        	.db $7E
09786 4A                        	.db $4A
09787 7E                        	.db $7E
09788 44                        	.db $44
09789 4A                        	.db $4A
0978A 4A                        	.db $4A
0978B 4A                        	.db $4A
0978C 7E                        	.db $7E
0978D E6                        	.db $E6
0978E 7E                        	.db $7E
0978F E4                        	.db $E4
09790 56                        	.db $56
09791 4C                        	.db $4C
09792 42                        	.db $42
09793 7E                        	.db $7E
09794 4C                        	.db $4C
09795 7E                        	.db $7E
09796 42                        	.db $42
09797 4A                        	.db $4A
09798 42                        	.db $42
09799 7E                        	.db $7E
0979A 4A                        	.db $4A
0979B 7E                        	.db $7E
0979C 42                        	.db $42
0979D 48                        	.db $48
0979E 42                        	.db $42
0979F 7E                        	.db $7E
097A0 48                        	.db $48
097A1 7E                        	.db $7E
097A2 42                        	.db $42
097A3 46                        	.db $46
097A4 46                        	.db $46
097A5 46                        	.db $46
097A6 7E                        	.db $7E
097A7 E6                        	.db $E6
097A8 7E                        	.db $7E
097A9 E4                        	.db $E4
097AA 52                        	.db $52
097AB 30                        	.db $30
097AC 3E                        	.db $3E
097AD 3E                        	.db $3E
097AE 30                        	.db $30
097AF 7E                        	.db $7E
097B0 3E                        	.db $3E
097B1 E8                        	.db $E8
097B2 3A                        	.db $3A
097B3 3E                        	.db $3E
097B4 46                        	.db $46
097B5 E4                        	.db $E4
097B6 46                        	.db $46
097B7 46                        	.db $46
097B8 E9                        	.db $E9
097B9 46                        	.db $46
097BA E4                        	.db $E4
097BB 3A                        	.db $3A
097BC                           MusicDataTitleScreen3_Triangle:
097BC 48                        	.db $48
097BD 56                        	.db $56
097BE 56                        	.db $56
097BF 46                        	.db $46
097C0 56                        	.db $56
097C1 56                        	.db $56
097C2 44                        	.db $44
097C3 56                        	.db $56
097C4 56                        	.db $56
097C5 4A                        	.db $4A
097C6 56                        	.db $56
097C7 86                        	.db $86
097C8 7E                        	.db $7E
097C9 84                        	.db $84
097CA 7E                        	.db $7E
097CB 88                        	.db $88
097CC 4C                        	.db $4C
097CD 5A                        	.db $5A
097CE 5A                        	.db $5A
097CF 4A                        	.db $4A
097D0 5A                        	.db $5A
097D1 5A                        	.db $5A
097D2 48                        	.db $48
097D3 5A                        	.db $5A
097D4 5A                        	.db $5A
097D5 46                        	.db $46
097D6 56                        	.db $56
097D7 86                        	.db $86
097D8 7E                        	.db $7E
097D9 84                        	.db $84
097DA 7E                        	.db $7E
097DB 88                        	.db $88
097DC 48                        	.db $48
097DD 56                        	.db $56
097DE 56                        	.db $56
097DF 3E                        	.db $3E
097E0 56                        	.db $56
097E1 56                        	.db $56
097E2 84                        	.db $84
097E3 52                        	.db $52
097E4 52                        	.db $52
097E5 89                        	.db $89
097E6 52                        	.db $52
097E7 84                        	.db $84
097E8 46                        	.db $46
097E9                           MusicDataTitleScreen3_Noise:
097E9 B8                        	.db $B8
097EA 02                        	.db $02
097EB 10                        	.db $10
097EC 10                        	.db $10
097ED 02                        	.db $02
097EE 10                        	.db $10
097EF 10                        	.db $10
097F0 02                        	.db $02
097F1 10                        	.db $10
097F2 10                        	.db $10
097F3 02                        	.db $02
097F4 10                        	.db $10
097F5 86                        	.db $86
097F6 01                        	.db $01
097F7 84                        	.db $84
097F8 01                        	.db $01
097F9 88                        	.db $88
097FA 02                        	.db $02
097FB 10                        	.db $10
097FC 10                        	.db $10
097FD 02                        	.db $02
097FE 10                        	.db $10
097FF 10                        	.db $10
09800 02                        	.db $02
09801 10                        	.db $10
09802 10                        	.db $10
09803 02                        	.db $02
09804 10                        	.db $10
09805 86                        	.db $86
09806 01                        	.db $01
09807 84                        	.db $84
09808 01                        	.db $01
09809 88                        	.db $88
0980A 02                        	.db $02
0980B 10                        	.db $10
0980C 10                        	.db $10
0980D 02                        	.db $02
0980E 10                        	.db $10
0980F 10                        	.db $10
09810 02                        	.db $02
09811 10                        	.db $10
09812 10                        	.db $10
09813                           .include "src/music/segments/title/title-4.asm"
09813                           MusicDataTitleScreen4:
09813                           MusicDataTitleScreen4_Square2:
09813 48                        	.db $48
09814 7E                        	.db $7E
09815 7E                        	.db $7E
09816 3E                        	.db $3E
09817 38                        	.db $38
09818 34                        	.db $34
09819 30                        	.db $30
0981A 7E                        	.db $7E
0981B 7E                        	.db $7E
0981C 26                        	.db $26
0981D 20                        	.db $20
0981E 1C                        	.db $1C
0981F E8                        	.db $E8
09820 18                        	.db $18
09821 7E                        	.db $7E
09822 3E                        	.db $3E
09823 48                        	.db $48
09824 00                        	.db $00
09825                           MusicDataTitleScreen4_Square1:
09825 30                        	.db $30
09826 7E                        	.db $7E
09827 7E                        	.db $7E
09828 26                        	.db $26
09829 20                        	.db $20
0982A 1C                        	.db $1C
0982B 18                        	.db $18
0982C 7E                        	.db $7E
0982D 7E                        	.db $7E
0982E 0E                        	.db $0E
0982F 08                        	.db $08
09830 04                        	.db $04
09831 E8                        	.db $E8
09832 18                        	.db $18
09833 7E                        	.db $7E
09834 00                        	.db $00
09835 2E                        	.db $2E
09836 38                        	.db $38
09837                           MusicDataTitleScreen4_Triangle:
09837 EB                        	.db $EB
09838 7E                        	.db $7E
09839 7E                        	.db $7E
0983A 7E                        	.db $7E
0983B 30                        	.db $30
0983C                           MusicDataTitleScreen4_Noise:
0983C 10                        	.db $10
0983D 01                        	.db $01
0983E 01                        	.db $01
0983F 10                        	.db $10
09840 01                        	.db $01
09841 01                        	.db $01
09842 10                        	.db $10
09843 01                        	.db $01
09844 10                        	.db $10
09845 10                        	.db $10
09846 01                        	.db $01
09847 01                        	.db $01
09848                           
09848                           ;
09848                           ; Character Select screen music (1 through 5)
09848                           ; Segment 1 is in a single group,
09848                           ; Segments 3-6 are split by channel,
09848                           ; Segments 3 and 4 share the same triangle and noise channel
09848                           ; Segments 5 and 6 are just split by channel for some reason
09848                           ; Segments 7 and 8 are back in single groups like usual
09848                           ;
09848                           .include "src/music/segments/character-select/character-select-1.asm"
09848                           MusicDataCharacterSelect1:
09848                           MusicDataCharacterSelect1_Square2:
09848 96                        	.db $96
09849 48                        	.db $48
0984A 92                        	.db $92
0984B 48                        	.db $48
0984C 96                        	.db $96
0984D 7E                        	.db $7E
0984E 92                        	.db $92
0984F 48                        	.db $48
09850 96                        	.db $96
09851 7E                        	.db $7E
09852 92                        	.db $92
09853 48                        	.db $48
09854 96                        	.db $96
09855 7E                        	.db $7E
09856 92                        	.db $92
09857 48                        	.db $48
09858 96                        	.db $96
09859 48                        	.db $48
0985A 92                        	.db $92
0985B 48                        	.db $48
0985C 96                        	.db $96
0985D 7E                        	.db $7E
0985E 92                        	.db $92
0985F 48                        	.db $48
09860 96                        	.db $96
09861 7E                        	.db $7E
09862 92                        	.db $92
09863 48                        	.db $48
09864 96                        	.db $96
09865 7E                        	.db $7E
09866 92                        	.db $92
09867 48                        	.db $48
09868 96                        	.db $96
09869 48                        	.db $48
0986A 92                        	.db $92
0986B 48                        	.db $48
0986C 96                        	.db $96
0986D 7E                        	.db $7E
0986E 92                        	.db $92
0986F 48                        	.db $48
09870 96                        	.db $96
09871 7E                        	.db $7E
09872 92                        	.db $92
09873 48                        	.db $48
09874 96                        	.db $96
09875 7E                        	.db $7E
09876 92                        	.db $92
09877 48                        	.db $48
09878 98                        	.db $98
09879 50                        	.db $50
0987A 7E                        	.db $7E
0987B 4C                        	.db $4C
0987C 7E                        	.db $7E
0987D 00                        	.db $00
0987E                           MusicDataCharacterSelect1_Square1:
0987E 96                        	.db $96
0987F 3E                        	.db $3E
09880 92                        	.db $92
09881 3E                        	.db $3E
09882 96                        	.db $96
09883 7E                        	.db $7E
09884 92                        	.db $92
09885 3E                        	.db $3E
09886 96                        	.db $96
09887 7E                        	.db $7E
09888 92                        	.db $92
09889 3E                        	.db $3E
0988A 96                        	.db $96
0988B 7E                        	.db $7E
0988C 92                        	.db $92
0988D 3E                        	.db $3E
0988E 96                        	.db $96
0988F 3C                        	.db $3C
09890 92                        	.db $92
09891 3C                        	.db $3C
09892 96                        	.db $96
09893 7E                        	.db $7E
09894 92                        	.db $92
09895 3C                        	.db $3C
09896 96                        	.db $96
09897 7E                        	.db $7E
09898 92                        	.db $92
09899 3C                        	.db $3C
0989A 96                        	.db $96
0989B 7E                        	.db $7E
0989C 92                        	.db $92
0989D 3C                        	.db $3C
0989E 96                        	.db $96
0989F 3A                        	.db $3A
098A0 92                        	.db $92
098A1 3A                        	.db $3A
098A2 96                        	.db $96
098A3 7E                        	.db $7E
098A4 92                        	.db $92
098A5 3A                        	.db $3A
098A6 96                        	.db $96
098A7 7E                        	.db $7E
098A8 92                        	.db $92
098A9 3A                        	.db $3A
098AA 96                        	.db $96
098AB 7E                        	.db $7E
098AC 92                        	.db $92
098AD 3A                        	.db $3A
098AE 98                        	.db $98
098AF 46                        	.db $46
098B0 7E                        	.db $7E
098B1 3A                        	.db $3A
098B2 7E                        	.db $7E
098B3                           MusicDataCharacterSelect1_Triangle:
098B3 96                        	.db $96
098B4 48                        	.db $48
098B5 92                        	.db $92
098B6 48                        	.db $48
098B7 96                        	.db $96
098B8 7E                        	.db $7E
098B9 92                        	.db $92
098BA 48                        	.db $48
098BB 96                        	.db $96
098BC 7E                        	.db $7E
098BD 92                        	.db $92
098BE 48                        	.db $48
098BF 96                        	.db $96
098C0 7E                        	.db $7E
098C1 92                        	.db $92
098C2 48                        	.db $48
098C3 96                        	.db $96
098C4 48                        	.db $48
098C5 92                        	.db $92
098C6 48                        	.db $48
098C7 96                        	.db $96
098C8 7E                        	.db $7E
098C9 92                        	.db $92
098CA 48                        	.db $48
098CB 96                        	.db $96
098CC 7E                        	.db $7E
098CD 92                        	.db $92
098CE 48                        	.db $48
098CF 96                        	.db $96
098D0 7E                        	.db $7E
098D1 92                        	.db $92
098D2 48                        	.db $48
098D3 96                        	.db $96
098D4 48                        	.db $48
098D5 92                        	.db $92
098D6 48                        	.db $48
098D7 96                        	.db $96
098D8 7E                        	.db $7E
098D9 92                        	.db $92
098DA 48                        	.db $48
098DB 96                        	.db $96
098DC 7E                        	.db $7E
098DD 92                        	.db $92
098DE 48                        	.db $48
098DF 96                        	.db $96
098E0 7E                        	.db $7E
098E1 92                        	.db $92
098E2 48                        	.db $48
098E3 98                        	.db $98
098E4 3E                        	.db $3E
098E5 7E                        	.db $7E
098E6 46                        	.db $46
098E7 7E                        	.db $7E
098E8                           MusicDataCharacterSelect1_Noise:
098E8 8A                        	.db $8A
098E9 04                        	.db $04
098EA 01                        	.db $01
098EB 00                        	.db $00
098EC                           
098EC                           .include "src/music/segments/character-select/character-select-2-square2.asm"
098EC                           ; Seems to be a little duplicated chunk of MusicDataCharacterSelect2_Square2
098EC                           MusicDataCharacterSelect_Square_UNUSED:
098EC A6                        	.db $A6
098ED 7E                        	.db $7E
098EE A2                        	.db $A2
098EF 48                        	.db $48
098F0 A6                        	.db $A6
098F1 7E                        	.db $7E
098F2 A2                        	.db $A2
098F3 42                        	.db $42
098F4 A8                        	.db $A8
098F5 50                        	.db $50
098F6 50                        	.db $50
098F7                           
098F7                           MusicDataCharacterSelect2:
098F7                           MusicDataCharacterSelect2_Square2:
098F7 A8                        	.db $A8
098F8 50                        	.db $50
098F9 7E                        	.db $7E
098FA 50                        	.db $50
098FB A6                        	.db $A6
098FC 7E                        	.db $7E
098FD A2                        	.db $A2
098FE 50                        	.db $50
098FF A6                        	.db $A6
09900 7E                        	.db $7E
09901 A2                        	.db $A2
09902 48                        	.db $48
09903 A6                        	.db $A6
09904 7E                        	.db $7E
09905 A2                        	.db $A2
09906 42                        	.db $42
09907 AA                        	.db $AA
09908 3E                        	.db $3E
09909 A8                        	.db $A8
0990A 48                        	.db $48
0990B 7E                        	.db $7E
0990C 48                        	.db $48
0990D A6                        	.db $A6
0990E 7E                        	.db $7E
0990F A2                        	.db $A2
09910 48                        	.db $48
09911 A6                        	.db $A6
09912 7E                        	.db $7E
09913 A2                        	.db $A2
09914 42                        	.db $42
09915 A6                        	.db $A6
09916 7E                        	.db $7E
09917 A2                        	.db $A2
09918 3C                        	.db $3C
09919 AA                        	.db $AA
0991A 38                        	.db $38
0991B A8                        	.db $A8
0991C 50                        	.db $50
0991D 7E                        	.db $7E
0991E 50                        	.db $50
0991F A6                        	.db $A6
09920 7E                        	.db $7E
09921 A2                        	.db $A2
09922 50                        	.db $50
09923 A6                        	.db $A6 ; MusicDataCharacterSelect_Square_UNUSED copy starts
09924 7E                        	.db $7E
09925 A2                        	.db $A2
09926 48                        	.db $48
09927 A6                        	.db $A6
09928 7E                        	.db $7E
09929 A2                        	.db $A2
0992A 42                        	.db $42
0992B A8                        	.db $A8
0992C 50                        	.db $50
0992D 50                        	.db $50 ; MusicDataCharacterSelect_Square_UNUSED copy ends
0992E A4                        	.db $A4
0992F 48                        	.db $48
09930 A9                        	.db $A9
09931 7E                        	.db $7E
09932 AA                        	.db $AA
09933 7E                        	.db $7E
09934 00                        	.db $00
09935                           .include "src/music/segments/character-select/character-select-3-square2.asm"
09935                           MusicDataCharacterSelect3:
09935                           MusicDataCharacterSelect3_Square2:
09935 AA                        	.db $AA
09936 7E                        	.db $7E
09937 7E                        	.db $7E
09938 00                        	.db $00
09939                           .include "src/music/segments/character-select/character-select-4-square2.asm"
09939                           MusicDataCharacterSelect4:
09939                           MusicDataCharacterSelect4_Square2:
09939 C8                        	.db $C8
0993A 7E                        	.db $7E
0993B 48                        	.db $48
0993C 4C                        	.db $4C
0993D 4E                        	.db $4E
0993E 00                        	.db $00
0993F                           .include "src/music/segments/character-select/character-select-2-square1.asm"
0993F                           MusicDataCharacterSelect2_Square1:
0993F A8                        	.db $A8
09940 3E                        	.db $3E
09941 7E                        	.db $7E
09942 A8                        	.db $A8
09943 3E                        	.db $3E
09944 A6                        	.db $A6
09945 7E                        	.db $7E
09946 A2                        	.db $A2
09947 3E                        	.db $3E
09948 A6                        	.db $A6
09949 7E                        	.db $7E
0994A A2                        	.db $A2
0994B 38                        	.db $38
0994C A6                        	.db $A6
0994D 7E                        	.db $7E
0994E A2                        	.db $A2
0994F 38                        	.db $38
09950 AA                        	.db $AA
09951 30                        	.db $30
09952 A8                        	.db $A8
09953 3C                        	.db $3C
09954 7E                        	.db $7E
09955 3C                        	.db $3C
09956 A6                        	.db $A6
09957 7E                        	.db $7E
09958 A2                        	.db $A2
09959 3C                        	.db $3C
0995A A6                        	.db $A6
0995B 7E                        	.db $7E
0995C A2                        	.db $A2
0995D 34                        	.db $34
0995E A6                        	.db $A6
0995F 7E                        	.db $7E
09960 A2                        	.db $A2
09961 34                        	.db $34
09962 AA                        	.db $AA
09963 30                        	.db $30
09964 A8                        	.db $A8
09965 3A                        	.db $3A
09966 7E                        	.db $7E
09967 3A                        	.db $3A
09968 A6                        	.db $A6
09969 7E                        	.db $7E
0996A A2                        	.db $A2
0996B 3A                        	.db $3A
0996C A6                        	.db $A6
0996D 7E                        	.db $7E
0996E A2                        	.db $A2
0996F 34                        	.db $34
09970 A6                        	.db $A6
09971 7E                        	.db $7E
09972 A2                        	.db $A2
09973 2E                        	.db $2E
09974 A8                        	.db $A8
09975 3E                        	.db $3E
09976 3E                        	.db $3E
09977 A4                        	.db $A4
09978 38                        	.db $38
09979 A9                        	.db $A9
0997A 7E                        	.db $7E
0997B AA                        	.db $AA
0997C 7E                        	.db $7E
0997D                           .include "src/music/segments/character-select/character-select-3-square1.asm"
0997D                           MusicDataCharacterSelect3_Square1:
0997D AA                        	.db $AA
0997E 7E                        	.db $7E
0997F 7E                        	.db $7E
09980                           .include "src/music/segments/character-select/character-select-4-square1.asm"
09980                           MusicDataCharacterSelect4_Square1:
09980 C8                        	.db $C8
09981 7E                        	.db $7E
09982 38                        	.db $38
09983 3A                        	.db $3A
09984 3C                        	.db $3C
09985                           .include "src/music/segments/character-select/character-select-2-triangle.asm"
09985                           MusicDataCharacterSelect2_Triangle:
09985 88                        	.db $88
09986 30                        	.db $30
09987 7E                        	.db $7E
09988 30                        	.db $30
09989 7E                        	.db $7E
0998A 30                        	.db $30
0998B 7E                        	.db $7E
0998C 30                        	.db $30
0998D 7E                        	.db $7E
0998E 34                        	.db $34
0998F 7E                        	.db $7E
09990 34                        	.db $34
09991 7E                        	.db $7E
09992 34                        	.db $34
09993 7E                        	.db $7E
09994 34                        	.db $34
09995 7E                        	.db $7E
09996 3E                        	.db $3E
09997 7E                        	.db $7E
09998 3E                        	.db $3E
09999 7E                        	.db $7E
0999A 3E                        	.db $3E
0999B 7E                        	.db $7E
0999C 3E                        	.db $3E
0999D 7E                        	.db $7E
0999E 30                        	.db $30
0999F 7E                        	.db $7E
099A0 8A                        	.db $8A
099A1 7E                        	.db $7E
099A2 7E                        	.db $7E
099A3 7E                        	.db $7E
099A4                           .include "src/music/segments/character-select/character-select-3-4-triangle.asm"
099A4                           MusicDataCharacterSelect3_Triangle:
099A4                           MusicDataCharacterSelect4_Triangle:
099A4 8A                        	.db $8A
099A5 7E                        	.db $7E
099A6 7E                        	.db $7E
099A7                           .include "src/music/segments/character-select/character-select-2-noise.asm"
099A7                           MusicDataCharacterSelect2_Noise:
099A7 88                        	.db $88
099A8 02                        	.db $02
099A9 04                        	.db $04
099AA 00                        	.db $00
099AB                           .include "src/music/segments/character-select/character-select-3-4-noise.asm"
099AB                           MusicDataCharacterSelect3_Noise:
099AB                           MusicDataCharacterSelect4_Noise:
099AB 82                        	.db $82
099AC 04                        	.db $04
099AD 82                        	.db $82
099AE 04                        	.db $04
099AF 82                        	.db $82
099B0 04                        	.db $04
099B1 86                        	.db $86
099B2 04                        	.db $04
099B3 82                        	.db $82
099B4 04                        	.db $04
099B5 82                        	.db $82
099B6 04                        	.db $04
099B7 82                        	.db $82
099B8 01                        	.db $01
099B9 82                        	.db $82
099BA 04                        	.db $04
099BB 82                        	.db $82
099BC 04                        	.db $04
099BD 82                        	.db $82
099BE 01                        	.db $01
099BF 82                        	.db $82
099C0 04                        	.db $04
099C1                           
099C1                           .include "src/music/segments/character-select/character-select-5-square2.asm"
099C1                           MusicDataCharacterSelect5:
099C1                           MusicDataCharacterSelect5_Square2:
099C1 C8                        	.db $C8
099C2 50                        	.db $50
099C3 7E                        	.db $7E
099C4 50                        	.db $50
099C5 C6                        	.db $C6
099C6 7E                        	.db $7E
099C7 C2                        	.db $C2
099C8 50                        	.db $50
099C9 C6                        	.db $C6
099CA 7E                        	.db $7E
099CB C8                        	.db $C8
099CC 4C                        	.db $4C
099CD C2                        	.db $C2
099CE 7E                        	.db $7E
099CF C8                        	.db $C8
099D0 4C                        	.db $4C
099D1 50                        	.db $50
099D2 C4                        	.db $C4
099D3 4C                        	.db $4C
099D4 7E                        	.db $7E
099D5 48                        	.db $48
099D6 7E                        	.db $7E
099D7 C2                        	.db $C2
099D8 48                        	.db $48
099D9 C6                        	.db $C6
099DA 46                        	.db $46
099DB 7E                        	.db $7E
099DC C8                        	.db $C8
099DD 48                        	.db $48
099DE C2                        	.db $C2
099DF 7E                        	.db $7E
099E0 C8                        	.db $C8
099E1 42                        	.db $42
099E2 46                        	.db $46
099E3 48                        	.db $48
099E4 C8                        	.db $C8
099E5 4C                        	.db $4C
099E6 7E                        	.db $7E
099E7 4C                        	.db $4C
099E8 C6                        	.db $C6
099E9 7E                        	.db $7E
099EA C2                        	.db $C2
099EB 4C                        	.db $4C
099EC C6                        	.db $C6
099ED 7E                        	.db $7E
099EE C8                        	.db $C8
099EF 48                        	.db $48
099F0 C2                        	.db $C2
099F1 7E                        	.db $7E
099F2 C8                        	.db $C8
099F3 46                        	.db $46
099F4 C4                        	.db $C4
099F5 42                        	.db $42
099F6 7E                        	.db $7E
099F7 00                        	.db $00
099F8                           .include "src/music/segments/character-select/character-select-6-square2.asm"
099F8                           MusicDataCharacterSelect6:
099F8                           MusicDataCharacterSelect6_Square2:
099F8 C8                        	.db $C8
099F9 7E                        	.db $7E
099FA 46                        	.db $46
099FB 48                        	.db $48
099FC 4A                        	.db $4A
099FD C8                        	.db $C8
099FE 4C                        	.db $4C
099FF 7E                        	.db $7E
09A00 C6                        	.db $C6
09A01 7E                        	.db $7E
09A02 C8                        	.db $C8
09A03 3E                        	.db $3E
09A04 C2                        	.db $C2
09A05 7E                        	.db $7E
09A06 00                        	.db $00
09A07                           .include "src/music/segments/character-select/character-select-5-square1.asm"
09A07                           MusicDataCharacterSelect5_Square1:
09A07 C8                        	.db $C8
09A08 40                        	.db $40
09A09 7E                        	.db $7E
09A0A 40                        	.db $40
09A0B C6                        	.db $C6
09A0C 7E                        	.db $7E
09A0D C2                        	.db $C2
09A0E 40                        	.db $40
09A0F C6                        	.db $C6
09A10 7E                        	.db $7E
09A11 C8                        	.db $C8
09A12 3C                        	.db $3C
09A13 C2                        	.db $C2
09A14 7E                        	.db $7E
09A15 C8                        	.db $C8
09A16 3C                        	.db $3C
09A17 40                        	.db $40
09A18 C4                        	.db $C4
09A19 38                        	.db $38
09A1A 7E                        	.db $7E
09A1B 38                        	.db $38
09A1C 7E                        	.db $7E
09A1D C2                        	.db $C2
09A1E 38                        	.db $38
09A1F C6                        	.db $C6
09A20 34                        	.db $34
09A21 7E                        	.db $7E
09A22 C8                        	.db $C8
09A23 38                        	.db $38
09A24 C2                        	.db $C2
09A25 7E                        	.db $7E
09A26 C8                        	.db $C8
09A27 30                        	.db $30
09A28 34                        	.db $34
09A29 38                        	.db $38
09A2A C8                        	.db $C8
09A2B 3C                        	.db $3C
09A2C 7E                        	.db $7E
09A2D 3C                        	.db $3C
09A2E C6                        	.db $C6
09A2F 7E                        	.db $7E
09A30 C2                        	.db $C2
09A31 3C                        	.db $3C
09A32 C6                        	.db $C6
09A33 7E                        	.db $7E
09A34 C8                        	.db $C8
09A35 38                        	.db $38
09A36 C2                        	.db $C2
09A37 7E                        	.db $7E
09A38 C8                        	.db $C8
09A39 34                        	.db $34
09A3A C4                        	.db $C4
09A3B 30                        	.db $30
09A3C 7E                        	.db $7E
09A3D                           .include "src/music/segments/character-select/character-select-6-square1.asm"
09A3D                           MusicDataCharacterSelect6_Square1:
09A3D C8                        	.db $C8
09A3E 7E                        	.db $7E
09A3F 34                        	.db $34
09A40 38                        	.db $38
09A41 3A                        	.db $3A
09A42 C8                        	.db $C8
09A43 3C                        	.db $3C
09A44 7E                        	.db $7E
09A45 C6                        	.db $C6
09A46 7E                        	.db $7E
09A47 C8                        	.db $C8
09A48 2E                        	.db $2E
09A49 C2                        	.db $C2
09A4A 7E                        	.db $7E
09A4B                           .include "src/music/segments/character-select/character-select-5-triangle.asm"
09A4B                           MusicDataCharacterSelect5_Triangle:
09A4B 88                        	.db $88
09A4C 38                        	.db $38
09A4D 7E                        	.db $7E
09A4E 3C                        	.db $3C
09A4F 7E                        	.db $7E
09A50 3E                        	.db $3E
09A51 7E                        	.db $7E
09A52 40                        	.db $40
09A53 46                        	.db $46
09A54 42                        	.db $42
09A55 7E                        	.db $7E
09A56 46                        	.db $46
09A57 7E                        	.db $7E
09A58 48                        	.db $48
09A59 7E                        	.db $7E
09A5A 46                        	.db $46
09A5B 42                        	.db $42
09A5C 34                        	.db $34
09A5D 7E                        	.db $7E
09A5E 38                        	.db $38
09A5F 7E                        	.db $7E
09A60 3A                        	.db $3A
09A61 7E                        	.db $7E
09A62 3C                        	.db $3C
09A63 42                        	.db $42
09A64                           .include "src/music/segments/character-select/character-select-6-triangle.asm"
09A64                           MusicDataCharacterSelect6_Triangle:
09A64 88                        	.db $88
09A65 7E                        	.db $7E
09A66 3E                        	.db $3E
09A67 42                        	.db $42
09A68 44                        	.db $44
09A69 46                        	.db $46
09A6A 7E                        	.db $7E
09A6B 8A                        	.db $8A
09A6C 7E                        	.db $7E
09A6D                           .include "src/music/segments/character-select/character-select-5-noise.asm"
09A6D                           MusicDataCharacterSelect5_Noise:
09A6D 88                        	.db $88
09A6E 02                        	.db $02
09A6F 04                        	.db $04
09A70 00                        	.db $00
09A71                           .include "src/music/segments/character-select/character-select-6-noise.asm"
09A71                           MusicDataCharacterSelect6_Noise:
09A71 88                        	.db $88
09A72 02                        	.db $02
09A73 04                        	.db $04
09A74 04                        	.db $04
09A75 04                        	.db $04
09A76 02                        	.db $02
09A77 02                        	.db $02
09A78 7E                        	.db $7E
09A79 06                        	.db $06
09A7A                           
09A7A                           .include "src/music/segments/character-select/character-select-7.asm"
09A7A                           MusicDataCharacterSelect7:
09A7A                           MusicDataCharacterSelect7_Square2:
09A7A 96                        	.db $96
09A7B 50                        	.db $50
09A7C 92                        	.db $92
09A7D 4E                        	.db $4E
09A7E 96                        	.db $96
09A7F 50                        	.db $50
09A80 92                        	.db $92
09A81 5E                        	.db $5E
09A82 96                        	.db $96
09A83 58                        	.db $58
09A84 92                        	.db $92
09A85 50                        	.db $50
09A86 96                        	.db $96
09A87 68                        	.db $68
09A88 92                        	.db $92
09A89 5E                        	.db $5E
09A8A 96                        	.db $96
09A8B 64                        	.db $64
09A8C 92                        	.db $92
09A8D 5E                        	.db $5E
09A8E 96                        	.db $96
09A8F 5A                        	.db $5A
09A90 92                        	.db $92
09A91 5E                        	.db $5E
09A92 96                        	.db $96
09A93 58                        	.db $58
09A94 92                        	.db $92
09A95 52                        	.db $52
09A96 96                        	.db $96
09A97 50                        	.db $50
09A98 92                        	.db $92
09A99 4C                        	.db $4C
09A9A 96                        	.db $96
09A9B 48                        	.db $48
09A9C 92                        	.db $92
09A9D 46                        	.db $46
09A9E 96                        	.db $96
09A9F 48                        	.db $48
09AA0 92                        	.db $92
09AA1 4C                        	.db $4C
09AA2 96                        	.db $96
09AA3 50                        	.db $50
09AA4 92                        	.db $92
09AA5 4E                        	.db $4E
09AA6 96                        	.db $96
09AA7 50                        	.db $50
09AA8 92                        	.db $92
09AA9 5A                        	.db $5A
09AAA 96                        	.db $96
09AAB 58                        	.db $58
09AAC 92                        	.db $92
09AAD 50                        	.db $50
09AAE 96                        	.db $96
09AAF 4C                        	.db $4C
09AB0 92                        	.db $92
09AB1 4E                        	.db $4E
09AB2 96                        	.db $96
09AB3 5A                        	.db $5A
09AB4 92                        	.db $92
09AB5 50                        	.db $50
09AB6 96                        	.db $96
09AB7 56                        	.db $56
09AB8 92                        	.db $92
09AB9 54                        	.db $54
09ABA 96                        	.db $96
09ABB 52                        	.db $52
09ABC 92                        	.db $92
09ABD 50                        	.db $50
09ABE 96                        	.db $96
09ABF 52                        	.db $52
09AC0 92                        	.db $92
09AC1 5A                        	.db $5A
09AC2 96                        	.db $96
09AC3 68                        	.db $68
09AC4 92                        	.db $92
09AC5 4C                        	.db $4C
09AC6 96                        	.db $96
09AC7 5A                        	.db $5A
09AC8 92                        	.db $92
09AC9 58                        	.db $58
09ACA 96                        	.db $96
09ACB 56                        	.db $56
09ACC 92                        	.db $92
09ACD 68                        	.db $68
09ACE 96                        	.db $96
09ACF 56                        	.db $56
09AD0 92                        	.db $92
09AD1 54                        	.db $54
09AD2 96                        	.db $96
09AD3 52                        	.db $52
09AD4 92                        	.db $92
09AD5 64                        	.db $64
09AD6 96                        	.db $96
09AD7 5A                        	.db $5A
09AD8 92                        	.db $92
09AD9 5C                        	.db $5C
09ADA 00                        	.db $00
09ADB                           MusicDataCharacterSelect7_Square1:
09ADB C8                        	.db $C8
09ADC 50                        	.db $50
09ADD 7E                        	.db $7E
09ADE 50                        	.db $50
09ADF C6                        	.db $C6
09AE0 7E                        	.db $7E
09AE1 C2                        	.db $C2
09AE2 50                        	.db $50
09AE3 C6                        	.db $C6
09AE4 7E                        	.db $7E
09AE5 C8                        	.db $C8
09AE6 4C                        	.db $4C
09AE7 C2                        	.db $C2
09AE8 7E                        	.db $7E
09AE9 C8                        	.db $C8
09AEA 4C                        	.db $4C
09AEB 50                        	.db $50
09AEC C4                        	.db $C4
09AED 4C                        	.db $4C
09AEE 7E                        	.db $7E
09AEF 48                        	.db $48
09AF0 7E                        	.db $7E
09AF1 C2                        	.db $C2
09AF2 48                        	.db $48
09AF3 C6                        	.db $C6
09AF4 46                        	.db $46
09AF5 C6                        	.db $C6
09AF6 7E                        	.db $7E
09AF7 C8                        	.db $C8
09AF8 48                        	.db $48
09AF9 C2                        	.db $C2
09AFA 7E                        	.db $7E
09AFB C8                        	.db $C8
09AFC 42                        	.db $42
09AFD 46                        	.db $46
09AFE 48                        	.db $48
09AFF 4C                        	.db $4C
09B00 7E                        	.db $7E
09B01 4C                        	.db $4C
09B02 C6                        	.db $C6
09B03 7E                        	.db $7E
09B04 C2                        	.db $C2
09B05 4C                        	.db $4C
09B06 C6                        	.db $C6
09B07 7E                        	.db $7E
09B08 C8                        	.db $C8
09B09 48                        	.db $48
09B0A C2                        	.db $C2
09B0B 7E                        	.db $7E
09B0C C8                        	.db $C8
09B0D 46                        	.db $46
09B0E C4                        	.db $C4
09B0F 42                        	.db $42
09B10 7E                        	.db $7E
09B11                           MusicDataCharacterSelect7_Triangle:
09B11 88                        	.db $88
09B12 38                        	.db $38
09B13 7E                        	.db $7E
09B14 3C                        	.db $3C
09B15 7E                        	.db $7E
09B16 3E                        	.db $3E
09B17 7E                        	.db $7E
09B18 40                        	.db $40
09B19 46                        	.db $46
09B1A 42                        	.db $42
09B1B 7E                        	.db $7E
09B1C 46                        	.db $46
09B1D 7E                        	.db $7E
09B1E 48                        	.db $48
09B1F 7E                        	.db $7E
09B20 46                        	.db $46
09B21 42                        	.db $42
09B22 34                        	.db $34
09B23 7E                        	.db $7E
09B24 38                        	.db $38
09B25 7E                        	.db $7E
09B26 3A                        	.db $3A
09B27 7E                        	.db $7E
09B28 3C                        	.db $3C
09B29 42                        	.db $42
09B2A                           MusicDataCharacterSelect7_Noise:
09B2A 88                        	.db $88
09B2B 02                        	.db $02
09B2C 04                        	.db $04
09B2D 00                        	.db $00
09B2E                           .include "src/music/segments/character-select/character-select-8.asm"
09B2E                           MusicDataCharacterSelect8:
09B2E                           MusicDataCharacterSelect8_Square2:
09B2E 96                        	.db $96
09B2F 5E                        	.db $5E
09B30 92                        	.db $92
09B31 5C                        	.db $5C
09B32 96                        	.db $96
09B33 5E                        	.db $5E
09B34 92                        	.db $92
09B35 5A                        	.db $5A
09B36 96                        	.db $96
09B37 56                        	.db $56
09B38 92                        	.db $92
09B39 52                        	.db $52
09B3A 96                        	.db $96
09B3B 42                        	.db $42
09B3C 92                        	.db $92
09B3D 46                        	.db $46
09B3E 96                        	.db $96
09B3F 56                        	.db $56
09B40 92                        	.db $92
09B41 52                        	.db $52
09B42 96                        	.db $96
09B43 46                        	.db $46
09B44 92                        	.db $92
09B45 42                        	.db $42
09B46 96                        	.db $96
09B47 52                        	.db $52
09B48 92                        	.db $92
09B49 46                        	.db $46
09B4A 96                        	.db $96
09B4B 42                        	.db $42
09B4C 92                        	.db $92
09B4D 3E                        	.db $3E
09B4E 00                        	.db $00
09B4F                           MusicDataCharacterSelect8_Square1:
09B4F C8                        	.db $C8
09B50 7E                        	.db $7E
09B51 46                        	.db $46
09B52 48                        	.db $48
09B53 4A                        	.db $4A
09B54 C8                        	.db $C8
09B55 4C                        	.db $4C
09B56 7E                        	.db $7E
09B57 C6                        	.db $C6
09B58 7E                        	.db $7E
09B59 C8                        	.db $C8
09B5A 3E                        	.db $3E
09B5B C2                        	.db $C2
09B5C 7E                        	.db $7E
09B5D                           MusicDataCharacterSelect8_Triangle:
09B5D 88                        	.db $88
09B5E 7E                        	.db $7E
09B5F 3E                        	.db $3E
09B60 42                        	.db $42
09B61 44                        	.db $44
09B62 46                        	.db $46
09B63 7E                        	.db $7E
09B64 8A                        	.db $8A
09B65 7E                        	.db $7E
09B66                           MusicDataCharacterSelect8_Noise:
09B66 88                        	.db $88
09B67 02                        	.db $02
09B68 04                        	.db $04
09B69 04                        	.db $04
09B6A 04                        	.db $04
09B6B 02                        	.db $02
09B6C 02                        	.db $02
09B6D 7E                        	.db $7E
09B6E 06                        	.db $06
09B6F                           
09B6F                           ;
09B6F                           ; Overworld music segments ...
09B6F                           ; Segments 1, 2, 5, and 6 are all separate;
09B6F                           ; Segments 3 and 4 have separate square2, square1, and triangle tracks,
09B6F                           ; but share a noise track
09B6F                           ;
09B6F                           .include "src/music/segments/overworld/overworld-1.asm"
09B6F                           MusicDataOverworld1:
09B6F                           MusicDataOverworld1_Square2:
09B6F A2                        	.db $A2
09B70 7E                        	.db $7E
09B71 7E                        	.db $7E
09B72 56                        	.db $56
09B73 54                        	.db $54
09B74 7E                        	.db $7E
09B75 52                        	.db $52
09B76 4C                        	.db $4C
09B77 7E                        	.db $7E
09B78 46                        	.db $46
09B79 42                        	.db $42
09B7A 7E                        	.db $7E
09B7B 40                        	.db $40
09B7C A4                        	.db $A4
09B7D 3E                        	.db $3E
09B7E 7E                        	.db $7E
09B7F 56                        	.db $56
09B80 7E                        	.db $7E
09B81 A8                        	.db $A8
09B82 3E                        	.db $3E
09B83 7E                        	.db $7E
09B84 00                        	.db $00
09B85                           MusicDataOverworld1_Square1:
09B85 A2                        	.db $A2
09B86 7E                        	.db $7E
09B87 7E                        	.db $7E
09B88 46                        	.db $46
09B89 44                        	.db $44
09B8A 7E                        	.db $7E
09B8B 42                        	.db $42
09B8C 3A                        	.db $3A
09B8D 7E                        	.db $7E
09B8E 34                        	.db $34
09B8F 30                        	.db $30
09B90 7E                        	.db $7E
09B91 2E                        	.db $2E
09B92 A4                        	.db $A4
09B93 2E                        	.db $2E
09B94 7E                        	.db $7E
09B95 46                        	.db $46
09B96 7E                        	.db $7E
09B97 A8                        	.db $A8
09B98 3A                        	.db $3A
09B99 7E                        	.db $7E
09B9A                           MusicDataOverworld1_Triangle:
09B9A 82                        	.db $82
09B9B 7E                        	.db $7E
09B9C 7E                        	.db $7E
09B9D 4C                        	.db $4C
09B9E 4A                        	.db $4A
09B9F 7E                        	.db $7E
09BA0 48                        	.db $48
09BA1 46                        	.db $46
09BA2 7E                        	.db $7E
09BA3 3E                        	.db $3E
09BA4 3A                        	.db $3A
09BA5 7E                        	.db $7E
09BA6 38                        	.db $38
09BA7 88                        	.db $88
09BA8 34                        	.db $34
09BA9 4C                        	.db $4C
09BAA 34                        	.db $34
09BAB 3E                        	.db $3E
09BAC                           MusicDataOverworld1_Noise:
09BAC 8A                        	.db $8A
09BAD 01                        	.db $01
09BAE 01                        	.db $01
09BAF 88                        	.db $88
09BB0 02                        	.db $02
09BB1 82                        	.db $82
09BB2 02                        	.db $02
09BB3 02                        	.db $02
09BB4 02                        	.db $02
09BB5 02                        	.db $02
09BB6 01                        	.db $01
09BB7 02                        	.db $02
09BB8 02                        	.db $02
09BB9 02                        	.db $02
09BBA 02                        	.db $02
09BBB                           .include "src/music/segments/overworld/overworld-2.asm"
09BBB                           MusicDataOverworld2:
09BBB                           MusicDataOverworld2_Square2:
09BBB 82                        	.db $82
09BBC 56                        	.db $56
09BBD 7E                        	.db $7E
09BBE 48                        	.db $48
09BBF 50                        	.db $50
09BC0 7E                        	.db $7E
09BC1 88                        	.db $88
09BC2 56                        	.db $56
09BC3 82                        	.db $82
09BC4 48                        	.db $48
09BC5 50                        	.db $50
09BC6 7E                        	.db $7E
09BC7 56                        	.db $56
09BC8 46                        	.db $46
09BC9 4E                        	.db $4E
09BCA 56                        	.db $56
09BCB 5E                        	.db $5E
09BCC 7E                        	.db $7E
09BCD 8A                        	.db $8A
09BCE 5A                        	.db $5A
09BCF 82                        	.db $82
09BD0 7E                        	.db $7E
09BD1 56                        	.db $56
09BD2 7E                        	.db $7E
09BD3 44                        	.db $44
09BD4 4C                        	.db $4C
09BD5 7E                        	.db $7E
09BD6 88                        	.db $88
09BD7 56                        	.db $56
09BD8 82                        	.db $82
09BD9 44                        	.db $44
09BDA 4C                        	.db $4C
09BDB 7E                        	.db $7E
09BDC 56                        	.db $56
09BDD 4A                        	.db $4A
09BDE 50                        	.db $50
09BDF 56                        	.db $56
09BE0 5E                        	.db $5E
09BE1 7E                        	.db $7E
09BE2 8A                        	.db $8A
09BE3 5A                        	.db $5A
09BE4 82                        	.db $82
09BE5 5E                        	.db $5E
09BE6 60                        	.db $60
09BE7 7E                        	.db $7E
09BE8 5E                        	.db $5E
09BE9 60                        	.db $60
09BEA 7E                        	.db $7E
09BEB 88                        	.db $88
09BEC 5A                        	.db $5A
09BED 82                        	.db $82
09BEE 60                        	.db $60
09BEF 5E                        	.db $5E
09BF0 7E                        	.db $7E
09BF1 5A                        	.db $5A
09BF2 56                        	.db $56
09BF3 7E                        	.db $7E
09BF4 54                        	.db $54
09BF5 56                        	.db $56
09BF6 7E                        	.db $7E
09BF7 88                        	.db $88
09BF8 50                        	.db $50
09BF9 82                        	.db $82
09BFA 4A                        	.db $4A
09BFB 4C                        	.db $4C
09BFC 7E                        	.db $7E
09BFD 50                        	.db $50
09BFE 52                        	.db $52
09BFF 7E                        	.db $7E
09C00 50                        	.db $50
09C01 52                        	.db $52
09C02 7E                        	.db $7E
09C03 88                        	.db $88
09C04 46                        	.db $46
09C05 82                        	.db $82
09C06 50                        	.db $50
09C07 4C                        	.db $4C
09C08 7E                        	.db $7E
09C09 8A                        	.db $8A
09C0A 48                        	.db $48
09C0B 7E                        	.db $7E
09C0C 82                        	.db $82
09C0D 7E                        	.db $7E
09C0E 00                        	.db $00
09C0F                           MusicDataOverworld2_Square1:
09C0F 82                        	.db $82
09C10 48                        	.db $48
09C11 7E                        	.db $7E
09C12 38                        	.db $38
09C13 3E                        	.db $3E
09C14 7E                        	.db $7E
09C15 88                        	.db $88
09C16 48                        	.db $48
09C17 82                        	.db $82
09C18 38                        	.db $38
09C19 3E                        	.db $3E
09C1A 7E                        	.db $7E
09C1B 48                        	.db $48
09C1C 36                        	.db $36
09C1D 3E                        	.db $3E
09C1E 46                        	.db $46
09C1F 4E                        	.db $4E
09C20 7E                        	.db $7E
09C21 8A                        	.db $8A
09C22 46                        	.db $46
09C23 82                        	.db $82
09C24 7E                        	.db $7E
09C25 44                        	.db $44
09C26 7E                        	.db $7E
09C27 34                        	.db $34
09C28 3E                        	.db $3E
09C29 7E                        	.db $7E
09C2A 88                        	.db $88
09C2B 44                        	.db $44
09C2C 82                        	.db $82
09C2D 34                        	.db $34
09C2E 3E                        	.db $3E
09C2F 7E                        	.db $7E
09C30 44                        	.db $44
09C31 38                        	.db $38
09C32 42                        	.db $42
09C33 4A                        	.db $4A
09C34 50                        	.db $50
09C35 7E                        	.db $7E
09C36 8A                        	.db $8A
09C37 4A                        	.db $4A
09C38 82                        	.db $82
09C39 50                        	.db $50
09C3A 5A                        	.db $5A
09C3B 7E                        	.db $7E
09C3C 56                        	.db $56
09C3D 5A                        	.db $5A
09C3E 7E                        	.db $7E
09C3F 88                        	.db $88
09C40 52                        	.db $52
09C41 82                        	.db $82
09C42 5A                        	.db $5A
09C43 56                        	.db $56
09C44 7E                        	.db $7E
09C45 54                        	.db $54
09C46 50                        	.db $50
09C47 7E                        	.db $7E
09C48 4E                        	.db $4E
09C49 50                        	.db $50
09C4A 7E                        	.db $7E
09C4B 88                        	.db $88
09C4C 48                        	.db $48
09C4D 82                        	.db $82
09C4E 42                        	.db $42
09C4F 46                        	.db $46
09C50 7E                        	.db $7E
09C51 4A                        	.db $4A
09C52 4C                        	.db $4C
09C53 7E                        	.db $7E
09C54 48                        	.db $48
09C55 4C                        	.db $4C
09C56 7E                        	.db $7E
09C57 88                        	.db $88
09C58 3E                        	.db $3E
09C59 82                        	.db $82
09C5A 48                        	.db $48
09C5B 46                        	.db $46
09C5C 7E                        	.db $7E
09C5D 8A                        	.db $8A
09C5E 3E                        	.db $3E
09C5F 8A                        	.db $8A
09C60 7E                        	.db $7E
09C61 82                        	.db $82
09C62 7E                        	.db $7E
09C63                           MusicDataOverworld2_Triangle:
09C63 88                        	.db $88
09C64 30                        	.db $30
09C65 3E                        	.db $3E
09C66 30                        	.db $30
09C67 3E                        	.db $3E
09C68 2E                        	.db $2E
09C69 3E                        	.db $3E
09C6A 2E                        	.db $2E
09C6B 3E                        	.db $3E
09C6C 2C                        	.db $2C
09C6D 3E                        	.db $3E
09C6E 2C                        	.db $2C
09C6F 3E                        	.db $3E
09C70 2A                        	.db $2A
09C71 3E                        	.db $3E
09C72 2A                        	.db $2A
09C73 3E                        	.db $3E
09C74 22                        	.db $22
09C75 3A                        	.db $3A
09C76 24                        	.db $24
09C77 3C                        	.db $3C
09C78 26                        	.db $26
09C79 3E                        	.db $3E
09C7A 2A                        	.db $2A
09C7B 42                        	.db $42
09C7C 34                        	.db $34
09C7D 3A                        	.db $3A
09C7E 26                        	.db $26
09C7F 34                        	.db $34
09C80 30                        	.db $30
09C81 26                        	.db $26
09C82 30                        	.db $30
09C83 7E                        	.db $7E
09C84                           MusicDataOverworld2_Noise:
09C84 88                        	.db $88
09C85 01                        	.db $01
09C86 02                        	.db $02
09C87 01                        	.db $01
09C88 02                        	.db $02
09C89 88                        	.db $88
09C8A 01                        	.db $01
09C8B 02                        	.db $02
09C8C 82                        	.db $82
09C8D 02                        	.db $02
09C8E 02                        	.db $02
09C8F 02                        	.db $02
09C90 02                        	.db $02
09C91 01                        	.db $01
09C92 02                        	.db $02
09C93 00                        	.db $00
09C94                           .include "src/music/segments/overworld/overworld-3-square2.asm"
09C94                           MusicDataOverworld3:
09C94                           MusicDataOverworld3_Square2:
09C94 92                        	.db $92
09C95 7E                        	.db $7E
09C96 7E                        	.db $7E
09C97 98                        	.db $98
09C98 50                        	.db $50
09C99 92                        	.db $92
09C9A 7E                        	.db $7E
09C9B 56                        	.db $56
09C9C 7E                        	.db $7E
09C9D 7E                        	.db $7E
09C9E 5A                        	.db $5A
09C9F 7E                        	.db $7E
09CA0 9A                        	.db $9A
09CA1 60                        	.db $60
09CA2 92                        	.db $92
09CA3 7E                        	.db $7E
09CA4 5A                        	.db $5A
09CA5 7E                        	.db $7E
09CA6 56                        	.db $56
09CA7 50                        	.db $50
09CA8 7E                        	.db $7E
09CA9 48                        	.db $48
09CAA 4C                        	.db $4C
09CAB 7E                        	.db $7E
09CAC 50                        	.db $50
09CAD 4C                        	.db $4C
09CAE 7E                        	.db $7E
09CAF 50                        	.db $50
09CB0 4C                        	.db $4C
09CB1 7E                        	.db $7E
09CB2 42                        	.db $42
09CB3 7E                        	.db $7E
09CB4 7E                        	.db $7E
09CB5 98                        	.db $98
09CB6 4C                        	.db $4C
09CB7 90                        	.db $90
09CB8 42                        	.db $42
09CB9 4C                        	.db $4C
09CBA 42                        	.db $42
09CBB 4C                        	.db $4C
09CBC 42                        	.db $42
09CBD 4C                        	.db $4C
09CBE 42                        	.db $42
09CBF 4C                        	.db $4C
09CC0 42                        	.db $42
09CC1 4C                        	.db $4C
09CC2 42                        	.db $42
09CC3 4C                        	.db $4C
09CC4 92                        	.db $92
09CC5 7E                        	.db $7E
09CC6 98                        	.db $98
09CC7 4C                        	.db $4C
09CC8 92                        	.db $92
09CC9 50                        	.db $50
09CCA 4C                        	.db $4C
09CCB 7E                        	.db $7E
09CCC 50                        	.db $50
09CCD 4C                        	.db $4C
09CCE 7E                        	.db $7E
09CCF 50                        	.db $50
09CD0 7E                        	.db $7E
09CD1 7E                        	.db $7E
09CD2 98                        	.db $98
09CD3 5A                        	.db $5A
09CD4 92                        	.db $92
09CD5 56                        	.db $56
09CD6 5A                        	.db $5A
09CD7 7E                        	.db $7E
09CD8 56                        	.db $56
09CD9 00                        	.db $00
09CDA                           .include "src/music/segments/overworld/overworld-4-square2.asm"
09CDA                           MusicDataOverworld4:
09CDA                           MusicDataOverworld4_Square2:
09CDA 92                        	.db $92
09CDB 50                        	.db $50
09CDC 7E                        	.db $7E
09CDD 4C                        	.db $4C
09CDE 48                        	.db $48
09CDF 7E                        	.db $7E
09CE0 98                        	.db $98
09CE1 50                        	.db $50
09CE2 90                        	.db $90
09CE3 3E                        	.db $3E
09CE4 50                        	.db $50
09CE5 3E                        	.db $3E
09CE6 50                        	.db $50
09CE7 3E                        	.db $3E
09CE8 50                        	.db $50
09CE9 3E                        	.db $3E
09CEA 50                        	.db $50
09CEB 3E                        	.db $3E
09CEC 50                        	.db $50
09CED 3E                        	.db $3E
09CEE 50                        	.db $50
09CEF 92                        	.db $92
09CF0 7E                        	.db $7E
09CF1 7E                        	.db $7E
09CF2 C2                        	.db $C2
09CF3 7E                        	.db $7E
09CF4 7E                        	.db $7E
09CF5 56                        	.db $56
09CF6 7E                        	.db $7E
09CF7 4E                        	.db $4E
09CF8 7E                        	.db $7E
09CF9 46                        	.db $46
09CFA 7E                        	.db $7E
09CFB 42                        	.db $42
09CFC 7E                        	.db $7E
09CFD 3E                        	.db $3E
09CFE 7E                        	.db $7E
09CFF 00                        	.db $00
09D00                           .include "src/music/segments/overworld/overworld-3-4-noise.asm"
09D00                           MusicDataOverworld3_Noise:
09D00                           MusicDataOverworld4_Noise:
09D00 88                        	.db $88
09D01 06                        	.db $06
09D02 82                        	.db $82
09D03 02                        	.db $02
09D04 01                        	.db $01
09D05 02                        	.db $02
09D06 00                        	.db $00
09D07                           .include "src/music/segments/overworld/overworld-3-square1.asm"
09D07                           MusicDataOverworld3_Square1:
09D07 92                        	.db $92
09D08 7E                        	.db $7E
09D09 7E                        	.db $7E
09D0A 98                        	.db $98
09D0B 3E                        	.db $3E
09D0C 92                        	.db $92
09D0D 7E                        	.db $7E
09D0E 48                        	.db $48
09D0F 7E                        	.db $7E
09D10 7E                        	.db $7E
09D11 50                        	.db $50
09D12 7E                        	.db $7E
09D13 9A                        	.db $9A
09D14 56                        	.db $56
09D15 92                        	.db $92
09D16 7E                        	.db $7E
09D17 50                        	.db $50
09D18 7E                        	.db $7E
09D19 48                        	.db $48
09D1A 42                        	.db $42
09D1B 7E                        	.db $7E
09D1C 3E                        	.db $3E
09D1D 3C                        	.db $3C
09D1E 7E                        	.db $7E
09D1F 3E                        	.db $3E
09D20 3C                        	.db $3C
09D21 7E                        	.db $7E
09D22 3E                        	.db $3E
09D23 3C                        	.db $3C
09D24 7E                        	.db $7E
09D25 34                        	.db $34
09D26 7E                        	.db $7E
09D27 7E                        	.db $7E
09D28 98                        	.db $98
09D29 3C                        	.db $3C
09D2A 90                        	.db $90
09D2B 34                        	.db $34
09D2C 3C                        	.db $3C
09D2D 34                        	.db $34
09D2E 34                        	.db $34
09D2F 3C                        	.db $3C
09D30 34                        	.db $34
09D31 3C                        	.db $3C
09D32 34                        	.db $34
09D33 3C                        	.db $3C
09D34 90                        	.db $90
09D35 34                        	.db $34
09D36 3C                        	.db $3C
09D37 34                        	.db $34
09D38 92                        	.db $92
09D39 7E                        	.db $7E
09D3A 98                        	.db $98
09D3B 3A                        	.db $3A
09D3C 92                        	.db $92
09D3D 3E                        	.db $3E
09D3E 3A                        	.db $3A
09D3F 7E                        	.db $7E
09D40 3E                        	.db $3E
09D41 3A                        	.db $3A
09D42 7E                        	.db $7E
09D43 3E                        	.db $3E
09D44 7E                        	.db $7E
09D45 7E                        	.db $7E
09D46 98                        	.db $98
09D47 48                        	.db $48
09D48 92                        	.db $92
09D49 46                        	.db $46
09D4A 48                        	.db $48
09D4B 7E                        	.db $7E
09D4C 46                        	.db $46
09D4D                           .include "src/music/segments/overworld/overworld-4-square1.asm"
09D4D                           MusicDataOverworld4_Square1:
09D4D 92                        	.db $92
09D4E 3E                        	.db $3E
09D4F 7E                        	.db $7E
09D50 3A                        	.db $3A
09D51 38                        	.db $38
09D52 7E                        	.db $7E
09D53 98                        	.db $98
09D54 48                        	.db $48
09D55 90                        	.db $90
09D56 38                        	.db $38
09D57 48                        	.db $48
09D58 38                        	.db $38
09D59 48                        	.db $48
09D5A 38                        	.db $38
09D5B 48                        	.db $48
09D5C 38                        	.db $38
09D5D 48                        	.db $48
09D5E 38                        	.db $38
09D5F 48                        	.db $48
09D60 38                        	.db $38
09D61 48                        	.db $48
09D62 C2                        	.db $C2
09D63 7E                        	.db $7E
09D64 7E                        	.db $7E
09D65 7E                        	.db $7E
09D66 7E                        	.db $7E
09D67 46                        	.db $46
09D68 7E                        	.db $7E
09D69 42                        	.db $42
09D6A 7E                        	.db $7E
09D6B 3E                        	.db $3E
09D6C 7E                        	.db $7E
09D6D 3A                        	.db $3A
09D6E 7E                        	.db $7E
09D6F 36                        	.db $36
09D70 7E                        	.db $7E
09D71                           .include "src/music/segments/overworld/overworld-3-triangle.asm"
09D71                           MusicDataOverworld3_Triangle:
09D71 88                        	.db $88
09D72 30                        	.db $30
09D73 34                        	.db $34
09D74 38                        	.db $38
09D75 3E                        	.db $3E
09D76 42                        	.db $42
09D77 3E                        	.db $3E
09D78 38                        	.db $38
09D79 30                        	.db $30
09D7A 34                        	.db $34
09D7B 38                        	.db $38
09D7C 3C                        	.db $3C
09D7D 2A                        	.db $2A
09D7E 82                        	.db $82
09D7F 34                        	.db $34
09D80 7E                        	.db $7E
09D81 38                        	.db $38
09D82 88                        	.db $88
09D83 30                        	.db $30
09D84 2E                        	.db $2E
09D85 2A                        	.db $2A
09D86 26                        	.db $26
09D87 3E                        	.db $3E
09D88 3A                        	.db $3A
09D89 34                        	.db $34
09D8A 2E                        	.db $2E
09D8B 26                        	.db $26
09D8C                           .include "src/music/segments/overworld/overworld-4-triangle.asm"
09D8C                           MusicDataOverworld4_Triangle:
09D8C 88                        	.db $88
09D8D 2A                        	.db $2A
09D8E 2E                        	.db $2E
09D8F 30                        	.db $30
09D90 32                        	.db $32
09D91 34                        	.db $34
09D92 36                        	.db $36
09D93 82                        	.db $82
09D94 38                        	.db $38
09D95 7E                        	.db $7E
09D96 2E                        	.db $2E
09D97 88                        	.db $88
09D98 2A                        	.db $2A
09D99 26                        	.db $26
09D9A 2E                        	.db $2E
09D9B                           .include "src/music/segments/overworld/overworld-5.asm"
09D9B                           MusicDataOverworld5:
09D9B                           MusicDataOverworld5_Square2:
09D9B 92                        	.db $92
09D9C 5A                        	.db $5A
09D9D 7E                        	.db $7E
09D9E 56                        	.db $56
09D9F 50                        	.db $50
09DA0 7E                        	.db $7E
09DA1 9A                        	.db $9A
09DA2 48                        	.db $48
09DA3 82                        	.db $82
09DA4 3C                        	.db $3C
09DA5 3E                        	.db $3E
09DA6 7E                        	.db $7E
09DA7 40                        	.db $40
09DA8 42                        	.db $42
09DA9 7E                        	.db $7E
09DAA 48                        	.db $48
09DAB 7E                        	.db $7E
09DAC 7E                        	.db $7E
09DAD 88                        	.db $88
09DAE 7E                        	.db $7E
09DAF 82                        	.db $82
09DB0 48                        	.db $48
09DB1 88                        	.db $88
09DB2 7E                        	.db $7E
09DB3 E2                        	.db $E2
09DB4 7E                        	.db $7E
09DB5 7E                        	.db $7E
09DB6 50                        	.db $50
09DB7 00                        	.db $00
09DB8                           MusicDataOverworld5_Square1:
09DB8 92                        	.db $92
09DB9 48                        	.db $48
09DBA 7E                        	.db $7E
09DBB 46                        	.db $46
09DBC 3E                        	.db $3E
09DBD 7E                        	.db $7E
09DBE 9A                        	.db $9A
09DBF 38                        	.db $38
09DC0 88                        	.db $88
09DC1 7E                        	.db $7E
09DC2 82                        	.db $82
09DC3 7E                        	.db $7E
09DC4 3A                        	.db $3A
09DC5 7E                        	.db $7E
09DC6 38                        	.db $38
09DC7 7E                        	.db $7E
09DC8 7E                        	.db $7E
09DC9 88                        	.db $88
09DCA 7E                        	.db $7E
09DCB 82                        	.db $82
09DCC 38                        	.db $38
09DCD 88                        	.db $88
09DCE 7E                        	.db $7E
09DCF E2                        	.db $E2
09DD0 7E                        	.db $7E
09DD1 7E                        	.db $7E
09DD2 38                        	.db $38
09DD3                           MusicDataOverworld5_Triangle:
09DD3 2A                        	.db $2A
09DD4 2E                        	.db $2E
09DD5 30                        	.db $30
09DD6 26                        	.db $26
09DD7 2A                        	.db $2A
09DD8 2E                        	.db $2E
09DD9 30                        	.db $30
09DDA 82                        	.db $82
09DDB 7E                        	.db $7E
09DDC 7E                        	.db $7E
09DDD 30                        	.db $30
09DDE 88                        	.db $88
09DDF 7E                        	.db $7E
09DE0 7E                        	.db $7E
09DE1                           MusicDataOverworld5_Noise:
09DE1 88                        	.db $88
09DE2 06                        	.db $06
09DE3 82                        	.db $82
09DE4 02                        	.db $02
09DE5 01                        	.db $01
09DE6 02                        	.db $02
09DE7 00                        	.db $00
09DE8                           .include "src/music/segments/overworld/overworld-6.asm"
09DE8                           MusicDataOverworld6:
09DE8                           MusicDataOverworld6_Square2:
09DE8 E2                        	.db $E2
09DE9 7E                        	.db $7E
09DEA 7E                        	.db $7E
09DEB 52                        	.db $52
09DEC 4E                        	.db $4E
09DED 7E                        	.db $7E
09DEE 50                        	.db $50
09DEF 52                        	.db $52
09DF0 7E                        	.db $7E
09DF1 4E                        	.db $4E
09DF2 50                        	.db $50
09DF3 7E                        	.db $7E
09DF4 E8                        	.db $E8
09DF5 5E                        	.db $5E
09DF6 E2                        	.db $E2
09DF7 7E                        	.db $7E
09DF8 E8                        	.db $E8
09DF9 58                        	.db $58
09DFA 52                        	.db $52
09DFB 50                        	.db $50
09DFC E2                        	.db $E2
09DFD 4C                        	.db $4C
09DFE E0                        	.db $E0
09DFF 50                        	.db $50
09E00 4C                        	.db $4C
09E01 48                        	.db $48
09E02 E2                        	.db $E2
09E03 46                        	.db $46
09E04 7E                        	.db $7E
09E05 48                        	.db $48
09E06 E2                        	.db $E2
09E07 4C                        	.db $4C
09E08 7E                        	.db $7E
09E09 48                        	.db $48
09E0A 46                        	.db $46
09E0B 7E                        	.db $7E
09E0C EA                        	.db $EA
09E0D 48                        	.db $48
09E0E E2                        	.db $E2
09E0F 48                        	.db $48
09E10 E8                        	.db $E8
09E11 46                        	.db $46
09E12 48                        	.db $48
09E13 E2                        	.db $E2
09E14 7E                        	.db $7E
09E15 7E                        	.db $7E
09E16 E8                        	.db $E8
09E17 4C                        	.db $4C
09E18 E2                        	.db $E2
09E19 7E                        	.db $7E
09E1A E8                        	.db $E8
09E1B 4A                        	.db $4A
09E1C E2                        	.db $E2
09E1D 4C                        	.db $4C
09E1E 7E                        	.db $7E
09E1F E8                        	.db $E8
09E20 5A                        	.db $5A
09E21 E2                        	.db $E2
09E22 7E                        	.db $7E
09E23 E8                        	.db $E8
09E24 54                        	.db $54
09E25 56                        	.db $56
09E26 5A                        	.db $5A
09E27 EA                        	.db $EA
09E28 5E                        	.db $5E
09E29 5A                        	.db $5A
09E2A E8                        	.db $E8
09E2B 58                        	.db $58
09E2C E2                        	.db $E2
09E2D 7E                        	.db $7E
09E2E 7E                        	.db $7E
09E2F 7E                        	.db $7E
09E30 56                        	.db $56
09E31 7E                        	.db $7E
09E32 4C                        	.db $4C
09E33 46                        	.db $46
09E34 7E                        	.db $7E
09E35 3E                        	.db $3E
09E36 00                        	.db $00
09E37                           MusicDataOverworld6_Square1:
09E37 E2                        	.db $E2
09E38 7E                        	.db $7E
09E39 7E                        	.db $7E
09E3A 3A                        	.db $3A
09E3B 36                        	.db $36
09E3C 7E                        	.db $7E
09E3D 38                        	.db $38
09E3E 3A                        	.db $3A
09E3F 7E                        	.db $7E
09E40 36                        	.db $36
09E41 38                        	.db $38
09E42 7E                        	.db $7E
09E43 E8                        	.db $E8
09E44 46                        	.db $46
09E45 E2                        	.db $E2
09E46 7E                        	.db $7E
09E47 E8                        	.db $E8
09E48 40                        	.db $40
09E49 3A                        	.db $3A
09E4A 38                        	.db $38
09E4B E2                        	.db $E2
09E4C 34                        	.db $34
09E4D E0                        	.db $E0
09E4E 38                        	.db $38
09E4F 34                        	.db $34
09E50 30                        	.db $30
09E51 E2                        	.db $E2
09E52 2E                        	.db $2E
09E53 7E                        	.db $7E
09E54 30                        	.db $30
09E55 E2                        	.db $E2
09E56 34                        	.db $34
09E57 7E                        	.db $7E
09E58 30                        	.db $30
09E59 2E                        	.db $2E
09E5A 7E                        	.db $7E
09E5B EA                        	.db $EA
09E5C 30                        	.db $30
09E5D E2                        	.db $E2
09E5E 30                        	.db $30
09E5F E8                        	.db $E8
09E60 2E                        	.db $2E
09E61 30                        	.db $30
09E62 E2                        	.db $E2
09E63 7E                        	.db $7E
09E64 7E                        	.db $7E
09E65 E8                        	.db $E8
09E66 34                        	.db $34
09E67 E2                        	.db $E2
09E68 7E                        	.db $7E
09E69 E8                        	.db $E8
09E6A 32                        	.db $32
09E6B E2                        	.db $E2
09E6C 34                        	.db $34
09E6D 7E                        	.db $7E
09E6E E8                        	.db $E8
09E6F 42                        	.db $42
09E70 E2                        	.db $E2
09E71 7E                        	.db $7E
09E72 E8                        	.db $E8
09E73 3C                        	.db $3C
09E74 3E                        	.db $3E
09E75 42                        	.db $42
09E76 E2                        	.db $E2
09E77 46                        	.db $46
09E78 7E                        	.db $7E
09E79 44                        	.db $44
09E7A 46                        	.db $46
09E7B 7E                        	.db $7E
09E7C 5E                        	.db $5E
09E7D 42                        	.db $42
09E7E 7E                        	.db $7E
09E7F 40                        	.db $40
09E80 42                        	.db $42
09E81 7E                        	.db $7E
09E82 5A                        	.db $5A
09E83 40                        	.db $40
09E84 7E                        	.db $7E
09E85 3E                        	.db $3E
09E86 40                        	.db $40
09E87 7E                        	.db $7E
09E88 58                        	.db $58
09E89 3E                        	.db $3E
09E8A 7E                        	.db $7E
09E8B 34                        	.db $34
09E8C 2E                        	.db $2E
09E8D 7E                        	.db $7E
09E8E 26                        	.db $26
09E8F                           MusicDataOverworld6_Triangle:
09E8F 88                        	.db $88
09E90 38                        	.db $38
09E91 46                        	.db $46
09E92 40                        	.db $40
09E93 3A                        	.db $3A
09E94 38                        	.db $38
09E95 34                        	.db $34
09E96 2E                        	.db $2E
09E97 28                        	.db $28
09E98 2A                        	.db $2A
09E99 2E                        	.db $2E
09E9A 30                        	.db $30
09E9B 34                        	.db $34
09E9C 38                        	.db $38
09E9D 30                        	.db $30
09E9E 2E                        	.db $2E
09E9F 2A                        	.db $2A
09EA0 34                        	.db $34
09EA1 38                        	.db $38
09EA2 3C                        	.db $3C
09EA3 42                        	.db $42
09EA4 34                        	.db $34
09EA5 2A                        	.db $2A
09EA6 34                        	.db $34
09EA7 3C                        	.db $3C
09EA8 3E                        	.db $3E
09EA9 3A                        	.db $3A
09EAA 34                        	.db $34
09EAB 2E                        	.db $2E
09EAC 34                        	.db $34
09EAD 2E                        	.db $2E
09EAE 2A                        	.db $2A
09EAF 26                        	.db $26
09EB0                           MusicDataOverworld6_Noise:
09EB0 88                        	.db $88
09EB1 06                        	.db $06
09EB2 82                        	.db $82
09EB3 10                        	.db $10
09EB4 01                        	.db $01
09EB5 10                        	.db $10
09EB6 00                        	.db $00
09EB7                           
09EB7                           ;
09EB7                           ; Boss music segment...
09EB7                           ;
09EB7                           .include "src/music/segments/boss/boss.asm"
09EB7                           MusicDataBoss:
09EB7                           MusicDataBoss_Square2:
09EB7 94                        	.db $94
09EB8 34                        	.db $34
09EB9 36                        	.db $36
09EBA 36                        	.db $36
09EBB 34                        	.db $34
09EBC 36                        	.db $36
09EBD 36                        	.db $36
09EBE 34                        	.db $34
09EBF 36                        	.db $36
09EC0 34                        	.db $34
09EC1 36                        	.db $36
09EC2 36                        	.db $36
09EC3 34                        	.db $34
09EC4 36                        	.db $36
09EC5 36                        	.db $36
09EC6 34                        	.db $34
09EC7 36                        	.db $36
09EC8 34                        	.db $34
09EC9 36                        	.db $36
09ECA 36                        	.db $36
09ECB 34                        	.db $34
09ECC 36                        	.db $36
09ECD 36                        	.db $36
09ECE 34                        	.db $34
09ECF 36                        	.db $36
09ED0 34                        	.db $34
09ED1 36                        	.db $36
09ED2 36                        	.db $36
09ED3 34                        	.db $34
09ED4 36                        	.db $36
09ED5 36                        	.db $36
09ED6 34                        	.db $34
09ED7 36                        	.db $36
09ED8 38                        	.db $38
09ED9 3A                        	.db $3A
09EDA 3A                        	.db $3A
09EDB 38                        	.db $38
09EDC 3A                        	.db $3A
09EDD 3A                        	.db $3A
09EDE 38                        	.db $38
09EDF 3A                        	.db $3A
09EE0 38                        	.db $38
09EE1 3A                        	.db $3A
09EE2 3A                        	.db $3A
09EE3 38                        	.db $38
09EE4 3A                        	.db $3A
09EE5 3A                        	.db $3A
09EE6 38                        	.db $38
09EE7 3A                        	.db $3A
09EE8 38                        	.db $38
09EE9 3A                        	.db $3A
09EEA 3A                        	.db $3A
09EEB 38                        	.db $38
09EEC 3A                        	.db $3A
09EED 3A                        	.db $3A
09EEE 38                        	.db $38
09EEF 3A                        	.db $3A
09EF0 38                        	.db $38
09EF1 3A                        	.db $3A
09EF2 3A                        	.db $3A
09EF3 38                        	.db $38
09EF4 3A                        	.db $3A
09EF5 3A                        	.db $3A
09EF6 38                        	.db $38
09EF7 3A                        	.db $3A
09EF8 00                        	.db $00
09EF9                           MusicDataBoss_Square1:
09EF9 94                        	.db $94
09EFA 7E                        	.db $7E
09EFB 42                        	.db $42
09EFC 42                        	.db $42
09EFD 7E                        	.db $7E
09EFE 42                        	.db $42
09EFF 42                        	.db $42
09F00 7E                        	.db $7E
09F01 42                        	.db $42
09F02 7E                        	.db $7E
09F03 42                        	.db $42
09F04 42                        	.db $42
09F05 7E                        	.db $7E
09F06 42                        	.db $42
09F07 42                        	.db $42
09F08 7E                        	.db $7E
09F09 42                        	.db $42
09F0A 7E                        	.db $7E
09F0B 40                        	.db $40
09F0C 40                        	.db $40
09F0D 7E                        	.db $7E
09F0E 40                        	.db $40
09F0F 40                        	.db $40
09F10 7E                        	.db $7E
09F11 40                        	.db $40
09F12 7E                        	.db $7E
09F13 40                        	.db $40
09F14 40                        	.db $40
09F15 7E                        	.db $7E
09F16 40                        	.db $40
09F17 40                        	.db $40
09F18 7E                        	.db $7E
09F19 40                        	.db $40
09F1A 7E                        	.db $7E
09F1B 46                        	.db $46
09F1C 46                        	.db $46
09F1D 7E                        	.db $7E
09F1E 46                        	.db $46
09F1F 46                        	.db $46
09F20 7E                        	.db $7E
09F21 46                        	.db $46
09F22 7E                        	.db $7E
09F23 46                        	.db $46
09F24 46                        	.db $46
09F25 7E                        	.db $7E
09F26 46                        	.db $46
09F27 46                        	.db $46
09F28 7E                        	.db $7E
09F29 46                        	.db $46
09F2A 7E                        	.db $7E
09F2B 44                        	.db $44
09F2C 44                        	.db $44
09F2D 7E                        	.db $7E
09F2E 44                        	.db $44
09F2F 44                        	.db $44
09F30 7E                        	.db $7E
09F31 44                        	.db $44
09F32 7E                        	.db $7E
09F33 44                        	.db $44
09F34 44                        	.db $44
09F35 7E                        	.db $7E
09F36 44                        	.db $44
09F37 44                        	.db $44
09F38 7E                        	.db $7E
09F39 44                        	.db $44
09F3A                           MusicDataBoss_Triangle:
09F3A 89                        	.db $89
09F3B 3C                        	.db $3C
09F3C 3C                        	.db $3C
09F3D 88                        	.db $88
09F3E 3C                        	.db $3C
09F3F 89                        	.db $89
09F40 3C                        	.db $3C
09F41 3C                        	.db $3C
09F42 88                        	.db $88
09F43 3C                        	.db $3C
09F44 89                        	.db $89
09F45 3A                        	.db $3A
09F46 3A                        	.db $3A
09F47 88                        	.db $88
09F48 3A                        	.db $3A
09F49 89                        	.db $89
09F4A 3A                        	.db $3A
09F4B 3A                        	.db $3A
09F4C 88                        	.db $88
09F4D 3A                        	.db $3A
09F4E 89                        	.db $89
09F4F 40                        	.db $40
09F50 40                        	.db $40
09F51 88                        	.db $88
09F52 40                        	.db $40
09F53 89                        	.db $89
09F54 40                        	.db $40
09F55 40                        	.db $40
09F56 88                        	.db $88
09F57 40                        	.db $40
09F58 89                        	.db $89
09F59 3E                        	.db $3E
09F5A 3E                        	.db $3E
09F5B 88                        	.db $88
09F5C 3E                        	.db $3E
09F5D 89                        	.db $89
09F5E 3E                        	.db $3E
09F5F 3E                        	.db $3E
09F60 88                        	.db $88
09F61 3E                        	.db $3E
09F62                           
09F62                           ;
09F62                           ; Wart's final boss music segment
09F62                           ;
09F62                           .include "src/music/segments/wart/wart.asm"
09F62                           MusicDataWart:
09F62                           MusicDataWart_Square2:
09F62 A9                        	.db $A9
09F63 56                        	.db $56
09F64 54                        	.db $54
09F65 A8                        	.db $A8
09F66 4C                        	.db $4C
09F67 A9                        	.db $A9
09F68 54                        	.db $54
09F69 52                        	.db $52
09F6A A8                        	.db $A8
09F6B 4A                        	.db $4A
09F6C A9                        	.db $A9
09F6D 52                        	.db $52
09F6E 50                        	.db $50
09F6F A8                        	.db $A8
09F70 48                        	.db $48
09F71 A4                        	.db $A4
09F72 4E                        	.db $4E
09F73 AB                        	.db $AB
09F74 4C                        	.db $4C
09F75 A4                        	.db $A4
09F76 7E                        	.db $7E
09F77 A9                        	.db $A9
09F78 5A                        	.db $5A
09F79 58                        	.db $58
09F7A A8                        	.db $A8
09F7B 50                        	.db $50
09F7C A9                        	.db $A9
09F7D 58                        	.db $58
09F7E 56                        	.db $56
09F7F A8                        	.db $A8
09F80 4E                        	.db $4E
09F81 A9                        	.db $A9
09F82 56                        	.db $56
09F83 54                        	.db $54
09F84 A8                        	.db $A8
09F85 4C                        	.db $4C
09F86 A4                        	.db $A4
09F87 52                        	.db $52
09F88 AB                        	.db $AB
09F89 50                        	.db $50
09F8A A4                        	.db $A4
09F8B 7E                        	.db $7E
09F8C 4E                        	.db $4E
09F8D 4C                        	.db $4C
09F8E 4E                        	.db $4E
09F8F 4C                        	.db $4C
09F90 4E                        	.db $4E
09F91 4C                        	.db $4C
09F92 4E                        	.db $4E
09F93 4C                        	.db $4C
09F94 50                        	.db $50
09F95 4E                        	.db $4E
09F96 50                        	.db $50
09F97 4E                        	.db $4E
09F98 50                        	.db $50
09F99 4E                        	.db $4E
09F9A 50                        	.db $50
09F9B 4E                        	.db $4E
09F9C 52                        	.db $52
09F9D 50                        	.db $50
09F9E 52                        	.db $52
09F9F 50                        	.db $50
09FA0 52                        	.db $52
09FA1 50                        	.db $50
09FA2 52                        	.db $52
09FA3 50                        	.db $50
09FA4 54                        	.db $54
09FA5 52                        	.db $52
09FA6 54                        	.db $54
09FA7 52                        	.db $52
09FA8 54                        	.db $54
09FA9 52                        	.db $52
09FAA 54                        	.db $54
09FAB 52                        	.db $52
09FAC 00                        	.db $00
09FAD                           MusicDataWart_Square1:
09FAD A9                        	.db $A9
09FAE 44                        	.db $44
09FAF 42                        	.db $42
09FB0 A8                        	.db $A8
09FB1 3A                        	.db $3A
09FB2 A9                        	.db $A9
09FB3 42                        	.db $42
09FB4 40                        	.db $40
09FB5 A8                        	.db $A8
09FB6 38                        	.db $38
09FB7 A9                        	.db $A9
09FB8 40                        	.db $40
09FB9 3E                        	.db $3E
09FBA A8                        	.db $A8
09FBB 36                        	.db $36
09FBC A4                        	.db $A4
09FBD 3C                        	.db $3C
09FBE AB                        	.db $AB
09FBF 3A                        	.db $3A
09FC0 A4                        	.db $A4
09FC1 7E                        	.db $7E
09FC2 A9                        	.db $A9
09FC3 48                        	.db $48
09FC4 46                        	.db $46
09FC5 A8                        	.db $A8
09FC6 3E                        	.db $3E
09FC7 A9                        	.db $A9
09FC8 46                        	.db $46
09FC9 44                        	.db $44
09FCA A8                        	.db $A8
09FCB 3C                        	.db $3C
09FCC A9                        	.db $A9
09FCD 44                        	.db $44
09FCE 42                        	.db $42
09FCF A8                        	.db $A8
09FD0 3A                        	.db $3A
09FD1 A4                        	.db $A4
09FD2 42                        	.db $42
09FD3 AB                        	.db $AB
09FD4 40                        	.db $40
09FD5 A4                        	.db $A4
09FD6 7E                        	.db $7E
09FD7 A4                        	.db $A4
09FD8 42                        	.db $42
09FD9 40                        	.db $40
09FDA 42                        	.db $42
09FDB 40                        	.db $40
09FDC 42                        	.db $42
09FDD 40                        	.db $40
09FDE 42                        	.db $42
09FDF 40                        	.db $40
09FE0 44                        	.db $44
09FE1 42                        	.db $42
09FE2 44                        	.db $44
09FE3 42                        	.db $42
09FE4 44                        	.db $44
09FE5 42                        	.db $42
09FE6 44                        	.db $44
09FE7 42                        	.db $42
09FE8 46                        	.db $46
09FE9 44                        	.db $44
09FEA 46                        	.db $46
09FEB 44                        	.db $44
09FEC 46                        	.db $46
09FED 44                        	.db $44
09FEE 46                        	.db $46
09FEF 44                        	.db $44
09FF0 48                        	.db $48
09FF1 46                        	.db $46
09FF2 48                        	.db $48
09FF3 46                        	.db $46
09FF4 48                        	.db $48
09FF5 46                        	.db $46
09FF6 48                        	.db $48
09FF7 46                        	.db $46
09FF8                           MusicDataWart_Triangle:
09FF8 84                        	.db $84
09FF9 3E                        	.db $3E
09FFA 42                        	.db $42
09FFB 44                        	.db $44
09FFC 3E                        	.db $3E
09FFD 42                        	.db $42
09FFE 44                        	.db $44
09FFF 3E                        	.db $3E
0A000 44                        	.db $44
0A001 3E                        	.db $3E
0A002 42                        	.db $42
0A003 44                        	.db $44
0A004 3E                        	.db $3E
0A005 42                        	.db $42
0A006 44                        	.db $44
0A007 3E                        	.db $3E
0A008 44                        	.db $44
0A009 3E                        	.db $3E
0A00A 42                        	.db $42
0A00B 44                        	.db $44
0A00C 3E                        	.db $3E
0A00D 42                        	.db $42
0A00E 44                        	.db $44
0A00F 3E                        	.db $3E
0A010 44                        	.db $44
0A011 3E                        	.db $3E
0A012 42                        	.db $42
0A013 44                        	.db $44
0A014 3E                        	.db $3E
0A015 42                        	.db $42
0A016 44                        	.db $44
0A017 3E                        	.db $3E
0A018 44                        	.db $44
0A019 3C                        	.db $3C
0A01A 40                        	.db $40
0A01B 42                        	.db $42
0A01C 3C                        	.db $3C
0A01D 40                        	.db $40
0A01E 42                        	.db $42
0A01F 3C                        	.db $3C
0A020 42                        	.db $42
0A021 3C                        	.db $3C
0A022 40                        	.db $40
0A023 42                        	.db $42
0A024 3C                        	.db $3C
0A025 40                        	.db $40
0A026 42                        	.db $42
0A027 3C                        	.db $3C
0A028 42                        	.db $42
0A029 3C                        	.db $3C
0A02A 40                        	.db $40
0A02B 42                        	.db $42
0A02C 3C                        	.db $3C
0A02D 40                        	.db $40
0A02E 42                        	.db $42
0A02F 3C                        	.db $3C
0A030 42                        	.db $42
0A031 3C                        	.db $3C
0A032 40                        	.db $40
0A033 42                        	.db $42
0A034 3C                        	.db $3C
0A035 40                        	.db $40
0A036 42                        	.db $42
0A037 3C                        	.db $3C
0A038 42                        	.db $42
0A039 84                        	.db $84
0A03A 3A                        	.db $3A
0A03B 88                        	.db $88
0A03C 3A                        	.db $3A
0A03D 3A                        	.db $3A
0A03E 3A                        	.db $3A
0A03F 84                        	.db $84
0A040 3A                        	.db $3A
0A041 3C                        	.db $3C
0A042 88                        	.db $88
0A043 3C                        	.db $3C
0A044 3C                        	.db $3C
0A045 3C                        	.db $3C
0A046 84                        	.db $84
0A047 3C                        	.db $3C
0A048 3E                        	.db $3E
0A049 88                        	.db $88
0A04A 3E                        	.db $3E
0A04B 3E                        	.db $3E
0A04C 3E                        	.db $3E
0A04D 84                        	.db $84
0A04E 3E                        	.db $3E
0A04F 40                        	.db $40
0A050 88                        	.db $88
0A051 40                        	.db $40
0A052 40                        	.db $40
0A053 40                        	.db $40
0A054 84                        	.db $84
0A055 40                        	.db $40
0A056                           
0A056                           ;
0A056                           ; Various sound effect jingles; not really full songs...
0A056                           ;
0A056                           .include "src/music/segments/jingles/mushroom-bonus-chance.asm"
0A056                           MusicDataMushroomBonusChance:
0A056                           MusicDataMushroomBonusChance_Square2:
0A056 82                        	.db $82
0A057 46                        	.db $46
0A058 48                        	.db $48
0A059 4A                        	.db $4A
0A05A 4C                        	.db $4C
0A05B 7E                        	.db $7E
0A05C 56                        	.db $56
0A05D 88                        	.db $88
0A05E 52                        	.db $52
0A05F 00                        	.db $00
0A060                           MusicDataMushroomBonusChance_Square1:
0A060 82                        	.db $82
0A061 3E                        	.db $3E
0A062 42                        	.db $42
0A063 44                        	.db $44
0A064 46                        	.db $46
0A065 7E                        	.db $7E
0A066 50                        	.db $50
0A067 88                        	.db $88
0A068 4C                        	.db $4C
0A069                           .include "src/music/segments/jingles/game-over.asm"
0A069                           MusicDataGameOver:
0A069                           MusicDataGameOver_Square2:
0A069 94                        	.db $94
0A06A 56                        	.db $56
0A06B 5A                        	.db $5A
0A06C 60                        	.db $60
0A06D 3E                        	.db $3E
0A06E 42                        	.db $42
0A06F 48                        	.db $48
0A070 26                        	.db $26
0A071 2A                        	.db $2A
0A072 98                        	.db $98
0A073 30                        	.db $30
0A074 26                        	.db $26
0A075 30                        	.db $30
0A076 00                        	.db $00
0A077                           MusicDataGameOver_Square1:
0A077 98                        	.db $98
0A078 7E                        	.db $7E
0A079 94                        	.db $94
0A07A 30                        	.db $30
0A07B 98                        	.db $98
0A07C 7E                        	.db $7E
0A07D 94                        	.db $94
0A07E 30                        	.db $30
0A07F 98                        	.db $98
0A080 7E                        	.db $7E
0A081 30                        	.db $30
0A082 3A                        	.db $3A
0A083 38                        	.db $38
0A084                           MusicDataGameOver_Triangle:
0A084 88                        	.db $88
0A085 7E                        	.db $7E
0A086 89                        	.db $89
0A087 60                        	.db $60
0A088 48                        	.db $48
0A089 88                        	.db $88
0A08A 30                        	.db $30
0A08B 3E                        	.db $3E
0A08C 30                        	.db $30
0A08D                           .include "src/music/segments/jingles/boss-beaten.asm"
0A08D                           MusicDataBossBeaten:
0A08D                           MusicDataBossBeaten_Square2:
0A08D 94                        	.db $94
0A08E 42                        	.db $42
0A08F 48                        	.db $48
0A090 4C                        	.db $4C
0A091 42                        	.db $42
0A092 48                        	.db $48
0A093 4C                        	.db $4C
0A094 3E                        	.db $3E
0A095 42                        	.db $42
0A096 50                        	.db $50
0A097 3E                        	.db $3E
0A098 42                        	.db $42
0A099 52                        	.db $52
0A09A 50                        	.db $50
0A09B 48                        	.db $48
0A09C 42                        	.db $42
0A09D 7E                        	.db $7E
0A09E 3A                        	.db $3A
0A09F 42                        	.db $42
0A0A0 48                        	.db $48
0A0A1 50                        	.db $50
0A0A2 4C                        	.db $4C
0A0A3 3E                        	.db $3E
0A0A4 42                        	.db $42
0A0A5 7E                        	.db $7E
0A0A6 30                        	.db $30
0A0A7 7E                        	.db $7E
0A0A8 26                        	.db $26
0A0A9 2A                        	.db $2A
0A0AA 7E                        	.db $7E
0A0AB 26                        	.db $26
0A0AC 20                        	.db $20
0A0AD 7E                        	.db $7E
0A0AE 98                        	.db $98
0A0AF 18                        	.db $18
0A0B0 26                        	.db $26
0A0B1 30                        	.db $30
0A0B2 7E                        	.db $7E
0A0B3 00                        	.db $00
0A0B4                           MusicDataBossBeaten_Square1:
0A0B4 88                        	.db $88
0A0B5 7E                        	.db $7E
0A0B6 30                        	.db $30
0A0B7 7E                        	.db $7E
0A0B8 30                        	.db $30
0A0B9 7E                        	.db $7E
0A0BA 34                        	.db $34
0A0BB 7E                        	.db $7E
0A0BC 38                        	.db $38
0A0BD 7E                        	.db $7E
0A0BE 42                        	.db $42
0A0BF 7E                        	.db $7E
0A0C0 46                        	.db $46
0A0C1 48                        	.db $48
0A0C2 94                        	.db $94
0A0C3 3E                        	.db $3E
0A0C4 98                        	.db $98
0A0C5 42                        	.db $42
0A0C6 94                        	.db $94
0A0C7 3E                        	.db $3E
0A0C8 98                        	.db $98
0A0C9 38                        	.db $38
0A0CA 30                        	.db $30
0A0CB 7E                        	.db $7E
0A0CC 9A                        	.db $9A
0A0CD 48                        	.db $48
0A0CE                           MusicDataBossBeaten_Triangle:
0A0CE 88                        	.db $88
0A0CF 3A                        	.db $3A
0A0D0 52                        	.db $52
0A0D1 3C                        	.db $3C
0A0D2 54                        	.db $54
0A0D3 3E                        	.db $3E
0A0D4 56                        	.db $56
0A0D5 42                        	.db $42
0A0D6 5A                        	.db $5A
0A0D7 4C                        	.db $4C
0A0D8 3A                        	.db $3A
0A0D9 3E                        	.db $3E
0A0DA 4C                        	.db $4C
0A0DB 48                        	.db $48
0A0DC 7E                        	.db $7E
0A0DD 7E                        	.db $7E
0A0DE 7E                        	.db $7E
0A0DF 48                        	.db $48
0A0E0 3E                        	.db $3E
0A0E1 30                        	.db $30
0A0E2 7E                        	.db $7E
0A0E3                           .include "src/music/segments/jingles/crystal.asm"
0A0E3                           MusicDataCrystal:
0A0E3                           MusicDataCrystal_Square2:
0A0E3 89                        	.db $89
0A0E4 40                        	.db $40
0A0E5 84                        	.db $84
0A0E6 40                        	.db $40
0A0E7 88                        	.db $88
0A0E8 40                        	.db $40
0A0E9 88                        	.db $88
0A0EA 56                        	.db $56
0A0EB 56                        	.db $56
0A0EC 52                        	.db $52
0A0ED 8B                        	.db $8B
0A0EE 50                        	.db $50
0A0EF 00                        	.db $00
0A0F0                           MusicDataCrystal_Square1:
0A0F0 89                        	.db $89
0A0F1 36                        	.db $36
0A0F2 84                        	.db $84
0A0F3 36                        	.db $36
0A0F4 88                        	.db $88
0A0F5 36                        	.db $36
0A0F6 88                        	.db $88
0A0F7 44                        	.db $44
0A0F8 88                        	.db $88
0A0F9 44                        	.db $44
0A0FA 88                        	.db $88
0A0FB 40                        	.db $40
0A0FC 8B                        	.db $8B
0A0FD 3E                        	.db $3E
0A0FE                           MusicDataCrystal_Triangle:
0A0FE 89                        	.db $89
0A0FF 40                        	.db $40
0A100 84                        	.db $84
0A101 40                        	.db $40
0A102 88                        	.db $88
0A103 40                        	.db $40
0A104 88                        	.db $88
0A105 4E                        	.db $4E
0A106 4E                        	.db $4E
0A107 4A                        	.db $4A
0A108 8B                        	.db $8B
0A109 48                        	.db $48
0A10A                           .include "src/music/segments/jingles/death.asm"
0A10A                           MusicDataDeath:
0A10A                           MusicDataDeath_Square2:
0A10A 84                        	.db $84
0A10B 7E                        	.db $7E
0A10C 82                        	.db $82
0A10D 4E                        	.db $4E
0A10E 7E                        	.db $7E
0A10F 46                        	.db $46
0A110 3E                        	.db $3E
0A111 7E                        	.db $7E
0A112 3A                        	.db $3A
0A113 8A                        	.db $8A
0A114 38                        	.db $38
0A115 00                        	.db $00
0A116                           MusicDataDeath_Square1:
0A116 84                        	.db $84
0A117 7E                        	.db $7E
0A118 82                        	.db $82
0A119 3E                        	.db $3E
0A11A 7E                        	.db $7E
0A11B 34                        	.db $34
0A11C 2E                        	.db $2E
0A11D 7E                        	.db $7E
0A11E 2A                        	.db $2A
0A11F 8A                        	.db $8A
0A120 26                        	.db $26
0A121                           MusicDataDeath_Triangle:
0A121 84                        	.db $84
0A122 7E                        	.db $7E
0A123 88                        	.db $88
0A124 46                        	.db $46
0A125 3E                        	.db $3E
0A126 8A                        	.db $8A
0A127 30                        	.db $30
0A128                           
0A128                           ; Instrument data and definitions
0A128                           .include "src/music/instruments.asm"
0A128                           ;
0A128                           ; Instrument Sound Data
0A128                           ; =====================
0A128                           ;
0A128                           ; Each "instrument" is a lookup table of duty/volume/envelope values that are
0A128                           ; read backwards from the end
0A128                           ;
0A128                           ; The normal version of an instrument is 64 bytes
0A128                           ; The shorter version of an instrument is 23 bytes
0A128                           ;
0A128                           InstrumentSoundData:
0A128                           
0A128                           ; Long square
0A128                           ; 50% duty cycle (square) with slight decay
0A128                           InstrumentDVE_80: ; $A18D
0A128 90 95 95 95 95 95 96 96.. 	.db $90, $95, $95, $95, $95, $95, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96
0A138 96 96 96 96 96 96 96 96.. 	.db $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96
0A148 96 96 96 96 96 96 96 96.. 	.db $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96
0A158 96 96 96 96 96 96 96 96.. 	.db $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $97, $97, $97, $97, $98, $98
0A168                           
0A168                           ; Long square
0A168                           ; 50% duty cycle (square) with slight decay
0A168                           InstrumentDVE_80_Short: ; $A1CD
0A168 90 92 94 96 96 96 96 96.. 	.db $90, $92, $94, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96
0A178 96 97 97 97 97 98 98      	.db $96, $97, $97, $97, $97, $98, $98
0A17F                           
0A17F                           ; Short square
0A17F                           ; 25% duty cycle with pronounced decay
0A17F                           InstrumentDVE_90_E0: ; $A1E4
0A17F 51 51 51 51 51 51 51 51.. 	.db $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51
0A18F 51 51 51 51 51 51 51 51.. 	.db $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51
0A19F 51 51 51 51 51 51 51 51.. 	.db $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51
0A1AF 51 51 51 51 51 51 52 53.. 	.db $51, $51, $51, $51, $51, $51, $52, $53, $54, $55, $56, $57, $58, $59, $5A, $5B
0A1BF                           
0A1BF                           ; Short square
0A1BF                           ; 25% duty cycle with pronounced decay
0A1BF                           InstrumentDVE_90_E0_Short: ; $A224
0A1BF 51 51 51 51 51 51 51 51.. 	.db $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $52, $53, $54
0A1CF 55 56 57 58 59 5A 5B      	.db $55, $56, $57, $58, $59, $5A, $5B
0A1D6                           
0A1D6                           ; Electric Piano
0A1D6                           ; 12.5% duty cycle with pronounced decay
0A1D6                           InstrumentDVE_A0: ; $A23B
0A1D6 10 11 11 11 12 12 12 13.. 	.db $10, $11, $11, $11, $12, $12, $12, $13, $13, $14, $14, $14, $14, $15, $15, $15
0A1E6 15 16 16 16 17 17 17 17.. 	.db $15, $16, $16, $16, $17, $17, $17, $17, $17, $17, $17, $18, $18, $18, $18, $18
0A1F6 18 18 18 18 18 18 18 18.. 	.db $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0A206 18 18 18 18 18 18 18 18.. 	.db $18, $18, $18, $18, $18, $18, $18, $18, $19, $19, $19, $1A, $1A, $1B, $1B, $1C
0A216                           
0A216                           ; Electric Piano
0A216                           ; 12.5% duty cycle with pronounced decay
0A216                           InstrumentDVE_A0_Short: ; $A27B
0A216 10 11 12 13 14 15 16 17.. 	.db $10, $11, $12, $13, $14, $15, $16, $17, $17, $18, $18, $18, $18, $18, $18, $18
0A226 19 19 19 1A 1A 1B 1B 1C   	.db $19, $19, $19, $1A, $1A, $1B, $1B, $1C
0A22E                           
0A22E                           ; Organ
0A22E                           ; 25% duty cycle with slight decay
0A22E                           InstrumentDVE_B0: ; $A293
0A22E 51 52 52 52 52 53 53 53.. 	.db $51, $52, $52, $52, $52, $53, $53, $53, $53, $53, $53, $53, $54, $54, $54, $54
0A23E 54 54 54 54 54 55 55 55.. 	.db $54, $54, $54, $54, $54, $55, $55, $55, $55, $55, $55, $56, $56, $56, $56, $56
0A24E 56 56 56 56 56 56 56 56.. 	.db $56, $56, $56, $56, $56, $56, $56, $56, $56, $56, $56, $56, $56, $56, $56, $56
0A25E 56 56 56 56 56 56 56 55.. 	.db $56, $56, $56, $56, $56, $56, $56, $55, $55, $56, $56, $56, $56, $56, $56, $56
0A26E                           
0A26E                           ; Organ
0A26E                           ; 25% duty cycle with slight decay
0A26E                           InstrumentDVE_B0_Short: ; $A2D3
0A26E 51 52 52 52 52 53 53 53.. 	.db $51, $52, $52, $52, $52, $53, $53, $53, $53, $53, $53, $53, $54, $54, $54, $54
0A27E 54 54 54 55 55 56 56      	.db $54, $54, $54, $55, $55, $56, $56
0A285                           
0A285                           ; Strings
0A285                           ; 25% duty cycle with slow attack
0A285                           InstrumentDVE_C0_Short: ; $A2EA
0A285 51 52 53 54 54 55 56 56.. 	.db $51, $52, $53, $54, $54, $55, $56, $56, $57, $58, $59, $5A, $5B, $5B, $5B, $5B
0A295 5B 5A 59 58 56 55 55      	.db $5B, $5A, $59, $58, $56, $55, $55
0A29C                           
0A29C                           ; Strings
0A29C                           ; 25% duty cycle with slow attack
0A29C                           InstrumentDVE_C0: ; $A301
0A29C 51 52 52 51 52 52 52 53.. 	.db $51, $52, $52, $51, $52, $52, $52, $53, $53, $53, $53, $53, $53, $54, $54, $54
0A2AC 54 54 54 55 55 55 55 55.. 	.db $54, $54, $54, $55, $55, $55, $55, $55, $56, $56, $56, $57, $57, $57, $57, $57
0A2BC 58 58 58 58 58 58 58 58.. 	.db $58, $58, $58, $58, $58, $58, $58, $58, $58, $58, $59, $59, $59, $59, $5A, $5A
0A2CC 5A 5A 5A 5B 5B 5B 5B 5B.. 	.db $5A, $5A, $5A, $5B, $5B, $5B, $5B, $5B, $5B, $5B, $5A, $59, $58, $56, $55, $55
0A2DC                           
0A2DC                           ; Pluck
0A2DC                           ; 50% to -25% to 12.5% to 12.5% duty cycle with pronounced decay
0A2DC                           InstrumentDVE_D0: ; $A341
0A2DC 50 50 50 50 50 50 50 50.. 	.db $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50
0A2EC 51 51 51 51 51 51 51 51.. 	.db $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51
0A2FC 51 51 51 51 51 51 51 51.. 	.db $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51
0A30C 51 51 51 51 51 51 52 53.. 	.db $51, $51, $51, $51, $51, $51, $52, $53, $54, $55, $56, $57, $58, $19, $DA, $9B
0A31C                           
0A31C                           ; Pluck
0A31C                           ; 50% to -25% to 12.5% to 12.5% duty cycle with pronounced decay
0A31C                           InstrumentDVE_D0_Short: ; $A381
0A31C 50 51 51 51 51 51 51 51.. 	.db $50, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $52, $53, $54
0A32C 55 56 57 58 19 DA 9B      	.db $55, $56, $57, $58, $19, $DA, $9B
0A333                           
0A333                           IFNDEF PROTOTYPE_INSTRUMENTS
0A333                           ; Soft pluck
0A333                           ; 25% duty cycle with pronounced decay
0A333                           InstrumentDVE_F0_Short: ; $A398
0A333 50 50 50 50 50 50 50 50.. 	.db $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $51, $51, $51, $51
0A343 52 52 52 53 53 54 55      	.db $52, $52, $52, $53, $53, $54, $55
0A34A                           
0A34A                           ; Soft pluck
0A34A                           ; 25% duty cycle with pronounced decay
0A34A                           InstrumentDVE_F0: ; $A3AF
0A34A 50 50 50 50 50 50 50 50.. 	.db $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50
0A35A 50 50 50 50 50 50 50 50.. 	.db $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50
0A36A 50 50 50 50 50 50 50 50.. 	.db $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50
0A37A 50 50 50 50 50 51 51 51.. 	.db $50, $50, $50, $50, $50, $51, $51, $51, $51, $52, $52, $52, $53, $53, $54, $55
0A38A                           
0A38A                           ENDIF
0A38A                           IFDEF PROTOTYPE_INSTRUMENTS
0A38A                           ; Soft pluck
0A38A                           ; 25% duty cycle with pronounced decay
0A38A                           InstrumentDVE_F0_Short:
0A38A                           	.db $54, $54, $55, $56, $56, $57, $58, $59, $5A, $5B, $5B, $5B, $5B, $5B, $5B, $5B
0A38A                           	.db $5B, $5B, $5B, $5D
0A38A                           
0A38A                           ; Soft pluck
0A38A                           ; 25% duty cycle with pronounced decay
0A38A                           InstrumentDVE_F0:
0A38A                           	.db $51, $51, $51, $51, $52, $52, $52, $53, $53, $53, $53, $53, $53, $54, $54, $54
0A38A                           	.db $54, $54, $54, $55, $55, $55, $55, $55, $56, $56, $56, $57, $57, $57, $57, $57
0A38A                           	.db $58, $58, $58, $58, $58, $58, $58, $58, $58, $58, $59, $59, $59, $59, $5A, $5A
0A38A                           	.db $5A, $5A, $5A, $5B, $5B, $5B, $5B, $5B, $5B, $5B, $5B, $5B, $5C, $5C, $5C, $5D
0A38A                           
0A38A                           ENDIF
0A38A FF FF FF FF FF FF FF FF.. .pad $c000, $ff
0C000                           
0C000                           ; ----------------------------------------
0C000                           ; Bank 6 and 7. Level handling ode, I think.
0C000                           ; Hmm, I wonder how this actually works when
0C000                           ; dealing with the fact the level data is
0C000                           ; in another bank...
0C000                           ; Bank 7 is completely empty.
0C000                           .base $8000
08000                           .include "src/prg-6-7.asm"
08000                           ;
08000                           ; Bank 6 & Bank 7
08000                           ; ===============
08000                           ;
08000                           ; What's inside:
08000                           ;
08000                           ;   - Level palettes
08000                           ;   - Groundset data
08000                           ;   - Object tiles
08000                           ;   - Level handling code
08000                           ;
08000                           ; -----
08000                           ;
08000                           
08000                           ;
08000                           ; ## Level palettes
08000                           ;
08000                           ; Each world has several sets of background and sprite palettes, which are set per area in the level
08000                           ; header. Subspace is defined separately in each world, but they all use the same colors!
08000                           ;
08000                           
08000                           ;
08000                           ; #### Palette pointers
08000                           ;
08000                           WorldBackgroundPalettePointersLo:
08000 00                        	.db <World1BackgroundPalettes
08001 00                        	.db <World2BackgroundPalettes
08002 00                        	.db <World3BackgroundPalettes
08003 00                        	.db <World4BackgroundPalettes
08004 00                        	.db <World5BackgroundPalettes
08005 00                        	.db <World6BackgroundPalettes
08006 00                        	.db <World7BackgroundPalettes
08007                           
08007                           WorldSpritePalettePointersLo:
08007 00                        	.db <World1SpritePalettes
08008 00                        	.db <World2SpritePalettes
08009 00                        	.db <World3SpritePalettes
0800A 00                        	.db <World4SpritePalettes
0800B 00                        	.db <World5SpritePalettes
0800C 00                        	.db <World6SpritePalettes
0800D 00                        	.db <World7SpritePalettes
0800E                           
0800E                           WorldBackgroundPalettePointersHi:
0800E 00                        	.db >World1BackgroundPalettes
0800F 00                        	.db >World2BackgroundPalettes
08010 00                        	.db >World3BackgroundPalettes
08011 00                        	.db >World4BackgroundPalettes
08012 00                        	.db >World5BackgroundPalettes
08013 00                        	.db >World6BackgroundPalettes
08014 00                        	.db >World7BackgroundPalettes
08015                           
08015                           WorldSpritePalettePointersHi:
08015 00                        	.db >World1SpritePalettes
08016 00                        	.db >World2SpritePalettes
08017 00                        	.db >World3SpritePalettes
08018 00                        	.db >World4SpritePalettes
08019 00                        	.db >World5SpritePalettes
0801A 00                        	.db >World6SpritePalettes
0801B 00                        	.db >World7SpritePalettes
0801C                           
0801C                           ; #### World 1
0801C                           ;
0801C                           World1BackgroundPalettes:
0801C                           	; Day
0801C 21 30 12 0F               	.db $21, $30, $12, $0F ; $00
08020 21 30 16 0F               	.db $21, $30, $16, $0F ; $04
08024 21 27 17 0F               	.db $21, $27, $17, $0F ; $08
08028 21 29 1A 0F               	.db $21, $29, $1A, $0F ; $0C
0802C                           	; Night
0802C 0F 30 12 01               	.db $0F, $30, $12, $01 ; $10
08030 0F 30 16 02               	.db $0F, $30, $16, $02 ; $14
08034 0F 27 17 08               	.db $0F, $27, $17, $08 ; $18
08038 0F 29 1A 0A               	.db $0F, $29, $1A, $0A ; $1C
0803C                           	; Underground
0803C 0F 2C 1C 0C               	.db $0F, $2C, $1C, $0C ; $20
08040 0F 30 16 02               	.db $0F, $30, $16, $02 ; $24
08044 0F 27 17 08               	.db $0F, $27, $17, $08 ; $28
08048 0F 2A 1A 0A               	.db $0F, $2A, $1A, $0A ; $2C
0804C                           	; Jar
0804C 07 30 27 0F               	.db $07, $30, $27, $0F ; $30
08050 07 30 16 0F               	.db $07, $30, $16, $0F ; $34
08054 07 27 17 0F               	.db $07, $27, $17, $0F ; $38
08058 07 31 21 0F               	.db $07, $31, $21, $0F ; $3C
0805C                           	; Castle
0805C 03 2C 1C 0F               	.db $03, $2C, $1C, $0F ; $40
08060 03 30 16 0F               	.db $03, $30, $16, $0F ; $44
08064 03 3C 1C 0F               	.db $03, $3C, $1C, $0F ; $48
08068 03 25 15 05               	.db $03, $25, $15, $05 ; $4C
0806C                           	; Boss
0806C 0C 30 06 0F               	.db $0C, $30, $06, $0F ; $50
08070 0C 30 16 0F               	.db $0C, $30, $16, $0F ; $54
08074 0C 30 16 0F               	.db $0C, $30, $16, $0F ; $58
08078 0C 30 26 0F               	.db $0C, $30, $26, $0F ; $5C
0807C                           	; Subspace
0807C 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $60
08080 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $64
08084 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $68
08088 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $6C
0808C                           
0808C                           World1SpritePalettes:
0808C                           	; Overworld
0808C FF 30 16 0F               	.db $FF, $30, $16, $0F ; $00
08090 FF 38 10 0F               	.db $FF, $38, $10, $0F ; $04
08094 FF 30 25 0F               	.db $FF, $30, $25, $0F ; $08
08098                           	; Underground
08098 FF 30 16 02               	.db $FF, $30, $16, $02 ; $0C
0809C FF 38 10 02               	.db $FF, $38, $10, $02 ; $10
080A0 FF 30 25 02               	.db $FF, $30, $25, $02 ; $14
080A4                           	; Boss
080A4 FF 30 16 0F               	.db $FF, $30, $16, $0F ; $18
080A8 FF 30 10 0F               	.db $FF, $30, $10, $0F ; $1C
080AC FF 25 10 0F               	.db $FF, $25, $10, $0F ; $20
080B0                           IFDEF EXPAND_TABLES
080B0                           	unusedSpace World1SpritePalettes + $30, $FF
080B0                           ENDIF
080B0                           
080B0                           ;
080B0                           ; #### World 2
080B0                           ;
080B0                           World2BackgroundPalettes:
080B0                           	; Day
080B0 11 30 2A 0F               	.db $11, $30, $2A, $0F ; $00
080B4 11 30 16 0F               	.db $11, $30, $16, $0F ; $04
080B8 11 28 18 0F               	.db $11, $28, $18, $0F ; $08
080BC 11 17 07 0F               	.db $11, $17, $07, $0F ; $0C
080C0                           	; Night (unused?)
080C0 0F 30 2A 0A               	.db $0F, $30, $2A, $0A ; $10
080C4 0F 30 16 02               	.db $0F, $30, $16, $02 ; $14
080C8 0F 28 18 08               	.db $0F, $28, $18, $08 ; $18
080CC 0F 17 07 08               	.db $0F, $17, $07, $08 ; $1C
080D0                           	; Underground
080D0 0F 2A 1A 0A               	.db $0F, $2A, $1A, $0A ; $20
080D4 0F 30 16 02               	.db $0F, $30, $16, $02 ; $24
080D8 0F 28 18 08               	.db $0F, $28, $18, $08 ; $28
080DC 0F 27 17 07               	.db $0F, $27, $17, $07 ; $2C
080E0                           	; Jar
080E0 07 30 27 0F               	.db $07, $30, $27, $0F ; $30
080E4 07 30 16 0F               	.db $07, $30, $16, $0F ; $34
080E8 07 28 17 0F               	.db $07, $28, $17, $0F ; $38
080EC 07 31 11 0F               	.db $07, $31, $11, $0F ; $3C;
080F0                           	; Castle (unused)
080F0 0C 2A 1A 0F               	.db $0C, $2A, $1A, $0F ; $40
080F4 0C 30 16 0F               	.db $0C, $30, $16, $0F ; $44
080F8 0C 17 07 0F               	.db $0C, $17, $07, $0F ; $48
080FC 0C 25 15 0F               	.db $0C, $25, $15, $0F ; $4C
08100                           	; Boss
08100 0C 30 1A 0F               	.db $0C, $30, $1A, $0F ; $50
08104 0C 30 16 0F               	.db $0C, $30, $16, $0F ; $54
08108 0C 30 2A 0F               	.db $0C, $30, $2A, $0F ; $58
0810C 0C 30 3A 0F               	.db $0C, $30, $3A, $0F ; $5C
08110                           	; Subspace
08110 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $60
08114 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $64
08118 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $68
0811C 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $6C
08120                           
08120                           World2SpritePalettes:
08120                           	; Overworld
08120 FF 30 16 0F               	.db $FF, $30, $16, $0F ; $00
08124 FF 38 2A 0F               	.db $FF, $38, $2A, $0F ; $04
08128 FF 30 25 0F               	.db $FF, $30, $25, $0F ; $08
0812C                           	; Underground
0812C FF 30 16 02               	.db $FF, $30, $16, $02 ; $0C
08130 FF 38 2A 02               	.db $FF, $38, $2A, $02 ; $10
08134 FF 30 25 02               	.db $FF, $30, $25, $02 ; $14
08138                           	; Boss
08138 FF 30 16 0F               	.db $FF, $30, $16, $0F ; $18
0813C FF 30 10 0F               	.db $FF, $30, $10, $0F ; $1C
08140 FF 30 23 0F               	.db $FF, $30, $23, $0F ; $20
08144                           IFDEF EXPAND_TABLES
08144                           	unusedSpace World2SpritePalettes + $30, $FF
08144                           ENDIF
08144                           
08144                           ;
08144                           ; #### World 3
08144                           ;
08144                           World3BackgroundPalettes:
08144                           	; Day
08144 22 30 12 0F               	.db $22, $30, $12, $0F ; $00
08148 22 30 16 0F               	.db $22, $30, $16, $0F ; $04
0814C 22 27 17 0F               	.db $22, $27, $17, $0F ; $08
08150 22 29 1A 0F               	.db $22, $29, $1A, $0F ; $0C
08154                           	; Night (unused)
08154 0F 30 12 01               	.db $0F, $30, $12, $01 ; $10
08158 0F 30 16 02               	.db $0F, $30, $16, $02 ; $14
0815C 0F 27 17 08               	.db $0F, $27, $17, $08 ; $18
08160 0F 29 1A 04               	.db $0F, $29, $1A, $04 ; $1C
08164                           	; Underground
08164 0F 30 1C 0C               	.db $0F, $30, $1C, $0C ; $20
08168 0F 30 16 02               	.db $0F, $30, $16, $02 ; $24
0816C 0F 27 17 08               	.db $0F, $27, $17, $08 ; $28
08170 0F 26 16 06               	.db $0F, $26, $16, $06 ; $2C
08174                           	; Jar
08174 07 30 27 0F               	.db $07, $30, $27, $0F ; $30
08178 07 30 16 0F               	.db $07, $30, $16, $0F ; $34
0817C 07 27 17 0F               	.db $07, $27, $17, $0F ; $38
08180 07 31 31 0F               	.db $07, $31, $31, $0F ; $3C
08184                           	; Castle
08184 03 31 21 0F               	.db $03, $31, $21, $0F ; $40
08188 03 30 16 0F               	.db $03, $30, $16, $0F ; $44
0818C 03 3C 1C 0F               	.db $03, $3C, $1C, $0F ; $48
08190 03 2A 1A 0F               	.db $03, $2A, $1A, $0F ; $4C
08194                           	; Boss
08194 0C 30 11 0F               	.db $0C, $30, $11, $0F ; $50
08198 0C 30 16 0F               	.db $0C, $30, $16, $0F ; $54
0819C 0C 30 21 0F               	.db $0C, $30, $21, $0F ; $58
081A0 0C 30 31 0F               	.db $0C, $30, $31, $0F ; $5C
081A4                           	; Subspace
081A4 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $60
081A8 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $64
081AC 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $68
081B0 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $6C
081B4                           
081B4                           World3SpritePalettes:
081B4                           	; Overworld
081B4 FF 30 16 0F               	.db $FF, $30, $16, $0F ; $00
081B8 FF 38 10 0F               	.db $FF, $38, $10, $0F ; $04
081BC FF 30 25 0F               	.db $FF, $30, $25, $0F ; $08
081C0                           	; Underground
081C0 FF 30 16 02               	.db $FF, $30, $16, $02 ; $0C
081C4 FF 38 10 02               	.db $FF, $38, $10, $02 ; $10
081C8 FF 30 25 02               	.db $FF, $30, $25, $02 ; $14
081CC                           	; Boss
081CC FF 30 16 0F               	.db $FF, $30, $16, $0F ; $18
081D0 FF 30 10 0F               	.db $FF, $30, $10, $0F ; $1C
081D4 FF 2B 10 0F               	.db $FF, $2B, $10, $0F ; $20
081D8                           IFDEF EXPAND_TABLES
081D8                           	unusedSpace World3SpritePalettes + $30, $FF
081D8                           ENDIF
081D8                           
081D8                           ;
081D8                           ; #### World 4
081D8                           ;
081D8                           World4BackgroundPalettes:
081D8                           	; Day
081D8 23 30 12 0F               	.db $23, $30, $12, $0F ; $00
081DC 23 30 16 0F               	.db $23, $30, $16, $0F ; $04
081E0 23 2B 1B 0F               	.db $23, $2B, $1B, $0F ; $08
081E4 23 30 32 0F               	.db $23, $30, $32, $0F ; $0C
081E8                           	; Night (unused)
081E8 0F 30 12 01               	.db $0F, $30, $12, $01 ; $10
081EC 0F 30 16 02               	.db $0F, $30, $16, $02 ; $14
081F0 0F 2B 1B 0B               	.db $0F, $2B, $1B, $0B ; $18
081F4 0F 29 1A 0A               	.db $0F, $29, $1A, $0A ; $1C
081F8                           	; Underground
081F8 0F 32 12 01               	.db $0F, $32, $12, $01 ; $20
081FC 0F 30 16 02               	.db $0F, $30, $16, $02 ; $24
08200 0F 2B 1B 0B               	.db $0F, $2B, $1B, $0B ; $28
08204 0F 27 17 07               	.db $0F, $27, $17, $07 ; $2C
08208                           	; Jar
08208 07 30 27 0F               	.db $07, $30, $27, $0F ; $30
0820C 07 30 16 0F               	.db $07, $30, $16, $0F ; $34
08210 07 27 17 0F               	.db $07, $27, $17, $0F ; $38
08214 07 21 21 0F               	.db $07, $21, $21, $0F ; $3C
08218                           	; Castle
08218 03 30 12 0F               	.db $03, $30, $12, $0F ; $40
0821C 03 30 16 0F               	.db $03, $30, $16, $0F ; $44
08220 03 3C 1C 0F               	.db $03, $3C, $1C, $0F ; $48
08224 03 28 18 0F               	.db $03, $28, $18, $0F ; $4C
08228                           	; Boss
08228 0C 30 00 0F               	.db $0C, $30, $00, $0F ; $50
0822C 0C 30 16 0F               	.db $0C, $30, $16, $0F ; $54
08230 0C 30 10 0F               	.db $0C, $30, $10, $0F ; $58
08234 0C 30 30 0F               	.db $0C, $30, $30, $0F ; $5C
08238                           	; Subspace
08238 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $60
0823C 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $64
08240 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $68
08244 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $6C
08248                           
08248                           World4SpritePalettes:
08248                           	; Overworld
08248 FF 30 16 0F               	.db $FF, $30, $16, $0F ; $00
0824C FF 38 10 0F               	.db $FF, $38, $10, $0F ; $04
08250 FF 30 25 0F               	.db $FF, $30, $25, $0F ; $08
08254                           	; Underground
08254 FF 30 16 02               	.db $FF, $30, $16, $02 ; $0C
08258 FF 38 10 02               	.db $FF, $38, $10, $02 ; $10
0825C FF 30 25 02               	.db $FF, $30, $25, $02 ; $14
08260                           	; Boss
08260 FF 30 16 0F               	.db $FF, $30, $16, $0F ; $18
08264 FF 30 10 0F               	.db $FF, $30, $10, $0F ; $1C
08268 FF 27 16 0F               	.db $FF, $27, $16, $0F ; $20
0826C                           IFDEF EXPAND_TABLES
0826C                           	unusedSpace World4SpritePalettes + $30, $FF
0826C                           ENDIF
0826C                           
0826C                           ;
0826C                           ; #### World 5
0826C                           ;
0826C                           World5BackgroundPalettes:
0826C                           	; Night
0826C 0F 30 12 01               	.db $0F, $30, $12, $01 ; $00
08270 0F 30 16 01               	.db $0F, $30, $16, $01 ; $04
08274 0F 27 17 07               	.db $0F, $27, $17, $07 ; $08
08278 0F 2B 1B 0B               	.db $0F, $2B, $1B, $0B ; $0C
0827C                           	; Also night (unused)
0827C 0F 30 12 01               	.db $0F, $30, $12, $01 ; $10
08280 0F 30 16 02               	.db $0F, $30, $16, $02 ; $14
08284 0F 27 17 08               	.db $0F, $27, $17, $08 ; $18
08288 0F 29 1A 0A               	.db $0F, $29, $1A, $0A ; $1C
0828C                           	; Underground
0828C 0F 31 12 01               	.db $0F, $31, $12, $01 ; $20
08290 0F 30 16 02               	.db $0F, $30, $16, $02 ; $24
08294 0F 3C 1C 0C               	.db $0F, $3C, $1C, $0C ; $28
08298 0F 2A 1A 0A               	.db $0F, $2A, $1A, $0A ; $2C
0829C                           	; Jar/Tree
0829C 07 30 27 0F               	.db $07, $30, $27, $0F ; $30
082A0 07 30 16 0F               	.db $07, $30, $16, $0F ; $34
082A4 07 27 17 0F               	.db $07, $27, $17, $0F ; $38
082A8 07 31 01 0F               	.db $07, $31, $01, $0F ; $3C
082AC                           	; Castle
082AC 01 2A 1A 0F               	.db $01, $2A, $1A, $0F ; $40
082B0 01 30 16 0F               	.db $01, $30, $16, $0F ; $44
082B4 01 3C 1C 0F               	.db $01, $3C, $1C, $0F ; $48
082B8 01 25 15 05               	.db $01, $25, $15, $05 ; $4C
082BC                           	; Boss
082BC 0C 30 16 0F               	.db $0C, $30, $16, $0F ; $50
082C0 0C 30 16 0F               	.db $0C, $30, $16, $0F ; $54
082C4 0C 30 24 0F               	.db $0C, $30, $24, $0F ; $58
082C8 0C 30 34 0F               	.db $0C, $30, $34, $0F ; $5C
082CC                           	; Subspace
082CC 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $60
082D0 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $64
082D4 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $68
082D8 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $6C
082DC                           
082DC                           World5SpritePalettes:
082DC                           	; Overworld
082DC FF 30 16 0F               	.db $FF, $30, $16, $0F ; $00
082E0 FF 38 10 0F               	.db $FF, $38, $10, $0F ; $04
082E4 FF 30 25 0F               	.db $FF, $30, $25, $0F ; $08
082E8                           	; Underground
082E8 FF 30 16 02               	.db $FF, $30, $16, $02 ; $0C
082EC FF 38 10 02               	.db $FF, $38, $10, $02 ; $10
082F0 FF 30 25 02               	.db $FF, $30, $25, $02 ; $14
082F4                           	; Boss
082F4 FF 30 16 0F               	.db $FF, $30, $16, $0F ; $18
082F8 FF 30 16 0F               	.db $FF, $30, $16, $0F ; $1C
082FC FF 16 30 0F               	.db $FF, $16, $30, $0F ; $20
08300                           IFDEF EXPAND_TABLES
08300                           	unusedSpace World5SpritePalettes + $30, $FF
08300                           ENDIF
08300                           
08300                           ;
08300                           ; #### World 6
08300                           ;
08300                           World6BackgroundPalettes:
08300                           	; Day
08300 21 30 2A 0F               	.db $21, $30, $2A, $0F ; $00
08304 21 30 16 0F               	.db $21, $30, $16, $0F ; $04
08308 21 28 18 0F               	.db $21, $28, $18, $0F ; $08
0830C 21 17 07 0F               	.db $21, $17, $07, $0F ; $0C
08310                           	; Night
08310 0F 30 2A 01               	.db $0F, $30, $2A, $01 ; $10
08314 0F 30 16 02               	.db $0F, $30, $16, $02 ; $14
08318 0F 28 18 08               	.db $0F, $28, $18, $08 ; $18
0831C 0F 17 07 08               	.db $0F, $17, $07, $08 ; $1C
08320                           	; Underground
08320 0F 30 12 01               	.db $0F, $30, $12, $01 ; $20
08324 0F 30 16 02               	.db $0F, $30, $16, $02 ; $24
08328 0F 28 18 08               	.db $0F, $28, $18, $08 ; $28
0832C 0F 27 17 07               	.db $0F, $27, $17, $07 ; $2C
08330                           	; Jar
08330 07 30 27 0F               	.db $07, $30, $27, $0F ; $30
08334 07 30 16 0F               	.db $07, $30, $16, $0F ; $34
08338 07 28 17 0F               	.db $07, $28, $17, $0F ; $38
0833C 07 31 01 0F               	.db $07, $31, $01, $0F ; $3C
08340                           	; Castle
08340 0C 2A 1A 0F               	.db $0C, $2A, $1A, $0F ; $40
08344 0C 30 16 0F               	.db $0C, $30, $16, $0F ; $44
08348 0C 17 07 0F               	.db $0C, $17, $07, $0F ; $48
0834C 0C 25 15 0F               	.db $0C, $25, $15, $0F ; $4C
08350                           	; Boss
08350 0C 30 1B 0F               	.db $0C, $30, $1B, $0F ; $50
08354 0C 30 16 0F               	.db $0C, $30, $16, $0F ; $54
08358 0C 30 2B 0F               	.db $0C, $30, $2B, $0F ; $58
0835C 0C 30 3B 0F               	.db $0C, $30, $3B, $0F ; $5C
08360                           	; Subspace
08360 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $60
08364 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $64
08368 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $68
0836C 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $6C
08370                           
08370                           World6SpritePalettes:
08370                           	; Overworld
08370 FF 30 16 0F               	.db $FF, $30, $16, $0F ; $00
08374 FF 38 2A 0F               	.db $FF, $38, $2A, $0F ; $04
08378 FF 30 25 0F               	.db $FF, $30, $25, $0F ; $08
0837C                           	; Underground
0837C FF 30 16 02               	.db $FF, $30, $16, $02 ; $0C
08380 FF 38 2A 02               	.db $FF, $38, $2A, $02 ; $10
08384 FF 30 25 02               	.db $FF, $30, $25, $02 ; $14
08388                           	; Boss
08388 FF 30 16 0F               	.db $FF, $30, $16, $0F ; $18
0838C FF 30 10 0F               	.db $FF, $30, $10, $0F ; $1C
08390 FF 30 23 0F               	.db $FF, $30, $23, $0F ; $20
08394                           IFDEF EXPAND_TABLES
08394                           	unusedSpace World6SpritePalettes + $30, $FF
08394                           ENDIF
08394                           
08394                           ;
08394                           ; #### World 7
08394                           ;
08394                           World7BackgroundPalettes:
08394                           	; Day
08394 21 30 12 0F               	.db $21, $30, $12, $0F ; $00
08398 21 30 16 0F               	.db $21, $30, $16, $0F ; $04
0839C 21 27 17 0F               	.db $21, $27, $17, $0F ; $08
083A0 21 29 1A 0F               	.db $21, $29, $1A, $0F ; $0C
083A4                           	; Night (unused)
083A4 0F 30 12 01               	.db $0F, $30, $12, $01 ; $10
083A8 0F 30 16 02               	.db $0F, $30, $16, $02 ; $14
083AC 0F 27 17 08               	.db $0F, $27, $17, $08 ; $18
083B0 0F 29 1A 0A               	.db $0F, $29, $1A, $0A ; $1C
083B4                           	; Castle
083B4 0F 2C 1C 0C               	.db $0F, $2C, $1C, $0C ; $20
083B8 0F 30 16 02               	.db $0F, $30, $16, $02 ; $24
083BC 0F 27 17 08               	.db $0F, $27, $17, $08 ; $28
083C0 0F 2A 1A 0A               	.db $0F, $2A, $1A, $0A ; $2C
083C4                           	; Jar (unused)
083C4 07 30 16 0F               	.db $07, $30, $16, $0F ; $30
083C8 07 30 16 0F               	.db $07, $30, $16, $0F ; $34
083CC 07 27 17 0F               	.db $07, $27, $17, $0F ; $38
083D0 07 31 01 0F               	.db $07, $31, $01, $0F ; $3C
083D4                           	; Castle (unused)
083D4 0F 3C 2C 0C               	.db $0F, $3C, $2C, $0C ; $40
083D8 0F 30 16 02               	.db $0F, $30, $16, $02 ; $44
083DC 0F 28 18 08               	.db $0F, $28, $18, $08 ; $48
083E0 0F 25 15 05               	.db $0F, $25, $15, $05 ; $4C
083E4                           	; Boss
083E4 0C 30 08 0F               	.db $0C, $30, $08, $0F ; $50
083E8 0C 30 16 0F               	.db $0C, $30, $16, $0F ; $54
083EC 0C 38 18 0F               	.db $0C, $38, $18, $0F ; $58
083F0 0C 28 08 0F               	.db $0C, $28, $08, $0F ; $5C
083F4                           	; Subspace
083F4 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $60
083F8 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $64
083FC 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $68
08400 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $6C
08404                           
08404                           World7SpritePalettes:
08404                           	; Overworld
08404 FF 30 16 0F               	.db $FF, $30, $16, $0F ; $00
08408 FF 38 10 0F               	.db $FF, $38, $10, $0F ; $04
0840C FF 30 25 0F               	.db $FF, $30, $25, $0F ; $08
08410                           	; Underground
08410 FF 30 16 02               	.db $FF, $30, $16, $02 ; $0C
08414 FF 38 10 02               	.db $FF, $38, $10, $02 ; $10
08418 FF 30 25 02               	.db $FF, $30, $25, $02 ; $14
0841C                           	; Boss
0841C FF 30 16 0F               	.db $FF, $30, $16, $0F ; $18
08420 FF 30 10 0F               	.db $FF, $30, $10, $0F ; $1C
08424 FF 30 2A 0F               	.db $FF, $30, $2A, $0F ; $20
08428                           IFDEF EXPAND_TABLES
08428                           	unusedSpace World7SpritePalettes + $30, $FF
08428                           ENDIF
08428                           
08428                           ; -----
08428                           
08428                           
08428                           ;
08428                           ; ## Ground appearance tiles
08428                           ;
08428                           ; The ground setting defines a single column (or row, for vertical areas) where each row (or column)
08428                           ; is be one of four tiles. That set of four tiles is the ground appearance. Each world has its own
08428                           ; ground appearances defined, which are which are divided into horizontal and vertical sets.
08428                           ;
08428                           ; An area has its initial ground appearance set in the header, but it can be changed mid-area using
08428                           ; the `$F6` special object.
08428                           ;
08428                           
08428                           ;
08428                           ; #### Ground appearance pointers
08428                           ;
08428                           GroundTilesHorizontalLo:
08428 00                        	.db <World1GroundTilesHorizontal
08429 00                        	.db <World2GroundTilesHorizontal
0842A 00                        	.db <World3GroundTilesHorizontal
0842B 00                        	.db <World4GroundTilesHorizontal
0842C 00                        	.db <World5GroundTilesHorizontal
0842D 00                        	.db <World6GroundTilesHorizontal
0842E 00                        	.db <World7GroundTilesHorizontal
0842F                           
0842F                           GroundTilesVerticalLo:
0842F 00                        	.db <World1GroundTilesVertical
08430 00                        	.db <World2GroundTilesVertical
08431 00                        	.db <World3GroundTilesVertical
08432 00                        	.db <World4GroundTilesVertical
08433 00                        	.db <World5GroundTilesVertical
08434 00                        	.db <World6GroundTilesVertical
08435 00                        	.db <World7GroundTilesVertical
08436                           
08436                           GroundTilesHorizontalHi:
08436 00                        	.db >World1GroundTilesHorizontal
08437 00                        	.db >World2GroundTilesHorizontal
08438 00                        	.db >World3GroundTilesHorizontal
08439 00                        	.db >World4GroundTilesHorizontal
0843A 00                        	.db >World5GroundTilesHorizontal
0843B 00                        	.db >World6GroundTilesHorizontal
0843C 00                        	.db >World7GroundTilesHorizontal
0843D                           
0843D                           GroundTilesVerticalHi:
0843D 00                        	.db >World1GroundTilesVertical
0843E 00                        	.db >World2GroundTilesVertical
0843F 00                        	.db >World3GroundTilesVertical
08440 00                        	.db >World4GroundTilesVertical
08441 00                        	.db >World5GroundTilesVertical
08442 00                        	.db >World6GroundTilesVertical
08443 00                        	.db >World7GroundTilesVertical
08444                           
08444                           ;
08444                           ; #### Ground appearance tile definitions
08444                           ;
08444                           ; These are the tiles used to render the ground setting of an area.
08444                           ; Each row in a world's table corresponds to the ground type.
08444                           ;
08444                           ; You'll notice that the first entry, which correponds to the sky/background is
08444                           ; $00 instead of $40. This is skipped with a BEQ in WriteGroundSetTiles,
08444                           ; presumably as an optimization, so the value doesn't matter!
08444                           ;
08444                           World1GroundTilesHorizontal:
08444 00 99 D5 00               	.db $00, $99, $D5, $00 ; $00
08448 00 99 99 99               	.db $00, $99, $99, $99 ; $01
0844C 00 A0 A0 A0               	.db $00, $A0, $A0, $A0 ; $02
08450 00 A2 A2 A2               	.db $00, $A2, $A2, $A2 ; $03
08454 00 D6 9B 18               	.db $00, $D6, $9B, $18 ; $04
08458 00 A0 A0 99               	.db $00, $A0, $A0, $99 ; $05
0845C 00 00 00 00               	.db $00, $00, $00, $00 ; $06
08460 00 00 00 00               	.db $00, $00, $00, $00 ; $07
08464                           IFDEF EXPAND_TABLES
08464                           	unusedSpace World1GroundTilesHorizontal + $40, $00
08464                           ENDIF
08464                           
08464                           World1GroundTilesVertical:
08464 00 9D 9E C6               	.db $00, $9D, $9E, $C6 ; $00
08468 00 05 A0 00               	.db $00, $05, $A0, $00 ; $01
0846C 00 00 00 00               	.db $00, $00, $00, $00 ; $02
08470 00 00 A2 00               	.db $00, $00, $A2, $00 ; $03
08474 00 00 C2 00               	.db $00, $00, $C2, $00 ; $04
08478 00 00 A0 00               	.db $00, $00, $A0, $00 ; $05
0847C 00 93 9E C6               	.db $00, $93, $9E, $C6 ; $06
08480 00 40 9E C6               	.db $00, $40, $9E, $C6 ; $07
08484                           IFDEF EXPAND_TABLES
08484                           	unusedSpace World1GroundTilesVertical + $40, $00
08484                           ENDIF
08484                           
08484                           World2GroundTilesHorizontal:
08484 00 99 99 99               	.db $00, $99, $99, $99 ; $00
08488 00 8A 8A 8A               	.db $00, $8A, $8A, $8A ; $01
0848C 00 8B 8B 8B               	.db $00, $8B, $8B, $8B ; $02
08490 00 A0 A0 A0               	.db $00, $A0, $A0, $A0 ; $03
08494 00 A2 A2 A2               	.db $00, $A2, $A2, $A2 ; $04
08498 00 D6 9B 18               	.db $00, $D6, $9B, $18 ; $05
0849C 00 00 00 00               	.db $00, $00, $00, $00 ; $06
084A0 00 00 00 00               	.db $00, $00, $00, $00 ; $07
084A4                           IFDEF EXPAND_TABLES
084A4                           	unusedSpace World2GroundTilesHorizontal + $40, $00
084A4                           ENDIF
084A4                           
084A4                           World2GroundTilesVertical:
084A4 00 9D 9E C6               	.db $00, $9D, $9E, $C6 ; $00
084A8 00 93 A0 00               	.db $00, $93, $A0, $00 ; $01
084AC 00 40 9B 40               	.db $00, $40, $9B, $40 ; $02
084B0 00 93 9E C6               	.db $00, $93, $9E, $C6 ; $03
084B4 00 40 9E C6               	.db $00, $40, $9E, $C6 ; $04
084B8 00 00 00 00               	.db $00, $00, $00, $00 ; $05
084BC 00 00 00 00               	.db $00, $00, $00, $00 ; $06
084C0 00 00 00 00               	.db $00, $00, $00, $00 ; $07
084C4                           IFDEF EXPAND_TABLES
084C4                           	unusedSpace World2GroundTilesVertical + $40, $00
084C4                           ENDIF
084C4                           
084C4                           World3GroundTilesHorizontal:
084C4 00 99 D5 00               	.db $00, $99, $D5, $00 ; $00
084C8 00 99 99 99               	.db $00, $99, $99, $99 ; $01
084CC 00 A0 A0 A0               	.db $00, $A0, $A0, $A0 ; $02
084D0 00 A2 A2 A2               	.db $00, $A2, $A2, $A2 ; $03
084D4 00 D6 9B 18               	.db $00, $D6, $9B, $18 ; $04
084D8 00 A0 A0 99               	.db $00, $A0, $A0, $99 ; $05
084DC 00 00 00 00               	.db $00, $00, $00, $00 ; $06
084E0 00 00 00 00               	.db $00, $00, $00, $00 ; $07
084E4                           IFDEF EXPAND_TABLES
084E4                           	unusedSpace World3GroundTilesHorizontal + $40, $00
084E4                           ENDIF
084E4                           
084E4                           World3GroundTilesVertical:
084E4 00 C6 9E 9D               	.db $00, $C6, $9E, $9D ; $00
084E8 00 05 A0 00               	.db $00, $05, $A0, $00 ; $01
084EC 00 93 9E C6               	.db $00, $93, $9E, $C6 ; $02
084F0 00 00 A2 00               	.db $00, $00, $A2, $00 ; $03
084F4 00 00 C2 00               	.db $00, $00, $C2, $00 ; $04
084F8 00 00 A0 00               	.db $00, $00, $A0, $00 ; $05
084FC 00 40 9E C6               	.db $00, $40, $9E, $C6 ; $06
08500 00 06 A0 00               	.db $00, $06, $A0, $00 ; $07
08504                           IFDEF EXPAND_TABLES
08504                           	unusedSpace World3GroundTilesVertical + $40, $00
08504                           ENDIF
08504                           
08504                           World4GroundTilesHorizontal:
08504 00 99 D5 00               	.db $00, $99, $D5, $00 ; $00
08508 00 99 16 00               	.db $00, $99, $16, $00 ; $01
0850C 00 A0 A0 A0               	.db $00, $A0, $A0, $A0 ; $02
08510 00 A2 A2 A2               	.db $00, $A2, $A2, $A2 ; $03
08514 00 D6 9B 18               	.db $00, $D6, $9B, $18 ; $04
08518 00 0A 0A 08               	.db $00, $0A, $0A, $08 ; $05
0851C 00 1F 1F 1F               	.db $00, $1F, $1F, $1F ; $06
08520 00 00 00 00               	.db $00, $00, $00, $00 ; $07
08524                           IFDEF EXPAND_TABLES
08524                           	unusedSpace World4GroundTilesHorizontal + $40, $00
08524                           ENDIF
08524                           
08524                           World4GroundTilesVertical:
08524 00 C6 99 9D               	.db $00, $C6, $99, $9D ; $00
08528 00 A2 A2 A2               	.db $00, $A2, $A2, $A2 ; $01
0852C 00 9B 9B 9B               	.db $00, $9B, $9B, $9B ; $02
08530 00 A0 A0 A0               	.db $00, $A0, $A0, $A0 ; $03
08534 00 D6 D6 D6               	.db $00, $D6, $D6, $D6 ; $04
08538 00 18 18 18               	.db $00, $18, $18, $18 ; $05
0853C 00 00 00 00               	.db $00, $00, $00, $00 ; $06
08540 00 00 00 00               	.db $00, $00, $00, $00 ; $07
08544                           IFDEF EXPAND_TABLES
08544                           	unusedSpace World4GroundTilesVertical + $40, $00
08544                           ENDIF
08544                           
08544                           World5GroundTilesHorizontal:
08544 00 99 D5 40               	.db $00, $99, $D5, $40 ; $00
08548 00 99 99 99               	.db $00, $99, $99, $99 ; $01
0854C 00 A0 A0 A0               	.db $00, $A0, $A0, $A0 ; $02
08550 00 A2 A2 A2               	.db $00, $A2, $A2, $A2 ; $03
08554 00 D6 9B 18               	.db $00, $D6, $9B, $18 ; $04
08558 00 A0 A0 99               	.db $00, $A0, $A0, $99 ; $05
0855C 00 00 00 00               	.db $00, $00, $00, $00 ; $06
08560 00 00 00 00               	.db $00, $00, $00, $00 ; $07
08564                           IFDEF EXPAND_TABLES
08564                           	unusedSpace World5GroundTilesHorizontal + $40, $00
08564                           ENDIF
08564                           
08564                           World5GroundTilesVertical:
08564 00 9D 9E C6               	.db $00, $9D, $9E, $C6 ; $00
08568 00 05 A0 00               	.db $00, $05, $A0, $00 ; $01
0856C 00 40 A4 00               	.db $00, $40, $A4, $00 ; $02
08570 00 00 A2 00               	.db $00, $00, $A2, $00 ; $03
08574 00 00 C2 00               	.db $00, $00, $C2, $00 ; $04
08578 00 00 A0 00               	.db $00, $00, $A0, $00 ; $05
0857C 00 93 9E C6               	.db $00, $93, $9E, $C6 ; $06
08580 00 40 9E C6               	.db $00, $40, $9E, $C6 ; $07
08584                           IFDEF EXPAND_TABLES
08584                           	unusedSpace World5GroundTilesVertical + $40, $00
08584                           ENDIF
08584                           
08584                           World6GroundTilesHorizontal:
08584 00 99 99 99               	.db $00, $99, $99, $99 ; $00
08588 00 8A 8A 8A               	.db $00, $8A, $8A, $8A ; $01
0858C 00 8B 8B 8B               	.db $00, $8B, $8B, $8B ; $02
08590 00 A0 A0 A0               	.db $00, $A0, $A0, $A0 ; $03
08594 00 A2 A2 A2               	.db $00, $A2, $A2, $A2 ; $04
08598 00 D6 9B 18               	.db $00, $D6, $9B, $18 ; $05
0859C 00 00 00 00               	.db $00, $00, $00, $00 ; $06
085A0 00 00 00 00               	.db $00, $00, $00, $00 ; $07
085A4                           IFDEF EXPAND_TABLES
085A4                           	unusedSpace World6GroundTilesHorizontal + $40, $00
085A4                           ENDIF
085A4                           
085A4                           World6GroundTilesVertical:
085A4 00 9D 9E C6               	.db $00, $9D, $9E, $C6 ; $00
085A8 00 93 A0 00               	.db $00, $93, $A0, $00 ; $01
085AC 00 40 18 40               	.db $00, $40, $18, $40 ; $02
085B0 00 93 9E C6               	.db $00, $93, $9E, $C6 ; $03
085B4 00 40 9E C6               	.db $00, $40, $9E, $C6 ; $04
085B8 00 00 00 00               	.db $00, $00, $00, $00 ; $05
085BC 00 00 00 00               	.db $00, $00, $00, $00 ; $06
085C0 00 00 00 00               	.db $00, $00, $00, $00 ; $07
085C4                           IFDEF EXPAND_TABLES
085C4                           	unusedSpace World6GroundTilesVertical + $40, $00
085C4                           ENDIF
085C4                           
085C4                           World7GroundTilesHorizontal:
085C4 00 9C 9C 9C               	.db $00, $9C, $9C, $9C ; $00
085C8 00 D7 9C 19               	.db $00, $D7, $9C, $19 ; $01
085CC 00 00 00 00               	.db $00, $00, $00, $00 ; $02
085D0 00 00 00 00               	.db $00, $00, $00, $00 ; $03
085D4 00 00 00 00               	.db $00, $00, $00, $00 ; $04
085D8 00 00 00 00               	.db $00, $00, $00, $00 ; $05
085DC 00 00 00 00               	.db $00, $00, $00, $00 ; $06
085E0 00 00 00 00               	.db $00, $00, $00, $00 ; $07
085E4                           IFDEF EXPAND_TABLES
085E4                           	unusedSpace World7GroundTilesHorizontal + $40, $00
085E4                           ENDIF
085E4                           
085E4                           World7GroundTilesVertical:
085E4 00 9C 9C 9C               	.db $00, $9C, $9C, $9C ; $00
085E8 00 05 A0 00               	.db $00, $05, $A0, $00 ; $01
085EC 00 00 00 00               	.db $00, $00, $00, $00 ; $02
085F0 00 00 9C 00               	.db $00, $00, $9C, $00 ; $03
085F4 00 00 C2 00               	.db $00, $00, $C2, $00 ; $04
085F8 00 00 A0 00               	.db $00, $00, $A0, $00 ; $05
085FC 00 00 00 00               	.db $00, $00, $00, $00 ; $06
08600 00 00 00 00               	.db $00, $00, $00, $00 ; $07
08604                           IFDEF EXPAND_TABLES
08604                           	unusedSpace World7GroundTilesVertical + $40, $00
08604                           ENDIF
08604                           
08604                           ; -----
08604                           
08604                           
08604                           ;
08604                           ; ## Tile quads (unused)
08604                           ;
08604                           ; These appear to be duplicates of the tile quads from bank F.
08604                           ;
08604                           UnusedTileQuadPointersLo:
08604 00                        	.db <UnusedTileQuads1
08605 00                        	.db <UnusedTileQuads2
08606 00                        	.db <UnusedTileQuads3
08607 00                        	.db <UnusedTileQuads4
08608                           
08608                           UnusedTileQuadPointersHi:
08608 00                        	.db >UnusedTileQuads1
08609 00                        	.db >UnusedTileQuads2
0860A 00                        	.db >UnusedTileQuads3
0860B 00                        	.db >UnusedTileQuads4
0860C                           
0860C                           UnusedTileQuads1:
0860C FE FE FE FE               	.db $FE,$FE,$FE,$FE ; $00
08610 B4 B6 B5 B7               	.db $B4,$B6,$B5,$B7 ; $04
08614 B8 FA B9 FA               	.db $B8,$FA,$B9,$FA ; $08
08618 FA FA B2 B3               	.db $FA,$FA,$B2,$B3 ; $0C
0861C BE BE BF BF               	.db $BE,$BE,$BF,$BF ; $10
08620 BF BF BF BF               	.db $BF,$BF,$BF,$BF ; $14
08624 4A 4A 4B 4B               	.db $4A,$4A,$4B,$4B ; $18
08628 5E 5F 5E 5F               	.db $5E,$5F,$5E,$5F ; $1C
0862C E8 E8 A9 A9               	.db $E8,$E8,$A9,$A9 ; $20
08630 46 FC 46 FC               	.db $46,$FC,$46,$FC ; $24
08634 A9 A9 A9 A9               	.db $A9,$A9,$A9,$A9 ; $28
08638 FC FC FC FC               	.db $FC,$FC,$FC,$FC ; $2C
0863C E9 E9 A9 A9               	.db $E9,$E9,$A9,$A9 ; $30
08640 FC 48 FC 48               	.db $FC,$48,$FC,$48 ; $34
08644 11 11 11 11               	.db $11,$11,$11,$11 ; $38
08648 22 22 22 22               	.db $22,$22,$22,$22 ; $3C
0864C 33 33 33 33               	.db $33,$33,$33,$33 ; $40
08650 E8 EB A9 A9               	.db $E8,$EB,$A9,$A9 ; $44
08654 74 76 75 77               	.db $74,$76,$75,$77 ; $48
08658 98 9A 99 9B               	.db $98,$9A,$99,$9B ; $4C
0865C 9C 9A 9D 9B               	.db $9C,$9A,$9D,$9B ; $50
08660 9C 9E 9B 9F               	.db $9C,$9E,$9B,$9F ; $54
08664 58 5A 59 5B               	.db $58,$5A,$59,$5B ; $58
08668 5E 5F 5E 5F               	.db $5E,$5F,$5E,$5F ; $5C
0866C 8E 8F 8F 8E               	.db $8E,$8F,$8F,$8E ; $60
08670 72 73 73 72               	.db $72,$73,$73,$72 ; $64
08674 A6 A6 A7 A7               	.db $A6,$A6,$A7,$A7 ; $68
08678 92 93 93 92               	.db $92,$93,$93,$92 ; $6C
0867C 74 76 75 77               	.db $74,$76,$75,$77 ; $70
08680 70 72 71 73               	.db $70,$72,$71,$73 ; $74
08684 71 73 71 73               	.db $71,$73,$71,$73 ; $78
08688 24 26 25 27               	.db $24,$26,$25,$27 ; $7C
0868C 32 34 33 35               	.db $32,$34,$33,$35 ; $80
08690 33 35 33 35               	.db $33,$35,$33,$35 ; $84
08694 24 26 25 27               	.db $24,$26,$25,$27 ; $88
08698                           
08698                           UnusedTileQuads2:
08698 FA FA FA FA               	.db $FA,$FA,$FA,$FA ; $00
0869C FA FA FA FA               	.db $FA,$FA,$FA,$FA ; $04
086A0 FA FA FA FA               	.db $FA,$FA,$FA,$FA ; $08
086A4 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $0C
086A8 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $10
086AC FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $14
086B0 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $18
086B4 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $1C
086B8 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $20
086BC FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $24
086C0 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $28
086C4 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $2C
086C8 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $30
086CC FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $34
086D0 A0 A2 A1 A3               	.db $A0,$A2,$A1,$A3 ; $38
086D4 80 82 81 83               	.db $80,$82,$81,$83 ; $3C
086D8 F4 86 F5 87               	.db $F4,$86,$F5,$87 ; $40
086DC 84 86 85 87               	.db $84,$86,$85,$87 ; $44
086E0 FC FC FC FC               	.db $FC,$FC,$FC,$FC ; $48
086E4 AD FB AC AD               	.db $AD,$FB,$AC,$AD ; $4C
086E8 AC AC AC AC               	.db $AC,$AC,$AC,$AC ; $50
086EC FB 3B 3B AC               	.db $FB,$3B,$3B,$AC ; $54
086F0 FC FC FC FC               	.db $FC,$FC,$FC,$FC ; $58
086F4 F4 86 F5 87               	.db $F4,$86,$F5,$87 ; $5C
086F8 FB 49 49 FB               	.db $FB,$49,$49,$FB ; $60
086FC FE FE FE FE               	.db $FE,$FE,$FE,$FE ; $64
08700 FE FE 6D FE               	.db $FE,$FE,$6D,$FE ; $68
08704 3C 3E 3D 3F               	.db $3C,$3E,$3D,$3F ; $6C
08708 58 FD 59 5A               	.db $58,$FD,$59,$5A ; $70
0870C 5B 5A FD FD               	.db $5B,$5A,$FD,$FD ; $74
08710 5B 5C FD 5D               	.db $5B,$5C,$FD,$5D ; $78
08714 FD FD 5B 5A               	.db $FD,$FD,$5B,$5A ; $7C
08718 6C FE FE FE               	.db $6C,$FE,$FE,$FE ; $80
0871C FE FE FE FE               	.db $FE,$FE,$FE,$FE ; $84
08720 FE 6E FE 6F               	.db $FE,$6E,$FE,$6F ; $88
08724 20 22 21 23               	.db $20,$22,$21,$23 ; $8C
08728 6E 6F 70 71               	.db $6E,$6F,$70,$71 ; $90
0872C 57 57 FB FB               	.db $57,$57,$FB,$FB ; $94
08730 57 57 FE FE               	.db $57,$57,$FE,$FE ; $98
08734 D3 D3 FB FB               	.db $D3,$D3,$FB,$FB ; $9C
08738 D2 D2 FB FB               	.db $D2,$D2,$FB,$FB ; $A0
0873C 7C 7E 7D 7F               	.db $7C,$7E,$7D,$7F ; $A4
08740 CA CC CB CD               	.db $CA,$CC,$CB,$CD ; $A8
08744 CA CC CB CD               	.db $CA,$CC,$CB,$CD ; $AC
08748 C0 C2 C1 C3               	.db $C0,$C2,$C1,$C3 ; $B0
0874C 2C 2E 2D 2F               	.db $2C,$2E,$2D,$2F ; $B4
08750 8E 8F 8F 8E               	.db $8E,$8F,$8F,$8E ; $B8
08754 88 8A 89 8B               	.db $88,$8A,$89,$8B ; $BC
08758 89 8B 89 8B               	.db $89,$8B,$89,$8B ; $C0
0875C 89 8B 8C 8D               	.db $89,$8B,$8C,$8D ; $C4
08760 88 8A 8C 8D               	.db $88,$8A,$8C,$8D ; $C8
08764 88 8A 89 8B               	.db $88,$8A,$89,$8B ; $CC
08768 88 8A 89 8B               	.db $88,$8A,$89,$8B ; $D0
0876C 6A 6C 6B 6D               	.db $6A,$6C,$6B,$6D ; $D4
08770 6C 6C 6D 6D               	.db $6C,$6C,$6D,$6D ; $D8
08774 6C 6E 6D 6F               	.db $6C,$6E,$6D,$6F ; $DC
08778 6C 54 6D 55               	.db $6C,$54,$6D,$55 ; $E0
0877C 32 34 33 35               	.db $32,$34,$33,$35 ; $E4
08780 33 35 33 35               	.db $33,$35,$33,$35 ; $E8
08784                           
08784                           UnusedTileQuads3:
08784 94 95 94 95               	.db $94,$95,$94,$95 ; $00
08788 96 97 96 97               	.db $96,$97,$96,$97 ; $04
0878C 48 49 48 49               	.db $48,$49,$48,$49 ; $08
08790 FE FE FE FE               	.db $FE,$FE,$FE,$FE ; $0C
08794 FB 32 32 33               	.db $FB,$32,$32,$33 ; $10
08798 33 33 33 33               	.db $33,$33,$33,$33 ; $14
0879C FD FD FD FD               	.db $FD,$FD,$FD,$FD ; $18
087A0 34 FB FD 34               	.db $34,$FB,$FD,$34 ; $1C
087A4 FB 30 FB FB               	.db $FB,$30,$FB,$FB ; $20
087A8 FB FB 31 FB               	.db $FB,$FB,$31,$FB ; $24
087AC D0 D0 D0 D0               	.db $D0,$D0,$D0,$D0 ; $28
087B0 D1 D1 D1 D1               	.db $D1,$D1,$D1,$D1 ; $2C
087B4 64 66 65 67               	.db $64,$66,$65,$67 ; $30
087B8 68 6A 69 6B               	.db $68,$6A,$69,$6B ; $34
087BC FA 6C FA 6C               	.db $FA,$6C,$FA,$6C ; $38
087C0 6D FA 6D FA               	.db $6D,$FA,$6D,$FA ; $3C
087C4 92 93 93 92               	.db $92,$93,$93,$92 ; $40
087C8 AE AF AE AF               	.db $AE,$AF,$AE,$AF ; $44
087CC 78 7A 79 7B               	.db $78,$7A,$79,$7B ; $48
087D0 A8 A8 AF AE               	.db $A8,$A8,$AF,$AE ; $4C
087D4 94 95 94 95               	.db $94,$95,$94,$95 ; $50
087D8 96 97 96 97               	.db $96,$97,$96,$97 ; $54
087DC 22 24 23 25               	.db $22,$24,$23,$25 ; $58
087E0 92 93 93 92               	.db $92,$93,$93,$92 ; $5C
087E4 50 51 50 51               	.db $50,$51,$50,$51 ; $60
087E8 AE AF AE AF               	.db $AE,$AF,$AE,$AF ; $64
087EC 50 51 50 51               	.db $50,$51,$50,$51 ; $68
087F0 8E 8F 8F 8E               	.db $8E,$8F,$8F,$8E ; $6C
087F4 72 73 73 72               	.db $72,$73,$73,$72 ; $70
087F8 50 52 51 53               	.db $50,$52,$51,$53 ; $74
087FC FD FD FD FD               	.db $FD,$FD,$FD,$FD ; $78
08800 FB 36 36 4F               	.db $FB,$36,$36,$4F ; $7C
08804 4F 4E 4E 4F               	.db $4F,$4E,$4E,$4F ; $80
08808 4E 4F 4F 4E               	.db $4E,$4F,$4F,$4E ; $84
0880C 92 93 93 92               	.db $92,$93,$93,$92 ; $88
08810 8E 8F 8F 8E               	.db $8E,$8F,$8F,$8E ; $8C
08814 44 45 45 44               	.db $44,$45,$45,$44 ; $90
08818 4F 37 4E FE               	.db $4F,$37,$4E,$FE ; $94
0881C 4F 3A 4E FE               	.db $4F,$3A,$4E,$FE ; $98
08820 4F 4E 37 38               	.db $4F,$4E,$37,$38 ; $9C
08824 4A 4B FE FE               	.db $4A,$4B,$FE,$FE ; $A0
08828 72 73 4A 4B               	.db $72,$73,$4A,$4B ; $A4
0882C 40 42 41 43               	.db $40,$42,$41,$43 ; $A8
08830 41 43 41 43               	.db $41,$43,$41,$43 ; $AC
08834                           
08834                           UnusedTileQuads4:
08834 40 42 41 43               	.db $40,$42,$41,$43 ; $00
08838 40 42 41 43               	.db $40,$42,$41,$43 ; $04
0883C BA BC BB BD               	.db $BA,$BC,$BB,$BD ; $08
08840 BA BC 90 91               	.db $BA,$BC,$90,$91 ; $0C
08844 FA FA FA FA               	.db $FA,$FA,$FA,$FA ; $10
08848 FA FA FA FA               	.db $FA,$FA,$FA,$FA ; $14
0884C FD FD FD FD               	.db $FD,$FD,$FD,$FD ; $18
08850 61 63 61 63               	.db $61,$63,$61,$63 ; $1C
08854 65 63 65 63               	.db $65,$63,$65,$63 ; $20
08858 65 67 65 67               	.db $65,$67,$65,$67 ; $24
0885C 60 62 61 63               	.db $60,$62,$61,$63 ; $28
08860 32 34 33 35               	.db $32,$34,$33,$35 ; $2C
08864 64 62 65 63               	.db $64,$62,$65,$63 ; $30
08868 36 34 37 35               	.db $36,$34,$37,$35 ; $34
0886C 64 66 65 67               	.db $64,$66,$65,$67 ; $38
08870 36 38 37 39               	.db $36,$38,$37,$39 ; $3C
08874 68 62 61 63               	.db $68,$62,$61,$63 ; $40
08878 64 69 65 67               	.db $64,$69,$65,$67 ; $44
0887C 46 62 61 63               	.db $46,$62,$61,$63 ; $48
08880 64 47 65 67               	.db $64,$47,$65,$67 ; $4C
08884 BA BC BB BD               	.db $BA,$BC,$BB,$BD ; $50
08888 70 72 71 73               	.db $70,$72,$71,$73 ; $54
0888C 8E 8F 8F 8E               	.db $8E,$8F,$8F,$8E ; $58
08890 72 73 73 72               	.db $72,$73,$73,$72 ; $5C
08894 44 45 45 44               	.db $44,$45,$45,$44 ; $60
08898                           
08898                           ; -----
08898                           
08898                           
08898                           ;
08898                           ; ## Object creation routine selection
08898                           ;
08898                           ; Object types are grouped into `$10` value ranges, where the upper nybble determines which routine
08898                           ; or jump table to use.
08898                           ;
08898                           
08898                           ;
08898                           ; ### Length-based object table
08898                           ;
08898                           ; The `$3X-$FX` range is used for objects that specify a type in the upper nybble and length in the
08898                           ; lower nybble, including runs of horizontal or vertical blocks, platforms, and waterfalls.
08898                           ;
08898                           CreateObjects_30thruF0:
08898 20 00 00                  	JSR JumpToTableAfterJump
0889B                           
0889B 00 00                     	.dw CreateObject_HorizontalBlocks ; $3X
0889D 00 00                     	.dw CreateObject_HorizontalBlocks ; $4X
0889F 00 00                     	.dw CreateObject_HorizontalBlocks ; $5X
088A1 00 00                     	.dw CreateObject_HorizontalBlocks ; $6X
088A3 00 00                     	.dw CreateObject_HorizontalBlocks ; $7X
088A5 00 00                     	.dw CreateObject_VerticalBlocks ; $8X
088A7 00 00                     	.dw CreateObject_VerticalBlocks ; $9X
088A9 00 00                     	.dw CreateObject_VerticalBlocks ; $AX
088AB                           IFNDEF ENABLE_LEVEL_OBJECT_MODE
088AB 00 00                     	.dw CreateObject_WhaleOrDrawBridgeChain ; $BX
088AD 00 00                     	.dw CreateObject_JumpthroughPlatform ; $CX
088AF                           ELSE
088AF                           	.dw CreateObject_Platform_BX ; $BX
088AF                           	.dw CreateObject_Platform_CX ; $CX
088AF                           ENDIF
088AF 00 00                     	.dw CreateObject_HorizontalPlatform ; $DX
088B1 00 00                     	.dw CreateObject_HorizontalPlatform ; $EX
088B3 00 00                     	.dw CreateObject_WaterfallOrFrozenRocks ; $FX
088B5                           
088B5                           ;
088B5                           ; ### Single object tables
088B5                           ;
088B5                           ; The `$0X-$2X` range is used for various single-block and one-off objects, such a mushroom blocks,
088B5                           ; standable vines, doors, and vertical objects that extend all the way to the ground.
088B5                           ;
088B5                           CreateObjects_00:
088B5 20 00 00                  	JSR JumpToTableAfterJump
088B8                           
088B8 00 00                     	.dw CreateObject_SingleBlock ; $00
088BA 00 00                     	.dw CreateObject_SingleBlock ; $01
088BC 00 00                     	.dw CreateObject_SingleBlock ; $02
088BE 00 00                     	.dw CreateObject_SingleBlock ; $03
088C0 00 00                     	.dw CreateObject_SingleBlock ; $04
088C2                           IFNDEF LEVEL_ENGINE_UPGRADES
088C2 00 00                     	.dw CreateObject_SingleBlock ; $05
088C4                           ELSE
088C4                           	.dw CreateObject_StandableAutomatic ; $05
088C4                           ENDIF
088C4 00 00                     	.dw CreateObject_Vase ; $06
088C6 00 00                     	.dw CreateObject_Vase ; $07
088C8 00 00                     	.dw CreateObject_Vase ; $08
088CA 00 00                     	.dw CreateObject_Door ; $09
088CC 00 00                     	.dw CreateObject_Door ; $0A
088CE 00 00                     	.dw CreateObject_Door ; $0B
088D0 00 00                     	.dw CreateObject_Vine ; $0C
088D2 00 00                     	.dw CreateObject_Vine ; $0D
088D4 00 00                     	.dw CreateObject_StarBackground ; $0E
088D6 00 00                     	.dw CreateObject_Pillar ; $0F
088D8                           
088D8                           CreateObjects_10:
088D8 AD 0E 05                  	LDA byte_RAM_50E
088DB 20 00 00                  	JSR JumpToTableAfterJump
088DE                           
088DE 00 00                     	.dw CreateObject_BigCloud ; $10
088E0 00 00                     	.dw CreateObject_SmallCloud ; $11
088E2 00 00                     	.dw CreateObject_VineBottom ; $12
088E4 00 00                     	.dw CreateObject_LightEntranceRight ; $13
088E6 00 00                     	.dw CreateObject_LightEntranceLeft ; $14
088E8 00 00                     	.dw CreateObject_Tall ; $15
088EA 00 00                     	.dw CreateObject_Tall ; $16
088EC 00 00                     	.dw CreateObject_Pyramid ; $17
088EE 00 00                     	.dw CreateObject_Wall ; $18
088F0 00 00                     	.dw CreateObject_Wall ; $19
088F2 00 00                     	.dw CreateObject_Horn ; $1A
088F4 00 00                     	.dw CreateObject_DrawBridgeChain ; $1B
088F6 00 00                     	.dw CreateObject_Door ; $1C
088F8 00 00                     	.dw CreateObject_Door ; $1D
088FA 00 00                     	.dw CreateObject_RockWallEntrance ; $1E
088FC 00 00                     	.dw CreateObject_TreeBackground ; $1F
088FE                           
088FE                           CreateObjects_20:
088FE 4C 00 00                  	JMP CreateObject_SingleObject
08901                           
08901                           
08901                           ;
08901                           ; ## World object tiles
08901                           ;
08901                           ; The repeating blocks in the `$3X-$AX` range are specified per world in these
08901                           ; lookup tables. Each world has 4 values for each object type, which are
08901                           ; selected using byte 3 of the area header.
08901                           ;
08901                           ; `$3X-$9X` is specified using `%......XX` in byte 3 of the header.
08901                           ; `$AX` (ladder/chain) is specified using `%....XX..` in byte 3 of the header.
08901                           ;
08901                           
08901                           WorldObjectTilePointersLo:
08901 00                        	.db <World1ObjectTiles
08902 00                        	.db <World2ObjectTiles
08903 00                        	.db <World3ObjectTiles
08904 00                        	.db <World4ObjectTiles
08905 00                        	.db <World5ObjectTiles
08906 00                        	.db <World6ObjectTiles
08907 00                        	.db <World7ObjectTiles
08908                           
08908                           WorldObjectTilePointersHi:
08908 00                        	.db >World1ObjectTiles
08909 00                        	.db >World2ObjectTiles
0890A 00                        	.db >World3ObjectTiles
0890B 00                        	.db >World4ObjectTiles
0890C 00                        	.db >World5ObjectTiles
0890D 00                        	.db >World6ObjectTiles
0890E 00                        	.db >World7ObjectTiles
0890F                           
0890F                           World1ObjectTiles:
0890F 97 92 12 12               	.db $97, $92, $12, $12 ; 3X (horizontal jump-through block)
08913 1C 99 1C 1C               	.db $1C, $99, $1C, $1C ; 4X (horizontal solid block)
08917 45 45 45 45               	.db $45, $45, $45, $45 ; 5X (small veggie grass)
0891B 65 65 65 65               	.db $65, $65, $65, $65 ; 6X (bridge)
0891F 1A 1A 1A 1A               	.db $1A, $1A, $1A, $1A ; 7X (spikes)
08923 A0 00 9D A2               	.db $A0, $00, $9D, $A2 ; 8X (vertical wall, eg. rock, bombable)
08927 A0 A0 A0 A0               	.db $A0, $A0, $A0, $A0 ; 9X (vertical wall, eg. rock with angle)
0892B 80 07 81 80               	.db $80, $07, $81, $80 ; AX (ladder, chain)
0892F 81 81 81 81               	.db $81, $81, $81, $81 ; AX over background (ladder with shadow)
08933                           
08933                           World2ObjectTiles:
08933 96 92 93 12               	.db $96, $92, $93, $12 ; 3X (horizontal jump-through block)
08937 1C 1C 1C 1C               	.db $1C, $1C, $1C, $1C ; 4X (horizontal solid block)
0893B 45 45 45 45               	.db $45, $45, $45, $45 ; 5X (small veggie grass)
0893F 65 65 65 65               	.db $65, $65, $65, $65 ; 6X (bridge)
08943 1A 1A 1A 1A               	.db $1A, $1A, $1A, $1A ; 7X (spikes)
08947 A0 40 9D 18               	.db $A0, $40, $9D, $18 ; 8X (vertical wall, eg. rock, bombable)
0894B A0 A0 A0 A0               	.db $A0, $A0, $A0, $A0 ; 9X (vertical wall, eg. rock with angle)
0894F 80 07 81 80               	.db $80, $07, $81, $80 ; AX (ladder, chain)
08953 81 81 81 81               	.db $81, $81, $81, $81 ; AX over background (ladder with shadow)
08957                           
08957                           World3ObjectTiles:
08957 97 92 12 12               	.db $97, $92, $12, $12 ; 3X (horizontal jump-through block)
0895B 1C 99 A0 1C               	.db $1C, $99, $A0, $1C ; 4X (horizontal solid block)
0895F 45 45 45 45               	.db $45, $45, $45, $45 ; 5X (small veggie grass)
08963 65 65 65 65               	.db $65, $65, $65, $65 ; 6X (bridge)
08967 1A 1A 1A 1A               	.db $1A, $1A, $1A, $1A ; 7X (spikes)
0896B A0 00 9D A2               	.db $A0, $00, $9D, $A2 ; 8X (vertical wall, eg. rock, bombable)
0896F A0 A0 A0 A0               	.db $A0, $A0, $A0, $A0 ; 9X (vertical wall, eg. rock with angle)
08973 80 07 81 80               	.db $80, $07, $81, $80 ; AX (ladder, chain)
08977 81 81 81 81               	.db $81, $81, $81, $81 ; AX over background (ladder with shadow)
0897B                           
0897B                           World4ObjectTiles:
0897B 16 92 16 12               	.db $16, $92, $16, $12 ; 3X (horizontal jump-through block)
0897F 1C 99 A2 18               	.db $1C, $99, $A2, $18 ; 4X (horizontal solid block)
08983 45 45 45 45               	.db $45, $45, $45, $45 ; 5X (small veggie grass)
08987 65 65 65 65               	.db $65, $65, $65, $65 ; 6X (bridge)
0898B 1A 1A 1A 1A               	.db $1A, $1A, $1A, $1A ; 7X (spikes)
0898F A0 1F 9D 18               	.db $A0, $1F, $9D, $18 ; 8X (vertical wall, eg. rock, bombable)
08993 A0 A0 A0 A0               	.db $A0, $A0, $A0, $A0 ; 9X (vertical wall, eg. rock with angle)
08997 80 07 81 80               	.db $80, $07, $81, $80 ; AX (ladder, chain)
0899B 81 81 81 81               	.db $81, $81, $81, $81 ; AX over background (ladder with shadow)
0899F                           
0899F                           World5ObjectTiles:
0899F 97 92 12 12               	.db $97, $92, $12, $12 ; 3X (horizontal jump-through block)
089A3 1C 99 1C 1C               	.db $1C, $99, $1C, $1C ; 4X (horizontal solid block)
089A7 45 45 45 45               	.db $45, $45, $45, $45 ; 5X (small veggie grass)
089AB 65 65 65 65               	.db $65, $65, $65, $65 ; 6X (bridge)
089AF 1A 1A 1A 1A               	.db $1A, $1A, $1A, $1A ; 7X (spikes)
089B3 A0 A4 9D 18               	.db $A0, $A4, $9D, $18 ; 8X (vertical wall, eg. rock, bombable)
089B7 A0 A0 A0 A0               	.db $A0, $A0, $A0, $A0 ; 9X (vertical wall, eg. rock with angle)
089BB 80 07 81 80               	.db $80, $07, $81, $80 ; AX (ladder, chain)
089BF 81 81 81 81               	.db $81, $81, $81, $81 ; AX over background (ladder with shadow)
089C3                           
089C3                           World6ObjectTiles:
089C3 96 92 93 12               	.db $96, $92, $93, $12 ; 3X (horizontal jump-through block)
089C7 1C 1C 1C 1C               	.db $1C, $1C, $1C, $1C ; 4X (horizontal solid block)
089CB 45 45 45 45               	.db $45, $45, $45, $45 ; 5X (small veggie grass)
089CF 65 65 65 65               	.db $65, $65, $65, $65 ; 6X (bridge)
089D3 1A 1A 1A 1A               	.db $1A, $1A, $1A, $1A ; 7X (spikes)
089D7 A0 40 9D 18               	.db $A0, $40, $9D, $18 ; 8X (vertical wall, eg. rock, bombable)
089DB A0 A0 A0 A0               	.db $A0, $A0, $A0, $A0 ; 9X (vertical wall, eg. rock with angle)
089DF 80 07 81 80               	.db $80, $07, $81, $80 ; AX (ladder, chain)
089E3 81 81 81 81               	.db $81, $81, $81, $81 ; AX over background (ladder with shadow)
089E7                           
089E7                           World7ObjectTiles:
089E7 12 68 12 9D               	.db $12, $68, $12, $9D ; 3X (horizontal jump-through block)
089EB 9C 67 64 69               	.db $9C, $67, $64, $69 ; 4X (horizontal solid block)
089EF 45 45 45 45               	.db $45, $45, $45, $45 ; 5X (small veggie grass)
089F3 65 65 65 65               	.db $65, $65, $65, $65 ; 6X (bridge)
089F7 1A 1A 1A 1A               	.db $1A, $1A, $1A, $1A ; 7X (spikes)
089FB 9C 9C 9C 9C               	.db $9C, $9C, $9C, $9C ; 8X (vertical wall, eg. rock, bombable)
089FF A0 A0 A0 A0               	.db $A0, $A0, $A0, $A0 ; 9X (vertical wall, eg. rock with angle)
08A03 80 07 81 80               	.db $80, $07, $81, $80 ; AX (ladder, chain)
08A07 81 81 81 81               	.db $81, $81, $81, $81 ; AX over background (ladder with shadow)
08A0B                           
08A0B                           
08A0B                           ;
08A0B                           ; ## Object creation routines
08A0B                           ;
08A0B                           ; These routines are responsible for turning an object in the level data into a set of tiles that
08A0B                           ; are applied to the raw tile buffer.
08A0B                           ;
08A0B                           ; Some are specific one-offs to draw a particular object, where as otherws are generic routines,
08A0B                           ; such as drawing an _n_-tile row or column of tile _x_. Many fall somewhere in-between.
08A0B                           ;
08A0B                           
08A0B                           IFDEF LEVEL_ENGINE_UPGRADES
08A0B                           ;
08A0B                           ; #### Automatic climbable tile generation
08A0B                           ;
08A0B                           ClimbableTileSearch:
08A0B                           	.db BackgroundTile_LadderShadow
08A0B                           	.db BackgroundTile_Ladder
08A0B                           	.db BackgroundTile_Chain
08A0B                           	.db BackgroundTile_Vine
08A0B                           
08A0B                           ClimbableTilePlatform:
08A0B                           	.db BackgroundTile_LadderStandableShadow
08A0B                           	.db BackgroundTile_LadderStandable
08A0B                           	.db BackgroundTile_ChainStandable
08A0B                           	.db BackgroundTile_VineStandable
08A0B                           
08A0B                           
08A0B                           ;
08A0B                           ; Find the corresponding climbable tile
08A0B                           ;
08A0B                           ; ##### Input
08A0B                           ; - `A`: search tile
08A0B                           ;
08A0B                           ; ##### Output
08A0B                           ; - `A`: replace tile
08A0B                           ; - `C`: set if a match was found
08A0B                           ;
08A0B                           FindClimableTile:
08A0B                           	STX byte_RAM_7
08A0B                           	LDX #(ClimbableTilePlatform - ClimbableTileSearch - 1)
08A0B                           
08A0B                           FindClimableTile_Loop:
08A0B                           	CMP ClimbableTileSearch, X
08A0B                           	BEQ FindClimableTile_LoadReplacement
08A0B                           
08A0B                           	DEX
08A0B                           	BPL FindClimableTile_Loop
08A0B                           
08A0B                           	LDX byte_RAM_7
08A0B                           	CLC
08A0B                           	RTS
08A0B                           
08A0B                           FindClimableTile_LoadReplacement:
08A0B                           	LDA ClimbableTilePlatform, X
08A0B                           	LDX byte_RAM_7
08A0B                           	RTS
08A0B                           
08A0B                           ;
08A0B                           ; Creates a climbable tile that you can stand on based on ObjectTypeAXthruFX
08A0B                           ;
08A0B                           ; ##### Output
08A0B                           ; - `A`: tile that was written
08A0B                           ;
08A0B                           CreateObject_StandableObjectType:
08A0B                           	LDA ObjectTypeAXthruFX
08A0B                           	BEQ CreateObject_StandableObjectType_TableOffset
08A0B                           
08A0B                           	; Offset for shadow
08A0B                           	CLC
08A0B                           	ADC #$04
08A0B                           
08A0B                           CreateObject_StandableObjectType_TableOffset:
08A0B                           	; Offset to ladder/chain object definition
08A0B                           	ADC #$1C
08A0B                           	TAX
08A0B                           
08A0B                           	LDY byte_RAM_E7
08A0B                           	STX byte_RAM_7
08A0B                           	STY byte_RAM_8
08A0B                           	LDX CurrentWorldTileset
08A0B                           	LDA WorldObjectTilePointersLo, X
08A0B                           	STA byte_RAM_C
08A0B                           	LDA WorldObjectTilePointersHi, X
08A0B                           	STA byte_RAM_D
08A0B                           	LDY byte_RAM_7
08A0B                           	LDA (byte_RAM_C), Y
08A0B                           	LDY byte_RAM_8
08A0B                           	LDX byte_RAM_7
08A0B                           
08A0B                           	JSR FindClimableTile
08A0B                           
08A0B                           	STA (byte_RAM_1), Y
08A0B                           	RTS
08A0B                           
08A0B                           ;
08A0B                           ; Creates a climbable tile that you can stand on based on the based on the tile underneath.
08A0B                           ;
08A0B                           ; ##### Output
08A0B                           ; - `A`: tile that was written
08A0B                           ;
08A0B                           CreateObject_StandableAutomatic:
08A0B                           	LDY byte_RAM_E7
08A0B                           	LDA (byte_RAM_1), Y
08A0B                           
08A0B                           	JSR FindClimableTile
08A0B                           	BCC CreateObject_StandableObjectType
08A0B                           
08A0B                           	STA (byte_RAM_1), Y
08A0B                           	RTS
08A0B                           ENDIF
08A0B                           
08A0B                           
08A0B                           ;
08A0B                           ; Places a tile using the world-specific tile lookup table.
08A0B                           ;
08A0B                           ; ##### Input
08A0B                           ; - `Y`: destination tile
08A0B                           ; - `byte_RAM_50E`: type of object to create (upper nybble of level object minus 3)
08A0B                           ;
08A0B                           ;     ```
08A0B                           ;     $00 = jumpthrough block
08A0B                           ;     $01 = solid block
08A0B                           ;     $02 = grass
08A0B                           ;     $03 = bridge
08A0B                           ;     $04 = spikes
08A0B                           ;     $05 = vertical rock
08A0B                           ;     $06 = vertical rock with angle
08A0B                           ;     $07 = ladder
08A0B                           ;     $08 = whale
08A0B                           ;     $09 = jumpthrough platform
08A0B                           ;     $0A = log platform
08A0B                           ;     $0B = cloud platform
08A0B                           ;     $0C = waterfall
08A0B                           ;     ```
08A0B                           ;
08A0B                           ; ##### Output
08A0B                           ; - `A`: tile that was written
08A0B                           ;
08A0B                           CreateWorldSpecificTile:
08A0B AD 0E 05                  	LDA byte_RAM_50E
08A0E 0A                        	ASL A
08A0F 0A                        	ASL A
08A10 85 0F                     	STA byte_RAM_F
08A12 AD 0E 05                  	LDA byte_RAM_50E
08A15 C9 07                     	CMP #$07
08A17 90 00                     	BCC CreateWorldSpecificTile_3Xthru9X
08A19                           
08A19                           CreateWorldSpecificTile_AXthruFX:
08A19 AD 43 05                  	LDA ObjectTypeAXthruFX
08A1C 4C 00 00                  	JMP CreateWorldSpecificTile_ApplyObjectType
08A1F                           
08A1F                           CreateWorldSpecificTile_3Xthru9X:
08A1F AD 42 05                  	LDA ObjectType3Xthru9X
08A22                           
08A22                           CreateWorldSpecificTile_ApplyObjectType:
08A22 18                        	CLC
08A23 65 0F                     	ADC byte_RAM_F
08A25 AA                        	TAX
08A26 AD 0E 05                  	LDA byte_RAM_50E
08A29 C9 03                     	CMP #$03
08A2B D0 00                     	BNE CreateWorldSpecificTile_LookUpTile
08A2D                           
08A2D                           	; bridge casts a shadow on background bricks
08A2D B1 01                     	LDA (byte_RAM_1), Y
08A2F C9 90                     	CMP #BackgroundTile_BackgroundBrick
08A31 D0 00                     	BNE CreateWorldSpecificTile_LookUpTile
08A33                           
08A33 A9 66                     	LDA #BackgroundTile_BridgeShadow
08A35 D0 00                     	BNE CreateWorldSpecificTile_Exit
08A37                           
08A37                           CreateWorldSpecificTile_LookUpTile:
08A37 86 07                     	STX byte_RAM_7
08A39 84 08                     	STY byte_RAM_8
08A3B AE 35 06                  	LDX CurrentWorldTileset
08A3E BD 01 89                  	LDA WorldObjectTilePointersLo, X
08A41 85 0C                     	STA byte_RAM_C
08A43 BD 08 89                  	LDA WorldObjectTilePointersHi, X
08A46 85 0D                     	STA byte_RAM_D
08A48 A4 07                     	LDY byte_RAM_7
08A4A B1 0C                     	LDA (byte_RAM_C), Y
08A4C A4 08                     	LDY byte_RAM_8
08A4E A6 07                     	LDX byte_RAM_7
08A50                           
08A50                           CreateWorldSpecificTile_Exit:
08A50 91 01                     	STA (byte_RAM_1), Y
08A52 60                        	RTS
08A53                           
08A53                           
08A53                           ;
08A53                           ; Creates a horizontal run of blocks
08A53                           ;
08A53                           ; ##### Input
08A53                           ; - `byte_RAM_50D`: number of blocks to create
08A53                           ; - `byte_RAM_E7`: target tile placement offset
08A53                           ;
08A53                           CreateObject_HorizontalBlocks:
08A53 A4 E7                     	LDY byte_RAM_E7
08A55                           
08A55                           CreateObject_HorizontalBlocks_Loop:
08A55 20 0B 8A                  	JSR CreateWorldSpecificTile
08A58                           
08A58 20 00 00                  	JSR IncrementAreaXOffset
08A5B                           
08A5B CE 0D 05                  	DEC byte_RAM_50D
08A5E 10 F5                     	BPL CreateObject_HorizontalBlocks_Loop
08A60                           
08A60 60                        	RTS
08A61                           
08A61                           
08A61                           ;
08A61                           ; Creates a light entrance with the trail facing right
08A61                           ;
08A61                           ; World 6 has some extra logic to make the entrance extend down to the floor.
08A61                           ;
08A61                           ; ##### Input
08A61                           ; - `byte_RAM_E7`: target tile placement offset
08A61                           ;
08A61                           CreateObject_LightEntranceRight:
08A61 AD 35 06                  	LDA CurrentWorldTileset
08A64 C9 05                     	CMP #$05
08A66 D0 00                     	BNE CreateObject_LightEntranceRight_NotWorld6
08A68                           
08A68 4C 00 00                  	JMP CreateObject_LightEntranceRight_World6
08A6B                           
08A6B                           CreateObject_LightEntranceRight_NotWorld6:
08A6B A4 E7                     	LDY byte_RAM_E7
08A6D A9 52                     	LDA #BackgroundTile_LightDoor
08A6F 91 01                     	STA (byte_RAM_1), Y
08A71 C8                        	INY
08A72 A9 53                     	LDA #BackgroundTile_LightTrailRight
08A74 91 01                     	STA (byte_RAM_1), Y
08A76 A5 E7                     	LDA byte_RAM_E7
08A78 18                        	CLC
08A79 69 10                     	ADC #$10
08A7B A8                        	TAY
08A7C A9 52                     	LDA #BackgroundTile_LightDoor
08A7E 91 01                     	STA (byte_RAM_1), Y
08A80 C8                        	INY
08A81 A9 54                     	LDA #BackgroundTile_LightTrail
08A83 91 01                     	STA (byte_RAM_1), Y
08A85 C8                        	INY
08A86 A9 53                     	LDA #BackgroundTile_LightTrailRight
08A88 91 01                     	STA (byte_RAM_1), Y
08A8A                           
08A8A                           IFNDEF DISABLE_DOOR_POINTERS
08A8A AD 35 06                  	LDA CurrentWorld
08A8D C9 05                     	CMP #$05
08A8F F0 00                     	BEQ CreateObject_LightEntranceRight_World6or7Exit
08A91                           
08A91 AD 35 06                  	LDA CurrentWorld
08A94 C9 06                     	CMP #$06
08A96 F0 00                     	BEQ CreateObject_LightEntranceRight_World6or7Exit
08A98                           
08A98 20 00 00                  	JSR LevelParser_EatDoorPointer
08A9B                           ENDIF
08A9B                           
08A9B                           CreateObject_LightEntranceRight_World6or7Exit:
08A9B 60                        	RTS
08A9C                           
08A9C                           CreateObject_LightEntranceRight_World6:
08A9C A4 E7                     	LDY byte_RAM_E7
08A9E A9 00                     	LDA #$00
08AA0 85 08                     	STA byte_RAM_8
08AA2                           
08AA2                           CreateObject_LightEntranceRight_World6Loop:
08AA2 B1 01                     	LDA (byte_RAM_1), Y
08AA4 C9 40                     	CMP #BackgroundTile_Sky
08AA6 D0 00                     	BNE CreateObject_LightEntranceRight_World6_Exit
08AA8                           
08AA8 A9 52                     	LDA #BackgroundTile_LightDoor
08AAA 91 01                     	STA (byte_RAM_1), Y
08AAC A5 08                     	LDA byte_RAM_8
08AAE AA                        	TAX
08AAF                           
08AAF                           CreateObject_LightEntranceRight_World6InnerLoop:
08AAF E0 00                     	CPX #$00
08AB1 F0 00                     	BEQ CreateObject_LightEntranceRight_World6_TrailRight
08AB3                           
08AB3 C8                        	INY
08AB4 A9 54                     	LDA #BackgroundTile_LightTrail
08AB6 91 01                     	STA (byte_RAM_1), Y
08AB8 CA                        	DEX
08AB9 4C AF 8A                  	JMP CreateObject_LightEntranceRight_World6InnerLoop
08ABC                           
08ABC                           CreateObject_LightEntranceRight_World6_TrailRight:
08ABC C8                        	INY
08ABD A9 53                     	LDA #BackgroundTile_LightTrailRight
08ABF 91 01                     	STA (byte_RAM_1), Y
08AC1 E6 08                     	INC byte_RAM_8
08AC3 A4 E7                     	LDY byte_RAM_E7
08AC5 98                        	TYA
08AC6 18                        	CLC
08AC7 69 10                     	ADC #$10
08AC9 A8                        	TAY
08ACA 85 E7                     	STA byte_RAM_E7
08ACC 4C A2 8A                  	JMP CreateObject_LightEntranceRight_World6Loop
08ACF                           
08ACF                           CreateObject_LightEntranceRight_World6_Exit:
08ACF 60                        	RTS
08AD0                           
08AD0                           
08AD0                           ;
08AD0                           ; Creates a light entrance with the trail facing left
08AD0                           ;
08AD0                           ; ##### Input
08AD0                           ; - `byte_RAM_E7`: target tile placement offset
08AD0                           ;
08AD0                           CreateObject_LightEntranceLeft:
08AD0 A4 E7                     	LDY byte_RAM_E7
08AD2 A9 52                     	LDA #BackgroundTile_LightDoor
08AD4 91 01                     	STA (byte_RAM_1), Y
08AD6 88                        	DEY
08AD7 A9 55                     	LDA #BackgroundTile_LightTrailLeft
08AD9 91 01                     	STA (byte_RAM_1), Y
08ADB A4 E7                     	LDY byte_RAM_E7
08ADD 98                        	TYA
08ADE 18                        	CLC
08ADF 69 10                     	ADC #$10
08AE1 A8                        	TAY
08AE2 A9 52                     	LDA #BackgroundTile_LightDoor
08AE4 91 01                     	STA (byte_RAM_1), Y
08AE6 88                        	DEY
08AE7 A9 54                     	LDA #BackgroundTile_LightTrail
08AE9 91 01                     	STA (byte_RAM_1), Y
08AEB 88                        	DEY
08AEC A9 55                     	LDA #BackgroundTile_LightTrailLeft
08AEE 91 01                     	STA (byte_RAM_1), Y
08AF0                           
08AF0                           IFNDEF DISABLE_DOOR_POINTERS
08AF0 AD 35 06                  	LDA CurrentWorld
08AF3 C9 05                     	CMP #$05
08AF5 F0 00                     	BEQ CreateObject_LightEntranceLeft_World6or7Exit
08AF7                           
08AF7 AD 35 06                  	LDA CurrentWorld
08AFA C9 06                     	CMP #$06
08AFC F0 00                     	BEQ CreateObject_LightEntranceLeft_World6or7Exit
08AFE                           
08AFE 20 00 00                  	JSR LevelParser_EatDoorPointer
08B01                           ENDIF
08B01                           
08B01                           CreateObject_LightEntranceLeft_World6or7Exit:
08B01 60                        	RTS
08B02                           
08B02                           
08B02                           ;
08B02                           ; Creates a vertical run of blocks.
08B02                           ;
08B02                           ; ##### Input
08B02                           ; - `byte_RAM_50D`: number of blocks to create
08B02                           ; - `byte_RAM_50E`: type of object to create (upper nybble of level object minus 3)
08B02                           ;
08B02                           ;     ```
08B02                           ;     $00 = jumpthrough block
08B02                           ;     $01 = solid block
08B02                           ;     $02 = grass
08B02                           ;     $03 = bridge
08B02                           ;     $04 = spikes
08B02                           ;     $05 = vertical rock
08B02                           ;     $06 = vertical rock with angle
08B02                           ;     $07 = ladder
08B02                           ;     $08 = whale
08B02                           ;     $09 = jumpthrough platform
08B02                           ;     $0A = log platform
08B02                           ;     $0B = cloud platform
08B02                           ;     $0C = waterfall
08B02                           ;     ```
08B02                           ; - `byte_RAM_E7`: target tile placement offset
08B02                           ;
08B02                           CreateObject_VerticalBlocks:
08B02 A4 E7                     	LDY byte_RAM_E7
08B04                           
08B04                           IFNDEF LEVEL_ENGINE_UPGRADES
08B04 AD 0E 05                  	LDA byte_RAM_50E
08B07 C9 06                     	CMP #$06
08B09 D0 00                     	BNE CreateObject_VerticalBlocks_NotClawGrip
08B0B                           
08B0B AD 31 05                  	LDA CurrentLevel
08B0E C9 0E                     	CMP #$0E
08B10 D0 00                     	BNE CreateObject_VerticalBlocks_NotClawGrip
08B12                           
08B12 AD 32 05                  	LDA CurrentLevelArea
08B15 C9 05                     	CMP #$05
08B17 D0 00                     	BNE CreateObject_VerticalBlocks_NotClawGrip
08B19                           
08B19                           CreateObject_VerticalBlocks_ClawGripRockLoop:
08B19 A9 22                     	LDA #BackgroundTile_ClawGripRock
08B1B 91 01                     	STA (byte_RAM_1), Y
08B1D 20 00 00                  	JSR IncrementAreaYOffset
08B20                           
08B20 CE 0D 05                  	DEC byte_RAM_50D
08B23 10 F4                     	BPL CreateObject_VerticalBlocks_ClawGripRockLoop
08B25                           
08B25 60                        	RTS
08B26                           ENDIF
08B26                           
08B26                           CreateObject_VerticalBlocks_NotClawGrip:
08B26 AD 0E 05                  	LDA byte_RAM_50E
08B29 C9 06                     	CMP #$06
08B2B D0 00                     	BNE CreateObject_VerticalBlocks_Normal
08B2D                           
08B2D                           IFNDEF LEVEL_ENGINE_UPGRADES
08B2D A9 9F                     	LDA #BackgroundTile_RockWallAngle
08B2F                           ELSE
08B2F                           	;
08B2F                           	; Use the previous tile for the top of the column UNLESS we're using a sky
08B2F                           	; tile or have set an object type for in the level header.
08B2F                           	;
08B2F                           	; This supports creating a normal vertical block run for $9X as well as the
08B2F                           	; special rock wall with an angled top.
08B2F                           	;
08B2F                           	LDX ObjectType3Xthru9X
08B2F                           	BNE CreateObject_VerticalBlocks_Normal
08B2F                           	JSR CreateWorldSpecificTile
08B2F                           	CMP #BackgroundTile_Sky
08B2F                           	BEQ CreateObject_VerticalBlocks_NextRow
08B2F                           	CLC
08B2F                           	SBC #$00
08B2F                           ENDIF
08B2F 91 01                     	STA (byte_RAM_1), Y
08B31 4C 00 00                  	JMP CreateObject_VerticalBlocks_NextRow
08B34                           
08B34                           CreateObject_VerticalBlocks_Normal:
08B34 20 0B 8A                  	JSR CreateWorldSpecificTile
08B37                           
08B37                           CreateObject_VerticalBlocks_NextRow:
08B37 20 00 00                  	JSR IncrementAreaYOffset
08B3A                           
08B3A CE 0D 05                  	DEC byte_RAM_50D
08B3D 10 F5                     	BPL CreateObject_VerticalBlocks_Normal
08B3F                           
08B3F 60                        	RTS
08B40                           
08B40                           
08B40                           ;
08B40                           ; Lookup tables for single blocks
08B40                           ;
08B40                           ; Each the lower nybble of the object type is used as the offset, except for the
08B40                           ; standable ladder, which is described in the subroutine below.
08B40                           ;
08B40                           World1thru6SingleBlocks:
08B40 69                        	.db BackgroundTile_MushroomBlock
08B41 6C                        	.db BackgroundTile_POWBlock
08B42 9D                        	.db BackgroundTile_BombableBrick
08B43 D4                        	.db BackgroundTile_VineStandable
08B44 72                        	.db BackgroundTile_JarSmall
08B45 94                        	.db BackgroundTile_LadderStandable
08B46 95                        	.db BackgroundTile_LadderStandableShadow
08B47                           
08B47                           World7SingleBlocks:
08B47 69                        	.db BackgroundTile_MushroomBlock
08B48 6C                        	.db BackgroundTile_POWBlock
08B49 9D                        	.db BackgroundTile_BombableBrick
08B4A 17                        	.db BackgroundTile_ChainStandable
08B4B 72                        	.db BackgroundTile_JarSmall
08B4C 94                        	.db BackgroundTile_LadderStandable
08B4D 95                        	.db BackgroundTile_LadderStandableShadow
08B4E                           
08B4E                           
08B4E                           ;
08B4E                           ; Creates a single block
08B4E                           ;
08B4E                           ; ##### Input
08B4E                           ; - `byte_RAM_50E`: object type to use as an offset in the lookup table
08B4E                           ;
08B4E                           CreateObject_SingleBlock:
08B4E AD 0E 05                  	LDA byte_RAM_50E
08B51 AA                        	TAX
08B52                           
08B52                           ;
08B52                           ; Object `$05` is a single ladder tile that the player can stand on.
08B52                           ;
08B52                           ; When `ObjectTypeAXthruFX` is set, it is given a shadow. This works by
08B52                           ; incrementing the offset by one so that object `$05` ends up using offset `$06`
08B52                           ; in the lookup table!
08B52                           ;
08B52 C9 05                     	CMP #$05
08B54 D0 00                     	BNE CreateObject_SingleBlock_NotLadderStandable
08B56                           
08B56 AD 43 05                  	LDA ObjectTypeAXthruFX
08B59 F0 00                     	BEQ CreateObject_SingleBlock_NotLadderStandable
08B5B                           
08B5B E8                        	INX
08B5C                           
08B5C                           CreateObject_SingleBlock_NotLadderStandable:
08B5C A4 E7                     	LDY byte_RAM_E7
08B5E                           	; World 7 gets its own lookup table for climbable chains instead of vines
08B5E AD 35 06                  	LDA CurrentWorldTileset
08B61 C9 06                     	CMP #$06
08B63 D0 00                     	BNE CreateObject_SingleBlock_NotWorld7
08B65                           
08B65                           CreateObject_SingleBlock_World7:
08B65 BD 47 8B                  	LDA World7SingleBlocks, X
08B68 4C 00 00                  	JMP CreateObject_SingleBlock_Exit
08B6B                           
08B6B                           CreateObject_SingleBlock_NotWorld7:
08B6B BD 40 8B                  	LDA World1thru6SingleBlocks, X
08B6E                           
08B6E                           CreateObject_SingleBlock_Exit:
08B6E 91 01                     	STA (byte_RAM_1), Y
08B70 60                        	RTS
08B71                           
08B71                           
08B71                           ;
08B71                           ; Horizontal platform lookup tables. Choose between logs and clouds.
08B71                           ;
08B71                           HorizontalPlatformLeftTiles:
08B71 75                        	.db BackgroundTile_LogLeft
08B72 13                        	.db BackgroundTile_CloudLeft
08B73                           HorizontalPlatformMiddleTiles:
08B73 76                        	.db BackgroundTile_LogMiddle
08B74 14                        	.db BackgroundTile_CloudMiddle
08B75                           HorizontalPlatformRightTiles:
08B75 77                        	.db BackgroundTile_LogRight
08B76 15                        	.db BackgroundTile_CloudRight
08B77                           
08B77                           ;
08B77                           ; Creates a horizontal platform with special tiles for the endcaps.
08B77                           ;
08B77                           ; The log platforms and jump-through cloud platforms both use this.
08B77                           ;
08B77                           CreateObject_HorizontalPlatform:
08B77 AD 35 06                  	LDA CurrentWorldTileset
08B7A C9 04                     	CMP #$04
08B7C D0 00                     	BNE CreateObject_HorizontalPlatform_NotWorld5
08B7E                           
08B7E                           	; In World 5, we want to do some special stuff to make the logs look like
08B7E                           	; branches coming out of the tree trunk background.
08B7E 4C 00 00                  	JMP CreateObject_HorizontalPlatform_World5
08B81                           
08B81                           CreateObject_HorizontalPlatform_NotWorld5:
08B81 A4 E7                     	LDY byte_RAM_E7
08B83 AD 0E 05                  	LDA byte_RAM_50E
08B86 38                        	SEC
08B87 E9 0A                     	SBC #$0A
08B89 AA                        	TAX
08B8A BD 71 8B                  	LDA HorizontalPlatformLeftTiles, X
08B8D 91 01                     	STA (byte_RAM_1), Y
08B8F CE 0D 05                  	DEC byte_RAM_50D
08B92 F0 00                     	BEQ CreateObject_HorizontalPlatform_Exit
08B94                           
08B94                           CreateObject_HorizontalPlatform_Loop:
08B94 20 00 00                  	JSR IncrementAreaXOffset
08B97                           
08B97 BD 73 8B                  	LDA HorizontalPlatformMiddleTiles, X
08B9A 91 01                     	STA (byte_RAM_1), Y
08B9C CE 0D 05                  	DEC byte_RAM_50D
08B9F D0 F3                     	BNE CreateObject_HorizontalPlatform_Loop
08BA1                           
08BA1                           CreateObject_HorizontalPlatform_Exit:
08BA1 20 00 00                  	JSR IncrementAreaXOffset
08BA4                           
08BA4 BD 75 8B                  	LDA HorizontalPlatformRightTiles, X
08BA7 91 01                     	STA (byte_RAM_1), Y
08BA9 60                        	RTS
08BAA                           
08BAA                           
08BAA                           ;
08BAA                           ; Lookup table for the big green platforms.
08BAA                           ;
08BAA                           GreenPlatformTiles:
08BAA CA                        	.db BackgroundTile_GreenPlatformTopLeft
08BAB CC                        	.db BackgroundTile_GreenPlatformTop
08BAC CE                        	.db BackgroundTile_GreenPlatformTopRight
08BAD C7                        	.db BackgroundTile_GreenPlatformLeft
08BAE C8                        	.db BackgroundTile_GreenPlatformMiddle
08BAF C9                        	.db BackgroundTile_GreenPlatformRight
08BB0                           
08BB0                           ; These are the background tiles that the green platforms are allowed to overwrite.
08BB0                           ; Any other tiles will stop the green platform from extending to the bottom of the page.
08BB0                           GreenPlatformOverwriteTiles:
08BB0 40                        	.db BackgroundTile_Sky
08BB1 04                        	.db BackgroundTile_WaterfallTop
08BB2 05                        	.db BackgroundTile_Waterfall
08BB3                           IFDEF LEVEL_ENGINE_UPGRADES
08BB3                           	.db BackgroundTile_WaterfallSplash
08BB3                           	.db BackgroundTile_Water
08BB3                           	.db BackgroundTile_WaterTop
08BB3                           ENDIF
08BB3                           GreenPlatformTiles_End:
08BB3                           
08BB3                           
08BB3                           IFNDEF ENABLE_LEVEL_OBJECT_MODE
08BB3                           ;
08BB3                           ; Draws the typical green hill platforms in Worlds 1 through 6 or the mushroom
08BB3                           ; house platforms in World 7.
08BB3                           ;
08BB3                           CreateObject_JumpthroughPlatform:
08BB3 AD 35 06                  	LDA CurrentWorldTileset
08BB6 C9 06                     	CMP #$06
08BB8 D0 00                     	BNE CreateObject_GreenJumpthroughPlatform
08BBA                           
08BBA 4C 00 00                  	JMP CreateObject_MushroomJumpthroughPlatform
08BBD                           ELSE
08BBD                           CreateObject_Platform_CX:
08BBD                           	LDA LevelObjectMode
08BBD                           	JSR JumpToTableAfterJump
08BBD                           
08BBD                           	.dw CreateObject_GreenJumpthroughPlatform
08BBD                           	.dw CreateObject_GreenJumpthroughPlatform
08BBD                           	.dw CreateObject_Whale
08BBD                           	.dw CreateObject_MushroomJumpthroughPlatform
08BBD                           ENDIF
08BBD                           
08BBD                           
08BBD                           ;
08BBD                           ; #### Green platforms
08BBD                           ;
08BBD                           ; Creates the typical (usually) green hill platforms used throughout World 1 through 6.
08BBD                           ;
08BBD                           ; These platforms are allowed to overlap each other, but typically appear behind other tiles that
08BBD                           ; are already present in the area.
08BBD                           ;
08BBD                           ; ##### Input
08BBD                           ; - `byte_RAM_E7`: target tile placement offset
08BBD                           ; - `byte_RAM_E8`: area page
08BBD                           ; - `byte_RAM_50D`: width of platform
08BBD                           ;
08BBD                           CreateObject_GreenJumpthroughPlatform:
08BBD                           	; Start with a top-left tile.
08BBD A2 00                     	LDX #$00
08BBF                           
08BBF                           CreateObject_GreenJumpthroughPlatform_Row:
08BBF 86 0B                     	STX byte_RAM_B
08BC1                           	; Update the area page.
08BC1 A6 E8                     	LDX byte_RAM_E8
08BC3 20 00 00                  	JSR SetAreaPageAddr_Bank6
08BC6                           
08BC6                           	; These two lines seem like leftovers.
08BC6 A2 05                     	LDX #$05
08BC8 A4 E7                     	LDY byte_RAM_E7
08BCA                           
08BCA                           	; Draw a left corner or side.
08BCA A6 0B                     	LDX byte_RAM_B
08BCC A4 E7                     	LDY byte_RAM_E7
08BCE AD 0D 05                  	LDA byte_RAM_50D
08BD1 85 07                     	STA byte_RAM_7
08BD3 20 00 00                  	JSR CreateObject_GreenJumpthroughPlatformTile
08BD6                           
08BD6                           	; Skip to the right side if we're drawing a short platform.
08BD6 E8                        	INX
08BD7 A5 07                     	LDA byte_RAM_7
08BD9 F0 00                     	BEQ CreateObject_GreenJumpthroughPlatform_Right
08BDB                           
08BDB                           	; Draw top or middle tiles.
08BDB                           CreateObject_GreenJumpthroughPlatform_Loop:
08BDB 20 00 00                  	JSR IncrementAreaXOffset
08BDE                           
08BDE 20 00 00                  	JSR CreateObject_GreenJumpthroughPlatformTile
08BE1                           
08BE1 D0 F8                     	BNE CreateObject_GreenJumpthroughPlatform_Loop
08BE3                           
08BE3                           	; Draw right corner or side.
08BE3                           CreateObject_GreenJumpthroughPlatform_Right:
08BE3 20 00 00                  	JSR IncrementAreaXOffset
08BE6                           
08BE6 E8                        	INX
08BE7 20 00 00                  	JSR CreateObject_GreenJumpthroughPlatformTile
08BEA                           
08BEA                           	; Exit if we've hit the bottom of the page.
08BEA A5 E7                     	LDA byte_RAM_E7
08BEC 18                        	CLC
08BED 69 10                     	ADC #$10
08BEF C9 F0                     	CMP #$F0
08BF1 B0 00                     	BCS CreateObject_GreenJumpthroughPlatform_Exit
08BF3                           
08BF3                           	; Drawing a left side tile next.
08BF3 A2 03                     	LDX #$03
08BF5 85 E7                     	STA byte_RAM_E7
08BF7 4C BF 8B                  	JMP CreateObject_GreenJumpthroughPlatform_Row
08BFA                           
08BFA                           CreateObject_GreenJumpthroughPlatform_Exit:
08BFA 60                        	RTS
08BFB                           
08BFB                           
08BFB                           ;
08BFB                           ; Lookup table for green platform overlap tiles.
08BFB                           ;
08BFB                           ; When drawing the top of a green platform, if the destination tile matches the compare tile, the
08BFB                           ; corresponding left or right overlap tile will be drawn instead.
08BFB                           ;
08BFB                           GreenPlatformOverlapCompareTiles:
08BFB C7                        	.db BackgroundTile_GreenPlatformLeft
08BFC C8                        	.db BackgroundTile_GreenPlatformMiddle
08BFD C9                        	.db BackgroundTile_GreenPlatformRight
08BFE                           
08BFE                           GreenPlatformOverlapLeftTiles:
08BFE D2                        	.db BackgroundTile_GreenPlatformTopLeftOverlapEdge
08BFF D0                        	.db BackgroundTile_GreenPlatformTopLeftOverlap
08C00 D0                        	.db BackgroundTile_GreenPlatformTopLeftOverlap
08C01                           
08C01                           GreenPlatformOverlapRightTiles:
08C01 D1                        	.db BackgroundTile_GreenPlatformTopRightOverlap
08C02 D1                        	.db BackgroundTile_GreenPlatformTopRightOverlap
08C03 D3                        	.db BackgroundTile_GreenPlatformTopRightOverlapEdge
08C04                           
08C04                           
08C04                           ;
08C04                           ; Draws a single tile of the green platform, taking into account the existing tile at the target.
08C04                           ;
08C04                           ; ##### Input
08C04                           ; - `X`: offset in `GreenPlatformTiles` table (0-2=top, 3-5=middle)
08C04                           ; - `Y`: raw data offset
08C04                           ;
08C04                           CreateObject_GreenJumpthroughPlatformTile:
08C04 86 08                     	STX byte_RAM_8
08C06 8A                        	TXA
08C07 D0 00                     	BNE CreateObject_GreenJumpthroughPlatformTile_NotTopLeft
08C09                           
08C09                           	; Check if the top left corner requires a special tile
08C09 A2 02                     	LDX #(GreenPlatformOverlapLeftTiles - GreenPlatformOverlapCompareTiles - 1)
08C0B B1 01                     	LDA (byte_RAM_1), Y
08C0D                           
08C0D                           CreateObject_GreenJumpthroughPlatformTile_TopLeftLoop:
08C0D DD FB 8B                  	CMP GreenPlatformOverlapCompareTiles, X
08C10 F0 00                     	BEQ CreateObject_GreenJumpthroughPlatformTile_TopLeftMatch
08C12                           
08C12 CA                        	DEX
08C13 10 F8                     	BPL CreateObject_GreenJumpthroughPlatformTile_TopLeftLoop
08C15                           
08C15 30 00                     	BMI CreateObject_GreenJumpthroughPlatformTile_CheckOverwrite
08C17                           
08C17                           CreateObject_GreenJumpthroughPlatformTile_TopLeftMatch:
08C17 BD FE 8B                  	LDA GreenPlatformOverlapLeftTiles, X
08C1A D0 00                     	BNE CreateObject_GreenJumpthroughPlatformTile_SetTile
08C1C                           
08C1C                           CreateObject_GreenJumpthroughPlatformTile_NotTopLeft:
08C1C A6 08                     	LDX byte_RAM_8
08C1E E0 02                     	CPX #$02
08C20 D0 00                     	BNE CreateObject_GreenJumpthroughPlatformTile_CheckOverwrite
08C22                           
08C22                           	; Check if the top right corner requires a special tile
08C22 A2 02                     	LDX #(GreenPlatformOverlapLeftTiles - GreenPlatformOverlapCompareTiles - 1)
08C24 B1 01                     	LDA (byte_RAM_1), Y
08C26                           
08C26                           CreateObject_GreenJumpthroughPlatformTile_TopRightLoop:
08C26 DD FB 8B                  	CMP GreenPlatformOverlapCompareTiles, X
08C29 F0 00                     	BEQ CreateObject_GreenJumpthroughPlatformTile_TopRightMatch
08C2B                           
08C2B CA                        	DEX
08C2C 10 F8                     	BPL CreateObject_GreenJumpthroughPlatformTile_TopRightLoop
08C2E                           
08C2E 30 00                     	BMI CreateObject_GreenJumpthroughPlatformTile_CheckOverwrite
08C30                           
08C30                           CreateObject_GreenJumpthroughPlatformTile_TopRightMatch:
08C30 BD 01 8C                  	LDA GreenPlatformOverlapRightTiles, X
08C33 D0 00                     	BNE CreateObject_GreenJumpthroughPlatformTile_SetTile
08C35                           
08C35                           	; Check if the target tile can be overwritten by a green platform
08C35                           CreateObject_GreenJumpthroughPlatformTile_CheckOverwrite:
08C35 A2 08                     	LDX #(GreenPlatformTiles_End - GreenPlatformTiles - 1)
08C37                           
08C37                           CreateObject_GreenJumpthroughPlatformTile_CheckOverwriteLoop:
08C37 B1 01                     	LDA (byte_RAM_1), Y
08C39 DD AA 8B                  	CMP GreenPlatformTiles, X
08C3C F0 00                     	BEQ CreateObject_GreenJumpthroughPlatformTile_Overwrite
08C3E                           
08C3E CA                        	DEX
08C3F 10 F6                     	BPL CreateObject_GreenJumpthroughPlatformTile_CheckOverwriteLoop
08C41                           
08C41                           	; Otherwise, we cannot overwrite this tile with a green platform.
08C41 A6 08                     	LDX byte_RAM_8
08C43 4C 00 00                  	JMP CreateObject_GreenJumpthroughPlatformTile_Exit
08C46                           
08C46                           CreateObject_GreenJumpthroughPlatformTile_Overwrite:
08C46 A6 08                     	LDX byte_RAM_8
08C48 BD AA 8B                  	LDA GreenPlatformTiles, X
08C4B                           
08C4B                           CreateObject_GreenJumpthroughPlatformTile_SetTile:
08C4B 91 01                     	STA (byte_RAM_1), Y
08C4D                           
08C4D                           CreateObject_GreenJumpthroughPlatformTile_Exit:
08C4D A6 08                     	LDX byte_RAM_8
08C4F C6 07                     	DEC byte_RAM_7
08C51 60                        	RTS
08C52                           
08C52                           ; -----
08C52                           
08C52                           
08C52                           ;
08C52                           ; Lookup table for tall objects that extend to the ground.
08C52                           ;
08C52                           TallObjectTopTiles:
08C52 52                        	.db BackgroundTile_LightDoor
08C53 C0                        	.db BackgroundTile_PalmTreeTop
08C54                           
08C54                           TallObjectBottomTiles:
08C54 52                        	.db BackgroundTile_LightDoor
08C55 82                        	.db BackgroundTile_PalmTreeTrunk
08C56                           
08C56                           
08C56                           ;
08C56                           ; #### Tall objects
08C56                           ;
08C56                           ; ##### Input
08C56                           ; - `byte_RAM_E7`: target tile placement offset
08C56                           ; - `byte_RAM_50E`: type of object to create (lower nybble of level object minus 5)
08C56                           ;
08C56                           ; Creates a tree or light door object that extends down until it hits another tile.
08C56                           ;
08C56                           CreateObject_Tall:
08C56 AD 35 06                  	LDA CurrentWorldTileset
08C59 C9 04                     	CMP #$04
08C5B D0 00                     	BNE CreateObject_Tall_NotWorld5
08C5D 4C 00 00                  	JMP CreateObject_Tall_World5
08C60                           
08C60                           CreateObject_Tall_NotWorld5:
08C60 AD 0E 05                  	LDA byte_RAM_50E
08C63 38                        	SEC
08C64 E9 05                     	SBC #$05
08C66 85 07                     	STA byte_RAM_7
08C68 AA                        	TAX
08C69 A4 E7                     	LDY byte_RAM_E7
08C6B BD 52 8C                  	LDA TallObjectTopTiles, X
08C6E 91 01                     	STA (byte_RAM_1), Y
08C70                           
08C70                           CreateObject_Tall_NotWorld5_Loop:
08C70 20 00 00                  	JSR IncrementAreaYOffset
08C73                           
08C73 B1 01                     	LDA (byte_RAM_1), Y
08C75 C9 40                     	CMP #BackgroundTile_Sky
08C77 D0 00                     	BNE CreateObject_Tall_NotWorld5_Exit
08C79                           
08C79 A6 07                     	LDX byte_RAM_7
08C7B BD 54 8C                  	LDA TallObjectBottomTiles, X
08C7E 91 01                     	STA (byte_RAM_1), Y
08C80 D0 EE                     	BNE CreateObject_Tall_NotWorld5_Loop
08C82                           
08C82                           CreateObject_Tall_NotWorld5_Exit:
08C82 60                        	RTS
08C83                           
08C83                           
08C83                           ;
08C83                           ; Lookup table for tall objects that extend to the ground in World 5.
08C83                           ;
08C83                           World5TallObjectTopTiles:
08C83 C0                        	.db BackgroundTile_PalmTreeTop
08C84 C0                        	.db BackgroundTile_PalmTreeTop
08C85                           
08C85                           World5TallObjectBottomTiles:
08C85 82                        	.db BackgroundTile_PalmTreeTrunk
08C86 82                        	.db BackgroundTile_PalmTreeTrunk
08C87                           
08C87                           
08C87                           ;
08C87                           ; ##### Tall objects (World 5)
08C87                           ;
08C87                           ; Other than the fact that this only renders palm trees and not doors, the only practical difference
08C87                           ; in this subroutine is that it will stop at the bottom of the screen if it doesn't encounter
08C87                           ; another tile beforehand.
08C87                           ;
08C87                           ; This appears to be a work-around for the palm trees in 5-2 that have vertical
08C87                           ; rock platforms beneath them. Since the rock comes later, tree trunk tiles would
08C87                           ; render all the way down to the screen and through to the next page!
08C87                           ;
08C87                           ; Using a new object layer would have achieved the same effect, but the
08C87                           ; developer decided to create this special case instead.
08C87                           ;
08C87                           CreateObject_Tall_World5:
08C87 A2 00                     	LDX #$00
08C89 AD 0E 05                  	LDA byte_RAM_50E
08C8C C9 05                     	CMP #$05
08C8E F0 00                     	BEQ CreateObject_Tall_World5_DoLookup
08C90                           
08C90 E8                        	INX
08C91                           
08C91                           CreateObject_Tall_World5_DoLookup:
08C91 86 07                     	STX byte_RAM_7
08C93 A4 E7                     	LDY byte_RAM_E7
08C95 BD 83 8C                  	LDA World5TallObjectTopTiles, X
08C98 91 01                     	STA (byte_RAM_1), Y
08C9A                           
08C9A                           CreateObject_Tall_World5_Loop:
08C9A 20 00 00                  	JSR IncrementAreaYOffset
08C9D                           
08C9D B1 01                     	LDA (byte_RAM_1), Y
08C9F C9 40                     	CMP #BackgroundTile_Sky
08CA1 D0 00                     	BNE CreateObject_Tall_World5_Exit
08CA3                           
08CA3 A6 07                     	LDX byte_RAM_7
08CA5 BD 85 8C                  	LDA World5TallObjectBottomTiles, X
08CA8 91 01                     	STA (byte_RAM_1), Y
08CAA C0 E0                     	CPY #$E0
08CAC 90 EC                     	BCC CreateObject_Tall_World5_Loop
08CAE                           
08CAE                           CreateObject_Tall_World5_Exit:
08CAE 60                        	RTS
08CAF                           
08CAF                           ; -----
08CAF                           
08CAF                           ;
08CAF                           ; Creates the larger, two-tile-wide big cloud.
08CAF                           ;
08CAF                           CreateObject_BigCloud:
08CAF A4 E7                     	LDY byte_RAM_E7
08CB1 A9 01                     	LDA #BackgroundTile_BgCloudLeft
08CB3 91 01                     	STA (byte_RAM_1), Y
08CB5 C8                        	INY
08CB6 A9 02                     	LDA #BackgroundTile_BgCloudRight
08CB8 91 01                     	STA (byte_RAM_1), Y
08CBA 60                        	RTS
08CBB                           
08CBB                           ; -----
08CBB                           
08CBB                           
08CBB                           ;
08CBB                           ; Creates a tiny, single-tile cloud.
08CBB                           ;
08CBB                           CreateObject_SmallCloud:
08CBB A4 E7                     	LDY byte_RAM_E7
08CBD A9 03                     	LDA #BackgroundTile_BgCloudSmall
08CBF 91 01                     	STA (byte_RAM_1), Y
08CC1 60                        	RTS
08CC2                           
08CC2                           ; -----
08CC2                           
08CC2                           
08CC2                           JarTopTiles:
08CC2 6F                        	.db BackgroundTile_JarTopPointer
08CC3 73                        	.db BackgroundTile_JarTopGeneric
08CC4 74                        	.db BackgroundTile_JarTopNonEnterable
08CC5                           
08CC5                           
08CC5                           CreateObject_Vase:
08CC5 A4 E7                     	LDY byte_RAM_E7
08CC7 AD 0E 05                  	LDA byte_RAM_50E
08CCA 38                        	SEC
08CCB E9 06                     	SBC #$06
08CCD AA                        	TAX
08CCE BD C2 8C                  	LDA JarTopTiles, X
08CD1 91 01                     	STA (byte_RAM_1), Y
08CD3                           
08CD3                           CreateObject_Vase_Loop:
08CD3 20 00 00                  	JSR IncrementAreaYOffset
08CD6                           
08CD6 B1 01                     	LDA (byte_RAM_1), Y
08CD8 C9 40                     	CMP #BackgroundTile_Sky
08CDA D0 00                     	BNE CreateObject_Vase_Exit
08CDC                           
08CDC A9 70                     	LDA #BackgroundTile_JarMiddle
08CDE 91 01                     	STA (byte_RAM_1), Y
08CE0 4C D3 8C                  	JMP CreateObject_Vase_Loop
08CE3                           
08CE3                           CreateObject_Vase_Exit:
08CE3 98                        	TYA
08CE4 38                        	SEC
08CE5 E9 10                     	SBC #$10
08CE7 A8                        	TAY
08CE8 A9 71                     	LDA #BackgroundTile_JarBottom
08CEA 91 01                     	STA (byte_RAM_1), Y
08CEC 60                        	RTS
08CED                           
08CED                           
08CED                           ;
08CED                           ; Creates a vine that extends downwards until it hits another tile.
08CED                           ;
08CED                           ; ##### Input
08CED                           ; - `byte_RAM_E7`: target tile placement offset
08CED                           ; - `byte_RAM_50E`: type of object to create
08CED                           ;
08CED                           CreateObject_Vine:
08CED A4 E7                     	LDY byte_RAM_E7
08CEF AD 0E 05                  	LDA byte_RAM_50E
08CF2                           	; `$0D` is a vine with no top, so start right at the middle.
08CF2 C9 0D                     	CMP #$0D
08CF4 F0 00                     	BEQ CreateObject_Vine_Middle
08CF6                           
08CF6 A9 C1                     	LDA #BackgroundTile_VineTop
08CF8 91 01                     	STA (byte_RAM_1), Y
08CFA                           
08CFA                           CreateObject_Vine_Loop:
08CFA 20 00 00                  	JSR IncrementAreaYOffset
08CFD                           
08CFD                           CreateObject_Vine_Middle:
08CFD B1 01                     	LDA (byte_RAM_1), Y
08CFF C9 40                     	CMP #BackgroundTile_Sky
08D01 D0 00                     	BNE CreateObject_Vine_Exit
08D03                           
08D03 A9 C2                     	LDA #BackgroundTile_Vine
08D05 91 01                     	STA (byte_RAM_1), Y
08D07 A5 EC                     	LDA IsHorizontalLevel
08D09 F0 00                     	BEQ CreateObject_Vine_Next
08D0B                           
08D0B                           	; In horizontal areas, stop at the bottom of the screen.
08D0B C0 E0                     	CPY #$E0
08D0D B0 00                     	BCS CreateObject_Vine_Exit
08D0F                           
08D0F                           CreateObject_Vine_Next:
08D0F 4C FA 8C                  	JMP CreateObject_Vine_Loop
08D12                           
08D12                           CreateObject_Vine_Exit:
08D12 60                        	RTS
08D13                           
08D13                           ; -----
08D13                           
08D13                           
08D13                           ;
08D13                           ; Creates a vine that extends upwards until it hits another tile.
08D13                           ;
08D13                           ; ##### Input
08D13                           ; - `byte_RAM_E7`: target tile placement offset for the BOTTOM of the vine
08D13                           ;
08D13                           CreateObject_VineBottom:
08D13 A4 E7                     	LDY byte_RAM_E7
08D15 A9 C3                     	LDA #BackgroundTile_VineBottom
08D17 91 01                     	STA (byte_RAM_1), Y
08D19                           
08D19                           CreateObject_VineBottom_Loop:
08D19                           	; Stop at the top of the page.
08D19 98                        	TYA
08D1A 38                        	SEC
08D1B E9 10                     	SBC #$10
08D1D A8                        	TAY
08D1E C9 F0                     	CMP #$F0
08D20 B0 00                     	BCS CreateObject_VineBottom_Exit
08D22                           
08D22                           	; Stop if we hit tile that isn't blank.
08D22 B1 01                     	LDA (byte_RAM_1), Y
08D24 C9 40                     	CMP #BackgroundTile_Sky
08D26 D0 00                     	BNE CreateObject_VineBottom_Exit
08D28                           
08D28                           	; Draw a section of the vine
08D28 A9 C2                     	LDA #BackgroundTile_Vine
08D2A 91 01                     	STA (byte_RAM_1), Y
08D2C 4C 19 8D                  	JMP CreateObject_VineBottom_Loop
08D2F                           
08D2F                           CreateObject_VineBottom_Exit:
08D2F 60                        	RTS
08D30                           
08D30                           
08D30                           ;
08D30                           ; Lookup table for single object tiles.
08D30                           ;
08D30                           SingleObjects:
08D30 43                        	.db BackgroundTile_GrassCoin ; $20
08D31 44                        	.db BackgroundTile_GrassLargeVeggie ; $21
08D32 45                        	.db BackgroundTile_GrassSmallVeggie ; $22
08D33 46                        	.db BackgroundTile_GrassRocket ; $23
08D34 47                        	.db BackgroundTile_GrassShell ; $24
08D35 48                        	.db BackgroundTile_GrassBomb ; $25
08D36 49                        	.db BackgroundTile_GrassPotion ; $26
08D37 4A                        	.db BackgroundTile_Grass1UP ; $27
08D38 4B                        	.db BackgroundTile_GrassPow ; $28
08D39 4E                        	.db BackgroundTile_Cherry ; $29
08D3A 4C                        	.db BackgroundTile_GrassBobOmb ; $2A
08D3B 41                        	.db BackgroundTile_SubspaceMushroom1 ; $2B
08D3C 5B                        	.db BackgroundTile_Phanto ; $2C
08D3D 42                        	.db BackgroundTile_SubspaceMushroom2 ; $2D
08D3E 5A                        	.db BackgroundTile_WhaleEye ; $2E
08D3F                           	; No entry for $2F in this table, so it uses tile $A4 due to the LDY below
08D3F                           IFDEF EXPAND_TABLES
08D3F                           	.db BackgroundTile_SolidWood ; $2F
08D3F                           ENDIF
08D3F                           
08D3F                           
08D3F                           ;
08D3F                           ; Creates a single tile object using the lookup table above.
08D3F                           ;
08D3F                           ; ##### Input
08D3F                           ; - `byte_RAM_E7`: target tile placement offset
08D3F                           ; - `byte_RAM_50E`: type of object to create
08D3F                           ;
08D3F                           CreateObject_SingleObject:
08D3F A4 E7                     	LDY byte_RAM_E7
08D41 AE 0E 05                  	LDX byte_RAM_50E
08D44 BD 30 8D                  	LDA SingleObjects, X
08D47 91 01                     	STA (byte_RAM_1), Y
08D49 60                        	RTS
08D4A                           
08D4A                           ; -----
08D4A                           
08D4A                           
08D4A                           World1thru6BrickWallTiles:
08D4A 90                        	.db BackgroundTile_BackgroundBrick
08D4B A3                        	.db BackgroundTile_SolidBrick2Wall
08D4C                           
08D4C                           World7BrickWallTiles:
08D4C 9C                        	.db BackgroundTile_GroundBrick2
08D4D 9C                        	.db BackgroundTile_GroundBrick2
08D4E                           
08D4E                           
08D4E                           CreateObject_Wall:
08D4E AD 0E 05                  	LDA byte_RAM_50E
08D51 38                        	SEC
08D52 E9 08                     	SBC #$08
08D54 85 08                     	STA byte_RAM_8
08D56 A4 E7                     	LDY byte_RAM_E7
08D58 A6 E8                     	LDX byte_RAM_E8
08D5A 20 00 00                  	JSR SetAreaPageAddr_Bank6
08D5D                           
08D5D A4 E7                     	LDY byte_RAM_E7
08D5F A9 05                     	LDA #$05
08D61 85 07                     	STA byte_RAM_7
08D63 B1 01                     	LDA (byte_RAM_1), Y
08D65 C9 40                     	CMP #BackgroundTile_Sky
08D67 D0 00                     	BNE CreateObject_Wall_Exit
08D69                           
08D69                           CreateObject_Wall_Loop:
08D69 A6 08                     	LDX byte_RAM_8
08D6B AD 35 06                  	LDA CurrentWorldTileset
08D6E C9 06                     	CMP #$06
08D70 D0 00                     	BNE CreateObject_Wall_PlaceTile_NotWorld7
08D72                           
08D72 BD 4C 8D                  	LDA World7BrickWallTiles, X
08D75 4C 00 00                  	JMP CreateObject_Wall_PlaceTile
08D78                           
08D78                           CreateObject_Wall_PlaceTile_NotWorld7:
08D78 BD 4A 8D                  	LDA World1thru6BrickWallTiles, X
08D7B                           
08D7B                           CreateObject_Wall_PlaceTile:
08D7B 91 01                     	STA (byte_RAM_1), Y
08D7D 20 00 00                  	JSR IncrementAreaXOffset
08D80                           
08D80 C6 07                     	DEC byte_RAM_7
08D82 10 E5                     	BPL CreateObject_Wall_Loop
08D84                           
08D84 A5 E7                     	LDA byte_RAM_E7
08D86 18                        	CLC
08D87 69 10                     	ADC #$10
08D89 C9 F0                     	CMP #$F0
08D8B B0 00                     	BCS CreateObject_Wall_Exit
08D8D                           
08D8D 85 E7                     	STA byte_RAM_E7
08D8F 4C 4E 8D                  	JMP CreateObject_Wall
08D92                           
08D92                           CreateObject_Wall_Exit:
08D92 60                        	RTS
08D93                           
08D93                           
08D93                           WaterfallTiles:
08D93 04                        	.db BackgroundTile_WaterfallTop
08D94 05                        	.db BackgroundTile_Waterfall
08D95                           
08D95                           
08D95                           CreateObject_WaterfallOrFrozenRocks:
08D95                           IFNDEF ENABLE_LEVEL_OBJECT_MODE
08D95 AD 35 06                  	LDA CurrentWorldTileset
08D98 C9 03                     	CMP #$03
08D9A D0 00                     	BNE CreateObject_Waterfall
08D9C                           
08D9C 4C 00 00                  	JMP CreateObject_FrozenRocks
08D9F                           ENDIF
08D9F                           
08D9F                           CreateObject_Waterfall:
08D9F A9 00                     	LDA #$00
08DA1 85 08                     	STA byte_RAM_8
08DA3                           
08DA3                           CreateObject_Waterfall_OuterLoop:
08DA3 A4 E7                     	LDY byte_RAM_E7
08DA5 A6 E8                     	LDX byte_RAM_E8
08DA7 20 00 00                  	JSR SetAreaPageAddr_Bank6
08DAA                           
08DAA A4 E7                     	LDY byte_RAM_E7
08DAC AD 0D 05                  	LDA byte_RAM_50D
08DAF 85 07                     	STA byte_RAM_7
08DB1 A6 08                     	LDX byte_RAM_8
08DB3                           
08DB3                           CreateObject_Waterfall_InnerLoop:
08DB3 BD 93 8D                  	LDA WaterfallTiles, X
08DB6 91 01                     	STA (byte_RAM_1), Y
08DB8 20 00 00                  	JSR IncrementAreaXOffset
08DBB                           
08DBB C6 07                     	DEC byte_RAM_7
08DBD 10 F4                     	BPL CreateObject_Waterfall_InnerLoop
08DBF                           
08DBF A9 01                     	LDA #$01
08DC1 85 08                     	STA byte_RAM_8
08DC3 A5 E7                     	LDA byte_RAM_E7
08DC5 18                        	CLC
08DC6 69 10                     	ADC #$10
08DC8 C9 F0                     	CMP #$F0
08DCA B0 00                     	BCS CreateObject_Waterfall_Exit
08DCC                           
08DCC 85 E7                     	STA byte_RAM_E7
08DCE 4C A3 8D                  	JMP CreateObject_Waterfall_OuterLoop
08DD1                           
08DD1                           CreateObject_Waterfall_Exit:
08DD1 60                        	RTS
08DD2                           
08DD2                           
08DD2                           IFDEF ENABLE_LEVEL_OBJECT_MODE
08DD2                           WaterTiles:
08DD2                           	.db BackgroundTile_WaterTop
08DD2                           	.db BackgroundTile_Water
08DD2                           
08DD2                           CreateObject_Water:
08DD2                           	LDA #$00
08DD2                           	STA byte_RAM_8
08DD2                           
08DD2                           CreateObject_Water_OuterLoop:
08DD2                           	LDY byte_RAM_E7
08DD2                           	LDX byte_RAM_E8
08DD2                           	JSR SetAreaPageAddr_Bank6
08DD2                           
08DD2                           	LDY byte_RAM_E7
08DD2                           	LDA byte_RAM_50D
08DD2                           	STA byte_RAM_7
08DD2                           	LDX byte_RAM_8
08DD2                           
08DD2                           CreateObject_Water_InnerLoop:
08DD2                           	LDA WaterTiles, X
08DD2                           	STA (byte_RAM_1), Y
08DD2                           	JSR IncrementAreaXOffset
08DD2                           
08DD2                           	DEC byte_RAM_7
08DD2                           	BPL CreateObject_Water_InnerLoop
08DD2                           
08DD2                           	LDA #$01
08DD2                           	STA byte_RAM_8
08DD2                           	LDA byte_RAM_E7
08DD2                           	CLC
08DD2                           	ADC #$10
08DD2                           	CMP #$F0
08DD2                           	BCS CreateObject_Water_Exit
08DD2                           
08DD2                           	STA byte_RAM_E7
08DD2                           	JMP CreateObject_Water_OuterLoop
08DD2                           
08DD2                           CreateObject_Water_Exit:
08DD2                           	RTS
08DD2                           ENDIF
08DD2                           
08DD2                           
08DD2                           CreateObject_Pyramid:
08DD2 A4 E7                     	LDY byte_RAM_E7
08DD4 A9 00                     	LDA #$00
08DD6 85 08                     	STA byte_RAM_8
08DD8                           
08DD8                           CreateObject_Pyramid_CheckExistingTile:
08DD8 B1 01                     	LDA (byte_RAM_1), Y
08DDA C9 40                     	CMP #BackgroundTile_Sky
08DDC F0 00                     	BEQ CreateObject_Pyramid_DrawLeftOuter
08DDE                           
08DDE 60                        	RTS
08DDF                           
08DDF                           CreateObject_Pyramid_DrawLeftOuter:
08DDF A9 84                     	LDA #BackgroundTile_PyramidLeftAngle
08DE1 91 01                     	STA (byte_RAM_1), Y
08DE3 A6 08                     	LDX byte_RAM_8
08DE5 F0 00                     	BEQ CreateObject_Pyramid_DrawRightOuter
08DE7                           
08DE7                           CreateObject_Pyramid_DrawLeftInner:
08DE7 C8                        	INY
08DE8 A9 85                     	LDA #BackgroundTile_PyramidLeft
08DEA 91 01                     	STA (byte_RAM_1), Y
08DEC CA                        	DEX
08DED D0 F8                     	BNE CreateObject_Pyramid_DrawLeftInner
08DEF                           
08DEF A6 08                     	LDX byte_RAM_8
08DF1                           
08DF1                           CreateObject_Pyramid_DrawRightInner:
08DF1 C8                        	INY
08DF2 A9 86                     	LDA #BackgroundTile_PyramidRight
08DF4 91 01                     	STA (byte_RAM_1), Y
08DF6 CA                        	DEX
08DF7 D0 F8                     	BNE CreateObject_Pyramid_DrawRightInner
08DF9                           
08DF9                           CreateObject_Pyramid_DrawRightOuter:
08DF9 C8                        	INY
08DFA A9 87                     	LDA #BackgroundTile_PyramidRightAngle
08DFC 91 01                     	STA (byte_RAM_1), Y
08DFE E6 08                     	INC byte_RAM_8
08E00 A5 E7                     	LDA byte_RAM_E7
08E02 18                        	CLC
08E03 69 10                     	ADC #$10
08E05 85 E7                     	STA byte_RAM_E7
08E07 38                        	SEC
08E08 E5 08                     	SBC byte_RAM_8
08E0A A8                        	TAY
08E0B 4C D8 8D                  	JMP CreateObject_Pyramid_CheckExistingTile
08E0E                           
08E0E                           
08E0E                           ;
08E0E                           ; This is basically equivalent to `CreateObject_Pillar`, except that it only
08E0E                           ; creates desert world cacti. It doesn't seem to referenced anywhere and is
08E0E                           ; possibly just a leftover from Doki Doki Panic.
08E0E                           ;
08E0E                           Unused_CreateObject_Cactus:
08E0E A4 E7                     	LDY byte_RAM_E7
08E10 A9 1D                     	LDA #BackgroundTile_CactusTop
08E12 91 01                     	STA (byte_RAM_1), Y
08E14                           
08E14                           Unused_CreateObject_Cactus_Loop:
08E14 20 00 00                  	JSR IncrementAreaYOffset
08E17                           
08E17 B1 01                     	LDA (byte_RAM_1), Y
08E19 C9 40                     	CMP #BackgroundTile_Sky
08E1B F0 00                     	BEQ Unused_CreateObject_Cactus_PlaceTile
08E1D                           
08E1D 60                        	RTS
08E1E                           
08E1E                           Unused_CreateObject_Cactus_PlaceTile:
08E1E A9 1E                     	LDA #BackgroundTile_CactusMiddle
08E20 91 01                     	STA (byte_RAM_1), Y
08E22 D0 F0                     	BNE Unused_CreateObject_Cactus_Loop
08E24                           
08E24                           
08E24                           ;
08E24                           ; See these stars? The tiles are pseudo-randomly chosen using this subroutine.
08E24                           ; This modifies two inputs and returns the exclusive OR of them to use as the
08E24                           ; index in the tile lookup table.
08E24                           ;
08E24                           ; ##### Input
08E24                           ; - `byte_RAM_9`
08E24                           ; - `byte_RAM_A`
08E24                           ;
08E24                           ; ##### Output
08E24                           ; - `A`: offset in the start tile lookup table
08E24                           ; - `byte_RAM_9`
08E24                           ; - `byte_RAM_A`
08E24                           ;
08E24                           CreateObject_StarBackground_PickTile:
08E24                           	; Multiply `RAM_9` by 5 and add one
08E24 A5 09                     	LDA byte_RAM_9
08E26 0A                        	ASL A
08E27 0A                        	ASL A
08E28 38                        	SEC
08E29 65 09                     	ADC byte_RAM_9
08E2B 85 09                     	STA byte_RAM_9
08E2D                           
08E2D                           	; Multiply `RAM_A` by 2
08E2D 06 0A                     	ASL byte_RAM_A
08E2F                           
08E2F A9 20                     	LDA #%00100000
08E31 24 0A                     	BIT byte_RAM_A
08E33                           
08E33 B0 00                     	BCS CreateObject_StarBackground_PickTile_RAM_9_Overflowed
08E35                           
08E35 D0 00                     	BNE CreateObject_StarBackground_PickTile_RAM_A_Increment
08E37                           
08E37 F0 00                     	BEQ CreateObject_StarBackground_PickTile_Exit
08E39                           
08E39                           CreateObject_StarBackground_PickTile_RAM_9_Overflowed:
08E39 D0 00                     	BNE CreateObject_StarBackground_PickTile_Exit
08E3B                           
08E3B                           CreateObject_StarBackground_PickTile_RAM_A_Increment:
08E3B                           	; Increment `RAM_A` if
08E3B                           	; - `RAM_9` DID overflow and `RAM_A' is NOT divisible by 16
08E3B                           	; - `RAM_9` did NOT overflow and `RAM_A` IS divisible by 16
08E3B E6 0A                     	INC byte_RAM_A
08E3D                           
08E3D                           CreateObject_StarBackground_PickTile_Exit:
08E3D                           	; Return the exclusive OR of `RAM_9` and `RAM_A`
08E3D A5 0A                     	LDA byte_RAM_A
08E3F 45 09                     	EOR byte_RAM_9
08E41 60                        	RTS
08E42                           
08E42                           
08E42                           StarBackgroundTiles:
08E42 40                        	.db BackgroundTile_Sky
08E43 88                        	.db BackgroundTile_StarBg1
08E44 40                        	.db BackgroundTile_Sky
08E45 40                        	.db BackgroundTile_Sky
08E46 40                        	.db BackgroundTile_Sky
08E47 40                        	.db BackgroundTile_Sky
08E48 89                        	.db BackgroundTile_StarBg2
08E49 40                        	.db BackgroundTile_Sky
08E4A                           
08E4A                           
08E4A                           CreateObject_StarBackground:
08E4A A5 E8                     	LDA byte_RAM_E8
08E4C 85 0D                     	STA byte_RAM_D
08E4E A9 80                     	LDA #$80
08E50 85 0A                     	STA byte_RAM_A
08E52 A9 31                     	LDA #$31
08E54 85 09                     	STA byte_RAM_9
08E56                           
08E56                           CreateObject_StarBackground_Loop:
08E56 20 24 8E                  	JSR CreateObject_StarBackground_PickTile
08E59                           
08E59 29 07                     	AND #$07
08E5B AA                        	TAX
08E5C BD 42 8E                  	LDA StarBackgroundTiles, X
08E5F 91 01                     	STA (byte_RAM_1), Y
08E61 20 00 00                  	JSR IncrementAreaYOffset
08E64                           
08E64 C0 30                     	CPY #$30
08E66 90 EE                     	BCC CreateObject_StarBackground_Loop
08E68                           
08E68 98                        	TYA
08E69 29 0F                     	AND #$0F
08E6B A8                        	TAY
08E6C 20 00 00                  	JSR IncrementAreaXOffset
08E6F                           
08E6F A5 0D                     	LDA byte_RAM_D
08E71 85 E8                     	STA byte_RAM_E8
08E73 C9 0A                     	CMP #$A
08E75 D0 DF                     	BNE CreateObject_StarBackground_Loop
08E77                           
08E77 A9 00                     	LDA #$00
08E79 85 E8                     	STA byte_RAM_E8
08E7B 85 E6                     	STA byte_RAM_E6
08E7D 85 E5                     	STA byte_RAM_E5
08E7F 60                        	RTS
08E80                           
08E80                           
08E80                           ;
08E80                           ; Lookup table for whale tiles.
08E80                           ;
08E80                           ; It's unclear why there are entries for black background tiles and jumpthrough
08E80                           ; cloud platforms, but the mushroom houses table also has this.
08E80                           ;
08E80                           WhaleLeftTiles:
08E80 00                        	.db BackgroundTile_Black
08E81 13                        	.db BackgroundTile_CloudLeft
08E82 60                        	.db BackgroundTile_WhaleTopLeft
08E83 59                        	.db BackgroundTile_Whale
08E84 0C                        	.db BackgroundTile_WaterWhale
08E85                           
08E85                           WhaleMiddleTiles:
08E85 00                        	.db BackgroundTile_Black
08E86 14                        	.db BackgroundTile_CloudMiddle
08E87 61                        	.db BackgroundTile_WhaleTop
08E88 59                        	.db BackgroundTile_Whale
08E89 0C                        	.db BackgroundTile_WaterWhale
08E8A                           
08E8A                           WhaleRightTiles:
08E8A 00                        	.db BackgroundTile_Black
08E8B 15                        	.db BackgroundTile_CloudRight
08E8C 62                        	.db BackgroundTile_WhaleTopRight
08E8D 59                        	.db BackgroundTile_Whale
08E8E 0C                        	.db BackgroundTile_WaterWhale
08E8F                           
08E8F                           
08E8F                           ;
08E8F                           ; Draws a row of the whale
08E8F                           ;
08E8F                           ; ##### Input
08E8F                           ; - `byte_RAM_E7`: target tile placement offset
08E8F                           ; - `byte_RAM_50D`: width of house
08E8F                           ; - `byte_RAM_50E`: offset in the tile lookup table plus `$0A`, for some reason
08E8F                           ;
08E8F                           CreateObject_WhaleRow:
08E8F A4 E7                     	LDY byte_RAM_E7
08E91 AD 0E 05                  	LDA byte_RAM_50E
08E94 38                        	SEC
08E95 E9 0A                     	SBC #$0A
08E97 AA                        	TAX
08E98 BD 80 8E                  	LDA WhaleLeftTiles, X
08E9B 91 01                     	STA (byte_RAM_1), Y
08E9D CE 0D 05                  	DEC byte_RAM_50D
08EA0 F0 00                     	BEQ CreateObject_WhaleRow_Right
08EA2                           
08EA2                           CreateObject_WhaleRow_Loop:
08EA2 20 00 00                  	JSR IncrementAreaXOffset
08EA5                           
08EA5 BD 85 8E                  	LDA WhaleMiddleTiles, X
08EA8 91 01                     	STA (byte_RAM_1), Y
08EAA CE 0D 05                  	DEC byte_RAM_50D
08EAD D0 F3                     	BNE CreateObject_WhaleRow_Loop
08EAF                           
08EAF                           CreateObject_WhaleRow_Right:
08EAF 20 00 00                  	JSR IncrementAreaXOffset
08EB2                           
08EB2 BD 8A 8E                  	LDA WhaleRightTiles, X
08EB5 91 01                     	STA (byte_RAM_1), Y
08EB7 60                        	RTS
08EB8                           
08EB8                           
08EB8                           IFNDEF ENABLE_LEVEL_OBJECT_MODE
08EB8                           CreateObject_WhaleOrDrawBridgeChain:
08EB8 AD 35 06                  	LDA CurrentWorldTileset
08EBB C9 06                     	CMP #$06
08EBD D0 00                     	BNE CreateObject_Whale
08EBF                           
08EBF 4C 00 00                  	JMP CreateObject_DrawBridgeChain
08EC2                           ELSE
08EC2                           CreateObject_Platform_BX:
08EC2                           	LDA LevelObjectMode
08EC2                           	JSR JumpToTableAfterJump
08EC2                           
08EC2                           	.dw CreateObject_Water
08EC2                           	.dw CreateObject_FrozenRocks
08EC2                           	.dw CreateObject_FrozenRocks
08EC2                           	.dw CreateObject_DrawBridgeChain
08EC2                           ENDIF
08EC2                           
08EC2                           ;
08EC2                           ; Draws a whale.
08EC2                           ;
08EC2                           ; ##### Input
08EC2                           ; - `byte_RAM_50D`: width of whale
08EC2                           ;
08EC2                           CreateObject_Whale:
08EC2 AD 0D 05                  	LDA byte_RAM_50D
08EC5 85 07                     	STA byte_RAM_7
08EC7 A9 0C                     	LDA #$0C
08EC9 8D 0E 05                  	STA byte_RAM_50E
08ECC 20 8F 8E                  	JSR CreateObject_WhaleRow
08ECF                           
08ECF EE 0E 05                  	INC byte_RAM_50E
08ED2                           
08ED2                           CreateObject_Whale_Loop:
08ED2 A5 07                     	LDA byte_RAM_7
08ED4 8D 0D 05                  	STA byte_RAM_50D
08ED7 A5 E7                     	LDA byte_RAM_E7
08ED9 18                        	CLC
08EDA 69 10                     	ADC #$10
08EDC 85 E7                     	STA byte_RAM_E7
08EDE C9 B0                     	CMP #$B0
08EE0                           	; This branch doesn't actually skip anything...
08EE0 90 00                     	BCC CreateObject_Whale_AboveWater
08EE2                           
08EE2                           CreateObject_Whale_AboveWater:
08EE2 A6 E8                     	LDX byte_RAM_E8
08EE4 20 00 00                  	JSR SetAreaPageAddr_Bank6
08EE7                           
08EE7 20 8F 8E                  	JSR CreateObject_WhaleRow
08EEA                           
08EEA                           	; Check to see if we're at the fixed row above the water.
08EEA 98                        	TYA
08EEB 29 F0                     	AND #$F0
08EED C9 B0                     	CMP #$B0
08EEF D0 00                     	BNE CreateObject_Whale_NotTail
08EF1                           
08EF1                           	; Draw the whale tail two tiles away.
08EF1 20 00 00                  	JSR IncrementAreaXOffset
08EF4 20 00 00                  	JSR IncrementAreaXOffset
08EF7                           
08EF7 A9 63                     	LDA #BackgroundTile_WhaleTail
08EF9 91 01                     	STA (byte_RAM_1), Y
08EFB EE 0E 05                  	INC byte_RAM_50E
08EFE 4C D2 8E                  	JMP CreateObject_Whale_Loop
08F01                           
08F01                           CreateObject_Whale_NotTail:
08F01 AD 0E 05                  	LDA byte_RAM_50E
08F04 C9 0E                     	CMP #$0E
08F06 D0 CA                     	BNE CreateObject_Whale_Loop
08F08                           
08F08 20 00 00                  	JSR IncrementAreaXOffset
08F0B 20 00 00                  	JSR IncrementAreaXOffset
08F0E                           
08F0E A9 11                     	LDA #BackgroundTile_WaterWhaleTail
08F10 91 01                     	STA (byte_RAM_1), Y
08F12 60                        	RTS
08F13                           
08F13                           
08F13                           ;
08F13                           ; Lookup table for frozen rocks over water tiles.
08F13                           ;
08F13                           FrozenRockTiles:
08F13 0C                        	.db BackgroundTile_WaterWhale
08F14 1F                        	.db BackgroundTile_FrozenRock
08F15                           
08F15                           
08F15                           ;
08F15                           ; Draws the frozen rocks object
08F15                           ;
08F15                           ; This places rows of tiles until it hits the water height, where it will place
08F15                           ; one last row of a different tile and then exit.
08F15                           ;
08F15                           ; ##### Input
08F15                           ; - `byte_RAM_50D`: number of blocks to create
08F15                           ; - `byte_RAM_E7`: target tile placement offset
08F15                           ; - `byte_RAM_E8`: area page
08F15                           ;
08F15                           CreateObject_FrozenRocks:
08F15 A9 01                     	LDA #$01
08F17 85 08                     	STA byte_RAM_8
08F19                           
08F19                           CreateObject_FrozenRocks_OuterLoop:
08F19 A4 E7                     	LDY byte_RAM_E7
08F1B A6 E8                     	LDX byte_RAM_E8
08F1D 20 00 00                  	JSR SetAreaPageAddr_Bank6
08F20                           
08F20 A4 E7                     	LDY byte_RAM_E7
08F22 AD 0D 05                  	LDA byte_RAM_50D
08F25 85 07                     	STA byte_RAM_7
08F27 A6 08                     	LDX byte_RAM_8
08F29                           
08F29                           CreateObject_FrozenRocks_InnerLoop:
08F29 BD 13 8F                  	LDA FrozenRockTiles, X
08F2C 91 01                     	STA (byte_RAM_1), Y
08F2E 20 00 00                  	JSR IncrementAreaXOffset
08F31                           
08F31 C6 07                     	DEC byte_RAM_7
08F33 10 F4                     	BPL CreateObject_FrozenRocks_InnerLoop
08F35                           
08F35 A5 08                     	LDA byte_RAM_8
08F37 D0 00                     	BNE CreateObject_FrozenRocks_IncrementRow
08F39                           
08F39 60                        	RTS
08F3A                           
08F3A                           CreateObject_FrozenRocks_IncrementRow:
08F3A A5 E7                     	LDA byte_RAM_E7
08F3C 18                        	CLC
08F3D 69 10                     	ADC #$10
08F3F C9 C0                     	CMP #$C0
08F41 90 00                     	BCC CreateObject_FrozenRocks_NextRow
08F43                           
08F43                           	; Next row is the last row using a different tile
08F43 C6 08                     	DEC byte_RAM_8
08F45                           
08F45                           CreateObject_FrozenRocks_NextRow:
08F45 85 E7                     	STA byte_RAM_E7
08F47 4C 19 8F                  	JMP CreateObject_FrozenRocks_OuterLoop
08F4A                           
08F4A                           
08F4A                           ;
08F4A                           ; Horizontal platform lookup tables for World 5.
08F4A                           ;
08F4A                           ; Unlike HorizontalPlatform(Left/Middle/Right)Tiles, these support overlap with
08F4A                           ; the red tree background.
08F4A                           ;
08F4A                           HorizontalPlatformWithOverlapLeftTiles:
08F4A 75                        	.db BackgroundTile_LogLeft
08F4B 13                        	.db BackgroundTile_CloudLeft
08F4C 76                        	.db BackgroundTile_LogMiddle
08F4D                           HorizontalPlatformWithOverlapMiddleTiles:
08F4D 76                        	.db BackgroundTile_LogMiddle
08F4E 14                        	.db BackgroundTile_CloudMiddle
08F4F                           HorizontalPlatformWithOverlapRightTiles:
08F4F 77                        	.db BackgroundTile_LogRight
08F50 15                        	.db BackgroundTile_CloudRight
08F51 78                        	.db BackgroundTile_LogRightTree
08F52                           
08F52                           ;
08F52                           ; Creates a horizontal platform with special tiles for the endcaps.
08F52                           ;
08F52                           ; The endcaps use alternate tiles when they overlap a non-sky tile, which is how
08F52                           ; the game achieves the effect of a tree with branches in World 5.
08F52                           ;
08F52                           ; Amusingly, since cloud platforms also use this subroutine, their endcaps will
08F52                           ; turn into logs if they overlap another object.
08F52                           ;
08F52                           CreateObject_HorizontalPlatform_World5:
08F52 A4 E7                     	LDY byte_RAM_E7
08F54 AD 0E 05                  	LDA byte_RAM_50E
08F57 38                        	SEC
08F58 E9 0A                     	SBC #$0A
08F5A AA                        	TAX
08F5B 20 00 00                  	JSR CreateObject_HorizontalPlatform_World5CheckOverlap
08F5E                           
08F5E BD 4A 8F                  	LDA HorizontalPlatformWithOverlapLeftTiles, X
08F61 91 01                     	STA (byte_RAM_1), Y
08F63 A6 07                     	LDX byte_RAM_7
08F65 CE 0D 05                  	DEC byte_RAM_50D
08F68 F0 00                     	BEQ CreateObject_HorizontalPlatform_World5_Exit
08F6A                           
08F6A                           CreateObject_HorizontalPlatform_World5_Loop:
08F6A 20 00 00                  	JSR IncrementAreaXOffset
08F6D                           
08F6D BD 4D 8F                  	LDA HorizontalPlatformWithOverlapMiddleTiles, X
08F70 91 01                     	STA (byte_RAM_1), Y
08F72 CE 0D 05                  	DEC byte_RAM_50D
08F75 D0 F3                     	BNE CreateObject_HorizontalPlatform_World5_Loop
08F77                           
08F77                           CreateObject_HorizontalPlatform_World5_Exit:
08F77 20 00 00                  	JSR IncrementAreaXOffset
08F7A                           
08F7A 20 00 00                  	JSR CreateObject_HorizontalPlatform_World5CheckOverlap
08F7D                           
08F7D BD 4F 8F                  	LDA HorizontalPlatformWithOverlapRightTiles, X
08F80 91 01                     	STA (byte_RAM_1), Y
08F82 60                        	RTS
08F83                           
08F83                           
08F83                           ;
08F83                           ; Check if the next platform tile overlaps the background
08F83                           ;
08F83                           ; ##### Output
08F83                           ; - `X`: table offset for (2 if there is an overlap)
08F83                           ;
08F83                           CreateObject_HorizontalPlatform_World5CheckOverlap:
08F83 86 07                     	STX byte_RAM_7
08F85 B1 01                     	LDA (byte_RAM_1), Y
08F87 C9 40                     	CMP #BackgroundTile_Sky
08F89 F0 00                     	BEQ CreateObject_HorizontalPlatform_World5CheckOverlap_Exit
08F8B                           
08F8B                           	; otherwise, the platform is overlapping the background, so we need a special tile
08F8B A2 02                     	LDX #$02
08F8D                           
08F8D                           CreateObject_HorizontalPlatform_World5CheckOverlap_Exit:
08F8D 60                        	RTS
08F8E                           
08F8E                           
08F8E                           ;
08F8E                           ; Lookup table for tree background tiles
08F8E                           ;
08F8E                           TreeBackgroundTiles:
08F8E 5E                        	.db BackgroundTile_TreeBackgroundRight
08F8F 5D                        	.db BackgroundTile_TreeBackgroundMiddleLeft
08F90 5C                        	.db BackgroundTile_TreeBackgroundLeft
08F91                           
08F91                           
08F91                           ;
08F91                           ; Creates a tree background
08F91                           ;
08F91                           ; ##### Input
08F91                           ; - `byte_RAM_E7`: target tile placement offset
08F91                           ; - `byte_RAM_E8`: area page
08F91                           ;
08F91                           CreateObject_TreeBackground:
08F91                           	; width of the middle of the tree (0 = two tiles, 4 = ten tiles)
08F91 A9 04                     	LDA #$04
08F93 85 07                     	STA byte_RAM_7
08F95 A4 E7                     	LDY byte_RAM_E7
08F97 A6 E8                     	LDX byte_RAM_E8
08F99 20 00 00                  	JSR SetAreaPageAddr_Bank6
08F9C                           
08F9C A2 02                     	LDX #$02
08F9E                           
08F9E                           	; Stop when it touches the ground
08F9E B1 01                     	LDA (byte_RAM_1), Y
08FA0 C9 40                     	CMP #BackgroundTile_Sky
08FA2 D0 00                     	BNE CreateObject_TreeBackground_Exit
08FA4                           
08FA4                           CreateObject_TreeBackground_Loop:
08FA4                           	; Draw the left side of the tree
08FA4 BD 8E 8F                  	LDA TreeBackgroundTiles, X
08FA7 91 01                     	STA (byte_RAM_1), Y
08FA9 20 00 00                  	JSR IncrementAreaXOffset
08FAC                           
08FAC                           	; Draw the middle of the tree
08FAC CA                        	DEX
08FAD E0 01                     	CPX #$01
08FAF D0 00                     	BNE CreateObject_TreeBackground_Right
08FB1                           
08FB1 20 00 00                  	JSR CreateObject_TreeBackground_MiddleLoop
08FB4                           
08FB4                           CreateObject_TreeBackground_Right:
08FB4                           	; Draw the right side of the tree
08FB4 CA                        	DEX
08FB5 10 ED                     	BPL CreateObject_TreeBackground_Loop
08FB7                           
08FB7                           	; Try to draw the next row
08FB7 A4 E7                     	LDY byte_RAM_E7
08FB9 20 00 00                  	JSR IncrementAreaYOffset
08FBC                           
08FBC 84 E7                     	STY byte_RAM_E7
08FBE 4C 91 8F                  	JMP CreateObject_TreeBackground
08FC1                           
08FC1                           CreateObject_TreeBackground_Exit:
08FC1 60                        	RTS
08FC2                           
08FC2                           
08FC2                           ;
08FC2                           ; Loops through and creates n+1 pairs of tiles for the middle of the tree.
08FC2                           ;
08FC2                           CreateObject_TreeBackground_MiddleLoop:
08FC2 A9 5D                     	LDA #BackgroundTile_TreeBackgroundMiddleLeft
08FC4 91 01                     	STA (byte_RAM_1), Y
08FC6 20 00 00                  	JSR IncrementAreaXOffset
08FC9                           
08FC9 A9 5F                     	LDA #BackgroundTile_TreeBackgroundMiddleRight
08FCB 91 01                     	STA (byte_RAM_1), Y
08FCD 20 00 00                  	JSR IncrementAreaXOffset
08FD0                           
08FD0 C6 07                     	DEC byte_RAM_7
08FD2 10 EE                     	BPL CreateObject_TreeBackground_MiddleLoop
08FD4                           
08FD4 60                        	RTS
08FD5                           
08FD5                           
08FD5                           ; Unreferenced?
08FD5                           SomeUnusedTilesTop:
08FD5 52                        	.db BackgroundTile_LightDoor
08FD6 1D                        	.db BackgroundTile_CactusTop
08FD7 C0                        	.db BackgroundTile_PalmTreeTop
08FD8                           SomeUnusedTilesBottom:
08FD8 52                        	.db BackgroundTile_LightDoor
08FD9 1E                        	.db BackgroundTile_CactusMiddle
08FDA 82                        	.db BackgroundTile_PalmTreeTrunk
08FDB                           
08FDB                           
08FDB                           ;
08FDB                           ; This 3x9 tile entrance is used in 6-3
08FDB                           ;
08FDB                           RockWallEntranceTiles:
08FDB 9F                        	.db BackgroundTile_RockWallAngle
08FDC A0                        	.db BackgroundTile_RockWall
08FDD A0                        	.db BackgroundTile_RockWall
08FDE                           
08FDE A0                        	.db BackgroundTile_RockWall
08FDF A0                        	.db BackgroundTile_RockWall
08FE0 A0                        	.db BackgroundTile_RockWall
08FE1                           
08FE1 A0                        	.db BackgroundTile_RockWall
08FE2 A0                        	.db BackgroundTile_RockWall
08FE3 A0                        	.db BackgroundTile_RockWall
08FE4                           
08FE4 A5                        	.db BackgroundTile_RockWallEyeLeft
08FE5 A6                        	.db BackgroundTile_RockWallEyeRight
08FE6 A0                        	.db BackgroundTile_RockWall
08FE7                           
08FE7 A7                        	.db BackgroundTile_RockWallMouth
08FE8 A7                        	.db BackgroundTile_RockWallMouth
08FE9 A0                        	.db BackgroundTile_RockWall
08FEA                           
08FEA 83                        	.db BackgroundTile_DarkDoor
08FEB 83                        	.db BackgroundTile_DarkDoor
08FEC A0                        	.db BackgroundTile_RockWall
08FED                           
08FED 83                        	.db BackgroundTile_DarkDoor
08FEE 83                        	.db BackgroundTile_DarkDoor
08FEF A0                        	.db BackgroundTile_RockWall
08FF0                           
08FF0 83                        	.db BackgroundTile_DarkDoor
08FF1 83                        	.db BackgroundTile_DarkDoor
08FF2 A0                        	.db BackgroundTile_RockWall
08FF3                           
08FF3 83                        	.db BackgroundTile_DarkDoor
08FF4 83                        	.db BackgroundTile_DarkDoor
08FF5 A0                        	.db BackgroundTile_RockWall
08FF6                           
08FF6                           
08FF6                           ;
08FF6                           ; Creates the rock wall face entrance for 6-3.
08FF6                           ;
08FF6                           ; If you ask me, this is a lot of trouble for a one-off, especially since they
08FF6                           ; didn't correctly align the "eyes" and "teeth" tiles with the wall pattern!
08FF6                           ;
08FF6                           CreateObject_RockWallEntrance:
08FF6 A2 00                     	LDX #$00
08FF8                           
08FF8                           CreateObject_RockWallEntrance_Loop:
08FF8 A4 E7                     	LDY byte_RAM_E7
08FFA A9 02                     	LDA #$02
08FFC 85 09                     	STA byte_RAM_9
08FFE                           
08FFE                           CreateObject_RockWallEntrance_InnerLoop:
08FFE BD DB 8F                  	LDA RockWallEntranceTiles, X
09001 91 01                     	STA (byte_RAM_1), Y
09003 E8                        	INX
09004 C8                        	INY
09005 C6 09                     	DEC byte_RAM_9
09007 10 F5                     	BPL CreateObject_RockWallEntrance_InnerLoop
09009                           
09009 A4 E7                     	LDY byte_RAM_E7
0900B 98                        	TYA
0900C 18                        	CLC
0900D 69 10                     	ADC #$10
0900F 85 E7                     	STA byte_RAM_E7
09011 E0 1B                     	CPX #$1B
09013 D0 E3                     	BNE CreateObject_RockWallEntrance_Loop
09015                           
09015 60                        	RTS
09016                           
09016                           
09016                           ;
09016                           ; Door tile lookup tables
09016                           ;
09016                           DoorTopTiles:
09016 4F                        	.db BackgroundTile_DoorTop
09017 4F                        	.db BackgroundTile_DoorTop
09018 83                        	.db BackgroundTile_DarkDoor
09019 A9                        	.db BackgroundTile_DoorwayTop
0901A A8                        	.db BackgroundTile_WindowTop
0901B                           
0901B                           DoorBottomTiles:
0901B 50                        	.db BackgroundTile_DoorBottomLock
0901C 51                        	.db BackgroundTile_DoorBottom
0901D 83                        	.db BackgroundTile_DarkDoor
0901E 83                        	.db BackgroundTile_DarkDoor
0901F 83                        	.db BackgroundTile_DarkDoor
09020                           
09020                           
09020                           ;
09020                           ; Creates a door object.
09020                           ;
09020                           ; ##### Input
09020                           ; - `byte_RAM_E7`: target tile placement offset
09020                           ; - `byte_RAM_50E`: type of object to create
09020                           ;
09020                           CreateObject_Door:
09020 A4 E7                     	LDY byte_RAM_E7
09022 AD 0E 05                  	LDA byte_RAM_50E
09025 C9 09                     	CMP #$09
09027 D0 00                     	BNE CreateObject_Door_Unlocked
09029                           
09029                           	; If we've already used the key, create an unlocked door
09029 AD B0 04                  	LDA KeyUsed
0902C F0 00                     	BEQ CreateObject_Door_Unlocked
0902E                           
0902E                           	; Use the door two slots after the locked door for the unlocked version
0902E EE 0E 05                  	INC byte_RAM_50E
09031 EE 0E 05                  	INC byte_RAM_50E
09034                           
09034                           CreateObject_Door_Unlocked:
09034 AD 0E 05                  	LDA byte_RAM_50E
09037 38                        	SEC
09038 E9 09                     	SBC #$09
0903A AA                        	TAX
0903B BD 16 90                  	LDA DoorTopTiles, X
0903E 91 01                     	STA (byte_RAM_1), Y
09040 20 00 00                  	JSR IncrementAreaYOffset
09043                           
09043 BD 1B 90                  	LDA DoorBottomTiles, X
09046 91 01                     	STA (byte_RAM_1), Y
09048                           
09048                           IFNDEF DISABLE_DOOR_POINTERS
09048                           	;
09048                           	; For Worlds 1-5, the object after a door is used as an area pointer.
09048                           	;
09048                           	; This seems to be primarily a way to save space, as this method costs 1 byte
09048                           	; less than using a normal area pointer object.
09048                           	;
09048                           	; **But wait! Why not also use this space-saving trick for Worlds 6 and 7?**
09048                           	;
09048                           	; Regular level objects use the first nybble of the first byte for the Y
09048                           	; offset relative to the previous object. As it turns out, door pointer are
09048                           	; still "regular objects," at least insofar as their Y offset factors in when
09048                           	; rendering the level.
09048                           	;
09048                           	; For an area pointer, the first byte is the level offset. The first nybble of
09048                           	; that byte is $0 for levels 1-1 through 6-1, so there is no Y offset.
09048                           	; Door pointers starting in 6-2 would introduce a Y offset because that is
09048                           	; level offset is $10. Having everything after a door shift down by 1 row was
09048                           	; probably a nuisance when programming the levels.
09048                           	;
09048 AD 35 06                  	LDA CurrentWorld
0904B C9 05                     	CMP #$05
0904D F0 00                     	BEQ CreateObject_Door_Exit
0904F                           
0904F AD 35 06                  	LDA CurrentWorld
09052 C9 06                     	CMP #$06
09054 F0 00                     	BEQ CreateObject_Door_Exit
09056                           
09056 20 00 00                  	JSR LevelParser_EatDoorPointer
09059                           ENDIF
09059                           
09059                           CreateObject_Door_Exit:
09059 60                        	RTS
0905A                           
0905A                           
0905A                           ;
0905A                           ; Lookup table for World 7 mushroom house tiles.
0905A                           ;
0905A                           ; Interestingly, there are entries for black background tiles and jumpthrough
0905A                           ; cloud platforms in this table as well, although they are never used. Perhaps
0905A                           ; these houses would have included their own base at some point.
0905A                           ;
0905A                           MushroomHouseLeftTiles:
0905A 00                        	.db BackgroundTile_Black
0905B 13                        	.db BackgroundTile_CloudLeft
0905C CB                        	.db BackgroundTile_MushroomTopLeft
0905D 09                        	.db BackgroundTile_HouseLeft
0905E                           
0905E                           MushroomHouseMiddleTiles:
0905E 00                        	.db BackgroundTile_Black
0905F 14                        	.db BackgroundTile_CloudMiddle
09060 CD                        	.db BackgroundTile_MushroomTopMiddle
09061 0B                        	.db BackgroundTile_HouseMiddle
09062                           
09062                           MushroomHouseRightTiles:
09062 00                        	.db BackgroundTile_Black
09063 15                        	.db BackgroundTile_CloudRight
09064 CF                        	.db BackgroundTile_MushroomTopRight
09065 0D                        	.db BackgroundTile_HouseRight
09066                           
09066                           
09066                           ;
09066                           ; Draws a row of the mushroom house
09066                           ;
09066                           ; ##### Input
09066                           ; - `byte_RAM_E7`: target tile placement offset
09066                           ; - `byte_RAM_50D`: width of house
09066                           ; - `byte_RAM_50E`: offset in the tile lookup table plus $0A, for some reason
09066                           ;
09066                           CreateObject_MushroomHouseRow:
09066 A4 E7                     	LDY byte_RAM_E7
09068 AD 0E 05                  	LDA byte_RAM_50E
0906B 38                        	SEC
0906C E9 0A                     	SBC #$0A
0906E AA                        	TAX
0906F BD 5A 90                  	LDA MushroomHouseLeftTiles, X
09072 91 01                     	STA (byte_RAM_1), Y
09074 CE 0D 05                  	DEC byte_RAM_50D
09077 F0 00                     	BEQ CreateObject_MushroomHouseRow_Right
09079                           
09079                           CreateObject_MushroomHouseRow_Loop:
09079 20 00 00                  	JSR IncrementAreaXOffset
0907C                           
0907C BD 5E 90                  	LDA MushroomHouseMiddleTiles, X
0907F 91 01                     	STA (byte_RAM_1), Y
09081 CE 0D 05                  	DEC byte_RAM_50D
09084 D0 F3                     	BNE CreateObject_MushroomHouseRow_Loop
09086                           
09086                           CreateObject_MushroomHouseRow_Right:
09086 20 00 00                  	JSR IncrementAreaXOffset
09089                           
09089 BD 62 90                  	LDA MushroomHouseRightTiles, X
0908C 91 01                     	STA (byte_RAM_1), Y
0908E 60                        	RTS
0908F                           
0908F                           
0908F                           ;
0908F                           ; Draws the jump-through mushroom house platforms used in World 7
0908F                           ;
0908F                           CreateObject_MushroomJumpthroughPlatform:
0908F AD 0D 05                  	LDA byte_RAM_50D
09092 85 07                     	STA byte_RAM_7
09094 A9 0C                     	LDA #$0C
09096 8D 0E 05                  	STA byte_RAM_50E
09099                           	; Draw roof of mushroom house
09099 20 66 90                  	JSR CreateObject_MushroomHouseRow
0909C                           
0909C                           CreateObject_MushroomJumpthroughPlatform_Loop:
0909C A5 E7                     	LDA byte_RAM_E7
0909E 18                        	CLC
0909F 69 10                     	ADC #$10
090A1 85 E7                     	STA byte_RAM_E7
090A3 A9 0D                     	LDA #$0D
090A5 8D 0E 05                  	STA byte_RAM_50E
090A8                           	LDA_abs byte_RAM_7
090A8                           	IFDEF COMPATIBILITY
090A8 AD                        		.db $ad
090A9 07 00                     		.dw byte_RAM_7
090AB                           	ELSE
090AB                           		LDA byte_RAM_7
090AB                           		NOP_compat
090AB                           	ENDIF
090AB                           
090AB 8D 0D 05                  	STA byte_RAM_50D
090AE A6 E8                     	LDX byte_RAM_E8
090B0 20 00 00                  	JSR SetAreaPageAddr_Bank6
090B3                           
090B3 A4 E7                     	LDY byte_RAM_E7
090B5 B1 01                     	LDA (byte_RAM_1), Y
090B7 C9 40                     	CMP #BackgroundTile_Sky
090B9 D0 00                     	BNE CreateObject_MushroomJumpthroughPlatform_Exit
090BB                           
090BB                           	; Draw body of mushroom house
090BB 20 66 90                  	JSR CreateObject_MushroomHouseRow
090BE                           
090BE A5 E7                     	LDA byte_RAM_E7
090C0 C9 E0                     	CMP #$E0
090C2 90 D8                     	BCC CreateObject_MushroomJumpthroughPlatform_Loop
090C4                           
090C4                           CreateObject_MushroomJumpthroughPlatform_Exit:
090C4 60                        	RTS
090C5                           
090C5                           
090C5                           ;
090C5                           ; Lookup table for pillar tiles, arranged by world
090C5                           ;
090C5                           PillarTopTiles:
090C5 79                        	.db BackgroundTile_LogPillarTop1
090C6 1D                        	.db BackgroundTile_CactusTop
090C7 79                        	.db BackgroundTile_LogPillarTop1
090C8 20                        	.db BackgroundTile_LogPillarTop0
090C9 79                        	.db BackgroundTile_LogPillarTop1
090CA 1D                        	.db BackgroundTile_CactusTop
090CB AA                        	.db BackgroundTile_ColumnPillarTop2
090CC                           
090CC                           PillarBottomTiles:
090CC 7A                        	.db BackgroundTile_LogPillarMiddle1
090CD 1E                        	.db BackgroundTile_CactusMiddle
090CE 7A                        	.db BackgroundTile_LogPillarMiddle1
090CF 21                        	.db BackgroundTile_LogPillarMiddle0
090D0 7A                        	.db BackgroundTile_LogPillarMiddle1
090D1 1E                        	.db BackgroundTile_CactusMiddle
090D2 AB                        	.db BackgroundTile_ColumnPillarMiddle2
090D3                           
090D3                           
090D3                           ;
090D3                           ; Draws a pillar that extends to the ground
090D3                           ;
090D3                           ; ##### Input
090D3                           ; - `byte_RAM_E7`: target tile placement offset
090D3                           ;
090D3                           CreateObject_Pillar:
090D3 AE 35 06                  	LDX CurrentWorldTileset
090D6 A4 E7                     	LDY byte_RAM_E7
090D8 BD C5 90                  	LDA PillarTopTiles, X
090DB 91 01                     	STA (byte_RAM_1), Y
090DD                           
090DD                           CreateObject_Pillar_Loop:
090DD 20 00 00                  	JSR IncrementAreaYOffset
090E0                           
090E0 B1 01                     	LDA (byte_RAM_1), Y
090E2 C9 40                     	CMP #BackgroundTile_Sky
090E4 D0 00                     	BNE CreateObject_Pillar_Exit
090E6                           
090E6 AE 35 06                  	LDX CurrentWorldTileset
090E9 BD CC 90                  	LDA PillarBottomTiles, X
090EC 91 01                     	STA (byte_RAM_1), Y
090EE                           
090EE                           	;
090EE                           	; Normally the pillars extend until they hit another tile, wrapping around to
090EE                           	; the top of the next page, if necessary.
090EE                           	;
090EE                           	; This World 5 check prevents logs from coming down from the sky in the last
090EE                           	; area before ClawGrip's boss room.
090EE                           	;
090EE AD 35 06                  	LDA CurrentWorldTileset
090F1 C9 04                     	CMP #$04
090F3 D0 E8                     	BNE CreateObject_Pillar_Loop
090F5                           
090F5                           	; Prevent the pillar from looping around to the next page
090F5 C0 E0                     	CPY #$E0
090F7 90 E4                     	BCC CreateObject_Pillar_Loop
090F9                           
090F9                           CreateObject_Pillar_Exit:
090F9 60                        	RTS
090FA                           
090FA                           
090FA                           ;
090FA                           ; Draws one horn of Wart's vegetable thrower
090FA                           ;
090FA                           ; ##### Input
090FA                           ; - `byte_RAM_E7`: target tile placement offset
090FA                           ;
090FA                           CreateObject_Horn:
090FA A4 E7                     	LDY byte_RAM_E7
090FC A9 8C                     	LDA #BackgroundTile_HornTopLeft
090FE 91 01                     	STA (byte_RAM_1), Y
09100 C8                        	INY
09101 A9 8D                     	LDA #BackgroundTile_HornTopRight
09103 91 01                     	STA (byte_RAM_1), Y
09105 A5 E7                     	LDA byte_RAM_E7
09107 18                        	CLC
09108 69 10                     	ADC #$10
0910A A8                        	TAY
0910B A9 8E                     	LDA #BackgroundTile_HornBottomLeft
0910D 91 01                     	STA (byte_RAM_1), Y
0910F C8                        	INY
09110 A9 8F                     	LDA #BackgroundTile_HornBottomRight
09112 91 01                     	STA (byte_RAM_1), Y
09114 60                        	RTS
09115                           
09115                           
09115                           ;
09115                           ; Draws the drawbridge chain
09115                           ;
09115                           ; ##### Input
09115                           ; - `byte_RAM_E7`: target tile placement offset
09115                           ;
09115                           CreateObject_DrawBridgeChain:
09115 A4 E7                     	LDY byte_RAM_E7
09117                           
09117                           CreateObject_DrawBridgeChain_Loop:
09117 A9 58                     	LDA #BackgroundTile_DrawBridgeChain
09119 91 01                     	STA (byte_RAM_1), Y
0911B 98                        	TYA
0911C 18                        	CLC
0911D 69 0F                     	ADC #$F
0911F A8                        	TAY
09120 CE 0D 05                  	DEC byte_RAM_50D
09123 D0 F2                     	BNE CreateObject_DrawBridgeChain_Loop
09125                           
09125 60                        	RTS
09126                           
09126                           
09126                           IFNDEF EXPAND_TABLES
09126                           ; Unused space in the original ($9126 - $91FF)
09126                           unusedSpace $9200, $FF
09126                           	IFDEF PRESERVE_UNUSED_SPACE
09126 FF FF FF FF FF FF FF FF.. 		.pad $9200, $FF
09200                           	ENDIF
09200                           ENDIF
09200                           
09200                           ;
09200                           ; ## Ground setting data
09200                           ;
09200                           ; The ground setting defines a single column (or row, for vertical areas) where each row (or column)
09200                           ; can be one of four tiles. These tiles are repeated until an object changes  the ground setting or
09200                           ; the renderer reaches the the end of the area.
09200                           ;
09200                           ; An area has its initial ground setting set in the header, but it can be changed mid-area using the
09200                           ; `$F0` and `$F1` special objects.
09200                           ;
09200                           
09200                           ;
09200                           ; #### Horizontal ground set data
09200                           ;
09200                           ; Two bits per tile are used to select from one of the four ground appearance tiles. The tiles are
09200                           ; defined from top-to-bottom, except for the last tile, which is actually the top row!
09200                           ;
09200                           ; Ground appearance tiles are defined xpecifically in the `WorldXGroundTilesHorizontal` lookup
09200                           ; tables, but here's an example of how they apply:
09200                           ;
09200                           ; - `%00`: default background (ie. sky)
09200                           ; - `%01`: secondary platform (eg. sand)
09200                           ; - `%10`: primary platform (eg. grass)
09200                           ; - `%11`: secondary background (eg. black background in 3-2)
09200                           ;
09200                           HorizontalGroundSetData:
09200                           	; The ruler here is an assumption based on the comments above,
09200                           	; so take it with a grain of salt or two
09200                           	;     1 2 3 4   5 6 7 8   9 A B C   D E F 0
09200 00 00 00 24               	.db %00000000,%00000000,%00000000,%00100100 ; $00
09204 00 00 02 54               	.db %00000000,%00000000,%00000010,%01010100 ; $01
09208 00 02 55 54               	.db %00000000,%00000010,%01010101,%01010100 ; $02
0920C 00 02 7F 54               	.db %00000000,%00000010,%01111111,%01010100 ; $03
09210 00 02 7F D4               	.db %00000000,%00000010,%01111111,%11010100 ; $04
09214 00 03 FF 54               	.db %00000000,%00000011,%11111111,%01010100 ; $05
09218 00 02 5F FC               	.db %00000000,%00000010,%01011111,%11111100 ; $06
0921C 00 03 FF FC               	.db %00000000,%00000011,%11111111,%11111100 ; $07
09220 00 00 00 00               	.db %00000000,%00000000,%00000000,%00000000 ; $08
09224 55 55 55 7C               	.db %01010101,%01010101,%01010101,%01111100 ; $09
09228 E7 9E 79 E4               	.db %11100111,%10011110,%01111001,%11100100 ; $0A
0922C 00 0E 79 E4               	.db %00000000,%00001110,%01111001,%11100100 ; $0B
09230 00 00 09 E4               	.db %00000000,%00000000,%00001001,%11100100 ; $0C
09234 00 00 00 24               	.db %00000000,%00000000,%00000000,%00100100 ; $0D
09238 E0 0E 79 E4               	.db %11100000,%00001110,%01111001,%11100100 ; $0E
0923C E4 00 09 E4               	.db %11100100,%00000000,%00001001,%11100100 ; $0F
09240 E4 00 00 24               	.db %11100100,%00000000,%00000000,%00100100 ; $10
09244 E7 90 09 E4               	.db %11100111,%10010000,%00001001,%11100100 ; $11
09248 E7 9E 70 24               	.db %11100111,%10011110,%01110000,%00100100 ; $12
0924C E7 9E 40 24               	.db %11100111,%10011110,%01000000,%00100100 ; $13
09250 E7 9C 00 24               	.db %11100111,%10011100,%00000000,%00100100 ; $14
09254 E0 0E 40 24               	.db %11100000,%00001110,%01000000,%00100100 ; $15
09258 00 00 00 E4               	.db %00000000,%00000000,%00000000,%11100100 ; $16
0925C E4 00 00 00               	.db %11100100,%00000000,%00000000,%00000000 ; $17
09260 E7 9E 79 E4               	.db %11100111,%10011110,%01111001,%11100100 ; $18
09264 E7 90 01 E4               	.db %11100111,%10010000,%00000001,%11100100 ; $19
09268 E0 00 01 E4               	.db %11100000,%00000000,%00000001,%11100100 ; $1A
0926C E7 90 00 24               	.db %11100111,%10010000,%00000000,%00100100 ; $1B
09270 E0 00 00 24               	.db %11100000,%00000000,%00000000,%00100100 ; $1C
09274 00 00 00 24               	.db %00000000,%00000000,%00000000,%00100100 ; $1D
09278 00 00 00 24               	.db %00000000,%00000000,%00000000,%00100100 ; $1E
0927C                           
0927C                           	; Based on the level header parsing code, $1F seems like it may have been reserved for some
0927C                           	; special behavior at some point, but it doesn't appear to be implemented.
0927C                           IFDEF EXPAND_TABLES
0927C                           	.db %00000000,%00000000,%00000000,%00100100 ; $1F
0927C                           ENDIF
0927C                           
0927C                           ;
0927C                           ; #### Vertical ground set data
0927C                           ;
0927C                           ; Two bits per tile are used to select from one of the four ground appearance tiles. The tiles are
0927C                           ; defined from left-to-right.
0927C                           ;
0927C                           ; Ground appearance tiles are defined xpecifically in the `WorldXGroundTilesVertical` lookup
0927C                           ; tables, but here's an example of how they apply:
0927C                           ;
0927C                           ; - `%00`: default background (ie. sky)
0927C                           ; - `%01`: secondary platform (eg. bombable wall, sand)
0927C                           ; - `%10`: primary platform
0927C                           ; - `%11`: secondary background
0927C                           ;
0927C                           VerticalGroundSetData:
0927C                           	;     0 1 2 3   4 5 6 7   8 9 A B   C D E F
0927C AA AA AA AA               	.db %10101010,%10101010,%10101010,%10101010 ; $00
09280 80 00 00 02               	.db %10000000,%00000000,%00000000,%00000010 ; $01
09284 AA 00 00 AA               	.db %10101010,%00000000,%00000000,%10101010 ; $02
09288 FA 00 00 AF               	.db %11111010,%00000000,%00000000,%10101111 ; $03
0928C FE 00 00 BF               	.db %11111110,%00000000,%00000000,%10111111 ; $04
09290 FA 80 02 AF               	.db %11111010,%10000000,%00000010,%10101111 ; $05
09294 E8 00 00 2B               	.db %11101000,%00000000,%00000000,%00101011 ; $06
09298 E0 00 00 0B               	.db %11100000,%00000000,%00000000,%00001011 ; $07
0929C FA 95 56 AF               	.db %11111010,%10010101,%01010110,%10101111 ; $08
092A0 95 00 00 56               	.db %10010101,%00000000,%00000000,%01010110 ; $09
092A4 A5 55 55 5A               	.db %10100101,%01010101,%01010101,%01011010 ; $0A
092A8 A5 5A A5 5A               	.db %10100101,%01011010,%10100101,%01011010 ; $0B
092AC 55 55 55 55               	.db %01010101,%01010101,%01010101,%01010101 ; $0C
092B0 95 55 55 56               	.db %10010101,%01010101,%01010101,%01010110 ; $0D
092B4 95 5A A5 56               	.db %10010101,%01011010,%10100101,%01010110 ; $0E
092B8 A9 55 55 6A               	.db %10101001,%01010101,%01010101,%01101010 ; $0F
092BC 81 55 55 42               	.db %10000001,%01010101,%01010101,%01000010 ; $10
092C0 AA A5 55 5A               	.db %10101010,%10100101,%01010101,%01011010 ; $11
092C4 A5 55 5A AA               	.db %10100101,%01010101,%01011010,%10101010 ; $12
092C8 00 00 00 00               	.db %00000000,%00000000,%00000000,%00000000 ; $13
092CC 80 00 00 02               	.db %10000000,%00000000,%00000000,%00000010 ; $14
092D0 A0 00 00 0A               	.db %10100000,%00000000,%00000000,%00001010 ; $15
092D4 AA 00 00 AA               	.db %10101010,%00000000,%00000000,%10101010 ; $16
092D8 AA A0 0A AA               	.db %10101010,%10100000,%00001010,%10101010 ; $17
092DC 80 00 0A AA               	.db %10000000,%00000000,%00001010,%10101010 ; $18
092E0 80 0A AA AA               	.db %10000000,%00001010,%10101010,%10101010 ; $19
092E4 AA AA A0 02               	.db %10101010,%10101010,%10100000,%00000010 ; $1A
092E8 AA A0 00 02               	.db %10101010,%10100000,%00000000,%00000010 ; $1B
092EC A0 0A A0 0A               	.db %10100000,%00001010,%10100000,%00001010 ; $1C
092F0 A0 00 00 00               	.db %10100000,%00000000,%00000000,%00000000 ; $1D
092F4 00 00 00 0A               	.db %00000000,%00000000,%00000000,%00001010 ; $1E
092F8                           	; Based on the level header parsing code, %00011111 seems like it may have been reserved for some
092F8                           	; special behavior at some point, but it doesn't appear to be implemented.
092F8                           IFDEF EXPAND_TABLES
092F8                           	.db %00000000,%00000000,%00000000,%00001010 ; $1F
092F8                           ENDIF
092F8                           
092F8                           
092F8                           ;
092F8                           ; Lookup tables for decoded level data by page
092F8                           ;
092F8                           DecodedLevelPageStartLo_Bank6:
092F8 00                        	.db <DecodedLevelData
092F9 F0                        	.db <(DecodedLevelData+$00F0)
092FA E0                        	.db <(DecodedLevelData+$01E0)
092FB D0                        	.db <(DecodedLevelData+$02D0)
092FC C0                        	.db <(DecodedLevelData+$03C0)
092FD B0                        	.db <(DecodedLevelData+$04B0)
092FE A0                        	.db <(DecodedLevelData+$05A0)
092FF 90                        	.db <(DecodedLevelData+$0690)
09300 80                        	.db <(DecodedLevelData+$0780)
09301 70                        	.db <(DecodedLevelData+$0870)
09302 00                        	.db <(SubAreaTileLayout)
09303                           
09303                           DecodedLevelPageStartHi_Bank6:
09303 60                        	.db >DecodedLevelData
09304 60                        	.db >(DecodedLevelData+$00F0)
09305 61                        	.db >(DecodedLevelData+$01E0)
09306 62                        	.db >(DecodedLevelData+$02D0)
09307 63                        	.db >(DecodedLevelData+$03C0)
09308 64                        	.db >(DecodedLevelData+$04B0)
09309 65                        	.db >(DecodedLevelData+$05A0)
0930A 66                        	.db >(DecodedLevelData+$0690)
0930B 67                        	.db >(DecodedLevelData+$0780)
0930C 68                        	.db >(DecodedLevelData+$0870)
0930D 07                        	.db >(SubAreaTileLayout)
0930E                           
0930E                           
0930E                           ;
0930E                           ; Subspace tile remapping
0930E                           ; =======================
0930E                           ;
0930E                           ; The horizontal order of tiles is reversed in subspace. Tiles with an obvious
0930E                           ; left/right direction (eg. the corners of green platforms) appear backwards
0930E                           ; until they're swapped with the corresponding right/left version.
0930E                           ;
0930E                           ; This is handled in two tables corresponding tables. If a tile is found in the
0930E                           ; first table, it will be replaced with the tile at the corresponding offset in
0930E                           ; the second table.
0930E                           ;
0930E                           SubspaceTilesSearch:
0930E 75                        	.db $75 ; $00
0930F 77                        	.db $77 ; $01
09310 CA                        	.db $CA ; $02
09311 CE                        	.db $CE ; $03
09312 C7                        	.db $C7 ; $04
09313                           IFNDEF FIX_SUBSPACE_TILES
09313 C8                        	.db $C8 ; $05 ; BUG: This should be $C9
09314                           ENDIF
09314                           IFDEF FIX_SUBSPACE_TILES
09314                           	.db $C9 ; $05
09314                           ENDIF
09314 D0                        	.db $D0 ; $06
09315 D1                        	.db $D1 ; $07
09316 01                        	.db $01 ; $08
09317 02                        	.db $02 ; $09
09318 84                        	.db $84 ; $0A
09319 87                        	.db $87 ; $0B
0931A 60                        	.db $60 ; $0C
0931B 62                        	.db $62 ; $0D
0931C 13                        	.db $13 ; $0E
0931D 15                        	.db $15 ; $0F
0931E 53                        	.db $53 ; $10
0931F 55                        	.db $55 ; $11
09320 CB                        	.db $CB ; $12
09321 CF                        	.db $CF ; $13
09322 09                        	.db $09 ; $14
09323 0D                        	.db $0D ; $15
09324                           
09324                           SubspaceTilesReplace:
09324 77                        	.db $77 ; $00
09325 75                        	.db $75 ; $01
09326 CE                        	.db $CE ; $02
09327 CA                        	.db $CA ; $03
09328                           IFNDEF FIX_SUBSPACE_TILES
09328 C8                        	.db $C8 ; $04 ; BUG: This should be $C9
09329                           ENDIF
09329                           IFDEF FIX_SUBSPACE_TILES
09329                           	.db $C9 ; $04
09329                           ENDIF
09329 C7                        	.db $C7 ; $05
0932A D1                        	.db $D1 ; $06
0932B D0                        	.db $D0 ; $07
0932C 02                        	.db $02 ; $08
0932D 01                        	.db $01 ; $09
0932E 87                        	.db $87 ; $0A
0932F 84                        	.db $84 ; $0B
09330 62                        	.db $62 ; $0C
09331 60                        	.db $60 ; $0D
09332 15                        	.db $15 ; $0E
09333 13                        	.db $13 ; $0F
09334 55                        	.db $55 ; $10
09335 53                        	.db $53 ; $11
09336 CF                        	.db $CF ; $12
09337 CB                        	.db $CB ; $13
09338 0D                        	.db $0D ; $14
09339 09                        	.db $09 ; $15
0933A                           
0933A                           
0933A                           ;
0933A                           ; Resets level data and PPU scrolling.
0933A                           ;
0933A                           ; This starts at the end of the last page and works backwards to create a blank slate upon which to
0933A                           ; render the current area's level data.
0933A                           ;
0933A                           ResetLevelData:
0933A A9 00                     	LDA #<DecodedLevelData
0933C 85 0A                     	STA byte_RAM_A
0933E A0 69                     	LDY #>(DecodedLevelData+$0900)
09340 84 0B                     	STY byte_RAM_B
09342 A0 5F                     	LDY #>(DecodedLevelData-$0100)
09344                           
09344                           	; Set all tiles to sky
09344 A9 40                     	LDA #BackgroundTile_Sky
09346                           
09346                           ResetLevelData_Loop:
09346 91 0A                     	STA (byte_RAM_A), Y
09348 88                        	DEY
09349 C0 FF                     	CPY #$FF
0934B D0 F9                     	BNE ResetLevelData_Loop
0934D                           
0934D C6 0B                     	DEC byte_RAM_B
0934F A6 0B                     	LDX byte_RAM_B
09351 E0 60                     	CPX #>DecodedLevelData
09353 B0 F1                     	BCS ResetLevelData_Loop
09355                           
09355 A9 00                     	LDA #$00
09357 85 FD                     	STA PPUScrollXMirror
09359 85 FC                     	STA PPUScrollYMirror
0935B 8D 36 05                  	STA CurrentLevelPageX
0935E 85 D5                     	STA byte_RAM_D5
09360 85 E6                     	STA byte_RAM_E6
09362 85 CA                     	STA ScreenYHi
09364 85 CB                     	STA ScreenYLo
09366 8D BE 04                  	STA ScreenBoundaryLeftHi
09369 8D C0 04                  	STA ScreenBoundaryLeftLo
0936C                           	STA_abs NeedsScroll
0936C                           	IFDEF COMPATIBILITY
0936C 8D                        		.db $8d
0936D D8 00                     		.dw NeedsScroll
0936F                           	ELSE
0936F                           		STA NeedsScroll
0936F                           		NOP_compat
0936F                           	ENDIF
0936F 60                        	RTS
09370                           
09370                           
09370                           ;
09370                           ; Reads a color from the world's background palette
09370                           ;
09370                           ; ##### Input
09370                           ; - `X`: color index
09370                           ;
09370                           ; ##### Output
09370                           ; - `A`: background palette color
09370                           ;
09370                           ReadWorldBackgroundColor:
09370                           	; stash X and Y registers
09370 84 0E                     	STY byte_RAM_E
09372 86 0D                     	STX byte_RAM_D
09374                           	; look up the address of the current world's palette
09374 AC 35 06                  	LDY CurrentWorldTileset
09377 B9 00 80                  	LDA WorldBackgroundPalettePointersLo, Y
0937A 85 07                     	STA byte_RAM_7
0937C B9 0E 80                  	LDA WorldBackgroundPalettePointersHi, Y
0937F 85 08                     	STA byte_RAM_8
09381                           	; load the color
09381 A4 0D                     	LDY byte_RAM_D
09383 B1 07                     	LDA (byte_RAM_7), Y
09385                           	; restore prior X and Y registers
09385 A4 0E                     	LDY byte_RAM_E
09387 A6 0D                     	LDX byte_RAM_D
09389 60                        	RTS
0938A                           
0938A                           ;
0938A                           ; Reads a color from the world's sprite palette
0938A                           ;
0938A                           ; ##### Input
0938A                           ; - `X`: color index
0938A                           ;
0938A                           ; ##### Output
0938A                           ; - `A`: background palette color
0938A                           ;
0938A                           ReadWorldSpriteColor:
0938A                           	; stash X and Y registers
0938A 84 0E                     	STY byte_RAM_E
0938C 86 0D                     	STX byte_RAM_D
0938E                           	; look up the address of the current world's palette
0938E AC 35 06                  	LDY CurrentWorldTileset
09391 B9 07 80                  	LDA WorldSpritePalettePointersLo, Y
09394 85 07                     	STA byte_RAM_7
09396 B9 15 80                  	LDA WorldSpritePalettePointersHi, Y
09399 85 08                     	STA byte_RAM_8
0939B                           	; load the color
0939B A4 0D                     	LDY byte_RAM_D
0939D B1 07                     	LDA (byte_RAM_7), Y
0939F                           	; restore prior X and Y registers
0939F A4 0E                     	LDY byte_RAM_E
093A1 A6 0D                     	LDX byte_RAM_D
093A3 60                        	RTS
093A4                           
093A4                           ;
093A4                           ; Loads the current area or jar palette
093A4                           ;
093A4                           LoadCurrentPalette:
093A4 AD 28 06                  	LDA InSubspaceOrJar
093A7 C9 01                     	CMP #$01
093A9 D0 00                     	BNE LoadCurrentPalette_NotJar
093AB                           
093AB                           	; This function call will overwrite the
093AB                           	; normal level loading area with $7A00
093AB 20 00 00                  	JSR HijackLevelDataCopyAddressWithJar
093AE                           
093AE 4C 00 00                  	JMP LoadCurrentPalette_AreaOffset
093B1                           
093B1                           ; ---------------------------------------------------------------------------
093B1                           
093B1                           LoadCurrentPalette_NotJar:
093B1 20 00 00                  	JSR RestoreLevelDataCopyAddress
093B4                           
093B4                           ; Read the palette offset from the area header
093B4                           LoadCurrentPalette_AreaOffset:
093B4 A0 00                     	LDY #$00
093B6 B1 05                     	LDA (byte_RAM_5), Y
093B8                           
093B8                           ; End of function LoadCurrentPalette
093B8                           
093B8                           ;
093B8                           ; Loads a world palette to RAM
093B8                           ;
093B8                           ; ##### Input
093B8                           ; - `A`: background palette header byte
093B8                           ;
093B8                           ApplyPalette:
093B8                           	; Read background palette index from area header byte
093B8 85 0F                     	STA byte_RAM_F
093BA 29 38                     	AND #%00111000
093BC 0A                        	ASL A
093BD AA                        	TAX
093BE 20 70 93                  	JSR ReadWorldBackgroundColor
093C1                           
093C1                           	; Something PPU-related. If it's not right, the colors are very wrong.
093C1 8D BC 04                  	STA SkyColor
093C4 A9 3F                     	LDA #$3F
093C6 8D 01 03                  	STA PPUBuffer_301
093C9 A9 00                     	LDA #$00
093CB 8D 02 03                  	STA PPUBuffer_301 + 1
093CE A9 20                     	LDA #$20
093D0 8D 03 03                  	STA PPUBuffer_301 + 2
093D3                           
093D3 A0 00                     	LDY #$00
093D5                           ApplyPalette_BackgroundLoop:
093D5 20 70 93                  	JSR ReadWorldBackgroundColor
093D8 99 04 03                  	STA PPUBuffer_301 + 3, Y
093DB E8                        	INX
093DC C8                        	INY
093DD C0 10                     	CPY #$10
093DF 90 F4                     	BCC ApplyPalette_BackgroundLoop
093E1                           
093E1                           	; Read sprite palette index from area header byte
093E1 A5 0F                     	LDA byte_RAM_F
093E3 29 03                     	AND #$03
093E5 0A                        	ASL A
093E6 85 0F                     	STA byte_RAM_F
093E8 0A                        	ASL A
093E9 65 0F                     	ADC byte_RAM_F
093EB 0A                        	ASL A
093EC AA                        	TAX
093ED                           
093ED A0 00                     	LDY #$00
093EF                           ApplyPalette_SpriteLoop:
093EF 20 8A 93                  	JSR ReadWorldSpriteColor
093F2 99 18 03                  	STA PPUBuffer_301 + $17, Y
093F5 E8                        	INX
093F6 C8                        	INY
093F7 C0 0C                     	CPY #$0C
093F9 90 F4                     	BCC ApplyPalette_SpriteLoop
093FB                           
093FB A9 00                     	LDA #$00
093FD 99 18 03                  	STA PPUBuffer_301 + $17, Y
09400 A0 03                     	LDY #$03
09402                           
09402                           ApplyPalette_PlayerLoop:
09402 B9 37 06                  	LDA RestorePlayerPalette0, Y
09405 99 14 03                  	STA PPUBuffer_301 + $13, Y
09408 88                        	DEY
09409 10 F7                     	BPL ApplyPalette_PlayerLoop
0940B                           
0940B A2 03                     	LDX #$03
0940D A0 10                     	LDY #$10
0940F                           ApplyPalette_SkyLoop:
0940F AD BC 04                  	LDA SkyColor
09412 99 04 03                  	STA PPUBuffer_301 + 3, Y
09415 C8                        	INY
09416 C8                        	INY
09417 C8                        	INY
09418 C8                        	INY
09419 CA                        	DEX
0941A 10 F3                     	BPL ApplyPalette_SkyLoop
0941C                           
0941C 60                        	RTS
0941D                           
0941D                           
0941D                           GenerateSubspaceArea:
0941D AD 32 05                  	LDA CurrentLevelArea
09420 8D 19 05                  	STA CurrentLevelAreaCopy
09423 A9 30                     	LDA #$30 ; subspace palette (works like area header byte)
09425 85 0F                     	STA byte_RAM_F ; why...?
09427 20 B8 93                  	JSR ApplyPalette
0942A                           
0942A AD BE 04                  	LDA ScreenBoundaryLeftHi
0942D 85 E8                     	STA byte_RAM_E8
0942F                           
0942F AD C0 04                  	LDA ScreenBoundaryLeftLo
09432 18                        	CLC
09433 69 08                     	ADC #$08
09435 90 00                     	BCC GenerateSubspaceArea_SetMoveCameraX
09437                           
09437 E6 E8                     	INC byte_RAM_E8
09439                           
09439                           GenerateSubspaceArea_SetMoveCameraX:
09439 29 F0                     	AND #$F0
0943B 48                        	PHA
0943C                           
0943C 38                        	SEC
0943D ED C0 04                  	SBC ScreenBoundaryLeftLo
09440 85 BA                     	STA MoveCameraX
09442                           
09442 68                        	PLA
09443 4A                        	LSR A
09444 4A                        	LSR A
09445 4A                        	LSR A
09446 4A                        	LSR A
09447 85 E5                     	STA byte_RAM_E5
09449                           
09449 A9 00                     	LDA #$00
0944B 85 E6                     	STA byte_RAM_E6
0944D                           
0944D A5 E8                     	LDA byte_RAM_E8
0944F 85 0D                     	STA byte_RAM_D
09451                           
09451 20 00 00                  	JSR SetTileOffsetAndAreaPageAddr_Bank6
09454                           
09454 A4 E7                     	LDY byte_RAM_E7
09456 A2 0F                     	LDX #$0F
09458                           
09458                           GenerateSubspaceArea_TileRemapLoop:
09458 B1 01                     	LDA (byte_RAM_1), Y
0945A 20 00 00                  	JSR DoSubspaceTileRemap
0945D                           
0945D 9D 00 07                  	STA SubAreaTileLayout, X
09460 98                        	TYA
09461 18                        	CLC
09462 69 10                     	ADC #$10
09464 A8                        	TAY
09465 8A                        	TXA
09466 18                        	CLC
09467 69 10                     	ADC #$10
09469 AA                        	TAX
0946A 29 F0                     	AND #$F0
0946C D0 EA                     	BNE GenerateSubspaceArea_TileRemapLoop
0946E                           
0946E 98                        	TYA
0946F 29 0F                     	AND #$0F
09471 A8                        	TAY
09472 20 00 00                  	JSR IncrementAreaXOffset
09475                           
09475 CA                        	DEX
09476 10 E0                     	BPL GenerateSubspaceArea_TileRemapLoop
09478                           
09478 60                        	RTS
09479                           
09479                           
09479                           ;
09479                           ; Remaps a single subspace tile.
09479                           ;
09479                           ; This also handles creating the mushroom sprites.
09479                           ;
09479                           ; ##### Input
09479                           ; - `A`: input tile
09479                           ;
09479                           ; ##### Output
09479                           ; - `A`: output tile
09479                           ;
09479                           DoSubspaceTileRemap:
09479 84 08                     	STY byte_RAM_8
0947B 86 07                     	STX byte_RAM_7
0947D A2 15                     	LDX #(SubspaceTilesReplace - SubspaceTilesSearch - 1)
0947F                           
0947F                           DoSubspaceTileRemap_Loop:
0947F DD 0E 93                  	CMP SubspaceTilesSearch, X
09482 F0 00                     	BEQ DoSubspaceTileRemap_ReplaceTile
09484                           
09484 CA                        	DEX
09485 10 F8                     	BPL DoSubspaceTileRemap_Loop
09487                           
09487 C9 41                     	CMP #BackgroundTile_SubspaceMushroom1
09489 F0 00                     	BEQ DoSubspaceTileRemap_CheckCreateMushroom
0948B                           
0948B C9 42                     	CMP #BackgroundTile_SubspaceMushroom2
0948D F0 00                     	BEQ DoSubspaceTileRemap_CheckCreateMushroom
0948F                           
0948F 4C 00 00                  	JMP DoSubspaceTileRemap_Exit
09492                           
09492                           DoSubspaceTileRemap_CheckCreateMushroom:
09492 38                        	SEC
09493 E9 41                     	SBC #BackgroundTile_SubspaceMushroom1
09495 A8                        	TAY
09496 B9 FB 04                  	LDA Mushroom1Pulled, Y
09499 D0 00                     	BNE DoSubspaceTileRemap_AfterCreateMushroom
0949B                           
0949B A6 07                     	LDX byte_RAM_7
0949D 20 00 00                  	JSR CreateSubspaceMushroomObject
094A0                           
094A0                           DoSubspaceTileRemap_AfterCreateMushroom:
094A0 A9 41                     	LDA #BackgroundTile_SubspaceMushroom1
094A2 4C 00 00                  	JMP DoSubspaceTileRemap_Exit
094A5                           
094A5                           DoSubspaceTileRemap_ReplaceTile:
094A5 BD 24 93                  	LDA SubspaceTilesReplace, X
094A8                           
094A8                           DoSubspaceTileRemap_Exit:
094A8 A6 07                     	LDX byte_RAM_7
094AA A4 08                     	LDY byte_RAM_8
094AC 60                        	RTS
094AD                           
094AD                           
094AD                           ;
094AD                           ; Clears the sub-area tile layout when the player goes into a jar
094AD                           ;
094AD                           ClearSubAreaTileLayout:
094AD A2 00                     	LDX #$00
094AF 86 EC                     	STX IsHorizontalLevel
094B1                           
094B1                           ClearSubAreaTileLayout_Loop:
094B1 A9 40                     	LDA #BackgroundTile_Sky
094B3 9D 00 07                  	STA SubAreaTileLayout, X
094B6 E8                        	INX
094B7 D0 F8                     	BNE ClearSubAreaTileLayout_Loop
094B9                           
094B9 AD 32 05                  	LDA CurrentLevelArea
094BC 8D 19 05                  	STA CurrentLevelAreaCopy
094BF A9 04                     	LDA #$04 ; jar is always area 4
094C1 8D 32 05                  	STA CurrentLevelArea
094C4 A9 0A                     	LDA #$0A
094C6 20 00 00                  	JSR HijackLevelDataCopyAddressWithJar
094C9                           
094C9 A0 00                     	LDY #$00
094CB A9 0A                     	LDA #$0A
094CD 85 E8                     	STA byte_RAM_E8
094CF 8D 40 05                  	STA byte_RAM_540
094D2 84 E6                     	STY byte_RAM_E6
094D4 84 E5                     	STY byte_RAM_E5
094D6 8C 5E 05                  	STY GroundType
094D9 A0 03                     	LDY #$03
094DB 8C 41 05                  	STY GroundSetting
094DE A0 04                     	LDY #$04
094E0 20 00 00                  	JSR ReadLevelBackgroundData_Page
094E3                           
094E3                           	; object type
094E3 A0 02                     	LDY #$02
094E5 B1 05                     	LDA (byte_RAM_5), Y
094E7 29 03                     	AND #%00000011
094E9 8D 42 05                  	STA ObjectType3Xthru9X
094EC B1 05                     	LDA (byte_RAM_5), Y
094EE 4A                        	LSR A
094EF 4A                        	LSR A
094F0 29 03                     	AND #%00000011
094F2 8D 43 05                  	STA ObjectTypeAXthruFX
094F5 20 00 00                  	JSR HijackLevelDataCopyAddressWithJar
094F8                           
094F8 A9 0A                     	LDA #$0A
094FA 85 E8                     	STA byte_RAM_E8
094FC A9 00                     	LDA #$00
094FE 85 E6                     	STA byte_RAM_E6
09500 85 E5                     	STA byte_RAM_E5
09502 A9 03                     	LDA #$03
09504 85 04                     	STA byte_RAM_4
09506 20 00 00                  	JSR ReadLevelForegroundData_NextByteObject
09509                           
09509 A9 01                     	LDA #$01
0950B 85 EC                     	STA IsHorizontalLevel
0950D 60                        	RTS
0950E                           
0950E                           ;
0950E                           ; Set the current background music to the current area's music as defined in the header.
0950E                           ;
0950E                           ; This stops the current music unless the player is currently invincible.
0950E                           ;
0950E                           LoadAreaMusic:
0950E A0 03                     	LDY #$03
09510 B1 05                     	LDA (byte_RAM_5), Y
09512 29 03                     	AND #%00000011
09514 8D 44 05                  	STA CompareMusicIndex
09517 CD 45 05                  	CMP CurrentMusicIndex
0951A F0 00                     	BEQ LoadAreaMusic_Exit
0951C                           
0951C AD E0 04                  	LDA StarInvincibilityTimer
0951F C9 08                     	CMP #$08
09521 B0 00                     	BCS LoadAreaMusic_Exit
09523                           
09523 A9 80                     	LDA #Music2_StopMusic
09525 8D 03 06                  	STA MusicQueue2
09528                           
09528                           LoadAreaMusic_Exit:
09528 60                        	RTS
09529                           
09529                           
09529                           ;
09529                           ; Unreferenced? A similar routine exists in Bank F, so it seems like this may
09529                           ; be leftover code from a previous version.
09529                           ;
09529                           Unused_LevelMusicIndexes:
09529 01                        	.db Music1_Overworld
0952A 04                        	.db Music1_Inside
0952B 08                        	.db Music1_Boss
0952C 40                        	.db Music1_Wart
0952D 20                        	.db Music1_Subspace
0952E                           
0952E                           Unused_ChangeAreaMusic:
0952E AD 44 05                  	LDA CompareMusicIndex
09531 CD 45 05                  	CMP CurrentMusicIndex
09534 F0 00                     	BEQ Unused_ChangeAreaMusic_Exit
09536                           
09536 AA                        	TAX
09537 8E 45 05                  	STX CurrentMusicIndex
0953A AD E0 04                  	LDA StarInvincibilityTimer
0953D C9 08                     	CMP #$08
0953F B0 E7                     	BCS LoadAreaMusic_Exit
09541                           
09541 BD 29 95                  	LDA Unused_LevelMusicIndexes, X
09544 8D 00 06                  	STA MusicQueue1
09547                           
09547                           Unused_ChangeAreaMusic_Exit:
09547 60                        	RTS
09548                           
09548                           ; Unreferenced?
09548 AD 35 05                  	LDA CurrentLevelPage
0954B 0A                        	ASL A
0954C A8                        	TAY
0954D B9 1D 05                  	LDA AreaPointersByPage, Y
09550 8D 31 05                  	STA CurrentLevel
09553 C8                        	INY
09554 B9 1D 05                  	LDA AreaPointersByPage, Y
09557 4A                        	LSR A
09558 4A                        	LSR A
09559 4A                        	LSR A
0955A 4A                        	LSR A
0955B 8D 32 05                  	STA CurrentLevelArea
0955E B9 1D 05                  	LDA AreaPointersByPage, Y
09561 29 0F                     	AND #$0F
09563 8D 33 05                  	STA CurrentLevelEntryPage
09566 60                        	RTS
09567                           
09567                           
09567                           ;
09567                           ; ## Area loading and rendering
09567                           ;
09567                           ; This is the main subroutine for parsing and rendering an entire area of a level.
09567                           ;
09567                           LoadCurrentArea:
09567                           	; First, reset the level data and PPU scrolling.
09567 20 3A 93                  	JSR ResetLevelData
0956A                           
0956A 20 00 00                  	JSR ResetPPUScrollHi_Bank6
0956D                           
0956D                           	; Determine the address of the raw level data.
0956D 20 00 00                  	JSR RestoreLevelDataCopyAddress
09570                           
09570                           	;
09570                           	; ### Read area header
09570                           	;
09570                           	; The level header is read backwards starting at the last byte.
09570                           	;
09570                           
09570                           	; Queue any changes to the background music.
09570 20 0E 95                  	JSR LoadAreaMusic
09573                           
09573                           	;
09573                           	; Load initial ground appearance, which determines the tiles used for the background.
09573                           	;
09573 A0 03                     	LDY #$03
09575 B1 05                     	LDA (byte_RAM_5), Y
09577                           IFNDEF LEVEL_ENGINE_UPGRADES
09577 4A                        	LSR A
09578 29 1C                     	AND #%00011100
0957A                           ELSE
0957A                           	; double available ground types
0957A                           	AND #%11110000
0957A                           	LSR A
0957A                           	LSR A
0957A                           ENDIF
0957A                           
0957A 8D 5E 05                  	STA GroundType
0957D                           
0957D                           	; This doesn't hurt, but shouldn't be necessary.
0957D 20 00 00                  	JSR RestoreLevelDataCopyAddress
09580                           
09580                           IFDEF ENABLE_LEVEL_OBJECT_MODE
09580                           	; Read level object mode.
09580                           	LDA (byte_RAM_5), Y
09580                           	LSR A
09580                           	LSR A
09580                           	AND #%00000011
09580                           	STA LevelObjectMode
09580                           ENDIF
09580                           
09580                           	; Determine whether this area is Horizontal or vertical.
09580 A0 00                     	LDY #$00
09582 B1 05                     	LDA (byte_RAM_5), Y
09584 0A                        	ASL A
09585 A9 00                     	LDA #$00
09587 2A                        	ROL A
09588 85 EC                     	STA IsHorizontalLevel
0958A                           
0958A                           	; Reset the area page so that we can start drawing from the beginning.
0958A A9 00                     	LDA #$00
0958C 85 E8                     	STA byte_RAM_E8
0958E                           
0958E                           	; Determine the level length (in pages).
0958E A0 02                     	LDY #$02
09590 B1 05                     	LDA (byte_RAM_5), Y
09592 4A                        	LSR A
09593 4A                        	LSR A
09594 4A                        	LSR A
09595 4A                        	LSR A
09596 8D 3F 05                  	STA CurrentLevelPages
09599                           
09599                           	; Determine the object types, which are used to determine which horizontal and vertical blocks are
09599                           	; used, as well as how some climbable objects appear.
09599 B1 05                     	LDA (byte_RAM_5), Y
0959B 29 03                     	AND #%00000011
0959D 8D 42 05                  	STA ObjectType3Xthru9X
095A0 B1 05                     	LDA (byte_RAM_5), Y
095A2 4A                        	LSR A
095A3 4A                        	LSR A
095A4 29 03                     	AND #%00000011
095A6 8D 43 05                  	STA ObjectTypeAXthruFX
095A9 88                        	DEY
095AA                           
095AA                           IFDEF AREA_HEADER_TILESET
095AA                           	; World tileset to use for the area.
095AA                           	LDA (byte_RAM_5), Y
095AA                           	ROL A
095AA                           	ROL A
095AA                           	ROL A
095AA                           	ROL A
095AA                           	AND #%00000111
095AA                           	CMP #$07 ; only $00-06 are valid, force $07 to CurrentWorld
095AA                           	BCC LoadCurrentArea_IsValid
095AA                           	LDA CurrentWorld
095AA                           LoadCurrentArea_IsValid:
095AA                           	STA CurrentWorldTileset
095AA                           ENDIF
095AA                           
095AA                           	; Load initial ground setting, which determines the shape of the ground layout.
095AA                           	;
095AA                           	; Using `$1F` skips rendering ground settings entirely, but no areas seem to use it.
095AA B1 05                     	LDA (byte_RAM_5), Y
095AC 29 1F                     	AND #%00011111
095AE C9 1F                     	CMP #%00011111
095B0 F0 00                     	BEQ LoadCurrentArea_ForegroundData
095B2                           
095B2 8D 41 05                  	STA GroundSetting
095B5                           
095B5                           	;
095B5                           	; ### Process level data
095B5                           	;
095B5                           	; The area is rendered in two passes (with the exception described above).
095B5                           	;
095B5                           
095B5                           	;
095B5                           	; #### First pass: background terrain
095B5                           	;
095B5                           	; The first pass applies the ground settings and appearance to the entire area. This makes sure
095B5                           	; that the ground is already in place when rendering objects that extend to the ground, such as
095B5                           	; trees, vines, and platforms.
095B5                           	;
095B5                           
095B5                           	; Advance to the first object in the level data.
095B5 C8                        	INY
095B6 C8                        	INY
095B7 C8                        	INY
095B8                           
095B8                           	; Reset the tile placement offset for the first pass.
095B8 A9 00                     	LDA #$00
095BA 85 E5                     	STA byte_RAM_E5
095BC 85 E6                     	STA byte_RAM_E6
095BE                           
095BE                           	; Run the first pass of level rendering to apply ground settings and appearance.
095BE 20 00 00                  	JSR ReadLevelBackgroundData
095C1                           
095C1                           	;
095C1                           	; #### Second pass: foreground objects
095C1                           	;
095C1                           	; The second pass renders normal level objects and sets up area pointers.
095C1                           	;
095C1                           LoadCurrentArea_ForegroundData:
095C1                           	; Reset the tile placement offset for the second pass.
095C1 A9 00                     	LDA #$00
095C3 85 E6                     	STA byte_RAM_E6
095C5                           
095C5                           	; Advance to the first object in the level data.
095C5 A9 03                     	LDA #$03
095C7 85 04                     	STA byte_RAM_4
095C9                           
095C9                           	; Run the second pass of level rendering to place regular objects in the level.
095C9 20 00 00                  	JSR ReadLevelForegroundData
095CC                           
095CC                           	; Bootstrap the pseudo-random number generator.
095CC A9 22                     	LDA #$22
095CE 05 10                     	ORA byte_RAM_10
095D0 8D AC 05                  	STA PseudoRNGSeed
095D3 60                        	RTS
095D4                           
095D4                           
095D4                           ;
095D4                           ; Sets the raw level data pointer to the level data.
095D4                           ;
095D4                           RestoreLevelDataCopyAddress:
095D4 A9 78                     	LDA #>RawLevelData
095D6 85 06                     	STA byte_RAM_6
095D8 A9 00                     	LDA #<RawLevelData
095DA 85 05                     	STA byte_RAM_5
095DC 60                        	RTS
095DD                           
095DD                           
095DD                           ;
095DD                           ; Sets the raw level data pointer to the jar data.
095DD                           ;
095DD                           ; This is what allows jars to load so quickly.
095DD                           ;
095DD                           HijackLevelDataCopyAddressWithJar:
095DD A9 7A                     	LDA #>RawJarData
095DF 85 06                     	STA byte_RAM_6
095E1 A9 00                     	LDA #<RawJarData
095E3 85 05                     	STA byte_RAM_5
095E5 60                        	RTS
095E6                           
095E6                           
095E6                           ;
095E6                           ; ### Render foreground level data
095E6                           ;
095E6                           ; Reads level data from the beginning and processes individual objects.
095E6                           ;
095E6                           ; ##### Input
095E6                           ; - `byte_RAM_4`: raw data offset
095E6                           ;
095E6                           ReadLevelForegroundData:
095E6                           	; start at area page 0
095E6 A9 00                     	LDA #$00
095E8 85 E8                     	STA byte_RAM_E8
095EA                           
095EA                           	; weird? the next lines do nothing
095EA A0 00                     	LDY #$00
095EC 4C 00 00                  	JMP ReadLevelForegroundData_NextByteObject
095EF                           
095EF                           ReadLevelForegroundData_NextByteObject:
095EF A4 04                     	LDY byte_RAM_4
095F1                           
095F1                           ReadLevelForegroundData_NextByte:
095F1 C8                        	INY
095F2 B1 05                     	LDA (byte_RAM_5), Y
095F4 C9 FF                     	CMP #$FF
095F6 D0 00                     	BNE ReadLevelForegroundData_ProcessObject
095F8                           	; Encountering `$FF` indicates the end of the level data.
095F8 60                        	RTS
095F9                           
095F9                           ReadLevelForegroundData_ProcessObject:
095F9                           	; Stash the lower nybble of the first byte.
095F9                           	; For a special object, this will be the special object type.
095F9                           	; For a regular object, this will be the X position.
095F9 B1 05                     	LDA (byte_RAM_5), Y
095FB 29 0F                     	AND #$0F
095FD 85 E5                     	STA byte_RAM_E5
095FF                           	; If the upper nybble of the first byte is $F, this is a special object.
095FF B1 05                     	LDA (byte_RAM_5), Y
09601 29 F0                     	AND #$F0
09603 C9 F0                     	CMP #$F0
09605 D0 00                     	BNE ReadLevelForegroundData_RegularObject
09607                           
09607                           ReadLevelForegroundData_SpecialObject:
09607 A5 E5                     	LDA byte_RAM_E5
09609 84 0F                     	STY byte_RAM_F
0960B 20 00 00                  	JSR ProcessSpecialObjectForeground
0960E                           
0960E A4 0F                     	LDY byte_RAM_F
09610 4C F1 95                  	JMP ReadLevelForegroundData_NextByte
09613                           
09613                           ReadLevelForegroundData_RegularObject:
09613 20 00 00                  	JSR UpdateAreaYOffset
09616                           
09616                           	; check object type
09616 C8                        	INY
09617                           	; upper nybble
09617 B1 05                     	LDA (byte_RAM_5), Y
09619 4A                        	LSR A
0961A 4A                        	LSR A
0961B 4A                        	LSR A
0961C 4A                        	LSR A
0961D 8D 0E 05                  	STA byte_RAM_50E
09620 C9 03                     	CMP #$03
09622 B0 00                     	BCS ReadLevelForegroundData_RegularObjectWithSize
09624                           
09624                           ReadLevelForegroundData_RegularObjectNoSize:
09624 48                        	PHA
09625 B1 05                     	LDA (byte_RAM_5), Y
09627 29 0F                     	AND #$0F
09629 8D 0E 05                  	STA byte_RAM_50E
0962C 68                        	PLA
0962D F0 00                     	BEQ ReadLevelForegroundData_RegularObjectNoSize_00
0962F                           
0962F 48                        	PHA
09630 20 00 00                  	JSR SetTileOffsetAndAreaPageAddr_Bank6
09633                           
09633 B1 05                     	LDA (byte_RAM_5), Y
09635 29 0F                     	AND #$0F
09637 84 04                     	STY byte_RAM_4
09639 68                        	PLA
0963A C9 01                     	CMP #$01
0963C D0 00                     	BNE ReadLevelForegroundData_RegularObjectNoSize_Not10
0963E                           
0963E                           ReadLevelForegroundData_RegularObjectNoSize_10:
0963E 20 D8 88                  	JSR CreateObjects_10
09641 4C 00 00                  	JMP ReadLevelForegroundData_RegularObject_Exit
09644                           
09644                           ReadLevelForegroundData_RegularObjectNoSize_Not10:
09644 C9 02                     	CMP #$02
09646 D0 00                     	BNE ReadLevelForegroundData_RegularObjectNoSize_Not20
09648                           
09648                           ReadLevelForegroundData_RegularObjectNoSize_20:
09648 20 FE 88                  	JSR CreateObjects_20
0964B 4C 00 00                  	JMP ReadLevelForegroundData_RegularObject_Exit
0964E                           
0964E                           ReadLevelForegroundData_RegularObjectNoSize_Not20:
0964E 4C 00 00                  	JMP ReadLevelForegroundData_RegularObject_Exit
09651                           
09651                           ReadLevelForegroundData_RegularObjectWithSize:
09651 B1 05                     	LDA (byte_RAM_5), Y
09653 29 0F                     	AND #$0F
09655 8D 0D 05                  	STA byte_RAM_50D
09658 84 04                     	STY byte_RAM_4
0965A 20 00 00                  	JSR SetTileOffsetAndAreaPageAddr_Bank6
0965D                           
0965D AD 0E 05                  	LDA byte_RAM_50E
09660 38                        	SEC
09661 E9 03                     	SBC #$03
09663 8D 0E 05                  	STA byte_RAM_50E
09666 20 98 88                  	JSR CreateObjects_30thruF0
09669                           
09669                           ReadLevelForegroundData_RegularObject_Exit:
09669 4C EF 95                  	JMP ReadLevelForegroundData_NextByteObject
0966C                           
0966C                           ReadLevelForegroundData_RegularObjectNoSize_00:
0966C 20 00 00                  	JSR SetTileOffsetAndAreaPageAddr_Bank6
0966F                           
0966F B1 05                     	LDA (byte_RAM_5), Y
09671 29 0F                     	AND #$0F
09673 84 04                     	STY byte_RAM_4
09675 20 B5 88                  	JSR CreateObjects_00
09678                           
09678 4C 69 96                  	JMP ReadLevelForegroundData_RegularObject_Exit
0967B                           
0967B                           
0967B                           ;
0967B                           ; Updates the area Y offset for object placement
0967B                           ;
0967B                           ; ##### Input
0967B                           ; - `A`: vertical offset
0967B                           ;
0967B                           UpdateAreaYOffset:
0967B 18                        	CLC
0967C 65 E6                     	ADC byte_RAM_E6
0967E 90 00                     	BCC UpdateAreaYOffset_SamePage
09680                           
09680 69 0F                     	ADC #$0F
09682 4C 00 00                  	JMP UpdateAreaYOffset_NextPage
09685                           
09685                           UpdateAreaYOffset_SamePage:
09685 C9 F0                     	CMP #$F0
09687 D0 00                     	BNE UpdateAreaYOffset_Exit
09689                           
09689 A9 00                     	LDA #$00
0968B                           
0968B                           UpdateAreaYOffset_NextPage:
0968B E6 E8                     	INC byte_RAM_E8
0968D                           
0968D                           UpdateAreaYOffset_Exit:
0968D 85 E6                     	STA byte_RAM_E6
0968F 60                        	RTS
09690                           
09690                           
09690                           ;
09690                           ; Processes special objects for the second pass, which draws object tiles.
09690                           ;
09690                           ; On this pass, ground setting tiles are ignored, and we're just eating the bytes, but page skip
09690                           ; objects still require updating the tile placement cursor.
09690                           ;
09690                           ; Area pointers are also processed in this pass. Although they _could_ be processed earlier, this
09690                           ; reduces the likelihood of being overridden by a door pointer.
09690                           ;
09690                           ProcessSpecialObjectForeground:
09690 20 00 00                  	JSR JumpToTableAfterJump
09693                           
09693 00 00                     	.dw EatLevelObject1Byte ; Ground setting 0-8
09695 00 00                     	.dw EatLevelObject1Byte ; Ground setting 9-15
09697 00 00                     	.dw SkipForwardPage1Foreground ; Skip forward 1 page
09699 00 00                     	.dw SkipForwardPage2Foreground ; Skip forward 2 pages
0969B 00 00                     	.dw ResetPageAndOffsetForeground ; New object layer
0969D 00 00                     	.dw SetAreaPointer ; Area pointer
0969F 00 00                     	.dw EatLevelObject1Byte ; Ground appearance
096A1                           IFDEF LEVEL_ENGINE_UPGRADES
096A1                           	.dw CreateRawTiles
096A1                           ENDIF
096A1                           
096A1                           
096A1                           ;
096A1                           ; Processes special objects for the first pass, which draws ground layout tiles.
096A1                           ;
096A1                           ProcessSpecialObjectBackground:
096A1 20 00 00                  	JSR JumpToTableAfterJump
096A4                           
096A4 00 00                     	.dw SetGroundSettingA ; Ground setting 0-7
096A6 00 00                     	.dw SetGroundSettingB ; Ground setting 8-15
096A8 00 00                     	.dw SkipForwardPage1Background ; Skip forward 1 page
096AA 00 00                     	.dw SkipForwardPage2Background ; Skip forward 2 pages
096AC 00 00                     	.dw ResetPageAndOffsetBackground ; New object layer
096AE 00 00                     	.dw SetAreaPointerNoOp ; Area pointer
096B0 00 00                     	.dw SetGroundType ; Ground appearance
096B2                           IFDEF LEVEL_ENGINE_UPGRADES
096B2                           	.dw CreateRawTilesNoOp
096B2                           ENDIF
096B2                           
096B2                           
096B2                           ;
096B2                           ; #### Special Object `$F2` / `$F3`: Skip Page (Foreground)
096B2                           ;
096B2                           ; Moves the tile placement cursor forward one or two pages in the foregorund pass.
096B2                           ;
096B2                           ; ##### Output
096B2                           ;
096B2                           ; - `byte_RAM_E8`: area page
096B2                           ; - `byte_RAM_E6`: tile placement offset
096B2                           ;
096B2                           ;
096B2                           
096B2                           SkipForwardPage2Foreground:
096B2 E6 E8                     	INC byte_RAM_E8
096B4                           
096B4                           SkipForwardPage1Foreground:
096B4 E6 E8                     	INC byte_RAM_E8
096B6 A9 00                     	LDA #$00
096B8 85 E6                     	STA byte_RAM_E6
096BA 60                        	RTS
096BB                           
096BB                           
096BB                           ;
096BB                           ; #### Special Object `$F2` / `$F3`: Skip Page (Background)
096BB                           ;
096BB                           ; Moves the tile placement cursor forward one or two pages in the background pass.
096BB                           ;
096BB                           ; ##### Output
096BB                           ;
096BB                           ; - `byte_RAM_540`: area page
096BB                           ; - `byte_RAM_E`: tile placement offset
096BB                           ; - `byte_RAM_9`: tile placement offset (overflow counter)
096BB                           ;
096BB                           
096BB                           SkipForwardPage2Background:
096BB EE 40 05                  	INC byte_RAM_540
096BE                           
096BE                           SkipForwardPage1Background:
096BE EE 40 05                  	INC byte_RAM_540
096C1 A9 00                     	LDA #$00
096C3 85 0E                     	STA byte_RAM_E
096C5 85 09                     	STA byte_RAM_9
096C7 60                        	RTS
096C8                           
096C8                           ;
096C8                           ; Advances two bytes in the level data.
096C8                           ;
096C8                           ; Unreferenced?
096C8                           ;
096C8                           EatLevelObject2Bytes:
096C8 E6 0F                     	INC byte_RAM_F
096CA                           
096CA                           ;
096CA                           ; Advances one byte in the level data.
096CA                           ;
096CA                           EatLevelObject1Byte:
096CA E6 0F                     	INC byte_RAM_F
096CC 60                        	RTS
096CD                           
096CD                           
096CD                           ;
096CD                           ; #### Area Pointer Object `$F5`
096CD                           ;
096CD                           ; Sets the area pointer for this page.
096CD                           ;
096CD                           ; ##### Input
096CD                           ; - `byte_RAM_F`: level data byte offset
096CD                           ; - `byte_RAM_E8`: area page
096CD                           ;
096CD                           ; ##### Output
096CD                           ; - `byte_RAM_F`: level data byte offset
096CD                           ;
096CD                           SetAreaPointer:
096CD A4 0F                     	LDY byte_RAM_F
096CF C8                        	INY
096D0 A5 E8                     	LDA byte_RAM_E8
096D2 0A                        	ASL A
096D3 AA                        	TAX
096D4 B1 05                     	LDA (byte_RAM_5), Y
096D6 9D 1D 05                  	STA AreaPointersByPage, X
096D9 C8                        	INY
096DA E8                        	INX
096DB B1 05                     	LDA (byte_RAM_5), Y
096DD 9D 1D 05                  	STA AreaPointersByPage, X
096E0 84 0F                     	STY byte_RAM_F
096E2 60                        	RTS
096E3                           
096E3                           
096E3                           IFDEF LEVEL_ENGINE_UPGRADES
096E3                           ;
096E3                           ; #### Special Object `$F7`
096E3                           ;
096E3                           ; Creates a run of 1-16 arbitrary tiles.
096E3                           ;
096E3                           ; #### Usage: `$F7 $YX $WL ...`
096E3                           ; - `Y`: relative Y offset on page
096E3                           ; - `X`: X position on page
096E3                           ; - `W`: wrap width (eg. 0 for no wrap, 2 for 2-tiles wide, etc.)
096E3                           ; - `L`: run length, L+1 subsequent bytes are the raw tiles
096E3                           ;
096E3                           CreateRawTiles:
096E3                           	LDY byte_RAM_F
096E3                           
096E3                           	; setting the page address allows this to be the first object of an area
096E3                           	LDX byte_RAM_E8
096E3                           	JSR SetAreaPageAddr_Bank6
096E3                           
096E3                           	INY
096E3                           	; read tile placement offset
096E3                           	LDA (byte_RAM_5), Y
096E3                           	CLC
096E3                           	ADC byte_RAM_E6 ; add current offset
096E3                           	STA byte_RAM_E7 ; target tile placement offset
096E3                           
096E3                           	; apply page Y offset
096E3                           	LDA (byte_RAM_5), Y
096E3                           	AND #$F0
096E3                           	JSR UpdateAreaYOffset
096E3                           
096E3                           	INY
096E3                           	; read run length
096E3                           	LDA (byte_RAM_5), Y
096E3                           	AND #$0F
096E3                           	STA byte_RAM_50D
096E3                           
096E3                           	; read wrap length
096E3                           	LDA (byte_RAM_5), Y
096E3                           	LSR A
096E3                           	LSR A
096E3                           	LSR A
096E3                           	LSR A
096E3                           	STA byte_RAM_50E
096E3                           
096E3                           	; start counting from 0
096E3                           	LDX #$00
096E3                           
096E3                           	; everything afterwards is raw data
096E3                           CreateRawTiles_Loop:
096E3                           	; increment and stash Y
096E3                           	INY
096E3                           	TYA
096E3                           	PHA
096E3                           
096E3                           	; write the next tile
096E3                           	LDA (byte_RAM_5), Y
096E3                           	LDY byte_RAM_E7
096E3                           	STA (byte_RAM_1), Y
096E3                           
096E3                           	; increment x-position (crossing page as necessary)
096E3                           	JSR IncrementAreaXOffset
096E3                           	STY byte_RAM_E7
096E3                           
096E3                           	; are we wrapping this run of tiles?
096E3                           	LDA byte_RAM_50E
096E3                           	BEQ CreateRawTiles_NoWrap
096E3                           
096E3                           	; increment y-position if we hit the wrap point
096E3                           	TXA
096E3                           	CLC
096E3                           	ADC #$01
096E3                           CreateRawTiles_CheckWrap:
096E3                           	SEC
096E3                           	SBC byte_RAM_50E
096E3                           	BMI CreateRawTiles_NoWrap
096E3                           	BNE CreateRawTiles_CheckWrap
096E3                           
096E3                           CreateRawTiles_Wrap:
096E3                           	TXA
096E3                           	PHA
096E3                           	JSR IncrementAreaYOffset
096E3                           	SEC
096E3                           	SBC byte_RAM_50E
096E3                           	TAY
096E3                           	STY byte_RAM_E7
096E3                           	PLA
096E3                           	TAX
096E3                           
096E3                           CreateRawTiles_NoWrap:
096E3                           	; restore Y and iterate
096E3                           	PLA
096E3                           	TAY
096E3                           
096E3                           	CPX byte_RAM_50D
096E3                           	INX
096E3                           	BCC CreateRawTiles_Loop
096E3                           
096E3                           	; update level data offset
096E3                           	STY byte_RAM_F
096E3                           
096E3                           CreateRawTilesNoOp:
096E3                           	RTS
096E3                           ENDIF
096E3                           
096E3                           
096E3                           ;
096E3                           ; Use top 3 bits for the X offset of a ground setting object
096E3                           ;
096E3                           ; ##### Output
096E3                           ; - `A`: 0-7
096E3                           ;
096E3                           ReadGroundSettingOffset:
096E3 A4 0F                     	LDY byte_RAM_F
096E5 C8                        	INY
096E6 B1 05                     	LDA (byte_RAM_5), Y
096E8 29 E0                     	AND #%11100000
096EA 4A                        	LSR A
096EB 4A                        	LSR A
096EC 4A                        	LSR A
096ED 4A                        	LSR A
096EE 4A                        	LSR A
096EF 60                        	RTS
096F0                           
096F0                           ;
096F0                           ; #### Special Object `$F0` / `$F1`: Ground Setting
096F0                           ;
096F0                           ; Sets ground setting at some relative offset on the current page.
096F0                           ;
096F0                           ; Object `$F0` can change the ground setting for offsets 0 through 7.
096F0                           ; Object `$F1` can change the ground setting for offsets 8 through 15.
096F0                           ;
096F0                           ; #### Input
096F0                           ; - `A`: Relative offset (0-7)
096F0                           ; - `byte_RAM_F`: level data byte offset
096F0                           ;
096F0                           ; #### Output
096F0                           ; - `byte_RAM_E`: tile placement offset
096F0                           ;
096F0                           SetGroundSettingA:
096F0 20 E3 96                  	JSR ReadGroundSettingOffset
096F3 4C 00 00                  	JMP SetGroundSetting
096F6                           
096F6                           SetGroundSettingB:
096F6 20 E3 96                  	JSR ReadGroundSettingOffset
096F9 18                        	CLC
096FA 69 08                     	ADC #$08
096FC                           
096FC                           SetGroundSetting:
096FC 85 0E                     	STA byte_RAM_E
096FE A5 EC                     	LDA IsHorizontalLevel
09700 D0 00                     	BNE SetGroundSetting_Exit
09702                           
09702 A5 0E                     	LDA byte_RAM_E
09704 0A                        	ASL A
09705 0A                        	ASL A
09706 0A                        	ASL A
09707 0A                        	ASL A
09708 85 0E                     	STA byte_RAM_E
0970A                           
0970A                           SetGroundSetting_Exit:
0970A 60                        	RTS
0970B                           
0970B                           
0970B                           ;
0970B                           ; #### Special Object `$F4`: New Layer (Foreground)
0970B                           ;
0970B                           ; Moves the tile placement cursor to the beginning of the first page in the foreground pass.
0970B                           ;
0970B                           ; ##### Output
0970B                           ;
0970B                           ; - `byte_RAM_E8`: area page
0970B                           ; - `byte_RAM_E6`: tile placement offset
0970B                           ;
0970B                           ResetPageAndOffsetForeground:
0970B A9 00                     	LDA #$00
0970D 85 E8                     	STA byte_RAM_E8 ; area page
0970F 85 E6                     	STA byte_RAM_E6 ; tile placement offset
09711 60                        	RTS
09712                           
09712                           
09712                           ;
09712                           ; #### Special Object `$F4`: New Layer (Background)
09712                           ;
09712                           ; Moves the tile placement cursor to the beginning of the first page in the background pass.
09712                           ;
09712                           ; ##### Output
09712                           ;
09712                           ; - `byte_RAM_540`: area page
09712                           ; - `byte_RAM_E`: tile placement offset
09712                           ;
09712                           ResetPageAndOffsetBackground:
09712 A9 00                     	LDA #$00
09714 8D 40 05                  	STA byte_RAM_540
09717 85 0E                     	STA byte_RAM_E
09719 60                        	RTS
0971A                           
0971A                           
0971A                           ;
0971A                           ; Area pointers are not processed on the background pass.
0971A                           ;
0971A                           SetAreaPointerNoOp:
0971A 60                        	RTS
0971B                           
0971B                           
0971B                           ;
0971B                           ; #### Ground Appearance Object `$F6`
0971B                           ;
0971B                           ; Sets the ground appearance, which determines the tiles used when drawing the ground setting.
0971B                           ;
0971B                           ; ##### Output
0971B                           ;
0971B                           ; `GroundType`: the ground type used for drawing the background
0971B                           ;
0971B                           SetGroundType:
0971B A4 0F                     	LDY byte_RAM_F
0971D C8                        	INY
0971E B1 05                     	LDA (byte_RAM_5), Y
09720 29 0F                     	AND #%00001111
09722 0A                        	ASL A
09723 0A                        	ASL A
09724 8D 5E 05                  	STA GroundType
09727 60                        	RTS
09728                           
09728                           
09728                           ;
09728                           ; ### Render background level data
09728                           ;
09728                           ; Reads level data from the beginning and processes the ground layout.
09728                           ;
09728                           ; This first pass is used for setting up the ground types and settings before normal objects are
09728                           ; rendered in the level.
09728                           ;
09728                           ; ##### Input
09728                           ; - `Y`: raw data offset
09728                           ;
09728                           ReadLevelBackgroundData:
09728 A9 00                     	LDA #$00
0972A 8D 40 05                  	STA byte_RAM_540
0972D                           
0972D                           ReadLevelBackgroundData_Page:
0972D A9 00                     	LDA #$00
0972F 85 09                     	STA byte_RAM_9
09731                           
09731                           ReadLevelBackgroundData_Object:
09731 B1 05                     	LDA (byte_RAM_5), Y
09733 C9 FF                     	CMP #$FF
09735 D0 00                     	BNE ReadLevelBackgroundData_ProcessObject
09737                           
09737                           	; Encountering `$FF` indicates the end of the level data.
09737                           	; We need to render the remaining ground setting through the end of the last page in the area.
09737 A9 0A                     	LDA #$0A
09739 8D 40 05                  	STA byte_RAM_540
0973C EE 40 05                  	INC byte_RAM_540
0973F A9 00                     	LDA #$00
09741 85 0E                     	STA byte_RAM_E
09743 4C 00 00                  	JMP ReadLevelBackgroundData_RenderGround
09746                           
09746                           ReadLevelBackgroundData_ProcessObject:
09746 B1 05                     	LDA (byte_RAM_5), Y
09748 29 F0                     	AND #$F0
0974A F0 00                     	BEQ ReadLevelBackgroundData_ProcessObject_Advance2Bytes
0974C                           
0974C C9 F0                     	CMP #$F0
0974E D0 00                     	BNE ReadLevelBackgroundData_ProcessRegularObject
09750                           
09750                           ;
09750                           ; First byte of `$FX` indicates a special object.
09750                           ;
09750                           ReadLevelBackgroundData_ProcessSpecialObject:
09750 B1 05                     	LDA (byte_RAM_5), Y
09752 29 0F                     	AND #$0F
09754 84 0F                     	STY byte_RAM_F
09756 20 A1 96                  	JSR ProcessSpecialObjectBackground
09759                           
09759                           	; Determine how many more bytes to advance after processing the special object.
09759 A4 0F                     	LDY byte_RAM_F
0975B B1 05                     	LDA (byte_RAM_5), Y
0975D 29 0F                     	AND #$0F
0975F                           
0975F                           	; Ground setting `$F0` / `$F1` should render the previous ground setting
0975F C9 02                     	CMP #$02
09761 90 00                     	BCC ReadLevelBackgroundData_RenderGround
09763                           
09763                           	; Special objects except `$F0` / `$F1`
09763 C9 05                     	CMP #$05
09765 D0 00                     	BNE ReadLevelBackgroundData_ProcessObject_NotF5
09767                           
09767                           ReadLevelBackgroundData_ProcessObject_Advance3Bytes:
09767 C8                        	INY
09768 4C 00 00                  	JMP ReadLevelBackgroundData_ProcessObject_Advance2Bytes
0976B                           
0976B                           ReadLevelBackgroundData_ProcessObject_NotF5:
0976B                           	; Special objects except `$F0` / `$F1` / `$F5`
0976B C9 06                     	CMP #$06
0976D D0 00                     	BNE ReadLevelBackgroundData_ProcessObject_AdvanceByte
0976F                           
0976F                           ; Ground appearance `$F6` is two bytes.
0976F                           ReadLevelBackgroundData_ProcessObject_Advance2Bytes:
0976F C8                        	INY
09770                           
09770                           ReadLevelBackgroundData_ProcessObject_AdvanceByte:
09770 C8                        	INY
09771 4C 31 97                  	JMP ReadLevelBackgroundData_Object
09774                           
09774                           ;
09774                           ; Processes a regular object, as indicated by a value of `$0X-$EX` in the first byte.
09774                           ;
09774                           ; ##### Input
09774                           ; - `byte_RAM_9`: tile placement offset (overflow counter)
09774                           ;
09774                           ; ##### Output
09774                           ; - `byte_RAM_540`: area page
09774                           ; - `byte_RAM_9`: tile placement offset (overflow counter)
09774                           ;
09774                           ; Since we're only processing background objects, all this needs to do is look at the object offset
09774                           ; and advance the tile placement cursor and current page as needed.
09774                           ;
09774                           ; #### The Door Pointer Y Offset "Bug"
09774                           ;
09774                           ; An interesting quirk about the level engine is that door pointers are used in worlds 1-5, but not
09774                           ; worlds 6 and 7, due to the fact that the pointers have an effective Y offset of 1.
09774                           ;
09774                           ; The developers chose to disable door pointers to deal with this problem, but another solution
09774                           ; would have been to modify the code here to determine whether an object was being used as a door
09774                           ; pointer and avoid processing its position offset.
09774                           ;
09774                           ReadLevelBackgroundData_ProcessRegularObject:
09774 18                        	CLC
09775 65 09                     	ADC byte_RAM_9
09777 90 00                     	BCC ReadLevelBackgroundData_ProcessRegularObject_SamePage
09779                           
09779                           	; The object position overflowed to the next page.
09779 69 0F                     	ADC #$0F
0977B 4C 00 00                  	JMP ReadLevelBackgroundData_ProcessRegularObject_NextPage
0977E                           
0977E                           ReadLevelBackgroundData_ProcessRegularObject_SamePage:
0977E C9 F0                     	CMP #$F0
09780 D0 00                     	BNE ReadLevelBackgroundData_ProcessRegularObject_Exit
09782                           
09782 A9 00                     	LDA #$00
09784                           
09784                           ReadLevelBackgroundData_ProcessRegularObject_NextPage:
09784 EE 40 05                  	INC byte_RAM_540
09787                           
09787                           ReadLevelBackgroundData_ProcessRegularObject_Exit:
09787 85 09                     	STA byte_RAM_9
09789 4C 6F 97                  	JMP ReadLevelBackgroundData_ProcessObject_Advance2Bytes
0978C                           
0978C                           
0978C                           ;
0978C                           ; Renders the ground setting up to this point.
0978C                           ;
0978C                           ; This code is invoked when we encounter a ground setting object and need to render the previous
0978C                           ; ground setting up tothis point or when we have reached the end of the level data and need to
0978C                           ; render the current ground setting through the end of the area.
0978C                           ;
0978C                           ; #### Input
0978C                           ; - `byte_RAM_E8`: area page
0978C                           ; - `byte_RAM_E5`: tile placement offset shift
0978C                           ; - `byte_RAM_E6`: previous tile placement offset
0978C                           ; - `byte_RAM_540`: area page (end)
0978C                           ; - `byte_RAM_E`: tile placement offset (end)
0978C                           ;
0978C                           ; #### Output
0978C                           ;
0978C                           ReadLevelBackgroundData_RenderGround:
0978C 20 00 00                  	JSR SetTileOffsetAndAreaPageAddr_Bank6
0978F                           
0978F 20 00 00                  	JSR LoadGroundSetData
09792                           
09792 A5 EC                     	LDA IsHorizontalLevel
09794 F0 00                     	BEQ ReadLevelBackgroundData_RenderGround_Vertical
09796                           
09796                           ReadLevelBackgroundData_RenderGround_Horizontal:
09796                           	; Increment the column.
09796 E6 E5                     	INC byte_RAM_E5
09798 A5 E5                     	LDA byte_RAM_E5
0979A C9 10                     	CMP #$10
0979C D0 00                     	BNE ReadLevelBackgroundData_RenderGround_CheckComplete
0979E                           
0979E                           	; Increment the page and reset to the first column.
0979E E6 E8                     	INC byte_RAM_E8
097A0 A9 00                     	LDA #$00
097A2 85 E5                     	STA byte_RAM_E5
097A4 4C 00 00                  	JMP ReadLevelBackgroundData_RenderGround_CheckComplete
097A7                           
097A7                           
097A7                           ReadLevelBackgroundData_RenderGround_Vertical:
097A7                           	; Increment the row.
097A7 A9 10                     	LDA #$10
097A9 20 7B 96                  	JSR UpdateAreaYOffset
097AC                           
097AC                           ReadLevelBackgroundData_RenderGround_CheckComplete:
097AC                           	; If there are more pages to render with this ground setting, keep going.
097AC A5 E8                     	LDA byte_RAM_E8
097AE CD 40 05                  	CMP byte_RAM_540
097B1 D0 D9                     	BNE ReadLevelBackgroundData_RenderGround
097B3                           
097B3 A5 EC                     	LDA IsHorizontalLevel
097B5 F0 00                     	BEQ ReadLevelBackgroundData_RenderGround_CheckComplete_Vertical
097B7                           
097B7                           ReadLevelBackgroundData_RenderGround_CheckComplete_Horizontal:
097B7                           	; If there is more to render with this ground setting, keep going.
097B7 A5 E5                     	LDA byte_RAM_E5
097B9 C5 0E                     	CMP byte_RAM_E
097BB 90 CF                     	BCC ReadLevelBackgroundData_RenderGround
097BD                           
097BD                           	; Otherwise, move on and process the next object.
097BD B0 00                     	BCS ReadLevelBackgroundData_RenderGround_Exit
097BF                           
097BF                           ReadLevelBackgroundData_RenderGround_CheckComplete_Vertical:
097BF A5 E6                     	LDA byte_RAM_E6
097C1 C5 0E                     	CMP byte_RAM_E
097C3 90 C7                     	BCC ReadLevelBackgroundData_RenderGround
097C5                           
097C5                           ReadLevelBackgroundData_RenderGround_Exit:
097C5 B1 05                     	LDA (byte_RAM_5), Y
097C7                           	; Encountering `$FF` indicates the end of the level data.
097C7 C9 FF                     	CMP #$FF
097C9 F0 00                     	BEQ ReadGroundSetByte_Exit
097CB                           
097CB                           	; Otherwise this was triggered because we encountered a ground setting object, so `GroundSetting`
097CB                           	; for the next time we need to render the ground.
097CB C8                        	INY
097CC B1 05                     	LDA (byte_RAM_5), Y
097CE 29 1F                     	AND #$1F
097D0 8D 41 05                  	STA GroundSetting
097D3 4C 70 97                  	JMP ReadLevelBackgroundData_ProcessObject_AdvanceByte
097D6                           
097D6                           ; -----
097D6                           
097D6                           
097D6                           ;
097D6                           ; Reads the current ground setting byte.
097D6                           ;
097D6                           ; ##### Input
097D6                           ; - `X`: Ground setting offset
097D6                           ;
097D6                           ; ##### Output
097D6                           ; - `A`: Byte containing the 4 ground appearance bit pairs for the offset
097D6                           ;
097D6                           ReadGroundSetByte:
097D6 A5 EC                     	LDA IsHorizontalLevel
097D8 D0 00                     	BNE ReadGroundSetByte_Vertical
097DA                           
097DA BD 7C 92                  	LDA VerticalGroundSetData, X
097DD 60                        	RTS
097DE                           
097DE                           ReadGroundSetByte_Vertical:
097DE BD 00 92                  	LDA HorizontalGroundSetData, X
097E1                           
097E1                           ReadGroundSetByte_Exit:
097E1 60                        	RTS
097E2                           
097E2                           
097E2                           ;
097E2                           ; Draws the current ground setting and type to the raw tile buffer.
097E2                           ;
097E2                           ; ##### Input
097E2                           ; - `GroundSetting`: current ground setting
097E2                           ; - `GroundType`: current ground appearance
097E2                           ; - `byte_RAM_E7`: tile placement offset
097E2                           ;
097E2                           LoadGroundSetData:
097E2 84 04                     	STY byte_RAM_4
097E4 AD 41 05                  	LDA GroundSetting
097E7 0A                        	ASL A
097E8 0A                        	ASL A
097E9 AA                        	TAX
097EA A4 E7                     	LDY byte_RAM_E7
097EC                           
097EC                           LoadGroundSetData_Loop:
097EC 20 D6 97                  	JSR ReadGroundSetByte
097EF                           
097EF 20 00 00                  	JSR WriteGroundSetTiles1
097F2                           
097F2 20 D6 97                  	JSR ReadGroundSetByte
097F5                           
097F5 20 00 00                  	JSR WriteGroundSetTiles2
097F8                           
097F8 20 D6 97                  	JSR ReadGroundSetByte
097FB                           
097FB 20 00 00                  	JSR WriteGroundSetTiles3
097FE                           
097FE 20 D6 97                  	JSR ReadGroundSetByte
09801                           
09801 20 00 00                  	JSR WriteGroundSetTiles4
09804                           
09804 A5 EC                     	LDA IsHorizontalLevel
09806 F0 00                     	BEQ LoadGroundSetData_Horizontal
09808                           
09808 E8                        	INX
09809 B0 00                     	BCS LoadGroundSetData_Exit
0980B                           
0980B 90 DF                     	BCC LoadGroundSetData_Loop
0980D                           
0980D                           LoadGroundSetData_Horizontal:
0980D E8                        	INX
0980E 98                        	TYA
0980F 29 0F                     	AND #$0F
09811 D0 D9                     	BNE LoadGroundSetData_Loop
09813                           
09813                           LoadGroundSetData_Exit:
09813 A4 04                     	LDY byte_RAM_4
09815 60                        	RTS
09816                           
09816                           ;
09816                           ; Draws current ground set tiles.
09816                           ;
09816                           WriteGroundSetTiles:
09816                           WriteGroundSetTiles1:
09816 4A                        	LSR A
09817 4A                        	LSR A
09818                           
09818                           WriteGroundSetTiles2:
09818 4A                        	LSR A
09819 4A                        	LSR A
0981A                           
0981A                           WriteGroundSetTiles3:
0981A 4A                        	LSR A
0981B 4A                        	LSR A
0981C                           
0981C                           WriteGroundSetTiles4:
0981C 29 03                     	AND #$03
0981E 86 03                     	STX byte_RAM_3
09820                           	; This `BEQ` is what effectively ignores the first index of the groundset tiles lookup tables.
09820 F0 00                     	BEQ WriteGroundSetTiles_AfterWriteTile
09822                           
09822 18                        	CLC
09823 6D 5E 05                  	ADC GroundType
09826 AA                        	TAX
09827 A5 EC                     	LDA IsHorizontalLevel
09829 D0 00                     	BNE WriteGroundSetTiles_Horizontal
0982B                           
0982B 20 00 00                  	JSR ReadGroundTileVertical
0982E                           
0982E 4C 00 00                  	JMP WriteGroundSetTiles_WriteTile
09831                           
09831                           WriteGroundSetTiles_Horizontal:
09831 20 00 00                  	JSR ReadGroundTileHorizontal
09834                           
09834                           WriteGroundSetTiles_WriteTile:
09834 91 01                     	STA (byte_RAM_1), Y
09836                           
09836                           WriteGroundSetTiles_AfterWriteTile:
09836 A6 03                     	LDX byte_RAM_3
09838 A5 EC                     	LDA IsHorizontalLevel
0983A D0 00                     	BNE WriteGroundSetTiles_IncrementYOffset
0983C                           
0983C C8                        	INY
0983D 60                        	RTS
0983E                           
0983E                           WriteGroundSetTiles_IncrementYOffset:
0983E 98                        	TYA
0983F 18                        	CLC
09840 69 10                     	ADC #$10
09842 A8                        	TAY
09843 60                        	RTS
09844                           
09844                           
09844                           ReadGroundTileHorizontal:
09844 86 0C                     	STX byte_RAM_C
09846 84 0D                     	STY byte_RAM_D
09848 AE 35 06                  	LDX CurrentWorldTileset
0984B BD 28 84                  	LDA GroundTilesHorizontalLo, X
0984E 85 07                     	STA byte_RAM_7
09850 BD 36 84                  	LDA GroundTilesHorizontalHi, X
09853 85 08                     	STA byte_RAM_8
09855 A4 0C                     	LDY byte_RAM_C
09857 B1 07                     	LDA (byte_RAM_7), Y
09859 A6 0C                     	LDX byte_RAM_C
0985B A4 0D                     	LDY byte_RAM_D
0985D 60                        	RTS
0985E                           
0985E                           
0985E                           ReadGroundTileVertical:
0985E 86 0C                     	STX byte_RAM_C
09860 84 0D                     	STY byte_RAM_D
09862 AE 35 06                  	LDX CurrentWorldTileset
09865 BD 2F 84                  	LDA GroundTilesVerticalLo, X
09868 85 07                     	STA byte_RAM_7
0986A BD 3D 84                  	LDA GroundTilesVerticalHi, X
0986D 85 08                     	STA byte_RAM_8
0986F A4 0C                     	LDY byte_RAM_C
09871 B1 07                     	LDA (byte_RAM_7), Y
09873 A6 0C                     	LDX byte_RAM_C
09875 A4 0D                     	LDY byte_RAM_D
09877 60                        	RTS
09878                           
09878                           
09878                           ;
09878                           ; Updates the area page and tile placement offset
09878                           ;
09878                           ; ##### Input
09878                           ; - `byte_RAM_E8`: area page
09878                           ; - `byte_RAM_E5`: tile placement offset shift
09878                           ; - `byte_RAM_E6`: previous tile placement offset
09878                           ;
09878                           ; ##### Output
09878                           ; - `byte_RAM_1`: low byte of decoded level data RAM
09878                           ; - `byte_RAM_2`: high byte of decoded level data RAM
09878                           ; - `byte_RAM_E7`: target tile placement offset
09878                           ;
09878                           SetTileOffsetAndAreaPageAddr_Bank6:
09878 A6 E8                     	LDX byte_RAM_E8
0987A 20 00 00                  	JSR SetAreaPageAddr_Bank6
0987D                           
0987D A5 E6                     	LDA byte_RAM_E6
0987F 18                        	CLC
09880 65 E5                     	ADC byte_RAM_E5
09882 85 E7                     	STA byte_RAM_E7
09884 60                        	RTS
09885                           
09885                           ;
09885                           ; Updates the area page that we're drawing tiles to
09885                           ;
09885                           ; ##### Input
09885                           ; - `X`: area page
09885                           ;
09885                           ; ##### Output
09885                           ; - `byte_RAM_1`: low byte of decoded level data RAM
09885                           ; - `byte_RAM_2`: high byte of decoded level data RAM
09885                           ;
09885                           SetAreaPageAddr_Bank6:
09885 BD F8 92                  	LDA DecodedLevelPageStartLo_Bank6, X
09888 85 01                     	STA byte_RAM_1
0988A BD 03 93                  	LDA DecodedLevelPageStartHi_Bank6, X
0988D 85 02                     	STA byte_RAM_2
0988F 60                        	RTS
09890                           
09890                           
09890                           IncrementAreaXOffset:
09890 C8                        	INY
09891 98                        	TYA
09892 29 0F                     	AND #$0F
09894 D0 00                     	BNE IncrementAreaXOffset_Exit
09896                           
09896 98                        	TYA
09897 38                        	SEC
09898 E9 10                     	SBC #$10
0989A A8                        	TAY
0989B 86 0B                     	STX byte_RAM_B
0989D A6 E8                     	LDX byte_RAM_E8
0989F E8                        	INX
098A0 86 0D                     	STX byte_RAM_D
098A2 20 85 98                  	JSR SetAreaPageAddr_Bank6
098A5 A6 0B                     	LDX byte_RAM_B
098A7                           
098A7                           IncrementAreaXOffset_Exit:
098A7 60                        	RTS
098A8                           
098A8                           
098A8                           ; Moves one row down and increments the page, if necessary
098A8                           IncrementAreaYOffset:
098A8 98                        	TYA
098A9 18                        	CLC
098AA 69 10                     	ADC #$10
098AC A8                        	TAY
098AD C9 F0                     	CMP #$F0
098AF 90 00                     	BCC IncrementAreaYOffset_Exit
098B1                           
098B1                           	; increment the area page
098B1 A6 E8                     	LDX byte_RAM_E8
098B3 E8                        	INX
098B4 20 85 98                  	JSR SetAreaPageAddr_Bank6
098B7                           
098B7 98                        	TYA
098B8 29 0F                     	AND #$0F
098BA A8                        	TAY
098BB                           
098BB                           IncrementAreaYOffset_Exit:
098BB 60                        	RTS
098BC                           
098BC                           
098BC                           IFNDEF DISABLE_DOOR_POINTERS
098BC                           ;
098BC                           ; Consume the object as an area pointer. This overwrites any existing area
098BC                           ; pointer for this page.
098BC                           ;
098BC                           LevelParser_EatDoorPointer:
098BC A4 04                     	LDY byte_RAM_4
098BE C8                        	INY
098BF B1 05                     	LDA (byte_RAM_5), Y
098C1 85 07                     	STA byte_RAM_7
098C3 C8                        	INY
098C4 B1 05                     	LDA (byte_RAM_5), Y
098C6 85 08                     	STA byte_RAM_8
098C8 84 04                     	STY byte_RAM_4
098CA A5 E8                     	LDA byte_RAM_E8
098CC 0A                        	ASL A
098CD A8                        	TAY
098CE A5 07                     	LDA byte_RAM_7
098D0 99 1D 05                  	STA AreaPointersByPage, Y
098D3 C8                        	INY
098D4 A5 08                     	LDA byte_RAM_8
098D6 99 1D 05                  	STA AreaPointersByPage, Y
098D9 60                        	RTS
098DA                           ENDIF
098DA                           
098DA                           ;
098DA                           ; High byte of the PPU scroll offset for nametable B.
098DA                           ;
098DA                           ; When mirroring vertically, nametable A is `$2000` and nametable B is `$2800`.
098DA                           ; When mirroring horizontally, nametable A is `$2000` and nametable B is `$2400`.
098DA                           ;
098DA                           PPUScrollHiOffsets_Bank6:
098DA 28                        	.db $28 ; vertical
098DB 24                        	.db $24 ; horizontal
098DC                           
098DC                           ;
098DC                           ; Resets the PPU high scrolling values and sets the high byte of the PPU scroll offset.
098DC                           ;
098DC                           ; The version of the subroutine in this bank is always called with `A = $00`.
098DC                           ;
098DC                           ; ##### Input
098DC                           ; - `A`: 0 = use nametable A, 1 = use nametable B
098DC                           ; - `Y`: 0 = vertical, 1 = horizontal
098DC                           ;
098DC                           ; ##### Output
098DC                           ; - `PPUScrollYHiMirror`
098DC                           ; - `PPUScrollXHiMirror`
098DC                           ; - `PPUScrollCheckHi`: PPU scroll offset high byte
098DC                           ;
098DC                           ResetPPUScrollHi_Bank6:
098DC 4A                        	LSR A
098DD B0 00                     	BCS ResetPPUScrollHi_NametableB_Bank6
098DF                           
098DF                           ResetPPUScrollHi_NametableA_Bank6:
098DF A9 01                     	LDA #$01
098E1 85 C9                     	STA PPUScrollXHiMirror
098E3 0A                        	ASL A
098E4 85 C8                     	STA PPUScrollYHiMirror
098E6 A9 20                     	LDA #$20
098E8 D0 00                     	BNE ResetPPUScrollHi_Exit_Bank6
098EA                           
098EA                           ResetPPUScrollHi_NametableB_Bank6:
098EA A9 00                     	LDA #$00
098EC 85 C9                     	STA PPUScrollXHiMirror
098EE 85 C8                     	STA PPUScrollYHiMirror
098F0 B9 DA 98                  	LDA PPUScrollHiOffsets_Bank6, Y
098F3                           
098F3                           ResetPPUScrollHi_Exit_Bank6:
098F3 8D 06 05                  	STA PPUScrollCheckHi
098F6 60                        	RTS
098F7                           
098F7                           
098F7                           ;
098F7                           ; Creates a mushroom object in subspace.
098F7                           ;
098F7                           ; ##### Input
098F7                           ; - `X`: Object position
098F7                           ; - `Y`: Which mushroom (0 or 1)
098F7                           ;
098F7                           CreateSubspaceMushroomObject:
098F7 8A                        	TXA
098F8 48                        	PHA
098F9 29 F0                     	AND #$F0
098FB 85 33                     	STA ObjectYLo
098FD 8A                        	TXA
098FE 0A                        	ASL A
098FF 0A                        	ASL A
09900 0A                        	ASL A
09901 0A                        	ASL A
09902 85 29                     	STA ObjectXLo
09904                           
09904                           	; Subspace is page `$0A`.
09904 A9 0A                     	LDA #$0A
09906 85 15                     	STA ObjectXHi
09908 A2 00                     	LDX #$00
0990A 86 12                     	STX byte_RAM_12
0990C 86 1F                     	STX ObjectYHi
0990E                           
0990E                           	; Create a living fungus.
0990E                           	; Even most of this routine uses an enemy slot offset, the next few lines assume slot 0.
0990E                           	; We just set `X` to 0, so this is a safe enough assumption.
0990E A9 3F                     	LDA #Enemy_Mushroom
09910 85 90                     	STA ObjectType
09912 A9 01                     	LDA #EnemyState_Alive
09914 85 51                     	STA EnemyState
09916                           	; Keep track of which mushroom so that you can't collect it twice.
09916 84 79                     	STY EnemyVariable
09918                           
09918                           	; Reset various object timers and attributes
09918 A9 00                     	LDA #$00
0991A 95 86                     	STA ObjectTimer1, X
0991C 95 B1                     	STA EnemyArray_B1, X
0991E 95 A8                     	STA ObjectBeingCarriedTimer, X
09920 95 9F                     	STA ObjectAnimationTimer, X
09922 9D 4A 04                  	STA ObjectShakeTimer, X
09925 95 5B                     	STA EnemyCollision, X
09927 9D 38 04                  	STA ObjectStunTimer, X
0992A 9D 53 04                  	STA ObjectTimer2, X
0992D 9D 5C 04                  	STA ObjectFlashTimer, X
09930 95 47                     	STA ObjectYVelocity, X
09932 95 3D                     	STA ObjectXVelocity, X
09934                           
09934                           	; Load various object attributes for a mushroom
09934 B4 90                     	LDY ObjectType, X
09936 B9 00 00                  	LDA ObjectAttributeTable, Y
09939 29 7F                     	AND #$7F
0993B 95 65                     	STA ObjectAttributes, X
0993D B9 00 00                  	LDA EnemyArray_46E_Data, Y
09940 9D 6E 04                  	STA EnemyArray_46E, X
09943 B9 00 00                  	LDA ObjectHitbox_Data, Y
09946 9D 89 04                  	STA ObjectHitbox, X
09949 B9 00 00                  	LDA EnemyArray_492_Data, Y
0994C 9D 92 04                  	STA EnemyArray_492, X
0994F A9 FF                     	LDA #$FF
09951 9D 41 04                  	STA EnemyRawDataOffset, X
09954                           
09954                           	; Restore X to its previous value
09954 68                        	PLA
09955 AA                        	TAX
09956                           
09956 60                        	RTS
09957 FF FF FF FF FF FF FF FF.. .pad $c000, $ff
0C000                           
0C000                           ; ----------------------------------------
0C000                           ; Bank 8 and 9. Entirely level data.
0C000                           ; Some more unused space as usual.
0C000                           .base $8000
08000                           .include "src/prg-8-9.asm"
08000                           ;
08000                           ; Bank 8 & Bank 9
08000                           ; ===============
08000                           ;
08000                           ; What's inside:
08000                           ;
08000                           ;   - Level and enemy data pointer tables
08000                           ;   - Level data
08000                           ;   - Enemy data
08000                           ;
08000                           
08000                           ;
08000                           ; Table to determine what "total" index a given
08000                           ; level + area is. Get the starting area from this
08000                           ; table (based on CurrentLevel) and add the area to it
08000                           ;
08000                           LevelAreaStartIndexes:
08000 00                        	.db $00 ; Level 1-1
08001 0A                        	.db $0A ; Level 1-2
08002 14                        	.db $14 ; Level 1-3
08003 1E                        	.db $1E ; Level 2-1
08004 28                        	.db $28 ; Level 2-2
08005 32                        	.db $32 ; Level 2-3
08006 3C                        	.db $3C ; Level 3-1
08007 46                        	.db $46 ; Level 3-2
08008 50                        	.db $50 ; Level 3-3
08009 5A                        	.db $5A ; Level 4-1
0800A 64                        	.db $64 ; Level 4-2
0800B 6E                        	.db $6E ; Level 4-3
0800C 78                        	.db $78 ; Level 5-1
0800D 82                        	.db $82 ; Level 5-2
0800E 8C                        	.db $8C ; Level 5-3
0800F 96                        	.db $96 ; Level 6-1
08010 A0                        	.db $A0 ; Level 6-2
08011 AA                        	.db $AA ; Level 6-3
08012 B4                        	.db $B4 ; Level 7-1
08013 BE                        	.db $BE ; Level 7-2
08014 C8                        	.db $C8 ; Level 7-3 (unused)
08015                           
08015                           
08015                           ; Pointers to level data
08015                           include "src/levels/level-data-pointers.asm"
08015                           LevelDataPointersLo:
08015                           	; Level 1-1
08015 00                        	.db <LevelData_1_1_Area0
08016 00                        	.db <LevelData_1_1_Area1
08017 00                        	.db <LevelData_1_1_Area2
08018 00                        	.db <LevelData_1_1_Area3
08019 00                        	.db <LevelData_1_1_Area4
0801A 00                        	.db <LevelData_1_1_Area5
0801B 00                        	.db <LevelData_1_1_Area5
0801C 00                        	.db <LevelData_1_1_Area5
0801D 00                        	.db <LevelData_1_1_Area5
0801E 00                        	.db <LevelData_1_1_Area5
0801F                           	; Level 1-2
0801F 00                        	.db <LevelData_1_2_Area0
08020 00                        	.db <LevelData_1_2_Area1
08021 00                        	.db <LevelData_1_2_Area2
08022 00                        	.db <LevelData_1_2_Area3
08023 00                        	.db <LevelData_1_2_Area4
08024 00                        	.db <LevelData_1_3_Area0
08025 00                        	.db <LevelData_1_3_Area0
08026 00                        	.db <LevelData_1_3_Area0
08027 00                        	.db <LevelData_1_3_Area0
08028 00                        	.db <LevelData_1_3_Area0
08029                           	; Level 1-3
08029 00                        	.db <LevelData_1_3_Area0
0802A 00                        	.db <LevelData_1_3_Area1
0802B 00                        	.db <LevelData_1_3_Area2
0802C 00                        	.db <LevelData_1_3_Area3
0802D 00                        	.db <LevelData_1_3_Area4
0802E 00                        	.db <LevelData_1_3_Area4
0802F 00                        	.db <LevelData_1_3_Area4
08030 00                        	.db <LevelData_1_3_Area4
08031 00                        	.db <LevelData_1_3_Area4
08032 00                        	.db <LevelData_1_3_Area4
08033                           	; Level 2-1
08033 00                        	.db <LevelData_2_1_Area0
08034 00                        	.db <LevelData_2_1_Area1
08035 00                        	.db <LevelData_2_1_Area2
08036 00                        	.db <LevelData_2_1_Area2
08037 00                        	.db <LevelData_2_1_Area4
08038 00                        	.db <LevelData_2_1_Area2
08039 00                        	.db <LevelData_2_1_Area2
0803A 00                        	.db <LevelData_2_1_Area2
0803B 00                        	.db <LevelData_2_1_Area2
0803C 00                        	.db <LevelData_2_1_Area2
0803D                           	; Level 2-2
0803D 00                        	.db <LevelData_2_2_Area0
0803E 00                        	.db <LevelData_2_2_Area1
0803F 00                        	.db <LevelData_2_2_Area2
08040 00                        	.db <LevelData_2_2_Area3
08041 00                        	.db <LevelData_2_2_Area4
08042 00                        	.db <LevelData_2_2_Area5
08043 00                        	.db <LevelData_2_2_Area5
08044 00                        	.db <LevelData_2_2_Area5
08045 00                        	.db <LevelData_2_2_Area5
08046 00                        	.db <LevelData_2_2_Area5
08047                           	; Level 2-3
08047 00                        	.db <LevelData_2_3_Area0
08048 00                        	.db <LevelData_2_3_Area1
08049 00                        	.db <LevelData_2_3_Area2
0804A 00                        	.db <LevelData_2_3_Area3
0804B 00                        	.db <LevelData_2_3_Area4
0804C 00                        	.db <LevelData_2_3_Area5
0804D 00                        	.db <LevelData_2_3_Area6
0804E 00                        	.db <LevelData_2_3_Area7
0804F 00                        	.db <LevelData_2_3_Area7
08050 00                        	.db <LevelData_2_3_Area7
08051                           	; Level 3-1
08051 00                        	.db <LevelData_3_1_Area0
08052 00                        	.db <LevelData_3_1_Area1
08053 00                        	.db <LevelData_3_1_Area2
08054 00                        	.db <LevelData_3_1_Area3
08055 00                        	.db <LevelData_3_1_Area4
08056 00                        	.db <LevelData_3_2_Area0
08057 00                        	.db <LevelData_3_2_Area0
08058 00                        	.db <LevelData_3_2_Area0
08059 00                        	.db <LevelData_3_2_Area0
0805A 00                        	.db <LevelData_3_2_Area0
0805B                           	; Level 3-2
0805B 00                        	.db <LevelData_3_2_Area0
0805C 00                        	.db <LevelData_3_2_Area1
0805D 00                        	.db <LevelData_3_2_Area2
0805E 00                        	.db <LevelData_3_3_Area0
0805F 00                        	.db <LevelData_3_3_Area0
08060 00                        	.db <LevelData_3_3_Area0
08061 00                        	.db <LevelData_3_3_Area0
08062 00                        	.db <LevelData_3_3_Area0
08063 00                        	.db <LevelData_3_3_Area0
08064 00                        	.db <LevelData_3_3_Area0
08065                           	; Level 3-3
08065 00                        	.db <LevelData_3_3_Area0
08066 00                        	.db <LevelData_3_3_Area1
08067 00                        	.db <LevelData_3_3_Area2
08068 00                        	.db <LevelData_3_3_Area3
08069 00                        	.db <LevelData_3_3_Area4
0806A 00                        	.db <LevelData_3_3_Area5
0806B 00                        	.db <LevelData_3_3_Area6
0806C 00                        	.db <LevelData_3_3_Area7
0806D 00                        	.db <LevelData_3_3_Area8
0806E 00                        	.db <LevelData_3_3_Area8
0806F                           	; Level 4-1
0806F 00                        	.db <LevelData_4_1_Area0
08070 00                        	.db <LevelData_4_1_Area1
08071 00                        	.db <LevelData_4_2_Area0
08072 00                        	.db <LevelData_4_2_Area0
08073 00                        	.db <LevelData_4_2_Area0
08074 00                        	.db <LevelData_4_2_Area0
08075 00                        	.db <LevelData_4_2_Area0
08076 00                        	.db <LevelData_4_2_Area0
08077 00                        	.db <LevelData_4_2_Area0
08078 00                        	.db <LevelData_4_2_Area0
08079                           	; Level 4-2
08079 00                        	.db <LevelData_4_2_Area0
0807A 00                        	.db <LevelData_4_2_Area1
0807B 00                        	.db <LevelData_4_2_Area2
0807C 00                        	.db <LevelData_4_2_Area3
0807D 00                        	.db <LevelData_4_2_Area4
0807E 00                        	.db <LevelData_4_2_Area4
0807F 00                        	.db <LevelData_4_2_Area4
08080 00                        	.db <LevelData_4_2_Area4
08081 00                        	.db <LevelData_4_2_Area4
08082 00                        	.db <LevelData_4_2_Area4
08083                           	; Level 4-3
08083 00                        	.db <LevelData_4_3_Area0
08084 00                        	.db <LevelData_4_3_Area1
08085 00                        	.db <LevelData_4_3_Area2
08086 00                        	.db <LevelData_4_3_Area3
08087 00                        	.db <LevelData_4_3_Area4
08088 00                        	.db <LevelData_4_3_Area5
08089 00                        	.db <LevelData_4_3_Area6
0808A 00                        	.db <LevelData_4_3_Area7
0808B 00                        	.db <LevelData_5_1_Area0
0808C 00                        	.db <LevelData_5_1_Area0
0808D                           	; Level 5-1
0808D 00                        	.db <LevelData_5_1_Area0
0808E 00                        	.db <LevelData_5_1_Area1
0808F 00                        	.db <LevelData_5_1_Area2
08090 00                        	.db <LevelData_5_2_Area0
08091 00                        	.db <LevelData_5_2_Area0
08092 00                        	.db <LevelData_5_2_Area0
08093 00                        	.db <LevelData_5_2_Area0
08094 00                        	.db <LevelData_5_2_Area0
08095 00                        	.db <LevelData_5_2_Area0
08096 00                        	.db <LevelData_5_2_Area0
08097                           	; Level 5-2
08097 00                        	.db <LevelData_5_2_Area0
08098 00                        	.db <LevelData_5_2_Area1
08099 00                        	.db <LevelData_5_2_Area2
0809A 00                        	.db <LevelData_5_2_Area3
0809B 00                        	.db <LevelData_5_2_Area4
0809C 00                        	.db <LevelData_5_2_Area5
0809D 00                        	.db <LevelData_5_3_Area0
0809E 00                        	.db <LevelData_5_3_Area0
0809F 00                        	.db <LevelData_5_3_Area0
080A0 00                        	.db <LevelData_5_3_Area0
080A1                           	; Level 5-3
080A1 00                        	.db <LevelData_5_3_Area0
080A2 00                        	.db <LevelData_5_3_Area1
080A3 00                        	.db <LevelData_5_3_Area2
080A4 00                        	.db <LevelData_5_3_Area3
080A5 00                        	.db <LevelData_5_3_Area4
080A6 00                        	.db <LevelData_5_3_Area5
080A7 00                        	.db <LevelData_5_3_Area5
080A8 00                        	.db <LevelData_5_3_Area5
080A9 00                        	.db <LevelData_5_3_Area5
080AA 00                        	.db <LevelData_5_3_Area5
080AB                           	; Level 6-1
080AB 00                        	.db <LevelData_6_1_Area0
080AC 00                        	.db <LevelData_6_1_Area1
080AD 00                        	.db <LevelData_6_1_Area2
080AE 00                        	.db <LevelData_6_1_Area3
080AF 00                        	.db <LevelData_6_1_Area4
080B0 00                        	.db <LevelData_6_1_Area5
080B1 00                        	.db <LevelData_6_1_Area6
080B2 00                        	.db <LevelData_6_1_Area6
080B3 00                        	.db <LevelData_6_1_Area6
080B4 00                        	.db <LevelData_6_1_Area6
080B5                           	; Level 6-2
080B5 00                        	.db <LevelData_6_2_Area0
080B6 00                        	.db <LevelData_6_2_Area1
080B7 00                        	.db <LevelData_6_2_Area2
080B8 00                        	.db <LevelData_6_2_Area2
080B9 00                        	.db <LevelData_6_2_Area2
080BA 00                        	.db <LevelData_6_2_Area2
080BB 00                        	.db <LevelData_6_2_Area2
080BC 00                        	.db <LevelData_6_2_Area2
080BD 00                        	.db <LevelData_6_2_Area2
080BE 00                        	.db <LevelData_6_2_Area2
080BF                           	; Level 6-3
080BF 00                        	.db <LevelData_6_3_Area0
080C0 00                        	.db <LevelData_6_3_Area1
080C1 00                        	.db <LevelData_6_3_Area2
080C2 00                        	.db <LevelData_6_3_Area3
080C3 00                        	.db <LevelData_6_3_Area4
080C4 00                        	.db <LevelData_6_3_Area5
080C5 00                        	.db <LevelData_6_3_Area6
080C6 00                        	.db <LevelData_6_3_Area6
080C7 00                        	.db <LevelData_6_3_Area6
080C8 00                        	.db <LevelData_6_3_Area6
080C9                           	; Level 7-1
080C9 00                        	.db <LevelData_7_1_Area0
080CA 00                        	.db <LevelData_7_1_Area1
080CB 00                        	.db <LevelData_7_1_Area2
080CC 00                        	.db <LevelData_7_1_Area3
080CD 00                        	.db <LevelData_7_1_Area4
080CE 00                        	.db <LevelData_7_1_Area5
080CF 00                        	.db <LevelData_7_1_Area5
080D0 00                        	.db <LevelData_7_1_Area5
080D1 00                        	.db <LevelData_7_1_Area5
080D2 00                        	.db <LevelData_7_1_Area5
080D3                           	; Level 7-2
080D3 00                        	.db <LevelData_7_2_Area0
080D4 00                        	.db <LevelData_7_2_Area1
080D5 00                        	.db <LevelData_7_2_Area2
080D6 00                        	.db <LevelData_7_2_Area3
080D7 00                        	.db <LevelData_7_2_Area4
080D8 00                        	.db <LevelData_7_2_Area5
080D9 00                        	.db <LevelData_7_2_Area6
080DA 00                        	.db <LevelData_7_2_Area7
080DB 00                        	.db <LevelData_7_2_Area8
080DC 00                        	.db <LevelData_7_2_Area9
080DD                           	; Level 7-3
080DD 00                        	.db <LevelData_7_3_Area0
080DE 00                        	.db <LevelData_7_3_Area0
080DF 00                        	.db <LevelData_7_3_Area0
080E0 00                        	.db <LevelData_7_3_Area0
080E1 00                        	.db <LevelData_7_3_Area0
080E2 00                        	.db <LevelData_7_3_Area0
080E3 00                        	.db <LevelData_7_3_Area0
080E4 00                        	.db <LevelData_7_3_Area0
080E5 00                        	.db <LevelData_7_3_Area0
080E6 00                        	.db <LevelData_7_3_Area0
080E7                           
080E7                           LevelDataPointersHi:
080E7                           	; Level 1-1
080E7 00                        	.db >LevelData_1_1_Area0
080E8 00                        	.db >LevelData_1_1_Area1
080E9 00                        	.db >LevelData_1_1_Area2
080EA 00                        	.db >LevelData_1_1_Area3
080EB 00                        	.db >LevelData_1_1_Area4
080EC 00                        	.db >LevelData_1_1_Area5
080ED 00                        	.db >LevelData_1_1_Area5
080EE 00                        	.db >LevelData_1_1_Area5
080EF 00                        	.db >LevelData_1_1_Area5
080F0 00                        	.db >LevelData_1_1_Area5
080F1                           	; Level 1-2
080F1 00                        	.db >LevelData_1_2_Area0
080F2 00                        	.db >LevelData_1_2_Area1
080F3 00                        	.db >LevelData_1_2_Area2
080F4 00                        	.db >LevelData_1_2_Area3
080F5 00                        	.db >LevelData_1_2_Area4
080F6 00                        	.db >LevelData_1_3_Area0
080F7 00                        	.db >LevelData_1_3_Area0
080F8 00                        	.db >LevelData_1_3_Area0
080F9 00                        	.db >LevelData_1_3_Area0
080FA 00                        	.db >LevelData_1_3_Area0
080FB                           	; Level 1-3
080FB 00                        	.db >LevelData_1_3_Area0
080FC 00                        	.db >LevelData_1_3_Area1
080FD 00                        	.db >LevelData_1_3_Area2
080FE 00                        	.db >LevelData_1_3_Area3
080FF 00                        	.db >LevelData_1_3_Area4
08100 00                        	.db >LevelData_1_3_Area4
08101 00                        	.db >LevelData_1_3_Area4
08102 00                        	.db >LevelData_1_3_Area4
08103 00                        	.db >LevelData_1_3_Area4
08104 00                        	.db >LevelData_1_3_Area4
08105                           	; Level 2-1
08105 00                        	.db >LevelData_2_1_Area0
08106 00                        	.db >LevelData_2_1_Area1
08107 00                        	.db >LevelData_2_1_Area2
08108 00                        	.db >LevelData_2_1_Area2
08109 00                        	.db >LevelData_2_1_Area4
0810A 00                        	.db >LevelData_2_1_Area2
0810B 00                        	.db >LevelData_2_1_Area2
0810C 00                        	.db >LevelData_2_1_Area2
0810D 00                        	.db >LevelData_2_1_Area2
0810E 00                        	.db >LevelData_2_1_Area2
0810F                           	; Level 2-2
0810F 00                        	.db >LevelData_2_2_Area0
08110 00                        	.db >LevelData_2_2_Area1
08111 00                        	.db >LevelData_2_2_Area2
08112 00                        	.db >LevelData_2_2_Area3
08113 00                        	.db >LevelData_2_2_Area4
08114 00                        	.db >LevelData_2_2_Area5
08115 00                        	.db >LevelData_2_2_Area5
08116 00                        	.db >LevelData_2_2_Area5
08117 00                        	.db >LevelData_2_2_Area5
08118 00                        	.db >LevelData_2_2_Area5
08119                           	; Level 2-3
08119 00                        	.db >LevelData_2_3_Area0
0811A 00                        	.db >LevelData_2_3_Area1
0811B 00                        	.db >LevelData_2_3_Area2
0811C 00                        	.db >LevelData_2_3_Area3
0811D 00                        	.db >LevelData_2_3_Area4
0811E 00                        	.db >LevelData_2_3_Area5
0811F 00                        	.db >LevelData_2_3_Area6
08120 00                        	.db >LevelData_2_3_Area7
08121 00                        	.db >LevelData_2_3_Area7
08122 00                        	.db >LevelData_2_3_Area7
08123                           	; Level 3-1
08123 00                        	.db >LevelData_3_1_Area0
08124 00                        	.db >LevelData_3_1_Area1
08125 00                        	.db >LevelData_3_1_Area2
08126 00                        	.db >LevelData_3_1_Area3
08127 00                        	.db >LevelData_3_1_Area4
08128 00                        	.db >LevelData_3_2_Area0
08129 00                        	.db >LevelData_3_2_Area0
0812A 00                        	.db >LevelData_3_2_Area0
0812B 00                        	.db >LevelData_3_2_Area0
0812C 00                        	.db >LevelData_3_2_Area0
0812D                           	; Level 3-2
0812D 00                        	.db >LevelData_3_2_Area0
0812E 00                        	.db >LevelData_3_2_Area1
0812F 00                        	.db >LevelData_3_2_Area2
08130 00                        	.db >LevelData_3_3_Area0
08131 00                        	.db >LevelData_3_3_Area0
08132 00                        	.db >LevelData_3_3_Area0
08133 00                        	.db >LevelData_3_3_Area0
08134 00                        	.db >LevelData_3_3_Area0
08135 00                        	.db >LevelData_3_3_Area0
08136 00                        	.db >LevelData_3_3_Area0
08137                           	; Level 3-3
08137 00                        	.db >LevelData_3_3_Area0
08138 00                        	.db >LevelData_3_3_Area1
08139 00                        	.db >LevelData_3_3_Area2
0813A 00                        	.db >LevelData_3_3_Area3
0813B 00                        	.db >LevelData_3_3_Area4
0813C 00                        	.db >LevelData_3_3_Area5
0813D 00                        	.db >LevelData_3_3_Area6
0813E 00                        	.db >LevelData_3_3_Area7
0813F 00                        	.db >LevelData_3_3_Area8
08140 00                        	.db >LevelData_3_3_Area8
08141                           	; Level 4-1
08141 00                        	.db >LevelData_4_1_Area0
08142 00                        	.db >LevelData_4_1_Area1
08143 00                        	.db >LevelData_4_2_Area0
08144 00                        	.db >LevelData_4_2_Area0
08145 00                        	.db >LevelData_4_2_Area0
08146 00                        	.db >LevelData_4_2_Area0
08147 00                        	.db >LevelData_4_2_Area0
08148 00                        	.db >LevelData_4_2_Area0
08149 00                        	.db >LevelData_4_2_Area0
0814A 00                        	.db >LevelData_4_2_Area0
0814B                           	; Level 4-2
0814B 00                        	.db >LevelData_4_2_Area0
0814C 00                        	.db >LevelData_4_2_Area1
0814D 00                        	.db >LevelData_4_2_Area2
0814E 00                        	.db >LevelData_4_2_Area3
0814F 00                        	.db >LevelData_4_2_Area4
08150 00                        	.db >LevelData_4_2_Area4
08151 00                        	.db >LevelData_4_2_Area4
08152 00                        	.db >LevelData_4_2_Area4
08153 00                        	.db >LevelData_4_2_Area4
08154 00                        	.db >LevelData_4_2_Area4
08155                           	; Level 4-3
08155 00                        	.db >LevelData_4_3_Area0
08156 00                        	.db >LevelData_4_3_Area1
08157 00                        	.db >LevelData_4_3_Area2
08158 00                        	.db >LevelData_4_3_Area3
08159 00                        	.db >LevelData_4_3_Area4
0815A 00                        	.db >LevelData_4_3_Area5
0815B 00                        	.db >LevelData_4_3_Area6
0815C 00                        	.db >LevelData_4_3_Area7
0815D 00                        	.db >LevelData_5_1_Area0
0815E 00                        	.db >LevelData_5_1_Area0
0815F                           	; Level 5-1
0815F 00                        	.db >LevelData_5_1_Area0
08160 00                        	.db >LevelData_5_1_Area1
08161 00                        	.db >LevelData_5_1_Area2
08162 00                        	.db >LevelData_5_2_Area0
08163 00                        	.db >LevelData_5_2_Area0
08164 00                        	.db >LevelData_5_2_Area0
08165 00                        	.db >LevelData_5_2_Area0
08166 00                        	.db >LevelData_5_2_Area0
08167 00                        	.db >LevelData_5_2_Area0
08168 00                        	.db >LevelData_5_2_Area0
08169                           	; Level 5-2
08169 00                        	.db >LevelData_5_2_Area0
0816A 00                        	.db >LevelData_5_2_Area1
0816B 00                        	.db >LevelData_5_2_Area2
0816C 00                        	.db >LevelData_5_2_Area3
0816D 00                        	.db >LevelData_5_2_Area4
0816E 00                        	.db >LevelData_5_2_Area5
0816F 00                        	.db >LevelData_5_3_Area0
08170 00                        	.db >LevelData_5_3_Area0
08171 00                        	.db >LevelData_5_3_Area0
08172 00                        	.db >LevelData_5_3_Area0
08173                           	; Level 5-3
08173 00                        	.db >LevelData_5_3_Area0
08174 00                        	.db >LevelData_5_3_Area1
08175 00                        	.db >LevelData_5_3_Area2
08176 00                        	.db >LevelData_5_3_Area3
08177 00                        	.db >LevelData_5_3_Area4
08178 00                        	.db >LevelData_5_3_Area5
08179 00                        	.db >LevelData_5_3_Area5
0817A 00                        	.db >LevelData_5_3_Area5
0817B 00                        	.db >LevelData_5_3_Area5
0817C 00                        	.db >LevelData_5_3_Area5
0817D                           	; Level 6-1
0817D 00                        	.db >LevelData_6_1_Area0
0817E 00                        	.db >LevelData_6_1_Area1
0817F 00                        	.db >LevelData_6_1_Area2
08180 00                        	.db >LevelData_6_1_Area3
08181 00                        	.db >LevelData_6_1_Area4
08182 00                        	.db >LevelData_6_1_Area5
08183 00                        	.db >LevelData_6_1_Area6
08184 00                        	.db >LevelData_6_1_Area6
08185 00                        	.db >LevelData_6_1_Area6
08186 00                        	.db >LevelData_6_1_Area6
08187                           	; Level 6-2
08187 00                        	.db >LevelData_6_2_Area0
08188 00                        	.db >LevelData_6_2_Area1
08189 00                        	.db >LevelData_6_2_Area2
0818A 00                        	.db >LevelData_6_2_Area2
0818B 00                        	.db >LevelData_6_2_Area2
0818C 00                        	.db >LevelData_6_2_Area2
0818D 00                        	.db >LevelData_6_2_Area2
0818E 00                        	.db >LevelData_6_2_Area2
0818F 00                        	.db >LevelData_6_2_Area2
08190 00                        	.db >LevelData_6_2_Area2
08191                           	; Level 6-3
08191 00                        	.db >LevelData_6_3_Area0
08192 00                        	.db >LevelData_6_3_Area1
08193 00                        	.db >LevelData_6_3_Area2
08194 00                        	.db >LevelData_6_3_Area3
08195 00                        	.db >LevelData_6_3_Area4
08196 00                        	.db >LevelData_6_3_Area5
08197 00                        	.db >LevelData_6_3_Area6
08198 00                        	.db >LevelData_6_3_Area6
08199 00                        	.db >LevelData_6_3_Area6
0819A 00                        	.db >LevelData_6_3_Area6
0819B                           	; Level 7-1
0819B 00                        	.db >LevelData_7_1_Area0
0819C 00                        	.db >LevelData_7_1_Area1
0819D 00                        	.db >LevelData_7_1_Area2
0819E 00                        	.db >LevelData_7_1_Area3
0819F 00                        	.db >LevelData_7_1_Area4
081A0 00                        	.db >LevelData_7_1_Area5
081A1 00                        	.db >LevelData_7_1_Area5
081A2 00                        	.db >LevelData_7_1_Area5
081A3 00                        	.db >LevelData_7_1_Area5
081A4 00                        	.db >LevelData_7_1_Area5
081A5                           	; Level 7-2
081A5 00                        	.db >LevelData_7_2_Area0
081A6 00                        	.db >LevelData_7_2_Area1
081A7 00                        	.db >LevelData_7_2_Area2
081A8 00                        	.db >LevelData_7_2_Area3
081A9 00                        	.db >LevelData_7_2_Area4
081AA 00                        	.db >LevelData_7_2_Area5
081AB 00                        	.db >LevelData_7_2_Area6
081AC 00                        	.db >LevelData_7_2_Area7
081AD 00                        	.db >LevelData_7_2_Area8
081AE 00                        	.db >LevelData_7_2_Area9
081AF                           	; Level 7-3
081AF 00                        	.db >LevelData_7_3_Area0
081B0 00                        	.db >LevelData_7_3_Area0
081B1 00                        	.db >LevelData_7_3_Area0
081B2 00                        	.db >LevelData_7_3_Area0
081B3 00                        	.db >LevelData_7_3_Area0
081B4 00                        	.db >LevelData_7_3_Area0
081B5 00                        	.db >LevelData_7_3_Area0
081B6 00                        	.db >LevelData_7_3_Area0
081B7 00                        	.db >LevelData_7_3_Area0
081B8 00                        	.db >LevelData_7_3_Area0
081B9                           
081B9                           
081B9                           ; Include level data;
081B9                           ; see src/levels/level-data.asm for level format details
081B9                           include "src/levels/level-data.asm"
081B9                           ;
081B9                           ; Level Data
081B9                           ; ==========
081B9                           ;
081B9                           ; Levels are broken down by area. The first four bytes are a level header,
081B9                           ; specifying things like palettes, music, size, scrolling, and ground type.
081B9                           ; The rest is level objects. Levels are ended by the $FF special object.
081B9                           ;
081B9                           ; Each "page" of level data is 16x15 tiles.
081B9                           ;
081B9                           ; Level header (4 bytes):
081B9                           ;
081B9                           ;   Byte 1: HxBBBxSS
081B9                           ;   H: horizontal level flag (0 = vertical, 1 = horizontal)
081B9                           ;   B: background palette (0-7)
081B9                           ;   S: sprite palette (0-3)
081B9                           ;
081B9                           ;   Byte 2: xxxGGGGG
081B9                           ;   G: ground setting (0-31)
081B9                           ;
081B9                           ;   Byte 3: PPPPOOOO
081B9                           ;   P: number of pages minus 1 (0 = 1 page, 1 = 2 pages, etc.)
081B9                           ;   O: object type (xxOO for 3X-9X, OOxx for AX-FX)
081B9                           ;
081B9                           ;   Byte 4: xxTTTxMM
081B9                           ;   T: ground type (0-7)
081B9                           ;   M: music (0 = overworld, 1 = underground, 2 = boss, 3 = Wart)
081B9                           ;
081B9                           ; Regular object (2 bytes):
081B9                           ;   $YX - position
081B9                           ;   $TT - type
081B9                           ;
081B9                           ; Special objects (1-3 bytes):
081B9                           ;   $F0 - ground setting; byte 1: oooGGGGG, where o is offset and G is ground setting
081B9                           ;   $F1 - ground setting; byte 1: oooGGGGG, where o+8 is offset and G is ground setting
081B9                           ;   $F2 - skip forward one page; no parameters
081B9                           ;   $F3 - skip forward two pages; no parameters
081B9                           ;   $F4 - new object layer; next object will be positioned relative to (0, 0) of the first page; no parameters
081B9                           ;   $F5 - area pointer; byte 1: world/level offset, byte 2: $AP, where A is the area and P is the page offset within the area
081B9                           ;   $F6 - ground type; byte 1: ground type
081B9                           ;   $F7-$FE - seemingly unused
081B9                           ;   $FF - end of the data for the current level; no parameters
081B9                           ;
081B9                           ; Door pointer (2 bytes):
081B9                           ;   In worlds 1-5, the object immediately following a door acts as an area pointer
081B9                           ;
081B9                           
081B9                           ; -------------------------------
081B9                           ; World 1
081B9                           
081B9                           ; World 1-1
081B9                           include "src/levels/1/1-1/1-1-area0.asm"
081B9                           ; Level 1-1, Area 0
081B9                           
081B9                           LevelData_1_1_Area0:
081B9                           	; Level Header
081B9                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
081B9                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
081B9                           	levelHeader 3, LevelDirection_Vertical, 1, 1, LevelMusic_Overworld, 0, 0, $13, $0
081B9 00                        	.db LevelDirection_Vertical << 7 | 1 << 3 | 1
081BA 00                        	.db %11100000 | $13
081BB 00                        	.db 3 << 4 | 0 << 2 | 0
081BC                           	IFNDEF LEVEL_ENGINE_UPGRADES
081BC 00                        		.db $0 << 3 | LevelMusic_Overworld
081BD                           	ENDIF
081BD                           	IFDEF LEVEL_ENGINE_UPGRADES
081BD                           		.db $0 << 4 | LevelMusic_Overworld
081BD                           	ENDIF
081BD                           
081BD B7 0A                     	.db $B7, $0A
081BF                           IFNDEF DISABLE_DOOR_POINTERS
081BF 00 00                     	.db $00, $00
081C1                           ENDIF
081C1 56 10                     	.db $56, $10
081C3 1A 10                     	.db $1A, $10
081C5 D6 C2                     	.db $D6, $C2
081C7 29 10                     	.db $29, $10
081C9 75 C4                     	.db $75, $C4
081CB 5A 21                     	.db $5A, $21
081CD 12 C9                     	.db $12, $C9
081CF 75 C7                     	.db $75, $C7
081D1 1E C1                     	.db $1E, $C1
081D3 3E 0A                     	.db $3E, $0A
081D5                           IFNDEF DISABLE_DOOR_POINTERS
081D5 00 20                     	.db $00, $20
081D7                           ENDIF
081D7                           IFDEF DISABLE_DOOR_POINTERS
081D7                           	.db $F5, $00, $20
081D7                           ENDIF
081D7 20 CF                     	.db $20, $CF
081D9 FF                        	.db $FF
081DA                           include "src/levels/1/1-1/1-1-area1.asm"
081DA                           ; Level 1-1, Area 1
081DA                           
081DA                           LevelData_1_1_Area1:
081DA                           	; Level Header
081DA                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
081DA                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
081DA                           	levelHeader 3, LevelDirection_Vertical, 0, 0, LevelMusic_Overworld, 0, 0, $13, $0
081DA 00                        	.db LevelDirection_Vertical << 7 | 0 << 3 | 0
081DB 00                        	.db %11100000 | $13
081DC 00                        	.db 3 << 4 | 0 << 2 | 0
081DD                           	IFNDEF LEVEL_ENGINE_UPGRADES
081DD 00                        		.db $0 << 3 | LevelMusic_Overworld
081DE                           	ENDIF
081DE                           	IFDEF LEVEL_ENGINE_UPGRADES
081DE                           		.db $0 << 4 | LevelMusic_Overworld
081DE                           	ENDIF
081DE                           
081DE F5 00 50                  	.db $F5, $00, $50
081E1 34 E1                     	.db $34, $E1
081E3 19 E2                     	.db $19, $E2
081E5 B5 12                     	.db $B5, $12
081E7 0A 12                     	.db $0A, $12
081E9 17 12                     	.db $17, $12
081EB 16 E5                     	.db $16, $E5
081ED 32 E1                     	.db $32, $E1
081EF 26 E3                     	.db $26, $E3
081F1 57 E5                     	.db $57, $E5
081F3 38 C2                     	.db $38, $C2
081F5 27 22                     	.db $27, $22
081F7 0C E2                     	.db $0C, $E2
081F9 17 C1                     	.db $17, $C1
081FB 11 E2                     	.db $11, $E2
081FD 16 22                     	.db $16, $22
081FF 16 C3                     	.db $16, $C3
08201 2B 21                     	.db $2B, $21
08203 18 C4                     	.db $18, $C4
08205 37 C2                     	.db $37, $C2
08207 36 C7                     	.db $36, $C7
08209 12 E2                     	.db $12, $E2
0820B 35 C8                     	.db $35, $C8
0820D 3B C3                     	.db $3B, $C3
0820F 24 22                     	.db $24, $22
08211 12 0C                     	.db $12, $0C
08213 F5 00 29                  	.db $F5, $00, $29
08216 04 C4                     	.db $04, $C4
08218 30 E1                     	.db $30, $E1
0821A 02 03                     	.db $02, $03
0821C 03 EC                     	.db $03, $EC
0821E F4                        	.db $F4
0821F 07 0D                     	.db $07, $0D
08221 45 0D                     	.db $45, $0D
08223 1A 0D                     	.db $1A, $0D
08225 26 E3                     	.db $26, $E3
08227 BA 0C                     	.db $BA, $0C
08229 FF                        	.db $FF
0822A                           include "src/levels/1/1-1/1-1-area2.asm"
0822A                           ; Level 1-1, Area 2
0822A                           
0822A                           LevelData_1_1_Area2:
0822A                           	; Level Header
0822A                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0822A                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0822A                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 2, $00, $0
0822A 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
0822B 00                        	.db %11100000 | $00
0822C 00                        	.db 9 << 4 | 0 << 2 | 2
0822D                           	IFNDEF LEVEL_ENGINE_UPGRADES
0822D 00                        		.db $0 << 3 | LevelMusic_Overworld
0822E                           	ENDIF
0822E                           	IFDEF LEVEL_ENGINE_UPGRADES
0822E                           		.db $0 << 4 | LevelMusic_Overworld
0822E                           	ENDIF
0822E                           
0822E 79 16                     	.db $79, $16
08230 10 C2                     	.db $10, $C2
08232 07 16                     	.db $07, $16
08234 31 0A                     	.db $31, $0A
08236                           IFNDEF DISABLE_DOOR_POINTERS
08236 00 03                     	.db $00, $03
08238                           ENDIF
08238                           IFDEF DISABLE_DOOR_POINTERS
08238                           	.db $F5, $00, $03
08238                           ENDIF
08238 15 21                     	.db $15, $21
0823A 08 22                     	.db $08, $22
0823C 0F 22                     	.db $0F, $22
0823E 8A 2B                     	.db $8A, $2B
08240 0B 52                     	.db $0B, $52
08242 0E 26                     	.db $0E, $26
08244 10 10                     	.db $10, $10
08246 0A C5                     	.db $0A, $C5
08248 63 21                     	.db $63, $21
0824A 60 0C                     	.db $60, $0C
0824C 44 29                     	.db $44, $29
0824E 3E 0F                     	.db $3E, $0F
08250 14 0F                     	.db $14, $0F
08252 09 01                     	.db $09, $01
08254 19 0F                     	.db $19, $0F
08256 78 51                     	.db $78, $51
08258 17 DC                     	.db $17, $DC
0825A 15 C2                     	.db $15, $C2
0825C 14 22                     	.db $14, $22
0825E 10 29                     	.db $10, $29
08260 03 C2                     	.db $03, $C2
08262 18 FA                     	.db $18, $FA
08264 15 C3                     	.db $15, $C3
08266 21 22                     	.db $21, $22
08268 F0 C8                     	.db $F0, $C8
0826A 5A 10                     	.db $5A, $10
0826C 1E 10                     	.db $1E, $10
0826E 33 C2                     	.db $33, $C2
08270 16 F9                     	.db $16, $F9
08272 B8 27                     	.db $B8, $27
08274 0A 01                     	.db $0A, $01
08276 17 C3                     	.db $17, $C3
08278 11 22                     	.db $11, $22
0827A 0F 29                     	.db $0F, $29
0827C 10 C2                     	.db $10, $C2
0827E 17 C5                     	.db $17, $C5
08280 33 22                     	.db $33, $22
08282 07 C6                     	.db $07, $C6
08284 11 C3                     	.db $11, $C3
08286 1F 25                     	.db $1F, $25
08288 F0 E0                     	.db $F0, $E0
0828A 8D 21                     	.db $8D, $21
0828C 0F 27                     	.db $0F, $27
0828E 43 C1                     	.db $43, $C1
08290 06 29                     	.db $06, $29
08292 0A 29                     	.db $0A, $29
08294 31 24                     	.db $31, $24
08296 06 21                     	.db $06, $21
08298 0A 51                     	.db $0A, $51
0829A 51 CF                     	.db $51, $CF
0829C 06 F3                     	.db $06, $F3
0829E 30 22                     	.db $30, $22
082A0 75 D5                     	.db $75, $D5
082A2 51 CB                     	.db $51, $CB
082A4 28 0B                     	.db $28, $0B
082A6                           IFNDEF DISABLE_DOOR_POINTERS
082A6 00 32                     	.db $00, $32
082A8                           ENDIF
082A8                           IFDEF DISABLE_DOOR_POINTERS
082A8                           	.db $F5, $00, $32
082A8                           ENDIF
082A8 1E 26                     	.db $1E, $26
082AA 1A CD                     	.db $1A, $CD
082AC 9F C0                     	.db $9F, $C0
082AE 50 21                     	.db $50, $21
082B0 01 21                     	.db $01, $21
082B2 03 2D                     	.db $03, $2D
082B4 08 54                     	.db $08, $54
082B6 0D 12                     	.db $0D, $12
082B8 F5 00 13                  	.db $F5, $00, $13
082BB 18 C6                     	.db $18, $C6
082BD F4                        	.db $F4
082BE F3                        	.db $F3
082BF F3                        	.db $F3
082C0 DF C6                     	.db $DF, $C6
082C2 F3                        	.db $F3
082C3 6D C8                     	.db $6D, $C8
082C5 F2                        	.db $F2
082C6 6A CF                     	.db $6A, $CF
082C8 5E 0B                     	.db $5E, $0B
082CA                           IFNDEF DISABLE_DOOR_POINTERS
082CA 00 41                     	.db $00, $41
082CC                           ENDIF
082CC                           IFDEF DISABLE_DOOR_POINTERS
082CC                           	.db $F5, $00, $41
082CC                           ENDIF
082CC F4                        	.db $F4
082CD F3                        	.db $F3
082CE F3                        	.db $F3
082CF F3                        	.db $F3
082D0 2E 16                     	.db $2E, $16
082D2 FF                        	.db $FF
082D3                           include "src/levels/1/1-1/1-1-area3.asm"
082D3                           ; Level 1-1, Area 3
082D3                           
082D3                           LevelData_1_1_Area3:
082D3                           	; Level Header
082D3                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
082D3                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
082D3                           	levelHeader 2, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 2, $0a, $2
082D3 00                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
082D4 00                        	.db %11100000 | $0a
082D5 00                        	.db 2 << 4 | 0 << 2 | 2
082D6                           	IFNDEF LEVEL_ENGINE_UPGRADES
082D6 00                        		.db $2 << 3 | LevelMusic_Underground
082D7                           	ENDIF
082D7                           	IFDEF LEVEL_ENGINE_UPGRADES
082D7                           		.db $2 << 4 | LevelMusic_Underground
082D7                           	ENDIF
082D7                           
082D7 47 A8                     	.db $47, $A8
082D9 19 25                     	.db $19, $25
082DB 0B 25                     	.db $0B, $25
082DD 16 83                     	.db $16, $83
082DF 24 0A                     	.db $24, $0A
082E1                           IFNDEF DISABLE_DOOR_POINTERS
082E1 00 54                     	.db $00, $54
082E3                           ENDIF
082E3                           IFDEF DISABLE_DOOR_POINTERS
082E3                           	.db $F5, $00, $54
082E3                           ENDIF
082E3 13 25                     	.db $13, $25
082E5 F0 71                     	.db $F0, $71
082E7 F0 FC                     	.db $F0, $FC
082E9 F0 0E                     	.db $F0, $0E
082EB F1 8F                     	.db $F1, $8F
082ED F1 B1                     	.db $F1, $B1
082EF F1 F4                     	.db $F1, $F4
082F1 64 F3                     	.db $64, $F3
082F3 98 0C                     	.db $98, $0C
082F5 F5 00 40                  	.db $F5, $00, $40
082F8 48 03                     	.db $48, $03
082FA 18 03                     	.db $18, $03
082FC C7 13                     	.db $C7, $13
082FE                           IFNDEF DISABLE_DOOR_POINTERS
082FE 00 28                     	.db $00, $28
08300                           ENDIF
08300                           IFDEF DISABLE_DOOR_POINTERS
08300                           	.db $F5, $00, $28
08300                           ENDIF
08300 F0 B2                     	.db $F0, $B2
08302 F1 4A                     	.db $F1, $4A
08304 FF                        	.db $FF
08305                           include "src/levels/1/1-1/1-1-area4.asm"
08305                           ; Level 1-1, Area 4
08305                           
08305                           LevelData_1_1_Area4:
08305                           	; Level Header
08305                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08305                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08305                           	levelHeader 2, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 2, $0a, $2
08305 00                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
08306 00                        	.db %11100000 | $0a
08307 00                        	.db 2 << 4 | 0 << 2 | 2
08308                           	IFNDEF LEVEL_ENGINE_UPGRADES
08308 00                        		.db $2 << 3 | LevelMusic_Underground
08309                           	ENDIF
08309                           	IFDEF LEVEL_ENGINE_UPGRADES
08309                           		.db $2 << 4 | LevelMusic_Underground
08309                           	ENDIF
08309                           
08309 03 F3                     	.db $03, $F3
0830B 97 12                     	.db $97, $12
0830D F5 00 31                  	.db $F5, $00, $31
08310 34 80                     	.db $34, $80
08312 05 80                     	.db $05, $80
08314 0E 21                     	.db $0E, $21
08316 0F 21                     	.db $0F, $21
08318 F0 EC                     	.db $F0, $EC
0831A F1 0F                     	.db $F1, $0F
0831C F1 50                     	.db $F1, $50
0831E E1 13                     	.db $E1, $13
08320                           IFNDEF DISABLE_DOOR_POINTERS
08320 00 27                     	.db $00, $27
08322                           ENDIF
08322                           IFDEF DISABLE_DOOR_POINTERS
08322                           	.db $F5, $00, $27
08322                           ENDIF
08322 F0 8A                     	.db $F0, $8A
08324 FF                        	.db $FF
08325                           include "src/levels/1/1-1/1-1-area5.asm"
08325                           ; Level 1-1, Area 5
08325                           
08325                           LevelData_1_1_Area5:
08325                           	; Level Header
08325                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08325                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08325                           	levelHeader 4, LevelDirection_Horizontal, 0, 0, LevelMusic_Boss, 0, 0, $08, $2
08325 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
08326 00                        	.db %11100000 | $08
08327 00                        	.db 4 << 4 | 0 << 2 | 0
08328                           	IFNDEF LEVEL_ENGINE_UPGRADES
08328 00                        		.db $2 << 3 | LevelMusic_Boss
08329                           	ENDIF
08329                           	IFDEF LEVEL_ENGINE_UPGRADES
08329                           		.db $2 << 4 | LevelMusic_Boss
08329                           	ENDIF
08329                           
08329 7C 10                     	.db $7C, $10
0832B 18 0C                     	.db $18, $0C
0832D F5 00 10                  	.db $F5, $00, $10
08330 12 10                     	.db $12, $10
08332 15 11                     	.db $15, $11
08334 30 E7                     	.db $30, $E7
08336 08 03                     	.db $08, $03
08338 09 E6                     	.db $09, $E6
0833A 9C 10                     	.db $9C, $10
0833C 1F 11                     	.db $1F, $11
0833E 50 E7                     	.db $50, $E7
08340 0A 91                     	.db $0A, $91
08342 F1 60                     	.db $F1, $60
08344 7E 10                     	.db $7E, $10
08346 43 48                     	.db $43, $48
08348 F5 01 00                  	.db $F5, $01, $00
0834B F0 4C                     	.db $F0, $4C
0834D F1 EB                     	.db $F1, $EB
0834F F2                        	.db $F2
08350 F0 2A                     	.db $F0, $2A
08352 F2                        	.db $F2
08353 24 83                     	.db $24, $83
08355 25 81                     	.db $25, $81
08357 4B 0B                     	.db $4B, $0B
08359                           IFNDEF DISABLE_DOOR_POINTERS
08359 00 30                     	.db $00, $30
0835B                           ENDIF
0835B                           IFDEF DISABLE_DOOR_POINTERS
0835B                           	.db $F5, $00, $30
0835B                           ENDIF
0835B F0 8B                     	.db $F0, $8B
0835D F1 8C                     	.db $F1, $8C
0835F F1 CA                     	.db $F1, $CA
08361 FF                        	.db $FF
08362                           
08362                           ; World 1-2
08362                           include "src/levels/1/1-2/1-2-area0.asm"
08362                           ; Level 1-2, Area 0
08362                           
08362                           LevelData_1_2_Area0:
08362                           	; Level Header
08362                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08362                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08362                           	levelHeader 7, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $0a, $2
08362 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
08363 00                        	.db %11100000 | $0a
08364 00                        	.db 7 << 4 | 0 << 2 | 0
08365                           	IFNDEF LEVEL_ENGINE_UPGRADES
08365 00                        		.db $2 << 3 | LevelMusic_Overworld
08366                           	ENDIF
08366                           	IFDEF LEVEL_ENGINE_UPGRADES
08366                           		.db $2 << 4 | LevelMusic_Overworld
08366                           	ENDIF
08366                           
08366 8E C3                     	.db $8E, $C3
08368 3B C1                     	.db $3B, $C1
0836A F0 CD                     	.db $F0, $CD
0836C F1 48                     	.db $F1, $48
0836E DD 10                     	.db $DD, $10
08370 13 C2                     	.db $13, $C2
08372 EB 10                     	.db $EB, $10
08374 10 11                     	.db $10, $11
08376 06 10                     	.db $06, $10
08378 0E 11                     	.db $0E, $11
0837A 2E C1                     	.db $2E, $C1
0837C 7F 29                     	.db $7F, $29
0837E 5D 16                     	.db $5D, $16
08380 0E 16                     	.db $0E, $16
08382 2A 07                     	.db $2A, $07
08384 0F 06                     	.db $0F, $06
08386 F5 01 30                  	.db $F5, $01, $30
08389 18 26                     	.db $18, $26
0838B 0C 2B                     	.db $0C, $2B
0838D 12 C2                     	.db $12, $C2
0838F F0 E0                     	.db $F0, $E0
08391 F6 00                     	.db $F6, $00
08393 43 10                     	.db $43, $10
08395 15 11                     	.db $15, $11
08397 1A CD                     	.db $1A, $CD
08399 35 16                     	.db $35, $16
0839B 31 16                     	.db $31, $16
0839D 08 29                     	.db $08, $29
0839F 1D 09                     	.db $1D, $09
083A1                           IFNDEF DISABLE_DOOR_POINTERS
083A1 01 10                     	.db $01, $10
083A3                           ENDIF
083A3                           IFDEF DISABLE_DOOR_POINTERS
083A3                           	.db $F5, $01, $10
083A3                           ENDIF
083A3 10 22                     	.db $10, $22
083A5 02 51                     	.db $02, $51
083A7 40 29                     	.db $40, $29
083A9 0B 10                     	.db $0B, $10
083AB 1C 11                     	.db $1C, $11
083AD 12 26                     	.db $12, $26
083AF 18 CC                     	.db $18, $CC
083B1 F0 08                     	.db $F0, $08
083B3 F1 C2                     	.db $F1, $C2
083B5 F2                        	.db $F2
083B6 3C 16                     	.db $3C, $16
083B8 1D 16                     	.db $1D, $16
083BA 13 0B                     	.db $13, $0B
083BC                           IFNDEF DISABLE_DOOR_POINTERS
083BC 01 13                     	.db $01, $13
083BE                           ENDIF
083BE                           IFDEF DISABLE_DOOR_POINTERS
083BE                           	.db $F5, $01, $13
083BE                           ENDIF
083BE 15 56                     	.db $15, $56
083C0 0E 51                     	.db $0E, $51
083C2 9C 8C                     	.db $9C, $8C
083C4 0D 8C                     	.db $0D, $8C
083C6 0E 8C                     	.db $0E, $8C
083C8 0F 8C                     	.db $0F, $8C
083CA 27 10                     	.db $27, $10
083CC 15 11                     	.db $15, $11
083CE 4A 16                     	.db $4A, $16
083D0 14 16                     	.db $14, $16
083D2 0C 0B                     	.db $0C, $0B
083D4                           IFNDEF DISABLE_DOOR_POINTERS
083D4 01 20                     	.db $01, $20
083D6                           ENDIF
083D6                           IFDEF DISABLE_DOOR_POINTERS
083D6                           	.db $F5, $01, $20
083D6                           ENDIF
083D6 26 16                     	.db $26, $16
083D8 09 82                     	.db $09, $82
083DA 0A 82                     	.db $0A, $82
083DC 0B 82                     	.db $0B, $82
083DE F0 00                     	.db $F0, $00
083E0 FF                        	.db $FF
083E1                           include "src/levels/1/1-2/1-2-area1.asm"
083E1                           ; Level 1-2, Area 1
083E1                           
083E1                           LevelData_1_2_Area1:
083E1                           	; Level Header
083E1                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
083E1                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
083E1                           	levelHeader 3, LevelDirection_Horizontal, 1, 1, LevelMusic_Underground, 0, 2, $0a, $2
083E1 00                        	.db LevelDirection_Horizontal << 7 | 1 << 3 | 1
083E2 00                        	.db %11100000 | $0a
083E3 00                        	.db 3 << 4 | 0 << 2 | 2
083E4                           	IFNDEF LEVEL_ENGINE_UPGRADES
083E4 00                        		.db $2 << 3 | LevelMusic_Underground
083E5                           	ENDIF
083E5                           	IFDEF LEVEL_ENGINE_UPGRADES
083E5                           		.db $2 << 4 | LevelMusic_Underground
083E5                           	ENDIF
083E5                           
083E5 99 29                     	.db $99, $29
083E7 16 29                     	.db $16, $29
083E9 0C 29                     	.db $0C, $29
083EB 12 13                     	.db $12, $13
083ED                           IFNDEF DISABLE_DOOR_POINTERS
083ED 01 04                     	.db $01, $04
083EF                           ENDIF
083EF                           IFDEF DISABLE_DOOR_POINTERS
083EF                           	.db $F5, $01, $04
083EF                           ENDIF
083EF 1A 25                     	.db $1A, $25
083F1 0C 21                     	.db $0C, $21
083F3 0E 21                     	.db $0E, $21
083F5 F0 30                     	.db $F0, $30
083F7 F1 F7                     	.db $F1, $F7
083F9 7D A8                     	.db $7D, $A8
083FB 1C 25                     	.db $1C, $25
083FD 0E 26                     	.db $0E, $26
083FF 1D 05                     	.db $1D, $05
08401 3A 83                     	.db $3A, $83
08403 32 25                     	.db $32, $25
08405 03 25                     	.db $03, $25
08407 06 25                     	.db $06, $25
08409 07 25                     	.db $07, $25
0840B 09 80                     	.db $09, $80
0840D 0F 21                     	.db $0F, $21
0840F F0 30                     	.db $F0, $30
08411 F0 97                     	.db $F0, $97
08413 F0 D0                     	.db $F0, $D0
08415 F1 35                     	.db $F1, $35
08417 80 25                     	.db $80, $25
08419 02 25                     	.db $02, $25
0841B 17 82                     	.db $17, $82
0841D 1E 29                     	.db $1E, $29
0841F 24 83                     	.db $24, $83
08421 37 2D                     	.db $37, $2D
08423 F0 F0                     	.db $F0, $F0
08425 F1 1B                     	.db $F1, $1B
08427 F1 51                     	.db $F1, $51
08429 7C 14                     	.db $7C, $14
0842B                           IFNDEF DISABLE_DOOR_POINTERS
0842B 01 06                     	.db $01, $06
0842D                           ENDIF
0842D                           IFDEF DISABLE_DOOR_POINTERS
0842D                           	.db $F5, $01, $06
0842D                           ENDIF
0842D F0 0F                     	.db $F0, $0F
0842F F1 4E                     	.db $F1, $4E
08431 F1 CA                     	.db $F1, $CA
08433 FF                        	.db $FF
08434                           include "src/levels/1/1-2/1-2-area2.asm"
08434                           ; Level 1-2, Area 2
08434                           
08434                           LevelData_1_2_Area2:
08434                           	; Level Header
08434                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08434                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08434                           	levelHeader 2, LevelDirection_Horizontal, 0, 0, LevelMusic_Boss, 0, 0, $00, $0
08434 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
08435 00                        	.db %11100000 | $00
08436 00                        	.db 2 << 4 | 0 << 2 | 0
08437                           	IFNDEF LEVEL_ENGINE_UPGRADES
08437 00                        		.db $0 << 3 | LevelMusic_Boss
08438                           	ENDIF
08438                           	IFDEF LEVEL_ENGINE_UPGRADES
08438                           		.db $0 << 4 | LevelMusic_Boss
08438                           	ENDIF
08438                           
08438 00 8C                     	.db $00, $8C
0843A 01 8C                     	.db $01, $8C
0843C 02 8C                     	.db $02, $8C
0843E 03 8C                     	.db $03, $8C
08440 28 10                     	.db $28, $10
08442 1B 11                     	.db $1B, $11
08444 53 0B                     	.db $53, $0B
08446                           IFNDEF DISABLE_DOOR_POINTERS
08446 01 07                     	.db $01, $07
08448                           ENDIF
08448                           IFDEF DISABLE_DOOR_POINTERS
08448                           	.db $F5, $01, $07
08448                           ENDIF
08448 1F 16                     	.db $1F, $16
0844A 14 82                     	.db $14, $82
0844C 05 82                     	.db $05, $82
0844E 0D 16                     	.db $0D, $16
08450 79 11                     	.db $79, $11
08452 16 10                     	.db $16, $10
08454 36 16                     	.db $36, $16
08456 31 16                     	.db $31, $16
08458 04 48                     	.db $04, $48
0845A 13 82                     	.db $13, $82
0845C 04 82                     	.db $04, $82
0845E 05 82                     	.db $05, $82
08460 06 82                     	.db $06, $82
08462 07 82                     	.db $07, $82
08464 08 82                     	.db $08, $82
08466 09 82                     	.db $09, $82
08468 0A 82                     	.db $0A, $82
0846A 0B 82                     	.db $0B, $82
0846C 0C 82                     	.db $0C, $82
0846E F2                        	.db $F2
0846F F0 01                     	.db $F0, $01
08471 F6 02                     	.db $F6, $02
08473 F0 59                     	.db $F0, $59
08475 F0 8A                     	.db $F0, $8A
08477 F5 02 00                  	.db $F5, $02, $00
0847A FF                        	.db $FF
0847B                           include "src/levels/1/1-2/1-2-area3.asm"
0847B                           ; Level 1-2, Area 3
0847B                           
0847B                           LevelData_1_2_Area3:
0847B                           	; Level Header
0847B                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0847B                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0847B                           	levelHeader 0, LevelDirection_Vertical, 3, 0, LevelMusic_Underground, 0, 1, $03, $0
0847B 00                        	.db LevelDirection_Vertical << 7 | 3 << 3 | 0
0847C 00                        	.db %11100000 | $03
0847D 00                        	.db 0 << 4 | 0 << 2 | 1
0847E                           	IFNDEF LEVEL_ENGINE_UPGRADES
0847E 00                        		.db $0 << 3 | LevelMusic_Underground
0847F                           	ENDIF
0847F                           	IFDEF LEVEL_ENGINE_UPGRADES
0847F                           		.db $0 << 4 | LevelMusic_Underground
0847F                           	ENDIF
0847F                           
0847F 64 32                     	.db $64, $32
08481 09 32                     	.db $09, $32
08483 32 32                     	.db $32, $32
08485 0B 32                     	.db $0B, $32
08487 14 2C                     	.db $14, $2C
08489 06 32                     	.db $06, $32
0848B 0A 2C                     	.db $0A, $2C
0848D F0 44                     	.db $F0, $44
0848F F0 65                     	.db $F0, $65
08491 F0 86                     	.db $F0, $86
08493 F0 A7                     	.db $F0, $A7
08495 F1 66                     	.db $F1, $66
08497 F1 83                     	.db $F1, $83
08499 F1 A0                     	.db $F1, $A0
0849B F5 01 03                  	.db $F5, $01, $03
0849E FF                        	.db $FF
0849F                           include "src/levels/1/1-2/1-2-area4.asm"
0849F                           ; Level 1-2, Area 4
0849F                           
0849F                           LevelData_1_2_Area4:
0849F                           	; Level Header
0849F                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0849F                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0849F                           	levelHeader 0, LevelDirection_Vertical, 3, 0, LevelMusic_Underground, 0, 1, $03, $0
0849F 00                        	.db LevelDirection_Vertical << 7 | 3 << 3 | 0
084A0 00                        	.db %11100000 | $03
084A1 00                        	.db 0 << 4 | 0 << 2 | 1
084A2                           	IFNDEF LEVEL_ENGINE_UPGRADES
084A2 00                        		.db $0 << 3 | LevelMusic_Underground
084A3                           	ENDIF
084A3                           	IFDEF LEVEL_ENGINE_UPGRADES
084A3                           		.db $0 << 4 | LevelMusic_Underground
084A3                           	ENDIF
084A3                           
084A3 64 32                     	.db $64, $32
084A5 09 32                     	.db $09, $32
084A7 32 32                     	.db $32, $32
084A9 0B 32                     	.db $0B, $32
084AB 24 31                     	.db $24, $31
084AD 0A 31                     	.db $0A, $31
084AF 17 27                     	.db $17, $27
084B1 F0 44                     	.db $F0, $44
084B3 F0 65                     	.db $F0, $65
084B5 F0 86                     	.db $F0, $86
084B7 F0 A7                     	.db $F0, $A7
084B9 F1 86                     	.db $F1, $86
084BB F1 A8                     	.db $F1, $A8
084BD F1 C4                     	.db $F1, $C4
084BF FF                        	.db $FF
084C0                           
084C0                           ; World 1-3
084C0                           include "src/levels/1/1-3/1-3-area0.asm"
084C0                           ; Level 1-3, Area 0
084C0                           
084C0                           LevelData_1_3_Area0:
084C0                           	; Level Header
084C0                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
084C0                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
084C0                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $01, $0
084C0 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
084C1 00                        	.db %11100000 | $01
084C2 00                        	.db 9 << 4 | 0 << 2 | 0
084C3                           	IFNDEF LEVEL_ENGINE_UPGRADES
084C3 00                        		.db $0 << 3 | LevelMusic_Overworld
084C4                           	ENDIF
084C4                           	IFDEF LEVEL_ENGINE_UPGRADES
084C4                           		.db $0 << 4 | LevelMusic_Overworld
084C4                           	ENDIF
084C4                           
084C4 00 8A                     	.db $00, $8A
084C6 01 8A                     	.db $01, $8A
084C8 02 8A                     	.db $02, $8A
084CA 2D 29                     	.db $2D, $29
084CC 1A 29                     	.db $1A, $29
084CE 28 C5                     	.db $28, $C5
084D0 2E F2                     	.db $2E, $F2
084D2 F1 C8                     	.db $F1, $C8
084D4 A6 29                     	.db $A6, $29
084D6 0E 10                     	.db $0E, $10
084D8 13 29                     	.db $13, $29
084DA 21 C2                     	.db $21, $C2
084DC 07 C5                     	.db $07, $C5
084DE 24 F2                     	.db $24, $F2
084E0 0D F2                     	.db $0D, $F2
084E2 26 C7                     	.db $26, $C7
084E4 20 C4                     	.db $20, $C4
084E6 79 29                     	.db $79, $29
084E8 0B 29                     	.db $0B, $29
084EA 18 2B                     	.db $18, $2B
084EC 11 22                     	.db $11, $22
084EE 02 26                     	.db $02, $26
084F0 03 DB                     	.db $03, $DB
084F2 10 C3                     	.db $10, $C3
084F4 0E C1                     	.db $0E, $C1
084F6 14 F9                     	.db $14, $F9
084F8 3E C4                     	.db $3E, $C4
084FA 1A C3                     	.db $1A, $C3
084FC 10 C6                     	.db $10, $C6
084FE 56 10                     	.db $56, $10
08500 1A 11                     	.db $1A, $11
08502 4C D3                     	.db $4C, $D3
08504 15 D3                     	.db $15, $D3
08506 0D C1                     	.db $0D, $C1
08508 16 C1                     	.db $16, $C1
0850A 0F F3                     	.db $0F, $F3
0850C 18 F4                     	.db $18, $F4
0850E 13 F2                     	.db $13, $F2
08510 64 10                     	.db $64, $10
08512 28 D3                     	.db $28, $D3
08514 19 C1                     	.db $19, $C1
08516 12 D3                     	.db $12, $D3
08518 0B FE                     	.db $0B, $FE
0851A 13 C1                     	.db $13, $C1
0851C 15 F3                     	.db $15, $F3
0851E A7 11                     	.db $A7, $11
08520 11 29                     	.db $11, $29
08522 05 29                     	.db $05, $29
08524 0B 21                     	.db $0B, $21
08526 0C 21                     	.db $0C, $21
08528 0D 21                     	.db $0D, $21
0852A 0E 21                     	.db $0E, $21
0852C 0F 21                     	.db $0F, $21
0852E 1A C6                     	.db $1A, $C6
08530 60 C1                     	.db $60, $C1
08532 04 C1                     	.db $04, $C1
08534 08 CA                     	.db $08, $CA
08536 80 2D                     	.db $80, $2D
08538 0A 10                     	.db $0A, $10
0853A 42 29                     	.db $42, $29
0853C 43 F9                     	.db $43, $F9
0853E F1 A1                     	.db $F1, $A1
08540 3E 18                     	.db $3E, $18
08542 23 11                     	.db $23, $11
08544 18 10                     	.db $18, $10
08546 16 29                     	.db $16, $29
08548 24 22                     	.db $24, $22
0854A 06 21                     	.db $06, $21
0854C 08 22                     	.db $08, $22
0854E 13 D5                     	.db $13, $D5
08550 12 C1                     	.db $12, $C1
08552 08 C1                     	.db $08, $C1
08554 24 26                     	.db $24, $26
08556 06 22                     	.db $06, $22
08558 2B F1                     	.db $2B, $F1
0855A F1 68                     	.db $F1, $68
0855C F1 A1                     	.db $F1, $A1
0855E 34 18                     	.db $34, $18
08560 0A 18                     	.db $0A, $18
08562 9C 0A                     	.db $9C, $0A
08564                           IFNDEF DISABLE_DOOR_POINTERS
08564 02 23                     	.db $02, $23
08566                           ENDIF
08566                           IFDEF DISABLE_DOOR_POINTERS
08566                           	.db $F5, $02, $23
08566                           ENDIF
08566 98 10                     	.db $98, $10
08568 55 C1                     	.db $55, $C1
0856A 12 08                     	.db $12, $08
0856C 10 51                     	.db $10, $51
0856E F0 E8                     	.db $F0, $E8
08570 FF                        	.db $FF
08571                           include "src/levels/1/1-3/1-3-area1.asm"
08571                           ; Level 1-3, Area 1
08571                           
08571                           LevelData_1_3_Area1:
08571                           	; Level Header
08571                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08571                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08571                           	levelHeader 0, LevelDirection_Vertical, 4, 0, LevelMusic_Underground, 0, 3, $00, $3
08571 00                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 0
08572 00                        	.db %11100000 | $00
08573 00                        	.db 0 << 4 | 0 << 2 | 3
08574                           	IFNDEF LEVEL_ENGINE_UPGRADES
08574 00                        		.db $3 << 3 | LevelMusic_Underground
08575                           	ENDIF
08575                           	IFDEF LEVEL_ENGINE_UPGRADES
08575                           		.db $3 << 4 | LevelMusic_Underground
08575                           	ENDIF
08575                           
08575 55 2C                     	.db $55, $2C
08577 0B 2C                     	.db $0B, $2C
08579 33 2C                     	.db $33, $2C
0857B 0D 2C                     	.db $0D, $2C
0857D 16 34                     	.db $16, $34
0857F 27 0A                     	.db $27, $0A
08581                           IFNDEF DISABLE_DOOR_POINTERS
08581 02 20                     	.db $02, $20
08583                           ENDIF
08583                           IFDEF DISABLE_DOOR_POINTERS
08583                           	.db $F5, $02, $20
08583                           ENDIF
08583 F0 54                     	.db $F0, $54
08585 F1 A0                     	.db $F1, $A0
08587 FF                        	.db $FF
08588                           include "src/levels/1/1-3/1-3-area2.asm"
08588                           ; Level 1-3, Area 2
08588                           
08588                           LevelData_1_3_Area2:
08588                           	; Level Header
08588                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08588                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08588                           	levelHeader 6, LevelDirection_Vertical, 4, 0, LevelMusic_Underground, 1, 3, $00, $3
08588 00                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 0
08589 00                        	.db %11100000 | $00
0858A 00                        	.db 6 << 4 | 1 << 2 | 3
0858B                           	IFNDEF LEVEL_ENGINE_UPGRADES
0858B 00                        		.db $3 << 3 | LevelMusic_Underground
0858C                           	ENDIF
0858C                           	IFDEF LEVEL_ENGINE_UPGRADES
0858C                           		.db $3 << 4 | LevelMusic_Underground
0858C                           	ENDIF
0858C                           
0858C 58 0A                     	.db $58, $0A
0858E                           IFNDEF DISABLE_DOOR_POINTERS
0858E 02 10                     	.db $02, $10
08590                           ENDIF
08590                           IFDEF DISABLE_DOOR_POINTERS
08590                           	.db $F5, $02, $10
08590                           ENDIF
08590 23 39                     	.db $23, $39
08592 32 32                     	.db $32, $32
08594 0B 32                     	.db $0B, $32
08596 35 33                     	.db $35, $33
08598 0A 30                     	.db $0A, $30
0859A 1A AF                     	.db $1A, $AF
0859C F0 54                     	.db $F0, $54
0859E 34 31                     	.db $34, $31
085A0 0C 30                     	.db $0C, $30
085A2 1C AC                     	.db $1C, $AC
085A4 12 31                     	.db $12, $31
085A6 34 31                     	.db $34, $31
085A8 32 31                     	.db $32, $31
085AA 34 31                     	.db $34, $31
085AC F0 5C                     	.db $F0, $5C
085AE 32 31                     	.db $32, $31
085B0 0C 30                     	.db $0C, $30
085B2 34 37                     	.db $34, $37
085B4 62 37                     	.db $62, $37
085B6 18 A9                     	.db $18, $A9
085B8 0D 00                     	.db $0D, $00
085BA 0E 00                     	.db $0E, $00
085BC 1D 00                     	.db $1D, $00
085BE 0E 00                     	.db $0E, $00
085C0 14 31                     	.db $14, $31
085C2 09 35                     	.db $09, $35
085C4 F0 14                     	.db $F0, $14
085C6 6A 33                     	.db $6A, $33
085C8 3C 31                     	.db $3C, $31
085CA 13 13                     	.db $13, $13
085CC                           IFNDEF DISABLE_DOOR_POINTERS
085CC 02 08                     	.db $02, $08
085CE                           ENDIF
085CE                           IFDEF DISABLE_DOOR_POINTERS
085CE                           	.db $F5, $02, $08
085CE                           ENDIF
085CE 2C 31                     	.db $2C, $31
085D0 27 32                     	.db $27, $32
085D2 F1 5B                     	.db $F1, $5B
085D4 F1 74                     	.db $F1, $74
085D6 44 35                     	.db $44, $35
085D8 36 35                     	.db $36, $35
085DA 34 35                     	.db $34, $35
085DC 19 A6                     	.db $19, $A6
085DE 27 31                     	.db $27, $31
085E0 0A 31                     	.db $0A, $31
085E2 17 AF                     	.db $17, $AF
085E4 08 AD                     	.db $08, $AD
085E6 F0 16                     	.db $F0, $16
085E8 49 AE                     	.db $49, $AE
085EA 65 A9                     	.db $65, $A9
085EC 0B AB                     	.db $0B, $AB
085EE 51 33                     	.db $51, $33
085F0 0C 32                     	.db $0C, $32
085F2 12 AC                     	.db $12, $AC
085F4 0D A8                     	.db $0D, $A8
085F6 F0 17                     	.db $F0, $17
085F8 F0 D4                     	.db $F0, $D4
085FA 63 31                     	.db $63, $31
085FC 14 A7                     	.db $14, $A7
085FE 2C 09                     	.db $2C, $09
08600                           IFNDEF DISABLE_DOOR_POINTERS
08600 02 30                     	.db $02, $30
08602                           ENDIF
08602                           IFDEF DISABLE_DOOR_POINTERS
08602                           	.db $F5, $02, $30
08602                           ENDIF
08602 26 31                     	.db $26, $31
08604 51 73                     	.db $51, $73
08606 06 73                     	.db $06, $73
08608 F1 18                     	.db $F1, $18
0860A F1 C0                     	.db $F1, $C0
0860C FF                        	.db $FF
0860D                           include "src/levels/1/1-3/1-3-area3.asm"
0860D                           ; Level 1-3, Area 3
0860D                           
0860D                           LevelData_1_3_Area3:
0860D                           	; Level Header
0860D                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0860D                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0860D                           	levelHeader 5, LevelDirection_Horizontal, 4, 0, LevelMusic_Underground, 1, 3, $0a, $3
0860D 00                        	.db LevelDirection_Horizontal << 7 | 4 << 3 | 0
0860E 00                        	.db %11100000 | $0a
0860F 00                        	.db 5 << 4 | 1 << 2 | 3
08610                           	IFNDEF LEVEL_ENGINE_UPGRADES
08610 00                        		.db $3 << 3 | LevelMusic_Underground
08611                           	ENDIF
08611                           	IFDEF LEVEL_ENGINE_UPGRADES
08611                           		.db $3 << 4 | LevelMusic_Underground
08611                           	ENDIF
08611                           
08611 39 29                     	.db $39, $29
08613 13 13                     	.db $13, $13
08615                           IFNDEF DISABLE_DOOR_POINTERS
08615 02 26                     	.db $02, $26
08617                           ENDIF
08617                           IFDEF DISABLE_DOOR_POINTERS
08617                           	.db $F5, $02, $26
08617                           ENDIF
08617 6B 32                     	.db $6B, $32
08619 28 77                     	.db $28, $77
0861B F0 4B                     	.db $F0, $4B
0861D F1 0D                     	.db $F1, $0D
0861F 7F 30                     	.db $7F, $30
08621 16 31                     	.db $16, $31
08623 0A 32                     	.db $0A, $32
08625 23 31                     	.db $23, $31
08627 0F 30                     	.db $0F, $30
08629 20 31                     	.db $20, $31
0862B 1F 30                     	.db $1F, $30
0862D F0 08                     	.db $F0, $08
0862F 90 66                     	.db $90, $66
08631 07 31                     	.db $07, $31
08633 17 31                     	.db $17, $31
08635 09 66                     	.db $09, $66
08637 20 66                     	.db $20, $66
08639 07 30                     	.db $07, $30
0863B 08 01                     	.db $08, $01
0863D 17 31                     	.db $17, $31
0863F 09 66                     	.db $09, $66
08641 20 66                     	.db $20, $66
08643 07 31                     	.db $07, $31
08645 17 31                     	.db $17, $31
08647 09 66                     	.db $09, $66
08649 80 29                     	.db $80, $29
0864B 10 30                     	.db $10, $30
0864D 0A 29                     	.db $0A, $29
0864F 20 29                     	.db $20, $29
08651 10 30                     	.db $10, $30
08653 09 82                     	.db $09, $82
08655 0A 82                     	.db $0A, $82
08657 0B 82                     	.db $0B, $82
08659 0E 82                     	.db $0E, $82
0865B 0F 82                     	.db $0F, $82
0865D 20 29                     	.db $20, $29
0865F 10 30                     	.db $10, $30
08661 F0 4D                     	.db $F0, $4D
08663 F0 A8                     	.db $F0, $A8
08665 F0 CC                     	.db $F0, $CC
08667 F1 08                     	.db $F1, $08
08669 93 29                     	.db $93, $29
0866B 32 81                     	.db $32, $81
0866D 03 81                     	.db $03, $81
0866F 06 81                     	.db $06, $81
08671 F0 B0                     	.db $F0, $B0
08673 F1 0F                     	.db $F1, $0F
08675 F0 31                     	.db $F0, $31
08677 F2                        	.db $F2
08678 99 42                     	.db $99, $42
0867A F1 0F                     	.db $F1, $0F
0867C F1 CA                     	.db $F1, $CA
0867E F5 02 40                  	.db $F5, $02, $40
08681 FF                        	.db $FF
08682                           include "src/levels/1/1-3/1-3-area4.asm"
08682                           ; Level 1-3, Area 4
08682                           
08682                           LevelData_1_3_Area4:
08682                           	; Level Header
08682                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08682                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08682                           	levelHeader 1, LevelDirection_Horizontal, 5, 2, LevelMusic_Boss, 1, 2, $18, $4
08682 00                        	.db LevelDirection_Horizontal << 7 | 5 << 3 | 2
08683 00                        	.db %11100000 | $18
08684 00                        	.db 1 << 4 | 1 << 2 | 2
08685                           	IFNDEF LEVEL_ENGINE_UPGRADES
08685 00                        		.db $4 << 3 | LevelMusic_Boss
08686                           	ENDIF
08686                           	IFDEF LEVEL_ENGINE_UPGRADES
08686                           		.db $4 << 4 | LevelMusic_Boss
08686                           	ENDIF
08686                           
08686 6E 25                     	.db $6E, $25
08688 0F 25                     	.db $0F, $25
0868A 1E 32                     	.db $1E, $32
0868C 3F 25                     	.db $3F, $25
0868E F0 50                     	.db $F0, $50
08690 F0 BD                     	.db $F0, $BD
08692 F1 5B                     	.db $F1, $5B
08694 F1 9A                     	.db $F1, $9A
08696 B0 25                     	.db $B0, $25
08698 04 84                     	.db $04, $84
0869A 33 81                     	.db $33, $81
0869C 0A 33                     	.db $0A, $33
0869E 11 25                     	.db $11, $25
086A0 05 80                     	.db $05, $80
086A2 F0 99                     	.db $F0, $99
086A4 F0 DC                     	.db $F0, $DC
086A6 F1 F8                     	.db $F1, $F8
086A8 FF                        	.db $FF
086A9                           ; -------------------------------
086A9                           
086A9                           
086A9                           ; -------------------------------
086A9                           ; World 2
086A9                           
086A9                           ; World 2-1
086A9                           include "src/levels/2/2-1/2-1-area0.asm"
086A9                           ; Level 2-1, Area 0
086A9                           
086A9                           LevelData_2_1_Area0:
086A9                           	; Level Header
086A9                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
086A9                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
086A9                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $0c, $0
086A9 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
086AA 00                        	.db %11100000 | $0c
086AB 00                        	.db 9 << 4 | 0 << 2 | 0
086AC                           	IFNDEF LEVEL_ENGINE_UPGRADES
086AC 00                        		.db $0 << 3 | LevelMusic_Overworld
086AD                           	ENDIF
086AD                           	IFDEF LEVEL_ENGINE_UPGRADES
086AD                           		.db $0 << 4 | LevelMusic_Overworld
086AD                           	ENDIF
086AD                           
086AD 00 0E                     	.db $00, $0E
086AF 14 11                     	.db $14, $11
086B1 12 10                     	.db $12, $10
086B3 1C 10                     	.db $1C, $10
086B5 4A 17                     	.db $4A, $17
086B7 12 17                     	.db $12, $17
086B9 8A 10                     	.db $8A, $10
086BB 27 17                     	.db $27, $17
086BD E2 10                     	.db $E2, $10
086BF 14 11                     	.db $14, $11
086C1 4A 07                     	.db $4A, $07
086C3 0F D3                     	.db $0F, $D3
086C5 11 D5                     	.db $11, $D5
086C7 0E D1                     	.db $0E, $D1
086C9 10 D1                     	.db $10, $D1
086CB 06 D1                     	.db $06, $D1
086CD 0D D1                     	.db $0D, $D1
086CF 77 10                     	.db $77, $10
086D1 19 11                     	.db $19, $11
086D3 48 29                     	.db $48, $29
086D5 1C D3                     	.db $1C, $D3
086D7 12 D1                     	.db $12, $D1
086D9 0B D1                     	.db $0B, $D1
086DB 0F D1                     	.db $0F, $D1
086DD 13 D1                     	.db $13, $D1
086DF 0A D1                     	.db $0A, $D1
086E1 B8 26                     	.db $B8, $26
086E3 0A 22                     	.db $0A, $22
086E5 0B 2B                     	.db $0B, $2B
086E7 0C 22                     	.db $0C, $22
086E9 0D 22                     	.db $0D, $22
086EB 17 36                     	.db $17, $36
086ED 14 07                     	.db $14, $07
086EF 08 34                     	.db $08, $34
086F1 17 36                     	.db $17, $36
086F3 10 D1                     	.db $10, $D1
086F5 08 34                     	.db $08, $34
086F7 8E 10                     	.db $8E, $10
086F9 39 29                     	.db $39, $29
086FB 37 0F                     	.db $37, $0F
086FD 0A 0F                     	.db $0A, $0F
086FF 1D D2                     	.db $1D, $D2
08701 F0 0C                     	.db $F0, $0C
08703 F6 01                     	.db $F6, $01
08705 93 11                     	.db $93, $11
08707 47 0F                     	.db $47, $0F
08709 0F 37                     	.db $0F, $37
0870B 1E 39                     	.db $1E, $39
0870D 1D 3B                     	.db $1D, $3B
0870F F1 8C                     	.db $F1, $8C
08711 F6 00                     	.db $F6, $00
08713 89 10                     	.db $89, $10
08715 10 29                     	.db $10, $29
08717 05 29                     	.db $05, $29
08719 1F 29                     	.db $1F, $29
0871B 11 33                     	.db $11, $33
0871D 10 35                     	.db $10, $35
0871F 1C 0F                     	.db $1C, $0F
08721 F2                        	.db $F2
08722 7D 0F                     	.db $7D, $0F
08724 F0 0C                     	.db $F0, $0C
08726 F6 01                     	.db $F6, $01
08728 F1 8C                     	.db $F1, $8C
0872A F6 00                     	.db $F6, $00
0872C A3 10                     	.db $A3, $10
0872E 11 11                     	.db $11, $11
08730 07 17                     	.db $07, $17
08732 59 0B                     	.db $59, $0B
08734                           IFNDEF DISABLE_DOOR_POINTERS
08734 03 10                     	.db $03, $10
08736                           ENDIF
08736                           IFDEF DISABLE_DOOR_POINTERS
08736                           	.db $F5, $03, $10
08736                           ENDIF
08736 FF                        	.db $FF
08737                           include "src/levels/2/2-1/2-1-area1.asm"
08737                           ; Level 2-1, Area 1
08737                           
08737                           LevelData_2_1_Area1:
08737                           	; Level Header
08737                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08737                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08737                           	levelHeader 3, LevelDirection_Vertical, 1, 1, LevelMusic_Underground, 0, 1, $16, $1
08737 00                        	.db LevelDirection_Vertical << 7 | 1 << 3 | 1
08738 00                        	.db %11100000 | $16
08739 00                        	.db 3 << 4 | 0 << 2 | 1
0873A                           	IFNDEF LEVEL_ENGINE_UPGRADES
0873A 00                        		.db $1 << 3 | LevelMusic_Underground
0873B                           	ENDIF
0873B                           	IFDEF LEVEL_ENGINE_UPGRADES
0873B                           		.db $1 << 4 | LevelMusic_Underground
0873B                           	ENDIF
0873B                           
0873B 66 13                     	.db $66, $13
0873D                           IFNDEF DISABLE_DOOR_POINTERS
0873D 03 09                     	.db $03, $09
0873F                           ENDIF
0873F                           IFDEF DISABLE_DOOR_POINTERS
0873F                           	.db $F5, $03, $09
0873F                           ENDIF
0873F 7D 29                     	.db $7D, $29
08741 F0 55                     	.db $F0, $55
08743 F1 1C                     	.db $F1, $1C
08745 F1 4D                     	.db $F1, $4D
08747 83 29                     	.db $83, $29
08749 F2                        	.db $F2
0874A 72 29                     	.db $72, $29
0874C 1D 29                     	.db $1D, $29
0874E 32 A3                     	.db $32, $A3
08750 32 05                     	.db $32, $05
08752 F1 C0                     	.db $F1, $C0
08754 12 AA                     	.db $12, $AA
08756 AC 0A                     	.db $AC, $0A
08758                           IFNDEF DISABLE_DOOR_POINTERS
08758 03 20                     	.db $03, $20
0875A                           ENDIF
0875A                           IFDEF DISABLE_DOOR_POINTERS
0875A                           	.db $F5, $03, $20
0875A                           ENDIF
0875A F0 F4                     	.db $F0, $F4
0875C F1 98                     	.db $F1, $98
0875E F1 A0                     	.db $F1, $A0
08760 FF                        	.db $FF
08761                           include "src/levels/2/2-1/2-1-area2.asm"
08761                           ; Level 2-1, Area 2
08761                           
08761                           LevelData_2_1_Area2:
08761                           	; Level Header
08761                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08761                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08761                           	levelHeader 2, LevelDirection_Horizontal, 2, 1, LevelMusic_Boss, 0, 0, $0a, $3
08761 00                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
08762 00                        	.db %11100000 | $0a
08763 00                        	.db 2 << 4 | 0 << 2 | 0
08764                           	IFNDEF LEVEL_ENGINE_UPGRADES
08764 00                        		.db $3 << 3 | LevelMusic_Boss
08765                           	ENDIF
08765                           	IFDEF LEVEL_ENGINE_UPGRADES
08765                           		.db $3 << 4 | LevelMusic_Boss
08765                           	ENDIF
08765                           
08765 97 80                     	.db $97, $80
08767 23 0A                     	.db $23, $0A
08769                           IFNDEF DISABLE_DOOR_POINTERS
08769 03 13                     	.db $03, $13
0876B                           ENDIF
0876B                           IFDEF DISABLE_DOOR_POINTERS
0876B                           	.db $F5, $03, $13
0876B                           ENDIF
0876B F0 4D                     	.db $F0, $4D
0876D F0 CC                     	.db $F0, $CC
0876F F1 02                     	.db $F1, $02
08771 F2                        	.db $F2
08772 F0 48                     	.db $F0, $48
08774 F0 8C                     	.db $F0, $8C
08776 F2                        	.db $F2
08777 84 86                     	.db $84, $86
08779 05 86                     	.db $05, $86
0877B F0 48                     	.db $F0, $48
0877D F1 0B                     	.db $F1, $0B
0877F F1 CA                     	.db $F1, $CA
08781 F5 04 00                  	.db $F5, $04, $00
08784 FF                        	.db $FF
08785                           include "src/levels/2/2-1/2-1-area4.asm"
08785                           ; Level 2-1, Area 4
08785                           
08785                           LevelData_2_1_Area4:
08785                           	; Level Header
08785                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08785                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08785                           	levelHeader 0, LevelDirection_Vertical, 3, 0, LevelMusic_Underground, 0, 1, $03, $0
08785 00                        	.db LevelDirection_Vertical << 7 | 3 << 3 | 0
08786 00                        	.db %11100000 | $03
08787 00                        	.db 0 << 4 | 0 << 2 | 1
08788                           	IFNDEF LEVEL_ENGINE_UPGRADES
08788 00                        		.db $0 << 3 | LevelMusic_Underground
08789                           	ENDIF
08789                           	IFDEF LEVEL_ENGINE_UPGRADES
08789                           		.db $0 << 4 | LevelMusic_Underground
08789                           	ENDIF
08789                           
08789 54 32                     	.db $54, $32
0878B 09 32                     	.db $09, $32
0878D 15 30                     	.db $15, $30
0878F 0A 30                     	.db $0A, $30
08791 27 31                     	.db $27, $31
08793 24 31                     	.db $24, $31
08795 0A 31                     	.db $0A, $31
08797 15 31                     	.db $15, $31
08799 09 31                     	.db $09, $31
0879B 16 33                     	.db $16, $33
0879D 1B 24                     	.db $1B, $24
0879F F0 44                     	.db $F0, $44
087A1 F0 65                     	.db $F0, $65
087A3 F0 86                     	.db $F0, $86
087A5 F0 A7                     	.db $F0, $A7
087A7 F1 86                     	.db $F1, $86
087A9 F1 A3                     	.db $F1, $A3
087AB F1 C8                     	.db $F1, $C8
087AD FF                        	.db $FF
087AE                           
087AE                           ; World 2-2
087AE                           include "src/levels/2/2-2/2-2-area0.asm"
087AE                           ; Level 2-2, Area 0
087AE                           
087AE                           LevelData_2_2_Area0:
087AE                           	; Level Header
087AE                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
087AE                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
087AE                           	levelHeader 1, LevelDirection_Horizontal, 1, 1, LevelMusic_Underground, 0, 0, $0a, $3
087AE 00                        	.db LevelDirection_Horizontal << 7 | 1 << 3 | 1
087AF 00                        	.db %11100000 | $0a
087B0 00                        	.db 1 << 4 | 0 << 2 | 0
087B1                           	IFNDEF LEVEL_ENGINE_UPGRADES
087B1 00                        		.db $3 << 3 | LevelMusic_Underground
087B2                           	ENDIF
087B2                           	IFDEF LEVEL_ENGINE_UPGRADES
087B2                           		.db $3 << 4 | LevelMusic_Underground
087B2                           	ENDIF
087B2                           
087B2 8E 81                     	.db $8E, $81
087B4 0F 81                     	.db $0F, $81
087B6 F0 B0                     	.db $F0, $B0
087B8 F1 6F                     	.db $F1, $6F
087BA BD 14                     	.db $BD, $14
087BC                           IFNDEF DISABLE_DOOR_POINTERS
087BC 04 10                     	.db $04, $10
087BE                           ENDIF
087BE                           IFDEF DISABLE_DOOR_POINTERS
087BE                           	.db $F5, $04, $10
087BE                           ENDIF
087BE 40 81                     	.db $40, $81
087C0 F0 2E                     	.db $F0, $2E
087C2 F1 CA                     	.db $F1, $CA
087C4 FF                        	.db $FF
087C5                           include "src/levels/2/2-2/2-2-area1.asm"
087C5                           ; Level 2-2, Area 1
087C5                           
087C5                           LevelData_2_2_Area1:
087C5                           	; Level Header
087C5                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
087C5                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
087C5                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $0a, $3
087C5 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
087C6 00                        	.db %11100000 | $0a
087C7 00                        	.db 9 << 4 | 0 << 2 | 0
087C8                           	IFNDEF LEVEL_ENGINE_UPGRADES
087C8 00                        		.db $3 << 3 | LevelMusic_Overworld
087C9                           	ENDIF
087C9                           	IFDEF LEVEL_ENGINE_UPGRADES
087C9                           		.db $3 << 4 | LevelMusic_Overworld
087C9                           	ENDIF
087C9                           
087C9 2D 10                     	.db $2D, $10
087CB 1B 11                     	.db $1B, $11
087CD 56 16                     	.db $56, $16
087CF 0D 16                     	.db $0D, $16
087D1 32 0B                     	.db $32, $0B
087D3                           IFNDEF DISABLE_DOOR_POINTERS
087D3 04 01                     	.db $04, $01
087D5                           ENDIF
087D5                           IFDEF DISABLE_DOOR_POINTERS
087D5                           	.db $F5, $04, $01
087D5                           ENDIF
087D5 F0 6D                     	.db $F0, $6D
087D7 F0 8D                     	.db $F0, $8D
087D9 F6 00                     	.db $F6, $00
087DB 7C 10                     	.db $7C, $10
087DD 8F 0F                     	.db $8F, $0F
087DF 11 D1                     	.db $11, $D1
087E1 0C 0F                     	.db $0C, $0F
087E3 F0 8D                     	.db $F0, $8D
087E5 F6 01                     	.db $F6, $01
087E7 5A 10                     	.db $5A, $10
087E9 26 11                     	.db $26, $11
087EB 33 29                     	.db $33, $29
087ED 10 29                     	.db $10, $29
087EF 22 0F                     	.db $22, $0F
087F1 0F 07                     	.db $0F, $07
087F3 F0 8D                     	.db $F0, $8D
087F5 F6 00                     	.db $F6, $00
087F7 74 10                     	.db $74, $10
087F9 45 29                     	.db $45, $29
087FB 09 29                     	.db $09, $29
087FD 34 26                     	.db $34, $26
087FF 08 21                     	.db $08, $21
08801 0C 21                     	.db $0C, $21
08803 0D 2B                     	.db $0D, $2B
08805 F0 0C                     	.db $F0, $0C
08807 AC 0F                     	.db $AC, $0F
08809 17 0F                     	.db $17, $0F
0880B 19 0F                     	.db $19, $0F
0880D 13 07                     	.db $13, $07
0880F 04 97                     	.db $04, $97
08811 30 07                     	.db $30, $07
08813 F0 0D                     	.db $F0, $0D
08815 F0 A2                     	.db $F0, $A2
08817 F6 01                     	.db $F6, $01
08819 68 10                     	.db $68, $10
0881B 41 07                     	.db $41, $07
0881D 3F 0B                     	.db $3F, $0B
0881F                           IFNDEF DISABLE_DOOR_POINTERS
0881F 04 22                     	.db $04, $22
08821                           ENDIF
08821                           IFDEF DISABLE_DOOR_POINTERS
08821                           	.db $F5, $04, $22
08821                           ENDIF
08821 F0 A2                     	.db $F0, $A2
08823 F6 02                     	.db $F6, $02
08825 F1 C2                     	.db $F1, $C2
08827 F6 03                     	.db $F6, $03
08829 F2                        	.db $F2
0882A 7E 07                     	.db $7E, $07
0882C 15 07                     	.db $15, $07
0882E 0A 07                     	.db $0A, $07
08830 F0 0C                     	.db $F0, $0C
08832 F5 04 22                  	.db $F5, $04, $22
08835 F6 00                     	.db $F6, $00
08837 83 11                     	.db $83, $11
08839 10 10                     	.db $10, $10
0883B 4D 0F                     	.db $4D, $0F
0883D 15 07                     	.db $15, $07
0883F 09 07                     	.db $09, $07
08841 12 07                     	.db $12, $07
08843 86 11                     	.db $86, $11
08845 12 10                     	.db $12, $10
08847 4A 37                     	.db $4A, $37
08849 19 39                     	.db $19, $39
0884B 18 3B                     	.db $18, $3B
0884D 17 3D                     	.db $17, $3D
0884F 9D 0C                     	.db $9D, $0C
08851 F5 04 30                  	.db $F5, $04, $30
08854 4A 87                     	.db $4A, $87
08856 0B 87                     	.db $0B, $87
08858 0C 87                     	.db $0C, $87
0885A 0D 03                     	.db $0D, $03
0885C 0E 87                     	.db $0E, $87
0885E 0F 87                     	.db $0F, $87
08860 7D 03                     	.db $7D, $03
08862 F1 48                     	.db $F1, $48
08864 FF                        	.db $FF
08865                           include "src/levels/2/2-2/2-2-area2.asm"
08865                           ; Level 2-2, Area 2
08865                           
08865                           LevelData_2_2_Area2:
08865                           	; Level Header
08865                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08865                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08865                           	levelHeader 2, LevelDirection_Horizontal, 1, 1, LevelMusic_Underground, 0, 0, $0a, $3
08865 00                        	.db LevelDirection_Horizontal << 7 | 1 << 3 | 1
08866 00                        	.db %11100000 | $0a
08867 00                        	.db 2 << 4 | 0 << 2 | 0
08868                           	IFNDEF LEVEL_ENGINE_UPGRADES
08868 00                        		.db $3 << 3 | LevelMusic_Underground
08869                           	ENDIF
08869                           	IFDEF LEVEL_ENGINE_UPGRADES
08869                           		.db $3 << 4 | LevelMusic_Underground
08869                           	ENDIF
08869                           
08869 8B 28                     	.db $8B, $28
0886B 0D 26                     	.db $0D, $26
0886D 0E 2D                     	.db $0E, $2D
0886F 0F 22                     	.db $0F, $22
08871 1A 36                     	.db $1A, $36
08873 19 21                     	.db $19, $21
08875 0A 36                     	.db $0A, $36
08877 19 38                     	.db $19, $38
08879 18 3A                     	.db $18, $3A
0887B F0 B7                     	.db $F0, $B7
0887D F0 F0                     	.db $F0, $F0
0887F 5D 02                     	.db $5D, $02
08881 1D 02                     	.db $1D, $02
08883 1D 02                     	.db $1D, $02
08885 1D 02                     	.db $1D, $02
08887 3C 02                     	.db $3C, $02
08889 1C 02                     	.db $1C, $02
0888B 11 22                     	.db $11, $22
0888D F0 97                     	.db $F0, $97
0888F F0 D0                     	.db $F0, $D0
08891 F1 4F                     	.db $F1, $4F
08893 F1 AE                     	.db $F1, $AE
08895 F5 04 15                  	.db $F5, $04, $15
08898 90 13                     	.db $90, $13
0889A                           IFNDEF DISABLE_DOOR_POINTERS
0889A 04 15                     	.db $04, $15
0889C                           ENDIF
0889C                           IFDEF DISABLE_DOOR_POINTERS
0889C                           	.db $F5, $04, $15
0889C                           ENDIF
0889C 24 29                     	.db $24, $29
0889E 33 25                     	.db $33, $25
088A0 04 25                     	.db $04, $25
088A2 05 25                     	.db $05, $25
088A4 37 27 F0 6F               	.db $37, $27, $F0, $6F
088A8 F0 D4                     	.db $F0, $D4
088AA F1 4A                     	.db $F1, $4A
088AC FF                        	.db $FF
088AD                           include "src/levels/2/2-2/2-2-area3.asm"
088AD                           ; Level 2-2, Area 3
088AD                           
088AD                           LevelData_2_2_Area3:
088AD                           	; Level Header
088AD                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
088AD                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
088AD                           	levelHeader 3, LevelDirection_Vertical, 1, 1, LevelMusic_Underground, 0, 1, $12, $1
088AD 00                        	.db LevelDirection_Vertical << 7 | 1 << 3 | 1
088AE 00                        	.db %11100000 | $12
088AF 00                        	.db 3 << 4 | 0 << 2 | 1
088B0                           	IFNDEF LEVEL_ENGINE_UPGRADES
088B0 00                        		.db $1 << 3 | LevelMusic_Underground
088B1                           	ENDIF
088B1                           	IFDEF LEVEL_ENGINE_UPGRADES
088B1                           		.db $1 << 4 | LevelMusic_Underground
088B1                           	ENDIF
088B1                           
088B1 02 8A                     	.db $02, $8A
088B3 03 8A                     	.db $03, $8A
088B5 04 8A                     	.db $04, $8A
088B7 05 8A                     	.db $05, $8A
088B9 06 8A                     	.db $06, $8A
088BB 07 8A                     	.db $07, $8A
088BD 08 8A                     	.db $08, $8A
088BF 09 8A                     	.db $09, $8A
088C1 62 12                     	.db $62, $12
088C3 77 80                     	.db $77, $80
088C5 07 29                     	.db $07, $29
088C7 F5 04 19                  	.db $F5, $04, $19
088CA AC 80                     	.db $AC, $80
088CC 0C 29                     	.db $0C, $29
088CE 54 80                     	.db $54, $80
088D0 04 29                     	.db $04, $29
088D2 F0 51                     	.db $F0, $51
088D4 F1 6D                     	.db $F1, $6D
088D6 3B 80                     	.db $3B, $80
088D8 0B 29                     	.db $0B, $29
088DA 52 82                     	.db $52, $82
088DC 03 82                     	.db $03, $82
088DE 04 82                     	.db $04, $82
088E0 05 82                     	.db $05, $82
088E2 23 29                     	.db $23, $29
088E4 F1 6E                     	.db $F1, $6E
088E6 F2                        	.db $F2
088E7 9A 83                     	.db $9A, $83
088E9 0B 83                     	.db $0B, $83
088EB 0C 83                     	.db $0C, $83
088ED 0D 83                     	.db $0D, $83
088EF 0E 83                     	.db $0E, $83
088F1 2C 0A                     	.db $2C, $0A
088F3                           IFNDEF DISABLE_DOOR_POINTERS
088F3 04 50                     	.db $04, $50
088F5                           ENDIF
088F5                           IFDEF DISABLE_DOOR_POINTERS
088F5                           	.db $F5, $04, $50
088F5                           ENDIF
088F5 F1 A0                     	.db $F1, $A0
088F7 FF                        	.db $FF
088F8                           include "src/levels/2/2-2/2-2-area4.asm"
088F8                           ; Level 2-2, Area 4
088F8                           
088F8                           LevelData_2_2_Area4:
088F8                           	; Level Header
088F8                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
088F8                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
088F8                           	levelHeader 0, LevelDirection_Vertical, 3, 0, LevelMusic_Underground, 0, 1, $03, $0
088F8 00                        	.db LevelDirection_Vertical << 7 | 3 << 3 | 0
088F9 00                        	.db %11100000 | $03
088FA 00                        	.db 0 << 4 | 0 << 2 | 1
088FB                           	IFNDEF LEVEL_ENGINE_UPGRADES
088FB 00                        		.db $0 << 3 | LevelMusic_Underground
088FC                           	ENDIF
088FC                           	IFDEF LEVEL_ENGINE_UPGRADES
088FC                           		.db $0 << 4 | LevelMusic_Underground
088FC                           	ENDIF
088FC                           
088FC 54 32                     	.db $54, $32
088FE 09 32                     	.db $09, $32
08900 15 30                     	.db $15, $30
08902 0A 30                     	.db $0A, $30
08904 27 31                     	.db $27, $31
08906 24 31                     	.db $24, $31
08908 0A 31                     	.db $0A, $31
0890A 15 31                     	.db $15, $31
0890C 09 31                     	.db $09, $31
0890E 16 33                     	.db $16, $33
08910 1B 24                     	.db $1B, $24
08912 F0 44                     	.db $F0, $44
08914 F0 65                     	.db $F0, $65
08916 F0 86                     	.db $F0, $86
08918 F0 A7                     	.db $F0, $A7
0891A F1 86                     	.db $F1, $86
0891C F1 A3                     	.db $F1, $A3
0891E F1 C8                     	.db $F1, $C8
08920 FF                        	.db $FF
08921                           include "src/levels/2/2-2/2-2-area5.asm"
08921                           ; Level 2-2, Area 5
08921                           
08921                           LevelData_2_2_Area5:
08921                           	; Level Header
08921                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08921                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08921                           	levelHeader 2, LevelDirection_Horizontal, 1, 1, LevelMusic_Boss, 0, 2, $0a, $3
08921 00                        	.db LevelDirection_Horizontal << 7 | 1 << 3 | 1
08922 00                        	.db %11100000 | $0a
08923 00                        	.db 2 << 4 | 0 << 2 | 2
08924                           	IFNDEF LEVEL_ENGINE_UPGRADES
08924 00                        		.db $3 << 3 | LevelMusic_Boss
08925                           	ENDIF
08925                           	IFDEF LEVEL_ENGINE_UPGRADES
08925                           		.db $3 << 4 | LevelMusic_Boss
08925                           	ENDIF
08925                           
08925 43 0A                     	.db $43, $0A
08927                           IFNDEF DISABLE_DOOR_POINTERS
08927 04 33                     	.db $04, $33
08929                           ENDIF
08929                           IFDEF DISABLE_DOOR_POINTERS
08929                           	.db $F5, $04, $33
08929                           ENDIF
08929 F0 4E                     	.db $F0, $4E
0892B F1 4F                     	.db $F1, $4F
0892D F1 BC                     	.db $F1, $BC
0892F F2                        	.db $F2
08930 64 4E                     	.db $64, $4E
08932 64 00                     	.db $64, $00
08934 07 00                     	.db $07, $00
08936 08 00                     	.db $08, $00
08938 F0 13                     	.db $F0, $13
0893A F0 8D                     	.db $F0, $8D
0893C 70 46                     	.db $70, $46
0893E 10 42                     	.db $10, $42
08940 F0 88 F0 EC               	.db $F0, $88, $F0, $EC
08944 F1 2B                     	.db $F1, $2B
08946 F1 8A                     	.db $F1, $8A
08948 F5 05 00                  	.db $F5, $05, $00
0894B FF                        	.db $FF
0894C                           
0894C                           ; World 2-3
0894C                           include "src/levels/2/2-3/2-3-area0.asm"
0894C                           ; Level 2-3, Area 0
0894C                           
0894C                           LevelData_2_3_Area0:
0894C                           	; Level Header
0894C                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0894C                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0894C                           	levelHeader 0, LevelDirection_Horizontal, 1, 1, LevelMusic_Underground, 0, 0, $0a, $0
0894C 00                        	.db LevelDirection_Horizontal << 7 | 1 << 3 | 1
0894D 00                        	.db %11100000 | $0a
0894E 00                        	.db 0 << 4 | 0 << 2 | 0
0894F                           	IFNDEF LEVEL_ENGINE_UPGRADES
0894F 00                        		.db $0 << 3 | LevelMusic_Underground
08950                           	ENDIF
08950                           	IFDEF LEVEL_ENGINE_UPGRADES
08950                           		.db $0 << 4 | LevelMusic_Underground
08950                           	ENDIF
08950                           
08950 09 A9                     	.db $09, $A9
08952 F5 05 11                  	.db $F5, $05, $11
08955 F0 2F                     	.db $F0, $2F
08957 F0 CC                     	.db $F0, $CC
08959 F1 8F                     	.db $F1, $8F
0895B F1 EA                     	.db $F1, $EA
0895D FF                        	.db $FF
0895E                           include "src/levels/2/2-3/2-3-area1.asm"
0895E                           ; Level 2-3, Area 1
0895E                           
0895E                           LevelData_2_3_Area1:
0895E                           	; Level Header
0895E                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0895E                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0895E                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $0c, $0
0895E 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
0895F 00                        	.db %11100000 | $0c
08960 00                        	.db 9 << 4 | 0 << 2 | 0
08961                           	IFNDEF LEVEL_ENGINE_UPGRADES
08961 00                        		.db $0 << 3 | LevelMusic_Overworld
08962                           	ENDIF
08962                           	IFDEF LEVEL_ENGINE_UPGRADES
08962                           		.db $0 << 4 | LevelMusic_Overworld
08962                           	ENDIF
08962                           
08962 00 89                     	.db $00, $89
08964 01 89                     	.db $01, $89
08966 02 89                     	.db $02, $89
08968 03 89                     	.db $03, $89
0896A 25 29                     	.db $25, $29
0896C 1C 29                     	.db $1C, $29
0896E 18 2B                     	.db $18, $2B
08970 16 C4                     	.db $16, $C4
08972 2B 21                     	.db $2B, $21
08974 1A C2                     	.db $1A, $C2
08976 95 11                     	.db $95, $11
08978 08 10                     	.db $08, $10
0897A 66 A6                     	.db $66, $A6
0897C F5 05 00                  	.db $F5, $05, $00
0897F 12 32                     	.db $12, $32
08981 09 32                     	.db $09, $32
08983 0D 26                     	.db $0D, $26
08985 0E 21                     	.db $0E, $21
08987 0F 21                     	.db $0F, $21
08989 14 31                     	.db $14, $31
0898B 06 05                     	.db $06, $05
0898D 07 32                     	.db $07, $32
0898F 14 31                     	.db $14, $31
08991 07 32                     	.db $07, $32
08993 14 31                     	.db $14, $31
08995 07 32                     	.db $07, $32
08997 14 31                     	.db $14, $31
08999 07 32                     	.db $07, $32
0899B 14 31                     	.db $14, $31
0899D 06 05                     	.db $06, $05
0899F 07 32                     	.db $07, $32
089A1 53 29                     	.db $53, $29
089A3 31 0F                     	.db $31, $0F
089A5 0F 29                     	.db $0F, $29
089A7 23 21                     	.db $23, $21
089A9 05 21                     	.db $05, $21
089AB 71 C2                     	.db $71, $C2
089AD 1E 29                     	.db $1E, $29
089AF 02 0B                     	.db $02, $0B
089B1                           IFNDEF DISABLE_DOOR_POINTERS
089B1 05 20                     	.db $05, $20
089B3                           ENDIF
089B3                           IFDEF DISABLE_DOOR_POINTERS
089B3                           	.db $F5, $05, $20
089B3                           ENDIF
089B3 16 22                     	.db $16, $22
089B5 09 22                     	.db $09, $22
089B7 11 C2                     	.db $11, $C2
089B9 05 C3                     	.db $05, $C3
089BB 09 C2                     	.db $09, $C2
089BD 0E C3                     	.db $0E, $C3
089BF DD 11                     	.db $DD, $11
089C1 5D 0F                     	.db $5D, $0F
089C3 C3 29                     	.db $C3, $29
089C5 39 0F                     	.db $39, $0F
089C7 13 0F                     	.db $13, $0F
089C9 0E 0F                     	.db $0E, $0F
089CB F1 4C                     	.db $F1, $4C
089CD F6 01                     	.db $F6, $01
089CF F1 CC                     	.db $F1, $CC
089D1 F6 00                     	.db $F6, $00
089D3 90 10                     	.db $90, $10
089D5 0E 10                     	.db $0E, $10
089D7 12 11                     	.db $12, $11
089D9 52 0F                     	.db $52, $0F
089DB 06 0F                     	.db $06, $0F
089DD 0A 0F                     	.db $0A, $0F
089DF 1E D1                     	.db $1E, $D1
089E1 F0 6C                     	.db $F0, $6C
089E3 F6 01                     	.db $F6, $01
089E5 F0 CC                     	.db $F0, $CC
089E7 F6 00                     	.db $F6, $00
089E9 86 11                     	.db $86, $11
089EB 31 29                     	.db $31, $29
089ED 08 29                     	.db $08, $29
089EF 43 D2                     	.db $43, $D2
089F1 0A D1                     	.db $0A, $D1
089F3 F0 0C                     	.db $F0, $0C
089F5 F6 02                     	.db $F6, $02
089F7 F0 6C                     	.db $F0, $6C
089F9 F6 00                     	.db $F6, $00
089FB F0 CC                     	.db $F0, $CC
089FD F6 02                     	.db $F6, $02
089FF F1 4C                     	.db $F1, $4C
08A01 F6 00                     	.db $F6, $00
08A03 84 10                     	.db $84, $10
08A05 52 0F                     	.db $52, $0F
08A07 0E 0F                     	.db $0E, $0F
08A09 C8 17                     	.db $C8, $17
08A0B 47 0B                     	.db $47, $0B
08A0D                           IFNDEF DISABLE_DOOR_POINTERS
08A0D 05 30                     	.db $05, $30
08A0F                           ENDIF
08A0F                           IFDEF DISABLE_DOOR_POINTERS
08A0F                           	.db $F5, $05, $30
08A0F                           ENDIF
08A0F F4                        	.db $F4
08A10 26 16                     	.db $26, $16
08A12 09 16                     	.db $09, $16
08A14 FF                        	.db $FF
08A15                           include "src/levels/2/2-3/2-3-area2.asm"
08A15                           ; Level 2-3, Area 2
08A15                           
08A15                           LevelData_2_3_Area2:
08A15                           	; Level Header
08A15                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08A15                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08A15                           	levelHeader 1, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 0, $0a, $3
08A15 00                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
08A16 00                        	.db %11100000 | $0a
08A17 00                        	.db 1 << 4 | 0 << 2 | 0
08A18                           	IFNDEF LEVEL_ENGINE_UPGRADES
08A18 00                        		.db $3 << 3 | LevelMusic_Underground
08A19                           	ENDIF
08A19                           	IFDEF LEVEL_ENGINE_UPGRADES
08A19                           		.db $3 << 4 | LevelMusic_Underground
08A19                           	ENDIF
08A19                           
08A19 8A 2D                     	.db $8A, $2D
08A1B 0D 13                     	.db $0D, $13
08A1D                           IFNDEF DISABLE_DOOR_POINTERS
08A1D 05 13                     	.db $05, $13
08A1F                           ENDIF
08A1F                           IFDEF DISABLE_DOOR_POINTERS
08A1F                           	.db $F5, $05, $13
08A1F                           ENDIF
08A1F 18 54                     	.db $18, $54
08A21 0B 21                     	.db $0B, $21
08A23 F1 0F                     	.db $F1, $0F
08A25 F2                        	.db $F2
08A26 90 26                     	.db $90, $26
08A28 01 52                     	.db $01, $52
08A2A F0 8A                     	.db $F0, $8A
08A2C FF                        	.db $FF
08A2D                           include "src/levels/2/2-3/2-3-area3.asm"
08A2D                           ; Level 2-3, Area 3
08A2D                           
08A2D                           LevelData_2_3_Area3:
08A2D                           	; Level Header
08A2D                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08A2D                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08A2D                           	levelHeader 6, LevelDirection_Vertical, 1, 1, LevelMusic_Underground, 0, 1, $01, $1
08A2D 00                        	.db LevelDirection_Vertical << 7 | 1 << 3 | 1
08A2E 00                        	.db %11100000 | $01
08A2F 00                        	.db 6 << 4 | 0 << 2 | 1
08A30                           	IFNDEF LEVEL_ENGINE_UPGRADES
08A30 00                        		.db $1 << 3 | LevelMusic_Underground
08A31                           	ENDIF
08A31                           	IFDEF LEVEL_ENGINE_UPGRADES
08A31                           		.db $1 << 4 | LevelMusic_Underground
08A31                           	ENDIF
08A31                           
08A31 68 14                     	.db $68, $14
08A33                           IFNDEF DISABLE_DOOR_POINTERS
08A33 05 19                     	.db $05, $19
08A35                           ENDIF
08A35                           IFDEF DISABLE_DOOR_POINTERS
08A35                           	.db $F5, $05, $19
08A35                           ENDIF
08A35 5C 31                     	.db $5C, $31
08A37 13 31                     	.db $13, $31
08A39 F0 35                     	.db $F0, $35
08A3B F1 1C                     	.db $F1, $1C
08A3D 6B 29                     	.db $6B, $29
08A3F 9D 29                     	.db $9D, $29
08A41 A8 28                     	.db $A8, $28
08A43 3A 34                     	.db $3A, $34
08A45 F0 75                     	.db $F0, $75
08A47 F1 1C                     	.db $F1, $1C
08A49 F1 75                     	.db $F1, $75
08A4B 82 2C                     	.db $82, $2C
08A4D 06 2C                     	.db $06, $2C
08A4F 09 2C                     	.db $09, $2C
08A51 0D 2C                     	.db $0D, $2C
08A53 24 2C                     	.db $24, $2C
08A55 0B 2C                     	.db $0B, $2C
08A57 5C 09                     	.db $5C, $09
08A59                           IFNDEF DISABLE_DOOR_POINTERS
08A59 05 50                     	.db $05, $50
08A5B                           ENDIF
08A5B                           IFDEF DISABLE_DOOR_POINTERS
08A5B                           	.db $F5, $05, $50
08A5B                           ENDIF
08A5B F1 33                     	.db $F1, $33
08A5D F1 92                     	.db $F1, $92
08A5F BB 29                     	.db $BB, $29
08A61 54 29                     	.db $54, $29
08A63 F0 6F                     	.db $F0, $6F
08A65 92 29                     	.db $92, $29
08A67 5D 29                     	.db $5D, $29
08A69 F0 0D                     	.db $F0, $0D
08A6B B6 83                     	.db $B6, $83
08A6D 07 83                     	.db $07, $83
08A6F 08 83                     	.db $08, $83
08A71 09 83                     	.db $09, $83
08A73 28 0A                     	.db $28, $0A
08A75                           IFNDEF DISABLE_DOOR_POINTERS
08A75 05 70                     	.db $05, $70
08A77                           ENDIF
08A77                           IFDEF DISABLE_DOOR_POINTERS
08A77                           	.db $F5, $05, $70
08A77                           ENDIF
08A77 1B 29                     	.db $1B, $29
08A79 F0 0E                     	.db $F0, $0E
08A7B F0 CD                     	.db $F0, $CD
08A7D F1 4E                     	.db $F1, $4E
08A7F F1 A0                     	.db $F1, $A0
08A81 FF                        	.db $FF
08A82                           include "src/levels/2/2-3/2-3-area4.asm"
08A82                           ; Level 2-3, Area 4
08A82                           
08A82                           LevelData_2_3_Area4:
08A82                           	; Level Header
08A82                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08A82                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08A82                           	levelHeader 0, LevelDirection_Vertical, 3, 0, LevelMusic_Underground, 0, 1, $03, $0
08A82 00                        	.db LevelDirection_Vertical << 7 | 3 << 3 | 0
08A83 00                        	.db %11100000 | $03
08A84 00                        	.db 0 << 4 | 0 << 2 | 1
08A85                           	IFNDEF LEVEL_ENGINE_UPGRADES
08A85 00                        		.db $0 << 3 | LevelMusic_Underground
08A86                           	ENDIF
08A86                           	IFDEF LEVEL_ENGINE_UPGRADES
08A86                           		.db $0 << 4 | LevelMusic_Underground
08A86                           	ENDIF
08A86                           
08A86 54 31                     	.db $54, $31
08A88 0A 31                     	.db $0A, $31
08A8A 15 31                     	.db $15, $31
08A8C 09 31                     	.db $09, $31
08A8E 26 33                     	.db $26, $33
08A90 15 31                     	.db $15, $31
08A92 09 31                     	.db $09, $31
08A94 14 30                     	.db $14, $30
08A96 0B 30                     	.db $0B, $30
08A98 28 28                     	.db $28, $28
08A9A F0 44                     	.db $F0, $44
08A9C F0 65                     	.db $F0, $65
08A9E F0 86                     	.db $F0, $86
08AA0 F0 A7                     	.db $F0, $A7
08AA2 F1 66                     	.db $F1, $66
08AA4 F1 84                     	.db $F1, $84
08AA6 F1 A0                     	.db $F1, $A0
08AA8 FF                        	.db $FF
08AA9                           include "src/levels/2/2-3/2-3-area5.asm"
08AA9                           ; Level 2-3, Area 5
08AA9                           
08AA9                           LevelData_2_3_Area5:
08AA9                           	; Level Header
08AA9                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08AA9                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08AA9                           	levelHeader 6, LevelDirection_Horizontal, 1, 1, LevelMusic_Boss, 0, 2, $0a, $3
08AA9 00                        	.db LevelDirection_Horizontal << 7 | 1 << 3 | 1
08AAA 00                        	.db %11100000 | $0a
08AAB 00                        	.db 6 << 4 | 0 << 2 | 2
08AAC                           	IFNDEF LEVEL_ENGINE_UPGRADES
08AAC 00                        		.db $3 << 3 | LevelMusic_Boss
08AAD                           	ENDIF
08AAD                           	IFDEF LEVEL_ENGINE_UPGRADES
08AAD                           		.db $3 << 4 | LevelMusic_Boss
08AAD                           	ENDIF
08AAD                           
08AAD 43 0A                     	.db $43, $0A
08AAF                           IFNDEF DISABLE_DOOR_POINTERS
08AAF 05 33                     	.db $05, $33
08AB1                           ENDIF
08AB1                           IFDEF DISABLE_DOOR_POINTERS
08AB1                           	.db $F5, $05, $33
08AB1                           ENDIF
08AB1 2C 35                     	.db $2C, $35
08AB3 1C 35                     	.db $1C, $35
08AB5 1C 35                     	.db $1C, $35
08AB7 1C 35                     	.db $1C, $35
08AB9 0D 29                     	.db $0D, $29
08ABB F0 4E                     	.db $F0, $4E
08ABD F1 8F                     	.db $F1, $8F
08ABF C2 3F                     	.db $C2, $3F
08AC1 12 3F                     	.db $12, $3F
08AC3 12 3F                     	.db $12, $3F
08AC5 0B 29                     	.db $0B, $29
08AC7 12 3F                     	.db $12, $3F
08AC9 10 3F                     	.db $10, $3F
08ACB 03 29                     	.db $03, $29
08ACD 10 3F                     	.db $10, $3F
08ACF 10 3F                     	.db $10, $3F
08AD1 08 29                     	.db $08, $29
08AD3 F0 1C                     	.db $F0, $1C
08AD5 62 29                     	.db $62, $29
08AD7 2F 34                     	.db $2F, $34
08AD9 1F 34                     	.db $1F, $34
08ADB 1F 34                     	.db $1F, $34
08ADD 1E 36                     	.db $1E, $36
08ADF 1D 38                     	.db $1D, $38
08AE1 1C 3A                     	.db $1C, $3A
08AE3 1B 3C                     	.db $1B, $3C
08AE5 1A 3E                     	.db $1A, $3E
08AE7 F0 0F                     	.db $F0, $0F
08AE9 F0 4E                     	.db $F0, $4E
08AEB F0 CF                     	.db $F0, $CF
08AED F1 0D                     	.db $F1, $0D
08AEF F2                        	.db $F2
08AF0 F1 CC                     	.db $F1, $CC
08AF2 F2 73                     	.db $F2, $73
08AF4 0F 06                     	.db $0F, $06
08AF6 07 11                     	.db $07, $11
08AF8 0F F1                     	.db $0F, $F1
08AFA 2D F2                     	.db $2D, $F2
08AFC A0 07                     	.db $A0, $07
08AFE 06 07                     	.db $06, $07
08B00 22 42                     	.db $22, $42
08B02 F0 10                     	.db $F0, $10
08B04 F2                        	.db $F2
08B05 F0 CF                     	.db $F0, $CF
08B07 F1 4A                     	.db $F1, $4A
08B09 F5 05 60                  	.db $F5, $05, $60
08B0C FF                        	.db $FF
08B0D                           include "src/levels/2/2-3/2-3-area6.asm"
08B0D                           ; Level 2-3, Area 6
08B0D                           
08B0D                           LevelData_2_3_Area6:
08B0D                           	; Level Header
08B0D                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08B0D                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08B0D                           	levelHeader 1, LevelDirection_Horizontal, 5, 2, LevelMusic_Boss, 0, 3, $0a, $5
08B0D 00                        	.db LevelDirection_Horizontal << 7 | 5 << 3 | 2
08B0E 00                        	.db %11100000 | $0a
08B0F 00                        	.db 1 << 4 | 0 << 2 | 3
08B10                           	IFNDEF LEVEL_ENGINE_UPGRADES
08B10 00                        		.db $5 << 3 | LevelMusic_Boss
08B11                           	ENDIF
08B11                           	IFDEF LEVEL_ENGINE_UPGRADES
08B11                           		.db $5 << 4 | LevelMusic_Boss
08B11                           	ENDIF
08B11                           
08B11 8E 30                     	.db $8E, $30
08B13 F0 CD                     	.db $F0, $CD
08B15 F1 52                     	.db $F1, $52
08B17 F1 CD                     	.db $F1, $CD
08B19 E4 32                     	.db $E4, $32
08B1B 1A 33                     	.db $1A, $33
08B1D 1C 83                     	.db $1C, $83
08B1F 0D 83                     	.db $0D, $83
08B21 10 00                     	.db $10, $00
08B23 01 00                     	.db $01, $00
08B25 02 00                     	.db $02, $00
08B27 03 33                     	.db $03, $33
08B29 10 00                     	.db $10, $00
08B2B 01 00                     	.db $01, $00
08B2D 02 00                     	.db $02, $00
08B2F F0 16                     	.db $F0, $16
08B31 F0 6D                     	.db $F0, $6D
08B33 F1 CA                     	.db $F1, $CA
08B35 FF                        	.db $FF
08B36                           include "src/levels/2/2-3/2-3-area7.asm"
08B36                           ; Level 2-3, Area 7
08B36                           
08B36                           LevelData_2_3_Area7:
08B36                           	; Level Header
08B36                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08B36                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08B36                           	levelHeader 0, LevelDirection_Vertical, 1, 1, LevelMusic_Underground, 0, 3, $00, $2
08B36 00                        	.db LevelDirection_Vertical << 7 | 1 << 3 | 1
08B37 00                        	.db %11100000 | $00
08B38 00                        	.db 0 << 4 | 0 << 2 | 3
08B39                           	IFNDEF LEVEL_ENGINE_UPGRADES
08B39 00                        		.db $2 << 3 | LevelMusic_Underground
08B3A                           	ENDIF
08B3A                           	IFDEF LEVEL_ENGINE_UPGRADES
08B3A                           		.db $2 << 4 | LevelMusic_Underground
08B3A                           	ENDIF
08B3A                           
08B3A 32 2C                     	.db $32, $2C
08B3C 0D 2C                     	.db $0D, $2C
08B3E 22 2C                     	.db $22, $2C
08B40 0D 2C                     	.db $0D, $2C
08B42 22 2C                     	.db $22, $2C
08B44 0D 2C                     	.db $0D, $2C
08B46 15 35                     	.db $15, $35
08B48 27 0A                     	.db $27, $0A
08B4A                           IFNDEF DISABLE_DOOR_POINTERS
08B4A 05 36                     	.db $05, $36
08B4C                           ENDIF
08B4C                           IFDEF DISABLE_DOOR_POINTERS
08B4C                           	.db $F5, $05, $36
08B4C                           ENDIF
08B4C F0 41                     	.db $F0, $41
08B4E F1 80                     	.db $F1, $80
08B50 FF                        	.db $FF
08B51                           ; -------------------------------
08B51                           
08B51                           
08B51                           ; -------------------------------
08B51                           ; World 3
08B51                           
08B51                           ; World 3-1
08B51                           include "src/levels/3/3-1/3-1-area0.asm"
08B51                           ; Level 3-1, Area 0
08B51                           
08B51                           LevelData_3_1_Area0:
08B51                           	; Level Header
08B51                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08B51                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08B51                           	levelHeader 1, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $0a, $2
08B51 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
08B52 00                        	.db %11100000 | $0a
08B53 00                        	.db 1 << 4 | 0 << 2 | 0
08B54                           	IFNDEF LEVEL_ENGINE_UPGRADES
08B54 00                        		.db $2 << 3 | LevelMusic_Overworld
08B55                           	ENDIF
08B55                           	IFDEF LEVEL_ENGINE_UPGRADES
08B55                           		.db $2 << 4 | LevelMusic_Overworld
08B55                           	ENDIF
08B55                           
08B55 13 10                     	.db $13, $10
08B57 14 11                     	.db $14, $11
08B59 1A 16                     	.db $1A, $16
08B5B 0B 16                     	.db $0B, $16
08B5D F0 42                     	.db $F0, $42
08B5F EA C2                     	.db $EA, $C2
08B61 16 C1                     	.db $16, $C1
08B63 18 F1                     	.db $18, $F1
08B65 0C C3                     	.db $0C, $C3
08B67 14 C4                     	.db $14, $C4
08B69 0D 0B                     	.db $0D, $0B
08B6B                           IFNDEF DISABLE_DOOR_POINTERS
08B6B 06 16                     	.db $06, $16
08B6D                           ENDIF
08B6D                           IFDEF DISABLE_DOOR_POINTERS
08B6D                           	.db $F5, $06, $16
08B6D                           ENDIF
08B6D F1 28                     	.db $F1, $28
08B6F F1 42                     	.db $F1, $42
08B71 FF                        	.db $FF
08B72                           include "src/levels/3/3-1/3-1-area1.asm"
08B72                           ; Level 3-1, Area 1
08B72                           
08B72                           LevelData_3_1_Area1:
08B72                           	; Level Header
08B72                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08B72                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08B72                           	levelHeader 9, LevelDirection_Vertical, 0, 0, LevelMusic_Overworld, 0, 0, $13, $1
08B72 00                        	.db LevelDirection_Vertical << 7 | 0 << 3 | 0
08B73 00                        	.db %11100000 | $13
08B74 00                        	.db 9 << 4 | 0 << 2 | 0
08B75                           	IFNDEF LEVEL_ENGINE_UPGRADES
08B75 00                        		.db $1 << 3 | LevelMusic_Overworld
08B76                           	ENDIF
08B76                           	IFDEF LEVEL_ENGINE_UPGRADES
08B76                           		.db $1 << 4 | LevelMusic_Overworld
08B76                           	ENDIF
08B76                           
08B76 6C 10                     	.db $6C, $10
08B78 52 10                     	.db $52, $10
08B7A 18 12                     	.db $18, $12
08B7C F5 06 31                  	.db $F5, $06, $31
08B7F C3 10                     	.db $C3, $10
08B81 46 10                     	.db $46, $10
08B83 9C 10                     	.db $9C, $10
08B85 34 10                     	.db $34, $10
08B87 70 FF                     	.db $70, $FF
08B89 B4 E2                     	.db $B4, $E2
08B8B F0 6C                     	.db $F0, $6C
08B8D 34 E2                     	.db $34, $E2
08B8F 38 E1                     	.db $38, $E1
08B91 3A E1                     	.db $3A, $E1
08B93 3C E2                     	.db $3C, $E2
08B95 3A E1                     	.db $3A, $E1
08B97 38 E1                     	.db $38, $E1
08B99 35 E1                     	.db $35, $E1
08B9B 32 E3                     	.db $32, $E3
08B9D 37 E1                     	.db $37, $E1
08B9F 37 E4                     	.db $37, $E4
08BA1 3B E2                     	.db $3B, $E2
08BA3 10 C2                     	.db $10, $C2
08BA5 2B E2                     	.db $2B, $E2
08BA7 20 C3                     	.db $20, $C3
08BA9 1B E2                     	.db $1B, $E2
08BAB 20 C4                     	.db $20, $C4
08BAD 12 0B                     	.db $12, $0B
08BAF                           IFNDEF DISABLE_DOOR_POINTERS
08BAF 06 01                     	.db $06, $01
08BB1                           ENDIF
08BB1                           IFDEF DISABLE_DOOR_POINTERS
08BB1                           	.db $F5, $06, $01
08BB1                           ENDIF
08BB1 08 E3                     	.db $08, $E3
08BB3 F1 91                     	.db $F1, $91
08BB5 F2                        	.db $F2
08BB6 F1 8A                     	.db $F1, $8A
08BB8 F3                        	.db $F3
08BB9 76 C1                     	.db $76, $C1
08BBB 27 C2                     	.db $27, $C2
08BBD 18 0B                     	.db $18, $0B
08BBF                           IFNDEF DISABLE_DOOR_POINTERS
08BBF 06 20                     	.db $06, $20
08BC1                           ENDIF
08BC1                           IFDEF DISABLE_DOOR_POINTERS
08BC1                           	.db $F5, $06, $20
08BC1                           ENDIF
08BC1 F1 8B                     	.db $F1, $8B
08BC3 F1 AB                     	.db $F1, $AB
08BC5 F6 07                     	.db $F6, $07
08BC7 FF                        	.db $FF
08BC8                           include "src/levels/3/3-1/3-1-area2.asm"
08BC8                           ; Level 3-1, Area 2
08BC8                           
08BC8                           LevelData_3_1_Area2:
08BC8                           	; Level Header
08BC8                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08BC8                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08BC8                           	levelHeader 2, LevelDirection_Horizontal, 1, 1, LevelMusic_Underground, 0, 0, $0a, $2
08BC8 00                        	.db LevelDirection_Horizontal << 7 | 1 << 3 | 1
08BC9 00                        	.db %11100000 | $0a
08BCA 00                        	.db 2 << 4 | 0 << 2 | 0
08BCB                           	IFNDEF LEVEL_ENGINE_UPGRADES
08BCB 00                        		.db $2 << 3 | LevelMusic_Underground
08BCC                           	ENDIF
08BCC                           	IFDEF LEVEL_ENGINE_UPGRADES
08BCC                           		.db $2 << 4 | LevelMusic_Underground
08BCC                           	ENDIF
08BCC                           
08BCC 87 13                     	.db $87, $13
08BCE                           IFNDEF DISABLE_DOOR_POINTERS
08BCE 06 19                     	.db $06, $19
08BD0                           ENDIF
08BD0                           IFDEF DISABLE_DOOR_POINTERS
08BD0                           	.db $F5, $06, $19
08BD0                           ENDIF
08BD0 F0 D1                     	.db $F0, $D1
08BD2 F2                        	.db $F2
08BD3 94 5E                     	.db $94, $5E
08BD5 0D 26                     	.db $0D, $26
08BD7 F2                        	.db $F2
08BD8 BB 08                     	.db $BB, $08
08BDA 0D 0A                     	.db $0D, $0A
08BDC                           IFNDEF DISABLE_DOOR_POINTERS
08BDC 06 16                     	.db $06, $16
08BDE                           ENDIF
08BDE                           IFDEF DISABLE_DOOR_POINTERS
08BDE                           	.db $F5, $06, $16
08BDE                           ENDIF
08BDE F1 10                     	.db $F1, $10
08BE0 F1 CA                     	.db $F1, $CA
08BE2 FF                        	.db $FF
08BE3                           include "src/levels/3/3-1/3-1-area3.asm"
08BE3                           ; Level 3-1, Area 3
08BE3                           
08BE3                           LevelData_3_1_Area3:
08BE3                           	; Level Header
08BE3                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08BE3                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08BE3                           	levelHeader 5, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 3, $08, $2
08BE3 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
08BE4 00                        	.db %11100000 | $08
08BE5 00                        	.db 5 << 4 | 0 << 2 | 3
08BE6                           	IFNDEF LEVEL_ENGINE_UPGRADES
08BE6 00                        		.db $2 << 3 | LevelMusic_Overworld
08BE7                           	ENDIF
08BE7                           	IFDEF LEVEL_ENGINE_UPGRADES
08BE7                           		.db $2 << 4 | LevelMusic_Overworld
08BE7                           	ENDIF
08BE7                           
08BE7 56 10                     	.db $56, $10
08BE9 2A 11                     	.db $2A, $11
08BEB 2E 10                     	.db $2E, $10
08BED 12 0A                     	.db $12, $0A
08BEF                           IFNDEF DISABLE_DOOR_POINTERS
08BEF 06 43                     	.db $06, $43
08BF1                           ENDIF
08BF1                           IFDEF DISABLE_DOOR_POINTERS
08BF1                           	.db $F5, $06, $43
08BF1                           ENDIF
08BF1 17 11                     	.db $17, $11
08BF3 10 E4                     	.db $10, $E4
08BF5 08 10                     	.db $08, $10
08BF7 1C 10                     	.db $1C, $10
08BF9 7C 00                     	.db $7C, $00
08BFB 1C E2                     	.db $1C, $E2
08BFD 27 0C                     	.db $27, $0C
08BFF F5 06 10                  	.db $F5, $06, $10
08C02 1F E2                     	.db $1F, $E2
08C04 2F 00                     	.db $2F, $00
08C06 10 E6                     	.db $10, $E6
08C08 07 03                     	.db $07, $03
08C0A 08 EA                     	.db $08, $EA
08C0C 60 E2                     	.db $60, $E2
08C0E 26 E2                     	.db $26, $E2
08C10 12 2B                     	.db $12, $2B
08C12 26 26                     	.db $26, $26
08C14 07 22                     	.db $07, $22
08C16 0D E2                     	.db $0D, $E2
08C18 16 C1                     	.db $16, $C1
08C1A 20 00                     	.db $20, $00
08C1C 01 00                     	.db $01, $00
08C1E 0A E3                     	.db $0A, $E3
08C20 79 E3                     	.db $79, $E3
08C22 22 00                     	.db $22, $00
08C24 10 E3                     	.db $10, $E3
08C26 07 E3                     	.db $07, $E3
08C28 36 E2                     	.db $36, $E2
08C2A 34 C1                     	.db $34, $C1
08C2C 0A E2                     	.db $0A, $E2
08C2E 50 2D                     	.db $50, $2D
08C30 29 A8                     	.db $29, $A8
08C32 18 21                     	.db $18, $21
08C34 19 05                     	.db $19, $05
08C36 31 21                     	.db $31, $21
08C38 3D 26                     	.db $3D, $26
08C3A 0E 21                     	.db $0E, $21
08C3C 0F 21                     	.db $0F, $21
08C3E F0 0C                     	.db $F0, $0C
08C40 F0 4B                     	.db $F0, $4B
08C42 F0 95                     	.db $F0, $95
08C44 F2                        	.db $F2
08C45 4E 0B                     	.db $4E, $0B
08C47                           IFNDEF DISABLE_DOOR_POINTERS
08C47 06 40                     	.db $06, $40
08C49                           ENDIF
08C49                           IFDEF DISABLE_DOOR_POINTERS
08C49                           	.db $F5, $06, $40
08C49                           ENDIF
08C49 80 21                     	.db $80, $21
08C4B 01 21                     	.db $01, $21
08C4D 02 21                     	.db $02, $21
08C4F F0 8B                     	.db $F0, $8B
08C51 F1 28                     	.db $F1, $28
08C53 F1 8B                     	.db $F1, $8B
08C55 F1 CA                     	.db $F1, $CA
08C57 FF                        	.db $FF
08C58                           include "src/levels/3/3-1/3-1-area4.asm"
08C58                           ; Level 3-1, Area 4
08C58                           
08C58                           LevelData_3_1_Area4:
08C58                           	; Level Header
08C58                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08C58                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08C58                           	levelHeader 3, LevelDirection_Horizontal, 2, 1, LevelMusic_Boss, 0, 2, $0a, $2
08C58 00                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
08C59 00                        	.db %11100000 | $0a
08C5A 00                        	.db 3 << 4 | 0 << 2 | 2
08C5B                           	IFNDEF LEVEL_ENGINE_UPGRADES
08C5B 00                        		.db $2 << 3 | LevelMusic_Boss
08C5C                           	ENDIF
08C5C                           	IFDEF LEVEL_ENGINE_UPGRADES
08C5C                           		.db $2 << 4 | LevelMusic_Boss
08C5C                           	ENDIF
08C5C                           
08C5C 41 13                     	.db $41, $13
08C5E                           IFNDEF DISABLE_DOOR_POINTERS
08C5E 06 35                     	.db $06, $35
08C60                           ENDIF
08C60                           IFDEF DISABLE_DOOR_POINTERS
08C60                           	.db $F5, $06, $35
08C60                           ENDIF
08C60 F0 2E                     	.db $F0, $2E
08C62 F2                        	.db $F2
08C63 67 36                     	.db $67, $36
08C65 3D 00                     	.db $3D, $00
08C67 1D 00                     	.db $1D, $00
08C69 14 35                     	.db $14, $35
08C6B 10 31                     	.db $10, $31
08C6D F0 08                     	.db $F0, $08
08C6F F1 59                     	.db $F1, $59
08C71 F1 CA                     	.db $F1, $CA
08C73 F5 07 00                  	.db $F5, $07, $00
08C76 F3                        	.db $F3
08C77 26 83                     	.db $26, $83
08C79 20 81                     	.db $20, $81
08C7B 0D 14                     	.db $0D, $14
08C7D                           IFNDEF DISABLE_DOOR_POINTERS
08C7D 06 30                     	.db $06, $30
08C7F                           ENDIF
08C7F                           IFDEF DISABLE_DOOR_POINTERS
08C7F                           	.db $F5, $06, $30
08C7F                           ENDIF
08C7F 18 25                     	.db $18, $25
08C81 09 25                     	.db $09, $25
08C83 F0 0B                     	.db $F0, $0B
08C85 F0 4E                     	.db $F0, $4E
08C87 F1 EA                     	.db $F1, $EA
08C89 FF                        	.db $FF
08C8A                           
08C8A                           ; World 3-2
08C8A                           include "src/levels/3/3-2/3-2-area0.asm"
08C8A                           ; Level 3-2, Area 0
08C8A                           
08C8A                           LevelData_3_2_Area0:
08C8A                           	; Level Header
08C8A                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08C8A                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08C8A                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 2, 0, $0a, $2
08C8A 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
08C8B 00                        	.db %11100000 | $0a
08C8C 00                        	.db 9 << 4 | 2 << 2 | 0
08C8D                           	IFNDEF LEVEL_ENGINE_UPGRADES
08C8D 00                        		.db $2 << 3 | LevelMusic_Overworld
08C8E                           	ENDIF
08C8E                           	IFDEF LEVEL_ENGINE_UPGRADES
08C8E                           		.db $2 << 4 | LevelMusic_Overworld
08C8E                           	ENDIF
08C8E                           
08C8E 2F 16                     	.db $2F, $16
08C90 9C 0A                     	.db $9C, $0A
08C92                           IFNDEF DISABLE_DOOR_POINTERS
08C92 07 23                     	.db $07, $23
08C94                           ENDIF
08C94                           IFDEF DISABLE_DOOR_POINTERS
08C94                           	.db $F5, $07, $23
08C94                           ENDIF
08C94 F0 82                     	.db $F0, $82
08C96 F6 00                     	.db $F6, $00
08C98 F1 04                     	.db $F1, $04
08C9A 66 16                     	.db $66, $16
08C9C 0D 16                     	.db $0D, $16
08C9E 2A 0F                     	.db $2A, $0F
08CA0 17 0F                     	.db $17, $0F
08CA2 53 A4                     	.db $53, $A4
08CA4 33 05                     	.db $33, $05
08CA6 F5 07 11                  	.db $F5, $07, $11
08CA9 F0 62                     	.db $F0, $62
08CAB 44 16                     	.db $44, $16
08CAD 1C CD                     	.db $1C, $CD
08CAF 11 0F                     	.db $11, $0F
08CB1 16 0F                     	.db $16, $0F
08CB3 09 C4                     	.db $09, $C4
08CB5 52 A4                     	.db $52, $A4
08CB7 32 05                     	.db $32, $05
08CB9 F5 07 12                  	.db $F5, $07, $12
08CBC F0 64                     	.db $F0, $64
08CBE 7C 0F                     	.db $7C, $0F
08CC0 1E 51                     	.db $1E, $51
08CC2 42 A4                     	.db $42, $A4
08CC4 32 05                     	.db $32, $05
08CC6 F5 07 13                  	.db $F5, $07, $13
08CC9 F0 42                     	.db $F0, $42
08CCB 46 16                     	.db $46, $16
08CCD 0B 16                     	.db $0B, $16
08CCF 31 0F                     	.db $31, $0F
08CD1 52 A4                     	.db $52, $A4
08CD3 32 05                     	.db $32, $05
08CD5 F5 07 14                  	.db $F5, $07, $14
08CD8 F0 64                     	.db $F0, $64
08CDA 40 16                     	.db $40, $16
08CDC 05 16                     	.db $05, $16
08CDE 92 A3                     	.db $92, $A3
08CE0 22 05                     	.db $22, $05
08CE2 F5 07 15                  	.db $F5, $07, $15
08CE5 F0 C6                     	.db $F0, $C6
08CE7 F2                        	.db $F2
08CE8 2A 16                     	.db $2A, $16
08CEA 1D 16                     	.db $1D, $16
08CEC 44 01                     	.db $44, $01
08CEE 05 01                     	.db $05, $01
08CF0 F0 04                     	.db $F0, $04
08CF2 F0 85                     	.db $F0, $85
08CF4 F0 C4                     	.db $F0, $C4
08CF6 F1 03                     	.db $F1, $03
08CF8 F1 44                     	.db $F1, $44
08CFA A3 16                     	.db $A3, $16
08CFC 0C 16                     	.db $0C, $16
08CFE 26 0F                     	.db $26, $0F
08D00 11 0F                     	.db $11, $0F
08D02 0A 0F                     	.db $0A, $0F
08D04 F1 83                     	.db $F1, $83
08D06 F1 C4                     	.db $F1, $C4
08D08 F2                        	.db $F2
08D09 25 16                     	.db $25, $16
08D0B 17 16                     	.db $17, $16
08D0D 3E 25                     	.db $3E, $25
08D0F 52 A3                     	.db $52, $A3
08D11 22 05                     	.db $22, $05
08D13 F5 07 17                  	.db $F5, $07, $17
08D16 57 26                     	.db $57, $26
08D18 09 22                     	.db $09, $22
08D1A 0B 22                     	.db $0B, $22
08D1C 0C 2B                     	.db $0C, $2B
08D1E 16 C6                     	.db $16, $C6
08D20 20 25                     	.db $20, $25
08D22 12 02                     	.db $12, $02
08D24 03 02                     	.db $03, $02
08D26 F0 45                     	.db $F0, $45
08D28 F0 82                     	.db $F0, $82
08D2A F1 AA                     	.db $F1, $AA
08D2C F6 02                     	.db $F6, $02
08D2E FF                        	.db $FF
08D2F                           include "src/levels/3/3-2/3-2-area1.asm"
08D2F                           ; Level 3-2, Area 1
08D2F                           
08D2F                           LevelData_3_2_Area1:
08D2F                           	; Level Header
08D2F                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08D2F                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08D2F                           	levelHeader 7, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 2, $0a, $2
08D2F 00                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
08D30 00                        	.db %11100000 | $0a
08D31 00                        	.db 7 << 4 | 0 << 2 | 2
08D32                           	IFNDEF LEVEL_ENGINE_UPGRADES
08D32 00                        		.db $2 << 3 | LevelMusic_Underground
08D33                           	ENDIF
08D33                           	IFDEF LEVEL_ENGINE_UPGRADES
08D33                           		.db $2 << 4 | LevelMusic_Underground
08D33                           	ENDIF
08D33                           
08D33 97 25                     	.db $97, $25
08D35 09 21                     	.db $09, $21
08D37 0B 21                     	.db $0B, $21
08D39 0D 26                     	.db $0D, $26
08D3B 13 02                     	.db $13, $02
08D3D 04 02                     	.db $04, $02
08D3F 05 02                     	.db $05, $02
08D41 06 02                     	.db $06, $02
08D43 0E 02                     	.db $0E, $02
08D45 0F 02                     	.db $0F, $02
08D47 2F 2D                     	.db $2F, $2D
08D49 F0 70                     	.db $F0, $70
08D4B F0 EF                     	.db $F0, $EF
08D4D F1 D0                     	.db $F1, $D0
08D4F 3C AC                     	.db $3C, $AC
08D51 F5 07 01                  	.db $F5, $07, $01
08D54 6C 05                     	.db $6C, $05
08D56 40 02                     	.db $40, $02
08D58 01 02                     	.db $01, $02
08D5A 0C 05                     	.db $0C, $05
08D5C F0 4F                     	.db $F0, $4F
08D5E F0 8E                     	.db $F0, $8E
08D60 F1 B1                     	.db $F1, $B1
08D62 5D AC                     	.db $5D, $AC
08D64 F5 07 02                  	.db $F5, $07, $02
08D67 56 25                     	.db $56, $25
08D69 08 25                     	.db $08, $25
08D6B 0A 25                     	.db $0A, $25
08D6D 14 83                     	.db $14, $83
08D6F 0D 05                     	.db $0D, $05
08D71 F0 BC                     	.db $F0, $BC
08D73 F0 D5                     	.db $F0, $D5
08D75 9D A9                     	.db $9D, $A9
08D77 F5 07 03                  	.db $F5, $07, $03
08D7A F0 17                     	.db $F0, $17
08D7C F1 8F                     	.db $F1, $8F
08D7E F1 F7                     	.db $F1, $F7
08D80 F2                        	.db $F2
08D81 0D A9                     	.db $0D, $A9
08D83 F5 07 04                  	.db $F5, $07, $04
08D86 86 41                     	.db $86, $41
08D88 16 41                     	.db $16, $41
08D8A F0 2F                     	.db $F0, $2F
08D8C F0 97                     	.db $F0, $97
08D8E F0 CF                     	.db $F0, $CF
08D90 F1 17                     	.db $F1, $17
08D92 F1 4F                     	.db $F1, $4F
08D94 F1 CA                     	.db $F1, $CA
08D96 6D A5                     	.db $6D, $A5
08D98 F5 07 05                  	.db $F5, $07, $05
08D9B 65 32                     	.db $65, $32
08D9D 3F 83                     	.db $3F, $83
08D9F F0 4F                     	.db $F0, $4F
08DA1 F0 BC                     	.db $F0, $BC
08DA3 F1 15                     	.db $F1, $15
08DA5 F1 D3                     	.db $F1, $D3
08DA7 89 83                     	.db $89, $83
08DA9 23 A8                     	.db $23, $A8
08DAB 0E A8                     	.db $0E, $A8
08DAD 11 01                     	.db $11, $01
08DAF 05 25                     	.db $05, $25
08DB1 06 25                     	.db $06, $25
08DB3 0C 25                     	.db $0C, $25
08DB5 0D 25                     	.db $0D, $25
08DB7 13 05                     	.db $13, $05
08DB9 0E 05                     	.db $0E, $05
08DBB 32 83                     	.db $32, $83
08DBD 05 83                     	.db $05, $83
08DBF 0D 83                     	.db $0D, $83
08DC1 37 25                     	.db $37, $25
08DC3 09 25                     	.db $09, $25
08DC5 F0 15                     	.db $F0, $15
08DC7 3D A5                     	.db $3D, $A5
08DC9 50 25                     	.db $50, $25
08DCB F5 07 08                  	.db $F5, $07, $08
08DCE F0 7C                     	.db $F0, $7C
08DD0 F0 88                     	.db $F0, $88
08DD2 F0 CC                     	.db $F0, $CC
08DD4 F1 0E                     	.db $F1, $0E
08DD6 F1 CA                     	.db $F1, $CA
08DD8 FF                        	.db $FF
08DD9                           include "src/levels/3/3-2/3-2-area2.asm"
08DD9                           ; Level 3-2, Area 2
08DD9                           
08DD9                           LevelData_3_2_Area2:
08DD9                           	; Level Header
08DD9                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08DD9                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08DD9                           	levelHeader 3, LevelDirection_Horizontal, 2, 1, LevelMusic_Boss, 0, 0, $0a, $2
08DD9 00                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
08DDA 00                        	.db %11100000 | $0a
08DDB 00                        	.db 3 << 4 | 0 << 2 | 0
08DDC                           	IFNDEF LEVEL_ENGINE_UPGRADES
08DDC 00                        		.db $2 << 3 | LevelMusic_Boss
08DDD                           	ENDIF
08DDD                           	IFDEF LEVEL_ENGINE_UPGRADES
08DDD                           		.db $2 << 4 | LevelMusic_Boss
08DDD                           	ENDIF
08DDD                           
08DDD 83 00                     	.db $83, $00
08DDF 04 00                     	.db $04, $00
08DE1 05 00                     	.db $05, $00
08DE3 06 00                     	.db $06, $00
08DE5 07 00                     	.db $07, $00
08DE7 08 49                     	.db $08, $49
08DE9 F0 7C                     	.db $F0, $7C
08DEB D8 47                     	.db $D8, $47
08DED F0 55                     	.db $F0, $55
08DEF F1 1C                     	.db $F1, $1C
08DF1 F5 08 00                  	.db $F5, $08, $00
08DF4 F2                        	.db $F2
08DF5 F0 0E                     	.db $F0, $0E
08DF7 F2                        	.db $F2
08DF8 43 0A                     	.db $43, $0A
08DFA                           IFNDEF DISABLE_DOOR_POINTERS
08DFA 07 00                     	.db $07, $00
08DFC                           ENDIF
08DFC                           IFDEF DISABLE_DOOR_POINTERS
08DFC                           	.db $F5, $07, $00
08DFC                           ENDIF
08DFC F0 CA                     	.db $F0, $CA
08DFE FF                        	.db $FF
08DFF                           
08DFF                           ; World 3-3
08DFF                           include "src/levels/3/3-3/3-3-area0.asm"
08DFF                           ; Level 3-3, Area 0
08DFF                           
08DFF                           LevelData_3_3_Area0:
08DFF                           	; Level Header
08DFF                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08DFF                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08DFF                           	levelHeader 1, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 0, $0a, $2
08DFF 00                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
08E00 00                        	.db %11100000 | $0a
08E01 00                        	.db 1 << 4 | 0 << 2 | 0
08E02                           	IFNDEF LEVEL_ENGINE_UPGRADES
08E02 00                        		.db $2 << 3 | LevelMusic_Underground
08E03                           	ENDIF
08E03                           	IFDEF LEVEL_ENGINE_UPGRADES
08E03                           		.db $2 << 4 | LevelMusic_Underground
08E03                           	ENDIF
08E03                           
08E03 F0 94                     	.db $F0, $94
08E05 F2                        	.db $F2
08E06 48 13                     	.db $48, $13
08E08                           IFNDEF DISABLE_DOOR_POINTERS
08E08 08 10                     	.db $08, $10
08E0A                           ENDIF
08E0A                           IFDEF DISABLE_DOOR_POINTERS
08E0A                           	.db $F5, $08, $10
08E0A                           ENDIF
08E0A 54 83                     	.db $54, $83
08E0C 13 82                     	.db $13, $82
08E0E F0 50                     	.db $F0, $50
08E10 F0 AE                     	.db $F0, $AE
08E12 F1 8A                     	.db $F1, $8A
08E14 FF                        	.db $FF
08E15                           include "src/levels/3/3-3/3-3-area1.asm"
08E15                           ; Level 3-3, Area 1
08E15                           
08E15                           LevelData_3_3_Area1:
08E15                           	; Level Header
08E15                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08E15                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08E15                           	levelHeader 3, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $01, $0
08E15 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
08E16 00                        	.db %11100000 | $01
08E17 00                        	.db 3 << 4 | 0 << 2 | 0
08E18                           	IFNDEF LEVEL_ENGINE_UPGRADES
08E18 00                        		.db $0 << 3 | LevelMusic_Overworld
08E19                           	ENDIF
08E19                           	IFDEF LEVEL_ENGINE_UPGRADES
08E19                           		.db $0 << 4 | LevelMusic_Overworld
08E19                           	ENDIF
08E19                           
08E19 35 10                     	.db $35, $10
08E1B 29 11                     	.db $29, $11
08E1D 36 C2                     	.db $36, $C2
08E1F 17 0B                     	.db $17, $0B
08E21                           IFNDEF DISABLE_DOOR_POINTERS
08E21 08 01                     	.db $08, $01
08E23                           ENDIF
08E23                           IFDEF DISABLE_DOOR_POINTERS
08E23                           	.db $F5, $08, $01
08E23                           ENDIF
08E23 1E 0F                     	.db $1E, $0F
08E25 8B 11                     	.db $8B, $11
08E27 17 10                     	.db $17, $10
08E29 32 2B                     	.db $32, $2B
08E2B 12 0F                     	.db $12, $0F
08E2D 10 0F                     	.db $10, $0F
08E2F 13 01                     	.db $13, $01
08E31 05 52                     	.db $05, $52
08E33 08 26                     	.db $08, $26
08E35 5C 18                     	.db $5C, $18
08E37 45 10                     	.db $45, $10
08E39 49 0F                     	.db $49, $0F
08E3B 72 18                     	.db $72, $18
08E3D 08 18                     	.db $08, $18
08E3F 96 0A                     	.db $96, $0A
08E41                           IFNDEF DISABLE_DOOR_POINTERS
08E41 08 23                     	.db $08, $23
08E43                           ENDIF
08E43                           IFDEF DISABLE_DOOR_POINTERS
08E43                           	.db $F5, $08, $23
08E43                           ENDIF
08E43 FF                        	.db $FF
08E44                           include "src/levels/3/3-3/3-3-area2.asm"
08E44                           ; Level 3-3, Area 2
08E44                           
08E44                           LevelData_3_3_Area2:
08E44                           	; Level Header
08E44                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08E44                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08E44                           	levelHeader 3, LevelDirection_Horizontal, 4, 0, LevelMusic_Underground, 0, 3, $0a, $3
08E44 00                        	.db LevelDirection_Horizontal << 7 | 4 << 3 | 0
08E45 00                        	.db %11100000 | $0a
08E46 00                        	.db 3 << 4 | 0 << 2 | 3
08E47                           	IFNDEF LEVEL_ENGINE_UPGRADES
08E47 00                        		.db $3 << 3 | LevelMusic_Underground
08E48                           	ENDIF
08E48                           	IFDEF LEVEL_ENGINE_UPGRADES
08E48                           		.db $3 << 4 | LevelMusic_Underground
08E48                           	ENDIF
08E48                           
08E48 55 01                     	.db $55, $01
08E4A 0B 2D                     	.db $0B, $2D
08E4C 6C 09                     	.db $6C, $09
08E4E                           IFNDEF DISABLE_DOOR_POINTERS
08E4E 08 39                     	.db $08, $39
08E50                           ENDIF
08E50                           IFDEF DISABLE_DOOR_POINTERS
08E50                           	.db $F5, $08, $39
08E50                           ENDIF
08E50 F0 5C                     	.db $F0, $5C
08E52 F0 75                     	.db $F0, $75
08E54 F1 1C                     	.db $F1, $1C
08E56 F1 55                     	.db $F1, $55
08E58 82 A8                     	.db $82, $A8
08E5A 22 05                     	.db $22, $05
08E5C 55 0A                     	.db $55, $0A
08E5E                           IFNDEF DISABLE_DOOR_POINTERS
08E5E 08 46                     	.db $08, $46
08E60                           ENDIF
08E60                           IFDEF DISABLE_DOOR_POINTERS
08E60                           	.db $F5, $08, $46
08E60                           ENDIF
08E60 F1 9C                     	.db $F1, $9C
08E62 F1 D5                     	.db $F1, $D5
08E64 AC 0A                     	.db $AC, $0A
08E66                           IFNDEF DISABLE_DOOR_POINTERS
08E66 08 53                     	.db $08, $53
08E68                           ENDIF
08E68                           IFDEF DISABLE_DOOR_POINTERS
08E68                           	.db $F5, $08, $53
08E68                           ENDIF
08E68 0D 82                     	.db $0D, $82
08E6A 19 81                     	.db $19, $81
08E6C 1A 80                     	.db $1A, $80
08E6E 0B 80                     	.db $0B, $80
08E70 0C 80                     	.db $0C, $80
08E72 F0 5C                     	.db $F0, $5C
08E74 F0 95                     	.db $F0, $95
08E76 F0 FC                     	.db $F0, $FC
08E78 F2                        	.db $F2
08E79 B9 14                     	.db $B9, $14
08E7B                           IFNDEF DISABLE_DOOR_POINTERS
08E7B 08 13                     	.db $08, $13
08E7D                           ENDIF
08E7D                           IFDEF DISABLE_DOOR_POINTERS
08E7D                           	.db $F5, $08, $13
08E7D                           ENDIF
08E7D 11 2A                     	.db $11, $2A
08E7F 03 26                     	.db $03, $26
08E81 05 24                     	.db $05, $24
08E83 0C 28                     	.db $0C, $28
08E85 F0 14                     	.db $F0, $14
08E87 F1 CA                     	.db $F1, $CA
08E89 FF                        	.db $FF
08E8A                           include "src/levels/3/3-3/3-3-area3.asm"
08E8A                           ; Level 3-3, Area 3
08E8A                           
08E8A                           LevelData_3_3_Area3:
08E8A                           	; Level Header
08E8A                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08E8A                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08E8A                           	levelHeader 9, LevelDirection_Vertical, 4, 0, LevelMusic_Underground, 0, 3, $00, $3
08E8A 00                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 0
08E8B 00                        	.db %11100000 | $00
08E8C 00                        	.db 9 << 4 | 0 << 2 | 3
08E8D                           	IFNDEF LEVEL_ENGINE_UPGRADES
08E8D 00                        		.db $3 << 3 | LevelMusic_Underground
08E8E                           	ENDIF
08E8E                           	IFDEF LEVEL_ENGINE_UPGRADES
08E8E                           		.db $3 << 4 | LevelMusic_Underground
08E8E                           	ENDIF
08E8E                           
08E8E 15 AB                     	.db $15, $AB
08E90 18 0A                     	.db $18, $0A
08E92                           IFNDEF DISABLE_DOOR_POINTERS
08E92 08 70                     	.db $08, $70
08E94                           ENDIF
08E94                           IFDEF DISABLE_DOOR_POINTERS
08E94                           	.db $F5, $08, $70
08E94                           ENDIF
08E94 26 80                     	.db $26, $80
08E96 07 80                     	.db $07, $80
08E98 08 80                     	.db $08, $80
08E9A 09 80                     	.db $09, $80
08E9C 0A 80                     	.db $0A, $80
08E9E F0 35                     	.db $F0, $35
08EA0 C4 31                     	.db $C4, $31
08EA2 36 33                     	.db $36, $33
08EA4 3A 32                     	.db $3A, $32
08EA6 34 29                     	.db $34, $29
08EA8 16 33                     	.db $16, $33
08EAA 33 32                     	.db $33, $32
08EAC 36 33                     	.db $36, $33
08EAE 3A 33                     	.db $3A, $33
08EB0 36 33                     	.db $36, $33
08EB2 42 34                     	.db $42, $34
08EB4 12 30                     	.db $12, $30
08EB6 03 29                     	.db $03, $29
08EB8 05 29                     	.db $05, $29
08EBA 06 30                     	.db $06, $30
08EBC 0D 29                     	.db $0D, $29
08EBE 12 30                     	.db $12, $30
08EC0 F0 14                     	.db $F0, $14
08EC2 12 30                     	.db $12, $30
08EC4 04 28                     	.db $04, $28
08EC6 09 32                     	.db $09, $32
08EC8 12 34                     	.db $12, $34
08ECA 1A 29                     	.db $1A, $29
08ECC 16 29                     	.db $16, $29
08ECE 0C 84                     	.db $0C, $84
08ED0 0D 84                     	.db $0D, $84
08ED2 28 83                     	.db $28, $83
08ED4 09 83                     	.db $09, $83
08ED6 24 81                     	.db $24, $81
08ED8 05 81                     	.db $05, $81
08EDA 42 38                     	.db $42, $38
08EDC 0D 0A                     	.db $0D, $0A
08EDE                           IFNDEF DISABLE_DOOR_POINTERS
08EDE 08 40                     	.db $08, $40
08EE0                           ENDIF
08EE0                           IFDEF DISABLE_DOOR_POINTERS
08EE0                           	.db $F5, $08, $40
08EE0                           ENDIF
08EE0 0E A8                     	.db $0E, $A8
08EE2 2E 05                     	.db $2E, $05
08EE4 F1 B7                     	.db $F1, $B7
08EE6 87 2C                     	.db $87, $2C
08EE8 69 AF                     	.db $69, $AF
08EEA F0 54                     	.db $F0, $54
08EEC F1 D6                     	.db $F1, $D6
08EEE 76 AE                     	.db $76, $AE
08EF0 99 A5                     	.db $99, $A5
08EF2 F0 57                     	.db $F0, $57
08EF4 83 00                     	.db $83, $00
08EF6 0C 00                     	.db $0C, $00
08EF8 17 31                     	.db $17, $31
08EFA 16 33                     	.db $16, $33
08EFC 15 35                     	.db $15, $35
08EFE 16 33                     	.db $16, $33
08F00 1D 0A                     	.db $1D, $0A
08F02                           IFNDEF DISABLE_DOOR_POINTERS
08F02 08 43                     	.db $08, $43
08F04                           ENDIF
08F04                           IFDEF DISABLE_DOOR_POINTERS
08F04                           	.db $F5, $08, $43
08F04                           ENDIF
08F04 3D AC                     	.db $3D, $AC
08F06 F0 56                     	.db $F0, $56
08F08 F0 94                     	.db $F0, $94
08F0A F1 B6                     	.db $F1, $B6
08F0C F1 D5                     	.db $F1, $D5
08F0E 16 33                     	.db $16, $33
08F10 45 35                     	.db $45, $35
08F12 15 30                     	.db $15, $30
08F14 0A 30                     	.db $0A, $30
08F16 15 30                     	.db $15, $30
08F18 0A 30                     	.db $0A, $30
08F1A 15 35                     	.db $15, $35
08F1C 46 33                     	.db $46, $33
08F1E 38 82                     	.db $38, $82
08F20 11 A9                     	.db $11, $A9
08F22 07 80                     	.db $07, $80
08F24 09 80                     	.db $09, $80
08F26 3B 84                     	.db $3B, $84
08F28 29 80                     	.db $29, $80
08F2A 0A 80                     	.db $0A, $80
08F2C 0C 80                     	.db $0C, $80
08F2E 0D 80                     	.db $0D, $80
08F30 37 84                     	.db $37, $84
08F32 25 80                     	.db $25, $80
08F34 06 80                     	.db $06, $80
08F36 08 80                     	.db $08, $80
08F38 09 80                     	.db $09, $80
08F3A 32 31                     	.db $32, $31
08F3C F0 14                     	.db $F0, $14
08F3E 3C 82                     	.db $3C, $82
08F40 1B 80                     	.db $1B, $80
08F42 0D 80                     	.db $0D, $80
08F44 3D 31                     	.db $3D, $31
08F46 3C 82                     	.db $3C, $82
08F48 1B 80                     	.db $1B, $80
08F4A 0D 80                     	.db $0D, $80
08F4C 23 0A                     	.db $23, $0A
08F4E                           IFNDEF DISABLE_DOOR_POINTERS
08F4E 08 20                     	.db $08, $20
08F50                           ENDIF
08F50                           IFDEF DISABLE_DOOR_POINTERS
08F50                           	.db $F5, $08, $20
08F50                           ENDIF
08F50 F0 1A                     	.db $F0, $1A
08F52 F1 74                     	.db $F1, $74
08F54 F1 A0                     	.db $F1, $A0
08F56 FF                        	.db $FF
08F57                           include "src/levels/3/3-3/3-3-area4.asm"
08F57                           ; Level 3-3, Area 4
08F57                           
08F57                           LevelData_3_3_Area4:
08F57                           	; Level Header
08F57                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08F57                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08F57                           	levelHeader 6, LevelDirection_Vertical, 4, 0, LevelMusic_Underground, 1, 3, $00, $3
08F57 00                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 0
08F58 00                        	.db %11100000 | $00
08F59 00                        	.db 6 << 4 | 1 << 2 | 3
08F5A                           	IFNDEF LEVEL_ENGINE_UPGRADES
08F5A 00                        		.db $3 << 3 | LevelMusic_Underground
08F5B                           	ENDIF
08F5B                           	IFDEF LEVEL_ENGINE_UPGRADES
08F5B                           		.db $3 << 4 | LevelMusic_Underground
08F5B                           	ENDIF
08F5B                           
08F5B AE 30                     	.db $AE, $30
08F5D 12 0A                     	.db $12, $0A
08F5F                           IFNDEF DISABLE_DOOR_POINTERS
08F5F 08 33                     	.db $08, $33
08F61                           ENDIF
08F61                           IFDEF DISABLE_DOOR_POINTERS
08F61                           	.db $F5, $08, $33
08F61                           ENDIF
08F61 0E AE                     	.db $0E, $AE
08F63 2A 87                     	.db $2A, $87
08F65 0B 87                     	.db $0B, $87
08F67 F0 94                     	.db $F0, $94
08F69 F1 BA                     	.db $F1, $BA
08F6B 2C 31                     	.db $2C, $31
08F6D 1C A9                     	.db $1C, $A9
08F6F 52 AF                     	.db $52, $AF
08F71 04 A4                     	.db $04, $A4
08F73 06 A4                     	.db $06, $A4
08F75 08 A4                     	.db $08, $A4
08F77 0A A4                     	.db $0A, $A4
08F79 F0 D4                     	.db $F0, $D4
08F7B 93 3B                     	.db $93, $3B
08F7D AA 31                     	.db $AA, $31
08F7F 3A 32                     	.db $3A, $32
08F81 F1 5A                     	.db $F1, $5A
08F83 3C 32                     	.db $3C, $32
08F85 68 31                     	.db $68, $31
08F87 36 33                     	.db $36, $33
08F89 12 0A                     	.db $12, $0A
08F8B                           IFNDEF DISABLE_DOOR_POINTERS
08F8B 08 36                     	.db $08, $36
08F8D                           ENDIF
08F8D                           IFDEF DISABLE_DOOR_POINTERS
08F8D                           	.db $F5, $08, $36
08F8D                           ENDIF
08F8D F0 1B                     	.db $F0, $1B
08F8F F0 98                     	.db $F0, $98
08F91 F1 BB                     	.db $F1, $BB
08F93 A6 31                     	.db $A6, $31
08F95 48 31                     	.db $48, $31
08F97 36 33                     	.db $36, $33
08F99 F0 F8                     	.db $F0, $F8
08F9B 66 31                     	.db $66, $31
08F9D 36 33                     	.db $36, $33
08F9F 68 31                     	.db $68, $31
08FA1 F0 3B                     	.db $F0, $3B
08FA3 F1 58                     	.db $F1, $58
08FA5 36 33                     	.db $36, $33
08FA7 66 31                     	.db $66, $31
08FA9 36 33                     	.db $36, $33
08FAB 1A 0A                     	.db $1A, $0A
08FAD                           IFNDEF DISABLE_DOOR_POINTERS
08FAD 08 21                     	.db $08, $21
08FAF                           ENDIF
08FAF                           IFDEF DISABLE_DOOR_POINTERS
08FAF                           	.db $F5, $08, $21
08FAF                           ENDIF
08FAF F0 9B                     	.db $F0, $9B
08FB1 F1 A0                     	.db $F1, $A0
08FB3 FF                        	.db $FF
08FB4                           include "src/levels/3/3-3/3-3-area5.asm"
08FB4                           ; Level 3-3, Area 5
08FB4                           
08FB4                           LevelData_3_3_Area5:
08FB4                           	; Level Header
08FB4                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08FB4                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08FB4                           	levelHeader 3, LevelDirection_Vertical, 4, 0, LevelMusic_Underground, 1, 3, $00, $3
08FB4 00                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 0
08FB5 00                        	.db %11100000 | $00
08FB6 00                        	.db 3 << 4 | 1 << 2 | 3
08FB7                           	IFNDEF LEVEL_ENGINE_UPGRADES
08FB7 00                        		.db $3 << 3 | LevelMusic_Underground
08FB8                           	ENDIF
08FB8                           	IFDEF LEVEL_ENGINE_UPGRADES
08FB8                           		.db $3 << 4 | LevelMusic_Underground
08FB8                           	ENDIF
08FB8                           
08FB8 A0 37                     	.db $A0, $37
08FBA 1B 0A                     	.db $1B, $0A
08FBC                           IFNDEF DISABLE_DOOR_POINTERS
08FBC 08 60                     	.db $08, $60
08FBE                           ENDIF
08FBE                           IFDEF DISABLE_DOOR_POINTERS
08FBE                           	.db $F5, $08, $60
08FBE                           ENDIF
08FBE 27 38                     	.db $27, $38
08FC0 F0 9E                     	.db $F0, $9E
08FC2 F0 F3                     	.db $F0, $F3
08FC4 F1 5E                     	.db $F1, $5E
08FC6 F1 D3                     	.db $F1, $D3
08FC8 26 04                     	.db $26, $04
08FCA 10 37                     	.db $10, $37
08FCC 37 38                     	.db $37, $38
08FCE 26 04                     	.db $26, $04
08FD0 10 37                     	.db $10, $37
08FD2 37 38                     	.db $37, $38
08FD4 26 04                     	.db $26, $04
08FD6 10 37                     	.db $10, $37
08FD8 F0 3E                     	.db $F0, $3E
08FDA F0 B3                     	.db $F0, $B3
08FDC F0 FE                     	.db $F0, $FE
08FDE F1 73                     	.db $F1, $73
08FE0 F1 BE                     	.db $F1, $BE
08FE2 37 38                     	.db $37, $38
08FE4 26 04                     	.db $26, $04
08FE6 10 37                     	.db $10, $37
08FE8 37 38                     	.db $37, $38
08FEA 26 04                     	.db $26, $04
08FEC 10 37                     	.db $10, $37
08FEE 37 38                     	.db $37, $38
08FF0 F0 53                     	.db $F0, $53
08FF2 F0 9E                     	.db $F0, $9E
08FF4 F1 13                     	.db $F1, $13
08FF6 F1 5E                     	.db $F1, $5E
08FF8 F1 D3                     	.db $F1, $D3
08FFA 26 04                     	.db $26, $04
08FFC 10 37                     	.db $10, $37
08FFE 37 38                     	.db $37, $38
09000 26 04                     	.db $26, $04
09002 10 37                     	.db $10, $37
09004 43 0A                     	.db $43, $0A
09006                           IFNDEF DISABLE_DOOR_POINTERS
09006 08 22                     	.db $08, $22
09008                           ENDIF
09008                           IFDEF DISABLE_DOOR_POINTERS
09008                           	.db $F5, $08, $22
09008                           ENDIF
09008 F0 3E                     	.db $F0, $3E
0900A F0 B3                     	.db $F0, $B3
0900C F0 FE                     	.db $F0, $FE
0900E F1 59                     	.db $F1, $59
09010 F1 A0                     	.db $F1, $A0
09012 FF                        	.db $FF
09013                           include "src/levels/3/3-3/3-3-area6.asm"
09013                           ; Level 3-3, Area 6
09013                           
09013                           LevelData_3_3_Area6:
09013                           	; Level Header
09013                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09013                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09013                           	levelHeader 0, LevelDirection_Vertical, 4, 0, LevelMusic_Underground, 1, 3, $00, $3
09013 00                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 0
09014 00                        	.db %11100000 | $00
09015 00                        	.db 0 << 4 | 1 << 2 | 3
09016                           	IFNDEF LEVEL_ENGINE_UPGRADES
09016 00                        		.db $3 << 3 | LevelMusic_Underground
09017                           	ENDIF
09017                           	IFDEF LEVEL_ENGINE_UPGRADES
09017                           		.db $3 << 4 | LevelMusic_Underground
09017                           	ENDIF
09017                           
09017 54 2C                     	.db $54, $2C
09019 0C 2C                     	.db $0C, $2C
0901B 57 32                     	.db $57, $32
0901D 14 0A                     	.db $14, $0A
0901F                           IFNDEF DISABLE_DOOR_POINTERS
0901F 08 50                     	.db $08, $50
09021                           ENDIF
09021                           IFDEF DISABLE_DOOR_POINTERS
09021                           	.db $F5, $08, $50
09021                           ENDIF
09021 F0 41                     	.db $F0, $41
09023 F1 A0                     	.db $F1, $A0
09025 FF                        	.db $FF
09026                           include "src/levels/3/3-3/3-3-area7.asm"
09026                           ; Level 3-3, Area 7
09026                           
09026                           LevelData_3_3_Area7:
09026                           	; Level Header
09026                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09026                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09026                           	levelHeader 4, LevelDirection_Horizontal, 0, 0, LevelMusic_Boss, 0, 0, $1d, $3
09026 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
09027 00                        	.db %11100000 | $1d
09028 00                        	.db 4 << 4 | 0 << 2 | 0
09029                           	IFNDEF LEVEL_ENGINE_UPGRADES
09029 00                        		.db $3 << 3 | LevelMusic_Boss
0902A                           	ENDIF
0902A                           	IFDEF LEVEL_ENGINE_UPGRADES
0902A                           		.db $3 << 4 | LevelMusic_Boss
0902A                           	ENDIF
0902A                           
0902A 3A 10                     	.db $3A, $10
0902C 27 11                     	.db $27, $11
0902E 35 34                     	.db $35, $34
09030 15 34                     	.db $15, $34
09032 15 34                     	.db $15, $34
09034 15 34                     	.db $15, $34
09036 07 0A                     	.db $07, $0A
09038                           IFNDEF DISABLE_DOOR_POINTERS
09038 08 30                     	.db $08, $30
0903A                           ENDIF
0903A                           IFDEF DISABLE_DOOR_POINTERS
0903A                           	.db $F5, $08, $30
0903A                           ENDIF
0903A 15 31                     	.db $15, $31
0903C 08 31                     	.db $08, $31
0903E 0E 24                     	.db $0E, $24
09040 6A 10                     	.db $6A, $10
09042 25 11                     	.db $25, $11
09044 54 40                     	.db $54, $40
09046 05 6B                     	.db $05, $6B
09048 8A 10                     	.db $8A, $10
0904A 2E 11                     	.db $2E, $11
0904C 50 6F                     	.db $50, $6F
0904E F0 08                     	.db $F0, $08
09050 98 10                     	.db $98, $10
09052 60 63                     	.db $60, $63
09054 06 68                     	.db $06, $68
09056 0F 40                     	.db $0F, $40
09058 F2                        	.db $F2
09059 29 10                     	.db $29, $10
0905B 14 10                     	.db $14, $10
0905D 95 42                     	.db $95, $42
0905F F0 4D                     	.db $F0, $4D
09061 F1 6B                     	.db $F1, $6B
09063 F1 E8                     	.db $F1, $E8
09065 F5 08 80                  	.db $F5, $08, $80
09068 FF                        	.db $FF
09069                           include "src/levels/3/3-3/3-3-area8.asm"
09069                           ; Level 3-3, Area 8
09069                           
09069                           LevelData_3_3_Area8:
09069                           	; Level Header
09069                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09069                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09069                           	levelHeader 1, LevelDirection_Horizontal, 5, 2, LevelMusic_Boss, 1, 3, $18, $4
09069 00                        	.db LevelDirection_Horizontal << 7 | 5 << 3 | 2
0906A 00                        	.db %11100000 | $18
0906B 00                        	.db 1 << 4 | 1 << 2 | 3
0906C                           	IFNDEF LEVEL_ENGINE_UPGRADES
0906C 00                        		.db $4 << 3 | LevelMusic_Boss
0906D                           	ENDIF
0906D                           	IFDEF LEVEL_ENGINE_UPGRADES
0906D                           		.db $4 << 4 | LevelMusic_Boss
0906D                           	ENDIF
0906D                           
0906D 6E A4                     	.db $6E, $A4
0906F F0 5C                     	.db $F0, $5C
09071 F0 DD                     	.db $F0, $DD
09073 F1 5C                     	.db $F1, $5C
09075 F1 D9                     	.db $F1, $D9
09077 F2                        	.db $F2
09078 65 A4                     	.db $65, $A4
0907A 2A 33                     	.db $2A, $33
0907C F0 DC                     	.db $F0, $DC
0907E F1 F8                     	.db $F1, $F8
09080 FF                        	.db $FF
09081                           ; -------------------------------
09081                           
09081                           
09081                           ; -------------------------------
09081                           ; World 4
09081                           
09081                           ; World 4-1
09081                           include "src/levels/4/4-1/4-1-area0.asm"
09081                           ; Level 4-1, Area 0
09081                           
09081                           LevelData_4_1_Area0:
09081                           	; Level Header
09081                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09081                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09081                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $0a, $2
09081 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
09082 00                        	.db %11100000 | $0a
09083 00                        	.db 9 << 4 | 0 << 2 | 0
09084                           	IFNDEF LEVEL_ENGINE_UPGRADES
09084 00                        		.db $2 << 3 | LevelMusic_Overworld
09085                           	ENDIF
09085                           	IFDEF LEVEL_ENGINE_UPGRADES
09085                           		.db $2 << 4 | LevelMusic_Overworld
09085                           	ENDIF
09085                           
09085 2C 10                     	.db $2C, $10
09087 1E 11                     	.db $1E, $11
09089 44 39                     	.db $44, $39
0908B 0E 3F                     	.db $0E, $3F
0908D F0 82                     	.db $F0, $82
0908F F1 D6                     	.db $F1, $D6
09091 F6 05                     	.db $F6, $05
09093 9A 10                     	.db $9A, $10
09095 6E 32                     	.db $6E, $32
09097 A8 11                     	.db $A8, $11
09099 1B 10                     	.db $1B, $10
0909B 43 34                     	.db $43, $34
0909D 31 32                     	.db $31, $32
0909F 08 3F                     	.db $08, $3F
090A1 6B 11                     	.db $6B, $11
090A3 68 3F                     	.db $68, $3F
090A5 38 36                     	.db $38, $36
090A7 7C 11                     	.db $7C, $11
090A9 4E 2D                     	.db $4E, $2D
090AB 1E 37                     	.db $1E, $37
090AD 2A 3C                     	.db $2A, $3C
090AF F2                        	.db $F2
090B0 84 26                     	.db $84, $26
090B2 0A 54                     	.db $0A, $54
090B4 18 39                     	.db $18, $39
090B6 72 10                     	.db $72, $10
090B8 16 11                     	.db $16, $11
090BA 45 3A                     	.db $45, $3A
090BC 0A 3B                     	.db $0A, $3B
090BE 32 3F                     	.db $32, $3F
090C0 78 10                     	.db $78, $10
090C2 57 3F                     	.db $57, $3F
090C4 CE 10                     	.db $CE, $10
090C6 37 33                     	.db $37, $33
090C8 1A 31                     	.db $1A, $31
090CA 1B 31                     	.db $1B, $31
090CC 1B 32                     	.db $1B, $32
090CE 1B 33                     	.db $1B, $33
090D0 5E 8B                     	.db $5E, $8B
090D2 0F 8B                     	.db $0F, $8B
090D4 21 11                     	.db $21, $11
090D6 27 26                     	.db $27, $26
090D8 08 21                     	.db $08, $21
090DA 16 F3                     	.db $16, $F3
090DC 0A 32                     	.db $0A, $32
090DE 24 21                     	.db $24, $21
090E0 11 2B                     	.db $11, $2B
090E2 03 F6                     	.db $03, $F6
090E4 10 32                     	.db $10, $32
090E6 0B 23                     	.db $0B, $23
090E8 F5 09 10                  	.db $F5, $09, $10
090EB 1A F2                     	.db $1A, $F2
090ED FF                        	.db $FF090EE                           include "src/levels/4/4-1/4-1-area1.asm"
090EE                           ; Level 4-1, Area 1
090EE                           
090EE                           LevelData_4_1_Area1:
090EE                           	; Level Header
090EE                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
090EE                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
090EE                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Boss, 0, 0, $08, $2
090EE 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
090EF 00                        	.db %11100000 | $08
090F0 00                        	.db 9 << 4 | 0 << 2 | 0
090F1                           	IFNDEF LEVEL_ENGINE_UPGRADES
090F1 00                        		.db $2 << 3 | LevelMusic_Boss
090F2                           	ENDIF
090F2                           	IFDEF LEVEL_ENGINE_UPGRADES
090F2                           		.db $2 << 4 | LevelMusic_Boss
090F2                           	ENDIF
090F2                           
090F2 22 10                     	.db $22, $10
090F4 17 11                     	.db $17, $11
090F6 52 39                     	.db $52, $39
090F8 F1 82                     	.db $F1, $82
090FA B8 10                     	.db $B8, $10
090FC 2C 11                     	.db $2C, $11
090FE F0 C1                     	.db $F0, $C1
09100 F6 01                     	.db $F6, $01
09102 E1 10                     	.db $E1, $10
09104 3B 0F                     	.db $3B, $0F
09106 F1 A2                     	.db $F1, $A2
09108 F6 02                     	.db $F6, $02
0910A A3 10                     	.db $A3, $10
0910C 1A 11                     	.db $1A, $11
0910E 1E 0F                     	.db $1E, $0F
09110 2A 0F                     	.db $2A, $0F
09112 18 0F                     	.db $18, $0F
09114 0D 0F                     	.db $0D, $0F
09116 26 0F                     	.db $26, $0F
09118 F0 81                     	.db $F0, $81
0911A F6 01                     	.db $F6, $01
0911C 99 10                     	.db $99, $10
0911E 1E 11                     	.db $1E, $11
09120 3E 0F                     	.db $3E, $0F
09122 B0 10                     	.db $B0, $10
09124 1A 10                     	.db $1A, $10
09126 4A 0F                     	.db $4A, $0F
09128 28 0F                     	.db $28, $0F
0912A F0 80                     	.db $F0, $80
0912C 83 11                     	.db $83, $11
0912E 17 10                     	.db $17, $10
09130 4D 83                     	.db $4D, $83
09132 0E 83                     	.db $0E, $83
09134 0F 83                     	.db $0F, $83
09136 1C 82                     	.db $1C, $82
09138 1B 81                     	.db $1B, $81
0913A 1A 80                     	.db $1A, $80
0913C F1 4D                     	.db $F1, $4D
0913E F6 02                     	.db $F6, $02
09140 6B 10                     	.db $6B, $10
09142 F0 02                     	.db $F0, $02
09144 F1 40                     	.db $F1, $40
09146 F6 01                     	.db $F6, $01
09148 F2                        	.db $F2
09149 47 10                     	.db $47, $10
0914B 1A 11                     	.db $1A, $11
0914D 4E 80                     	.db $4E, $80
0914F 0F 80                     	.db $0F, $80
09151 35 80                     	.db $35, $80
09153 06 80                     	.db $06, $80
09155 07 80                     	.db $07, $80
09157 F0 A0                     	.db $F0, $A0
09159 F6 02                     	.db $F6, $02
0915B F1 01                     	.db $F1, $01
0915D F1 6C                     	.db $F1, $6C
0915F 65 11                     	.db $65, $11
09161 37 42                     	.db $37, $42
09163 30 80                     	.db $30, $80
09165 F0 22                     	.db $F0, $22
09167 F1 CA                     	.db $F1, $CA
09169 F5 0A 00                  	.db $F5, $0A, $00
0916C FF                        	.db $FF0916D                           
0916D                           ; World 4-2
0916D                           include "src/levels/4/4-2/4-2-area0.asm"
0916D                           ; Level 4-2, Area 0
0916D                           
0916D                           LevelData_4_2_Area0:
0916D                           	; Level Header
0916D                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0916D                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0916D                           	levelHeader 1, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $0a, $2
0916D 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
0916E 00                        	.db %11100000 | $0a
0916F 00                        	.db 1 << 4 | 0 << 2 | 0
09170                           	IFNDEF LEVEL_ENGINE_UPGRADES
09170 00                        		.db $2 << 3 | LevelMusic_Overworld
09171                           	ENDIF
09171                           	IFDEF LEVEL_ENGINE_UPGRADES
09171                           		.db $2 << 4 | LevelMusic_Overworld
09171                           	ENDIF
09171                           
09171 AC 3C                     	.db $AC, $3C
09173 F0 8C                     	.db $F0, $8C
09175 F1 88                     	.db $F1, $88
09177 C8 12                     	.db $C8, $12
09179 F5 0A 10                  	.db $F5, $0A, $10
0917C F1 2A                     	.db $F1, $2A
0917E FF                        	.db $FF
0917F                           include "src/levels/4/4-2/4-2-area1.asm"
0917F                           ; Level 4-2, Area 1
0917F                           
0917F                           LevelData_4_2_Area1:
0917F                           	; Level Header
0917F                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0917F                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0917F                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $08, $2
0917F 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
09180 00                        	.db %11100000 | $08
09181 00                        	.db 9 << 4 | 0 << 2 | 0
09182                           	IFNDEF LEVEL_ENGINE_UPGRADES
09182 00                        		.db $2 << 3 | LevelMusic_Overworld
09183                           	ENDIF
09183                           	IFDEF LEVEL_ENGINE_UPGRADES
09183                           		.db $2 << 4 | LevelMusic_Overworld
09183                           	ENDIF
09183                           
09183 32 10                     	.db $32, $10
09185 14 11                     	.db $14, $11
09187 17 0C                     	.db $17, $0C
09189 F5 0A 01                  	.db $F5, $0A, $01
0918C 0C 10                     	.db $0C, $10
0918E 4F 38                     	.db $4F, $38
09190 2B 34                     	.db $2B, $34
09192 23 33                     	.db $23, $33
09194 07 03                     	.db $07, $03
09196 08 33                     	.db $08, $33
09198 4C 10                     	.db $4C, $10
0919A 78 3F                     	.db $78, $3F
0919C 22 10                     	.db $22, $10
0919E 0A 11                     	.db $0A, $11
091A0 7C 10                     	.db $7C, $10
091A2 68 3F                     	.db $68, $3F
091A4 A0 11                     	.db $A0, $11
091A6 58 3F                     	.db $58, $3F
091A8 26 10                     	.db $26, $10
091AA 74 10                     	.db $74, $10
091AC 12 11                     	.db $12, $11
091AE 58 3F                     	.db $58, $3F
091B0 2C 10                     	.db $2C, $10
091B2 76 10                     	.db $76, $10
091B4 3E 10                     	.db $3E, $10
091B6 38 3F                     	.db $38, $3F
091B8 88 10                     	.db $88, $10
091BA 1A 11                     	.db $1A, $11
091BC 96 3F                     	.db $96, $3F
091BE 74 10                     	.db $74, $10
091C0 52 3F                     	.db $52, $3F
091C2 3C 10                     	.db $3C, $10
091C4 54 10                     	.db $54, $10
091C6 17 11                     	.db $17, $11
091C8 62 3A                     	.db $62, $3A
091CA 19 34                     	.db $19, $34
091CC 1A 34                     	.db $1A, $34
091CE 1B 35                     	.db $1B, $35
091D0 62 10                     	.db $62, $10
091D2 0B 10                     	.db $0B, $10
091D4 1A 11                     	.db $1A, $11
091D6 27 0A                     	.db $27, $0A
091D8                           IFNDEF DISABLE_DOOR_POINTERS
091D8 0A 21                     	.db $0A, $21
091DA                           ENDIF
091DA                           IFDEF DISABLE_DOOR_POINTERS
091DA                           	.db $F5, $0A, $21
091DA                           ENDIF
091DA 26 E2                     	.db $26, $E2
091DC 33 37                     	.db $33, $37
091DE FF                        	.db $FF
091DF                           include "src/levels/4/4-2/4-2-area2.asm"
091DF                           ; Level 4-2, Area 2
091DF                           
091DF                           LevelData_4_2_Area2:
091DF                           	; Level Header
091DF                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
091DF                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
091DF                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $16, $5
091DF 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
091E0 00                        	.db %11100000 | $16
091E1 00                        	.db 9 << 4 | 0 << 2 | 0
091E2                           	IFNDEF LEVEL_ENGINE_UPGRADES
091E2 00                        		.db $5 << 3 | LevelMusic_Overworld
091E3                           	ENDIF
091E3                           	IFDEF LEVEL_ENGINE_UPGRADES
091E3                           		.db $5 << 4 | LevelMusic_Overworld
091E3                           	ENDIF
091E3                           
091E3 4C 10                     	.db $4C, $10
091E5 1E 11                     	.db $1E, $11
091E7 49 26                     	.db $49, $26
091E9 0A 21                     	.db $0A, $21
091EB 0B 21                     	.db $0B, $21
091ED 18 B5                     	.db $18, $B5
091EF 0F 2B                     	.db $0F, $2B
091F1 19 2E                     	.db $19, $2E
091F3 78 0A                     	.db $78, $0A
091F5                           IFNDEF DISABLE_DOOR_POINTERS
091F5 0A 19                     	.db $0A, $19
091F7                           ENDIF
091F7                           IFDEF DISABLE_DOOR_POINTERS
091F7                           	.db $F5, $0A, $19
091F7                           ENDIF
091F7 26 E4                     	.db $26, $E4
091F9 1F 34                     	.db $1F, $34
091FB 42 BD                     	.db $42, $BD
091FD 15 2E                     	.db $15, $2E
091FF 67 29                     	.db $67, $29
09201 0B 29                     	.db $0B, $29
09203 2A 32                     	.db $2A, $32
09205 20 33                     	.db $20, $33
09207 45 B4                     	.db $45, $B4
09209 0D B4                     	.db $0D, $B4
0920B 16 2E                     	.db $16, $2E
0920D 0E 2E                     	.db $0E, $2E
0920F 63 29                     	.db $63, $29
09211 22 33                     	.db $22, $33
09213 3B 52                     	.db $3B, $52
09215 16 52                     	.db $16, $52
09217 0B F2                     	.db $0B, $F2
09219 16 F2                     	.db $16, $F2
0921B 9D 29                     	.db $9D, $29
0921D 12 26                     	.db $12, $26
0921F 10 F2                     	.db $10, $F2
09221 14 30                     	.db $14, $30
09223 14 31                     	.db $14, $31
09225 15 31                     	.db $15, $31
09227 27 31                     	.db $27, $31
09229 0B B4                     	.db $0B, $B4
0922B 1C 2E                     	.db $1C, $2E
0922D 56 29                     	.db $56, $29
0922F 12 10                     	.db $12, $10
09231 0E 10                     	.db $0E, $10
09233 18 11                     	.db $18, $11
09235 19 34                     	.db $19, $34
09237 54 B6                     	.db $54, $B6
09239 25 2E                     	.db $25, $2E
0923B 6F 11                     	.db $6F, $11
0923D 1B 29                     	.db $1B, $29
0923F 0C 10                     	.db $0C, $10
09241 70 B4                     	.db $70, $B4
09243 09 B5                     	.db $09, $B5
09245 11 2E                     	.db $11, $2E
09247 0A 2E                     	.db $0A, $2E
09249 65 34                     	.db $65, $34
0924B 2C 33                     	.db $2C, $33
0924D 52 B8                     	.db $52, $B8
0924F 25 2E                     	.db $25, $2E
09251 80 3F                     	.db $80, $3F
09253 43 08                     	.db $43, $08
09255 18 B5                     	.db $18, $B5
09257 12 F3                     	.db $12, $F3
09259 19 2E                     	.db $19, $2E
0925B 75 10                     	.db $75, $10
0925D 2C 10                     	.db $2C, $10
0925F 18 23                     	.db $18, $23
09261 F5 0A 30                  	.db $F5, $0A, $30
09264 0B 11                     	.db $0B, $11
09266 10 31                     	.db $10, $31
09268 07 42                     	.db $07, $42
0926A 15 46                     	.db $15, $46
0926C 15 F6                     	.db $15, $F6
0926E FF                        	.db $FF
0926F                           include "src/levels/4/4-2/4-2-area3.asm"
0926F                           ; Level 4-2, Area 3
0926F                           
0926F                           LevelData_4_2_Area3:
0926F                           	; Level Header
0926F                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0926F                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0926F                           	levelHeader 3, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $08, $6
0926F 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
09270 00                        	.db %11100000 | $08
09271 00                        	.db 3 << 4 | 0 << 2 | 0
09272                           	IFNDEF LEVEL_ENGINE_UPGRADES
09272 00                        		.db $6 << 3 | LevelMusic_Overworld
09273                           	ENDIF
09273                           	IFDEF LEVEL_ENGINE_UPGRADES
09273                           		.db $6 << 4 | LevelMusic_Overworld
09273                           	ENDIF
09273                           
09273 28 10                     	.db $28, $10
09275 1C 11                     	.db $1C, $11
09277 52 39                     	.db $52, $39
09279 F1 87                     	.db $F1, $87
0927B A6 10                     	.db $A6, $10
0927D 53 0F                     	.db $53, $0F
0927F 12 29                     	.db $12, $29
09281 0D 26                     	.db $0D, $26
09283 3E 7F                     	.db $3E, $7F
09285 F0 4C                     	.db $F0, $4C
09287 F1 CD                     	.db $F1, $CD
09289 C3 29                     	.db $C3, $29
0928B 06 29                     	.db $06, $29
0928D 09 29                     	.db $09, $29
0928F 0C 29                     	.db $0C, $29
09291 3E 77                     	.db $3E, $77
09293 F0 33                     	.db $F0, $33
09295 BE 0B                     	.db $BE, $0B
09297                           IFNDEF DISABLE_DOOR_POINTERS
09297 0A 40                     	.db $0A, $40
09299                           ENDIF
09299                           IFDEF DISABLE_DOOR_POINTERS
09299                           	.db $F5, $0A, $40
09299                           ENDIF
09299 18 2D                     	.db $18, $2D
0929B F0 5B                     	.db $F0, $5B
0929D F0 D1                     	.db $F0, $D1
0929F F1 CA                     	.db $F1, $CA
092A1 FF                        	.db $FF
092A2                           include "src/levels/4/4-2/4-2-area4.asm"
092A2                           ; Level 4-2, Area 4
092A2                           
092A2                           LevelData_4_2_Area4:
092A2                           	; Level Header
092A2                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
092A2                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
092A2                           	levelHeader 2, LevelDirection_Horizontal, 2, 1, LevelMusic_Boss, 0, 0, $0a, $6
092A2 00                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
092A3 00                        	.db %11100000 | $0a
092A4 00                        	.db 2 << 4 | 0 << 2 | 0
092A5                           	IFNDEF LEVEL_ENGINE_UPGRADES
092A5 00                        		.db $6 << 3 | LevelMusic_Boss
092A6                           	ENDIF
092A6                           	IFDEF LEVEL_ENGINE_UPGRADES
092A6                           		.db $6 << 4 | LevelMusic_Boss
092A6                           	ENDIF
092A6                           
092A6 81 13                     	.db $81, $13
092A8                           IFNDEF DISABLE_DOOR_POINTERS
092A8 0A 33                     	.db $0A, $33
092AA                           ENDIF
092AA                           IFDEF DISABLE_DOOR_POINTERS
092AA                           	.db $F5, $0A, $33
092AA                           ENDIF
092AA F0 4C                     	.db $F0, $4C
092AC F0 AB                     	.db $F0, $AB
092AE F1 E8                     	.db $F1, $E8
092B0 F2                        	.db $F2
092B1 A3 3B                     	.db $A3, $3B
092B3 F0 0D                     	.db $F0, $0D
092B5 F0 48                     	.db $F0, $48
092B7 F0 70                     	.db $F0, $70
092B9 F1 F7                     	.db $F1, $F7
092BB F2                        	.db $F2
092BC F0 30                     	.db $F0, $30
092BE F0 77                     	.db $F0, $77
092C0 F0 8F                     	.db $F0, $8F
092C2 F1 10                     	.db $F1, $10
092C4 F1 8A                     	.db $F1, $8A
092C6 F5 0B 00                  	.db $F5, $0B, $00
092C9 FF                        	.db $FF
092CA                           
092CA                           ; World 4-3
092CA                           include "src/levels/4/4-3/4-3-area0.asm"
092CA                           ; Level 4-3, Area 0
092CA                           
092CA                           LevelData_4_3_Area0:
092CA                           	; Level Header
092CA                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
092CA                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
092CA                           	levelHeader 0, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 2, $0a, $2
092CA 00                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
092CB 00                        	.db %11100000 | $0a
092CC 00                        	.db 0 << 4 | 0 << 2 | 2
092CD                           	IFNDEF LEVEL_ENGINE_UPGRADES
092CD 00                        		.db $2 << 3 | LevelMusic_Underground
092CE                           	ENDIF
092CE                           	IFDEF LEVEL_ENGINE_UPGRADES
092CE                           		.db $2 << 4 | LevelMusic_Underground
092CE                           	ENDIF
092CE                           
092CE 4B 14                     	.db $4B, $14
092D0                           IFNDEF DISABLE_DOOR_POINTERS
092D0 0B 11                     	.db $0B, $11
092D2                           ENDIF
092D2                           IFDEF DISABLE_DOOR_POINTERS
092D2                           	.db $F5, $0B, $11
092D2                           ENDIF
092D2 0D A8                     	.db $0D, $A8
092D4 F0 54                     	.db $F0, $54
092D6 F0 D3                     	.db $F0, $D3
092D8 F1 15                     	.db $F1, $15
092DA F1 CA                     	.db $F1, $CA
092DC FF                        	.db $FF
092DD                           include "src/levels/4/4-3/4-3-area1.asm"
092DD                           ; Level 4-3, Area 1
092DD                           
092DD                           LevelData_4_3_Area1:
092DD                           	; Level Header
092DD                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
092DD                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
092DD                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 1, $01, $0
092DD 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
092DE 00                        	.db %11100000 | $01
092DF 00                        	.db 9 << 4 | 0 << 2 | 1
092E0                           	IFNDEF LEVEL_ENGINE_UPGRADES
092E0 00                        		.db $0 << 3 | LevelMusic_Overworld
092E1                           	ENDIF
092E1                           	IFDEF LEVEL_ENGINE_UPGRADES
092E1                           		.db $0 << 4 | LevelMusic_Overworld
092E1                           	ENDIF
092E1                           
092E1 00 8A                     	.db $00, $8A
092E3 2A 10                     	.db $2A, $10
092E5 1D 11                     	.db $1D, $11
092E7 14 2B                     	.db $14, $2B
092E9 14 0F                     	.db $14, $0F
092EB 33 0F                     	.db $33, $0F
092ED 05 0F                     	.db $05, $0F
092EF AA CB                     	.db $AA, $CB
092F1 27 21                     	.db $27, $21
092F3 16 C8                     	.db $16, $C8
092F5 12 26                     	.db $12, $26
092F7 04 21                     	.db $04, $21
092F9 11 C6                     	.db $11, $C6
092FB 14 0B                     	.db $14, $0B
092FD                           IFNDEF DISABLE_DOOR_POINTERS
092FD 0B 00                     	.db $0B, $00
092FF                           ENDIF
092FF                           IFDEF DISABLE_DOOR_POINTERS
092FF                           	.db $F5, $0B, $00
092FF                           ENDIF
092FF AC 10                     	.db $AC, $10
09301 F1 16                     	.db $F1, $16
09303 F6 05                     	.db $F6, $05
09305 E0 11                     	.db $E0, $11
09307 25 10                     	.db $25, $10
09309 D4 10                     	.db $D4, $10
0930B 0C 10                     	.db $0C, $10
0930D 18 11                     	.db $18, $11
0930F F2                        	.db $F2
09310 57 51                     	.db $57, $51
09312 0A 50                     	.db $0A, $50
09314 16 F4                     	.db $16, $F4
09316 14 51                     	.db $14, $51
09318 14 F1                     	.db $14, $F1
0931A 13 50                     	.db $13, $50
0931C 12 F1                     	.db $12, $F1
0931E 0E 64                     	.db $0E, $64
09320 53 18                     	.db $53, $18
09322 09 18                     	.db $09, $18
09324 8B 0A                     	.db $8B, $0A
09326                           IFNDEF DISABLE_DOOR_POINTERS
09326 0B 26                     	.db $0B, $26
09328                           ENDIF
09328                           IFDEF DISABLE_DOOR_POINTERS
09328                           	.db $F5, $0B, $26
09328                           ENDIF
09328 23 69                     	.db $23, $69
0932A F0 68                     	.db $F0, $68
0932C F1 F6                     	.db $F1, $F6
0932E 54 18                     	.db $54, $18
09330 0A 18                     	.db $0A, $18
09332 89 0A                     	.db $89, $0A
09334                           IFNDEF DISABLE_DOOR_POINTERS
09334 0B 36                     	.db $0B, $36
09336                           ENDIF
09336                           IFDEF DISABLE_DOOR_POINTERS
09336                           	.db $F5, $0B, $36
09336                           ENDIF
09336 28 6C                     	.db $28, $6C
09338 F0 88                     	.db $F0, $88
0933A 55 18                     	.db $55, $18
0933C 0B 18                     	.db $0B, $18
0933E 89 0A                     	.db $89, $0A
09340                           IFNDEF DISABLE_DOOR_POINTERS
09340 0B 60                     	.db $0B, $60
09342                           ENDIF
09342                           IFDEF DISABLE_DOOR_POINTERS
09342                           	.db $F5, $0B, $60
09342                           ENDIF
09342 25 6B                     	.db $25, $6B
09344 F0 16                     	.db $F0, $16
09346 F0 A8                     	.db $F0, $A8
09348 51 18                     	.db $51, $18
0934A A1 62                     	.db $A1, $62
0934C F0 D6                     	.db $F0, $D6
0934E FF                        	.db $FF
0934F                           include "src/levels/4/4-3/4-3-area2.asm"
0934F                           ; Level 4-3, Area 2
0934F                           
0934F                           LevelData_4_3_Area2:
0934F                           	; Level Header
0934F                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0934F                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0934F                           	levelHeader 6, LevelDirection_Vertical, 4, 0, LevelMusic_Underground, 0, 0, $00, $1
0934F 00                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 0
09350 00                        	.db %11100000 | $00
09351 00                        	.db 6 << 4 | 0 << 2 | 0
09352                           	IFNDEF LEVEL_ENGINE_UPGRADES
09352 00                        		.db $1 << 3 | LevelMusic_Underground
09353                           	ENDIF
09353                           	IFDEF LEVEL_ENGINE_UPGRADES
09353                           		.db $1 << 4 | LevelMusic_Underground
09353                           	ENDIF
09353                           
09353 44 0A                     	.db $44, $0A
09355                           IFNDEF DISABLE_DOOR_POINTERS
09355 0B 41                     	.db $0B, $41
09357                           ENDIF
09357                           IFDEF DISABLE_DOOR_POINTERS
09357                           	.db $F5, $0B, $41
09357                           ENDIF
09357 21 34                     	.db $21, $34
09359 0A 34                     	.db $0A, $34
0935B 27 31                     	.db $27, $31
0935D 31 35                     	.db $31, $35
0935F 08 36                     	.db $08, $36
09361 21 33                     	.db $21, $33
09363 06 32                     	.db $06, $32
09365 0A 34                     	.db $0A, $34
09367 F0 54                     	.db $F0, $54
09369 24 3A                     	.db $24, $3A
0936B 31 3A                     	.db $31, $3A
0936D 25 35                     	.db $25, $35
0936F 2B 33                     	.db $2B, $33
09371 37 33                     	.db $37, $33
09373 34 34                     	.db $34, $34
09375 31 34                     	.db $31, $34
09377 08 36                     	.db $08, $36
09379 2A 34                     	.db $2A, $34
0937B 11 32                     	.db $11, $32
0937D 1C 32                     	.db $1C, $32
0937F 12 33                     	.db $12, $33
09381 23 34                     	.db $23, $34
09383 31 39                     	.db $31, $39
09385 2C 32                     	.db $2C, $32
09387 39 32                     	.db $39, $32
09389 34 32                     	.db $34, $32
0938B 31 33                     	.db $31, $33
0938D 0B 33                     	.db $0B, $33
0938F 37 31                     	.db $37, $31
09391 0D 31                     	.db $0D, $31
09393 21 78                     	.db $21, $78
09395 1D 31                     	.db $1D, $31
09397 F1 BA                     	.db $F1, $BA
09399 F1 D4                     	.db $F1, $D4
0939B 36 35                     	.db $36, $35
0939D 31 3A                     	.db $31, $3A
0939F 34 3A                     	.db $34, $3A
093A1 31 33                     	.db $31, $33
093A3 33 33                     	.db $33, $33
093A5 1D 31                     	.db $1D, $31
093A7 25 33                     	.db $25, $33
093A9 0C 32                     	.db $0C, $32
093AB 38 33                     	.db $38, $33
093AD 35 33                     	.db $35, $33
093AF 33 32                     	.db $33, $32
093B1 0D 31                     	.db $0D, $31
093B3 21 36                     	.db $21, $36
093B5 2A 32                     	.db $2A, $32
093B7 35 32                     	.db $35, $32
093B9 0C 31                     	.db $0C, $31
093BB 23 32                     	.db $23, $32
093BD 21 31                     	.db $21, $31
093BF 09 33                     	.db $09, $33
093C1 14 0A                     	.db $14, $0A
093C3                           IFNDEF DISABLE_DOOR_POINTERS
093C3 0B 16                     	.db $0B, $16
093C5                           ENDIF
093C5                           IFDEF DISABLE_DOOR_POINTERS
093C5                           	.db $F5, $0B, $16
093C5                           ENDIF
093C5 66 78                     	.db $66, $78
093C7 F1 3B                     	.db $F1, $3B
093C9 F1 C0                     	.db $F1, $C0
093CB FF                        	.db $FF
093CC                           include "src/levels/4/4-3/4-3-area3.asm"
093CC                           ; Level 4-3, Area 3
093CC                           
093CC                           LevelData_4_3_Area3:
093CC                           	; Level Header
093CC                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
093CC                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
093CC                           	levelHeader 6, LevelDirection_Vertical, 4, 0, LevelMusic_Underground, 0, 2, $00, $1
093CC 00                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 0
093CD 00                        	.db %11100000 | $00
093CE 00                        	.db 6 << 4 | 0 << 2 | 2
093CF                           	IFNDEF LEVEL_ENGINE_UPGRADES
093CF 00                        		.db $1 << 3 | LevelMusic_Underground
093D0                           	ENDIF
093D0                           	IFDEF LEVEL_ENGINE_UPGRADES
093D0                           		.db $1 << 4 | LevelMusic_Underground
093D0                           	ENDIF
093D0                           
093D0 37 0A                     	.db $37, $0A
093D2                           IFNDEF DISABLE_DOOR_POINTERS
093D2 0B 42                     	.db $0B, $42
093D4                           ENDIF
093D4                           IFDEF DISABLE_DOOR_POINTERS
093D4                           	.db $F5, $0B, $42
093D4                           ENDIF
093D4 26 33                     	.db $26, $33
093D6 44 3A                     	.db $44, $3A
093D8 31 78                     	.db $31, $78
093DA F0 41                     	.db $F0, $41
093DC F1 BA                     	.db $F1, $BA
093DE F1 C1                     	.db $F1, $C1
093E0 5A 74                     	.db $5A, $74
093E2 37 29                     	.db $37, $29
093E4 99 29                     	.db $99, $29
093E6 F0 77                     	.db $F0, $77
093E8 68 29                     	.db $68, $29
093EA D9 29                     	.db $D9, $29
093EC 88 0A                     	.db $88, $0A
093EE                           IFNDEF DISABLE_DOOR_POINTERS
093EE 0B 50                     	.db $0B, $50
093F0                           ENDIF
093F0                           IFDEF DISABLE_DOOR_POINTERS
093F0                           	.db $F5, $0B, $50
093F0                           ENDIF
093F0 12 29                     	.db $12, $29
093F2 15 35                     	.db $15, $35
093F4 F0 D3                     	.db $F0, $D3
093F6 20 35                     	.db $20, $35
093F8 0A 35                     	.db $0A, $35
093FA 45 35                     	.db $45, $35
093FC 32 3B                     	.db $32, $3B
093FE 41 3A                     	.db $41, $3A
09400 F0 21                     	.db $F0, $21
09402 44 3A                     	.db $44, $3A
09404 41 3A                     	.db $41, $3A
09406 34 3A                     	.db $34, $3A
09408 31 3A                     	.db $31, $3A
0940A 3C 32                     	.db $3C, $32
0940C 38 33                     	.db $38, $33
0940E 34 33                     	.db $34, $33
09410 31 32                     	.db $31, $32
09412 16 09                     	.db $16, $09
09414                           IFNDEF DISABLE_DOOR_POINTERS
09414 0B 17                     	.db $0B, $17
09416                           ENDIF
09416                           IFDEF DISABLE_DOOR_POINTERS
09416                           	.db $F5, $0B, $17
09416                           ENDIF
09416 0B 33                     	.db $0B, $33
09418 21 38                     	.db $21, $38
0941A F1 7A                     	.db $F1, $7A
0941C F1 C0                     	.db $F1, $C0
0941E FF                        	.db $FF
0941F                           include "src/levels/4/4-3/4-3-area4.asm"
0941F                           ; Level 4-3, Area 4
0941F                           
0941F                           LevelData_4_3_Area4:
0941F                           	; Level Header
0941F                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0941F                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0941F                           	levelHeader 3, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 2, $08, $3
0941F 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
09420 00                        	.db %11100000 | $08
09421 00                        	.db 3 << 4 | 0 << 2 | 2
09422                           	IFNDEF LEVEL_ENGINE_UPGRADES
09422 00                        		.db $3 << 3 | LevelMusic_Overworld
09423                           	ENDIF
09423                           	IFDEF LEVEL_ENGINE_UPGRADES
09423                           		.db $3 << 4 | LevelMusic_Overworld
09423                           	ENDIF
09423                           
09423 5D E2                     	.db $5D, $E2
09425 4F E1                     	.db $4F, $E1
09427 91 41                     	.db $91, $41
09429 04 41                     	.db $04, $41
0942B 07 41                     	.db $07, $41
0942D 0A 41                     	.db $0A, $41
0942F 0D 41                     	.db $0D, $41
09431 12 18                     	.db $12, $18
09433 08 18                     	.db $08, $18
09435 5B 0A                     	.db $5B, $0A
09437                           IFNDEF DISABLE_DOOR_POINTERS
09437 0B 20                     	.db $0B, $20
09439                           ENDIF
09439                           IFDEF DISABLE_DOOR_POINTERS
09439                           	.db $F5, $0B, $20
09439                           ENDIF
09439 1F 26                     	.db $1F, $26
0943B 13 6C                     	.db $13, $6C
0943D 6F 2D                     	.db $6F, $2D
0943F 12 41                     	.db $12, $41
09441 05 41                     	.db $05, $41
09443 08 41                     	.db $08, $41
09445 0B 41                     	.db $0B, $41
09447 0E 41                     	.db $0E, $41
09449 13 18                     	.db $13, $18
0944B 09 18                     	.db $09, $18
0944D 58 0A                     	.db $58, $0A
0944F                           IFNDEF DISABLE_DOOR_POINTERS
0944F 0B 30                     	.db $0B, $30
09451                           ENDIF
09451                           IFDEF DISABLE_DOOR_POINTERS
09451                           	.db $F5, $0B, $30
09451                           ENDIF
09451 11 22                     	.db $11, $22
09453 10 6C                     	.db $10, $6C
09455 FF                        	.db $FF
09456                           include "src/levels/4/4-3/4-3-area5.asm"
09456                           ; Level 4-3, Area 5
09456                           
09456                           LevelData_4_3_Area5:
09456                           	; Level Header
09456                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09456                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09456                           	levelHeader 0, LevelDirection_Vertical, 4, 0, LevelMusic_Underground, 0, 2, $00, $1
09456 00                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 0
09457 00                        	.db %11100000 | $00
09458 00                        	.db 0 << 4 | 0 << 2 | 2
09459                           	IFNDEF LEVEL_ENGINE_UPGRADES
09459 00                        		.db $1 << 3 | LevelMusic_Underground
0945A                           	ENDIF
0945A                           	IFDEF LEVEL_ENGINE_UPGRADES
0945A                           		.db $1 << 4 | LevelMusic_Underground
0945A                           	ENDIF
0945A                           
0945A 56 32                     	.db $56, $32
0945C 34 36                     	.db $34, $36
0945E 27 0A                     	.db $27, $0A
09460                           IFNDEF DISABLE_DOOR_POINTERS
09460 0B 33                     	.db $0B, $33
09462                           ENDIF
09462                           IFDEF DISABLE_DOOR_POINTERS
09462                           	.db $F5, $0B, $33
09462                           ENDIF
09462 21 3D                     	.db $21, $3D
09464 F0 21                     	.db $F0, $21
09466 F1 A0                     	.db $F1, $A0
09468 FF                        	.db $FF
09469                           include "src/levels/4/4-3/4-3-area6.asm"
09469                           ; Level 4-3, Area 6
09469                           
09469                           LevelData_4_3_Area6:
09469                           	; Level Header
09469                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09469                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09469                           	levelHeader 1, LevelDirection_Horizontal, 4, 0, LevelMusic_Boss, 0, 0, $0a, $3
09469 00                        	.db LevelDirection_Horizontal << 7 | 4 << 3 | 0
0946A 00                        	.db %11100000 | $0a
0946B 00                        	.db 1 << 4 | 0 << 2 | 0
0946C                           	IFNDEF LEVEL_ENGINE_UPGRADES
0946C 00                        		.db $3 << 3 | LevelMusic_Boss
0946D                           	ENDIF
0946D                           	IFDEF LEVEL_ENGINE_UPGRADES
0946D                           		.db $3 << 4 | LevelMusic_Boss
0946D                           	ENDIF
0946D                           
0946D 62 3D                     	.db $62, $3D
0946F 46 0A                     	.db $46, $0A
09471                           IFNDEF DISABLE_DOOR_POINTERS
09471 0B 18                     	.db $0B, $18
09473                           ENDIF
09473                           IFDEF DISABLE_DOOR_POINTERS
09473                           	.db $F5, $0B, $18
09473                           ENDIF
09473 22 3D                     	.db $22, $3D
09475 F0 50                     	.db $F0, $50
09477 90 34                     	.db $90, $34
09479 51 42                     	.db $51, $42
0947B 10 34                     	.db $10, $34
0947D F0 B7                     	.db $F0, $B7
0947F F0 EF                     	.db $F0, $EF
09481 F1 2E                     	.db $F1, $2E
09483 F1 6F                     	.db $F1, $6F
09485 F1 97                     	.db $F1, $97
09487 F1 CA                     	.db $F1, $CA
09489 F5 0B 70                  	.db $F5, $0B, $70
0948C FF                        	.db $FF
0948D                           include "src/levels/4/4-3/4-3-area7.asm"
0948D                           ; Level 4-3, Area 7
0948D                           
0948D                           LevelData_4_3_Area7:
0948D                           	; Level Header
0948D                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0948D                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0948D                           	levelHeader 0, LevelDirection_Vertical, 5, 2, LevelMusic_Boss, 3, 3, $15, $2
0948D 00                        	.db LevelDirection_Vertical << 7 | 5 << 3 | 2
0948E 00                        	.db %11100000 | $15
0948F 00                        	.db 0 << 4 | 3 << 2 | 3
09490                           	IFNDEF LEVEL_ENGINE_UPGRADES
09490 00                        		.db $2 << 3 | LevelMusic_Boss
09491                           	ENDIF
09491                           	IFDEF LEVEL_ENGINE_UPGRADES
09491                           		.db $2 << 4 | LevelMusic_Boss
09491                           	ENDIF
09491                           
09491 54 32                     	.db $54, $32
09493 09 32                     	.db $09, $32
09495 07 00                     	.db $07, $00
09497 08 00                     	.db $08, $00
09499 43 31                     	.db $43, $31
0949B 0B 31                     	.db $0B, $31
0949D 32 40                     	.db $32, $40
0949F 07 00                     	.db $07, $00
094A1 08 00                     	.db $08, $00
094A3 09 00                     	.db $09, $00
094A5 0D 40                     	.db $0D, $40
094A7 F0 35                     	.db $F0, $35
094A9 F6 04                     	.db $F6, $04
094AB F0 53                     	.db $F0, $53
094AD F0 D5                     	.db $F0, $D5
094AF F6 02                     	.db $F6, $02
094B1 F0 F5                     	.db $F0, $F5
094B3 F6 04                     	.db $F6, $04
094B5 F1 13                     	.db $F1, $13
094B7 F1 95                     	.db $F1, $95
094B9 F6 05                     	.db $F6, $05
094BB F1 A0                     	.db $F1, $A0
094BD F6 02                     	.db $F6, $02
094BF F1 C0                     	.db $F1, $C0
094C1 F6 04                     	.db $F6, $04
094C3 FF                        	.db $FF
094C4                           ; -------------------------------
094C4                           
094C4                           
094C4                           ; -------------------------------
094C4                           ; World 5
094C4                           
094C4                           ; World 5-1
094C4                           include "src/levels/5/5-1/5-1-area0.asm"
094C4                           ; Level 5-1, Area 0
094C4                           
094C4                           LevelData_5_1_Area0:
094C4                           	; Level Header
094C4                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
094C4                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
094C4                           	levelHeader 2, LevelDirection_Horizontal, 0, 1, LevelMusic_Overworld, 0, 0, $02, $0
094C4 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 1
094C5 00                        	.db %11100000 | $02
094C6 00                        	.db 2 << 4 | 0 << 2 | 0
094C7                           	IFNDEF LEVEL_ENGINE_UPGRADES
094C7 00                        		.db $0 << 3 | LevelMusic_Overworld
094C8                           	ENDIF
094C8                           	IFDEF LEVEL_ENGINE_UPGRADES
094C8                           		.db $0 << 4 | LevelMusic_Overworld
094C8                           	ENDIF
094C8                           
094C8 00 86                     	.db $00, $86
094CA 01 86                     	.db $01, $86
094CC 02 86                     	.db $02, $86
094CE 1B 10                     	.db $1B, $10
094D0 25 16                     	.db $25, $16
094D2 1C C5                     	.db $1C, $C5
094D4 E8 16                     	.db $E8, $16
094D6 4A C8                     	.db $4A, $C8
094D8 3C 0B                     	.db $3C, $0B
094DA                           IFNDEF DISABLE_DOOR_POINTERS
094DA 0C 10                     	.db $0C, $10
094DC                           ENDIF
094DC                           IFDEF DISABLE_DOOR_POINTERS
094DC                           	.db $F5, $0C, $10
094DC                           ENDIF
094DC 2B 82                     	.db $2B, $82
094DE 0C 82                     	.db $0C, $82
094E0 0D 82                     	.db $0D, $82
094E2 0E 82                     	.db $0E, $82
094E4 0F 82                     	.db $0F, $82
094E6 F1 48                     	.db $F1, $48
094E8 41 10                     	.db $41, $10
094EA 0E 10                     	.db $0E, $10
094EC 13 11                     	.db $13, $11
094EE 53 C8                     	.db $53, $C8
094F0 50 82                     	.db $50, $82
094F2 01 82                     	.db $01, $82
094F4 04 82                     	.db $04, $82
094F6 05 82                     	.db $05, $82
094F8 06 82                     	.db $06, $82
094FA 09 82                     	.db $09, $82
094FC 0A 82                     	.db $0A, $82
094FE 0B 82                     	.db $0B, $82
09500 0C 82                     	.db $0C, $82
09502 0D 82                     	.db $0D, $82
09504 F4                        	.db $F4
09505 F2 3C                     	.db $F2, $3C
09507 16 F2                     	.db $16, $F2
09509 37 16                     	.db $37, $16
0950B FF                        	.db $FF
0950C                           include "src/levels/5/5-1/5-1-area1.asm"
0950C                           ; Level 5-1, Area 1
0950C                           
0950C                           LevelData_5_1_Area1:
0950C                           	; Level Header
0950C                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0950C                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0950C                           	levelHeader 8, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 0, $0a, $2
0950C 00                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
0950D 00                        	.db %11100000 | $0a
0950E 00                        	.db 8 << 4 | 0 << 2 | 0
0950F                           	IFNDEF LEVEL_ENGINE_UPGRADES
0950F 00                        		.db $2 << 3 | LevelMusic_Underground
09510                           	ENDIF
09510                           	IFDEF LEVEL_ENGINE_UPGRADES
09510                           		.db $2 << 4 | LevelMusic_Underground
09510                           	ENDIF
09510                           
09510 83 13                     	.db $83, $13
09512                           IFNDEF DISABLE_DOOR_POINTERS
09512 0C 01                     	.db $0C, $01
09514                           ENDIF
09514                           IFDEF DISABLE_DOOR_POINTERS
09514                           	.db $F5, $0C, $01
09514                           ENDIF
09514 1B 2A                     	.db $1B, $2A
09516 0D 26                     	.db $0D, $26
09518 3E 54                     	.db $3E, $54
0951A F0 71                     	.db $F0, $71
0951C F1 D4                     	.db $F1, $D4
0951E 73 FC                     	.db $73, $FC
09520 38 87                     	.db $38, $87
09522 09 87                     	.db $09, $87
09524 0A 87                     	.db $0A, $87
09526 35 84                     	.db $35, $84
09528 06 84                     	.db $06, $84
0952A 07 84                     	.db $07, $84
0952C F0 68                     	.db $F0, $68
0952E 90 FF                     	.db $90, $FF
09530 F2                        	.db $F2
09531 40 FF                     	.db $40, $FF
09533 62 84                     	.db $62, $84
09535 03 84                     	.db $03, $84
09537 04 84                     	.db $04, $84
09539 05 84                     	.db $05, $84
0953B 06 84                     	.db $06, $84
0953D 07 84                     	.db $07, $84
0953F 90 FF                     	.db $90, $FF
09541 2D 88                     	.db $2D, $88
09543 0E 88                     	.db $0E, $88
09545 0F 88                     	.db $0F, $88
09547 24 86                     	.db $24, $86
09549 05 86                     	.db $05, $86
0954B 06 86                     	.db $06, $86
0954D 07 86                     	.db $07, $86
0954F B0 FF                     	.db $B0, $FF
09551 20 88                     	.db $20, $88
09553 01 88                     	.db $01, $88
09555 4F 84                     	.db $4F, $84
09557 79 2B                     	.db $79, $2B
09559 11 27                     	.db $11, $27
0955B 02 26                     	.db $02, $26
0955D 10 FF                     	.db $10, $FF
0955F 00 81                     	.db $00, $81
09561 01 81                     	.db $01, $81
09563 02 81                     	.db $02, $81
09565 2D 88                     	.db $2D, $88
09567 0E 88                     	.db $0E, $88
09569 0F 88                     	.db $0F, $88
0956B 40 84                     	.db $40, $84
0956D 01 84                     	.db $01, $84
0956F 02 84                     	.db $02, $84
09571 03 84                     	.db $03, $84
09573 26 82                     	.db $26, $82
09575 07 82                     	.db $07, $82
09577 08 82                     	.db $08, $82
09579 09 82                     	.db $09, $82
0957B 70 FF                     	.db $70, $FF
0957D 23 88                     	.db $23, $88
0957F 04 88                     	.db $04, $88
09581 05 88                     	.db $05, $88
09583 9A 2D                     	.db $9A, $2D
09585 36 00                     	.db $36, $00
09587 0A 00                     	.db $0A, $00
09589 10 F0                     	.db $10, $F0
0958B 32 80                     	.db $32, $80
0958D 03 82                     	.db $03, $82
0958F 04 80                     	.db $04, $80
09591 08 81                     	.db $08, $81
09593 4E 0B                     	.db $4E, $0B
09595                           IFNDEF DISABLE_DOOR_POINTERS
09595 0C 20                     	.db $0C, $20
09597                           ENDIF
09597                           IFDEF DISABLE_DOOR_POINTERS
09597                           	.db $F5, $0C, $20
09597                           ENDIF
09597 14 26                     	.db $14, $26
09599 06 53                     	.db $06, $53
0959B F0 34                     	.db $F0, $34
0959D F0 CD                     	.db $F0, $CD
0959F F0 F4                     	.db $F0, $F4
095A1 F1 4D                     	.db $F1, $4D
095A3 F1 74                     	.db $F1, $74
095A5 F1 92                     	.db $F1, $92
095A7 FF                        	.db $FF
095A8                           include "src/levels/5/5-1/5-1-area2.asm"
095A8                           ; Level 5-1, Area 2
095A8                           
095A8                           LevelData_5_1_Area2:
095A8                           	; Level Header
095A8                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
095A8                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
095A8                           	levelHeader 1, LevelDirection_Horizontal, 2, 1, LevelMusic_Boss, 0, 3, $10, $2
095A8 00                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
095A9 00                        	.db %11100000 | $10
095AA 00                        	.db 1 << 4 | 0 << 2 | 3
095AB                           	IFNDEF LEVEL_ENGINE_UPGRADES
095AB 00                        		.db $2 << 3 | LevelMusic_Boss
095AC                           	ENDIF
095AC                           	IFDEF LEVEL_ENGINE_UPGRADES
095AC                           		.db $2 << 4 | LevelMusic_Boss
095AC                           	ENDIF
095AC                           
095AC 6B 32                     	.db $6B, $32
095AE 51 0B                     	.db $51, $0B
095B0                           IFNDEF DISABLE_DOOR_POINTERS
095B0 0C 18                     	.db $0C, $18
095B2                           ENDIF
095B2                           IFDEF DISABLE_DOOR_POINTERS
095B2                           	.db $F5, $0C, $18
095B2                           ENDIF
095B2 D1 00                     	.db $D1, $00
095B4 F0 0F                     	.db $F0, $0F
095B6 F0 B0                     	.db $F0, $B0
095B8 F1 AA                     	.db $F1, $AA
095BA F5 0D 00                  	.db $F5, $0D, $00
095BD FF                        	.db $FF
095BE                           
095BE                           ; World 5-2
095BE                           include "src/levels/5/5-2/5-2-area0.asm"
095BE                           ; Level 5-2, Area 0
095BE                           
095BE                           LevelData_5_2_Area0:
095BE                           	; Level Header
095BE                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
095BE                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
095BE                           	levelHeader 1, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 0, $0a, $2
095BE 00                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
095BF 00                        	.db %11100000 | $0a
095C0 00                        	.db 1 << 4 | 0 << 2 | 0
095C1                           	IFNDEF LEVEL_ENGINE_UPGRADES
095C1 00                        		.db $2 << 3 | LevelMusic_Underground
095C2                           	ENDIF
095C2                           	IFDEF LEVEL_ENGINE_UPGRADES
095C2                           		.db $2 << 4 | LevelMusic_Underground
095C2                           	ENDIF
095C2                           
095C2 F0 5B                     	.db $F0, $5B
095C4 F2                        	.db $F2
095C5 F0 11                     	.db $F0, $11
095C7 F1 AA                     	.db $F1, $AA
095C9 0C A9                     	.db $0C, $A9
095CB F5 0D 10                  	.db $F5, $0D, $10
095CE FF                        	.db $FF
095CF                           include "src/levels/5/5-2/5-2-area1.asm"
095CF                           ; Level 5-2, Area 1
095CF                           
095CF                           LevelData_5_2_Area1:
095CF                           	; Level Header
095CF                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
095CF                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
095CF                           	levelHeader 9, LevelDirection_Horizontal, 0, 1, LevelMusic_Overworld, 0, 0, $00, $0
095CF 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 1
095D0 00                        	.db %11100000 | $00
095D1 00                        	.db 9 << 4 | 0 << 2 | 0
095D2                           	IFNDEF LEVEL_ENGINE_UPGRADES
095D2 00                        		.db $0 << 3 | LevelMusic_Overworld
095D3                           	ENDIF
095D3                           	IFDEF LEVEL_ENGINE_UPGRADES
095D3                           		.db $0 << 4 | LevelMusic_Overworld
095D3                           	ENDIF
095D3                           
095D3 24 10                     	.db $24, $10
095D5 17 11                     	.db $17, $11
095D7 59 2A                     	.db $59, $2A
095D9 0A 52                     	.db $0A, $52
095DB 18 C5                     	.db $18, $C5
095DD 13 A4                     	.db $13, $A4
095DF 33 05                     	.db $33, $05
095E1 F5 0D 01                  	.db $F5, $0D, $01
095E4 52 10                     	.db $52, $10
095E6 09 16                     	.db $09, $16
095E8 27 16                     	.db $27, $16
095EA 08 16                     	.db $08, $16
095EC 1B 16                     	.db $1B, $16
095EE F1 21                     	.db $F1, $21
095F0 AD 16                     	.db $AD, $16
095F2 0F 16                     	.db $0F, $16
095F4 15 10                     	.db $15, $10
095F6 0E 16                     	.db $0E, $16
095F8 88 21                     	.db $88, $21
095FA F1 A2                     	.db $F1, $A2
095FC 5D 2B                     	.db $5D, $2B
095FE 3C 10                     	.db $3C, $10
09600 1F 11                     	.db $1F, $11
09602 17 06                     	.db $17, $06
09604 F5 0D 40                  	.db $F5, $0D, $40
09607 15 2A                     	.db $15, $2A
09609 08 22                     	.db $08, $22
0960B 09 22                     	.db $09, $22
0960D 0A 21                     	.db $0A, $21
0960F F1 88                     	.db $F1, $88
09611 F1 A0                     	.db $F1, $A0
09613 C7 11                     	.db $C7, $11
09615 0B 10                     	.db $0B, $10
09617 1A 10                     	.db $1A, $10
09619 F2                        	.db $F2
0961A 18 16                     	.db $18, $16
0961C 1B 16                     	.db $1B, $16
0961E 2F 11                     	.db $2F, $11
09620 22 16                     	.db $22, $16
09622 14 16                     	.db $14, $16
09624 5C 2A                     	.db $5C, $2A
09626 F0 01                     	.db $F0, $01
09628 F1 28                     	.db $F1, $28
0962A F1 60                     	.db $F1, $60
0962C F1 A8                     	.db $F1, $A8
0962E F1 E2                     	.db $F1, $E2
09630 49 16                     	.db $49, $16
09632 22 10                     	.db $22, $10
09634 05 16                     	.db $05, $16
09636 5F 86                     	.db $5F, $86
09638 55 81                     	.db $55, $81
0963A 09 81                     	.db $09, $81
0963C F0 48                     	.db $F0, $48
0963E F1 62                     	.db $F1, $62
09640 F1 C8                     	.db $F1, $C8
09642 3C 10                     	.db $3C, $10
09644 1F 11                     	.db $1F, $11
09646 21 16                     	.db $21, $16
09648 05 16                     	.db $05, $16
0964A 0B 21                     	.db $0B, $21
0964C 0C 2A                     	.db $0C, $2A
0964E 0D 21                     	.db $0D, $21
09650 0E 2D                     	.db $0E, $2D
09652 1A C4                     	.db $1A, $C4
09654 43 85                     	.db $43, $85
09656 15 84                     	.db $15, $84
09658 21 82                     	.db $21, $82
0965A F0 E2                     	.db $F0, $E2
0965C 95 22                     	.db $95, $22
0965E 06 28                     	.db $06, $28
09660 F1 88                     	.db $F1, $88
09662 9D 8A                     	.db $9D, $8A
09664 0E 8A                     	.db $0E, $8A
09666 0F 8A                     	.db $0F, $8A
09668 22 10                     	.db $22, $10
0966A 25 11                     	.db $25, $11
0966C 1B 16                     	.db $1B, $16
0966E 27 12                     	.db $27, $12
09670 F5 0D 23                  	.db $F5, $0D, $23
09673 F0 01                     	.db $F0, $01
09675 FF                        	.db $FF
09676                           include "src/levels/5/5-2/5-2-area2.asm"
09676                           ; Level 5-2, Area 2
09676                           
09676                           LevelData_5_2_Area2:
09676                           	; Level Header
09676                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09676                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09676                           	levelHeader 3, LevelDirection_Vertical, 0, 1, LevelMusic_Overworld, 0, 0, $13, $5
09676 00                        	.db LevelDirection_Vertical << 7 | 0 << 3 | 1
09677 00                        	.db %11100000 | $13
09678 00                        	.db 3 << 4 | 0 << 2 | 0
09679                           	IFNDEF LEVEL_ENGINE_UPGRADES
09679 00                        		.db $5 << 3 | LevelMusic_Overworld
0967A                           	ENDIF
0967A                           	IFDEF LEVEL_ENGINE_UPGRADES
0967A                           		.db $5 << 4 | LevelMusic_Overworld
0967A                           	ENDIF
0967A                           
0967A 0F 85                     	.db $0F, $85
0967C 48 0C                     	.db $48, $0C
0967E 4E 0B                     	.db $4E, $0B
09680                           IFNDEF DISABLE_DOOR_POINTERS
09680 0D 30                     	.db $0D, $30
09682                           ENDIF
09682                           IFDEF DISABLE_DOOR_POINTERS
09682                           	.db $F5, $0D, $30
09682                           ENDIF
09682 29 E2                     	.db $29, $E2
09684 0C 84                     	.db $0C, $84
09686 0D 84                     	.db $0D, $84
09688 32 10                     	.db $32, $10
0968A F0 DE                     	.db $F0, $DE
0968C 24 11                     	.db $24, $11
0968E 2F 85                     	.db $2F, $85
09690 1A 10                     	.db $1A, $10
09692 52 E1                     	.db $52, $E1
09694 F0 53                     	.db $F0, $53
09696 F1 1E                     	.db $F1, $1E
09698 78 0D                     	.db $78, $0D
0969A 1D 8C                     	.db $1D, $8C
0969C 23 10                     	.db $23, $10
0969E 24 11                     	.db $24, $11
096A0 39 10                     	.db $39, $10
096A2 0C 83                     	.db $0C, $83
096A4 12 E1                     	.db $12, $E1
096A6 55 E1                     	.db $55, $E1
096A8 52 10                     	.db $52, $10
096AA 6A 10                     	.db $6A, $10
096AC 25 11                     	.db $25, $11
096AE 10 E7                     	.db $10, $E7
096B0 08 03                     	.db $08, $03
096B2 09 E4                     	.db $09, $E4
096B4 F5 0D 19                  	.db $F5, $0D, $19
096B7 F4                        	.db $F4
096B8 46 0C                     	.db $46, $0C
096BA F3                        	.db $F3
096BB 06 0D                     	.db $06, $0D
096BD FF                        	.db $FF
096BE                           include "src/levels/5/5-2/5-2-area3.asm"
096BE                           ; Level 5-2, Area 3
096BE                           
096BE                           LevelData_5_2_Area3:
096BE                           	; Level Header
096BE                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
096BE                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
096BE                           	levelHeader 6, LevelDirection_Vertical, 0, 1, LevelMusic_Underground, 0, 0, $15, $5
096BE 00                        	.db LevelDirection_Vertical << 7 | 0 << 3 | 1
096BF 00                        	.db %11100000 | $15
096C0 00                        	.db 6 << 4 | 0 << 2 | 0
096C1                           	IFNDEF LEVEL_ENGINE_UPGRADES
096C1 00                        		.db $5 << 3 | LevelMusic_Underground
096C2                           	ENDIF
096C2                           	IFDEF LEVEL_ENGINE_UPGRADES
096C2                           		.db $5 << 4 | LevelMusic_Underground
096C2                           	ENDIF
096C2                           
096C2 14 10                     	.db $14, $10
096C4 2C 11                     	.db $2C, $11
096C6 11 0B                     	.db $11, $0B
096C8                           IFNDEF DISABLE_DOOR_POINTERS
096C8 0D 20                     	.db $0D, $20
096CA                           ENDIF
096CA                           IFDEF DISABLE_DOOR_POINTERS
096CA                           	.db $F5, $0D, $20
096CA                           ENDIF
096CA 22 6B                     	.db $22, $6B
096CC 07 01                     	.db $07, $01
096CE 36 10                     	.db $36, $10
096D0 29 11                     	.db $29, $11
096D2 32 70                     	.db $32, $70
096D4 0D 70                     	.db $0D, $70
096D6 12 8E                     	.db $12, $8E
096D8 0D 8E                     	.db $0D, $8E
096DA E3 70                     	.db $E3, $70
096DC 0C 70                     	.db $0C, $70
096DE 2B 70                     	.db $2B, $70
096E0 1B 83                     	.db $1B, $83
096E2 4B 8F                     	.db $4B, $8F
096E4 17 70                     	.db $17, $70
096E6 17 86                     	.db $17, $86
096E8 18 70                     	.db $18, $70
096EA 18 87                     	.db $18, $87
096EC 04 70                     	.db $04, $70
096EE 14 81                     	.db $14, $81
096F0 3A 70                     	.db $3A, $70
096F2 F0 16                     	.db $F0, $16
096F4 1A 89                     	.db $1A, $89
096F6 74 70                     	.db $74, $70
096F8 0B 82                     	.db $0B, $82
096FA 14 81                     	.db $14, $81
096FC 15 70                     	.db $15, $70
096FE 36 70                     	.db $36, $70
09700 16 85                     	.db $16, $85
09702 F1 57                     	.db $F1, $57
09704 99 70                     	.db $99, $70
09706 19 88                     	.db $19, $88
09708 48 70                     	.db $48, $70
0970A 18 83                     	.db $18, $83
0970C F2                        	.db $F2
0970D F0 96                     	.db $F0, $96
0970F F0 D5                     	.db $F0, $D5
09711 F1 14                     	.db $F1, $14
09713 F2                        	.db $F2
09714 3E 70                     	.db $3E, $70
09716 1E 85                     	.db $1E, $85
09718 2D 81                     	.db $2D, $81
0971A 2D 0B                     	.db $2D, $0B
0971C                           IFNDEF DISABLE_DOOR_POINTERS
0971C 0D 50                     	.db $0D, $50
0971E                           ENDIF
0971E                           IFDEF DISABLE_DOOR_POINTERS
0971E                           	.db $F5, $0D, $50
0971E                           ENDIF
0971E 11 70                     	.db $11, $70
09720 14 60                     	.db $14, $60
09722 07 60                     	.db $07, $60
09724 0A 60                     	.db $0A, $60
09726 24 F7                     	.db $24, $F7
09728 F1 56                     	.db $F1, $56
0972A FF                        	.db $FF
0972B                           include "src/levels/5/5-2/5-2-area4.asm"
0972B                           ; Level 5-2, Area 4
0972B                           
0972B                           LevelData_5_2_Area4:
0972B                           	; Level Header
0972B                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0972B                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0972B                           	levelHeader 1, LevelDirection_Vertical, 3, 0, LevelMusic_Underground, 0, 1, $03, $0
0972B 00                        	.db LevelDirection_Vertical << 7 | 3 << 3 | 0
0972C 00                        	.db %11100000 | $03
0972D 00                        	.db 1 << 4 | 0 << 2 | 1
0972E                           	IFNDEF LEVEL_ENGINE_UPGRADES
0972E 00                        		.db $0 << 3 | LevelMusic_Underground
0972F                           	ENDIF
0972F                           	IFDEF LEVEL_ENGINE_UPGRADES
0972F                           		.db $0 << 4 | LevelMusic_Underground
0972F                           	ENDIF
0972F                           
0972F F5 0D 13                  	.db $F5, $0D, $13
09732 64 31                     	.db $64, $31
09734 0A 31                     	.db $0A, $31
09736 13 30                     	.db $13, $30
09738 06 30                     	.db $06, $30
0973A 09 30                     	.db $09, $30
0973C 0C 30                     	.db $0C, $30
0973E 35 35                     	.db $35, $35
09740 28 25                     	.db $28, $25
09742 F0 44                     	.db $F0, $44
09744 F0 65                     	.db $F0, $65
09746 F0 86                     	.db $F0, $86
09748 F0 A7                     	.db $F0, $A7
0974A F1 86                     	.db $F1, $86
0974C F1 A8                     	.db $F1, $A8
0974E F1 C4                     	.db $F1, $C4
09750 45 35                     	.db $45, $35
09752 23 32                     	.db $23, $32
09754 0A 32                     	.db $0A, $32
09756 25 21                     	.db $25, $21
09758 08 26                     	.db $08, $26
0975A F0 02                     	.db $F0, $02
0975C F0 21                     	.db $F0, $21
0975E F0 C0                     	.db $F0, $C0
09760 FF                        	.db $FF
09761                           include "src/levels/5/5-2/5-2-area5.asm"
09761                           ; Level 5-2, Area 5
09761                           
09761                           LevelData_5_2_Area5:
09761                           	; Level Header
09761                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09761                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09761                           	levelHeader 2, LevelDirection_Horizontal, 0, 1, LevelMusic_Boss, 0, 0, $0a, $2
09761 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 1
09762 00                        	.db %11100000 | $0a
09763 00                        	.db 2 << 4 | 0 << 2 | 0
09764                           	IFNDEF LEVEL_ENGINE_UPGRADES
09764 00                        		.db $2 << 3 | LevelMusic_Boss
09765                           	ENDIF
09765                           	IFDEF LEVEL_ENGINE_UPGRADES
09765                           		.db $2 << 4 | LevelMusic_Boss
09765                           	ENDIF
09765                           
09765 82 0B                     	.db $82, $0B
09767                           IFNDEF DISABLE_DOOR_POINTERS
09767 0D 36                     	.db $0D, $36
09769                           ENDIF
09769                           IFDEF DISABLE_DOOR_POINTERS
09769                           	.db $F5, $0D, $36
09769                           ENDIF
09769 2A 67                     	.db $2A, $67
0976B 2A FF                     	.db $2A, $FF
0976D F0 6C                     	.db $F0, $6C
0976F F1 48                     	.db $F1, $48
09771 53 10                     	.db $53, $10
09773 26 11                     	.db $26, $11
09775 3E 6D                     	.db $3E, $6D
09777 34 69                     	.db $34, $69
09779 2A F3                     	.db $2A, $F3
0977B F1 CC                     	.db $F1, $CC
0977D 55 10                     	.db $55, $10
0977F A0 F9                     	.db $A0, $F9
09781 F0 08                     	.db $F0, $08
09783 F1 4C                     	.db $F1, $4C
09785 F1 8A                     	.db $F1, $8A
09787 F5 0E 00                  	.db $F5, $0E, $00
0978A FF                        	.db $FF
0978B                           
0978B                           ; World 5-3
0978B                           include "src/levels/5/5-3/5-3-area0.asm"
0978B                           ; Level 5-3, Area 0
0978B                           
0978B                           LevelData_5_3_Area0:
0978B                           	; Level Header
0978B                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0978B                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0978B                           	levelHeader 1, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 0, $0a, $2
0978B 00                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
0978C 00                        	.db %11100000 | $0a
0978D 00                        	.db 1 << 4 | 0 << 2 | 0
0978E                           	IFNDEF LEVEL_ENGINE_UPGRADES
0978E 00                        		.db $2 << 3 | LevelMusic_Underground
0978F                           	ENDIF
0978F                           	IFDEF LEVEL_ENGINE_UPGRADES
0978F                           		.db $2 << 4 | LevelMusic_Underground
0978F                           	ENDIF
0978F                           
0978F F0 70                     	.db $F0, $70
09791 F2                        	.db $F2
09792 09 A9                     	.db $09, $A9
09794 F5 0E 10                  	.db $F5, $0E, $10
09797 F0 0F                     	.db $F0, $0F
09799 F1 8A                     	.db $F1, $8A
0979B FF                        	.db $FF
0979C                           include "src/levels/5/5-3/5-3-area1.asm"
0979C                           ; Level 5-3, Area 1
0979C                           
0979C                           LevelData_5_3_Area1:
0979C                           	; Level Header
0979C                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0979C                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0979C                           	levelHeader 9, LevelDirection_Horizontal, 0, 1, LevelMusic_Overworld, 0, 2, $08, $0
0979C 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 1
0979D 00                        	.db %11100000 | $08
0979E 00                        	.db 9 << 4 | 0 << 2 | 2
0979F                           	IFNDEF LEVEL_ENGINE_UPGRADES
0979F 00                        		.db $0 << 3 | LevelMusic_Overworld
097A0                           	ENDIF
097A0                           	IFDEF LEVEL_ENGINE_UPGRADES
097A0                           		.db $0 << 4 | LevelMusic_Overworld
097A0                           	ENDIF
097A0                           
097A0 22 10                     	.db $22, $10
097A2 16 11                     	.db $16, $11
097A4 28 08                     	.db $28, $08
097A6 15 21                     	.db $15, $21
097A8 06 21                     	.db $06, $21
097AA 0B 26                     	.db $0B, $26
097AC 46 A4                     	.db $46, $A4
097AE F5 0E 01                  	.db $F5, $0E, $01
097B1 26 05                     	.db $26, $05
097B3 F0 82                     	.db $F0, $82
097B5 F0 C3                     	.db $F0, $C3
097B7 F1 84                     	.db $F1, $84
097B9 F1 C0                     	.db $F1, $C0
097BB 7D 11                     	.db $7D, $11
097BD 3F 29                     	.db $3F, $29
097BF 1D 29                     	.db $1D, $29
097C1 13 16                     	.db $13, $16
097C3 04 16                     	.db $04, $16
097C5 18 29                     	.db $18, $29
097C7 0C 82                     	.db $0C, $82
097C9 0D 82                     	.db $0D, $82
097CB 27 26                     	.db $27, $26
097CD 08 21                     	.db $08, $21
097CF 09 21                     	.db $09, $21
097D1 52 10                     	.db $52, $10
097D3 16 11                     	.db $16, $11
097D5 55 29                     	.db $55, $29
097D7 21 82                     	.db $21, $82
097D9 04 82                     	.db $04, $82
097DB 0A 82                     	.db $0A, $82
097DD 0C 29                     	.db $0C, $29
097DF 0F 26                     	.db $0F, $26
097E1 17 81                     	.db $17, $81
097E3 09 29                     	.db $09, $29
097E5 1C 2B                     	.db $1C, $2B
097E7 F1 C1                     	.db $F1, $C1
097E9 58 10                     	.db $58, $10
097EB 1B 11                     	.db $1B, $11
097ED 1C 10                     	.db $1C, $10
097EF 60 21                     	.db $60, $21
097F1 01 21                     	.db $01, $21
097F3 02 21                     	.db $02, $21
097F5 03 21                     	.db $03, $21
097F7 0C D2                     	.db $0C, $D2
097F9 17 29                     	.db $17, $29
097FB 0D 0F                     	.db $0D, $0F
097FD F0 C0                     	.db $F0, $C0
097FF 44 1F                     	.db $44, $1F
09801 9C D5                     	.db $9C, $D5
09803 6C 1F                     	.db $6C, $1F
09805 32 10                     	.db $32, $10
09807 18 11                     	.db $18, $11
09809 3B 21                     	.db $3B, $21
0980B 11 21                     	.db $11, $21
0980D 0A D3                     	.db $0A, $D3
0980F 25 C2                     	.db $25, $C2
09811 F0 88                     	.db $F0, $88
09813 F1 20                     	.db $F1, $20
09815 F2                        	.db $F2
09816 9A 16                     	.db $9A, $16
09818 0B 16                     	.db $0B, $16
0981A 90 10                     	.db $90, $10
0981C 13 11                     	.db $13, $11
0981E 08 10                     	.db $08, $10
09820 5D 83                     	.db $5D, $83
09822 3F 25                     	.db $3F, $25
09824 F1 C4                     	.db $F1, $C4
09826 3C 1F                     	.db $3C, $1F
09828 63 2A                     	.db $63, $2A
0982A 05 26                     	.db $05, $26
0982C 07 2A                     	.db $07, $2A
0982E 34 83                     	.db $34, $83
09830 0C DC                     	.db $0C, $DC
09832 28 A3                     	.db $28, $A3
09834 F5 0E 24                  	.db $F5, $0E, $24
09837 11 2D                     	.db $11, $2D
09839 18 05                     	.db $18, $05
0983B F1 80                     	.db $F1, $80
0983D 5B 10                     	.db $5B, $10
0983F 1E 11                     	.db $1E, $11
09841 5A 16                     	.db $5A, $16
09843 F1 88                     	.db $F1, $88
09845 FF                        	.db $FF
09846                           include "src/levels/5/5-3/5-3-area2.asm"
09846                           ; Level 5-3, Area 2
09846                           
09846                           LevelData_5_3_Area2:
09846                           	; Level Header
09846                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09846                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09846                           	levelHeader 4, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 2, $0a, $2
09846 00                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
09847 00                        	.db %11100000 | $0a
09848 00                        	.db 4 << 4 | 0 << 2 | 2
09849                           	IFNDEF LEVEL_ENGINE_UPGRADES
09849 00                        		.db $2 << 3 | LevelMusic_Underground
0984A                           	ENDIF
0984A                           	IFDEF LEVEL_ENGINE_UPGRADES
0984A                           		.db $2 << 4 | LevelMusic_Underground
0984A                           	ENDIF
0984A                           
0984A 04 1F                     	.db $04, $1F
0984C 7E D7                     	.db $7E, $D7
0984E 18 0B                     	.db $18, $0B
09850                           IFNDEF DISABLE_DOOR_POINTERS
09850 0E 33                     	.db $0E, $33
09852                           ENDIF
09852                           IFDEF DISABLE_DOOR_POINTERS
09852                           	.db $F5, $0E, $33
09852                           ENDIF
09852 F0 4C                     	.db $F0, $4C
09854 7C 1F                     	.db $7C, $1F
09856 6A 21                     	.db $6A, $21
09858 18 DB                     	.db $18, $DB
0985A F0 88                     	.db $F0, $88
0985C F1 2C                     	.db $F1, $2C
0985E F2                        	.db $F2
0985F 7D 32                     	.db $7D, $32
09861 12 D2                     	.db $12, $D2
09863 13 D2                     	.db $13, $D2
09865 09 21                     	.db $09, $21
09867 3E 24                     	.db $3E, $24
09869 F1 68                     	.db $F1, $68
0986B F1 8D                     	.db $F1, $8D
0986D C2 83                     	.db $C2, $83
0986F 35 25                     	.db $35, $25
09871 08 21                     	.db $08, $21
09873 0A 21                     	.db $0A, $21
09875 0C 21                     	.db $0C, $21
09877 0E 21                     	.db $0E, $21
09879 F0 15                     	.db $F0, $15
0987B 37 A5                     	.db $37, $A5
0987D F5 0E 18                  	.db $F5, $0E, $18
09880 4A 00                     	.db $4A, $00
09882 1A 04                     	.db $1A, $04
09884 12 80                     	.db $12, $80
09886 03 80                     	.db $03, $80
09888 60 26                     	.db $60, $26
0988A F0 5A                     	.db $F0, $5A
0988C F0 95                     	.db $F0, $95
0988E F0 EE                     	.db $F0, $EE
09890 F1 CA                     	.db $F1, $CA
09892 FF                        	.db $FF
09893                           include "src/levels/5/5-3/5-3-area3.asm"
09893                           ; Level 5-3, Area 3
09893                           
09893                           LevelData_5_3_Area3:
09893                           	; Level Header
09893                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09893                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09893                           	levelHeader 6, LevelDirection_Vertical, 3, 0, LevelMusic_Underground, 0, 1, $00, $2
09893 00                        	.db LevelDirection_Vertical << 7 | 3 << 3 | 0
09894 00                        	.db %11100000 | $00
09895 00                        	.db 6 << 4 | 0 << 2 | 1
09896                           	IFNDEF LEVEL_ENGINE_UPGRADES
09896 00                        		.db $2 << 3 | LevelMusic_Underground
09897                           	ENDIF
09897                           	IFDEF LEVEL_ENGINE_UPGRADES
09897                           		.db $2 << 4 | LevelMusic_Underground
09897                           	ENDIF
09897                           
09897 68 13                     	.db $68, $13
09899                           IFNDEF DISABLE_DOOR_POINTERS
09899 0E 40                     	.db $0E, $40
0989B                           ENDIF
0989B                           IFDEF DISABLE_DOOR_POINTERS
0989B                           	.db $F5, $0E, $40
0989B                           ENDIF
0989B 28 33                     	.db $28, $33
0989D 12 31                     	.db $12, $31
0989F 24 31                     	.db $24, $31
098A1 26 31                     	.db $26, $31
098A3 F0 8A                     	.db $F0, $8A
098A5 F0 B3                     	.db $F0, $B3
098A7 F1 2A                     	.db $F1, $2A
098A9 F1 D3                     	.db $F1, $D3
098AB 29 31                     	.db $29, $31
098AD 2C 31                     	.db $2C, $31
098AF 12 31                     	.db $12, $31
098B1 25 31                     	.db $25, $31
098B3 27 32                     	.db $27, $32
098B5 22 32                     	.db $22, $32
098B7 0C 31                     	.db $0C, $31
098B9 35 31                     	.db $35, $31
098BB 28 32                     	.db $28, $32
098BD F0 4A                     	.db $F0, $4A
098BF F0 D3                     	.db $F0, $D3
098C1 F1 2A                     	.db $F1, $2A
098C3 F1 B3                     	.db $F1, $B3
098C5 2C 31                     	.db $2C, $31
098C7 12 32                     	.db $12, $32
098C9 25 32                     	.db $25, $32
098CB 38 32                     	.db $38, $32
098CD 3B 32                     	.db $3B, $32
098CF 14 34                     	.db $14, $34
098D1 F0 2A                     	.db $F0, $2A
098D3 F0 F3                     	.db $F0, $F3
098D5 F1 4A                     	.db $F1, $4A
098D7 4C 00                     	.db $4C, $00
098D9 0D 00                     	.db $0D, $00
098DB 1A 33                     	.db $1A, $33
098DD 33 31                     	.db $33, $31
098DF 26 81                     	.db $26, $81
098E1 07 13                     	.db $07, $13
098E3                           IFNDEF DISABLE_DOOR_POINTERS
098E3 0E 20                     	.db $0E, $20
098E5                           ENDIF
098E5                           IFDEF DISABLE_DOOR_POINTERS
098E5                           	.db $F5, $0E, $20
098E5                           ENDIF
098E5 23 32                     	.db $23, $32
098E7 23 32                     	.db $23, $32
098E9 33 32                     	.db $33, $32
098EB 0A 33                     	.db $0A, $33
098ED 0D 00                     	.db $0D, $00
098EF 16 85                     	.db $16, $85
098F1 07 85                     	.db $07, $85
098F3 F0 99                     	.db $F0, $99
098F5 F0 CA                     	.db $F0, $CA
098F7 F1 0B                     	.db $F1, $0B
098F9 F1 D5                     	.db $F1, $D5
098FB 23 32                     	.db $23, $32
098FD 1B 32                     	.db $1B, $32
098FF 23 31                     	.db $23, $31
09901 28 04                     	.db $28, $04
09903 14 38                     	.db $14, $38
09905 0D 00                     	.db $0D, $00
09907 33 31                     	.db $33, $31
09909 1A 00                     	.db $1A, $00
0990B 0B 32                     	.db $0B, $32
0990D 23 31                     	.db $23, $31
0990F F1 0B                     	.db $F1, $0B
09911 33 31                     	.db $33, $31
09913 06 86                     	.db $06, $86
09915 07 86                     	.db $07, $86
09917 08 34                     	.db $08, $34
09919 0D 00                     	.db $0D, $00
0991B 33 31                     	.db $33, $31
0991D 1B 32                     	.db $1B, $32
0991F 23 31                     	.db $23, $31
09921 28 04                     	.db $28, $04
09923 14 39                     	.db $14, $39
09925 0B 00                     	.db $0B, $00
09927 32 00                     	.db $32, $00
09929 12 00                     	.db $12, $00
0992B F0 2A                     	.db $F0, $2A
0992D 12 00                     	.db $12, $00
0992F 16 33                     	.db $16, $33
09931 F0 36                     	.db $F0, $36
09933 F0 80                     	.db $F0, $80
09935 FF                        	.db $FF
09936                           include "src/levels/5/5-3/5-3-area4.asm"
09936                           ; Level 5-3, Area 4
09936                           
09936                           LevelData_5_3_Area4:
09936                           	; Level Header
09936                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09936                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09936                           	levelHeader 9, LevelDirection_Horizontal, 0, 1, LevelMusic_Boss, 0, 0, $08, $2
09936 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 1
09937 00                        	.db %11100000 | $08
09938 00                        	.db 9 << 4 | 0 << 2 | 0
09939                           	IFNDEF LEVEL_ENGINE_UPGRADES
09939 00                        		.db $2 << 3 | LevelMusic_Boss
0993A                           	ENDIF
0993A                           	IFDEF LEVEL_ENGINE_UPGRADES
0993A                           		.db $2 << 4 | LevelMusic_Boss
0993A                           	ENDIF
0993A                           
0993A 02 1F                     	.db $02, $1F
0993C 67 0B                     	.db $67, $0B
0993E                           IFNDEF DISABLE_DOOR_POINTERS
0993E 0E 30                     	.db $0E, $30
09940                           ENDIF
09940                           IFDEF DISABLE_DOOR_POINTERS
09940                           	.db $F5, $0E, $30
09940                           ENDIF
09940 1F 21                     	.db $1F, $21
09942 16 DF                     	.db $16, $DF
09944 7A 1F                     	.db $7A, $1F
09946 21 10                     	.db $21, $10
09948 15 11                     	.db $15, $11
0994A 38 D9                     	.db $38, $D9
0994C 10 21                     	.db $10, $21
0994E 01 21                     	.db $01, $21
09950 02 21                     	.db $02, $21
09952 AD 10                     	.db $AD, $10
09954 63 D6                     	.db $63, $D6
09956 E3 11                     	.db $E3, $11
09958 50 10                     	.db $50, $10
0995A 0D 11                     	.db $0D, $11
0995C 3A 1F                     	.db $3A, $1F
0995E B4 10                     	.db $B4, $10
09960 C7 21                     	.db $C7, $21
09962 09 21                     	.db $09, $21
09964 0B 21                     	.db $0B, $21
09966 14 D9                     	.db $14, $D9
09968 98 E2                     	.db $98, $E2
0996A 49 E2                     	.db $49, $E2
0996C 13 E3                     	.db $13, $E3
0996E 0F E2                     	.db $0F, $E2
09970 30 E1                     	.db $30, $E1
09972 A4 E3                     	.db $A4, $E3
09974 1A D3                     	.db $1A, $D3
09976 1C 0F                     	.db $1C, $0F
09978 38 10                     	.db $38, $10
0997A 0E D2                     	.db $0E, $D2
0997C 1F 0F                     	.db $1F, $0F
0997E 54 10                     	.db $54, $10
09980 28 11                     	.db $28, $11
09982 52 DE                     	.db $52, $DE
09984 1A 0F                     	.db $1A, $0F
09986 5C 89                     	.db $5C, $89
09988 0D 89                     	.db $0D, $89
0998A 0E 89                     	.db $0E, $89
0998C 0F 89                     	.db $0F, $89
0998E 8A 81                     	.db $8A, $81
09990 0B 81                     	.db $0B, $81
09992 F0 8D                     	.db $F0, $8D
09994 F1 0C                     	.db $F1, $0C
09996 F5 0E 50                  	.db $F5, $0E, $50
09999 FF                        	.db $FF
0999A                           include "src/levels/5/5-3/5-3-area5.asm"
0999A                           ; Level 5-3, Area 5
0999A                           
0999A                           LevelData_5_3_Area5:
0999A                           	; Level Header
0999A                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0999A                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0999A                           	levelHeader 1, LevelDirection_Horizontal, 5, 2, LevelMusic_Boss, 0, 2, $0a, $4
0999A 00                        	.db LevelDirection_Horizontal << 7 | 5 << 3 | 2
0999B 00                        	.db %11100000 | $0a
0999C 00                        	.db 1 << 4 | 0 << 2 | 2
0999D                           	IFNDEF LEVEL_ENGINE_UPGRADES
0999D 00                        		.db $4 << 3 | LevelMusic_Boss
0999E                           	ENDIF
0999E                           	IFDEF LEVEL_ENGINE_UPGRADES
0999E                           		.db $4 << 4 | LevelMusic_Boss
0999E                           	ENDIF
0999E                           
0999E F0 4F                     	.db $F0, $4F
099A0 F0 CC                     	.db $F0, $CC
099A2 F1 4F                     	.db $F1, $4F
099A4 F1 D7                     	.db $F1, $D7
099A6 F1 EF                     	.db $F1, $EF
099A8 F2                        	.db $F2
099A9 F0 16                     	.db $F0, $16
099AB F0 88                     	.db $F0, $88
099AD F0 B6                     	.db $F0, $B6
099AF F0 C1                     	.db $F0, $C1
099B1 F0 EC                     	.db $F0, $EC
099B3 F1 EA                     	.db $F1, $EA
099B5 7D 91                     	.db $7D, $91
099B7 0E 91                     	.db $0E, $91
099B9 1C 90                     	.db $1C, $90
099BB 18 37                     	.db $18, $37
099BD FF                        	.db $FF
099BE                           ; -------------------------------
099BE                           
099BE                           
099BE                           ; -------------------------------
099BE                           ; World 6
099BE                           
099BE                           ; World 6-1
099BE                           include "src/levels/6/6-1/6-1-area0.asm"
099BE                           ; Level 6-1, Area 0
099BE                           
099BE                           LevelData_6_1_Area0:
099BE                           	; Level Header
099BE                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
099BE                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
099BE                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $0d, $3
099BE 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
099BF 00                        	.db %11100000 | $0d
099C0 00                        	.db 9 << 4 | 0 << 2 | 0
099C1                           	IFNDEF LEVEL_ENGINE_UPGRADES
099C1 00                        		.db $3 << 3 | LevelMusic_Overworld
099C2                           	ENDIF
099C2                           	IFDEF LEVEL_ENGINE_UPGRADES
099C2                           		.db $3 << 4 | LevelMusic_Overworld
099C2                           	ENDIF
099C2                           
099C2 00 8C                     	.db $00, $8C
099C4 01 8C                     	.db $01, $8C
099C6 02 8C                     	.db $02, $8C
099C8 03 8C                     	.db $03, $8C
099CA 4C 10                     	.db $4C, $10
099CC 59 16                     	.db $59, $16
099CE F1 6D                     	.db $F1, $6D
099D0 F6 01                     	.db $F6, $01
099D2 AD 10                     	.db $AD, $10
099D4 2C 11                     	.db $2C, $11
099D6 64 D1                     	.db $64, $D1
099D8 09 D1                     	.db $09, $D1
099DA 68 2B                     	.db $68, $2B
099DC 2A 10                     	.db $2A, $10
099DE 55 06                     	.db $55, $06
099E0 2A D1                     	.db $2A, $D1
099E2 F5 0F 60                  	.db $F5, $0F, $60
099E5 F1 CD                     	.db $F1, $CD
099E7 F6 00                     	.db $F6, $00
099E9 66 10                     	.db $66, $10
099EB 79 0F                     	.db $79, $0F
099ED 10 0F                     	.db $10, $0F
099EF 11 0F                     	.db $11, $0F
099F1 07 0F                     	.db $07, $0F
099F3 F1 8D                     	.db $F1, $8D
099F5 F6 02                     	.db $F6, $02
099F7 64 11                     	.db $64, $11
099F9 6F 16                     	.db $6F, $16
099FB 32 D1                     	.db $32, $D1
099FD 07 D1                     	.db $07, $D1
099FF F1 CD                     	.db $F1, $CD
09A01 F6 00                     	.db $F6, $00
09A03 68 10                     	.db $68, $10
09A05 7E 07                     	.db $7E, $07
09A07 2A D1                     	.db $2A, $D1
09A09 F0 4D                     	.db $F0, $4D
09A0B F6 01                     	.db $F6, $01
09A0D 72 11                     	.db $72, $11
09A0F 14 10                     	.db $14, $10
09A11 51 07                     	.db $51, $07
09A13 0E 94                     	.db $0E, $94
09A15 26 D1                     	.db $26, $D1
09A17 F0 0D                     	.db $F0, $0D
09A19 F6 00                     	.db $F6, $00
09A1B F1 EC                     	.db $F1, $EC
09A1D F6 03                     	.db $F6, $03
09A1F 56 10                     	.db $56, $10
09A21 43 0F                     	.db $43, $0F
09A23 09 0F                     	.db $09, $0F
09A25 16 0F                     	.db $16, $0F
09A27 11 0F                     	.db $11, $0F
09A29 07 0F                     	.db $07, $0F
09A2B 14 21                     	.db $14, $21
09A2D 08 26                     	.db $08, $26
09A2F 05 0F                     	.db $05, $0F
09A31 0A 0F                     	.db $0A, $0F
09A33 F0 0C                     	.db $F0, $0C
09A35 F6 00                     	.db $F6, $00
09A37 94 10                     	.db $94, $10
09A39 2D 0F                     	.db $2D, $0F
09A3B 2F 0F                     	.db $2F, $0F
09A3D 17 0F                     	.db $17, $0F
09A3F 0B 0F                     	.db $0B, $0F
09A41 7C 89                     	.db $7C, $89
09A43 0D 89                     	.db $0D, $89
09A45 0E 89                     	.db $0E, $89
09A47 0F 89                     	.db $0F, $89
09A49 44 10                     	.db $44, $10
09A4B 17 54                     	.db $17, $54
09A4D 09 2D                     	.db $09, $2D
09A4F 17 34                     	.db $17, $34
09A51 18 33                     	.db $18, $33
09A53 17 34                     	.db $17, $34
09A55 09 0B                     	.db $09, $0B
09A57 F5 0F 10                  	.db $F5, $0F, $10
09A5A 16 32                     	.db $16, $32
09A5C 0A 31                     	.db $0A, $31
09A5E FF                        	.db $FF
09A5F                           include "src/levels/6/6-1/6-1-area1.asm"
09A5F                           ; Level 6-1, Area 1
09A5F                           
09A5F                           LevelData_6_1_Area1:
09A5F                           	; Level Header
09A5F                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09A5F                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09A5F                           	levelHeader 3, LevelDirection_Horizontal, 1, 1, LevelMusic_Underground, 0, 0, $0a, $3
09A5F 00                        	.db LevelDirection_Horizontal << 7 | 1 << 3 | 1
09A60 00                        	.db %11100000 | $0a
09A61 00                        	.db 3 << 4 | 0 << 2 | 0
09A62                           	IFNDEF LEVEL_ENGINE_UPGRADES
09A62 00                        		.db $3 << 3 | LevelMusic_Underground
09A63                           	ENDIF
09A63                           	IFDEF LEVEL_ENGINE_UPGRADES
09A63                           		.db $3 << 4 | LevelMusic_Underground
09A63                           	ENDIF
09A63                           
09A63 46 13                     	.db $46, $13
09A65 F5 0F 09                  	.db $F5, $0F, $09
09A68 2D 81                     	.db $2D, $81
09A6A 0E 81                     	.db $0E, $81
09A6C 0F 80                     	.db $0F, $80
09A6E 3B 81                     	.db $3B, $81
09A70 F0 4E                     	.db $F0, $4E
09A72 F1 75                     	.db $F1, $75
09A74 F1 BC                     	.db $F1, $BC
09A76 C0 80                     	.db $C0, $80
09A78 01 80                     	.db $01, $80
09A7A 44 00                     	.db $44, $00
09A7C 09 06                     	.db $09, $06
09A7E 0F 00                     	.db $0F, $00
09A80 10 07                     	.db $10, $07
09A82 02 07                     	.db $02, $07
09A84 04 06                     	.db $04, $06
09A86 05 08                     	.db $05, $08
09A88 06 08                     	.db $06, $08
09A8A 07 07                     	.db $07, $07
09A8C 0A 07                     	.db $0A, $07
09A8E 0B 08                     	.db $0B, $08
09A90 0C 06                     	.db $0C, $06
09A92 0D 07                     	.db $0D, $07
09A94 0E 07                     	.db $0E, $07
09A96 0F 08                     	.db $0F, $08
09A98 F5 0F 50                  	.db $F5, $0F, $50
09A9B E7 00                     	.db $E7, $00
09A9D 10 07                     	.db $10, $07
09A9F 01 07                     	.db $01, $07
09AA1 02 08                     	.db $02, $08
09AA3 03 06                     	.db $03, $06
09AA5 04 07                     	.db $04, $07
09AA7 05 07                     	.db $05, $07
09AA9 06 08                     	.db $06, $08
09AAB 07 08                     	.db $07, $08
09AAD F5 0F 30                  	.db $F5, $0F, $30
09AB0 F1 71                     	.db $F1, $71
09AB2 AB 32                     	.db $AB, $32
09AB4 1B 32                     	.db $1B, $32
09AB6 1B 32                     	.db $1B, $32
09AB8 0C 09                     	.db $0C, $09
09ABA F5 0F 20                  	.db $F5, $0F, $20
09ABD 1B 30                     	.db $1B, $30
09ABF 0D 30                     	.db $0D, $30
09AC1 F1 4F                     	.db $F1, $4F
09AC3 F1 CA                     	.db $F1, $CA
09AC5 FF                        	.db $FF
09AC6                           include "src/levels/6/6-1/6-1-area2.asm"
09AC6                           ; Level 6-1, Area 2
09AC6                           
09AC6                           LevelData_6_1_Area2:
09AC6                           	; Level Header
09AC6                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09AC6                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09AC6                           	levelHeader 2, LevelDirection_Horizontal, 1, 1, LevelMusic_Boss, 0, 0, $0a, $3
09AC6 00                        	.db LevelDirection_Horizontal << 7 | 1 << 3 | 1
09AC7 00                        	.db %11100000 | $0a
09AC8 00                        	.db 2 << 4 | 0 << 2 | 0
09AC9                           	IFNDEF LEVEL_ENGINE_UPGRADES
09AC9 00                        		.db $3 << 3 | LevelMusic_Boss
09ACA                           	ENDIF
09ACA                           	IFDEF LEVEL_ENGINE_UPGRADES
09ACA                           		.db $3 << 4 | LevelMusic_Boss
09ACA                           	ENDIF
09ACA                           
09ACA 83 13                     	.db $83, $13
09ACC F5 0F 13                  	.db $F5, $0F, $13
09ACF F0 51                     	.db $F0, $51
09AD1 B7 83                     	.db $B7, $83
09AD3 26 81                     	.db $26, $81
09AD5 25 32                     	.db $25, $32
09AD7 12 00                     	.db $12, $00
09AD9 03 00                     	.db $03, $00
09ADB 04 00                     	.db $04, $00
09ADD 05 32                     	.db $05, $32
09ADF F0 0C                     	.db $F0, $0C
09AE1 F2                        	.db $F2
09AE2 F0 0F                     	.db $F0, $0F
09AE4 F0 6A                     	.db $F0, $6A
09AE6 F5 10 00                  	.db $F5, $10, $00
09AE9 FF                        	.db $FF
09AEA                           include "src/levels/6/6-1/6-1-area3.asm"
09AEA                           ; Level 6-1, Area 3
09AEA                           
09AEA                           LevelData_6_1_Area3:
09AEA                           	; Level Header
09AEA                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09AEA                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09AEA                           	levelHeader 2, LevelDirection_Vertical, 3, 0, LevelMusic_Underground, 0, 1, $03, $3
09AEA 00                        	.db LevelDirection_Vertical << 7 | 3 << 3 | 0
09AEB 00                        	.db %11100000 | $03
09AEC 00                        	.db 2 << 4 | 0 << 2 | 1
09AED                           	IFNDEF LEVEL_ENGINE_UPGRADES
09AED 00                        		.db $3 << 3 | LevelMusic_Underground
09AEE                           	ENDIF
09AEE                           	IFDEF LEVEL_ENGINE_UPGRADES
09AEE                           		.db $3 << 4 | LevelMusic_Underground
09AEE                           	ENDIF
09AEE                           
09AEE F5 0F 12                  	.db $F5, $0F, $12
09AF1 65 31                     	.db $65, $31
09AF3 09 31                     	.db $09, $31
09AF5 36 33                     	.db $36, $33
09AF7 24 31                     	.db $24, $31
09AF9 0A 31                     	.db $0A, $31
09AFB F0 44                     	.db $F0, $44
09AFD F0 65                     	.db $F0, $65
09AFF F0 86                     	.db $F0, $86
09B01 F0 A7                     	.db $F0, $A7
09B03 F1 86                     	.db $F1, $86
09B05 F1 A8                     	.db $F1, $A8
09B07 F1 CF                     	.db $F1, $CF
09B09 F2                        	.db $F2
09B0A F0 4A                     	.db $F0, $4A
09B0C F0 CD                     	.db $F0, $CD
09B0E F1 6B                     	.db $F1, $6B
09B10 F1 A0                     	.db $F1, $A0
09B12 FF                        	.db $FF
09B13                           include "src/levels/6/6-1/6-1-area4.asm"
09B13                           ; Level 6-1, Area 4
09B13                           
09B13                           LevelData_6_1_Area4:
09B13                           	; Level Header
09B13                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09B13                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09B13                           	levelHeader 0, LevelDirection_Vertical, 3, 0, LevelMusic_Underground, 0, 1, $03, $0
09B13 00                        	.db LevelDirection_Vertical << 7 | 3 << 3 | 0
09B14 00                        	.db %11100000 | $03
09B15 00                        	.db 0 << 4 | 0 << 2 | 1
09B16                           	IFNDEF LEVEL_ENGINE_UPGRADES
09B16 00                        		.db $0 << 3 | LevelMusic_Underground
09B17                           	ENDIF
09B17                           	IFDEF LEVEL_ENGINE_UPGRADES
09B17                           		.db $0 << 4 | LevelMusic_Underground
09B17                           	ENDIF
09B17                           
09B17 64 32                     	.db $64, $32
09B19 09 32                     	.db $09, $32
09B1B 34 30                     	.db $34, $30
09B1D 0B 30                     	.db $0B, $30
09B1F 15 35                     	.db $15, $35
09B21 28 24                     	.db $28, $24
09B23 F0 44                     	.db $F0, $44
09B25 F0 65                     	.db $F0, $65
09B27 F0 86                     	.db $F0, $86
09B29 F0 A7                     	.db $F0, $A7
09B2B F1 66                     	.db $F1, $66
09B2D F1 83                     	.db $F1, $83
09B2F F1 A0                     	.db $F1, $A0
09B31 FF                        	.db $FF
09B32                           include "src/levels/6/6-1/6-1-area5.asm"
09B32                           ; Level 6-1, Area 5
09B32                           
09B32                           LevelData_6_1_Area5:
09B32                           	; Level Header
09B32                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09B32                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09B32                           	levelHeader 2, LevelDirection_Vertical, 3, 0, LevelMusic_Underground, 0, 1, $03, $3
09B32 00                        	.db LevelDirection_Vertical << 7 | 3 << 3 | 0
09B33 00                        	.db %11100000 | $03
09B34 00                        	.db 2 << 4 | 0 << 2 | 1
09B35                           	IFNDEF LEVEL_ENGINE_UPGRADES
09B35 00                        		.db $3 << 3 | LevelMusic_Underground
09B36                           	ENDIF
09B36                           	IFDEF LEVEL_ENGINE_UPGRADES
09B36                           		.db $3 << 4 | LevelMusic_Underground
09B36                           	ENDIF
09B36                           
09B36 F5 0F 11                  	.db $F5, $0F, $11
09B39 65 31                     	.db $65, $31
09B3B 09 31                     	.db $09, $31
09B3D 36 33                     	.db $36, $33
09B3F 24 31                     	.db $24, $31
09B41 0A 31                     	.db $0A, $31
09B43 F0 44                     	.db $F0, $44
09B45 F0 65                     	.db $F0, $65
09B47 F0 86                     	.db $F0, $86
09B49 F0 A7                     	.db $F0, $A7
09B4B F1 86                     	.db $F1, $86
09B4D F1 A8                     	.db $F1, $A8
09B4F F1 CF                     	.db $F1, $CF
09B51 C6 82                     	.db $C6, $82
09B53 07 82                     	.db $07, $82
09B55 08 82                     	.db $08, $82
09B57 09 82                     	.db $09, $82
09B59 26 27                     	.db $26, $27
09B5B 07 22                     	.db $07, $22
09B5D 08 22                     	.db $08, $22
09B5F 09 27                     	.db $09, $27
09B61 F0 4A                     	.db $F0, $4A
09B63 F0 CD                     	.db $F0, $CD
09B65 F1 6B                     	.db $F1, $6B
09B67 F1 A0                     	.db $F1, $A0
09B69 FF                        	.db $FF
09B6A                           include "src/levels/6/6-1/6-1-area6.asm"
09B6A                           ; Level 6-1, Area 6
09B6A                           
09B6A                           LevelData_6_1_Area6:
09B6A                           	; Level Header
09B6A                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09B6A                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09B6A                           	levelHeader 0, LevelDirection_Vertical, 3, 0, LevelMusic_Underground, 0, 1, $03, $0
09B6A 00                        	.db LevelDirection_Vertical << 7 | 3 << 3 | 0
09B6B 00                        	.db %11100000 | $03
09B6C 00                        	.db 0 << 4 | 0 << 2 | 1
09B6D                           	IFNDEF LEVEL_ENGINE_UPGRADES
09B6D 00                        		.db $0 << 3 | LevelMusic_Underground
09B6E                           	ENDIF
09B6E                           	IFDEF LEVEL_ENGINE_UPGRADES
09B6E                           		.db $0 << 4 | LevelMusic_Underground
09B6E                           	ENDIF
09B6E                           
09B6E 65 31                     	.db $65, $31
09B70 09 31                     	.db $09, $31
09B72 33 31                     	.db $33, $31
09B74 0B 31                     	.db $0B, $31
09B76 17 31                     	.db $17, $31
09B78 26 26                     	.db $26, $26
09B7A F5 0F 02                  	.db $F5, $0F, $02
09B7D F0 44                     	.db $F0, $44
09B7F F0 65                     	.db $F0, $65
09B81 F0 86                     	.db $F0, $86
09B83 F0 A7                     	.db $F0, $A7
09B85 F1 86                     	.db $F1, $86
09B87 F1 A8                     	.db $F1, $A8
09B89 F1 CF                     	.db $F1, $CF
09B8B F6 04                     	.db $F6, $04
09B8D FF                        	.db $FF
09B8E                           
09B8E                           ; World 6-2
09B8E                           include "src/levels/6/6-2/6-2-area0.asm"
09B8E                           ; Level 6-2, Area 0
09B8E                           
09B8E                           LevelData_6_2_Area0:
09B8E                           	; Level Header
09B8E                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09B8E                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09B8E                           	levelHeader 1, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 0, $0a, $3
09B8E 00                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
09B8F 00                        	.db %11100000 | $0a
09B90 00                        	.db 1 << 4 | 0 << 2 | 0
09B91                           	IFNDEF LEVEL_ENGINE_UPGRADES
09B91 00                        		.db $3 << 3 | LevelMusic_Underground
09B92                           	ENDIF
09B92                           	IFDEF LEVEL_ENGINE_UPGRADES
09B92                           		.db $3 << 4 | LevelMusic_Underground
09B92                           	ENDIF
09B92                           
09B92 F0 54                     	.db $F0, $54
09B94 F1 8F                     	.db $F1, $8F
09B96 F2                        	.db $F2
09B97 4C 14                     	.db $4C, $14
09B99 F5 10 10                  	.db $F5, $10, $10
09B9C F0 CE                     	.db $F0, $CE
09B9E F1 EA                     	.db $F1, $EA
09BA0 FF                        	.db $FF
09BA1                           include "src/levels/6/6-2/6-2-area1.asm"
09BA1                           ; Level 6-2, Area 1
09BA1                           
09BA1                           LevelData_6_2_Area1:
09BA1                           	; Level Header
09BA1                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09BA1                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09BA1                           	levelHeader 9, LevelDirection_Horizontal, 2, 1, LevelMusic_Overworld, 0, 0, $0a, $3
09BA1 00                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
09BA2 00                        	.db %11100000 | $0a
09BA3 00                        	.db 9 << 4 | 0 << 2 | 0
09BA4                           	IFNDEF LEVEL_ENGINE_UPGRADES
09BA4 00                        		.db $3 << 3 | LevelMusic_Overworld
09BA5                           	ENDIF
09BA5                           	IFDEF LEVEL_ENGINE_UPGRADES
09BA5                           		.db $3 << 4 | LevelMusic_Overworld
09BA5                           	ENDIF
09BA5                           
09BA5 00 0E                     	.db $00, $0E
09BA7 93 0B                     	.db $93, $0B
09BA9 F5 10 01                  	.db $F5, $10, $01
09BAC 19 21                     	.db $19, $21
09BAE F0 81                     	.db $F0, $81
09BB0 F1 88                     	.db $F1, $88
09BB2 F1 E0                     	.db $F1, $E0
09BB4 F2                        	.db $F2
09BB5 F0 88                     	.db $F0, $88
09BB7 F2                        	.db $F2
09BB8 C9 82                     	.db $C9, $82
09BBA 0A 82                     	.db $0A, $82
09BBC 0B 82                     	.db $0B, $82
09BBE F3                        	.db $F3
09BBF 8F 86                     	.db $8F, $86
09BC1 F2                        	.db $F2
09BC2 70 26                     	.db $70, $26
09BC4 01 21                     	.db $01, $21
09BC6 04 2B                     	.db $04, $2B
09BC8 10 86                     	.db $10, $86
09BCA 01 86                     	.db $01, $86
09BCC 04 86                     	.db $04, $86
09BCE 05 86                     	.db $05, $86
09BD0 F3                        	.db $F3
09BD1 F3                        	.db $F3
09BD2 4C 0B                     	.db $4C, $0B
09BD4 F5 10 20                  	.db $F5, $10, $20
09BD7 40 21                     	.db $40, $21
09BD9 10 85                     	.db $10, $85
09BDB 01 85                     	.db $01, $85
09BDD F0 8B                     	.db $F0, $8B
09BDF F1 8A                     	.db $F1, $8A
09BE1 FF                        	.db $FF
09BE2                           include "src/levels/6/6-2/6-2-area2.asm"
09BE2                           ; Level 6-2, Area 2
09BE2                           
09BE2                           LevelData_6_2_Area2:
09BE2                           	; Level Header
09BE2                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09BE2                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09BE2                           	levelHeader 2, LevelDirection_Horizontal, 2, 1, LevelMusic_Boss, 0, 0, $0a, $3
09BE2 00                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
09BE3 00                        	.db %11100000 | $0a
09BE4 00                        	.db 2 << 4 | 0 << 2 | 0
09BE5                           	IFNDEF LEVEL_ENGINE_UPGRADES
09BE5 00                        		.db $3 << 3 | LevelMusic_Boss
09BE6                           	ENDIF
09BE6                           	IFDEF LEVEL_ENGINE_UPGRADES
09BE6                           		.db $3 << 4 | LevelMusic_Boss
09BE6                           	ENDIF
09BE6                           
09BE6 43 13                     	.db $43, $13
09BE8 F5 10 19                  	.db $F5, $10, $19
09BEB F0 4E                     	.db $F0, $4E
09BED F2                        	.db $F2
09BEE 6A 00                     	.db $6A, $00
09BF0 18 32                     	.db $18, $32
09BF2 0E 31                     	.db $0E, $31
09BF4 34 31                     	.db $34, $31
09BF6 28 00                     	.db $28, $00
09BF8 09 44                     	.db $09, $44
09BFA F0 90                     	.db $F0, $90
09BFC AA 82                     	.db $AA, $82
09BFE 0B 82                     	.db $0B, $82
09C00 0C 82                     	.db $0C, $82
09C02 0D 82                     	.db $0D, $82
09C04 F5 11 00                  	.db $F5, $11, $00
09C07 F0 0E                     	.db $F0, $0E
09C09 F1 0F                     	.db $F1, $0F
09C0B F1 CA                     	.db $F1, $CA
09C0D FF                        	.db $FF
09C0E                           
09C0E                           ; World 6-3
09C0E                           include "src/levels/6/6-3/6-3-area0.asm"
09C0E                           ; Level 6-3, Area 0
09C0E                           
09C0E                           LevelData_6_3_Area0:
09C0E                           	; Level Header
09C0E                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09C0E                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09C0E                           	levelHeader 0, LevelDirection_Horizontal, 1, 1, LevelMusic_Underground, 0, 0, $0a, $0
09C0E 00                        	.db LevelDirection_Horizontal << 7 | 1 << 3 | 1
09C0F 00                        	.db %11100000 | $0a
09C10 00                        	.db 0 << 4 | 0 << 2 | 0
09C11                           	IFNDEF LEVEL_ENGINE_UPGRADES
09C11 00                        		.db $0 << 3 | LevelMusic_Underground
09C12                           	ENDIF
09C12                           	IFDEF LEVEL_ENGINE_UPGRADES
09C12                           		.db $0 << 4 | LevelMusic_Underground
09C12                           	ENDIF
09C12                           
09C12 07 A9                     	.db $07, $A9
09C14 F5 11 11                  	.db $F5, $11, $11
09C17 F0 50                     	.db $F0, $50
09C19 F1 CA                     	.db $F1, $CA
09C1B FF                        	.db $FF
09C1C                           include "src/levels/6/6-3/6-3-area1.asm"
09C1C                           ; Level 6-3, Area 1
09C1C                           
09C1C                           LevelData_6_3_Area1:
09C1C                           	; Level Header
09C1C                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09C1C                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09C1C                           	levelHeader 4, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $0c, $0
09C1C 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
09C1D 00                        	.db %11100000 | $0c
09C1E 00                        	.db 4 << 4 | 0 << 2 | 0
09C1F                           	IFNDEF LEVEL_ENGINE_UPGRADES
09C1F 00                        		.db $0 << 3 | LevelMusic_Overworld
09C20                           	ENDIF
09C20                           	IFDEF LEVEL_ENGINE_UPGRADES
09C20                           		.db $0 << 4 | LevelMusic_Overworld
09C20                           	ENDIF
09C20                           
09C20 00 89                     	.db $00, $89
09C22 01 89                     	.db $01, $89
09C24 0A 89                     	.db $0A, $89
09C26 0B 89                     	.db $0B, $89
09C28 0C 89                     	.db $0C, $89
09C2A 0D 89                     	.db $0D, $89
09C2C 0E 89                     	.db $0E, $89
09C2E 0F 89                     	.db $0F, $89
09C30 75 0A                     	.db $75, $0A
09C32 F5 11 44                  	.db $F5, $11, $44
09C35 24 42                     	.db $24, $42
09C37 F1 0C                     	.db $F1, $0C
09C39 F6 01                     	.db $F6, $01
09C3B 60 89                     	.db $60, $89
09C3D 01 89                     	.db $01, $89
09C3F 02 89                     	.db $02, $89
09C41 03 89                     	.db $03, $89
09C43 28 10                     	.db $28, $10
09C45 1A 11                     	.db $1A, $11
09C47 3E 0F                     	.db $3E, $0F
09C49 28 A6                     	.db $28, $A6
09C4B 0C 0F                     	.db $0C, $0F
09C4D 0F 0F                     	.db $0F, $0F
09C4F F5 11 00                  	.db $F5, $11, $00
09C52 1A 26                     	.db $1A, $26
09C54 18 05                     	.db $18, $05
09C56 38 05                     	.db $38, $05
09C58 F0 CC                     	.db $F0, $CC
09C5A F6 00                     	.db $F6, $00
09C5C 48 11                     	.db $48, $11
09C5E 1D 11                     	.db $1D, $11
09C60 14 10                     	.db $14, $10
09C62 54 D1                     	.db $54, $D1
09C64 08 D1                     	.db $08, $D1
09C66 0D 0F                     	.db $0D, $0F
09C68 F0 4C                     	.db $F0, $4C
09C6A F6 02                     	.db $F6, $02
09C6C 8A 10                     	.db $8A, $10
09C6E 14 10                     	.db $14, $10
09C70 0D 11                     	.db $0D, $11
09C72 50 2B                     	.db $50, $2B
09C74 10 0F                     	.db $10, $0F
09C76 04 D1                     	.db $04, $D1
09C78 0B D1                     	.db $0B, $D1
09C7A 0F 2A                     	.db $0F, $2A
09C7C F1 CC                     	.db $F1, $CC
09C7E F6 00                     	.db $F6, $00
09C80 6B 89                     	.db $6B, $89
09C82 0C 89                     	.db $0C, $89
09C84 0D 89                     	.db $0D, $89
09C86 0E 89                     	.db $0E, $89
09C88 0F 89                     	.db $0F, $89
09C8A 0A 97                     	.db $0A, $97
09C8C 19 1E                     	.db $19, $1E
09C8E F5 11 20                  	.db $F5, $11, $20
09C91 FF                        	.db $FF
09C92                           include "src/levels/6/6-3/6-3-area2.asm"
09C92                           ; Level 6-3, Area 2
09C92                           
09C92                           LevelData_6_3_Area2:
09C92                           	; Level Header
09C92                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09C92                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09C92                           	levelHeader 7, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 2, $0a, $3
09C92 00                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
09C93 00                        	.db %11100000 | $0a
09C94 00                        	.db 7 << 4 | 0 << 2 | 2
09C95                           	IFNDEF LEVEL_ENGINE_UPGRADES
09C95 00                        		.db $3 << 3 | LevelMusic_Underground
09C96                           	ENDIF
09C96                           	IFDEF LEVEL_ENGINE_UPGRADES
09C96                           		.db $3 << 4 | LevelMusic_Underground
09C96                           	ENDIF
09C96                           
09C96 65 15                     	.db $65, $15
09C98 06 13                     	.db $06, $13
09C9A F5 11 14                  	.db $F5, $11, $14
09C9D F0 8F                     	.db $F0, $8F
09C9F C4 A4                     	.db $C4, $A4
09CA1 13 29                     	.db $13, $29
09CA3 05 29                     	.db $05, $29
09CA5 2D A1                     	.db $2D, $A1
09CA7 34 04                     	.db $34, $04
09CA9 0F 04                     	.db $0F, $04
09CAB 1A 39                     	.db $1A, $39
09CAD 1A 39                     	.db $1A, $39
09CAF 1A 39                     	.db $1A, $39
09CB1 F1 5B                     	.db $F1, $5B
09CB3 95 A1                     	.db $95, $A1
09CB5 0A A1                     	.db $0A, $A1
09CB7 3C 04                     	.db $3C, $04
09CB9 18 36                     	.db $18, $36
09CBB 18 36                     	.db $18, $36
09CBD 18 36                     	.db $18, $36
09CBF 02 29                     	.db $02, $29
09CC1 0E 29                     	.db $0E, $29
09CC3 F0 91                     	.db $F0, $91
09CC5 F1 1B                     	.db $F1, $1B
09CC7 F1 F1                     	.db $F1, $F1
09CC9 5D 83                     	.db $5D, $83
09CCB 36 25                     	.db $36, $25
09CCD 07 25                     	.db $07, $25
09CCF 12 31                     	.db $12, $31
09CD1 12 31                     	.db $12, $31
09CD3 12 31                     	.db $12, $31
09CD5 10 41                     	.db $10, $41
09CD7 02 31                     	.db $02, $31
09CD9 04 83                     	.db $04, $83
09CDB 12 31                     	.db $12, $31
09CDD 07 29                     	.db $07, $29
09CDF 12 31                     	.db $12, $31
09CE1 05 3A                     	.db $05, $3A
09CE3 12 31                     	.db $12, $31
09CE5 05 3A                     	.db $05, $3A
09CE7 F0 5C                     	.db $F0, $5C
09CE9 F0 95                     	.db $F0, $95
09CEB 90 37                     	.db $90, $37
09CED 10 37                     	.db $10, $37
09CEF 10 37                     	.db $10, $37
09CF1 10 37                     	.db $10, $37
09CF3 08 83                     	.db $08, $83
09CF5 09 83                     	.db $09, $83
09CF7 0F 83                     	.db $0F, $83
09CF9 10 37                     	.db $10, $37
09CFB 10 37                     	.db $10, $37
09CFD 1A 54                     	.db $1A, $54
09CFF 00 37                     	.db $00, $37
09D01 F0 1C                     	.db $F0, $1C
09D03 F1 15                     	.db $F1, $15
09D05 34 88                     	.db $34, $88
09D07 0D 88                     	.db $0D, $88
09D09 50 25                     	.db $50, $25
09D0B 02 25                     	.db $02, $25
09D0D 06 26                     	.db $06, $26
09D0F 0A 25                     	.db $0A, $25
09D11 0C 25                     	.db $0C, $25
09D13 0E 25                     	.db $0E, $25
09D15 38 80                     	.db $38, $80
09D17 19 83                     	.db $19, $83
09D19 0A 83                     	.db $0A, $83
09D1B 32 25                     	.db $32, $25
09D1D 0F 25                     	.db $0F, $25
09D1F F0 88                     	.db $F0, $88
09D21 F0 B5                     	.db $F0, $B5
09D23 F1 1C                     	.db $F1, $1C
09D25 F1 35                     	.db $F1, $35
09D27 F1 A8                     	.db $F1, $A8
09D29 F1 D5                     	.db $F1, $D5
09D2B 7D A8                     	.db $7D, $A8
09D2D 17 25                     	.db $17, $25
09D2F 1D 05                     	.db $1D, $05
09D31 12 81                     	.db $12, $81
09D33 23 83                     	.db $23, $83
09D35 31 25                     	.db $31, $25
09D37 00 2D                     	.db $00, $2D
09D39 04 52                     	.db $04, $52
09D3B 08 52                     	.db $08, $52
09D3D F0 5C                     	.db $F0, $5C
09D3F F0 75                     	.db $F0, $75
09D41 F1 BC                     	.db $F1, $BC
09D43 F1 D1                     	.db $F1, $D1
09D45 B8 12                     	.db $B8, $12
09D47 F1 0C                     	.db $F1, $0C
09D49 F1 2A                     	.db $F1, $2A
09D4B F5 11 39                  	.db $F5, $11, $39
09D4E FF                        	.db $FF
09D4F                           include "src/levels/6/6-3/6-3-area3.asm"
09D4F                           ; Level 6-3, Area 3
09D4F                           
09D4F                           LevelData_6_3_Area3:
09D4F                           	; Level Header
09D4F                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09D4F                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09D4F                           	levelHeader 9, LevelDirection_Vertical, 0, 0, LevelMusic_Overworld, 0, 0, $13, $1
09D4F 00                        	.db LevelDirection_Vertical << 7 | 0 << 3 | 0
09D50 00                        	.db %11100000 | $13
09D51 00                        	.db 9 << 4 | 0 << 2 | 0
09D52                           	IFNDEF LEVEL_ENGINE_UPGRADES
09D52 00                        		.db $1 << 3 | LevelMusic_Overworld
09D53                           	ENDIF
09D53                           	IFDEF LEVEL_ENGINE_UPGRADES
09D53                           		.db $1 << 4 | LevelMusic_Overworld
09D53                           	ENDIF
09D53                           
09D53 34 E1                     	.db $34, $E1
09D55 48 E1                     	.db $48, $E1
09D57 67 12                     	.db $67, $12
09D59 F5 11 40                  	.db $F5, $11, $40
09D5C 32 E1                     	.db $32, $E1
09D5E 09 E4                     	.db $09, $E4
09D60 54 12                     	.db $54, $12
09D62 18 12                     	.db $18, $12
09D64 09 12                     	.db $09, $12
09D66 0A 12                     	.db $0A, $12
09D68 0B 12                     	.db $0B, $12
09D6A 0C 12                     	.db $0C, $12
09D6C 84 E1                     	.db $84, $E1
09D6E 3A E2                     	.db $3A, $E2
09D70 22 12                     	.db $22, $12
09D72 1D 12                     	.db $1D, $12
09D74 16 E1                     	.db $16, $E1
09D76 54 12                     	.db $54, $12
09D78 3C 12                     	.db $3C, $12
09D7A 2B 12                     	.db $2B, $12
09D7C 26 12                     	.db $26, $12
09D7E 0A 12                     	.db $0A, $12
09D80 44 E7                     	.db $44, $E7
09D82 34 12                     	.db $34, $12
09D84 05 12                     	.db $05, $12
09D86 16 12                     	.db $16, $12
09D88 27 12                     	.db $27, $12
09D8A 08 12                     	.db $08, $12
09D8C 0C E1                     	.db $0C, $E1
09D8E 24 00                     	.db $24, $00
09D90 0A 00                     	.db $0A, $00
09D92 13 E1                     	.db $13, $E1
09D94 0A E2                     	.db $0A, $E2
09D96 55 E4                     	.db $55, $E4
09D98 36 E2                     	.db $36, $E2
09D9A 21 E1                     	.db $21, $E1
09D9C 4A 12                     	.db $4A, $12
09D9E 0D 12                     	.db $0D, $12
09DA0 34 12                     	.db $34, $12
09DA2 16 E2                     	.db $16, $E2
09DA4 52 12                     	.db $52, $12
09DA6 04 E1                     	.db $04, $E1
09DA8 40 EB                     	.db $40, $EB
09DAA 0C 03                     	.db $0C, $03
09DAC 0D E2                     	.db $0D, $E2
09DAE 51 EA                     	.db $51, $EA
09DB0 0C 03                     	.db $0C, $03
09DB2 0D E1                     	.db $0D, $E1
09DB4 32 12                     	.db $32, $12
09DB6 03 12                     	.db $03, $12
09DB8 04 12                     	.db $04, $12
09DBA 05 12                     	.db $05, $12
09DBC 08 12                     	.db $08, $12
09DBE 09 12                     	.db $09, $12
09DC0 0A 12                     	.db $0A, $12
09DC2 2C 12                     	.db $2C, $12
09DC4 17 12                     	.db $17, $12
09DC6 87 E1                     	.db $87, $E1
09DC8 11 12                     	.db $11, $12
09DCA 0D 12                     	.db $0D, $12
09DCC 32 E2                     	.db $32, $E2
09DCE 09 E2                     	.db $09, $E2
09DD0 36 E1                     	.db $36, $E1
09DD2 18 12                     	.db $18, $12
09DD4 59 E1                     	.db $59, $E1
09DD6 55 12                     	.db $55, $12
09DD8 46 12                     	.db $46, $12
09DDA 29 12                     	.db $29, $12
09DDC F0 34                     	.db $F0, $34
09DDE F2                        	.db $F2
09DDF 07 0C                     	.db $07, $0C
09DE1 F5 11 27                  	.db $F5, $11, $27
09DE4 F0 18                     	.db $F0, $18
09DE6 F0 57                     	.db $F0, $57
09DE8 F4                        	.db $F4
09DE9 44 0D                     	.db $44, $0D
09DEB 48 0D                     	.db $48, $0D
09DED 92 0D                     	.db $92, $0D
09DEF 0D 0D                     	.db $0D, $0D
09DF1 F2                        	.db $F2
09DF2 4A 0D                     	.db $4A, $0D
09DF4 0B 0D                     	.db $0B, $0D
09DF6 0C 0D                     	.db $0C, $0D
09DF8 46 0D                     	.db $46, $0D
09DFA B3 0C                     	.db $B3, $0C
09DFC BD 0D                     	.db $BD, $0D
09DFE 34 0D                     	.db $34, $0D
09E00 0A 0D                     	.db $0A, $0D
09E02 A2 0D                     	.db $A2, $0D
09E04 BC 0C                     	.db $BC, $0C
09E06 6C 0D                     	.db $6C, $0D
09E08 51 0D                     	.db $51, $0D
09E0A 0D 0D                     	.db $0D, $0D
09E0C B5 0C                     	.db $B5, $0C
09E0E 19 0C                     	.db $19, $0C
09E10 0A 0C                     	.db $0A, $0C
09E12 0B 0C                     	.db $0B, $0C
09E14 96 0D                     	.db $96, $0D
09E16 CE 86                     	.db $CE, $86
09E18 2D 84                     	.db $2D, $84
09E1A 2B 82                     	.db $2B, $82
09E1C 0C 82                     	.db $0C, $82
09E1E 59 8C                     	.db $59, $8C
09E20 26 8A                     	.db $26, $8A
09E22 08 8A                     	.db $08, $8A
09E24 97 03                     	.db $97, $03
09E26 17 03                     	.db $17, $03
09E28 FF                        	.db $FF
09E29                           include "src/levels/6/6-3/6-3-area4.asm"
09E29                           ; Level 6-3, Area 4
09E29                           
09E29                           LevelData_6_3_Area4:
09E29                           	; Level Header
09E29                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09E29                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09E29                           	levelHeader 4, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $08, $0
09E29 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
09E2A 00                        	.db %11100000 | $08
09E2B 00                        	.db 4 << 4 | 0 << 2 | 0
09E2C                           	IFNDEF LEVEL_ENGINE_UPGRADES
09E2C 00                        		.db $0 << 3 | LevelMusic_Overworld
09E2D                           	ENDIF
09E2D                           	IFDEF LEVEL_ENGINE_UPGRADES
09E2D                           		.db $0 << 4 | LevelMusic_Overworld
09E2D                           	ENDIF
09E2D                           
09E2D 24 10                     	.db $24, $10
09E2F 28 0C                     	.db $28, $0C
09E31 F5 11 30                  	.db $F5, $11, $30
09E34 0E 11                     	.db $0E, $11
09E36 90 E7                     	.db $90, $E7
09E38 08 03                     	.db $08, $03
09E3A 09 EF                     	.db $09, $EF
09E3C 50 10                     	.db $50, $10
09E3E 28 11                     	.db $28, $11
09E40 6C 3F                     	.db $6C, $3F
09E42 1A 3E                     	.db $1A, $3E
09E44 1E 3F                     	.db $1E, $3F
09E46 40 10                     	.db $40, $10
09E48 22 11                     	.db $22, $11
09E4A 07 17                     	.db $07, $17
09E4C 59 0B                     	.db $59, $0B
09E4E F5 11 50                  	.db $F5, $11, $50
09E51 2C 37                     	.db $2C, $37
09E53 19 3C                     	.db $19, $3C
09E55 1E 33                     	.db $1E, $33
09E57 13 39                     	.db $13, $39
09E59 48 11                     	.db $48, $11
09E5B 19 E2                     	.db $19, $E2
09E5D 12 10                     	.db $12, $10
09E5F F2                        	.db $F2
09E60 2A 0A                     	.db $2A, $0A
09E62 F5 11 10                  	.db $F5, $11, $10
09E65 20 E1                     	.db $20, $E1
09E67 04 E1                     	.db $04, $E1
09E69 09 E2                     	.db $09, $E2
09E6B 4D 11                     	.db $4D, $11
09E6D 13 10                     	.db $13, $10
09E6F 28 11                     	.db $28, $11
09E71 FF                        	.db $FF
09E72                           include "src/levels/6/6-3/6-3-area5.asm"
09E72                           ; Level 6-3, Area 5
09E72                           
09E72                           LevelData_6_3_Area5:
09E72                           	; Level Header
09E72                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09E72                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09E72                           	levelHeader 1, LevelDirection_Horizontal, 4, 0, LevelMusic_Boss, 0, 3, $0a, $4
09E72 00                        	.db LevelDirection_Horizontal << 7 | 4 << 3 | 0
09E73 00                        	.db %11100000 | $0a
09E74 00                        	.db 1 << 4 | 0 << 2 | 3
09E75                           	IFNDEF LEVEL_ENGINE_UPGRADES
09E75 00                        		.db $4 << 3 | LevelMusic_Boss
09E76                           	ENDIF
09E76                           	IFDEF LEVEL_ENGINE_UPGRADES
09E76                           		.db $4 << 4 | LevelMusic_Boss
09E76                           	ENDIF
09E76                           
09E76 86 13                     	.db $86, $13
09E78 F5 11 42                  	.db $F5, $11, $42
09E7B F0 AF                     	.db $F0, $AF
09E7D C3 32                     	.db $C3, $32
09E7F 07 36                     	.db $07, $36
09E81 46 00                     	.db $46, $00
09E83 F0 11                     	.db $F0, $11
09E85 F0 6C                     	.db $F0, $6C
09E87 F1 4B                     	.db $F1, $4B
09E89 F1 CA                     	.db $F1, $CA
09E8B F5 11 60                  	.db $F5, $11, $60
09E8E FF                        	.db $FF
09E8F                           include "src/levels/6/6-3/6-3-area6.asm"
09E8F                           ; Level 6-3, Area 6
09E8F                           
09E8F                           LevelData_6_3_Area6:
09E8F                           	; Level Header
09E8F                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09E8F                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09E8F                           	levelHeader 1, LevelDirection_Horizontal, 5, 2, LevelMusic_Boss, 0, 3, $18, $5
09E8F 00                        	.db LevelDirection_Horizontal << 7 | 5 << 3 | 2
09E90 00                        	.db %11100000 | $18
09E91 00                        	.db 1 << 4 | 0 << 2 | 3
09E92                           	IFNDEF LEVEL_ENGINE_UPGRADES
09E92 00                        		.db $5 << 3 | LevelMusic_Boss
09E93                           	ENDIF
09E93                           	IFDEF LEVEL_ENGINE_UPGRADES
09E93                           		.db $5 << 4 | LevelMusic_Boss
09E93                           	ENDIF
09E93                           
09E93 F0 50                     	.db $F0, $50
09E95 F0 CD                     	.db $F0, $CD
09E97 F1 0C                     	.db $F1, $0C
09E99 F1 4F                     	.db $F1, $4F
09E9B F1 8E                     	.db $F1, $8E
09E9D F2                        	.db $F2
09E9E 8B 81                     	.db $8B, $81
09EA0 15 32                     	.db $15, $32
09EA2 32 00                     	.db $32, $00
09EA4 03 00                     	.db $03, $00
09EA6 04 00                     	.db $04, $00
09EA8 05 00                     	.db $05, $00
09EAA 06 00                     	.db $06, $00
09EAC 07 00                     	.db $07, $00
09EAE 08 00                     	.db $08, $00
09EB0 F0 50                     	.db $F0, $50
09EB2 F1 37                     	.db $F1, $37
09EB4 F1 6F                     	.db $F1, $6F
09EB6 F1 97                     	.db $F1, $97
09EB8 F1 CA                     	.db $F1, $CA
09EBA FF                        	.db $FF
09EBB                           ; -------------------------------
09EBB                           
09EBB                           
09EBB                           ; -------------------------------
09EBB                           ; World 7
09EBB                           
09EBB                           ; World 7-1
09EBB                           include "src/levels/7/7-1/7-1-area0.asm"
09EBB                           ; Level 7-1, Area 0
09EBB                           
09EBB                           LevelData_7_1_Area0:
09EBB                           	; Level Header
09EBB                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09EBB                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09EBB                           	levelHeader 0, LevelDirection_Vertical, 0, 0, LevelMusic_Overworld, 0, 0, $13, $0
09EBB 00                        	.db LevelDirection_Vertical << 7 | 0 << 3 | 0
09EBC 00                        	.db %11100000 | $13
09EBD 00                        	.db 0 << 4 | 0 << 2 | 0
09EBE                           	IFNDEF LEVEL_ENGINE_UPGRADES
09EBE 00                        		.db $0 << 3 | LevelMusic_Overworld
09EBF                           	ENDIF
09EBF                           	IFDEF LEVEL_ENGINE_UPGRADES
09EBF                           		.db $0 << 4 | LevelMusic_Overworld
09EBF                           	ENDIF
09EBF                           
09EBF 03 A3                     	.db $03, $A3
09EC1 F5 12 12                  	.db $F5, $12, $12
09EC4 43 E5                     	.db $43, $E5
09EC6 20 86                     	.db $20, $86
09EC8 01 86                     	.db $01, $86
09ECA 18 E3                     	.db $18, $E3
09ECC 3A E3                     	.db $3A, $E3
09ECE 30 EF                     	.db $30, $EF
09ED0 FF                        	.db $FF
09ED1                           include "src/levels/7/7-1/7-1-area1.asm"
09ED1                           ; Level 7-1, Area 1
09ED1                           
09ED1                           LevelData_7_1_Area1:
09ED1                           	; Level Header
09ED1                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09ED1                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09ED1                           	levelHeader 6, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 3, $08, $0
09ED1 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
09ED2 00                        	.db %11100000 | $08
09ED3 00                        	.db 6 << 4 | 0 << 2 | 3
09ED4                           	IFNDEF LEVEL_ENGINE_UPGRADES
09ED4 00                        		.db $0 << 3 | LevelMusic_Overworld
09ED5                           	ENDIF
09ED5                           	IFDEF LEVEL_ENGINE_UPGRADES
09ED5                           		.db $0 << 4 | LevelMusic_Overworld
09ED5                           	ENDIF
09ED5                           
09ED5 27 A9                     	.db $27, $A9
09ED7 74 23                     	.db $74, $23
09ED9 F5 12 20                  	.db $F5, $12, $20
09EDC 13 81                     	.db $13, $81
09EDE 04 81                     	.db $04, $81
09EE0 05 81                     	.db $05, $81
09EE2 0A E3                     	.db $0A, $E3
09EE4 22 E9                     	.db $22, $E9
09EE6 64 E3                     	.db $64, $E3
09EE8 B6 80                     	.db $B6, $80
09EEA 0C 80                     	.db $0C, $80
09EEC 3E 11                     	.db $3E, $11
09EEE 6C A6                     	.db $6C, $A6
09EF0 F5 12 00                  	.db $F5, $12, $00
09EF3 2D E2                     	.db $2D, $E2
09EF5 36 E5                     	.db $36, $E5
09EF7 0C 05                     	.db $0C, $05
09EF9 0D E4                     	.db $0D, $E4
09EFB 41 10                     	.db $41, $10
09EFD 7E 01                     	.db $7E, $01
09EFF 31 3C                     	.db $31, $3C
09F01 0F 33                     	.db $0F, $33
09F03 2E 80                     	.db $2E, $80
09F05 34 10                     	.db $34, $10
09F07 17 11                     	.db $17, $11
09F09 76 52                     	.db $76, $52
09F0B 07 2B                     	.db $07, $2B
09F0D 0A 22                     	.db $0A, $22
09F0F 15 C6                     	.db $15, $C6
09F11 1E 3A                     	.db $1E, $3A
09F13 23 80                     	.db $23, $80
09F15 0D 80                     	.db $0D, $80
09F17 3D 10                     	.db $3D, $10
09F19 69 26                     	.db $69, $26
09F1B 1D 00                     	.db $1D, $00
09F1D 1C E7                     	.db $1C, $E7
09F1F 49 80                     	.db $49, $80
09F21 57 21                     	.db $57, $21
09F23 33 04                     	.db $33, $04
09F25 13 00                     	.db $13, $00
09F27 11 EE                     	.db $11, $EE
09F29 F4                        	.db $F4
09F2A 42 0F                     	.db $42, $0F
09F2C 06 0F                     	.db $06, $0F
09F2E DC 0F                     	.db $DC, $0F
09F30 26 0F                     	.db $26, $0F
09F32 E7 0F                     	.db $E7, $0F
09F34 F2                        	.db $F2
09F35 90 0F                     	.db $90, $0F
09F37 1E 0F                     	.db $1E, $0F
09F39 E3 0F                     	.db $E3, $0F
09F3B 1D 0F                     	.db $1D, $0F
09F3D E9 0F                     	.db $E9, $0F
09F3F B6 C4                     	.db $B6, $C4
09F41 1D 0F                     	.db $1D, $0F
09F43 18 0A                     	.db $18, $0A
09F45 F5 12 50                  	.db $F5, $12, $50
09F48 FF                        	.db $FF
09F49                           include "src/levels/7/7-1/7-1-area2.asm"
09F49                           ; Level 7-1, Area 2
09F49                           
09F49                           LevelData_7_1_Area2:
09F49                           	; Level Header
09F49                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09F49                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09F49                           	levelHeader 3, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $08, $0
09F49 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
09F4A 00                        	.db %11100000 | $08
09F4B 00                        	.db 3 << 4 | 0 << 2 | 0
09F4C                           	IFNDEF LEVEL_ENGINE_UPGRADES
09F4C 00                        		.db $0 << 3 | LevelMusic_Overworld
09F4D                           	ENDIF
09F4D                           	IFDEF LEVEL_ENGINE_UPGRADES
09F4D                           		.db $0 << 4 | LevelMusic_Overworld
09F4D                           	ENDIF
09F4D                           
09F4D 3C 11                     	.db $3C, $11
09F4F 19 10                     	.db $19, $10
09F51 5F EB                     	.db $5F, $EB
09F53 34 E7                     	.db $34, $E7
09F55 0C E9                     	.db $0C, $E9
09F57 54 10                     	.db $54, $10
09F59 1B 29                     	.db $1B, $29
09F5B 5C E6                     	.db $5C, $E6
09F5D 31 29                     	.db $31, $29
09F5F 02 E8                     	.db $02, $E8
09F61 19 EA                     	.db $19, $EA
09F63 5C 29                     	.db $5C, $29
09F65 43 ED                     	.db $43, $ED
09F67 23 04                     	.db $23, $04
09F69 06 EA                     	.db $06, $EA
09F6B 10 EE                     	.db $10, $EE
09F6D 18 E7                     	.db $18, $E7
09F6F 12 EF                     	.db $12, $EF
09F71 23 EC                     	.db $23, $EC
09F73 2C A7                     	.db $2C, $A7
09F75 F5 12 33                  	.db $F5, $12, $33
09F78 71 29                     	.db $71, $29
09F7A 12 EB                     	.db $12, $EB
09F7C 20 29                     	.db $20, $29
09F7E 02 E5                     	.db $02, $E5
09F80 28 E5                     	.db $28, $E5
09F82 10 E3                     	.db $10, $E3
09F84 F4                        	.db $F4
09F85 95 0F                     	.db $95, $0F
09F87 DB 0F                     	.db $DB, $0F
09F89 CF 0F                     	.db $CF, $0F
09F8B 12 0F                     	.db $12, $0F
09F8D AB 0F                     	.db $AB, $0F
09F8F 81 0F                     	.db $81, $0F
09F91 FF                        	.db $FF
09F92                           include "src/levels/7/7-1/7-1-area3.asm"
09F92                           ; Level 7-1, Area 3
09F92                           
09F92                           LevelData_7_1_Area3:
09F92                           	; Level Header
09F92                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09F92                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09F92                           	levelHeader 3, LevelDirection_Vertical, 0, 0, LevelMusic_Overworld, 0, 0, $13, $0
09F92 00                        	.db LevelDirection_Vertical << 7 | 0 << 3 | 0
09F93 00                        	.db %11100000 | $13
09F94 00                        	.db 3 << 4 | 0 << 2 | 0
09F95                           	IFNDEF LEVEL_ENGINE_UPGRADES
09F95 00                        		.db $0 << 3 | LevelMusic_Overworld
09F96                           	ENDIF
09F96                           	IFDEF LEVEL_ENGINE_UPGRADES
09F96                           		.db $0 << 4 | LevelMusic_Overworld
09F96                           	ENDIF
09F96                           
09F96 64 A6                     	.db $64, $A6
09F98 0A A6                     	.db $0A, $A6
09F9A 22 E1                     	.db $22, $E1
09F9C 04 05                     	.db $04, $05
09F9E 05 E4                     	.db $05, $E4
09FA0 0A 05                     	.db $0A, $05
09FA2 0B E1                     	.db $0B, $E1
09FA4 37 AA                     	.db $37, $AA
09FA6 21 E5                     	.db $21, $E5
09FA8 07 05                     	.db $07, $05
09FAA 08 E5                     	.db $08, $E5
09FAC 66 AB                     	.db $66, $AB
09FAE 08 AB                     	.db $08, $AB
09FB0 14 AA                     	.db $14, $AA
09FB2 0A AA                     	.db $0A, $AA
09FB4 21 E2                     	.db $21, $E2
09FB6 0B E2                     	.db $0B, $E2
09FB8 80 EF                     	.db $80, $EF
09FBA 76 00                     	.db $76, $00
09FBC 07 00                     	.db $07, $00
09FBE 08 00                     	.db $08, $00
09FC0 09 00                     	.db $09, $00
09FC2 12 A7                     	.db $12, $A7
09FC4 05 00                     	.db $05, $00
09FC6 0A 00                     	.db $0A, $00
09FC8 15 00                     	.db $15, $00
09FCA 0A 00                     	.db $0A, $00
09FCC 10 E1                     	.db $10, $E1
09FCE 02 05                     	.db $02, $05
09FD0 03 EC                     	.db $03, $EC
09FD2 85 00                     	.db $85, $00
09FD4 0A 00                     	.db $0A, $00
09FD6 0C 00                     	.db $0C, $00
09FD8 10 EF                     	.db $10, $EF
09FDA 30 EF                     	.db $30, $EF
09FDC 3A E3                     	.db $3A, $E3
09FDE 13 A3                     	.db $13, $A3
09FE0 F5 12 23                  	.db $F5, $12, $23
09FE3 20 E2                     	.db $20, $E2
09FE5 03 05                     	.db $03, $05
09FE7 04 EB                     	.db $04, $EB
09FE9 F4                        	.db $F4
09FEA 35 C4                     	.db $35, $C4
09FEC 23 0F                     	.db $23, $0F
09FEE 0B 0F                     	.db $0B, $0F
09FF0 17 0A                     	.db $17, $0A
09FF2 F5 12 40                  	.db $F5, $12, $40
09FF5 C2 0F                     	.db $C2, $0F
09FF7 0C 0F                     	.db $0C, $0F
09FF9 FF                        	.db $FF
09FFA                           include "src/levels/7/7-1/7-1-area4.asm"
09FFA                           ; Level 7-1, Area 4
09FFA                           
09FFA                           LevelData_7_1_Area4:
09FFA                           	; Level Header
09FFA                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09FFA                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09FFA                           	levelHeader 1, LevelDirection_Horizontal, 4, 1, LevelMusic_Boss, 0, 0, $0a, $0
09FFA 00                        	.db LevelDirection_Horizontal << 7 | 4 << 3 | 1
09FFB 00                        	.db %11100000 | $0a
09FFC 00                        	.db 1 << 4 | 0 << 2 | 0
09FFD                           	IFNDEF LEVEL_ENGINE_UPGRADES
09FFD 00                        		.db $0 << 3 | LevelMusic_Boss
09FFE                           	ENDIF
09FFE                           	IFDEF LEVEL_ENGINE_UPGRADES
09FFE                           		.db $0 << 4 | LevelMusic_Boss
09FFE                           	ENDIF
09FFE                           
09FFE 48 0A                     	.db $48, $0A
0A000 F5 12 30                  	.db $F5, $12, $30
0A003 0C 33                     	.db $0C, $33
0A005 F0 8B                     	.db $F0, $8B
0A007 F1 6C                     	.db $F1, $6C
0A009 F2                        	.db $F2
0A00A 74 39                     	.db $74, $39
0A00C 1A 43                     	.db $1A, $43
0A00E 1A 43                     	.db $1A, $43
0A010 00 00                     	.db $00, $00
0A012 F0 8D                     	.db $F0, $8D
0A014 F1 4C                     	.db $F1, $4C
0A016 F1 CA                     	.db $F1, $CA
0A018 F5 13 00                  	.db $F5, $13, $00
0A01B FF                        	.db $FF
0A01C                           include "src/levels/7/7-1/7-1-area5.asm"
0A01C                           ; Level 7-1, Area 5
0A01C                           
0A01C                           LevelData_7_1_Area5:
0A01C                           	; Level Header
0A01C                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0A01C                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0A01C                           	levelHeader 0, LevelDirection_Horizontal, 4, 1, LevelMusic_Underground, 0, 0, $0a, $0
0A01C 00                        	.db LevelDirection_Horizontal << 7 | 4 << 3 | 1
0A01D 00                        	.db %11100000 | $0a
0A01E 00                        	.db 0 << 4 | 0 << 2 | 0
0A01F                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A01F 00                        		.db $0 << 3 | LevelMusic_Underground
0A020                           	ENDIF
0A020                           	IFDEF LEVEL_ENGINE_UPGRADES
0A020                           		.db $0 << 4 | LevelMusic_Underground
0A020                           	ENDIF
0A020                           
0A020 4C 00                     	.db $4C, $00
0A022 21 2D                     	.db $21, $2D
0A024 02 21                     	.db $02, $21
0A026 03 21                     	.db $03, $21
0A028 04 21                     	.db $04, $21
0A02A 05 21                     	.db $05, $21
0A02C 06 26                     	.db $06, $26
0A02E 07 51                     	.db $07, $51
0A030 11 38                     	.db $11, $38
0A032 3A 32                     	.db $3A, $32
0A034 17 0A                     	.db $17, $0A
0A036 F5 12 16                  	.db $F5, $12, $16
0A039 F0 3C                     	.db $F0, $3C
0A03B F1 EA                     	.db $F1, $EA
0A03D FF                        	.db $FF
0A03E                           
0A03E                           ; World 7-2
0A03E                           include "src/levels/7/7-2/7-2-area0.asm"
0A03E                           ; Level 7-2, Area 0
0A03E                           
0A03E                           LevelData_7_2_Area0:
0A03E                           	; Level Header
0A03E                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0A03E                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0A03E                           	levelHeader 2, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $1f, $0
0A03E 00                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
0A03F 00                        	.db %11100000 | $1f
0A040 00                        	.db 2 << 4 | 0 << 2 | 0
0A041                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A041 00                        		.db $0 << 3 | LevelMusic_Overworld
0A042                           	ENDIF
0A042                           	IFDEF LEVEL_ENGINE_UPGRADES
0A042                           		.db $0 << 4 | LevelMusic_Overworld
0A042                           	ENDIF
0A042                           
0A042 80 E5                     	.db $80, $E5
0A044 0D E5                     	.db $0D, $E5
0A046 2A E5                     	.db $2A, $E5
0A048 36 E5                     	.db $36, $E5
0A04A 52 10                     	.db $52, $10
0A04C 1A 10                     	.db $1A, $10
0A04E 1C 10                     	.db $1C, $10
0A050 63 E6                     	.db $63, $E6
0A052 0B E6                     	.db $0B, $E6
0A054 62 10                     	.db $62, $10
0A056 47 B5                     	.db $47, $B5
0A058 52 65                     	.db $52, $65
0A05A 27 E8                     	.db $27, $E8
0A05C F5 13 10                  	.db $F5, $13, $10
0A05F F4                        	.db $F4
0A060 20 C4                     	.db $20, $C4
0A062 4F 0F                     	.db $4F, $0F
0A064 F2                        	.db $F2
0A065 95 0F                     	.db $95, $0F
0A067 0E 0F                     	.db $0E, $0F
0A069 68 19                     	.db $68, $19
0A06B 0E 19                     	.db $0E, $19
0A06D 3B 1D                     	.db $3B, $1D
0A06F 0E 1D                     	.db $0E, $1D
0A071 27 40                     	.db $27, $40
0A073 28 1C                     	.db $28, $1C
0A075 28 0B                     	.db $28, $0B
0A077 FF                        	.db $FF
0A078                           include "src/levels/7/7-2/7-2-area1.asm"
0A078                           ; Level 7-2, Area 1
0A078                           
0A078                           LevelData_7_2_Area1:
0A078                           	; Level Header
0A078                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0A078                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0A078                           	levelHeader 6, LevelDirection_Horizontal, 4, 1, LevelMusic_Underground, 1, 1, $0a, $0
0A078 00                        	.db LevelDirection_Horizontal << 7 | 4 << 3 | 1
0A079 00                        	.db %11100000 | $0a
0A07A 00                        	.db 6 << 4 | 1 << 2 | 1
0A07B                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A07B 00                        		.db $0 << 3 | LevelMusic_Underground
0A07C                           	ENDIF
0A07C                           	IFDEF LEVEL_ENGINE_UPGRADES
0A07C                           		.db $0 << 4 | LevelMusic_Underground
0A07C                           	ENDIF
0A07C                           
0A07C 87 13                     	.db $87, $13
0A07E F5 13 02                  	.db $F5, $13, $02
0A081 22 3D                     	.db $22, $3D
0A083 F0 50                     	.db $F0, $50
0A085 85 84                     	.db $85, $84
0A087 0B 84                     	.db $0B, $84
0A089 6F 04                     	.db $6F, $04
0A08B 10 3E                     	.db $10, $3E
0A08D F0 34                     	.db $F0, $34
0A08F F0 70                     	.db $F0, $70
0A091 F1 14                     	.db $F1, $14
0A093 F1 50                     	.db $F1, $50
0A095 F1 94                     	.db $F1, $94
0A097 F1 B0                     	.db $F1, $B0
0A099 F1 EF                     	.db $F1, $EF
0A09B D1 4E                     	.db $D1, $4E
0A09D 42 7D                     	.db $42, $7D
0A09F F0 17                     	.db $F0, $17
0A0A1 F0 50                     	.db $F0, $50
0A0A3 CD 04                     	.db $CD, $04
0A0A5 10 4C                     	.db $10, $4C
0A0A7 0D 82                     	.db $0D, $82
0A0A9 0E 43                     	.db $0E, $43
0A0AB 20 7C                     	.db $20, $7C
0A0AD 0E 75                     	.db $0E, $75
0A0AF F1 14                     	.db $F1, $14
0A0B1 F1 50                     	.db $F1, $50
0A0B3 A2 3D                     	.db $A2, $3D
0A0B5 27 80                     	.db $27, $80
0A0B7 17 A4                     	.db $17, $A4
0A0B9 F5 13 60                  	.db $F5, $13, $60
0A0BC 0E 4F                     	.db $0E, $4F
0A0BE 14 81                     	.db $14, $81
0A0C0 27 03                     	.db $27, $03
0A0C2 90 35                     	.db $90, $35
0A0C4 3E 46                     	.db $3E, $46
0A0C6 24 76                     	.db $24, $76
0A0C8 0C 78                     	.db $0C, $78
0A0CA 38 A6                     	.db $38, $A6
0A0CC F5 13 22                  	.db $F5, $13, $22
0A0CF 86 84                     	.db $86, $84
0A0D1 07 84                     	.db $07, $84
0A0D3 08 84                     	.db $08, $84
0A0D5 45 80                     	.db $45, $80
0A0D7 F1 2A                     	.db $F1, $2A
0A0D9 FF                        	.db $FF
0A0DA                           include "src/levels/7/7-2/7-2-area2.asm"
0A0DA                           ; Level 7-2, Area 2
0A0DA                           
0A0DA                           LevelData_7_2_Area2:
0A0DA                           	; Level Header
0A0DA                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0A0DA                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0A0DA                           	levelHeader 9, LevelDirection_Horizontal, 4, 1, LevelMusic_Underground, 1, 1, $0a, $0
0A0DA 00                        	.db LevelDirection_Horizontal << 7 | 4 << 3 | 1
0A0DB 00                        	.db %11100000 | $0a
0A0DC 00                        	.db 9 << 4 | 1 << 2 | 1
0A0DD                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A0DD 00                        		.db $0 << 3 | LevelMusic_Underground
0A0DE                           	ENDIF
0A0DE                           	IFDEF LEVEL_ENGINE_UPGRADES
0A0DE                           		.db $0 << 4 | LevelMusic_Underground
0A0DE                           	ENDIF
0A0DE                           
0A0DE 88 0A                     	.db $88, $0A
0A0E0 F5 13 93                  	.db $F5, $13, $93
0A0E3 13 2B                     	.db $13, $2B
0A0E5 05 0F                     	.db $05, $0F
0A0E7 0B 0F                     	.db $0B, $0F
0A0E9 13 0F                     	.db $13, $0F
0A0EB 0D 0F                     	.db $0D, $0F
0A0ED 24 2A                     	.db $24, $2A
0A0EF 0C 26                     	.db $0C, $26
0A0F1 F0 50                     	.db $F0, $50
0A0F3 F0 EF                     	.db $F0, $EF
0A0F5 F1 50                     	.db $F1, $50
0A0F7 F1 EA                     	.db $F1, $EA
0A0F9 38 A9                     	.db $38, $A9
0A0FB F5 13 86                  	.db $F5, $13, $86
0A0FE 3C 81                     	.db $3C, $81
0A100 0D 80                     	.db $0D, $80
0A102 3A A3                     	.db $3A, $A3
0A104 5C 81                     	.db $5C, $81
0A106 1D 80                     	.db $1D, $80
0A108 F0 10                     	.db $F0, $10
0A10A F0 91                     	.db $F0, $91
0A10C F1 90                     	.db $F1, $90
0A10E 62 80                     	.db $62, $80
0A110 03 81                     	.db $03, $81
0A112 35 A3                     	.db $35, $A3
0A114 07 A8                     	.db $07, $A8
0A116 F5 13 16                  	.db $F5, $13, $16
0A119 47 03                     	.db $47, $03
0A11B 13 81                     	.db $13, $81
0A11D 12 80                     	.db $12, $80
0A11F 17 03                     	.db $17, $03
0A121 F0 91                     	.db $F0, $91
0A123 F1 0A                     	.db $F1, $0A
0A125 28 A9                     	.db $28, $A9
0A127 F5 13 73                  	.db $F5, $13, $73
0A12A 3C 81                     	.db $3C, $81
0A12C 0D 80                     	.db $0D, $80
0A12E 3A A3                     	.db $3A, $A3
0A130 5C 81                     	.db $5C, $81
0A132 1D 80                     	.db $1D, $80
0A134 F1 11                     	.db $F1, $11
0A136 F1 90                     	.db $F1, $90
0A138 62 80                     	.db $62, $80
0A13A 03 81                     	.db $03, $81
0A13C 35 A3                     	.db $35, $A3
0A13E 53 81                     	.db $53, $81
0A140 08 0A                     	.db $08, $0A
0A142 F5 13 66                  	.db $F5, $13, $66
0A145 12 80                     	.db $12, $80
0A147 F0 91                     	.db $F0, $91
0A149 F0 FB                     	.db $F0, $FB
0A14B F1 4A                     	.db $F1, $4A
0A14D 38 A7                     	.db $38, $A7
0A14F F5 13 41                  	.db $F5, $13, $41
0A152 98 4E                     	.db $98, $4E
0A154 F1 11                     	.db $F1, $11
0A156 F1 CF                     	.db $F1, $CF
0A158 97 AB                     	.db $97, $AB
0A15A F5 13 70                  	.db $F5, $13, $70
0A15D A7 03                     	.db $A7, $03
0A15F F0 F0                     	.db $F0, $F0
0A161 F1 CA                     	.db $F1, $CA
0A163 98 0A                     	.db $98, $0A
0A165 F5 13 43                  	.db $F5, $13, $43
0A168 25 3D                     	.db $25, $3D
0A16A F0 AF                     	.db $F0, $AF
0A16C 62 A7                     	.db $62, $A7
0A16E F5 13 44                  	.db $F5, $13, $44
0A171 86 2D                     	.db $86, $2D
0A173 16 0F                     	.db $16, $0F
0A175 19 0F                     	.db $19, $0F
0A177 0F 0F                     	.db $0F, $0F
0A179 1C 0F                     	.db $1C, $0F
0A17B 1B 26                     	.db $1B, $26
0A17D 0D 2A                     	.db $0D, $2A
0A17F F0 6A                     	.db $F0, $6A
0A181 F0 DC                     	.db $F0, $DC
0A183 7C 0A                     	.db $7C, $0A
0A185 F5 13 32                  	.db $F5, $13, $32
0A188 52 0F                     	.db $52, $0F
0A18A F0 6E                     	.db $F0, $6E
0A18C F1 CA                     	.db $F1, $CA
0A18E FF                        	.db $FF
0A18F                           include "src/levels/7/7-2/7-2-area3.asm"
0A18F                           ; Level 7-2, Area 3
0A18F                           
0A18F                           LevelData_7_2_Area3:
0A18F                           	; Level Header
0A18F                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0A18F                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0A18F                           	levelHeader 3, LevelDirection_Horizontal, 4, 1, LevelMusic_Underground, 1, 0, $0a, $0
0A18F 00                        	.db LevelDirection_Horizontal << 7 | 4 << 3 | 1
0A190 00                        	.db %11100000 | $0a
0A191 00                        	.db 3 << 4 | 1 << 2 | 0
0A192                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A192 00                        		.db $0 << 3 | LevelMusic_Underground
0A193                           	ENDIF
0A193                           	IFDEF LEVEL_ENGINE_UPGRADES
0A193                           		.db $0 << 4 | LevelMusic_Underground
0A193                           	ENDIF
0A193                           
0A193 5C 40                     	.db $5C, $40
0A195 1C A4                     	.db $1C, $A4
0A197 25 0A                     	.db $25, $0A
0A199 F5 13 63                  	.db $F5, $13, $63
0A19C 24 33                     	.db $24, $33
0A19E F0 50                     	.db $F0, $50
0A1A0 80 4F                     	.db $80, $4F
0A1A2 10 A7                     	.db $10, $A7
0A1A4 05 A7                     	.db $05, $A7
0A1A6 0C A7                     	.db $0C, $A7
0A1A8 80 4F                     	.db $80, $4F
0A1AA 60 4F                     	.db $60, $4F
0A1AC 10 4F                     	.db $10, $4F
0A1AE 10 A5                     	.db $10, $A5
0A1B0 35 35                     	.db $35, $35
0A1B2 13 0A                     	.db $13, $0A
0A1B4 F5 13 29                  	.db $F5, $13, $29
0A1B7 20 4F                     	.db $20, $4F
0A1B9 10 4F                     	.db $10, $4F
0A1BB 90 A3                     	.db $90, $A3
0A1BD 28 0A                     	.db $28, $0A
0A1BF F5 13 69                  	.db $F5, $13, $69
0A1C2 F0 11                     	.db $F0, $11
0A1C4 F1 4A                     	.db $F1, $4A
0A1C6 FF                        	.db $FF
0A1C7                           include "src/levels/7/7-2/7-2-area4.asm"
0A1C7                           ; Level 7-2, Area 4
0A1C7                           
0A1C7                           LevelData_7_2_Area4:
0A1C7                           	; Level Header
0A1C7                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0A1C7                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0A1C7                           	levelHeader 9, LevelDirection_Horizontal, 4, 1, LevelMusic_Boss, 1, 1, $0a, $0
0A1C7 00                        	.db LevelDirection_Horizontal << 7 | 4 << 3 | 1
0A1C8 00                        	.db %11100000 | $0a
0A1C9 00                        	.db 9 << 4 | 1 << 2 | 1
0A1CA                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A1CA 00                        		.db $0 << 3 | LevelMusic_Boss
0A1CB                           	ENDIF
0A1CB                           	IFDEF LEVEL_ENGINE_UPGRADES
0A1CB                           		.db $0 << 4 | LevelMusic_Boss
0A1CB                           	ENDIF
0A1CB                           
0A1CB 3F A7                     	.db $3F, $A7
0A1CD 36 80                     	.db $36, $80
0A1CF 16 A3                     	.db $16, $A3
0A1D1 43 0A                     	.db $43, $0A
0A1D3 F5 13 80                  	.db $F5, $13, $80
0A1D6 19 01                     	.db $19, $01
0A1D8 F0 50                     	.db $F0, $50
0A1DA 80 87                     	.db $80, $87
0A1DC 01 87                     	.db $01, $87
0A1DE 02 3D                     	.db $02, $3D
0A1E0 47 80                     	.db $47, $80
0A1E2 0B 81                     	.db $0B, $81
0A1E4 0E 81                     	.db $0E, $81
0A1E6 0F 81                     	.db $0F, $81
0A1E8 17 A4                     	.db $17, $A4
0A1EA F5 13 25                  	.db $F5, $13, $25
0A1ED 37 03                     	.db $37, $03
0A1EF 70 3F                     	.db $70, $3F
0A1F1 55 0F                     	.db $55, $0F
0A1F3 0B 0F                     	.db $0B, $0F
0A1F5 14 0F                     	.db $14, $0F
0A1F7 08 09                     	.db $08, $09
0A1F9 F5 13 47                  	.db $F5, $13, $47
0A1FC 0C 0F                     	.db $0C, $0F
0A1FE 90 3F                     	.db $90, $3F
0A200 52 80                     	.db $52, $80
0A202 05 80                     	.db $05, $80
0A204 17 0A                     	.db $17, $0A
0A206 F5 13 27                  	.db $F5, $13, $27
0A209 7A A6                     	.db $7A, $A6
0A20B 0D AB                     	.db $0D, $AB
0A20D 20 37                     	.db $20, $37
0A20F 08 87                     	.db $08, $87
0A211 09 87                     	.db $09, $87
0A213 8D 03                     	.db $8D, $03
0A215 F5 13 28                  	.db $F5, $13, $28
0A218 F1 CA                     	.db $F1, $CA
0A21A F3                        	.db $F3
0A21B F2                        	.db $F2
0A21C B7 0A                     	.db $B7, $0A
0A21E F5 13 42                  	.db $F5, $13, $42
0A221 F0 50                     	.db $F0, $50
0A223 E3 00                     	.db $E3, $00
0A225 08 00                     	.db $08, $00
0A227 13 0F                     	.db $13, $0F
0A229 08 0F                     	.db $08, $0F
0A22B F2                        	.db $F2
0A22C A4 0F                     	.db $A4, $0F
0A22E 12 0F                     	.db $12, $0F
0A230 03 0F                     	.db $03, $0F
0A232 05 0F                     	.db $05, $0F
0A234 06 0F                     	.db $06, $0F
0A236 F1 4F                     	.db $F1, $4F
0A238 F1 8A                     	.db $F1, $8A
0A23A F5 13 50                  	.db $F5, $13, $50
0A23D FF                        	.db $FF
0A23E                           include "src/levels/7/7-2/7-2-area5.asm"
0A23E                           ; Level 7-2, Area 5
0A23E                           
0A23E                           LevelData_7_2_Area5:
0A23E                           	; Level Header
0A23E                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0A23E                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0A23E                           	levelHeader 2, LevelDirection_Horizontal, 5, 2, LevelMusic_Wart, 0, 2, $0a, $1
0A23E 00                        	.db LevelDirection_Horizontal << 7 | 5 << 3 | 2
0A23F 00                        	.db %11100000 | $0a
0A240 00                        	.db 2 << 4 | 0 << 2 | 2
0A241                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A241 00                        		.db $1 << 3 | LevelMusic_Wart
0A242                           	ENDIF
0A242                           	IFDEF LEVEL_ENGINE_UPGRADES
0A242                           		.db $1 << 4 | LevelMusic_Wart
0A242                           	ENDIF
0A242                           
0A242 3D 2C                     	.db $3D, $2C
0A244 62 48                     	.db $62, $48
0A246 F0 4F                     	.db $F0, $4F
0A248 F0 AC                     	.db $F0, $AC
0A24A F1 6E                     	.db $F1, $6E
0A24C 90 2C                     	.db $90, $2C
0A24E 03 2C                     	.db $03, $2C
0A250 06 2C                     	.db $06, $2C
0A252 1D 2C                     	.db $1D, $2C
0A254 4F 32                     	.db $4F, $32
0A256 29 44                     	.db $29, $44
0A258 F1 3A                     	.db $F1, $3A
0A25A F1 DC                     	.db $F1, $DC
0A25C 90 2C                     	.db $90, $2C
0A25E 03 2C                     	.db $03, $2C
0A260 06 2C                     	.db $06, $2C
0A262 09 2C                     	.db $09, $2C
0A264 34 32                     	.db $34, $32
0A266 22 1A                     	.db $22, $1A
0A268 10 1A                     	.db $10, $1A
0A26A 04 1A                     	.db $04, $1A
0A26C 08 0F                     	.db $08, $0F
0A26E 09 44                     	.db $09, $44
0A270 12 41                     	.db $12, $41
0A272 10 45                     	.db $10, $45
0A274 F1 7A                     	.db $F1, $7A
0A276 F1 D8                     	.db $F1, $D8
0A278 FF                        	.db $FF
0A279                           include "src/levels/7/7-2/7-2-area6.asm"
0A279                           ; Level 7-2, Area 6
0A279                           
0A279                           LevelData_7_2_Area6:
0A279                           	; Level Header
0A279                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0A279                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0A279                           	levelHeader 9, LevelDirection_Vertical, 4, 1, LevelMusic_Underground, 1, 3, $00, $0
0A279 00                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 1
0A27A 00                        	.db %11100000 | $00
0A27B 00                        	.db 9 << 4 | 1 << 2 | 3
0A27C                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A27C 00                        		.db $0 << 3 | LevelMusic_Underground
0A27D                           	ENDIF
0A27D                           	IFDEF LEVEL_ENGINE_UPGRADES
0A27D                           		.db $0 << 4 | LevelMusic_Underground
0A27D                           	ENDIF
0A27D                           
0A27D 08 A5                     	.db $08, $A5
0A27F F5 13 14                  	.db $F5, $13, $14
0A282 92 4B                     	.db $92, $4B
0A284 42 4B                     	.db $42, $4B
0A286 F0 55                     	.db $F0, $55
0A288 F1 DC                     	.db $F1, $DC
0A28A 33 29                     	.db $33, $29
0A28C 22 4B                     	.db $22, $4B
0A28E 42 4B                     	.db $42, $4B
0A290 3C 29                     	.db $3C, $29
0A292 22 4B                     	.db $22, $4B
0A294 F0 75                     	.db $F0, $75
0A296 F1 1C                     	.db $F1, $1C
0A298 F1 95                     	.db $F1, $95
0A29A 42 4B                     	.db $42, $4B
0A29C 3C 29                     	.db $3C, $29
0A29E 22 4B                     	.db $22, $4B
0A2A0 42 4B                     	.db $42, $4B
0A2A2 33 29                     	.db $33, $29
0A2A4 F0 5C                     	.db $F0, $5C
0A2A6 F0 D5                     	.db $F0, $D5
0A2A8 F1 7C                     	.db $F1, $7C
0A2AA 22 4B                     	.db $22, $4B
0A2AC 37 29                     	.db $37, $29
0A2AE 12 4B                     	.db $12, $4B
0A2B0 7A 0A                     	.db $7A, $0A
0A2B2 F5 13 30                  	.db $F5, $13, $30
0A2B5 F0 15                     	.db $F0, $15
0A2B7 F1 A0                     	.db $F1, $A0
0A2B9 F3                        	.db $F3
0A2BA F2                        	.db $F2
0A2BB 48 AA                     	.db $48, $AA
0A2BD 27 0A                     	.db $27, $0A
0A2BF F5 13 24                  	.db $F5, $13, $24
0A2C2 28 03                     	.db $28, $03
0A2C4 F0 97                     	.db $F0, $97
0A2C6 F1 00                     	.db $F1, $00
0A2C8 78 AE                     	.db $78, $AE
0A2CA 5A 29                     	.db $5A, $29
0A2CC 15 29                     	.db $15, $29
0A2CE 38 03                     	.db $38, $03
0A2D0 3A 29                     	.db $3A, $29
0A2D2 16 29                     	.db $16, $29
0A2D4 F0 76                     	.db $F0, $76
0A2D6 F1 20                     	.db $F1, $20
0A2D8 F1 56                     	.db $F1, $56
0A2DA 28 A4                     	.db $28, $A4
0A2DC 18 03                     	.db $18, $03
0A2DE 3B 29                     	.db $3B, $29
0A2E0 14 29                     	.db $14, $29
0A2E2 18 A5                     	.db $18, $A5
0A2E4 28 03                     	.db $28, $03
0A2E6 46 29                     	.db $46, $29
0A2E8 0A 29                     	.db $0A, $29
0A2EA 18 AB                     	.db $18, $AB
0A2EC F0 20                     	.db $F0, $20
0A2EE F0 56                     	.db $F0, $56
0A2F0 F1 00                     	.db $F1, $00
0A2F2 F1 36                     	.db $F1, $36
0A2F4 28 03                     	.db $28, $03
0A2F6 B7 0A                     	.db $B7, $0A
0A2F8 F5 13 33                  	.db $F5, $13, $33
0A2FB F0 00                     	.db $F0, $00
0A2FD F1 17                     	.db $F1, $17
0A2FF F1 A0                     	.db $F1, $A0
0A301 FF                        	.db $FF
0A302                           include "src/levels/7/7-2/7-2-area7.asm"
0A302                           ; Level 7-2, Area 7
0A302                           
0A302                           LevelData_7_2_Area7:
0A302                           	; Level Header
0A302                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0A302                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0A302                           	levelHeader 3, LevelDirection_Vertical, 4, 1, LevelMusic_Underground, 1, 1, $00, $0
0A302 00                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 1
0A303 00                        	.db %11100000 | $00
0A304 00                        	.db 3 << 4 | 1 << 2 | 1
0A305                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A305 00                        		.db $0 << 3 | LevelMusic_Underground
0A306                           	ENDIF
0A306                           	IFDEF LEVEL_ENGINE_UPGRADES
0A306                           		.db $0 << 4 | LevelMusic_Underground
0A306                           	ENDIF
0A306                           
0A306 08 A4                     	.db $08, $A4
0A308 F5 13 26                  	.db $F5, $13, $26
0A30B 76 33                     	.db $76, $33
0A30D 34 37                     	.db $34, $37
0A30F 31 33                     	.db $31, $33
0A311 0B 43                     	.db $0B, $43
0A313 F0 54                     	.db $F0, $54
0A315 35 36                     	.db $35, $36
0A317 15 46                     	.db $15, $46
0A319 25 46                     	.db $25, $46
0A31B 15 36                     	.db $15, $36
0A31D 22 42                     	.db $22, $42
0A31F 33 44                     	.db $33, $44
0A321 38 33                     	.db $38, $33
0A323 F0 F5                     	.db $F0, $F5
0A325 3B 42                     	.db $3B, $42
0A327 26 73                     	.db $26, $73
0A329 0C 31                     	.db $0C, $31
0A32B 46 35                     	.db $46, $35
0A32D 33 39                     	.db $33, $39
0A32F 36 33                     	.db $36, $33
0A331 F0 9C                     	.db $F0, $9C
0A333 F0 B4                     	.db $F0, $B4
0A335 33 49                     	.db $33, $49
0A337 32 49                     	.db $32, $49
0A339 2C 42                     	.db $2C, $42
0A33B 24 37                     	.db $24, $37
0A33D 17 80                     	.db $17, $80
0A33F 11 32                     	.db $11, $32
0A341 07 A4                     	.db $07, $A4
0A343 F5 13 23                  	.db $F5, $13, $23
0A346 37 03                     	.db $37, $03
0A348 F1 A0                     	.db $F1, $A0
0A34A FF                        	.db $FF
0A34B                           include "src/levels/7/7-2/7-2-area8.asm"
0A34B                           ; Level 7-2, Area 8
0A34B                           
0A34B                           LevelData_7_2_Area8:
0A34B                           	; Level Header
0A34B                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0A34B                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0A34B                           	levelHeader 6, LevelDirection_Vertical, 4, 1, LevelMusic_Underground, 1, 0, $00, $0
0A34B 00                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 1
0A34C 00                        	.db %11100000 | $00
0A34D 00                        	.db 6 << 4 | 1 << 2 | 0
0A34E                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A34E 00                        		.db $0 << 3 | LevelMusic_Underground
0A34F                           	ENDIF
0A34F                           	IFDEF LEVEL_ENGINE_UPGRADES
0A34F                           		.db $0 << 4 | LevelMusic_Underground
0A34F                           	ENDIF
0A34F                           
0A34F 28 A8                     	.db $28, $A8
0A351 2C 0A                     	.db $2C, $0A
0A353 F5 13 40                  	.db $F5, $13, $40
0A356 29 45                     	.db $29, $45
0A358 F0 54                     	.db $F0, $54
0A35A 95 35                     	.db $95, $35
0A35C 52 32                     	.db $52, $32
0A35E 45 33                     	.db $45, $33
0A360 48 34                     	.db $48, $34
0A362 34 37                     	.db $34, $37
0A364 32 33                     	.db $32, $33
0A366 2C 31                     	.db $2C, $31
0A368 46 32                     	.db $46, $32
0A36A 38 33                     	.db $38, $33
0A36C F0 95                     	.db $F0, $95
0A36E 35 35                     	.db $35, $35
0A370 52 33                     	.db $52, $33
0A372 15 AD                     	.db $15, $AD
0A374 07 33                     	.db $07, $33
0A376 12 0A                     	.db $12, $0A
0A378 F5 13 90                  	.db $F5, $13, $90
0A37B 22 32                     	.db $22, $32
0A37D 05 03                     	.db $05, $03
0A37F 0A 31                     	.db $0A, $31
0A381 1A A9                     	.db $1A, $A9
0A383 2A 03                     	.db $2A, $03
0A385 0B 32                     	.db $0B, $32
0A387 F1 5C                     	.db $F1, $5C
0A389 81 86                     	.db $81, $86
0A38B 14 30                     	.db $14, $30
0A38D 06 33                     	.db $06, $33
0A38F 0B 30                     	.db $0B, $30
0A391 34 36                     	.db $34, $36
0A393 31 AF                     	.db $31, $AF
0A395 04 36                     	.db $04, $36
0A397 F0 D4                     	.db $F0, $D4
0A399 31 03                     	.db $31, $03
0A39B 74 A6                     	.db $74, $A6
0A39D 06 A6                     	.db $06, $A6
0A39F 07 82                     	.db $07, $82
0A3A1 08 A6                     	.db $08, $A6
0A3A3 0A A6                     	.db $0A, $A6
0A3A5 0D AE                     	.db $0D, $AE
0A3A7 F0 20                     	.db $F0, $20
0A3A9 F1 14                     	.db $F1, $14
0A3AB 7D 03                     	.db $7D, $03
0A3AD 4E A8                     	.db $4E, $A8
0A3AF 37 40                     	.db $37, $40
0A3B1 17 A6                     	.db $17, $A6
0A3B3 F5 13 21                  	.db $F5, $13, $21
0A3B6 57 03                     	.db $57, $03
0A3B8 F0 00                     	.db $F0, $00
0A3BA F0 94                     	.db $F0, $94
0A3BC F1 A0                     	.db $F1, $A0
0A3BE F4                        	.db $F4
0A3BF D6 0F                     	.db $D6, $0F
0A3C1 09 0F                     	.db $09, $0F
0A3C3 53 0F                     	.db $53, $0F
0A3C5 46 0F                     	.db $46, $0F
0A3C7 3A 0F                     	.db $3A, $0F
0A3C9 B7 0F                     	.db $B7, $0F
0A3CB 2A 0F                     	.db $2A, $0F
0A3CD B6 0F                     	.db $B6, $0F
0A3CF FF                        	.db $FF
0A3D0                           include "src/levels/7/7-2/7-2-area9.asm"
0A3D0                           ; Level 7-2, Area 9
0A3D0                           
0A3D0                           LevelData_7_2_Area9:
0A3D0                           	; Level Header
0A3D0                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0A3D0                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0A3D0                           	levelHeader 3, LevelDirection_Vertical, 0, 1, LevelMusic_Overworld, 0, 0, $1e, $0
0A3D0 00                        	.db LevelDirection_Vertical << 7 | 0 << 3 | 1
0A3D1 00                        	.db %11100000 | $1e
0A3D2 00                        	.db 3 << 4 | 0 << 2 | 0
0A3D3                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A3D3 00                        		.db $0 << 3 | LevelMusic_Overworld
0A3D4                           	ENDIF
0A3D4                           	IFDEF LEVEL_ENGINE_UPGRADES
0A3D4                           		.db $0 << 4 | LevelMusic_Overworld
0A3D4                           	ENDIF
0A3D4                           
0A3D4 28 10                     	.db $28, $10
0A3D6 4D 81                     	.db $4D, $81
0A3D8 2B AD                     	.db $2B, $AD
0A3DA 0D 0A                     	.db $0D, $0A
0A3DC F5 13 83                  	.db $F5, $13, $83
0A3DF 2B 05                     	.db $2B, $05
0A3E1 0C 41                     	.db $0C, $41
0A3E3 22 10                     	.db $22, $10
0A3E5 46 10                     	.db $46, $10
0A3E7 4C AA                     	.db $4C, $AA
0A3E9 2B 80                     	.db $2B, $80
0A3EB 0C 05                     	.db $0C, $05
0A3ED 11 10                     	.db $11, $10
0A3EF 28 11                     	.db $28, $11
0A3F1 4B AA                     	.db $4B, $AA
0A3F3 15 10                     	.db $15, $10
0A3F5 1B 05                     	.db $1B, $05
0A3F7 0C 80                     	.db $0C, $80
0A3F9 7C AA                     	.db $7C, $AA
0A3FB 11 10                     	.db $11, $10
0A3FD 1B 80                     	.db $1B, $80
0A3FF 0C 05                     	.db $0C, $05
0A401 24 35                     	.db $24, $35
0A403 14 35                     	.db $14, $35
0A405 14 35                     	.db $14, $35
0A407 14 35                     	.db $14, $35
0A409 14 33                     	.db $14, $33
0A40B 08 AB                     	.db $08, $AB
0A40D 14 33                     	.db $14, $33
0A40F 14 33                     	.db $14, $33
0A411 18 05                     	.db $18, $05
0A413 77 0A                     	.db $77, $0A
0A415 F5 13 20                  	.db $F5, $13, $20
0A418 F0 80                     	.db $F0, $80
0A41A F1 57                     	.db $F1, $57
0A41C F1 A0                     	.db $F1, $A0
0A41E FF                        	.db $FF
0A41F                           
0A41F                           ; World 7-3
0A41F                           include "src/levels/7/7-3/7-3-area0.asm"
0A41F                           ; Level 7-3, Area 0
0A41F                           
0A41F                           LevelData_7_3_Area0:
0A41F FF                        	.db $FF
0A420                           ; -------------------------------
0A420                           
0A420                           
0A420                           ; Pad out any remaining space
0A420                           ; @TODO Verify that this is OK if unused space is reclaimed
0A420                           LevelData_Unused:
0A420                           unusedSpace $A500,$FF
0A420                           	IFDEF PRESERVE_UNUSED_SPACE
0A420 FF FF FF FF FF FF FF FF.. 		.pad $A500, $FF
0A500                           	ENDIF
0A500                           
0A500                           
0A500                           ; Pointers to enemy data
0A500                           include "src/levels/enemy-data-pointers.asm"
0A500                           ;
0A500                           ; Pointers to pointers to pointers...
0A500                           ; I'm not entirely certain what the point of
0A500                           ; having pointer-pointers was, when level data
0A500                           ; appears to use standard split pointers just fine,
0A500                           ; but that's what they did here in any case
0A500                           ;
0A500                           
0A500                           ; -------------------------------------
0A500                           ; Pointers to pointers to enemy data here
0A500                           
0A500                           EnemyPointersByLevel_HiHi:
0A500 00                        	.db >EnemyPointers_Level_1_1_Hi
0A501 00                        	.db >EnemyPointers_Level_1_2_Hi
0A502 00                        	.db >EnemyPointers_Level_1_3_Hi
0A503 00                        	.db >EnemyPointers_Level_2_1_Hi
0A504 00                        	.db >EnemyPointers_Level_2_2_Hi
0A505 00                        	.db >EnemyPointers_Level_2_3_Hi
0A506 00                        	.db >EnemyPointers_Level_3_1_Hi
0A507 00                        	.db >EnemyPointers_Level_3_2_Hi
0A508 00                        	.db >EnemyPointers_Level_3_3_Hi
0A509 00                        	.db >EnemyPointers_Level_4_1_Hi
0A50A 00                        	.db >EnemyPointers_Level_4_2_Hi
0A50B 00                        	.db >EnemyPointers_Level_4_3_Hi
0A50C 00                        	.db >EnemyPointers_Level_5_1_Hi
0A50D 00                        	.db >EnemyPointers_Level_5_2_Hi
0A50E 00                        	.db >EnemyPointers_Level_5_3_Hi
0A50F 00                        	.db >EnemyPointers_Level_6_1_Hi
0A510 00                        	.db >EnemyPointers_Level_6_2_Hi
0A511 00                        	.db >EnemyPointers_Level_6_3_Hi
0A512 00                        	.db >EnemyPointers_Level_7_1_Hi
0A513 00                        	.db >EnemyPointers_Level_7_2_Hi
0A514 00                        	.db >EnemyPointers_Level_7_3_Hi
0A515                           
0A515                           EnemyPointersByLevel_HiLo:
0A515 00                        	.db <EnemyPointers_Level_1_1_Hi
0A516 00                        	.db <EnemyPointers_Level_1_2_Hi
0A517 00                        	.db <EnemyPointers_Level_1_3_Hi
0A518 00                        	.db <EnemyPointers_Level_2_1_Hi
0A519 00                        	.db <EnemyPointers_Level_2_2_Hi
0A51A 00                        	.db <EnemyPointers_Level_2_3_Hi
0A51B 00                        	.db <EnemyPointers_Level_3_1_Hi
0A51C 00                        	.db <EnemyPointers_Level_3_2_Hi
0A51D 00                        	.db <EnemyPointers_Level_3_3_Hi
0A51E 00                        	.db <EnemyPointers_Level_4_1_Hi
0A51F 00                        	.db <EnemyPointers_Level_4_2_Hi
0A520 00                        	.db <EnemyPointers_Level_4_3_Hi
0A521 00                        	.db <EnemyPointers_Level_5_1_Hi
0A522 00                        	.db <EnemyPointers_Level_5_2_Hi
0A523 00                        	.db <EnemyPointers_Level_5_3_Hi
0A524 00                        	.db <EnemyPointers_Level_6_1_Hi
0A525 00                        	.db <EnemyPointers_Level_6_2_Hi
0A526 00                        	.db <EnemyPointers_Level_6_3_Hi
0A527 00                        	.db <EnemyPointers_Level_7_1_Hi
0A528 00                        	.db <EnemyPointers_Level_7_2_Hi
0A529 00                        	.db <EnemyPointers_Level_7_3_Hi
0A52A                           
0A52A                           EnemyPointersByLevel_LoHi:
0A52A 00                        	.db >EnemyPointers_Level_1_1_Lo
0A52B 00                        	.db >EnemyPointers_Level_1_2_Lo
0A52C 00                        	.db >EnemyPointers_Level_1_3_Lo
0A52D 00                        	.db >EnemyPointers_Level_2_1_Lo
0A52E 00                        	.db >EnemyPointers_Level_2_2_Lo
0A52F 00                        	.db >EnemyPointers_Level_2_3_Lo
0A530 00                        	.db >EnemyPointers_Level_3_1_Lo
0A531 00                        	.db >EnemyPointers_Level_3_2_Lo
0A532 00                        	.db >EnemyPointers_Level_3_3_Lo
0A533 00                        	.db >EnemyPointers_Level_4_1_Lo
0A534 00                        	.db >EnemyPointers_Level_4_2_Lo
0A535 00                        	.db >EnemyPointers_Level_4_3_Lo
0A536 00                        	.db >EnemyPointers_Level_5_1_Lo
0A537 00                        	.db >EnemyPointers_Level_5_2_Lo
0A538 00                        	.db >EnemyPointers_Level_5_3_Lo
0A539 00                        	.db >EnemyPointers_Level_6_1_Lo
0A53A 00                        	.db >EnemyPointers_Level_6_2_Lo
0A53B 00                        	.db >EnemyPointers_Level_6_3_Lo
0A53C 00                        	.db >EnemyPointers_Level_7_1_Lo
0A53D 00                        	.db >EnemyPointers_Level_7_2_Lo
0A53E 00                        	.db >EnemyPointers_Level_7_3_Lo
0A53F                           
0A53F                           EnemyPointersByLevel_LoLo:
0A53F 00                        	.db <EnemyPointers_Level_1_1_Lo
0A540 00                        	.db <EnemyPointers_Level_1_2_Lo
0A541 00                        	.db <EnemyPointers_Level_1_3_Lo
0A542 00                        	.db <EnemyPointers_Level_2_1_Lo
0A543 00                        	.db <EnemyPointers_Level_2_2_Lo
0A544 00                        	.db <EnemyPointers_Level_2_3_Lo
0A545 00                        	.db <EnemyPointers_Level_3_1_Lo
0A546 00                        	.db <EnemyPointers_Level_3_2_Lo
0A547 00                        	.db <EnemyPointers_Level_3_3_Lo
0A548 00                        	.db <EnemyPointers_Level_4_1_Lo
0A549 00                        	.db <EnemyPointers_Level_4_2_Lo
0A54A 00                        	.db <EnemyPointers_Level_4_3_Lo
0A54B 00                        	.db <EnemyPointers_Level_5_1_Lo
0A54C 00                        	.db <EnemyPointers_Level_5_2_Lo
0A54D 00                        	.db <EnemyPointers_Level_5_3_Lo
0A54E 00                        	.db <EnemyPointers_Level_6_1_Lo
0A54F 00                        	.db <EnemyPointers_Level_6_2_Lo
0A550 00                        	.db <EnemyPointers_Level_6_3_Lo
0A551 00                        	.db <EnemyPointers_Level_7_1_Lo
0A552 00                        	.db <EnemyPointers_Level_7_2_Lo
0A553 00                        	.db <EnemyPointers_Level_7_3_Lo
0A554                           
0A554                           ; ----------------------------------------
0A554                           ; Actual pointers to enemy data here
0A554                           
0A554                           EnemyPointers_Level_1_1_Hi:
0A554 00                        	.db >EnemyData_Level_1_1_Area0
0A555 00                        	.db >EnemyData_Level_1_1_Area1
0A556 00                        	.db >EnemyData_Level_1_1_Area2
0A557 00                        	.db >EnemyData_Level_1_1_Area3
0A558 00                        	.db >EnemyData_Level_1_1_Area4
0A559 00                        	.db >EnemyData_Level_1_1_Area5
0A55A 00                        	.db >EnemyData_Level_1_1_Area5
0A55B 00                        	.db >EnemyData_Level_1_1_Area5
0A55C 00                        	.db >EnemyData_Level_1_1_Area5
0A55D 00                        	.db >EnemyData_Level_1_1_Area5
0A55E                           
0A55E                           EnemyPointers_Level_1_1_Lo:
0A55E 00                        	.db <EnemyData_Level_1_1_Area0
0A55F 00                        	.db <EnemyData_Level_1_1_Area1
0A560 00                        	.db <EnemyData_Level_1_1_Area2
0A561 00                        	.db <EnemyData_Level_1_1_Area3
0A562 00                        	.db <EnemyData_Level_1_1_Area4
0A563 00                        	.db <EnemyData_Level_1_1_Area5
0A564 00                        	.db <EnemyData_Level_1_1_Area5
0A565 00                        	.db <EnemyData_Level_1_1_Area5
0A566 00                        	.db <EnemyData_Level_1_1_Area5
0A567 00                        	.db <EnemyData_Level_1_1_Area5
0A568                           
0A568                           EnemyPointers_Level_1_2_Hi:
0A568 00                        	.db >EnemyData_Level_1_2_Area0
0A569 00                        	.db >EnemyData_Level_1_2_Area1
0A56A 00                        	.db >EnemyData_Level_1_2_Area2
0A56B 00                        	.db >EnemyData_Level_1_2_Area3
0A56C 00                        	.db >EnemyData_Level_1_2_Area4
0A56D 00                        	.db >EnemyData_Level_1_2_Area5
0A56E 00                        	.db >EnemyData_Level_1_2_Area5
0A56F 00                        	.db >EnemyData_Level_1_2_Area5
0A570 00                        	.db >EnemyData_Level_1_2_Area5
0A571 00                        	.db >EnemyData_Level_1_2_Area5
0A572                           
0A572                           EnemyPointers_Level_1_2_Lo:
0A572 00                        	.db <EnemyData_Level_1_2_Area0
0A573 00                        	.db <EnemyData_Level_1_2_Area1
0A574 00                        	.db <EnemyData_Level_1_2_Area2
0A575 00                        	.db <EnemyData_Level_1_2_Area3
0A576 00                        	.db <EnemyData_Level_1_2_Area4
0A577 00                        	.db <EnemyData_Level_1_2_Area5
0A578 00                        	.db <EnemyData_Level_1_2_Area5
0A579 00                        	.db <EnemyData_Level_1_2_Area5
0A57A 00                        	.db <EnemyData_Level_1_2_Area5
0A57B 00                        	.db <EnemyData_Level_1_2_Area5
0A57C                           
0A57C                           EnemyPointers_Level_1_3_Hi:
0A57C 00                        	.db >EnemyData_Level_1_3_Area0
0A57D 00                        	.db >EnemyData_Level_1_3_Area1
0A57E 00                        	.db >EnemyData_Level_1_3_Area2
0A57F 00                        	.db >EnemyData_Level_1_3_Area3
0A580 00                        	.db >EnemyData_Level_1_3_Area4
0A581 00                        	.db >EnemyData_Level_1_3_Area4
0A582 00                        	.db >EnemyData_Level_1_3_Area4
0A583 00                        	.db >EnemyData_Level_1_3_Area4
0A584 00                        	.db >EnemyData_Level_1_3_Area4
0A585 00                        	.db >EnemyData_Level_1_3_Area4
0A586                           
0A586                           EnemyPointers_Level_1_3_Lo:
0A586 00                        	.db <EnemyData_Level_1_3_Area0
0A587 00                        	.db <EnemyData_Level_1_3_Area1
0A588 00                        	.db <EnemyData_Level_1_3_Area2
0A589 00                        	.db <EnemyData_Level_1_3_Area3
0A58A 00                        	.db <EnemyData_Level_1_3_Area4
0A58B 00                        	.db <EnemyData_Level_1_3_Area4
0A58C 00                        	.db <EnemyData_Level_1_3_Area4
0A58D 00                        	.db <EnemyData_Level_1_3_Area4
0A58E 00                        	.db <EnemyData_Level_1_3_Area4
0A58F 00                        	.db <EnemyData_Level_1_3_Area4
0A590                           
0A590                           EnemyPointers_Level_2_1_Hi:
0A590 00                        	.db >EnemyData_Level_2_1_Area0
0A591 00                        	.db >EnemyData_Level_2_1_Area1
0A592 00                        	.db >EnemyData_Level_2_1_Area2
0A593 00                        	.db >EnemyData_Level_2_1_Area2
0A594 00                        	.db >EnemyData_Level_2_1_Area4
0A595 00                        	.db >EnemyData_Level_2_1_Area2
0A596 00                        	.db >EnemyData_Level_2_1_Area2
0A597 00                        	.db >EnemyData_Level_2_1_Area2
0A598 00                        	.db >EnemyData_Level_2_1_Area2
0A599 00                        	.db >EnemyData_Level_2_1_Area2
0A59A                           
0A59A                           EnemyPointers_Level_2_1_Lo:
0A59A 00                        	.db <EnemyData_Level_2_1_Area0
0A59B 00                        	.db <EnemyData_Level_2_1_Area1
0A59C 00                        	.db <EnemyData_Level_2_1_Area2
0A59D 00                        	.db <EnemyData_Level_2_1_Area2
0A59E 00                        	.db <EnemyData_Level_2_1_Area4
0A59F 00                        	.db <EnemyData_Level_2_1_Area2
0A5A0 00                        	.db <EnemyData_Level_2_1_Area2
0A5A1 00                        	.db <EnemyData_Level_2_1_Area2
0A5A2 00                        	.db <EnemyData_Level_2_1_Area2
0A5A3 00                        	.db <EnemyData_Level_2_1_Area2
0A5A4                           
0A5A4                           EnemyPointers_Level_2_2_Hi:
0A5A4 00                        	.db >EnemyData_Level_2_2_Area0
0A5A5 00                        	.db >EnemyData_Level_2_2_Area1
0A5A6 00                        	.db >EnemyData_Level_2_2_Area2
0A5A7 00                        	.db >EnemyData_Level_2_2_Area3
0A5A8 00                        	.db >EnemyData_Level_2_2_Area4
0A5A9 00                        	.db >EnemyData_Level_2_2_Area5
0A5AA 00                        	.db >EnemyData_Level_2_2_Area5
0A5AB 00                        	.db >EnemyData_Level_2_2_Area5
0A5AC 00                        	.db >EnemyData_Level_2_2_Area5
0A5AD 00                        	.db >EnemyData_Level_2_2_Area5
0A5AE                           
0A5AE                           EnemyPointers_Level_2_2_Lo:
0A5AE 00                        	.db <EnemyData_Level_2_2_Area0
0A5AF 00                        	.db <EnemyData_Level_2_2_Area1
0A5B0 00                        	.db <EnemyData_Level_2_2_Area2
0A5B1 00                        	.db <EnemyData_Level_2_2_Area3
0A5B2 00                        	.db <EnemyData_Level_2_2_Area4
0A5B3 00                        	.db <EnemyData_Level_2_2_Area5
0A5B4 00                        	.db <EnemyData_Level_2_2_Area5
0A5B5 00                        	.db <EnemyData_Level_2_2_Area5
0A5B6 00                        	.db <EnemyData_Level_2_2_Area5
0A5B7 00                        	.db <EnemyData_Level_2_2_Area5
0A5B8                           
0A5B8                           EnemyPointers_Level_2_3_Hi:
0A5B8 00                        	.db >EnemyData_Level_2_3_Area0
0A5B9 00                        	.db >EnemyData_Level_2_3_Area1
0A5BA 00                        	.db >EnemyData_Level_2_3_Area2
0A5BB 00                        	.db >EnemyData_Level_2_3_Area3
0A5BC 00                        	.db >EnemyData_Level_2_3_Area4
0A5BD 00                        	.db >EnemyData_Level_2_3_Area5
0A5BE 00                        	.db >EnemyData_Level_2_3_Area6
0A5BF 00                        	.db >EnemyData_Level_2_3_Area7
0A5C0 00                        	.db >EnemyData_Level_2_3_Area7
0A5C1 00                        	.db >EnemyData_Level_2_3_Area7
0A5C2                           
0A5C2                           EnemyPointers_Level_2_3_Lo:
0A5C2 00                        	.db <EnemyData_Level_2_3_Area0
0A5C3 00                        	.db <EnemyData_Level_2_3_Area1
0A5C4 00                        	.db <EnemyData_Level_2_3_Area2
0A5C5 00                        	.db <EnemyData_Level_2_3_Area3
0A5C6 00                        	.db <EnemyData_Level_2_3_Area4
0A5C7 00                        	.db <EnemyData_Level_2_3_Area5
0A5C8 00                        	.db <EnemyData_Level_2_3_Area6
0A5C9 00                        	.db <EnemyData_Level_2_3_Area7
0A5CA 00                        	.db <EnemyData_Level_2_3_Area7
0A5CB 00                        	.db <EnemyData_Level_2_3_Area7
0A5CC                           
0A5CC                           EnemyPointers_Level_3_1_Hi:
0A5CC 00                        	.db >EnemyData_Level_3_1_Area0
0A5CD 00                        	.db >EnemyData_Level_3_1_Area1
0A5CE 00                        	.db >EnemyData_Level_3_1_Area2
0A5CF 00                        	.db >EnemyData_Level_3_1_Area3
0A5D0 00                        	.db >EnemyData_Level_3_1_Area4
0A5D1 00                        	.db >EnemyData_Level_3_2_Area0
0A5D2 00                        	.db >EnemyData_Level_3_2_Area0
0A5D3 00                        	.db >EnemyData_Level_3_2_Area0
0A5D4 00                        	.db >EnemyData_Level_3_2_Area0
0A5D5 00                        	.db >EnemyData_Level_3_2_Area0
0A5D6                           
0A5D6                           EnemyPointers_Level_3_1_Lo:
0A5D6 00                        	.db <EnemyData_Level_3_1_Area0
0A5D7 00                        	.db <EnemyData_Level_3_1_Area1
0A5D8 00                        	.db <EnemyData_Level_3_1_Area2
0A5D9 00                        	.db <EnemyData_Level_3_1_Area3
0A5DA 00                        	.db <EnemyData_Level_3_1_Area4
0A5DB 00                        	.db <EnemyData_Level_3_2_Area0
0A5DC 00                        	.db <EnemyData_Level_3_2_Area0
0A5DD 00                        	.db <EnemyData_Level_3_2_Area0
0A5DE 00                        	.db <EnemyData_Level_3_2_Area0
0A5DF 00                        	.db <EnemyData_Level_3_2_Area0
0A5E0                           
0A5E0                           EnemyPointers_Level_3_2_Hi:
0A5E0 00                        	.db >EnemyData_Level_3_2_Area0
0A5E1 00                        	.db >EnemyData_Level_3_2_Area1
0A5E2 00                        	.db >EnemyData_Level_3_2_Area2
0A5E3 00                        	.db >EnemyData_Level_3_2_Area3 ; Unused? Boss-flag Birdo
0A5E4 00                        	.db >EnemyData_Level_3_3_Area0
0A5E5 00                        	.db >EnemyData_Level_3_3_Area0
0A5E6 00                        	.db >EnemyData_Level_3_3_Area0
0A5E7 00                        	.db >EnemyData_Level_3_3_Area0
0A5E8 00                        	.db >EnemyData_Level_3_3_Area0
0A5E9 00                        	.db >EnemyData_Level_3_3_Area0
0A5EA                           
0A5EA                           EnemyPointers_Level_3_2_Lo:
0A5EA 00                        	.db <EnemyData_Level_3_2_Area0
0A5EB 00                        	.db <EnemyData_Level_3_2_Area1
0A5EC 00                        	.db <EnemyData_Level_3_2_Area2
0A5ED 00                        	.db <EnemyData_Level_3_2_Area3 ; Unused? Boss-flag Birdo
0A5EE 00                        	.db <EnemyData_Level_3_3_Area0
0A5EF 00                        	.db <EnemyData_Level_3_3_Area0
0A5F0 00                        	.db <EnemyData_Level_3_3_Area0
0A5F1 00                        	.db <EnemyData_Level_3_3_Area0
0A5F2 00                        	.db <EnemyData_Level_3_3_Area0
0A5F3 00                        	.db <EnemyData_Level_3_3_Area0
0A5F4                           
0A5F4                           EnemyPointers_Level_3_3_Hi:
0A5F4 00                        	.db >EnemyData_Level_3_3_Area0
0A5F5 00                        	.db >EnemyData_Level_3_3_Area1
0A5F6 00                        	.db >EnemyData_Level_3_3_Area2
0A5F7 00                        	.db >EnemyData_Level_3_3_Area3
0A5F8 00                        	.db >EnemyData_Level_3_3_Area4
0A5F9 00                        	.db >EnemyData_Level_3_3_Area5
0A5FA 00                        	.db >EnemyData_Level_3_3_Area6
0A5FB 00                        	.db >EnemyData_Level_3_3_Area7
0A5FC 00                        	.db >EnemyData_Level_3_3_Area8
0A5FD 00                        	.db >EnemyData_Level_3_3_Area8
0A5FE                           
0A5FE                           EnemyPointers_Level_3_3_Lo:
0A5FE 00                        	.db <EnemyData_Level_3_3_Area0
0A5FF 00                        	.db <EnemyData_Level_3_3_Area1
0A600 00                        	.db <EnemyData_Level_3_3_Area2
0A601 00                        	.db <EnemyData_Level_3_3_Area3
0A602 00                        	.db <EnemyData_Level_3_3_Area4
0A603 00                        	.db <EnemyData_Level_3_3_Area5
0A604 00                        	.db <EnemyData_Level_3_3_Area6
0A605 00                        	.db <EnemyData_Level_3_3_Area7
0A606 00                        	.db <EnemyData_Level_3_3_Area8
0A607 00                        	.db <EnemyData_Level_3_3_Area8
0A608                           
0A608                           EnemyPointers_Level_4_1_Hi:
0A608 00                        	.db >EnemyData_Level_4_1_Area0
0A609 00                        	.db >EnemyData_Level_4_1_Area1
0A60A 00                        	.db >EnemyData_Level_4_1_Area2 ; ??? Unused area with another Boss Birdo.
0A60B 00                        	.db >EnemyData_Level_4_1_Area2
0A60C 00                        	.db >EnemyData_Level_4_1_Area2
0A60D 00                        	.db >EnemyData_Level_4_1_Area2
0A60E 00                        	.db >EnemyData_Level_4_1_Area2
0A60F 00                        	.db >EnemyData_Level_4_1_Area2
0A610 00                        	.db >EnemyData_Level_4_1_Area2
0A611 00                        	.db >EnemyData_Level_4_1_Area2
0A612                           
0A612                           EnemyPointers_Level_4_1_Lo:
0A612 00                        	.db <EnemyData_Level_4_1_Area0
0A613 00                        	.db <EnemyData_Level_4_1_Area1
0A614 00                        	.db <EnemyData_Level_4_1_Area2
0A615 00                        	.db <EnemyData_Level_4_1_Area2
0A616 00                        	.db <EnemyData_Level_4_1_Area2
0A617 00                        	.db <EnemyData_Level_4_1_Area2
0A618 00                        	.db <EnemyData_Level_4_1_Area2
0A619 00                        	.db <EnemyData_Level_4_1_Area2
0A61A 00                        	.db <EnemyData_Level_4_1_Area2
0A61B 00                        	.db <EnemyData_Level_4_1_Area2
0A61C                           
0A61C                           EnemyPointers_Level_4_2_Hi:
0A61C 00                        	.db >EnemyData_Level_4_2_Area0
0A61D 00                        	.db >EnemyData_Level_4_2_Area1
0A61E 00                        	.db >EnemyData_Level_4_2_Area2
0A61F 00                        	.db >EnemyData_Level_4_2_Area3
0A620 00                        	.db >EnemyData_Level_4_2_Area4
0A621 00                        	.db >EnemyData_Level_4_2_Area4
0A622 00                        	.db >EnemyData_Level_4_2_Area4
0A623 00                        	.db >EnemyData_Level_4_2_Area4
0A624 00                        	.db >EnemyData_Level_4_2_Area4
0A625 00                        	.db >EnemyData_Level_4_2_Area4
0A626                           
0A626                           EnemyPointers_Level_4_2_Lo:
0A626 00                        	.db <EnemyData_Level_4_2_Area0
0A627 00                        	.db <EnemyData_Level_4_2_Area1
0A628 00                        	.db <EnemyData_Level_4_2_Area2
0A629 00                        	.db <EnemyData_Level_4_2_Area3
0A62A 00                        	.db <EnemyData_Level_4_2_Area4
0A62B 00                        	.db <EnemyData_Level_4_2_Area4
0A62C 00                        	.db <EnemyData_Level_4_2_Area4
0A62D 00                        	.db <EnemyData_Level_4_2_Area4
0A62E 00                        	.db <EnemyData_Level_4_2_Area4
0A62F 00                        	.db <EnemyData_Level_4_2_Area4
0A630                           
0A630                           EnemyPointers_Level_4_3_Hi:
0A630 00                        	.db >EnemyData_Level_4_3_Area0
0A631 00                        	.db >EnemyData_Level_4_3_Area1
0A632 00                        	.db >EnemyData_Level_4_3_Area2
0A633 00                        	.db >EnemyData_Level_4_3_Area3
0A634 00                        	.db >EnemyData_Level_4_3_Area4
0A635 00                        	.db >EnemyData_Level_4_3_Area5
0A636 00                        	.db >EnemyData_Level_4_3_Area6
0A637 00                        	.db >EnemyData_Level_4_3_Area7
0A638 00                        	.db >EnemyData_Level_4_3_Area8
0A639 00                        	.db >EnemyData_Level_4_3_Area9
0A63A                           
0A63A                           EnemyPointers_Level_4_3_Lo:
0A63A 00                        	.db <EnemyData_Level_4_3_Area0
0A63B 00                        	.db <EnemyData_Level_4_3_Area1
0A63C 00                        	.db <EnemyData_Level_4_3_Area2
0A63D 00                        	.db <EnemyData_Level_4_3_Area3
0A63E 00                        	.db <EnemyData_Level_4_3_Area4
0A63F 00                        	.db <EnemyData_Level_4_3_Area5
0A640 00                        	.db <EnemyData_Level_4_3_Area6
0A641 00                        	.db <EnemyData_Level_4_3_Area7
0A642 00                        	.db <EnemyData_Level_4_3_Area8
0A643 00                        	.db <EnemyData_Level_4_3_Area9
0A644                           
0A644                           EnemyPointers_Level_5_1_Hi:
0A644 00                        	.db >EnemyData_Level_5_1_Area0
0A645 00                        	.db >EnemyData_Level_5_1_Area1
0A646 00                        	.db >EnemyData_Level_5_1_Area2
0A647 00                        	.db >EnemyData_Level_5_2_Area0
0A648 00                        	.db >EnemyData_Level_5_2_Area0
0A649 00                        	.db >EnemyData_Level_5_2_Area0
0A64A 00                        	.db >EnemyData_Level_5_2_Area0
0A64B 00                        	.db >EnemyData_Level_5_2_Area0
0A64C 00                        	.db >EnemyData_Level_5_2_Area0
0A64D 00                        	.db >EnemyData_Level_5_2_Area0
0A64E                           
0A64E                           EnemyPointers_Level_5_1_Lo:
0A64E 00                        	.db <EnemyData_Level_5_1_Area0
0A64F 00                        	.db <EnemyData_Level_5_1_Area1
0A650 00                        	.db <EnemyData_Level_5_1_Area2
0A651 00                        	.db <EnemyData_Level_5_2_Area0
0A652 00                        	.db <EnemyData_Level_5_2_Area0
0A653 00                        	.db <EnemyData_Level_5_2_Area0
0A654 00                        	.db <EnemyData_Level_5_2_Area0
0A655 00                        	.db <EnemyData_Level_5_2_Area0
0A656 00                        	.db <EnemyData_Level_5_2_Area0
0A657 00                        	.db <EnemyData_Level_5_2_Area0
0A658                           
0A658                           EnemyPointers_Level_5_2_Hi:
0A658 00                        	.db >EnemyData_Level_5_2_Area0
0A659 00                        	.db >EnemyData_Level_5_2_Area1
0A65A 00                        	.db >EnemyData_Level_5_2_Area2
0A65B 00                        	.db >EnemyData_Level_5_2_Area3
0A65C 00                        	.db >EnemyData_Level_5_2_Area4
0A65D 00                        	.db >EnemyData_Level_5_2_Area5
0A65E 00                        	.db >EnemyData_Level_5_3_Area0
0A65F 00                        	.db >EnemyData_Level_5_3_Area0
0A660 00                        	.db >EnemyData_Level_5_3_Area0
0A661 00                        	.db >EnemyData_Level_5_3_Area0
0A662                           
0A662                           EnemyPointers_Level_5_2_Lo:
0A662 00                        	.db <EnemyData_Level_5_2_Area0
0A663 00                        	.db <EnemyData_Level_5_2_Area1
0A664 00                        	.db <EnemyData_Level_5_2_Area2
0A665 00                        	.db <EnemyData_Level_5_2_Area3
0A666 00                        	.db <EnemyData_Level_5_2_Area4
0A667 00                        	.db <EnemyData_Level_5_2_Area5
0A668 00                        	.db <EnemyData_Level_5_3_Area0
0A669 00                        	.db <EnemyData_Level_5_3_Area0
0A66A 00                        	.db <EnemyData_Level_5_3_Area0
0A66B 00                        	.db <EnemyData_Level_5_3_Area0
0A66C                           
0A66C                           EnemyPointers_Level_5_3_Hi:
0A66C 00                        	.db >EnemyData_Level_5_3_Area0
0A66D 00                        	.db >EnemyData_Level_5_3_Area1
0A66E 00                        	.db >EnemyData_Level_5_3_Area2
0A66F 00                        	.db >EnemyData_Level_5_3_Area3
0A670 00                        	.db >EnemyData_Level_5_3_Area4
0A671 00                        	.db >EnemyData_Level_5_3_Area5
0A672 00                        	.db >EnemyData_Level_5_3_Area5
0A673 00                        	.db >EnemyData_Level_5_3_Area5
0A674 00                        	.db >EnemyData_Level_5_3_Area5
0A675 00                        	.db >EnemyData_Level_5_3_Area5
0A676                           
0A676                           EnemyPointers_Level_5_3_Lo:
0A676 00                        	.db <EnemyData_Level_5_3_Area0
0A677 00                        	.db <EnemyData_Level_5_3_Area1
0A678 00                        	.db <EnemyData_Level_5_3_Area2
0A679 00                        	.db <EnemyData_Level_5_3_Area3
0A67A 00                        	.db <EnemyData_Level_5_3_Area4
0A67B 00                        	.db <EnemyData_Level_5_3_Area5
0A67C 00                        	.db <EnemyData_Level_5_3_Area5
0A67D 00                        	.db <EnemyData_Level_5_3_Area5
0A67E 00                        	.db <EnemyData_Level_5_3_Area5
0A67F 00                        	.db <EnemyData_Level_5_3_Area5
0A680                           
0A680                           EnemyPointers_Level_6_1_Hi:
0A680 00                        	.db >EnemyData_Level_6_1_Area0
0A681 00                        	.db >EnemyData_Level_6_1_Area1
0A682 00                        	.db >EnemyData_Level_6_1_Area2
0A683 00                        	.db >EnemyData_Level_6_1_Area3
0A684 00                        	.db >EnemyData_Level_6_1_Area4
0A685 00                        	.db >EnemyData_Level_6_1_Area5
0A686 00                        	.db >EnemyData_Level_6_1_Area6
0A687 00                        	.db >EnemyData_Level_6_1_Area6
0A688 00                        	.db >EnemyData_Level_6_1_Area6
0A689 00                        	.db >EnemyData_Level_6_1_Area6
0A68A                           
0A68A                           EnemyPointers_Level_6_1_Lo:
0A68A 00                        	.db <EnemyData_Level_6_1_Area0
0A68B 00                        	.db <EnemyData_Level_6_1_Area1
0A68C 00                        	.db <EnemyData_Level_6_1_Area2
0A68D 00                        	.db <EnemyData_Level_6_1_Area3
0A68E 00                        	.db <EnemyData_Level_6_1_Area4
0A68F 00                        	.db <EnemyData_Level_6_1_Area5
0A690 00                        	.db <EnemyData_Level_6_1_Area6
0A691 00                        	.db <EnemyData_Level_6_1_Area6
0A692 00                        	.db <EnemyData_Level_6_1_Area6
0A693 00                        	.db <EnemyData_Level_6_1_Area6
0A694                           
0A694                           EnemyPointers_Level_6_2_Hi:
0A694 00                        	.db >EnemyData_Level_6_2_Area0
0A695 00                        	.db >EnemyData_Level_6_2_Area1
0A696 00                        	.db >EnemyData_Level_6_2_Area2
0A697 00                        	.db >EnemyData_Level_6_2_Area2
0A698 00                        	.db >EnemyData_Level_6_2_Area2
0A699 00                        	.db >EnemyData_Level_6_2_Area2
0A69A 00                        	.db >EnemyData_Level_6_2_Area2
0A69B 00                        	.db >EnemyData_Level_6_2_Area2
0A69C 00                        	.db >EnemyData_Level_6_2_Area2
0A69D 00                        	.db >EnemyData_Level_6_2_Area2
0A69E                           
0A69E                           EnemyPointers_Level_6_2_Lo:
0A69E 00                        	.db <EnemyData_Level_6_2_Area0
0A69F 00                        	.db <EnemyData_Level_6_2_Area1
0A6A0 00                        	.db <EnemyData_Level_6_2_Area2
0A6A1 00                        	.db <EnemyData_Level_6_2_Area2
0A6A2 00                        	.db <EnemyData_Level_6_2_Area2
0A6A3 00                        	.db <EnemyData_Level_6_2_Area2
0A6A4 00                        	.db <EnemyData_Level_6_2_Area2
0A6A5 00                        	.db <EnemyData_Level_6_2_Area2
0A6A6 00                        	.db <EnemyData_Level_6_2_Area2
0A6A7 00                        	.db <EnemyData_Level_6_2_Area2
0A6A8                           
0A6A8                           EnemyPointers_Level_6_3_Hi:
0A6A8 00                        	.db >EnemyData_Level_6_3_Area0
0A6A9 00                        	.db >EnemyData_Level_6_3_Area1
0A6AA 00                        	.db >EnemyData_Level_6_3_Area2
0A6AB 00                        	.db >EnemyData_Level_6_3_Area3
0A6AC 00                        	.db >EnemyData_Level_6_3_Area4
0A6AD 00                        	.db >EnemyData_Level_6_3_Area5
0A6AE 00                        	.db >EnemyData_Level_6_3_Area6
0A6AF 00                        	.db >EnemyData_Level_6_3_Area6
0A6B0 00                        	.db >EnemyData_Level_6_3_Area6
0A6B1 00                        	.db >EnemyData_Level_6_3_Area6
0A6B2                           
0A6B2                           EnemyPointers_Level_6_3_Lo:
0A6B2 00                        	.db <EnemyData_Level_6_3_Area0
0A6B3 00                        	.db <EnemyData_Level_6_3_Area1
0A6B4 00                        	.db <EnemyData_Level_6_3_Area2
0A6B5 00                        	.db <EnemyData_Level_6_3_Area3
0A6B6 00                        	.db <EnemyData_Level_6_3_Area4
0A6B7 00                        	.db <EnemyData_Level_6_3_Area5
0A6B8 00                        	.db <EnemyData_Level_6_3_Area6
0A6B9 00                        	.db <EnemyData_Level_6_3_Area6
0A6BA 00                        	.db <EnemyData_Level_6_3_Area6
0A6BB 00                        	.db <EnemyData_Level_6_3_Area6
0A6BC                           
0A6BC                           EnemyPointers_Level_7_1_Hi:
0A6BC 00                        	.db >EnemyData_Level_7_1_Area0
0A6BD 00                        	.db >EnemyData_Level_7_1_Area1
0A6BE 00                        	.db >EnemyData_Level_7_1_Area2
0A6BF 00                        	.db >EnemyData_Level_7_1_Area3
0A6C0 00                        	.db >EnemyData_Level_7_1_Area4
0A6C1 00                        	.db >EnemyData_Level_7_1_Area5
0A6C2 00                        	.db >EnemyData_Level_7_1_Area5
0A6C3 00                        	.db >EnemyData_Level_7_1_Area5
0A6C4 00                        	.db >EnemyData_Level_7_1_Area5
0A6C5 00                        	.db >EnemyData_Level_7_1_Area5
0A6C6                           
0A6C6                           EnemyPointers_Level_7_1_Lo:
0A6C6 00                        	.db <EnemyData_Level_7_1_Area0
0A6C7 00                        	.db <EnemyData_Level_7_1_Area1
0A6C8 00                        	.db <EnemyData_Level_7_1_Area2
0A6C9 00                        	.db <EnemyData_Level_7_1_Area3
0A6CA 00                        	.db <EnemyData_Level_7_1_Area4
0A6CB 00                        	.db <EnemyData_Level_7_1_Area5
0A6CC 00                        	.db <EnemyData_Level_7_1_Area5
0A6CD 00                        	.db <EnemyData_Level_7_1_Area5
0A6CE 00                        	.db <EnemyData_Level_7_1_Area5
0A6CF 00                        	.db <EnemyData_Level_7_1_Area5
0A6D0                           
0A6D0                           EnemyPointers_Level_7_2_Hi:
0A6D0 00                        	.db >EnemyData_Level_7_2_Area0
0A6D1 00                        	.db >EnemyData_Level_7_2_Area1
0A6D2 00                        	.db >EnemyData_Level_7_2_Area2
0A6D3 00                        	.db >EnemyData_Level_7_2_Area3
0A6D4 00                        	.db >EnemyData_Level_7_2_Area4
0A6D5 00                        	.db >EnemyData_Level_7_2_Area5
0A6D6 00                        	.db >EnemyData_Level_7_2_Area6
0A6D7 00                        	.db >EnemyData_Level_7_2_Area7
0A6D8 00                        	.db >EnemyData_Level_7_2_Area8
0A6D9 00                        	.db >EnemyData_Level_7_2_Area9
0A6DA                           
0A6DA                           EnemyPointers_Level_7_2_Lo:
0A6DA 00                        	.db <EnemyData_Level_7_2_Area0
0A6DB 00                        	.db <EnemyData_Level_7_2_Area1
0A6DC 00                        	.db <EnemyData_Level_7_2_Area2
0A6DD 00                        	.db <EnemyData_Level_7_2_Area3
0A6DE 00                        	.db <EnemyData_Level_7_2_Area4
0A6DF 00                        	.db <EnemyData_Level_7_2_Area5
0A6E0 00                        	.db <EnemyData_Level_7_2_Area6
0A6E1 00                        	.db <EnemyData_Level_7_2_Area7
0A6E2 00                        	.db <EnemyData_Level_7_2_Area8
0A6E3 00                        	.db <EnemyData_Level_7_2_Area9
0A6E4                           
0A6E4                           ; Normally totally unused (game ends at 7-2)
0A6E4                           ; Interestingly, the first 4 areas are unique
0A6E4                           ; though completely empty
0A6E4                           ; Wonder if they intended on having a full 7-3
0A6E4                           ; at some point...
0A6E4                           EnemyPointers_Level_7_3_Hi:
0A6E4 00                        	.db >EnemyData_Level_7_3_Area0
0A6E5 00                        	.db >EnemyData_Level_7_3_Area1
0A6E6 00                        	.db >EnemyData_Level_7_3_Area2
0A6E7 00                        	.db >EnemyData_Level_7_3_Area3
0A6E8 00                        	.db >EnemyData_Level_7_3_Area4
0A6E9 00                        	.db >EnemyData_Level_7_3_Area4
0A6EA 00                        	.db >EnemyData_Level_7_3_Area4
0A6EB 00                        	.db >EnemyData_Level_7_3_Area4
0A6EC 00                        	.db >EnemyData_Level_7_3_Area4
0A6ED 00                        	.db >EnemyData_Level_7_3_Area4
0A6EE                           
0A6EE                           EnemyPointers_Level_7_3_Lo:
0A6EE 00                        	.db <EnemyData_Level_7_3_Area0
0A6EF 00                        	.db <EnemyData_Level_7_3_Area1
0A6F0 00                        	.db <EnemyData_Level_7_3_Area2
0A6F1 00                        	.db <EnemyData_Level_7_3_Area3
0A6F2 00                        	.db <EnemyData_Level_7_3_Area4
0A6F3 00                        	.db <EnemyData_Level_7_3_Area4
0A6F4 00                        	.db <EnemyData_Level_7_3_Area4
0A6F5 00                        	.db <EnemyData_Level_7_3_Area4
0A6F6 00                        	.db <EnemyData_Level_7_3_Area4
0A6F7 00                        	.db <EnemyData_Level_7_3_Area4
0A6F8                           
0A6F8                           
0A6F8                           ; Include enemy data;
0A6F8                           ; see src/levels/enemy-data.asm for enemy format details
0A6F8                           include "src/levels/enemy-data.asm"
0A6F8                           ;
0A6F8                           ; Enemy Data
0A6F8                           ; ==========
0A6F8                           ;
0A6F8                           ; This data is broken down by page (ie. screen), where the first byte indicates
0A6F8                           ; the number of bytes for this page. Each enemy is two bytes, where the first
0A6F8                           ; byte is the enemy, and the second byte is XY position.
0A6F8                           ;
0A6F8                           ; Each "page" of enemy data is 16x16 tiles.
0A6F8                           ;
0A6F8                           ; Note that this is one tile GREATER than level data. Consequently, level and
0A6F8                           ; enemy data becomes increasingly misaligned in vertical areas.
0A6F8                           ;
0A6F8                           ; Examples:
0A6F8                           ;   $01 - an empty page
0A6F8                           ;   $03,$01,$47 - a page with a single pink shyguy ($01) at X=4, Y=7
0A6F8                           ;
0A6F8                           
0A6F8                           ; -------------------------------
0A6F8                           ; World 1
0A6F8                           
0A6F8                           ; World 1-1
0A6F8                           include "src/levels/1/1-1/1-1-area0-enemies.asm"
0A6F8                           ; Level 1-1, Area 0
0A6F8                           
0A6F8                           EnemyData_Level_1_1_Area0:
0A6F8                           
0A6F8                           ; Page 0
0A6F8                           	distTo + ; $01 (0 enemies)
0A6F8 00                        	.db (+ - $)
0A6F9                           
0A6F9                           ; Page 1
0A6F9                           +	distTo + ; $01 (0 enemies)
0A6F9 00                        	.db (+ - $)
0A6FA                           
0A6FA                           ; Page 2
0A6FA                           +	distTo + ; $05 (2 enemies)
0A6FA 00                        	.db (+ - $)
0A6FB                           	enemy $7, $6, Enemy_ShyguyPink
0A6FB 03 00                     	.db Enemy_ShyguyPink, $7 << 4 | $6
0A6FD                           	enemy $6, $C, Enemy_ShyguyPink
0A6FD 03 00                     	.db Enemy_ShyguyPink, $6 << 4 | $C
0A6FF                           
0A6FF                           ; Page 3
0A6FF                           +	distTo + ; $01 (0 enemies)
0A6FF 00                        	.db (+ - $)
0A700                           
0A700                           ; Page 4
0A700                           +	distTo + ; $01 (0 enemies)
0A700 00                        	.db (+ - $)
0A701                           
0A701                           ; End of enemy data
0A701                           +
0A701                           include "src/levels/1/1-1/1-1-area1-enemies.asm"
0A701                           ; Level 1-1, Area 1
0A701                           
0A701                           EnemyData_Level_1_1_Area1:
0A701                           
0A701                           ; Page 0
0A701                           	distTo + ; $05 (2 enemies)
0A701 00                        	.db (+ - $)
0A702                           	enemy $5, $6, Enemy_Hoopstar
0A702 14 00                     	.db Enemy_Hoopstar, $5 << 4 | $6
0A704                           	enemy $A, $D, Enemy_Hoopstar
0A704 14 00                     	.db Enemy_Hoopstar, $A << 4 | $D
0A706                           
0A706                           ; Page 1
0A706                           +	distTo + ; $03 (1 enemy)
0A706 00                        	.db (+ - $)
0A707                           	enemy $9, $D, Enemy_ShyguyPink
0A707 03 00                     	.db Enemy_ShyguyPink, $9 << 4 | $D
0A709                           
0A709                           ; Page 2
0A709                           +	distTo + ; $07 (3 enemies)
0A709 00                        	.db (+ - $)
0A70A                           	enemy $8, $3, Enemy_NinjiJumping
0A70A 0E 00                     	.db Enemy_NinjiJumping, $8 << 4 | $3
0A70C                           	enemy $7, $9, Enemy_NinjiJumping
0A70C 0E 00                     	.db Enemy_NinjiJumping, $7 << 4 | $9
0A70E                           	enemy $B, $C, Enemy_ShyguyPink
0A70E 03 00                     	.db Enemy_ShyguyPink, $B << 4 | $C
0A710                           
0A710                           ; Page 3
0A710                           +	distTo + ; $05 (2 enemies)
0A710 00                        	.db (+ - $)
0A711                           	enemy $9, $0, Enemy_NinjiJumping
0A711 0E 00                     	.db Enemy_NinjiJumping, $9 << 4 | $0
0A713                           	enemy $7, $5, Enemy_NinjiJumping
0A713 0E 00                     	.db Enemy_NinjiJumping, $7 << 4 | $5
0A715                           
0A715                           ; Page 4
0A715                           +	distTo + ; $01 (0 enemies)
0A715 00                        	.db (+ - $)
0A716                           
0A716                           ; End of enemy data
0A716                           +
0A716                           include "src/levels/1/1-1/1-1-area2-enemies.asm"
0A716                           ; Level 1-1, Area 2
0A716                           
0A716                           EnemyData_Level_1_1_Area2:
0A716                           
0A716                           ; Page 0
0A716                           	distTo + ; $03 (1 enemy)
0A716 00                        	.db (+ - $)
0A717                           	enemy $E, $C, Enemy_ShyguyRed
0A717 01 00                     	.db Enemy_ShyguyRed, $E << 4 | $C
0A719                           
0A719                           ; Page 1
0A719                           +	distTo + ; $07 (3 enemies)
0A719 00                        	.db (+ - $)
0A71A                           	enemy $1, $C, Enemy_ShyguyRed
0A71A 01 00                     	.db Enemy_ShyguyRed, $1 << 4 | $C
0A71C                           	enemy $5, $C, Enemy_Tweeter
0A71C 02 00                     	.db Enemy_Tweeter, $5 << 4 | $C
0A71E                           	enemy $E, $5, Enemy_ShyguyPink
0A71E 03 00                     	.db Enemy_ShyguyPink, $E << 4 | $5
0A720                           
0A720                           ; Page 2
0A720                           +	distTo + ; $07 (3 enemies)
0A720 00                        	.db (+ - $)
0A721                           	enemy $6, $C, Enemy_ShyguyRed
0A721 01 00                     	.db Enemy_ShyguyRed, $6 << 4 | $C
0A723                           	enemy $8, $C, Enemy_Tweeter
0A723 02 00                     	.db Enemy_Tweeter, $8 << 4 | $C
0A725                           	enemy $C, $C, Enemy_ShyguyRed
0A725 01 00                     	.db Enemy_ShyguyRed, $C << 4 | $C
0A727                           
0A727                           ; Page 3
0A727                           +	distTo + ; $05 (2 enemies)
0A727 00                        	.db (+ - $)
0A728                           	enemy $7, $9, Enemy_ShyguyPink
0A728 03 00                     	.db Enemy_ShyguyPink, $7 << 4 | $9
0A72A                           	enemy $D, $4, Enemy_ShyguyRed
0A72A 01 00                     	.db Enemy_ShyguyRed, $D << 4 | $4
0A72C                           
0A72C                           ; Page 4
0A72C                           +	distTo + ; $09 (4 enemies)
0A72C 00                        	.db (+ - $)
0A72D                           	enemy $0, $4, Enemy_ShyguyRed
0A72D 01 00                     	.db Enemy_ShyguyRed, $0 << 4 | $4
0A72F                           	enemy $3, $4, Enemy_Tweeter
0A72F 02 00                     	.db Enemy_Tweeter, $3 << 4 | $4
0A731                           	enemy $8, $7, Enemy_FallingLogs
0A731 3B 00                     	.db Enemy_FallingLogs, $8 << 4 | $7
0A733                           	enemy $C, $7, Enemy_FallingLogs
0A733 3B 00                     	.db Enemy_FallingLogs, $C << 4 | $7
0A735                           
0A735                           ; Page 5
0A735                           +	distTo + ; $07 (3 enemies)
0A735 00                        	.db (+ - $)
0A736                           	enemy $A, $9, Enemy_ShyguyPink
0A736 03 00                     	.db Enemy_ShyguyPink, $A << 4 | $9
0A738                           	enemy $B, $C, Enemy_ShyguyPink
0A738 03 00                     	.db Enemy_ShyguyPink, $B << 4 | $C
0A73A                           	enemy $C, $6, Enemy_ShyguyPink
0A73A 03 00                     	.db Enemy_ShyguyPink, $C << 4 | $6
0A73C                           
0A73C                           ; Page 6
0A73C                           +	distTo + ; $05 (2 enemies)
0A73C 00                        	.db (+ - $)
0A73D                           	enemy $9, $C, Enemy_ShyguyRed
0A73D 01 00                     	.db Enemy_ShyguyRed, $9 << 4 | $C
0A73F                           	enemy $E, $5, Enemy_ShyguyPink
0A73F 03 00                     	.db Enemy_ShyguyPink, $E << 4 | $5
0A741                           
0A741                           ; Page 7
0A741                           +	distTo + ; $05 (2 enemies)
0A741 00                        	.db (+ - $)
0A742                           	enemy $2, $C, Enemy_ShyguyRed
0A742 01 00                     	.db Enemy_ShyguyRed, $2 << 4 | $C
0A744                           	enemy $4, $C, Enemy_Tweeter
0A744 02 00                     	.db Enemy_Tweeter, $4 << 4 | $C
0A746                           
0A746                           ; Page 8
0A746                           +	distTo + ; $07 (3 enemies)
0A746 00                        	.db (+ - $)
0A747                           	enemy $1, $C, Enemy_ShyguyRed
0A747 01 00                     	.db Enemy_ShyguyRed, $1 << 4 | $C
0A749                           	enemy $4, $5, Enemy_ShyguyPink
0A749 03 00                     	.db Enemy_ShyguyPink, $4 << 4 | $5
0A74B                           	enemy $4, $C, Enemy_Tweeter
0A74B 02 00                     	.db Enemy_Tweeter, $4 << 4 | $C
0A74D                           
0A74D                           ; Page 9
0A74D                           +	distTo + ; $05 (2 enemies)
0A74D 00                        	.db (+ - $)
0A74E                           	enemy $9, $5, Enemy_ShyguyRed
0A74E 01 00                     	.db Enemy_ShyguyRed, $9 << 4 | $5
0A750                           	enemy $D, $1, Enemy_Hoopstar
0A750 14 00                     	.db Enemy_Hoopstar, $D << 4 | $1
0A752                           
0A752                           ; Page A
0A752                           +	distTo + ; $01 (0 enemies)
0A752 00                        	.db (+ - $)
0A753                           
0A753                           ; End of enemy data
0A753                           +
0A753                           include "src/levels/1/1-1/1-1-area3-enemies.asm"
0A753                           ; Level 1-1, Area 3
0A753                           
0A753                           EnemyData_Level_1_1_Area3:
0A753                           
0A753                           ; Page 0
0A753                           	distTo + ; $03 (1 enemy)
0A753 00                        	.db (+ - $)
0A754                           	enemy $8, $5, Enemy_ShyguyPink
0A754 03 00                     	.db Enemy_ShyguyPink, $8 << 4 | $5
0A756                           
0A756                           ; Page 1
0A756                           +	distTo + ; $01 (0 enemies)
0A756 00                        	.db (+ - $)
0A757                           
0A757                           ; Page 2
0A757                           +	distTo + ; $01 (0 enemies)
0A757 00                        	.db (+ - $)
0A758                           
0A758                           ; Page 3
0A758                           +	distTo + ; $01 (0 enemies)
0A758 00                        	.db (+ - $)
0A759                           
0A759                           ; End of enemy data
0A759                           +
0A759                           include "src/levels/1/1-1/1-1-area4-enemies.asm"
0A759                           ; Level 1-1, Area 4
0A759                           
0A759                           EnemyData_Level_1_1_Area4:
0A759                           
0A759                           ; Page 0
0A759                           	distTo + ; $03 (1 enemy)
0A759 00                        	.db (+ - $)
0A75A                           	enemy $B, $C, Enemy_NinjiJumping
0A75A 0E 00                     	.db Enemy_NinjiJumping, $B << 4 | $C
0A75C                           
0A75C                           ; Page 1
0A75C                           +	distTo + ; $01 (0 enemies)
0A75C 00                        	.db (+ - $)
0A75D                           
0A75D                           ; Page 2
0A75D                           +	distTo + ; $01 (0 enemies)
0A75D 00                        	.db (+ - $)
0A75E                           
0A75E                           ; End of enemy data
0A75E                           +
0A75E                           include "src/levels/1/1-1/1-1-area5-enemies.asm"
0A75E                           ; Level 1-1, Area 5
0A75E                           
0A75E                           EnemyData_Level_1_1_Area5:
0A75E                           
0A75E                           ; Page 0
0A75E                           	distTo + ; $01 (0 enemies)
0A75E 00                        	.db (+ - $)
0A75F                           
0A75F                           ; Page 1
0A75F                           +	distTo + ; $01 (0 enemies)
0A75F 00                        	.db (+ - $)
0A760                           
0A760                           ; Page 2
0A760                           +	distTo + ; $07 (3 enemies)
0A760 00                        	.db (+ - $)
0A761                           	enemy $A, $7, Enemy_Birdo
0A761 1C 00                     	.db Enemy_Birdo, $A << 4 | $7
0A763                           	enemy $A, $8, Enemy_CrystalBall
0A763 44 00                     	.db Enemy_CrystalBall, $A << 4 | $8
0A765                           	enemy $E, $7, Enemy_HawkmouthLeft
0A765 43 00                     	.db Enemy_HawkmouthLeft, $E << 4 | $7
0A767                           
0A767                           ; Page 3
0A767                           +	distTo + ; $01 (0 enemies)
0A767 00                        	.db (+ - $)
0A768                           
0A768                           ; Page 4
0A768                           +	distTo + ; $01 (0 enemies)
0A768 00                        	.db (+ - $)
0A769                           
0A769                           ; Page 5
0A769                           +	distTo + ; $01 (0 enemies)
0A769 00                        	.db (+ - $)
0A76A                           
0A76A                           ; End of enemy data
0A76A                           +
0A76A                           
0A76A                           ; World 1-2
0A76A                           include "src/levels/1/1-2/1-2-area0-enemies.asm"
0A76A                           ; Level 1-2, Area 0
0A76A                           
0A76A                           EnemyData_Level_1_2_Area0:
0A76A                           
0A76A                           ; Page 0
0A76A                           	distTo + ; $03 (1 enemy)
0A76A 00                        	.db (+ - $)
0A76B                           	enemy $6, $A, Enemy_HawkmouthRight
0A76B 42 00                     	.db Enemy_HawkmouthRight, $6 << 4 | $A
0A76D                           
0A76D                           ; Page 1
0A76D                           +	distTo + ; $03 (1 enemy)
0A76D 00                        	.db (+ - $)
0A76E                           	enemy $2, $2, Enemy_Pidgit
0A76E 12 00                     	.db Enemy_Pidgit, $2 << 4 | $2
0A770                           
0A770                           ; Page 2
0A770                           +	distTo + ; $09 (4 enemies)
0A770 00                        	.db (+ - $)
0A771                           	enemy $0, $0, Enemy_BeezoDiving
0A771 0F 00                     	.db Enemy_BeezoDiving, $0 << 4 | $0
0A773                           	enemy $4, $0, Enemy_BeezoDiving
0A773 0F 00                     	.db Enemy_BeezoDiving, $4 << 4 | $0
0A775                           	enemy $9, $0, Enemy_BeezoDiving
0A775 0F 00                     	.db Enemy_BeezoDiving, $9 << 4 | $0
0A777                           	enemy $E, $0, Enemy_BeezoDiving
0A777 0F 00                     	.db Enemy_BeezoDiving, $E << 4 | $0
0A779                           
0A779                           ; Page 3
0A779                           +	distTo + ; $01 (0 enemies)
0A779 00                        	.db (+ - $)
0A77A                           
0A77A                           ; Page 4
0A77A                           +	distTo + ; $05 (2 enemies)
0A77A 00                        	.db (+ - $)
0A77B                           	enemy $3, $C, Enemy_NinjiJumping
0A77B 0E 00                     	.db Enemy_NinjiJumping, $3 << 4 | $C
0A77D                           	enemy $6, $C, Enemy_NinjiJumping
0A77D 0E 00                     	.db Enemy_NinjiJumping, $6 << 4 | $C
0A77F                           
0A77F                           ; Page 5
0A77F                           +	distTo + ; $05 (2 enemies)
0A77F 00                        	.db (+ - $)
0A780                           	enemy $5, $3, Enemy_SnifitGray
0A780 06 00                     	.db Enemy_SnifitGray, $5 << 4 | $3
0A782                           	enemy $8, $3, Enemy_NinjiRunning
0A782 0D 00                     	.db Enemy_NinjiRunning, $8 << 4 | $3
0A784                           
0A784                           ; Page 6
0A784                           +	distTo + ; $05 (2 enemies)
0A784 00                        	.db (+ - $)
0A785                           	enemy $B, $6, Enemy_ShyguyRed
0A785 01 00                     	.db Enemy_ShyguyRed, $B << 4 | $6
0A787                           	enemy $F, $6, Enemy_ShyguyRed
0A787 01 00                     	.db Enemy_ShyguyRed, $F << 4 | $6
0A789                           
0A789                           ; Page 7
0A789                           +	distTo + ; $01 (0 enemies)
0A789 00                        	.db (+ - $)
0A78A                           
0A78A                           ; End of enemy data
0A78A                           +
0A78A                           include "src/levels/1/1-2/1-2-area1-enemies.asm"
0A78A                           ; Level 1-2, Area 1
0A78A                           
0A78A                           EnemyData_Level_1_2_Area1:
0A78A                           
0A78A                           ; Page 0
0A78A                           	distTo + ; $03 (1 enemy)
0A78A 00                        	.db (+ - $)
0A78B                           	enemy $D, $C, Enemy_ShyguyRed
0A78B 01 00                     	.db Enemy_ShyguyRed, $D << 4 | $C
0A78D                           
0A78D                           ; Page 1
0A78D                           +	distTo + ; $03 (1 enemy)
0A78D 00                        	.db (+ - $)
0A78E                           	enemy $3, $C, Enemy_SnifitPink
0A78E 07 00                     	.db Enemy_SnifitPink, $3 << 4 | $C
0A790                           
0A790                           ; Page 2
0A790                           +	distTo + ; $03 (1 enemy)
0A790 00                        	.db (+ - $)
0A791                           	enemy $2, $C, Enemy_SnifitGray
0A791 06 00                     	.db Enemy_SnifitGray, $2 << 4 | $C
0A793                           
0A793                           ; Page 3
0A793                           +	distTo + ; $05 (2 enemies)
0A793 00                        	.db (+ - $)
0A794                           	enemy $7, $9, Enemy_NinjiRunning
0A794 0D 00                     	.db Enemy_NinjiRunning, $7 << 4 | $9
0A796                           	enemy $8, $9, Enemy_NinjiRunning
0A796 0D 00                     	.db Enemy_NinjiRunning, $8 << 4 | $9
0A798                           
0A798                           ; Page 4
0A798                           +	distTo + ; $01 (0 enemies)
0A798 00                        	.db (+ - $)
0A799                           
0A799                           ; End of enemy data
0A799                           +
0A799                           include "src/levels/1/1-2/1-2-area2-enemies.asm"
0A799                           ; Level 1-2, Area 2
0A799                           
0A799                           EnemyData_Level_1_2_Area2:
0A799                           
0A799                           ; Page 0
0A799                           	distTo + ; $01 (0 enemies)
0A799 00                        	.db (+ - $)
0A79A                           
0A79A                           ; Page 1
0A79A                           +	distTo + ; $05 (2 enemies)
0A79A 00                        	.db (+ - $)
0A79B                           	enemy $A, $7, Enemy_Birdo
0A79B 1C 00                     	.db Enemy_Birdo, $A << 4 | $7
0A79D                           	enemy $A, $8, Enemy_CrystalBall
0A79D 44 00                     	.db Enemy_CrystalBall, $A << 4 | $8
0A79F                           
0A79F                           ; Page 2
0A79F                           +	distTo + ; $03 (1 enemy)
0A79F 00                        	.db (+ - $)
0A7A0                           	enemy $3, $8, Enemy_HawkmouthLeft
0A7A0 43 00                     	.db Enemy_HawkmouthLeft, $3 << 4 | $8
0A7A2                           
0A7A2                           ; Page 3
0A7A2                           +	distTo + ; $01 (0 enemies)
0A7A2 00                        	.db (+ - $)
0A7A3                           
0A7A3                           ; End of enemy data
0A7A3                           +
0A7A3                           include "src/levels/1/1-2/1-2-area3-enemies.asm"
0A7A3                           ; Level 1-2, Area 3
0A7A3                           
0A7A3                           EnemyData_Level_1_2_Area3:
0A7A3                           
0A7A3                           ; Page 0
0A7A3                           	distTo + ; $05 (2 enemies)
0A7A3 00                        	.db (+ - $)
0A7A4                           	enemy $7, $9, Enemy_Key
0A7A4 3D 00                     	.db Enemy_Key, $7 << 4 | $9
0A7A6                           	enemy $7, $7, Enemy_Phanto
0A7A6 17 00                     	.db Enemy_Phanto, $7 << 4 | $7
0A7A8                           
0A7A8                           ; Page 1
0A7A8                           +	distTo + ; $01 (0 enemies)
0A7A8 00                        	.db (+ - $)
0A7A9                           
0A7A9                           ; End of enemy data
0A7A9                           +
0A7A9                           include "src/levels/1/1-2/1-2-area4-enemies.asm"
0A7A9                           ; Level 1-2, Area 4
0A7A9                           
0A7A9                           EnemyData_Level_1_2_Area4:
0A7A9                           
0A7A9                           ; Page 0
0A7A9                           	distTo + ; $01 (0 enemies)
0A7A9 00                        	.db (+ - $)
0A7AA                           
0A7AA                           ; Page 1
0A7AA                           +	distTo + ; $01 (0 enemies)
0A7AA 00                        	.db (+ - $)
0A7AB                           
0A7AB                           ; Page 2
0A7AB                           +	distTo + ; $01 (0 enemies)
0A7AB 00                        	.db (+ - $)
0A7AC                           
0A7AC                           ; Page 3
0A7AC                           +	distTo + ; $01 (0 enemies)
0A7AC 00                        	.db (+ - $)
0A7AD                           
0A7AD                           ; Page 4
0A7AD                           +	distTo + ; $01 (0 enemies)
0A7AD 00                        	.db (+ - $)
0A7AE                           
0A7AE                           ; Page 5
0A7AE                           +	distTo + ; $01 (0 enemies)
0A7AE 00                        	.db (+ - $)
0A7AF                           
0A7AF                           ; Page 6
0A7AF                           +	distTo + ; $01 (0 enemies)
0A7AF 00                        	.db (+ - $)
0A7B0                           
0A7B0                           ; Page 7
0A7B0                           +	distTo + ; $01 (0 enemies)
0A7B0 00                        	.db (+ - $)
0A7B1                           
0A7B1                           ; Page 8
0A7B1                           +	distTo + ; $01 (0 enemies)
0A7B1 00                        	.db (+ - $)
0A7B2                           
0A7B2                           ; Page 9
0A7B2                           +	distTo + ; $01 (0 enemies)
0A7B2 00                        	.db (+ - $)
0A7B3                           
0A7B3                           ; Page A
0A7B3                           +	distTo + ; $03 (1 enemy)
0A7B3 00                        	.db (+ - $)
0A7B4                           	enemy $2, $8, Enemy_Tweeter
0A7B4 02 00                     	.db Enemy_Tweeter, $2 << 4 | $8
0A7B6                           
0A7B6                           ; End of enemy data
0A7B6                           +
0A7B6                           include "src/levels/1/1-2/1-2-area5-enemies.asm"
0A7B6                           ; Level 1-2, Area 5
0A7B6                           
0A7B6                           EnemyData_Level_1_2_Area5:
0A7B6                           
0A7B6                           ; Page 0
0A7B6                           	distTo + ; $01 (0 enemies)
0A7B6 00                        	.db (+ - $)
0A7B7                           
0A7B7                           ; Page 1
0A7B7                           +	distTo + ; $01 (0 enemies)
0A7B7 00                        	.db (+ - $)
0A7B8                           
0A7B8                           ; Page 2
0A7B8                           +	distTo + ; $01 (0 enemies)
0A7B8 00                        	.db (+ - $)
0A7B9                           
0A7B9                           ; End of enemy data
0A7B9                           +
0A7B9                           
0A7B9                           ; World 1-3
0A7B9                           include "src/levels/1/1-3/1-3-area0-enemies.asm"
0A7B9                           ; Level 1-3, Area 0
0A7B9                           
0A7B9                           EnemyData_Level_1_3_Area0:
0A7B9                           
0A7B9                           ; Page 0
0A7B9                           	distTo + ; $03 (1 enemy)
0A7B9 00                        	.db (+ - $)
0A7BA                           	enemy $3, $8, Enemy_HawkmouthRight
0A7BA 42 00                     	.db Enemy_HawkmouthRight, $3 << 4 | $8
0A7BC                           
0A7BC                           ; Page 1
0A7BC                           +	distTo + ; $05 (2 enemies)
0A7BC 00                        	.db (+ - $)
0A7BD                           	enemy $9, $4, Enemy_SnifitPink
0A7BD 07 00                     	.db Enemy_SnifitPink, $9 << 4 | $4
0A7BF                           	enemy $B, $4, Enemy_SnifitPink
0A7BF 07 00                     	.db Enemy_SnifitPink, $B << 4 | $4
0A7C1                           
0A7C1                           ; Page 2
0A7C1                           +	distTo + ; $03 (1 enemy)
0A7C1 00                        	.db (+ - $)
0A7C2                           	enemy $7, $4, Enemy_ShyguyRed
0A7C2 01 00                     	.db Enemy_ShyguyRed, $7 << 4 | $4
0A7C4                           
0A7C4                           ; Page 3
0A7C4                           +	distTo + ; $05 (2 enemies)
0A7C4 00                        	.db (+ - $)
0A7C5                           	enemy $3, $4, Enemy_Trouter
0A7C5 13 00                     	.db Enemy_Trouter, $3 << 4 | $4
0A7C7                           	enemy $A, $4, Enemy_Trouter
0A7C7 13 00                     	.db Enemy_Trouter, $A << 4 | $4
0A7C9                           
0A7C9                           ; Page 4
0A7C9                           +	distTo + ; $07 (3 enemies)
0A7C9 00                        	.db (+ - $)
0A7CA                           	enemy $0, $2, Enemy_Trouter
0A7CA 13 00                     	.db Enemy_Trouter, $0 << 4 | $2
0A7CC                           	enemy $6, $2, Enemy_Trouter
0A7CC 13 00                     	.db Enemy_Trouter, $6 << 4 | $2
0A7CE                           	enemy $E, $6, Enemy_FallingLogs
0A7CE 3B 00                     	.db Enemy_FallingLogs, $E << 4 | $6
0A7D0                           
0A7D0                           ; Page 5
0A7D0                           +	distTo + ; $05 (2 enemies)
0A7D0 00                        	.db (+ - $)
0A7D1                           	enemy $2, $6, Enemy_FallingLogs
0A7D1 3B 00                     	.db Enemy_FallingLogs, $2 << 4 | $6
0A7D3                           	enemy $6, $6, Enemy_FallingLogs
0A7D3 3B 00                     	.db Enemy_FallingLogs, $6 << 4 | $6
0A7D5                           
0A7D5                           ; Page 6
0A7D5                           +	distTo + ; $09 (4 enemies)
0A7D5 00                        	.db (+ - $)
0A7D6                           	enemy $4, $A, Enemy_Trouter
0A7D6 13 00                     	.db Enemy_Trouter, $4 << 4 | $A
0A7D8                           	enemy $5, $C, Enemy_FallingLogs
0A7D8 3B 00                     	.db Enemy_FallingLogs, $5 << 4 | $C
0A7DA                           	enemy $8, $A, Enemy_Trouter
0A7DA 13 00                     	.db Enemy_Trouter, $8 << 4 | $A
0A7DC                           	enemy $9, $C, Enemy_FallingLogs
0A7DC 3B 00                     	.db Enemy_FallingLogs, $9 << 4 | $C
0A7DE                           
0A7DE                           ; Page 7
0A7DE                           +	distTo + ; $05 (2 enemies)
0A7DE 00                        	.db (+ - $)
0A7DF                           	enemy $2, $A, Enemy_ShyguyPink
0A7DF 03 00                     	.db Enemy_ShyguyPink, $2 << 4 | $A
0A7E1                           	enemy $7, $A, Enemy_ShyguyPink
0A7E1 03 00                     	.db Enemy_ShyguyPink, $7 << 4 | $A
0A7E3                           
0A7E3                           ; Page 8
0A7E3                           +	distTo + ; $09 (4 enemies)
0A7E3 00                        	.db (+ - $)
0A7E4                           	enemy $2, $9, Enemy_NinjiRunning
0A7E4 0D 00                     	.db Enemy_NinjiRunning, $2 << 4 | $9
0A7E6                           	enemy $4, $9, Enemy_NinjiRunning
0A7E6 0D 00                     	.db Enemy_NinjiRunning, $4 << 4 | $9
0A7E8                           	enemy $7, $A, Enemy_Tweeter
0A7E8 02 00                     	.db Enemy_Tweeter, $7 << 4 | $A
0A7EA                           	enemy $9, $A, Enemy_Tweeter
0A7EA 02 00                     	.db Enemy_Tweeter, $9 << 4 | $A
0A7EC                           
0A7EC                           ; Page 9
0A7EC                           +	distTo + ; $01 (0 enemies)
0A7EC 00                        	.db (+ - $)
0A7ED                           
0A7ED                           ; Page A
0A7ED                           +	distTo + ; $01 (0 enemies)
0A7ED 00                        	.db (+ - $)
0A7EE                           
0A7EE                           ; End of enemy data
0A7EE                           +
0A7EE                           include "src/levels/1/1-3/1-3-area1-enemies.asm"
0A7EE                           ; Level 1-3, Area 1
0A7EE                           
0A7EE                           EnemyData_Level_1_3_Area1:
0A7EE                           
0A7EE                           ; Page 0
0A7EE                           	distTo + ; $07 (3 enemies)
0A7EE 00                        	.db (+ - $)
0A7EF                           	enemy $8, $3, Enemy_Phanto
0A7EF 17 00                     	.db Enemy_Phanto, $8 << 4 | $3
0A7F1                           	enemy $8, $8, Enemy_Key
0A7F1 3D 00                     	.db Enemy_Key, $8 << 4 | $8
0A7F3                           	enemy $8, $A, Enemy_Spark1
0A7F3 2E 00                     	.db Enemy_Spark1, $8 << 4 | $A
0A7F5                           
0A7F5                           ; Page 1
0A7F5                           +	distTo + ; $01 (0 enemies)
0A7F5 00                        	.db (+ - $)
0A7F6                           
0A7F6                           ; End of enemy data
0A7F6                           +
0A7F6                           include "src/levels/1/1-3/1-3-area2-enemies.asm"
0A7F6                           ; Level 1-3, Area 2
0A7F6                           
0A7F6                           EnemyData_Level_1_3_Area2:
0A7F6                           
0A7F6                           ; Page 0
0A7F6                           	distTo + ; $07 (3 enemies)
0A7F6 00                        	.db (+ - $)
0A7F7                           	enemy $4, $B, Enemy_Spark1
0A7F7 2E 00                     	.db Enemy_Spark1, $4 << 4 | $B
0A7F9                           	enemy $7, $C, Enemy_Spark3
0A7F9 30 00                     	.db Enemy_Spark3, $7 << 4 | $C
0A7FB                           	enemy $C, $9, Enemy_Spark3
0A7FB 30 00                     	.db Enemy_Spark3, $C << 4 | $9
0A7FD                           
0A7FD                           ; Page 1
0A7FD                           +	distTo + ; $01 (0 enemies)
0A7FD 00                        	.db (+ - $)
0A7FE                           
0A7FE                           ; Page 2
0A7FE                           +	distTo + ; $07 (3 enemies)
0A7FE 00                        	.db (+ - $)
0A7FF                           	enemy $6, $1, Enemy_Spark3
0A7FF 30 00                     	.db Enemy_Spark3, $6 << 4 | $1
0A801                           	enemy $5, $A, Enemy_Spark4
0A801 31 00                     	.db Enemy_Spark4, $5 << 4 | $A
0A803                           	enemy $B, $A, Enemy_ShyguyPink
0A803 03 00                     	.db Enemy_ShyguyPink, $B << 4 | $A
0A805                           
0A805                           ; Page 3
0A805                           +	distTo + ; $03 (1 enemy)
0A805 00                        	.db (+ - $)
0A806                           	enemy $D, $B, Enemy_ShyguyRed
0A806 01 00                     	.db Enemy_ShyguyRed, $D << 4 | $B
0A808                           
0A808                           ; Page 4
0A808                           +	distTo + ; $03 (1 enemy)
0A808 00                        	.db (+ - $)
0A809                           	enemy $4, $A, Enemy_SnifitGray
0A809 06 00                     	.db Enemy_SnifitGray, $4 << 4 | $A
0A80B                           
0A80B                           ; Page 5
0A80B                           +	distTo + ; $03 (1 enemy)
0A80B 00                        	.db (+ - $)
0A80C                           	enemy $3, $5, Enemy_ShyguyPink
0A80C 03 00                     	.db Enemy_ShyguyPink, $3 << 4 | $5
0A80E                           
0A80E                           ; Page 6
0A80E                           +	distTo + ; $01 (0 enemies)
0A80E 00                        	.db (+ - $)
0A80F                           
0A80F                           ; Page 7
0A80F                           +	distTo + ; $01 (0 enemies)
0A80F 00                        	.db (+ - $)
0A810                           
0A810                           ; End of enemy data
0A810                           +
0A810                           include "src/levels/1/1-3/1-3-area3-enemies.asm"
0A810                           ; Level 1-3, Area 3
0A810                           
0A810                           EnemyData_Level_1_3_Area3:
0A810                           
0A810                           ; Page 0
0A810                           	distTo + ; $03 (1 enemy)
0A810 00                        	.db (+ - $)
0A811                           	enemy $C, $9, Enemy_Spark4
0A811 31 00                     	.db Enemy_Spark4, $C << 4 | $9
0A813                           
0A813                           ; Page 1
0A813                           +	distTo + ; $03 (1 enemy)
0A813 00                        	.db (+ - $)
0A814                           	enemy $C, $6, Enemy_Spark2
0A814 2F 00                     	.db Enemy_Spark2, $C << 4 | $6
0A816                           
0A816                           ; Page 2
0A816                           +	distTo + ; $09 (4 enemies)
0A816 00                        	.db (+ - $)
0A817                           	enemy $5, $6, Enemy_Tweeter
0A817 02 00                     	.db Enemy_Tweeter, $5 << 4 | $6
0A819                           	enemy $D, $4, Enemy_SnifitPink
0A819 07 00                     	.db Enemy_SnifitPink, $D << 4 | $4
0A81B                           	enemy $D, $7, Enemy_SnifitPink
0A81B 07 00                     	.db Enemy_SnifitPink, $D << 4 | $7
0A81D                           	enemy $D, $A, Enemy_SnifitPink
0A81D 07 00                     	.db Enemy_SnifitPink, $D << 4 | $A
0A81F                           
0A81F                           ; Page 3
0A81F                           +	distTo + ; $05 (2 enemies)
0A81F 00                        	.db (+ - $)
0A820                           	enemy $A, $7, Enemy_Spark3
0A820 30 00                     	.db Enemy_Spark3, $A << 4 | $7
0A822                           	enemy $F, $7, Enemy_Spark3
0A822 30 00                     	.db Enemy_Spark3, $F << 4 | $7
0A824                           
0A824                           ; Page 4
0A824                           +	distTo + ; $05 (2 enemies)
0A824 00                        	.db (+ - $)
0A825                           	enemy $3, $A, Enemy_Spark1
0A825 2E 00                     	.db Enemy_Spark1, $3 << 4 | $A
0A827                           	enemy $6, $A, Enemy_Spark1
0A827 2E 00                     	.db Enemy_Spark1, $6 << 4 | $A
0A829                           
0A829                           ; Page 5
0A829                           +	distTo + ; $09 (4 enemies)
0A829 00                        	.db (+ - $)
0A82A                           	enemy $0, $9, Enemy_NinjiRunning
0A82A 0D 00                     	.db Enemy_NinjiRunning, $0 << 4 | $9
0A82C                           	enemy $2, $9, Enemy_NinjiRunning
0A82C 0D 00                     	.db Enemy_NinjiRunning, $2 << 4 | $9
0A82E                           	enemy $A, $8, Enemy_CrystalBall
0A82E 44 00                     	.db Enemy_CrystalBall, $A << 4 | $8
0A830                           	enemy $D, $7, Enemy_HawkmouthLeft
0A830 43 00                     	.db Enemy_HawkmouthLeft, $D << 4 | $7
0A832                           
0A832                           ; Page 6
0A832                           +	distTo + ; $01 (0 enemies)
0A832 00                        	.db (+ - $)
0A833                           
0A833                           ; End of enemy data
0A833                           +
0A833                           include "src/levels/1/1-3/1-3-area4-enemies.asm"
0A833                           ; Level 1-3, Area 4
0A833                           
0A833                           EnemyData_Level_1_3_Area4:
0A833                           
0A833                           ; Page 0
0A833                           	distTo + ; $03 (1 enemy)
0A833 00                        	.db (+ - $)
0A834                           	enemy $F, $6, Enemy_Spark3
0A834 30 00                     	.db Enemy_Spark3, $F << 4 | $6
0A836                           
0A836                           ; Page 1
0A836                           +	distTo + ; $03 (1 enemy)
0A836 00                        	.db (+ - $)
0A837                           	enemy $D, $7, Enemy_BossMouser
0A837 5D 00                     	.db Enemy_BossMouser, $D << 4 | $7
0A839                           
0A839                           ; Page 2
0A839                           +	distTo + ; $01 (0 enemies)
0A839 00                        	.db (+ - $)
0A83A                           
0A83A                           ; End of enemy data
0A83A                           +
0A83A                           ; -------------------------------
0A83A                           
0A83A                           
0A83A                           ; -------------------------------
0A83A                           ; World 2
0A83A                           
0A83A                           ; World 2-1
0A83A                           include "src/levels/2/2-1/2-1-area0-enemies.asm"
0A83A                           ; Level 2-1, Area 0
0A83A                           
0A83A                           EnemyData_Level_2_1_Area0:
0A83A                           
0A83A                           ; Page 0
0A83A                           	distTo + ; $01 (0 enemies)
0A83A 00                        	.db (+ - $)
0A83B                           
0A83B                           ; Page 1
0A83B                           +	distTo + ; $03 (1 enemy)
0A83B 00                        	.db (+ - $)
0A83C                           	enemy $F, $A, Enemy_CobratSand
0A83C 19 00                     	.db Enemy_CobratSand, $F << 4 | $A
0A83E                           
0A83E                           ; Page 2
0A83E                           +	distTo + ; $03 (1 enemy)
0A83E 00                        	.db (+ - $)
0A83F                           	enemy $A, $7, Enemy_CobratJar
0A83F 18 00                     	.db Enemy_CobratJar, $A << 4 | $7
0A841                           
0A841                           ; Page 3
0A841                           +	distTo + ; $05 (2 enemies)
0A841 00                        	.db (+ - $)
0A842                           	enemy $6, $9, Enemy_ShyguyRed
0A842 01 00                     	.db Enemy_ShyguyRed, $6 << 4 | $9
0A844                           	enemy $9, $9, Enemy_ShyguyPink
0A844 03 00                     	.db Enemy_ShyguyPink, $9 << 4 | $9
0A846                           
0A846                           ; Page 4
0A846                           +	distTo + ; $03 (1 enemy)
0A846 00                        	.db (+ - $)
0A847                           	enemy $4, $7, Enemy_CobratJar
0A847 18 00                     	.db Enemy_CobratJar, $4 << 4 | $7
0A849                           
0A849                           ; Page 5
0A849                           +	distTo + ; $03 (1 enemy)
0A849 00                        	.db (+ - $)
0A84A                           	enemy $F, $8, Enemy_ShyguyPink
0A84A 03 00                     	.db Enemy_ShyguyPink, $F << 4 | $8
0A84C                           
0A84C                           ; Page 6
0A84C                           +	distTo + ; $01 (0 enemies)
0A84C 00                        	.db (+ - $)
0A84D                           
0A84D                           ; Page 7
0A84D                           +	distTo + ; $07 (3 enemies)
0A84D 00                        	.db (+ - $)
0A84E                           	enemy $2, $4, Enemy_PanserStationaryFiresAngled
0A84E 23 00                     	.db Enemy_PanserStationaryFiresAngled, $2 << 4 | $4
0A850                           	enemy $2, $7, Enemy_ShyguyRed
0A850 01 00                     	.db Enemy_ShyguyRed, $2 << 4 | $7
0A852                           	enemy $4, $9, Enemy_ShyguyRed
0A852 01 00                     	.db Enemy_ShyguyRed, $4 << 4 | $9
0A854                           
0A854                           ; Page 8
0A854                           +	distTo + ; $03 (1 enemy)
0A854 00                        	.db (+ - $)
0A855                           	enemy $4, $A, Enemy_CobratSand
0A855 19 00                     	.db Enemy_CobratSand, $4 << 4 | $A
0A857                           
0A857                           ; Page 9
0A857                           +	distTo + ; $01 (0 enemies)
0A857 00                        	.db (+ - $)
0A858                           
0A858                           ; Page A
0A858                           +	distTo + ; $01 (0 enemies)
0A858 00                        	.db (+ - $)
0A859                           
0A859                           ; End of enemy data
0A859                           +
0A859                           include "src/levels/2/2-1/2-1-area1-enemies.asm"
0A859                           ; Level 2-1, Area 1
0A859                           
0A859                           EnemyData_Level_2_1_Area1:
0A859                           
0A859                           ; Page 0
0A859                           	distTo + ; $05 (2 enemies)
0A859 00                        	.db (+ - $)
0A85A                           	enemy $4, $9, Enemy_ShyguyRed
0A85A 01 00                     	.db Enemy_ShyguyRed, $4 << 4 | $9
0A85C                           	enemy $6, $D, Enemy_ShyguyRed
0A85C 01 00                     	.db Enemy_ShyguyRed, $6 << 4 | $D
0A85E                           
0A85E                           ; Page 1
0A85E                           +	distTo + ; $03 (1 enemy)
0A85E 00                        	.db (+ - $)
0A85F                           	enemy $D, $3, Enemy_ShyguyRed
0A85F 01 00                     	.db Enemy_ShyguyRed, $D << 4 | $3
0A861                           
0A861                           ; Page 2
0A861                           +	distTo + ; $07 (3 enemies)
0A861 00                        	.db (+ - $)
0A862                           	enemy $4, $0, Enemy_ShyguyRed
0A862 01 00                     	.db Enemy_ShyguyRed, $4 << 4 | $0
0A864                           	enemy $1, $6, Enemy_SnifitGray
0A864 06 00                     	.db Enemy_SnifitGray, $1 << 4 | $6
0A866                           	enemy $C, $8, Enemy_ShyguyRed
0A866 01 00                     	.db Enemy_ShyguyRed, $C << 4 | $8
0A868                           
0A868                           ; Page 3
0A868                           +	distTo + ; $01 (0 enemies)
0A868 00                        	.db (+ - $)
0A869                           
0A869                           ; Page 4
0A869                           +	distTo + ; $01 (0 enemies)
0A869 00                        	.db (+ - $)
0A86A                           
0A86A                           ; End of enemy data
0A86A                           +
0A86A                           include "src/levels/2/2-1/2-1-area2-enemies.asm"
0A86A                           ; Level 2-1, Area 2
0A86A                           
0A86A                           EnemyData_Level_2_1_Area2:
0A86A                           
0A86A                           ; Page 0
0A86A                           	distTo + ; $01 (0 enemies)
0A86A 00                        	.db (+ - $)
0A86B                           
0A86B                           ; Page 1
0A86B                           +	distTo + ; $05 (2 enemies)
0A86B 00                        	.db (+ - $)
0A86C                           	enemy $A, $8, Enemy_Birdo
0A86C 1C 00                     	.db Enemy_Birdo, $A << 4 | $8
0A86E                           	enemy $A, $9, Enemy_CrystalBall
0A86E 44 00                     	.db Enemy_CrystalBall, $A << 4 | $9
0A870                           
0A870                           ; Page 2
0A870                           +	distTo + ; $03 (1 enemy)
0A870 00                        	.db (+ - $)
0A871                           	enemy $D, $3, Enemy_HawkmouthLeft
0A871 43 00                     	.db Enemy_HawkmouthLeft, $D << 4 | $3
0A873                           
0A873                           ; Page 3
0A873                           +	distTo + ; $01 (0 enemies)
0A873 00                        	.db (+ - $)
0A874                           
0A874                           ; End of enemy data
0A874                           +
0A874                           include "src/levels/2/2-1/2-1-area4-enemies.asm"
0A874                           ; Level 2-1, Area 4
0A874                           
0A874                           EnemyData_Level_2_1_Area4:
0A874                           
0A874                           ; Page 0
0A874                           	distTo + ; $01 (0 enemies)
0A874 00                        	.db (+ - $)
0A875                           
0A875                           ; Page 1
0A875                           +	distTo + ; $01 (0 enemies)
0A875 00                        	.db (+ - $)
0A876                           
0A876                           ; Page 2
0A876                           +	distTo + ; $01 (0 enemies)
0A876 00                        	.db (+ - $)
0A877                           
0A877                           ; Page 3
0A877                           +	distTo + ; $01 (0 enemies)
0A877 00                        	.db (+ - $)
0A878                           
0A878                           ; Page 4
0A878                           +	distTo + ; $01 (0 enemies)
0A878 00                        	.db (+ - $)
0A879                           
0A879                           ; Page 5
0A879                           +	distTo + ; $01 (0 enemies)
0A879 00                        	.db (+ - $)
0A87A                           
0A87A                           ; Page 6
0A87A                           +	distTo + ; $01 (0 enemies)
0A87A 00                        	.db (+ - $)
0A87B                           
0A87B                           ; Page 7
0A87B                           +	distTo + ; $01 (0 enemies)
0A87B 00                        	.db (+ - $)
0A87C                           
0A87C                           ; Page 8
0A87C                           +	distTo + ; $01 (0 enemies)
0A87C 00                        	.db (+ - $)
0A87D                           
0A87D                           ; Page 9
0A87D                           +	distTo + ; $01 (0 enemies)
0A87D 00                        	.db (+ - $)
0A87E                           
0A87E                           ; Page A
0A87E                           +	distTo + ; $03 (1 enemy)
0A87E 00                        	.db (+ - $)
0A87F                           	enemy $6, $C, Enemy_SnifitGray
0A87F 06 00                     	.db Enemy_SnifitGray, $6 << 4 | $C
0A881                           
0A881                           ; End of enemy data
0A881                           +
0A881                           
0A881                           ; World 2-2
0A881                           include "src/levels/2/2-2/2-2-area0-enemies.asm"
0A881                           ; Level 2-2, Area 0
0A881                           
0A881                           EnemyData_Level_2_2_Area0:
0A881                           
0A881                           ; Page 0
0A881                           	distTo + ; $03 (1 enemy)
0A881 00                        	.db (+ - $)
0A882                           	enemy $5, $A, Enemy_HawkmouthRight
0A882 42 00                     	.db Enemy_HawkmouthRight, $5 << 4 | $A
0A884                           
0A884                           ; Page 1
0A884                           +	distTo + ; $01 (0 enemies)
0A884 00                        	.db (+ - $)
0A885                           
0A885                           ; Page 2
0A885                           +	distTo + ; $01 (0 enemies)
0A885 00                        	.db (+ - $)
0A886                           
0A886                           ; Page 3
0A886                           +	distTo + ; $01 (0 enemies)
0A886 00                        	.db (+ - $)
0A887                           
0A887                           ; Page 4
0A887                           +	distTo + ; $01 (0 enemies)
0A887 00                        	.db (+ - $)
0A888                           
0A888                           ; Page 5
0A888                           +	distTo + ; $01 (0 enemies)
0A888 00                        	.db (+ - $)
0A889                           
0A889                           ; Page 6
0A889                           +	distTo + ; $01 (0 enemies)
0A889 00                        	.db (+ - $)
0A88A                           
0A88A                           ; Page 7
0A88A                           +	distTo + ; $01 (0 enemies)
0A88A 00                        	.db (+ - $)
0A88B                           
0A88B                           ; Page 8
0A88B                           +	distTo + ; $01 (0 enemies)
0A88B 00                        	.db (+ - $)
0A88C                           
0A88C                           ; End of enemy data
0A88C                           +
0A88C                           include "src/levels/2/2-2/2-2-area1-enemies.asm"
0A88C                           ; Level 2-2, Area 1
0A88C                           
0A88C                           EnemyData_Level_2_2_Area1:
0A88C                           
0A88C                           ; Page 0
0A88C                           	distTo + ; $01 (0 enemies)
0A88C 00                        	.db (+ - $)
0A88D                           
0A88D                           ; Page 1
0A88D                           +	distTo + ; $03 (1 enemy)
0A88D 00                        	.db (+ - $)
0A88E                           	enemy $8, $D, Enemy_CobratSand
0A88E 19 00                     	.db Enemy_CobratSand, $8 << 4 | $D
0A890                           
0A890                           ; Page 2
0A890                           +	distTo + ; $05 (2 enemies)
0A890 00                        	.db (+ - $)
0A891                           	enemy $5, $0, Enemy_BeezoDiving
0A891 0F 00                     	.db Enemy_BeezoDiving, $5 << 4 | $0
0A893                           	enemy $F, $A, Enemy_CobratJar
0A893 18 00                     	.db Enemy_CobratJar, $F << 4 | $A
0A895                           
0A895                           ; Page 3
0A895                           +	distTo + ; $03 (1 enemy)
0A895 00                        	.db (+ - $)
0A896                           	enemy $9, $9, Enemy_ShyguyRed
0A896 01 00                     	.db Enemy_ShyguyRed, $9 << 4 | $9
0A898                           
0A898                           ; Page 4
0A898                           +	distTo + ; $05 (2 enemies)
0A898 00                        	.db (+ - $)
0A899                           	enemy $0, $A, Enemy_CobratJar
0A899 18 00                     	.db Enemy_CobratJar, $0 << 4 | $A
0A89B                           	enemy $3, $7, Enemy_CobratJar
0A89B 18 00                     	.db Enemy_CobratJar, $3 << 4 | $7
0A89D                           
0A89D                           ; Page 5
0A89D                           +	distTo + ; $07 (3 enemies)
0A89D 00                        	.db (+ - $)
0A89E                           	enemy $1, $0, Enemy_BeezoDiving
0A89E 0F 00                     	.db Enemy_BeezoDiving, $1 << 4 | $0
0A8A0                           	enemy $1, $5, Enemy_CobratJar
0A8A0 18 00                     	.db Enemy_CobratJar, $1 << 4 | $5
0A8A2                           	enemy $9, $7, Enemy_FallingLogs
0A8A2 3B 00                     	.db Enemy_FallingLogs, $9 << 4 | $7
0A8A4                           
0A8A4                           ; Page 6
0A8A4                           +	distTo + ; $07 (3 enemies)
0A8A4 00                        	.db (+ - $)
0A8A5                           	enemy $5, $8, Enemy_CobratJar
0A8A5 18 00                     	.db Enemy_CobratJar, $5 << 4 | $8
0A8A7                           	enemy $A, $8, Enemy_CobratJar
0A8A7 18 00                     	.db Enemy_CobratJar, $A << 4 | $8
0A8A9                           	enemy $E, $7, Enemy_CobratJar
0A8A9 18 00                     	.db Enemy_CobratJar, $E << 4 | $7
0A8AB                           
0A8AB                           ; Page 7
0A8AB                           +	distTo + ; $09 (4 enemies)
0A8AB 00                        	.db (+ - $)
0A8AC                           	enemy $2, $8, Enemy_CobratJar
0A8AC 18 00                     	.db Enemy_CobratJar, $2 << 4 | $8
0A8AE                           	enemy $5, $7, Enemy_CobratJar
0A8AE 18 00                     	.db Enemy_CobratJar, $5 << 4 | $7
0A8B0                           	enemy $8, $6, Enemy_Pokey
0A8B0 1A 00                     	.db Enemy_Pokey, $8 << 4 | $6
0A8B2                           	enemy $9, $7, Enemy_CobratJar
0A8B2 18 00                     	.db Enemy_CobratJar, $9 << 4 | $7
0A8B4                           
0A8B4                           ; Page 8
0A8B4                           +	distTo + ; $03 (1 enemy)
0A8B4 00                        	.db (+ - $)
0A8B5                           	enemy $B, $5, Enemy_PanserStationaryFiresAngled
0A8B5 23 00                     	.db Enemy_PanserStationaryFiresAngled, $B << 4 | $5
0A8B7                           
0A8B7                           ; Page 9
0A8B7                           +	distTo + ; $03 (1 enemy)
0A8B7 00                        	.db (+ - $)
0A8B8                           	enemy $0, $5, Enemy_PanserStationaryFiresAngled
0A8B8 23 00                     	.db Enemy_PanserStationaryFiresAngled, $0 << 4 | $5
0A8BA                           
0A8BA                           ; Page A
0A8BA                           +	distTo + ; $01 (0 enemies)
0A8BA 00                        	.db (+ - $)
0A8BB                           
0A8BB                           ; End of enemy data
0A8BB                           +
0A8BB                           include "src/levels/2/2-2/2-2-area2-enemies.asm"
0A8BB                           ; Level 2-2, Area 2
0A8BB                           
0A8BB                           EnemyData_Level_2_2_Area2:
0A8BB                           
0A8BB                           ; ??? This area only has 3 pages, so this should stop here
0A8BB                           ; But for some reason it continues for several more pages
0A8BB                           
0A8BB                           ; Page 0
0A8BB                           	distTo + ; $07 (3 enemies)
0A8BB 00                        	.db (+ - $)
0A8BC                           	enemy $B, $8, Enemy_ShyguyPink
0A8BC 03 00                     	.db Enemy_ShyguyPink, $B << 4 | $8
0A8BE                           	enemy $F, $8, Enemy_ShyguyPink
0A8BE 03 00                     	.db Enemy_ShyguyPink, $F << 4 | $8
0A8C0                           	enemy $F, $B, Enemy_ShyguyPink
0A8C0 03 00                     	.db Enemy_ShyguyPink, $F << 4 | $B
0A8C2                           
0A8C2                           ; Page 1
0A8C2                           +	distTo + ; $01 (0 enemies)
0A8C2 00                        	.db (+ - $)
0A8C3                           
0A8C3                           ; Page 2
0A8C3                           +	distTo + ; $01 (0 enemies)
0A8C3 00                        	.db (+ - $)
0A8C4                           
0A8C4                           ; Page 3
0A8C4                           +	distTo + ; $01 (0 enemies)
0A8C4 00                        	.db (+ - $)
0A8C5                           
0A8C5                           ; Page 4
0A8C5                           +	distTo + ; $01 (0 enemies)
0A8C5 00                        	.db (+ - $)
0A8C6                           
0A8C6                           ; Page 5
0A8C6                           +	distTo + ; $01 (0 enemies)
0A8C6 00                        	.db (+ - $)
0A8C7                           
0A8C7                           ; Page 6
0A8C7                           +	distTo + ; $01 (0 enemies)
0A8C7 00                        	.db (+ - $)
0A8C8                           
0A8C8                           ; Page 7
0A8C8                           +	distTo + ; $01 (0 enemies)
0A8C8 00                        	.db (+ - $)
0A8C9                           
0A8C9                           ; Page 8
0A8C9                           +	distTo + ; $01 (0 enemies)
0A8C9 00                        	.db (+ - $)
0A8CA                           
0A8CA                           ; End of enemy data
0A8CA                           +
0A8CA                           include "src/levels/2/2-2/2-2-area3-enemies.asm"
0A8CA                           ; Level 2-2, Area 3
0A8CA                           
0A8CA                           EnemyData_Level_2_2_Area3:
0A8CA                           
0A8CA                           ; Page 0
0A8CA                           	distTo + ; $03 (1 enemy)
0A8CA 00                        	.db (+ - $)
0A8CB                           	enemy $8, $A, Enemy_ShyguyRed
0A8CB 01 00                     	.db Enemy_ShyguyRed, $8 << 4 | $A
0A8CD                           
0A8CD                           ; Page 1
0A8CD                           +	distTo + ; $05 (2 enemies)
0A8CD 00                        	.db (+ - $)
0A8CE                           	enemy $C, $2, Enemy_ShyguyRed
0A8CE 01 00                     	.db Enemy_ShyguyRed, $C << 4 | $2
0A8D0                           	enemy $6, $7, Enemy_ShyguyRed
0A8D0 01 00                     	.db Enemy_ShyguyRed, $6 << 4 | $7
0A8D2                           
0A8D2                           ; Page 2
0A8D2                           +	distTo + ; $07 (3 enemies)
0A8D2 00                        	.db (+ - $)
0A8D3                           	enemy $A, $0, Enemy_NinjiJumping
0A8D3 0E 00                     	.db Enemy_NinjiJumping, $A << 4 | $0
0A8D5                           	enemy $7, $8, Enemy_ShyguyRed
0A8D5 01 00                     	.db Enemy_ShyguyRed, $7 << 4 | $8
0A8D7                           	enemy $B, $D, Enemy_ShyguyRed
0A8D7 01 00                     	.db Enemy_ShyguyRed, $B << 4 | $D
0A8D9                           
0A8D9                           ; Page 3
0A8D9                           +	distTo + ; $03 (1 enemy)
0A8D9 00                        	.db (+ - $)
0A8DA                           	enemy $E, $2, Enemy_SnifitGray
0A8DA 06 00                     	.db Enemy_SnifitGray, $E << 4 | $2
0A8DC                           
0A8DC                           ; Page 4
0A8DC                           +	distTo + ; $01 (0 enemies)
0A8DC 00                        	.db (+ - $)
0A8DD                           
0A8DD                           ; End of enemy data
0A8DD                           +
0A8DD                           include "src/levels/2/2-2/2-2-area4-enemies.asm"
0A8DD                           ; Level 2-2, Area 4
0A8DD                           
0A8DD                           EnemyData_Level_2_2_Area4:
0A8DD                           
0A8DD                           ; Page 0
0A8DD                           	distTo + ; $01 (0 enemies)
0A8DD 00                        	.db (+ - $)
0A8DE                           
0A8DE                           ; Page 1
0A8DE                           +	distTo + ; $01 (0 enemies)
0A8DE 00                        	.db (+ - $)
0A8DF                           
0A8DF                           ; Page 2
0A8DF                           +	distTo + ; $01 (0 enemies)
0A8DF 00                        	.db (+ - $)
0A8E0                           
0A8E0                           ; Page 3
0A8E0                           +	distTo + ; $01 (0 enemies)
0A8E0 00                        	.db (+ - $)
0A8E1                           
0A8E1                           ; Page 4
0A8E1                           +	distTo + ; $01 (0 enemies)
0A8E1 00                        	.db (+ - $)
0A8E2                           
0A8E2                           ; Page 5
0A8E2                           +	distTo + ; $01 (0 enemies)
0A8E2 00                        	.db (+ - $)
0A8E3                           
0A8E3                           ; Page 6
0A8E3                           +	distTo + ; $01 (0 enemies)
0A8E3 00                        	.db (+ - $)
0A8E4                           
0A8E4                           ; Page 7
0A8E4                           +	distTo + ; $01 (0 enemies)
0A8E4 00                        	.db (+ - $)
0A8E5                           
0A8E5                           ; Page 8
0A8E5                           +	distTo + ; $01 (0 enemies)
0A8E5 00                        	.db (+ - $)
0A8E6                           
0A8E6                           ; Page 9
0A8E6                           +	distTo + ; $01 (0 enemies)
0A8E6 00                        	.db (+ - $)
0A8E7                           
0A8E7                           ; Page A
0A8E7                           +	distTo + ; $03 (1 enemy)
0A8E7 00                        	.db (+ - $)
0A8E8                           	enemy $B, $9, Enemy_ShyguyRed
0A8E8 01 00                     	.db Enemy_ShyguyRed, $B << 4 | $9
0A8EA                           
0A8EA                           ; End of enemy data
0A8EA                           +
0A8EA                           include "src/levels/2/2-2/2-2-area5-enemies.asm"
0A8EA                           ; Level 2-2, Area 5
0A8EA                           
0A8EA                           EnemyData_Level_2_2_Area5:
0A8EA                           
0A8EA                           ; Page 0
0A8EA                           	distTo + ; $01 (0 enemies)
0A8EA 00                        	.db (+ - $)
0A8EB                           
0A8EB                           ; Page 1
0A8EB                           +	distTo + ; $05 (2 enemies)
0A8EB 00                        	.db (+ - $)
0A8EC                           	enemy $B, $4, Enemy_Birdo
0A8EC 1C 00                     	.db Enemy_Birdo, $B << 4 | $4
0A8EE                           	enemy $B, $4, Enemy_CrystalBall
0A8EE 44 00                     	.db Enemy_CrystalBall, $B << 4 | $4
0A8F0                           
0A8F0                           ; Page 2
0A8F0                           +	distTo + ; $03 (1 enemy)
0A8F0 00                        	.db (+ - $)
0A8F1                           	enemy $B, $3, Enemy_HawkmouthLeft
0A8F1 43 00                     	.db Enemy_HawkmouthLeft, $B << 4 | $3
0A8F3                           
0A8F3                           ; Page 3
0A8F3                           +	distTo + ; $01 (0 enemies)
0A8F3 00                        	.db (+ - $)
0A8F4                           
0A8F4                           ; End of enemy data
0A8F4                           +
0A8F4                           
0A8F4                           ; World 2-3
0A8F4                           include "src/levels/2/2-3/2-3-area0-enemies.asm"
0A8F4                           ; Level 2-3, Area 0
0A8F4                           
0A8F4                           EnemyData_Level_2_3_Area0:
0A8F4                           
0A8F4                           ; Page 0
0A8F4                           	distTo + ; $03 (1 enemy)
0A8F4 00                        	.db (+ - $)
0A8F5                           	enemy $1, $7, Enemy_HawkmouthRight
0A8F5 42 00                     	.db Enemy_HawkmouthRight, $1 << 4 | $7
0A8F7                           
0A8F7                           ; Page 1
0A8F7                           +	distTo + ; $01 (0 enemies)
0A8F7 00                        	.db (+ - $)
0A8F8                           
0A8F8                           ; End of enemy data
0A8F8                           +
0A8F8                           include "src/levels/2/2-3/2-3-area1-enemies.asm"
0A8F8                           ; Level 2-3, Area 1
0A8F8                           
0A8F8                           EnemyData_Level_2_3_Area1:
0A8F8                           
0A8F8                           ; Page 0
0A8F8                           	distTo + ; $03 (1 enemy)
0A8F8 00                        	.db (+ - $)
0A8F9                           	enemy $C, $7, Enemy_ShyguyPink
0A8F9 03 00                     	.db Enemy_ShyguyPink, $C << 4 | $7
0A8FB                           
0A8FB                           ; Page 1
0A8FB                           +	distTo + ; $03 (1 enemy)
0A8FB 00                        	.db (+ - $)
0A8FC                           	enemy $2, $0, Enemy_StopAttack
0A8FC 49 00                     	.db Enemy_StopAttack, $2 << 4 | $0
0A8FE                           
0A8FE                           ; Page 2
0A8FE                           +	distTo + ; $05 (2 enemies)
0A8FE 00                        	.db (+ - $)
0A8FF                           	enemy $2, $0, Enemy_BeezoDiving
0A8FF 0F 00                     	.db Enemy_BeezoDiving, $2 << 4 | $0
0A901                           	enemy $A, $0, Enemy_AttackBeezo
0A901 48 00                     	.db Enemy_AttackBeezo, $A << 4 | $0
0A903                           
0A903                           ; Page 3
0A903                           +	distTo + ; $01 (0 enemies)
0A903 00                        	.db (+ - $)
0A904                           
0A904                           ; Page 4
0A904                           +	distTo + ; $01 (0 enemies)
0A904 00                        	.db (+ - $)
0A905                           
0A905                           ; Page 5
0A905                           +	distTo + ; $03 (1 enemy)
0A905 00                        	.db (+ - $)
0A906                           	enemy $8, $0, Enemy_AttackBeezo
0A906 48 00                     	.db Enemy_AttackBeezo, $8 << 4 | $0
0A908                           
0A908                           ; Page 6
0A908                           +	distTo + ; $01 (0 enemies)
0A908 00                        	.db (+ - $)
0A909                           
0A909                           ; Page 7
0A909                           +	distTo + ; $03 (1 enemy)
0A909 00                        	.db (+ - $)
0A90A                           	enemy $0, $0, Enemy_StopAttack
0A90A 49 00                     	.db Enemy_StopAttack, $0 << 4 | $0
0A90C                           
0A90C                           ; Page 8
0A90C                           +	distTo + ; $05 (2 enemies)
0A90C 00                        	.db (+ - $)
0A90D                           	enemy $7, $A, Enemy_CobratSand
0A90D 19 00                     	.db Enemy_CobratSand, $7 << 4 | $A
0A90F                           	enemy $D, $6, Enemy_Pokey
0A90F 1A 00                     	.db Enemy_Pokey, $D << 4 | $6
0A911                           
0A911                           ; Page 9
0A911                           +	distTo + ; $01 (0 enemies)
0A911 00                        	.db (+ - $)
0A912                           
0A912                           ; Page A
0A912                           +	distTo + ; $01 (0 enemies)
0A912 00                        	.db (+ - $)
0A913                           
0A913                           ; End of enemy data
0A913                           +
0A913                           include "src/levels/2/2-3/2-3-area2-enemies.asm"
0A913                           ; Level 2-3, Area 2
0A913                           
0A913                           EnemyData_Level_2_3_Area2:
0A913                           
0A913                           ; Page 0
0A913                           	distTo + ; $01 (0 enemies)
0A913 00                        	.db (+ - $)
0A914                           
0A914                           ; Page 1
0A914                           +	distTo + ; $01 (0 enemies)
0A914 00                        	.db (+ - $)
0A915                           
0A915                           ; Page 2
0A915                           +	distTo + ; $01 (0 enemies)
0A915 00                        	.db (+ - $)
0A916                           
0A916                           ; End of enemy data
0A916                           +
0A916                           include "src/levels/2/2-3/2-3-area3-enemies.asm"
0A916                           ; Level 2-3, Area 3
0A916                           
0A916                           EnemyData_Level_2_3_Area3:
0A916                           
0A916                           ; Page 0
0A916                           	distTo + ; $03 (1 enemy)
0A916 00                        	.db (+ - $)
0A917                           	enemy $4, $B, Enemy_ShyguyPink
0A917 03 00                     	.db Enemy_ShyguyPink, $4 << 4 | $B
0A919                           
0A919                           ; Page 1
0A919                           +	distTo + ; $05 (2 enemies)
0A919 00                        	.db (+ - $)
0A91A                           	enemy $D, $5, Enemy_ShyguyRed
0A91A 01 00                     	.db Enemy_ShyguyRed, $D << 4 | $5
0A91C                           	enemy $A, $A, Enemy_ShyguyRed
0A91C 01 00                     	.db Enemy_ShyguyRed, $A << 4 | $A
0A91E                           
0A91E                           ; Page 2
0A91E                           +	distTo + ; $05 (2 enemies)
0A91E 00                        	.db (+ - $)
0A91F                           	enemy $D, $2, Enemy_ShyguyPink
0A91F 03 00                     	.db Enemy_ShyguyPink, $D << 4 | $2
0A921                           	enemy $D, $5, Enemy_ShyguyRed
0A921 01 00                     	.db Enemy_ShyguyRed, $D << 4 | $5
0A923                           
0A923                           ; Page 3
0A923                           +	distTo + ; $03 (1 enemy)
0A923 00                        	.db (+ - $)
0A924                           	enemy $8, $8, Enemy_Tweeter
0A924 02 00                     	.db Enemy_Tweeter, $8 << 4 | $8
0A926                           
0A926                           ; Page 4
0A926                           +	distTo + ; $07 (3 enemies)
0A926 00                        	.db (+ - $)
0A927                           	enemy $8, $3, Enemy_ShyguyRed
0A927 01 00                     	.db Enemy_ShyguyRed, $8 << 4 | $3
0A929                           	enemy $A, $9, Enemy_ShyguyRed
0A929 01 00                     	.db Enemy_ShyguyRed, $A << 4 | $9
0A92B                           	enemy $1, $D, Enemy_ShyguyRed
0A92B 01 00                     	.db Enemy_ShyguyRed, $1 << 4 | $D
0A92D                           
0A92D                           ; Page 5
0A92D                           +	distTo + ; $07 (3 enemies)
0A92D 00                        	.db (+ - $)
0A92E                           	enemy $B, $1, Enemy_ShyguyRed
0A92E 01 00                     	.db Enemy_ShyguyRed, $B << 4 | $1
0A930                           	enemy $8, $9, Enemy_ShyguyRed
0A930 01 00                     	.db Enemy_ShyguyRed, $8 << 4 | $9
0A932                           	enemy $3, $D, Enemy_ShyguyRed
0A932 01 00                     	.db Enemy_ShyguyRed, $3 << 4 | $D
0A934                           
0A934                           ; Page 6
0A934                           +	distTo + ; $03 (1 enemy)
0A934 00                        	.db (+ - $)
0A935                           	enemy $E, $3, Enemy_ShyguyRed
0A935 01 00                     	.db Enemy_ShyguyRed, $E << 4 | $3
0A937                           
0A937                           ; Page 7
0A937                           +	distTo + ; $01 (0 enemies)
0A937 00                        	.db (+ - $)
0A938                           
0A938                           ; End of enemy data
0A938                           +
0A938                           include "src/levels/2/2-3/2-3-area4-enemies.asm"
0A938                           ; Level 2-3, Area 4
0A938                           
0A938                           EnemyData_Level_2_3_Area4:
0A938                           
0A938                           ; Page 0
0A938                           	distTo + ; $01 (0 enemies)
0A938 00                        	.db (+ - $)
0A939                           
0A939                           ; Page 1
0A939                           +	distTo + ; $01 (0 enemies)
0A939 00                        	.db (+ - $)
0A93A                           
0A93A                           ; Page 2
0A93A                           +	distTo + ; $01 (0 enemies)
0A93A 00                        	.db (+ - $)
0A93B                           
0A93B                           ; Page 3
0A93B                           +	distTo + ; $01 (0 enemies)
0A93B 00                        	.db (+ - $)
0A93C                           
0A93C                           ; Page 4
0A93C                           +	distTo + ; $01 (0 enemies)
0A93C 00                        	.db (+ - $)
0A93D                           
0A93D                           ; Page 5
0A93D                           +	distTo + ; $01 (0 enemies)
0A93D 00                        	.db (+ - $)
0A93E                           
0A93E                           ; Page 6
0A93E                           +	distTo + ; $01 (0 enemies)
0A93E 00                        	.db (+ - $)
0A93F                           
0A93F                           ; Page 7
0A93F                           +	distTo + ; $01 (0 enemies)
0A93F 00                        	.db (+ - $)
0A940                           
0A940                           ; Page 8
0A940                           +	distTo + ; $01 (0 enemies)
0A940 00                        	.db (+ - $)
0A941                           
0A941                           ; Page 9
0A941                           +	distTo + ; $01 (0 enemies)
0A941 00                        	.db (+ - $)
0A942                           
0A942                           ; Page A
0A942                           +	distTo + ; $03 (1 enemy)
0A942 00                        	.db (+ - $)
0A943                           	enemy $B, $9, Enemy_ShyguyRed
0A943 01 00                     	.db Enemy_ShyguyRed, $B << 4 | $9
0A945                           
0A945                           ; End of enemy data
0A945                           +
0A945                           include "src/levels/2/2-3/2-3-area5-enemies.asm"
0A945                           ; Level 2-3, Area 5
0A945                           
0A945                           EnemyData_Level_2_3_Area5:
0A945                           
0A945                           ; Page 0
0A945                           	distTo + ; $01 (0 enemies)
0A945 00                        	.db (+ - $)
0A946                           
0A946                           ; Page 1
0A946                           +	distTo + ; $09 (4 enemies)
0A946 00                        	.db (+ - $)
0A947                           	enemy $1, $5, Enemy_ShyguyRed
0A947 01 00                     	.db Enemy_ShyguyRed, $1 << 4 | $5
0A949                           	enemy $0, $8, Enemy_ShyguyRed
0A949 01 00                     	.db Enemy_ShyguyRed, $0 << 4 | $8
0A94B                           	enemy $F, $8, Enemy_ShyguyRed
0A94B 01 00                     	.db Enemy_ShyguyRed, $F << 4 | $8
0A94D                           	enemy $C, $B, Enemy_ShyguyRed
0A94D 01 00                     	.db Enemy_ShyguyRed, $C << 4 | $B
0A94F                           
0A94F                           ; Page 2
0A94F                           +	distTo + ; $01 (0 enemies)
0A94F 00                        	.db (+ - $)
0A950                           
0A950                           ; Page 3
0A950                           +	distTo + ; $07 (3 enemies)
0A950 00                        	.db (+ - $)
0A951                           	enemy $1, $4, Enemy_PanserStationaryFiresAngled
0A951 23 00                     	.db Enemy_PanserStationaryFiresAngled, $1 << 4 | $4
0A953                           	enemy $3, $9, Enemy_ShyguyPink
0A953 03 00                     	.db Enemy_ShyguyPink, $3 << 4 | $9
0A955                           	enemy $7, $B, Enemy_ShyguyPink
0A955 03 00                     	.db Enemy_ShyguyPink, $7 << 4 | $B
0A957                           
0A957                           ; Page 4
0A957                           +	distTo + ; $03 (1 enemy)
0A957 00                        	.db (+ - $)
0A958                           	enemy $6, $7, Enemy_CobratJar
0A958 18 00                     	.db Enemy_CobratJar, $6 << 4 | $7
0A95A                           
0A95A                           ; Page 5
0A95A                           +	distTo + ; $07 (3 enemies)
0A95A 00                        	.db (+ - $)
0A95B                           	enemy $0, $A, Enemy_CobratJar
0A95B 18 00                     	.db Enemy_CobratJar, $0 << 4 | $A
0A95D                           	enemy $3, $B, Enemy_CrystalBall
0A95D 44 00                     	.db Enemy_CrystalBall, $3 << 4 | $B
0A95F                           	enemy $6, $A, Enemy_CobratJar
0A95F 18 00                     	.db Enemy_CobratJar, $6 << 4 | $A
0A961                           
0A961                           ; Page 6
0A961                           +	distTo + ; $03 (1 enemy)
0A961 00                        	.db (+ - $)
0A962                           	enemy $9, $7, Enemy_HawkmouthLeft
0A962 43 00                     	.db Enemy_HawkmouthLeft, $9 << 4 | $7
0A964                           
0A964                           ; Page 7
0A964                           +	distTo + ; $01 (0 enemies)
0A964 00                        	.db (+ - $)
0A965                           
0A965                           ; End of enemy data
0A965                           +
0A965                           include "src/levels/2/2-3/2-3-area6-enemies.asm"
0A965                           ; Level 2-3, Area 6
0A965                           
0A965                           EnemyData_Level_2_3_Area6:
0A965                           
0A965                           ; Page 0
0A965                           	distTo + ; $01 (0 enemies)
0A965 00                        	.db (+ - $)
0A966                           
0A966                           ; Page 1
0A966                           +	distTo + ; $05 (2 enemies)
0A966 00                        	.db (+ - $)
0A967                           	enemy $C, $5, Enemy_BossTryclyde
0A967 5F 00                     	.db Enemy_BossTryclyde, $C << 4 | $5
0A969                           	enemy $D, $0, Enemy_Tweeter
0A969 02 00                     	.db Enemy_Tweeter, $D << 4 | $0
0A96B                           
0A96B                           ; Page 2
0A96B                           +	distTo + ; $01 (0 enemies)
0A96B 00                        	.db (+ - $)
0A96C                           
0A96C                           ; End of enemy data
0A96C                           +
0A96C                           include "src/levels/2/2-3/2-3-area7-enemies.asm"
0A96C                           ; Level 2-3, Area 7
0A96C                           
0A96C                           EnemyData_Level_2_3_Area7:
0A96C                           
0A96C                           ; Page 0
0A96C                           	distTo + ; $07 (3 enemies)
0A96C 00                        	.db (+ - $)
0A96D                           	enemy $8, $3, Enemy_Phanto
0A96D 17 00                     	.db Enemy_Phanto, $8 << 4 | $3
0A96F                           	enemy $8, $7, Enemy_Key
0A96F 3D 00                     	.db Enemy_Key, $8 << 4 | $7
0A971                           	enemy $A, $9, Enemy_Spark2
0A971 2F 00                     	.db Enemy_Spark2, $A << 4 | $9
0A973                           
0A973                           ; Page 1
0A973                           +	distTo + ; $01 (0 enemies)
0A973 00                        	.db (+ - $)
0A974                           
0A974                           ; Page 2
0A974                           +	distTo + ; $01 (0 enemies)
0A974 00                        	.db (+ - $)
0A975                           
0A975                           ; End of enemy data
0A975                           +
0A975                           ; -------------------------------
0A975                           
0A975                           
0A975                           ; -------------------------------
0A975                           ; World 3
0A975                           
0A975                           ; World 3-1
0A975                           include "src/levels/3/3-1/3-1-area0-enemies.asm"
0A975                           ; Level 3-1, Area 0
0A975                           
0A975                           EnemyData_Level_3_1_Area0:
0A975                           
0A975                           ; Page 0
0A975                           	distTo + ; $01 (0 enemies)
0A975 00                        	.db (+ - $)
0A976                           
0A976                           ; Page 1
0A976                           +	distTo + ; $01 (0 enemies)
0A976 00                        	.db (+ - $)
0A977                           
0A977                           ; Page 2
0A977                           +	distTo + ; $01 (0 enemies)
0A977 00                        	.db (+ - $)
0A978                           
0A978                           ; End of enemy data
0A978                           +
0A978                           include "src/levels/3/3-1/3-1-area1-enemies.asm"
0A978                           ; Level 3-1, Area 1
0A978                           
0A978                           EnemyData_Level_3_1_Area1:
0A978                           
0A978                           ; Page 0
0A978                           	distTo + ; $03 (1 enemy)
0A978 00                        	.db (+ - $)
0A979                           	enemy $0, $8, Enemy_StopAttack
0A979 49 00                     	.db Enemy_StopAttack, $0 << 4 | $8
0A97B                           
0A97B                           ; Page 1
0A97B                           +	distTo + ; $03 (1 enemy)
0A97B 00                        	.db (+ - $)
0A97C                           	enemy $0, $E, Enemy_AttackBeezo
0A97C 48 00                     	.db Enemy_AttackBeezo, $0 << 4 | $E
0A97E                           
0A97E                           ; Page 2
0A97E                           +	distTo + ; $03 (1 enemy)
0A97E 00                        	.db (+ - $)
0A97F                           	enemy $0, $2, Enemy_AttackBeezo
0A97F 48 00                     	.db Enemy_AttackBeezo, $0 << 4 | $2
0A981                           
0A981                           ; Page 3
0A981                           +	distTo + ; $05 (2 enemies)
0A981 00                        	.db (+ - $)
0A982                           	enemy $9, $2, Enemy_Pidgit
0A982 12 00                     	.db Enemy_Pidgit, $9 << 4 | $2
0A984                           	enemy $0, $9, Enemy_StopAttack
0A984 49 00                     	.db Enemy_StopAttack, $0 << 4 | $9
0A986                           
0A986                           ; Page 4
0A986                           +	distTo + ; $03 (1 enemy)
0A986 00                        	.db (+ - $)
0A987                           	enemy $E, $5, Enemy_ShyguyPink
0A987 03 00                     	.db Enemy_ShyguyPink, $E << 4 | $5
0A989                           
0A989                           ; Page 5
0A989                           +	distTo + ; $05 (2 enemies)
0A989 00                        	.db (+ - $)
0A98A                           	enemy $2, $1, Enemy_ShyguyPink
0A98A 03 00                     	.db Enemy_ShyguyPink, $2 << 4 | $1
0A98C                           	enemy $8, $7, Enemy_ShyguyPink
0A98C 03 00                     	.db Enemy_ShyguyPink, $8 << 4 | $7
0A98E                           
0A98E                           ; Page 6
0A98E                           +	distTo + ; $01 (0 enemies)
0A98E 00                        	.db (+ - $)
0A98F                           
0A98F                           ; Page 7
0A98F                           +	distTo + ; $01 (0 enemies)
0A98F 00                        	.db (+ - $)
0A990                           
0A990                           ; Page 8
0A990                           +	distTo + ; $01 (0 enemies)
0A990 00                        	.db (+ - $)
0A991                           
0A991                           ; Page 9
0A991                           +	distTo + ; $01 (0 enemies)
0A991 00                        	.db (+ - $)
0A992                           
0A992                           ; Page A
0A992                           +	distTo + ; $01 (0 enemies)
0A992 00                        	.db (+ - $)
0A993                           
0A993                           ; End of enemy data
0A993                           +
0A993                           include "src/levels/3/3-1/3-1-area2-enemies.asm"
0A993                           ; Level 3-1, Area 2
0A993                           
0A993                           EnemyData_Level_3_1_Area2:
0A993                           
0A993                           ; Page 0
0A993                           	distTo + ; $01 (0 enemies)
0A993 00                        	.db (+ - $)
0A994                           
0A994                           ; Page 1
0A994                           +	distTo + ; $01 (0 enemies)
0A994 00                        	.db (+ - $)
0A995                           
0A995                           ; Page 2
0A995                           +	distTo + ; $01 (0 enemies)
0A995 00                        	.db (+ - $)
0A996                           
0A996                           ; Page 3
0A996                           +	distTo + ; $01 (0 enemies)
0A996 00                        	.db (+ - $)
0A997                           
0A997                           ; End of enemy data
0A997                           +
0A997                           include "src/levels/3/3-1/3-1-area3-enemies.asm"
0A997                           ; Level 3-1, Area 3
0A997                           
0A997                           EnemyData_Level_3_1_Area3:
0A997                           
0A997                           ; Page 0
0A997                           	distTo + ; $01 (0 enemies)
0A997 00                        	.db (+ - $)
0A998                           
0A998                           ; Page 1
0A998                           +	distTo + ; $03 (1 enemy)
0A998 00                        	.db (+ - $)
0A999                           	enemy $2, $B, Enemy_ShyguyPink
0A999 03 00                     	.db Enemy_ShyguyPink, $2 << 4 | $B
0A99B                           
0A99B                           ; Page 2
0A99B                           +	distTo + ; $03 (1 enemy)
0A99B 00                        	.db (+ - $)
0A99C                           	enemy $1, $2, Enemy_PanserStationaryFiresUp
0A99C 25 00                     	.db Enemy_PanserStationaryFiresUp, $1 << 4 | $2
0A99E                           
0A99E                           ; Page 3
0A99E                           +	distTo + ; $03 (1 enemy)
0A99E 00                        	.db (+ - $)
0A99F                           	enemy $9, $5, Enemy_PanserStationaryFiresAngled
0A99F 23 00                     	.db Enemy_PanserStationaryFiresAngled, $9 << 4 | $5
0A9A1                           
0A9A1                           ; Page 4
0A9A1                           +	distTo + ; $03 (1 enemy)
0A9A1 00                        	.db (+ - $)
0A9A2                           	enemy $6, $5, Enemy_ShyguyPink
0A9A2 03 00                     	.db Enemy_ShyguyPink, $6 << 4 | $5
0A9A4                           
0A9A4                           ; Page 5
0A9A4                           +	distTo + ; $03 (1 enemy)
0A9A4 00                        	.db (+ - $)
0A9A5                           	enemy $0, $5, Enemy_PanserWalking
0A9A5 24 00                     	.db Enemy_PanserWalking, $0 << 4 | $5
0A9A7                           
0A9A7                           ; Page 6
0A9A7                           +	distTo + ; $01 (0 enemies)
0A9A7 00                        	.db (+ - $)
0A9A8                           
0A9A8                           ; End of enemy data
0A9A8                           +
0A9A8                           include "src/levels/3/3-1/3-1-area4-enemies.asm"
0A9A8                           ; Level 3-1, Area 4
0A9A8                           
0A9A8                           EnemyData_Level_3_1_Area4:
0A9A8                           
0A9A8                           ; Page 0
0A9A8                           	distTo + ; $01 (0 enemies)
0A9A8 00                        	.db (+ - $)
0A9A9                           
0A9A9                           ; Page 1
0A9A9                           +	distTo + ; $07 (3 enemies)
0A9A9 00                        	.db (+ - $)
0A9AA                           	enemy $9, $3, Enemy_HawkmouthLeft
0A9AA 43 00                     	.db Enemy_HawkmouthLeft, $9 << 4 | $3
0A9AC                           	enemy $B, $9, Enemy_Birdo
0A9AC 1C 00                     	.db Enemy_Birdo, $B << 4 | $9
0A9AE                           	enemy $B, $A, Enemy_CrystalBall
0A9AE 44 00                     	.db Enemy_CrystalBall, $B << 4 | $A
0A9B0                           
0A9B0                           ; Page 2
0A9B0                           +	distTo + ; $01 (0 enemies)
0A9B0 00                        	.db (+ - $)
0A9B1                           
0A9B1                           ; Page 3
0A9B1                           +	distTo + ; $01 (0 enemies)
0A9B1 00                        	.db (+ - $)
0A9B2                           
0A9B2                           ; Page 4
0A9B2                           +	distTo + ; $01 (0 enemies)
0A9B2 00                        	.db (+ - $)
0A9B3                           
0A9B3                           ; End of enemy data
0A9B3                           +
0A9B3                           
0A9B3                           ; World 3-2
0A9B3                           include "src/levels/3/3-2/3-2-area0-enemies.asm"
0A9B3                           ; Level 3-2, Area 0
0A9B3                           
0A9B3                           EnemyData_Level_3_2_Area0:
0A9B3                           
0A9B3                           ; Page 0
0A9B3                           	distTo + ; $05 (2 enemies)
0A9B3 00                        	.db (+ - $)
0A9B4                           	enemy $4, $2, Enemy_HawkmouthRight
0A9B4 42 00                     	.db Enemy_HawkmouthRight, $4 << 4 | $2
0A9B6                           	enemy $4, $0, Enemy_StopAttack
0A9B6 49 00                     	.db Enemy_StopAttack, $4 << 4 | $0
0A9B8                           
0A9B8                           ; Page 1
0A9B8                           +	distTo + ; $05 (2 enemies)
0A9B8 00                        	.db (+ - $)
0A9B9                           	enemy $2, $5, Enemy_Ostro
0A9B9 08 00                     	.db Enemy_Ostro, $2 << 4 | $5
0A9BB                           	enemy $C, $0, Enemy_AttackBeezo
0A9BB 48 00                     	.db Enemy_AttackBeezo, $C << 4 | $0
0A9BD                           
0A9BD                           ; Page 2
0A9BD                           +	distTo + ; $01 (0 enemies)
0A9BD 00                        	.db (+ - $)
0A9BE                           
0A9BE                           ; Page 3
0A9BE                           +	distTo + ; $03 (1 enemy)
0A9BE 00                        	.db (+ - $)
0A9BF                           	enemy $0, $0, Enemy_AttackBeezo
0A9BF 48 00                     	.db Enemy_AttackBeezo, $0 << 4 | $0
0A9C1                           
0A9C1                           ; Page 4
0A9C1                           +	distTo + ; $05 (2 enemies)
0A9C1 00                        	.db (+ - $)
0A9C2                           	enemy $E, $6, Enemy_PanserStationaryFiresUp
0A9C2 25 00                     	.db Enemy_PanserStationaryFiresUp, $E << 4 | $6
0A9C4                           	enemy $8, $0, Enemy_StopAttack
0A9C4 49 00                     	.db Enemy_StopAttack, $8 << 4 | $0
0A9C6                           
0A9C6                           ; Page 5
0A9C6                           +	distTo + ; $01 (0 enemies)
0A9C6 00                        	.db (+ - $)
0A9C7                           
0A9C7                           ; Page 6
0A9C7                           +	distTo + ; $05 (2 enemies)
0A9C7 00                        	.db (+ - $)
0A9C8                           	enemy $3, $5, Enemy_Ostro
0A9C8 08 00                     	.db Enemy_Ostro, $3 << 4 | $5
0A9CA                           	enemy $5, $5, Enemy_Ostro
0A9CA 08 00                     	.db Enemy_Ostro, $5 << 4 | $5
0A9CC                           
0A9CC                           ; Page 7
0A9CC                           +	distTo + ; $05 (2 enemies)
0A9CC 00                        	.db (+ - $)
0A9CD                           	enemy $A, $4, Enemy_SnifitGray
0A9CD 06 00                     	.db Enemy_SnifitGray, $A << 4 | $4
0A9CF                           	enemy $C, $B, Enemy_SnifitGray
0A9CF 06 00                     	.db Enemy_SnifitGray, $C << 4 | $B
0A9D1                           
0A9D1                           ; Page 8
0A9D1                           +	distTo + ; $01 (0 enemies)
0A9D1 00                        	.db (+ - $)
0A9D2                           
0A9D2                           ; Page 9
0A9D2                           +	distTo + ; $03 (1 enemy)
0A9D2 00                        	.db (+ - $)
0A9D3                           	enemy $9, $6, Enemy_SnifitGray
0A9D3 06 00                     	.db Enemy_SnifitGray, $9 << 4 | $6
0A9D5                           
0A9D5                           ; Page A
0A9D5                           +	distTo + ; $01 (0 enemies)
0A9D5 00                        	.db (+ - $)
0A9D6                           
0A9D6                           ; End of enemy data
0A9D6                           +
0A9D6                           include "src/levels/3/3-2/3-2-area1-enemies.asm"
0A9D6                           ; Level 3-2, Area 1
0A9D6                           
0A9D6                           EnemyData_Level_3_2_Area1:
0A9D6                           
0A9D6                           ; Page 0
0A9D6                           	distTo + ; $07 (3 enemies)
0A9D6 00                        	.db (+ - $)
0A9D7                           	enemy $3, $C, Enemy_Porcupo
0A9D7 04 00                     	.db Enemy_Porcupo, $3 << 4 | $C
0A9D9                           	enemy $6, $C, Enemy_Porcupo
0A9D9 04 00                     	.db Enemy_Porcupo, $6 << 4 | $C
0A9DB                           	enemy $E, $C, Enemy_Porcupo
0A9DB 04 00                     	.db Enemy_Porcupo, $E << 4 | $C
0A9DD                           
0A9DD                           ; Page 1
0A9DD                           +	distTo + ; $03 (1 enemy)
0A9DD 00                        	.db (+ - $)
0A9DE                           	enemy $1, $C, Enemy_Porcupo
0A9DE 04 00                     	.db Enemy_Porcupo, $1 << 4 | $C
0A9E0                           
0A9E0                           ; Page 2
0A9E0                           +	distTo + ; $01 (0 enemies)
0A9E0 00                        	.db (+ - $)
0A9E1                           
0A9E1                           ; Page 3
0A9E1                           +	distTo + ; $01 (0 enemies)
0A9E1 00                        	.db (+ - $)
0A9E2                           
0A9E2                           ; Page 4
0A9E2                           +	distTo + ; $03 (1 enemy)
0A9E2 00                        	.db (+ - $)
0A9E3                           	enemy $2, $9, Enemy_ShyguyPink
0A9E3 03 00                     	.db Enemy_ShyguyPink, $2 << 4 | $9
0A9E5                           
0A9E5                           ; Page 5
0A9E5                           +	distTo + ; $07 (3 enemies)
0A9E5 00                        	.db (+ - $)
0A9E6                           	enemy $2, $9, Enemy_Tweeter
0A9E6 02 00                     	.db Enemy_Tweeter, $2 << 4 | $9
0A9E8                           	enemy $4, $9, Enemy_Tweeter
0A9E8 02 00                     	.db Enemy_Tweeter, $4 << 4 | $9
0A9EA                           	enemy $6, $C, Enemy_Tweeter
0A9EA 02 00                     	.db Enemy_Tweeter, $6 << 4 | $C
0A9EC                           
0A9EC                           ; Page 6
0A9EC                           +	distTo + ; $01 (0 enemies)
0A9EC 00                        	.db (+ - $)
0A9ED                           
0A9ED                           ; Page 7
0A9ED                           +	distTo + ; $01 (0 enemies)
0A9ED 00                        	.db (+ - $)
0A9EE                           
0A9EE                           ; Page 8
0A9EE                           +	distTo + ; $01 (0 enemies)
0A9EE 00                        	.db (+ - $)
0A9EF                           
0A9EF                           ; End of enemy data
0A9EF                           +
0A9EF                           include "src/levels/3/3-2/3-2-area2-enemies.asm"
0A9EF                           ; Level 3-2, Area 2
0A9EF                           
0A9EF                           EnemyData_Level_3_2_Area2:
0A9EF                           
0A9EF                           ; Page 0
0A9EF                           	distTo + ; $05 (2 enemies)
0A9EF 00                        	.db (+ - $)
0A9F0                           	enemy $B, $6, Enemy_Birdo
0A9F0 1C 00                     	.db Enemy_Birdo, $B << 4 | $6
0A9F2                           	enemy $B, $6, Enemy_CrystalBall
0A9F2 44 00                     	.db Enemy_CrystalBall, $B << 4 | $6
0A9F4                           
0A9F4                           ; Page 1
0A9F4                           +	distTo + ; $03 (1 enemy)
0A9F4 00                        	.db (+ - $)
0A9F5                           	enemy $F, $A, Enemy_HawkmouthLeft
0A9F5 43 00                     	.db Enemy_HawkmouthLeft, $F << 4 | $A
0A9F7                           
0A9F7                           ; Page 2
0A9F7                           +	distTo + ; $01 (0 enemies)
0A9F7 00                        	.db (+ - $)
0A9F8                           
0A9F8                           ; Page 3
0A9F8                           +	distTo + ; $01 (0 enemies)
0A9F8 00                        	.db (+ - $)
0A9F9                           
0A9F9                           ; Page 4
0A9F9                           +	distTo + ; $01 (0 enemies)
0A9F9 00                        	.db (+ - $)
0A9FA                           
0A9FA                           ; End of enemy data
0A9FA                           +
0A9FA                           include "src/levels/3/3-2/3-2-area3-enemies.asm"
0A9FA                           ; Level 3-2, Area 3
0A9FA                           
0A9FA                           EnemyData_Level_3_2_Area3:
0A9FA                           
0A9FA                           ; Page 0
0A9FA                           	distTo + ; $01 (0 enemies)
0A9FA 00                        	.db (+ - $)
0A9FB                           
0A9FB                           ; Page 1
0A9FB                           +	distTo + ; $03 (1 enemy)
0A9FB 00                        	.db (+ - $)
0A9FC                           	enemy $C, $7, Enemy_BossBirdo
0A9FC 5C 00                     	.db Enemy_BossBirdo, $C << 4 | $7
0A9FE                           
0A9FE                           ; Page 2
0A9FE                           +	distTo + ; $01 (0 enemies)
0A9FE 00                        	.db (+ - $)
0A9FF                           
0A9FF                           ; End of enemy data
0A9FF                           +
0A9FF                           
0A9FF                           ; World 3-3
0A9FF                           include "src/levels/3/3-3/3-3-area0-enemies.asm"
0A9FF                           ; Level 3-3, Area 0
0A9FF                           
0A9FF                           EnemyData_Level_3_3_Area0:
0A9FF                           
0A9FF                           ; Page 0
0A9FF                           	distTo + ; $03 (1 enemy)
0A9FF 00                        	.db (+ - $)
0AA00                           	enemy $4, $A, Enemy_HawkmouthRight
0AA00 42 00                     	.db Enemy_HawkmouthRight, $4 << 4 | $A
0AA02                           
0AA02                           ; Page 1
0AA02                           +	distTo + ; $01 (0 enemies)
0AA02 00                        	.db (+ - $)
0AA03                           
0AA03                           ; Page 2
0AA03                           +	distTo + ; $01 (0 enemies)
0AA03 00                        	.db (+ - $)
0AA04                           
0AA04                           ; End of enemy data
0AA04                           +
0AA04                           include "src/levels/3/3-3/3-3-area1-enemies.asm"
0AA04                           ; Level 3-3, Area 1
0AA04                           
0AA04                           EnemyData_Level_3_3_Area1:
0AA04                           
0AA04                           ; Page 0
0AA04                           	distTo + ; $01 (0 enemies)
0AA04 00                        	.db (+ - $)
0AA05                           
0AA05                           ; Page 1
0AA05                           +	distTo + ; $01 (0 enemies)
0AA05 00                        	.db (+ - $)
0AA06                           
0AA06                           ; Page 2
0AA06                           +	distTo + ; $07 (3 enemies)
0AA06 00                        	.db (+ - $)
0AA07                           	enemy $1, $4, Enemy_AlbatossCarryingBobOmb
0AA07 0A 00                     	.db Enemy_AlbatossCarryingBobOmb, $1 << 4 | $4
0AA09                           	enemy $5, $8, Enemy_Ostro
0AA09 08 00                     	.db Enemy_Ostro, $5 << 4 | $8
0AA0B                           	enemy $8, $4, Enemy_AlbatossCarryingBobOmb
0AA0B 0A 00                     	.db Enemy_AlbatossCarryingBobOmb, $8 << 4 | $4
0AA0D                           
0AA0D                           ; Page 3
0AA0D                           +	distTo + ; $01 (0 enemies)
0AA0D 00                        	.db (+ - $)
0AA0E                           
0AA0E                           ; Page 4
0AA0E                           +	distTo + ; $01 (0 enemies)
0AA0E 00                        	.db (+ - $)
0AA0F                           
0AA0F                           ; Page 5
0AA0F                           +	distTo + ; $01 (0 enemies)
0AA0F 00                        	.db (+ - $)
0AA10                           
0AA10                           ; Page 6
0AA10                           +	distTo + ; $01 (0 enemies)
0AA10 00                        	.db (+ - $)
0AA11                           
0AA11                           ; Page 7
0AA11                           +	distTo + ; $01 (0 enemies)
0AA11 00                        	.db (+ - $)
0AA12                           
0AA12                           ; Page 8
0AA12                           +	distTo + ; $01 (0 enemies)
0AA12 00                        	.db (+ - $)
0AA13                           
0AA13                           ; End of enemy data
0AA13                           +
0AA13                           include "src/levels/3/3-3/3-3-area2-enemies.asm"
0AA13                           ; Level 3-3, Area 2
0AA13                           
0AA13                           EnemyData_Level_3_3_Area2:
0AA13                           
0AA13                           ; Page 0
0AA13                           	distTo + ; $03 (1 enemy)
0AA13 00                        	.db (+ - $)
0AA14                           	enemy $6, $5, Enemy_Spark4
0AA14 31 00                     	.db Enemy_Spark4, $6 << 4 | $5
0AA16                           
0AA16                           ; Page 1
0AA16                           +	distTo + ; $05 (2 enemies)
0AA16 00                        	.db (+ - $)
0AA17                           	enemy $7, $5, Enemy_NinjiJumping
0AA17 0E 00                     	.db Enemy_NinjiJumping, $7 << 4 | $5
0AA19                           	enemy $9, $5, Enemy_NinjiJumping
0AA19 0E 00                     	.db Enemy_NinjiJumping, $9 << 4 | $5
0AA1B                           
0AA1B                           ; Page 2
0AA1B                           +	distTo + ; $09 (4 enemies)
0AA1B 00                        	.db (+ - $)
0AA1C                           	enemy $0, $5, Enemy_Spark3
0AA1C 30 00                     	.db Enemy_Spark3, $0 << 4 | $5
0AA1E                           	enemy $5, $5, Enemy_Spark4
0AA1E 31 00                     	.db Enemy_Spark4, $5 << 4 | $5
0AA20                           	enemy $A, $C, Enemy_NinjiRunning
0AA20 0D 00                     	.db Enemy_NinjiRunning, $A << 4 | $C
0AA22                           	enemy $C, $C, Enemy_NinjiRunning
0AA22 0D 00                     	.db Enemy_NinjiRunning, $C << 4 | $C
0AA24                           
0AA24                           ; Page 3
0AA24                           +	distTo + ; $01 (0 enemies)
0AA24 00                        	.db (+ - $)
0AA25                           
0AA25                           ; Page 4
0AA25                           +	distTo + ; $01 (0 enemies)
0AA25 00                        	.db (+ - $)
0AA26                           
0AA26                           ; End of enemy data
0AA26                           +
0AA26                           include "src/levels/3/3-3/3-3-area3-enemies.asm"
0AA26                           ; Level 3-3, Area 3
0AA26                           
0AA26                           EnemyData_Level_3_3_Area3:
0AA26                           
0AA26                           ; Page 0
0AA26                           	distTo + ; $01 (0 enemies)
0AA26 00                        	.db (+ - $)
0AA27                           
0AA27                           ; Page 1
0AA27                           +	distTo + ; $09 (4 enemies)
0AA27 00                        	.db (+ - $)
0AA28                           	enemy $7, $2, Enemy_Spark4
0AA28 31 00                     	.db Enemy_Spark4, $7 << 4 | $2
0AA2A                           	enemy $8, $4, Enemy_Spark1
0AA2A 2E 00                     	.db Enemy_Spark1, $8 << 4 | $4
0AA2C                           	enemy $B, $7, Enemy_Spark1
0AA2C 2E 00                     	.db Enemy_Spark1, $B << 4 | $7
0AA2E                           	enemy $4, $C, Enemy_Spark3
0AA2E 30 00                     	.db Enemy_Spark3, $4 << 4 | $C
0AA30                           
0AA30                           ; Page 2
0AA30                           +	distTo + ; $07 (3 enemies)
0AA30 00                        	.db (+ - $)
0AA31                           	enemy $8, $1, Enemy_Spark1
0AA31 2E 00                     	.db Enemy_Spark1, $8 << 4 | $1
0AA33                           	enemy $1, $A, Enemy_Spark2
0AA33 2F 00                     	.db Enemy_Spark2, $1 << 4 | $A
0AA35                           	enemy $D, $F, Enemy_Spark4
0AA35 31 00                     	.db Enemy_Spark4, $D << 4 | $F
0AA37                           
0AA37                           ; Page 3
0AA37                           +	distTo + ; $07 (3 enemies)
0AA37 00                        	.db (+ - $)
0AA38                           	enemy $3, $5, Enemy_Spark1
0AA38 2E 00                     	.db Enemy_Spark1, $3 << 4 | $5
0AA3A                           	enemy $9, $6, Enemy_Spark1
0AA3A 2E 00                     	.db Enemy_Spark1, $9 << 4 | $6
0AA3C                           	enemy $1, $8, Enemy_Spark1
0AA3C 2E 00                     	.db Enemy_Spark1, $1 << 4 | $8
0AA3E                           
0AA3E                           ; Page 4
0AA3E                           +	distTo + ; $03 (1 enemy)
0AA3E 00                        	.db (+ - $)
0AA3F                           	enemy $7, $1, Enemy_Spark4
0AA3F 31 00                     	.db Enemy_Spark4, $7 << 4 | $1
0AA41                           
0AA41                           ; Page 5
0AA41                           +	distTo + ; $03 (1 enemy)
0AA41 00                        	.db (+ - $)
0AA42                           	enemy $C, $F, Enemy_Spark4
0AA42 31 00                     	.db Enemy_Spark4, $C << 4 | $F
0AA44                           
0AA44                           ; Page 6
0AA44                           +	distTo + ; $07 (3 enemies)
0AA44 00                        	.db (+ - $)
0AA45                           	enemy $2, $0, Enemy_Spark2
0AA45 2F 00                     	.db Enemy_Spark2, $2 << 4 | $0
0AA47                           	enemy $7, $0, Enemy_Spark4
0AA47 31 00                     	.db Enemy_Spark4, $7 << 4 | $0
0AA49                           	enemy $7, $E, Enemy_Spark1
0AA49 2E 00                     	.db Enemy_Spark1, $7 << 4 | $E
0AA4B                           
0AA4B                           ; Page 7
0AA4B                           +	distTo + ; $07 (3 enemies)
0AA4B 00                        	.db (+ - $)
0AA4C                           	enemy $7, $1, Enemy_Spark2
0AA4C 2F 00                     	.db Enemy_Spark2, $7 << 4 | $1
0AA4E                           	enemy $8, $D, Enemy_Spark3
0AA4E 30 00                     	.db Enemy_Spark3, $8 << 4 | $D
0AA50                           	enemy $7, $F, Enemy_Spark4
0AA50 31 00                     	.db Enemy_Spark4, $7 << 4 | $F
0AA52                           
0AA52                           ; Page 8
0AA52                           +	distTo + ; $05 (2 enemies)
0AA52 00                        	.db (+ - $)
0AA53                           	enemy $3, $4, Enemy_Spark3
0AA53 30 00                     	.db Enemy_Spark3, $3 << 4 | $4
0AA55                           	enemy $C, $7, Enemy_Spark3
0AA55 30 00                     	.db Enemy_Spark3, $C << 4 | $7
0AA57                           
0AA57                           ; Page 9
0AA57                           +	distTo + ; $01 (0 enemies)
0AA57 00                        	.db (+ - $)
0AA58                           
0AA58                           ; Page A
0AA58                           +	distTo + ; $01 (0 enemies)
0AA58 00                        	.db (+ - $)
0AA59                           
0AA59                           ; End of enemy data
0AA59                           +
0AA59                           include "src/levels/3/3-3/3-3-area4-enemies.asm"
0AA59                           ; Level 3-3, Area 4
0AA59                           
0AA59                           EnemyData_Level_3_3_Area4:
0AA59                           
0AA59                           ; Page 0
0AA59                           	distTo + ; $03 (1 enemy)
0AA59 00                        	.db (+ - $)
0AA5A                           	enemy $6, $C, Enemy_SnifitGray
0AA5A 06 00                     	.db Enemy_SnifitGray, $6 << 4 | $C
0AA5C                           
0AA5C                           ; Page 1
0AA5C                           +	distTo + ; $05 (2 enemies)
0AA5C 00                        	.db (+ - $)
0AA5D                           	enemy $8, $D, Enemy_PanserStationaryFiresAngled
0AA5D 23 00                     	.db Enemy_PanserStationaryFiresAngled, $8 << 4 | $D
0AA5F                           	enemy $C, $D, Enemy_PanserStationaryFiresAngled
0AA5F 23 00                     	.db Enemy_PanserStationaryFiresAngled, $C << 4 | $D
0AA61                           
0AA61                           ; Page 2
0AA61                           +	distTo + ; $05 (2 enemies)
0AA61 00                        	.db (+ - $)
0AA62                           	enemy $5, $7, Enemy_Tweeter
0AA62 02 00                     	.db Enemy_Tweeter, $5 << 4 | $7
0AA64                           	enemy $E, $D, Enemy_Tweeter
0AA64 02 00                     	.db Enemy_Tweeter, $E << 4 | $D
0AA66                           
0AA66                           ; Page 3
0AA66                           +	distTo + ; $01 (0 enemies)
0AA66 00                        	.db (+ - $)
0AA67                           
0AA67                           ; Page 4
0AA67                           +	distTo + ; $05 (2 enemies)
0AA67 00                        	.db (+ - $)
0AA68                           	enemy $C, $2, Enemy_SnifitRed
0AA68 05 00                     	.db Enemy_SnifitRed, $C << 4 | $2
0AA6A                           	enemy $3, $B, Enemy_SnifitPink
0AA6A 07 00                     	.db Enemy_SnifitPink, $3 << 4 | $B
0AA6C                           
0AA6C                           ; Page 5
0AA6C                           +	distTo + ; $05 (2 enemies)
0AA6C 00                        	.db (+ - $)
0AA6D                           	enemy $C, $4, Enemy_SnifitPink
0AA6D 07 00                     	.db Enemy_SnifitPink, $C << 4 | $4
0AA6F                           	enemy $3, $D, Enemy_ShyguyPink
0AA6F 03 00                     	.db Enemy_ShyguyPink, $3 << 4 | $D
0AA71                           
0AA71                           ; Page 6
0AA71                           +	distTo + ; $03 (1 enemy)
0AA71 00                        	.db (+ - $)
0AA72                           	enemy $D, $6, Enemy_NinjiJumping
0AA72 0E 00                     	.db Enemy_NinjiJumping, $D << 4 | $6
0AA74                           
0AA74                           ; Page 7
0AA74                           +	distTo + ; $01 (0 enemies)
0AA74 00                        	.db (+ - $)
0AA75                           
0AA75                           ; End of enemy data
0AA75                           +
0AA75                           include "src/levels/3/3-3/3-3-area5-enemies.asm"
0AA75                           ; Level 3-3, Area 5
0AA75                           
0AA75                           EnemyData_Level_3_3_Area5:
0AA75                           
0AA75                           ; Page 0
0AA75                           	distTo + ; $03 (1 enemy)
0AA75 00                        	.db (+ - $)
0AA76                           	enemy $6, $F, Enemy_JarGeneratorShyguy
0AA76 15 00                     	.db Enemy_JarGeneratorShyguy, $6 << 4 | $F
0AA78                           
0AA78                           ; Page 1
0AA78                           +	distTo + ; $03 (1 enemy)
0AA78 00                        	.db (+ - $)
0AA79                           	enemy $6, $B, Enemy_JarGeneratorShyguy
0AA79 15 00                     	.db Enemy_JarGeneratorShyguy, $6 << 4 | $B
0AA7B                           
0AA7B                           ; Page 2
0AA7B                           +	distTo + ; $03 (1 enemy)
0AA7B 00                        	.db (+ - $)
0AA7C                           	enemy $6, $7, Enemy_JarGeneratorShyguy
0AA7C 15 00                     	.db Enemy_JarGeneratorShyguy, $6 << 4 | $7
0AA7E                           
0AA7E                           ; Page 3
0AA7E                           +	distTo + ; $03 (1 enemy)
0AA7E 00                        	.db (+ - $)
0AA7F                           	enemy $6, $3, Enemy_JarGeneratorShyguy
0AA7F 15 00                     	.db Enemy_JarGeneratorShyguy, $6 << 4 | $3
0AA81                           
0AA81                           ; Page 4
0AA81                           +	distTo + ; $01 (0 enemies)
0AA81 00                        	.db (+ - $)
0AA82                           
0AA82                           ; End of enemy data
0AA82                           +
0AA82                           include "src/levels/3/3-3/3-3-area6-enemies.asm"
0AA82                           ; Level 3-3, Area 6
0AA82                           
0AA82                           EnemyData_Level_3_3_Area6:
0AA82                           
0AA82                           ; Page 0
0AA82                           	distTo + ; $0B (5 enemies)
0AA82 00                        	.db (+ - $)
0AA83                           	enemy $7, $3, Enemy_Spark4
0AA83 31 00                     	.db Enemy_Spark4, $7 << 4 | $3
0AA85                           	enemy $8, $4, Enemy_Spark2
0AA85 2F 00                     	.db Enemy_Spark2, $8 << 4 | $4
0AA87                           	enemy $7, $9, Enemy_Spark4
0AA87 31 00                     	.db Enemy_Spark4, $7 << 4 | $9
0AA89                           	enemy $8, $7, Enemy_Phanto
0AA89 17 00                     	.db Enemy_Phanto, $8 << 4 | $7
0AA8B                           	enemy $8, $9, Enemy_Key
0AA8B 3D 00                     	.db Enemy_Key, $8 << 4 | $9
0AA8D                           
0AA8D                           ; Page 1
0AA8D                           +	distTo + ; $01 (0 enemies)
0AA8D 00                        	.db (+ - $)
0AA8E                           
0AA8E                           ; End of enemy data
0AA8E                           +
0AA8E                           include "src/levels/3/3-3/3-3-area7-enemies.asm"
0AA8E                           ; Level 3-3, Area 7
0AA8E                           
0AA8E                           EnemyData_Level_3_3_Area7:
0AA8E                           
0AA8E                           ; Page 0
0AA8E                           	distTo + ; $01 (0 enemies)
0AA8E 00                        	.db (+ - $)
0AA8F                           
0AA8F                           ; Page 1
0AA8F                           +	distTo + ; $05 (2 enemies)
0AA8F 00                        	.db (+ - $)
0AA90                           	enemy $C, $9, Enemy_NinjiJumping
0AA90 0E 00                     	.db Enemy_NinjiJumping, $C << 4 | $9
0AA92                           	enemy $E, $9, Enemy_NinjiJumping
0AA92 0E 00                     	.db Enemy_NinjiJumping, $E << 4 | $9
0AA94                           
0AA94                           ; Page 2
0AA94                           +	distTo + ; $03 (1 enemy)
0AA94 00                        	.db (+ - $)
0AA95                           	enemy $E, $9, Enemy_NinjiRunning
0AA95 0D 00                     	.db Enemy_NinjiRunning, $E << 4 | $9
0AA97                           
0AA97                           ; Page 3
0AA97                           +	distTo + ; $05 (2 enemies)
0AA97 00                        	.db (+ - $)
0AA98                           	enemy $0, $9, Enemy_NinjiRunning
0AA98 0D 00                     	.db Enemy_NinjiRunning, $0 << 4 | $9
0AA9A                           	enemy $2, $9, Enemy_NinjiRunning
0AA9A 0D 00                     	.db Enemy_NinjiRunning, $2 << 4 | $9
0AA9C                           
0AA9C                           ; Page 4
0AA9C                           +	distTo + ; $05 (2 enemies)
0AA9C 00                        	.db (+ - $)
0AA9D                           	enemy $6, $B, Enemy_CrystalBall
0AA9D 44 00                     	.db Enemy_CrystalBall, $6 << 4 | $B
0AA9F                           	enemy $A, $A, Enemy_HawkmouthLeft
0AA9F 43 00                     	.db Enemy_HawkmouthLeft, $A << 4 | $A
0AAA1                           
0AAA1                           ; Page 5
0AAA1                           +	distTo + ; $01 (0 enemies)
0AAA1 00                        	.db (+ - $)
0AAA2                           
0AAA2                           ; End of enemy data
0AAA2                           +
0AAA2                           include "src/levels/3/3-3/3-3-area8-enemies.asm"
0AAA2                           ; Level 3-3, Area 8
0AAA2                           
0AAA2                           EnemyData_Level_3_3_Area8:
0AAA2                           
0AAA2                           ; Page 0
0AAA2                           	distTo + ; $03 (1 enemy)
0AAA2 00                        	.db (+ - $)
0AAA3                           	enemy $2, $2, Enemy_Spark2
0AAA3 2F 00                     	.db Enemy_Spark2, $2 << 4 | $2
0AAA5                           
0AAA5                           ; Page 1
0AAA5                           +	distTo + ; $05 (2 enemies)
0AAA5 00                        	.db (+ - $)
0AAA6                           	enemy $6, $2, Enemy_Spark2
0AAA6 2F 00                     	.db Enemy_Spark2, $6 << 4 | $2
0AAA8                           	enemy $D, $6, Enemy_BossMouser
0AAA8 5D 00                     	.db Enemy_BossMouser, $D << 4 | $6
0AAAA                           
0AAAA                           ; Page 2
0AAAA                           +	distTo + ; $01 (0 enemies)
0AAAA 00                        	.db (+ - $)
0AAAB                           
0AAAB                           ; Page 3
0AAAB                           +	distTo + ; $01 (0 enemies)
0AAAB 00                        	.db (+ - $)
0AAAC                           
0AAAC                           ; End of enemy data
0AAAC                           +
0AAAC                           ; -------------------------------
0AAAC                           
0AAAC                           
0AAAC                           ; -------------------------------
0AAAC                           ; World 4
0AAAC                           
0AAAC                           ; World 4-1
0AAAC                           include "src/levels/4/4-1/4-1-area0-enemies.asm"
0AAAC                           ; Level 4-1, Area 0
0AAAC                           
0AAAC                           EnemyData_Level_4_1_Area0:
0AAAC                           
0AAAC                           ; Page 0
0AAAC                           	distTo + ; $01 (0 enemies)
0AAAC 00                        	.db (+ - $)
0AAAD                           
0AAAD                           ; Page 1
0AAAD                           +	distTo + ; $05 (2 enemies)
0AAAD 00                        	.db (+ - $)
0AAAE                           	enemy $9, $6, Enemy_Flurry
0AAAE 29 00                     	.db Enemy_Flurry, $9 << 4 | $6
0AAB0                           	enemy $B, $2, Enemy_Trouter
0AAB0 13 00                     	.db Enemy_Trouter, $B << 4 | $2
0AAB2                           
0AAB2                           ; Page 2
0AAB2                           +	distTo + ; $03 (1 enemy)
0AAB2 00                        	.db (+ - $)
0AAB3                           	enemy $2, $2, Enemy_Trouter
0AAB3 13 00                     	.db Enemy_Trouter, $2 << 4 | $2
0AAB5                           
0AAB5                           ; Page 3
0AAB5                           +	distTo + ; $0B (5 enemies)
0AAB5 00                        	.db (+ - $)
0AAB6                           	enemy $0, $9, Enemy_Flurry
0AAB6 29 00                     	.db Enemy_Flurry, $0 << 4 | $9
0AAB8                           	enemy $2, $9, Enemy_Flurry
0AAB8 29 00                     	.db Enemy_Flurry, $2 << 4 | $9
0AABA                           	enemy $3, $5, Enemy_Trouter
0AABA 13 00                     	.db Enemy_Trouter, $3 << 4 | $5
0AABC                           	enemy $D, $9, Enemy_Flurry
0AABC 29 00                     	.db Enemy_Flurry, $D << 4 | $9
0AABE                           	enemy $F, $6, Enemy_Flurry
0AABE 29 00                     	.db Enemy_Flurry, $F << 4 | $6
0AAC0                           
0AAC0                           ; Page 4
0AAC0                           +	distTo + ; $01 (0 enemies)
0AAC0 00                        	.db (+ - $)
0AAC1                           
0AAC1                           ; Page 5
0AAC1                           +	distTo + ; $09 (4 enemies)
0AAC1 00                        	.db (+ - $)
0AAC2                           	enemy $4, $6, Enemy_Flurry
0AAC2 29 00                     	.db Enemy_Flurry, $4 << 4 | $6
0AAC4                           	enemy $9, $8, Enemy_Flurry
0AAC4 29 00                     	.db Enemy_Flurry, $9 << 4 | $8
0AAC6                           	enemy $A, $6, Enemy_Flurry
0AAC6 29 00                     	.db Enemy_Flurry, $A << 4 | $6
0AAC8                           	enemy $F, $8, Enemy_Flurry
0AAC8 29 00                     	.db Enemy_Flurry, $F << 4 | $8
0AACA                           
0AACA                           ; Page 6
0AACA                           +	distTo + ; $05 (2 enemies)
0AACA 00                        	.db (+ - $)
0AACB                           	enemy $1, $3, Enemy_Trouter
0AACB 13 00                     	.db Enemy_Trouter, $1 << 4 | $3
0AACD                           	enemy $B, $8, Enemy_Flurry
0AACD 29 00                     	.db Enemy_Flurry, $B << 4 | $8
0AACF                           
0AACF                           ; Page 7
0AACF                           +	distTo + ; $05 (2 enemies)
0AACF 00                        	.db (+ - $)
0AAD0                           	enemy $0, $8, Enemy_Flurry
0AAD0 29 00                     	.db Enemy_Flurry, $0 << 4 | $8
0AAD2                           	enemy $B, $5, Enemy_Flurry
0AAD2 29 00                     	.db Enemy_Flurry, $B << 4 | $5
0AAD4                           
0AAD4                           ; Page 8
0AAD4                           +	distTo + ; $05 (2 enemies)
0AAD4 00                        	.db (+ - $)
0AAD5                           	enemy $3, $5, Enemy_Flurry
0AAD5 29 00                     	.db Enemy_Flurry, $3 << 4 | $5
0AAD7                           	enemy $4, $1, Enemy_Trouter
0AAD7 13 00                     	.db Enemy_Trouter, $4 << 4 | $1
0AAD9                           
0AAD9                           ; Page 9
0AAD9                           +	distTo + ; $01 (0 enemies)
0AAD9 00                        	.db (+ - $)
0AADA                           
0AADA                           ; Page A
0AADA                           +	distTo + ; $01 (0 enemies)
0AADA 00                        	.db (+ - $)
0AADB                           
0AADB                           ; End of enemy data
0AADB                           +
0AADB                           include "src/levels/4/4-1/4-1-area1-enemies.asm"
0AADB                           ; Level 4-1, Area 1
0AADB                           
0AADB                           EnemyData_Level_4_1_Area1:
0AADB                           
0AADB                           ; Page 0
0AADB                           	distTo + ; $01 (0 enemies)
0AADB 00                        	.db (+ - $)
0AADC                           
0AADC                           ; Page 1
0AADC                           +	distTo + ; $01 (0 enemies)
0AADC 00                        	.db (+ - $)
0AADD                           
0AADD                           ; Page 2
0AADD                           +	distTo + ; $03 (1 enemy)
0AADD 00                        	.db (+ - $)
0AADE                           	enemy $5, $8, Enemy_Autobomb
0AADE 26 00                     	.db Enemy_Autobomb, $5 << 4 | $8
0AAE0                           
0AAE0                           ; Page 3
0AAE0                           +	distTo + ; $01 (0 enemies)
0AAE0 00                        	.db (+ - $)
0AAE1                           
0AAE1                           ; Page 4
0AAE1                           +	distTo + ; $07 (3 enemies)
0AAE1 00                        	.db (+ - $)
0AAE2                           	enemy $0, $A, Enemy_Flurry
0AAE2 29 00                     	.db Enemy_Flurry, $0 << 4 | $A
0AAE4                           	enemy $5, $8, Enemy_Autobomb
0AAE4 26 00                     	.db Enemy_Autobomb, $5 << 4 | $8
0AAE6                           	enemy $9, $A, Enemy_Flurry
0AAE6 29 00                     	.db Enemy_Flurry, $9 << 4 | $A
0AAE8                           
0AAE8                           ; Page 5
0AAE8                           +	distTo + ; $05 (2 enemies)
0AAE8 00                        	.db (+ - $)
0AAE9                           	enemy $3, $A, Enemy_Flurry
0AAE9 29 00                     	.db Enemy_Flurry, $3 << 4 | $A
0AAEB                           	enemy $D, $C, Enemy_Flurry
0AAEB 29 00                     	.db Enemy_Flurry, $D << 4 | $C
0AAED                           
0AAED                           ; Page 6
0AAED                           +	distTo + ; $03 (1 enemy)
0AAED 00                        	.db (+ - $)
0AAEE                           	enemy $F, $6, Enemy_Autobomb
0AAEE 26 00                     	.db Enemy_Autobomb, $F << 4 | $6
0AAF0                           
0AAF0                           ; Page 7
0AAF0                           +	distTo + ; $01 (0 enemies)
0AAF0 00                        	.db (+ - $)
0AAF1                           
0AAF1                           ; Page 8
0AAF1                           +	distTo + ; $05 (2 enemies)
0AAF1 00                        	.db (+ - $)
0AAF2                           	enemy $3, $C, Enemy_Flurry
0AAF2 29 00                     	.db Enemy_Flurry, $3 << 4 | $C
0AAF4                           	enemy $D, $7, Enemy_Autobomb
0AAF4 26 00                     	.db Enemy_Autobomb, $D << 4 | $7
0AAF6                           
0AAF6                           ; Page 9
0AAF6                           +	distTo + ; $05 (2 enemies)
0AAF6 00                        	.db (+ - $)
0AAF7                           	enemy $8, $5, Enemy_CrystalBall
0AAF7 44 00                     	.db Enemy_CrystalBall, $8 << 4 | $5
0AAF9                           	enemy $D, $4, Enemy_HawkmouthLeft
0AAF9 43 00                     	.db Enemy_HawkmouthLeft, $D << 4 | $4
0AAFB                           
0AAFB                           ; Page A
0AAFB                           +	distTo + ; $01 (0 enemies)
0AAFB 00                        	.db (+ - $)
0AAFC                           
0AAFC                           ; End of enemy data
0AAFC                           +
0AAFC                           include "src/levels/4/4-1/4-1-area2-enemies.asm"
0AAFC                           ; Level 4-1, Area 2
0AAFC                           
0AAFC                           EnemyData_Level_4_1_Area2:
0AAFC                           
0AAFC                           ; This area is unused...
0AAFC                           ; it has another lonely Boss Birdo...
0AAFC                           ; and a fucking billion empty pages.
0AAFC                           ; Nintendo, what were you on???
0AAFC                           
0AAFC                           ; Page 0
0AAFC                           	distTo + ; $01 (0 enemies)
0AAFC 00                        	.db (+ - $)
0AAFD                           
0AAFD                           ; Page 1
0AAFD                           +	distTo + ; $03 (1 enemy)
0AAFD 00                        	.db (+ - $)
0AAFE                           	enemy $B, $8, Enemy_BossBirdo
0AAFE 5C 00                     	.db Enemy_BossBirdo, $B << 4 | $8
0AB00                           
0AB00                           ; Page 2
0AB00                           +	distTo + ; $01 (0 enemies)
0AB00 00                        	.db (+ - $)
0AB01                           
0AB01                           ; Page 3
0AB01                           +	distTo + ; $01 (0 enemies)
0AB01 00                        	.db (+ - $)
0AB02                           
0AB02                           ; Page 4
0AB02                           +	distTo + ; $01 (0 enemies)
0AB02 00                        	.db (+ - $)
0AB03                           
0AB03                           ; Page 5
0AB03                           +	distTo + ; $01 (0 enemies)
0AB03 00                        	.db (+ - $)
0AB04                           
0AB04                           ; Page 6
0AB04                           +	distTo + ; $01 (0 enemies)
0AB04 00                        	.db (+ - $)
0AB05                           
0AB05                           ; Page 7
0AB05                           +	distTo + ; $01 (0 enemies)
0AB05 00                        	.db (+ - $)
0AB06                           
0AB06                           ; Page 8
0AB06                           +	distTo + ; $01 (0 enemies)
0AB06 00                        	.db (+ - $)
0AB07                           
0AB07                           ; Page 9
0AB07                           +	distTo + ; $01 (0 enemies)
0AB07 00                        	.db (+ - $)
0AB08                           
0AB08                           ; Page A
0AB08                           +	distTo + ; $01 (0 enemies)
0AB08 00                        	.db (+ - $)
0AB09                           
0AB09                           ; Page B
0AB09                           +	distTo + ; $01 (0 enemies)
0AB09 00                        	.db (+ - $)
0AB0A                           
0AB0A                           ; Page C
0AB0A                           +	distTo + ; $01 (0 enemies)
0AB0A 00                        	.db (+ - $)
0AB0B                           
0AB0B                           ; Page D
0AB0B                           +	distTo + ; $01 (0 enemies)
0AB0B 00                        	.db (+ - $)
0AB0C                           
0AB0C                           ; Page E
0AB0C                           +	distTo + ; $01 (0 enemies)
0AB0C 00                        	.db (+ - $)
0AB0D                           
0AB0D                           ; Page F
0AB0D                           +	distTo + ; $01 (0 enemies)
0AB0D 00                        	.db (+ - $)
0AB0E                           
0AB0E                           ; Page 10
0AB0E                           +	distTo + ; $01 (0 enemies)
0AB0E 00                        	.db (+ - $)
0AB0F                           
0AB0F                           ; Page 11
0AB0F                           +	distTo + ; $01 (0 enemies)
0AB0F 00                        	.db (+ - $)
0AB10                           
0AB10                           ; Page 12
0AB10                           +	distTo + ; $01 (0 enemies)
0AB10 00                        	.db (+ - $)
0AB11                           
0AB11                           ; Page 13
0AB11                           +	distTo + ; $01 (0 enemies)
0AB11 00                        	.db (+ - $)
0AB12                           
0AB12                           ; Page 14
0AB12                           +	distTo + ; $01 (0 enemies)
0AB12 00                        	.db (+ - $)
0AB13                           
0AB13                           ; Page 15
0AB13                           +	distTo + ; $01 (0 enemies)
0AB13 00                        	.db (+ - $)
0AB14                           
0AB14                           ; Page 16
0AB14                           +	distTo + ; $01 (0 enemies)
0AB14 00                        	.db (+ - $)
0AB15                           
0AB15                           ; Page 17
0AB15                           +	distTo + ; $01 (0 enemies)
0AB15 00                        	.db (+ - $)
0AB16                           
0AB16                           ; Page 18
0AB16                           +	distTo + ; $01 (0 enemies)
0AB16 00                        	.db (+ - $)
0AB17                           
0AB17                           ; Page 19
0AB17                           +	distTo + ; $01 (0 enemies)
0AB17 00                        	.db (+ - $)
0AB18                           
0AB18                           ; Page 1A
0AB18                           +	distTo + ; $01 (0 enemies)
0AB18 00                        	.db (+ - $)
0AB19                           
0AB19                           ; Page 1B
0AB19                           +	distTo + ; $01 (0 enemies)
0AB19 00                        	.db (+ - $)
0AB1A                           
0AB1A                           ; Page 1C
0AB1A                           +	distTo + ; $01 (0 enemies)
0AB1A 00                        	.db (+ - $)
0AB1B                           
0AB1B                           ; Page 1D
0AB1B                           +	distTo + ; $01 (0 enemies)
0AB1B 00                        	.db (+ - $)
0AB1C                           
0AB1C                           ; Page 1E
0AB1C                           +	distTo + ; $01 (0 enemies)
0AB1C 00                        	.db (+ - $)
0AB1D                           
0AB1D                           ; Page 1F
0AB1D                           +	distTo + ; $01 (0 enemies)
0AB1D 00                        	.db (+ - $)
0AB1E                           
0AB1E                           ; Page 20
0AB1E                           +	distTo + ; $01 (0 enemies)
0AB1E 00                        	.db (+ - $)
0AB1F                           
0AB1F                           ; Page 21
0AB1F                           +	distTo + ; $01 (0 enemies)
0AB1F 00                        	.db (+ - $)
0AB20                           
0AB20                           ; Page 22
0AB20                           +	distTo + ; $01 (0 enemies)
0AB20 00                        	.db (+ - $)
0AB21                           
0AB21                           ; Page 23
0AB21                           +	distTo + ; $01 (0 enemies)
0AB21 00                        	.db (+ - $)
0AB22                           
0AB22                           ; Page 24
0AB22                           +	distTo + ; $01 (0 enemies)
0AB22 00                        	.db (+ - $)
0AB23                           
0AB23                           ; Page 25
0AB23                           +	distTo + ; $01 (0 enemies)
0AB23 00                        	.db (+ - $)
0AB24                           
0AB24                           ; Page 26
0AB24                           +	distTo + ; $01 (0 enemies)
0AB24 00                        	.db (+ - $)
0AB25                           
0AB25                           ; Page 27
0AB25                           +	distTo + ; $01 (0 enemies)
0AB25 00                        	.db (+ - $)
0AB26                           
0AB26                           ; Page 28
0AB26                           +	distTo + ; $01 (0 enemies)
0AB26 00                        	.db (+ - $)
0AB27                           
0AB27                           ; Page 29
0AB27                           +	distTo + ; $01 (0 enemies)
0AB27 00                        	.db (+ - $)
0AB28                           
0AB28                           ; Page 2A
0AB28                           +	distTo + ; $01 (0 enemies)
0AB28 00                        	.db (+ - $)
0AB29                           
0AB29                           ; Page 2B
0AB29                           +	distTo + ; $01 (0 enemies)
0AB29 00                        	.db (+ - $)
0AB2A                           
0AB2A                           ; End of enemy data
0AB2A                           +
0AB2A                           
0AB2A                           ; World 4-2
0AB2A                           include "src/levels/4/4-2/4-2-area0-enemies.asm"
0AB2A                           ; Level 4-2, Area 0
0AB2A                           
0AB2A                           EnemyData_Level_4_2_Area0:
0AB2A                           
0AB2A                           ; Page 0
0AB2A                           	distTo + ; $03 (1 enemy)
0AB2A 00                        	.db (+ - $)
0AB2B                           	enemy $4, $7, Enemy_HawkmouthRight
0AB2B 42 00                     	.db Enemy_HawkmouthRight, $4 << 4 | $7
0AB2D                           
0AB2D                           ; Page 1
0AB2D                           +	distTo + ; $01 (0 enemies)
0AB2D 00                        	.db (+ - $)
0AB2E                           
0AB2E                           ; Page 2
0AB2E                           +	distTo + ; $01 (0 enemies)
0AB2E 00                        	.db (+ - $)
0AB2F                           
0AB2F                           ; End of enemy data
0AB2F                           +
0AB2F                           include "src/levels/4/4-2/4-2-area1-enemies.asm"
0AB2F                           ; Level 4-2, Area 1
0AB2F                           
0AB2F                           EnemyData_Level_4_2_Area1:
0AB2F                           
0AB2F                           ; Page 0
0AB2F                           	distTo + ; $05 (2 enemies)
0AB2F 00                        	.db (+ - $)
0AB30                           	enemy $D, $3, Enemy_BeezoStraight
0AB30 10 00                     	.db Enemy_BeezoStraight, $D << 4 | $3
0AB32                           	enemy $F, $5, Enemy_BeezoStraight
0AB32 10 00                     	.db Enemy_BeezoStraight, $F << 4 | $5
0AB34                           
0AB34                           ; Page 1
0AB34                           +	distTo + ; $03 (1 enemy)
0AB34 00                        	.db (+ - $)
0AB35                           	enemy $D, $8, Enemy_BeezoStraight
0AB35 10 00                     	.db Enemy_BeezoStraight, $D << 4 | $8
0AB37                           
0AB37                           ; Page 2
0AB37                           +	distTo + ; $09 (4 enemies)
0AB37 00                        	.db (+ - $)
0AB38                           	enemy $1, $6, Enemy_BeezoStraight
0AB38 10 00                     	.db Enemy_BeezoStraight, $1 << 4 | $6
0AB3A                           	enemy $3, $7, Enemy_BeezoStraight
0AB3A 10 00                     	.db Enemy_BeezoStraight, $3 << 4 | $7
0AB3C                           	enemy $4, $4, Enemy_BeezoStraight
0AB3C 10 00                     	.db Enemy_BeezoStraight, $4 << 4 | $4
0AB3E                           	enemy $7, $8, Enemy_BeezoStraight
0AB3E 10 00                     	.db Enemy_BeezoStraight, $7 << 4 | $8
0AB40                           
0AB40                           ; Page 3
0AB40                           +	distTo + ; $0B (5 enemies)
0AB40 00                        	.db (+ - $)
0AB41                           	enemy $6, $7, Enemy_BeezoStraight
0AB41 10 00                     	.db Enemy_BeezoStraight, $6 << 4 | $7
0AB43                           	enemy $9, $8, Enemy_BeezoStraight
0AB43 10 00                     	.db Enemy_BeezoStraight, $9 << 4 | $8
0AB45                           	enemy $C, $7, Enemy_BeezoStraight
0AB45 10 00                     	.db Enemy_BeezoStraight, $C << 4 | $7
0AB47                           	enemy $E, $4, Enemy_BeezoStraight
0AB47 10 00                     	.db Enemy_BeezoStraight, $E << 4 | $4
0AB49                           	enemy $F, $8, Enemy_BeezoStraight
0AB49 10 00                     	.db Enemy_BeezoStraight, $F << 4 | $8
0AB4B                           
0AB4B                           ; Page 4
0AB4B                           +	distTo + ; $07 (3 enemies)
0AB4B 00                        	.db (+ - $)
0AB4C                           	enemy $C, $8, Enemy_Flurry
0AB4C 29 00                     	.db Enemy_Flurry, $C << 4 | $8
0AB4E                           	enemy $E, $8, Enemy_Flurry
0AB4E 29 00                     	.db Enemy_Flurry, $E << 4 | $8
0AB50                           	enemy $F, $3, Enemy_BeezoStraight
0AB50 10 00                     	.db Enemy_BeezoStraight, $F << 4 | $3
0AB52                           
0AB52                           ; Page 5
0AB52                           +	distTo + ; $05 (2 enemies)
0AB52 00                        	.db (+ - $)
0AB53                           	enemy $A, $6, Enemy_BeezoStraight
0AB53 10 00                     	.db Enemy_BeezoStraight, $A << 4 | $6
0AB55                           	enemy $D, $8, Enemy_BeezoStraight
0AB55 10 00                     	.db Enemy_BeezoStraight, $D << 4 | $8
0AB57                           
0AB57                           ; Page 6
0AB57                           +	distTo + ; $0B (5 enemies)
0AB57 00                        	.db (+ - $)
0AB58                           	enemy $3, $7, Enemy_BeezoStraight
0AB58 10 00                     	.db Enemy_BeezoStraight, $3 << 4 | $7
0AB5A                           	enemy $5, $3, Enemy_BeezoStraight
0AB5A 10 00                     	.db Enemy_BeezoStraight, $5 << 4 | $3
0AB5C                           	enemy $9, $5, Enemy_BeezoStraight
0AB5C 10 00                     	.db Enemy_BeezoStraight, $9 << 4 | $5
0AB5E                           	enemy $D, $8, Enemy_BeezoStraight
0AB5E 10 00                     	.db Enemy_BeezoStraight, $D << 4 | $8
0AB60                           	enemy $F, $4, Enemy_BeezoStraight
0AB60 10 00                     	.db Enemy_BeezoStraight, $F << 4 | $4
0AB62                           
0AB62                           ; Page 7
0AB62                           +	distTo + ; $0B (5 enemies)
0AB62 00                        	.db (+ - $)
0AB63                           	enemy $3, $A, Enemy_BeezoStraight
0AB63 10 00                     	.db Enemy_BeezoStraight, $3 << 4 | $A
0AB65                           	enemy $5, $6, Enemy_BeezoStraight
0AB65 10 00                     	.db Enemy_BeezoStraight, $5 << 4 | $6
0AB67                           	enemy $7, $B, Enemy_BeezoStraight
0AB67 10 00                     	.db Enemy_BeezoStraight, $7 << 4 | $B
0AB69                           	enemy $8, $4, Enemy_BeezoStraight
0AB69 10 00                     	.db Enemy_BeezoStraight, $8 << 4 | $4
0AB6B                           	enemy $F, $7, Enemy_BeezoStraight
0AB6B 10 00                     	.db Enemy_BeezoStraight, $F << 4 | $7
0AB6D                           
0AB6D                           ; Page 8
0AB6D                           +	distTo + ; $07 (3 enemies)
0AB6D 00                        	.db (+ - $)
0AB6E                           	enemy $2, $3, Enemy_BeezoStraight
0AB6E 10 00                     	.db Enemy_BeezoStraight, $2 << 4 | $3
0AB70                           	enemy $6, $6, Enemy_BeezoStraight
0AB70 10 00                     	.db Enemy_BeezoStraight, $6 << 4 | $6
0AB72                           	enemy $B, $8, Enemy_Flurry
0AB72 29 00                     	.db Enemy_Flurry, $B << 4 | $8
0AB74                           
0AB74                           ; Page 9
0AB74                           +	distTo + ; $01 (0 enemies)
0AB74 00                        	.db (+ - $)
0AB75                           
0AB75                           ; Page A
0AB75                           +	distTo + ; $01 (0 enemies)
0AB75 00                        	.db (+ - $)
0AB76                           
0AB76                           ; End of enemy data
0AB76                           +
0AB76                           include "src/levels/4/4-2/4-2-area2-enemies.asm"
0AB76                           ; Level 4-2, Area 2
0AB76                           
0AB76                           EnemyData_Level_4_2_Area2:
0AB76                           
0AB76                           ; Page 0
0AB76                           	distTo + ; $01 (0 enemies)
0AB76 00                        	.db (+ - $)
0AB77                           
0AB77                           ; Page 1
0AB77                           +	distTo + ; $03 (1 enemy)
0AB77 00                        	.db (+ - $)
0AB78                           	enemy $6, $A, Enemy_WhaleSpout
0AB78 28 00                     	.db Enemy_WhaleSpout, $6 << 4 | $A
0AB7A                           
0AB7A                           ; Page 2
0AB7A                           +	distTo + ; $05 (2 enemies)
0AB7A 00                        	.db (+ - $)
0AB7B                           	enemy $7, $A, Enemy_WhaleSpout
0AB7B 28 00                     	.db Enemy_WhaleSpout, $7 << 4 | $A
0AB7D                           	enemy $F, $A, Enemy_WhaleSpout
0AB7D 28 00                     	.db Enemy_WhaleSpout, $F << 4 | $A
0AB7F                           
0AB7F                           ; Page 3
0AB7F                           +	distTo + ; $01 (0 enemies)
0AB7F 00                        	.db (+ - $)
0AB80                           
0AB80                           ; Page 4
0AB80                           +	distTo + ; $03 (1 enemy)
0AB80 00                        	.db (+ - $)
0AB81                           	enemy $D, $A, Enemy_WhaleSpout
0AB81 28 00                     	.db Enemy_WhaleSpout, $D << 4 | $A
0AB83                           
0AB83                           ; Page 5
0AB83                           +	distTo + ; $05 (2 enemies)
0AB83 00                        	.db (+ - $)
0AB84                           	enemy $6, $9, Enemy_WhaleSpout
0AB84 28 00                     	.db Enemy_WhaleSpout, $6 << 4 | $9
0AB86                           	enemy $9, $8, Enemy_SnifitPink
0AB86 07 00                     	.db Enemy_SnifitPink, $9 << 4 | $8
0AB88                           
0AB88                           ; Page 6
0AB88                           +	distTo + ; $09 (4 enemies)
0AB88 00                        	.db (+ - $)
0AB89                           	enemy $2, $A, Enemy_WhaleSpout
0AB89 28 00                     	.db Enemy_WhaleSpout, $2 << 4 | $A
0AB8B                           	enemy $3, $9, Enemy_ShyguyPink
0AB8B 03 00                     	.db Enemy_ShyguyPink, $3 << 4 | $9
0AB8D                           	enemy $B, $A, Enemy_WhaleSpout
0AB8D 28 00                     	.db Enemy_WhaleSpout, $B << 4 | $A
0AB8F                           	enemy $C, $9, Enemy_ShyguyPink
0AB8F 03 00                     	.db Enemy_ShyguyPink, $C << 4 | $9
0AB91                           
0AB91                           ; Page 7
0AB91                           +	distTo + ; $05 (2 enemies)
0AB91 00                        	.db (+ - $)
0AB92                           	enemy $6, $9, Enemy_WhaleSpout
0AB92 28 00                     	.db Enemy_WhaleSpout, $6 << 4 | $9
0AB94                           	enemy $8, $8, Enemy_ShyguyPink
0AB94 03 00                     	.db Enemy_ShyguyPink, $8 << 4 | $8
0AB96                           
0AB96                           ; Page 8
0AB96                           +	distTo + ; $05 (2 enemies)
0AB96 00                        	.db (+ - $)
0AB97                           	enemy $A, $9, Enemy_WhaleSpout
0AB97 28 00                     	.db Enemy_WhaleSpout, $A << 4 | $9
0AB99                           	enemy $D, $3, Enemy_Flurry
0AB99 29 00                     	.db Enemy_Flurry, $D << 4 | $3
0AB9B                           
0AB9B                           ; Page 9
0AB9B                           +	distTo + ; $01 (0 enemies)
0AB9B 00                        	.db (+ - $)
0AB9C                           
0AB9C                           ; Page A
0AB9C                           +	distTo + ; $01 (0 enemies)
0AB9C 00                        	.db (+ - $)
0AB9D                           
0AB9D                           ; End of enemy data
0AB9D                           +
0AB9D                           include "src/levels/4/4-2/4-2-area3-enemies.asm"
0AB9D                           ; Level 4-2, Area 3
0AB9D                           
0AB9D                           EnemyData_Level_4_2_Area3:
0AB9D                           
0AB9D                           ; Page 0
0AB9D                           	distTo + ; $01 (0 enemies)
0AB9D 00                        	.db (+ - $)
0AB9E                           
0AB9E                           ; Page 1
0AB9E                           +	distTo + ; $03 (1 enemy)
0AB9E 00                        	.db (+ - $)
0AB9F                           	enemy $C, $7, Enemy_Autobomb
0AB9F 26 00                     	.db Enemy_Autobomb, $C << 4 | $7
0ABA1                           
0ABA1                           ; Page 2
0ABA1                           +	distTo + ; $01 (0 enemies)
0ABA1 00                        	.db (+ - $)
0ABA2                           
0ABA2                           ; Page 3
0ABA2                           +	distTo + ; $05 (2 enemies)
0ABA2 00                        	.db (+ - $)
0ABA3                           	enemy $9, $9, Enemy_Porcupo
0ABA3 04 00                     	.db Enemy_Porcupo, $9 << 4 | $9
0ABA5                           	enemy $C, $9, Enemy_Porcupo
0ABA5 04 00                     	.db Enemy_Porcupo, $C << 4 | $9
0ABA7                           
0ABA7                           ; Page 4
0ABA7                           +	distTo + ; $01 (0 enemies)
0ABA7 00                        	.db (+ - $)
0ABA8                           
0ABA8                           ; End of enemy data
0ABA8                           +
0ABA8                           include "src/levels/4/4-2/4-2-area4-enemies.asm"
0ABA8                           ; Level 4-2, Area 4
0ABA8                           
0ABA8                           EnemyData_Level_4_2_Area4:
0ABA8                           
0ABA8                           ; Page 0
0ABA8                           	distTo + ; $01 (0 enemies)
0ABA8 00                        	.db (+ - $)
0ABA9                           
0ABA9                           ; Page 1
0ABA9                           +	distTo + ; $05 (2 enemies)
0ABA9 00                        	.db (+ - $)
0ABAA                           	enemy $B, $8, Enemy_Birdo
0ABAA 1C 00                     	.db Enemy_Birdo, $B << 4 | $8
0ABAC                           	enemy $B, $9, Enemy_CrystalBall
0ABAC 44 00                     	.db Enemy_CrystalBall, $B << 4 | $9
0ABAE                           
0ABAE                           ; Page 2
0ABAE                           +	distTo + ; $03 (1 enemy)
0ABAE 00                        	.db (+ - $)
0ABAF                           	enemy $B, $A, Enemy_HawkmouthLeft
0ABAF 43 00                     	.db Enemy_HawkmouthLeft, $B << 4 | $A
0ABB1                           
0ABB1                           ; Page 3
0ABB1                           +	distTo + ; $01 (0 enemies)
0ABB1 00                        	.db (+ - $)
0ABB2                           
0ABB2                           ; Page 4
0ABB2                           +	distTo + ; $01 (0 enemies)
0ABB2 00                        	.db (+ - $)
0ABB3                           
0ABB3                           ; Page 5
0ABB3                           +	distTo + ; $01 (0 enemies)
0ABB3 00                        	.db (+ - $)
0ABB4                           
0ABB4                           ; Page 6
0ABB4                           +	distTo + ; $01 (0 enemies)
0ABB4 00                        	.db (+ - $)
0ABB5                           
0ABB5                           ; Page 7
0ABB5                           +	distTo + ; $01 (0 enemies)
0ABB5 00                        	.db (+ - $)
0ABB6                           
0ABB6                           ; Page 8
0ABB6                           +	distTo + ; $01 (0 enemies)
0ABB6 00                        	.db (+ - $)
0ABB7                           
0ABB7                           ; End of enemy data
0ABB7                           +
0ABB7                           
0ABB7                           ; World 4-3
0ABB7                           include "src/levels/4/4-3/4-3-area0-enemies.asm"
0ABB7                           ; Level 4-3, Area 0
0ABB7                           
0ABB7                           EnemyData_Level_4_3_Area0:
0ABB7                           
0ABB7                           ; Page 0
0ABB7                           	distTo + ; $03 (1 enemy)
0ABB7 00                        	.db (+ - $)
0ABB8                           	enemy $2, $A, Enemy_HawkmouthRight
0ABB8 42 00                     	.db Enemy_HawkmouthRight, $2 << 4 | $A
0ABBA                           
0ABBA                           ; Page 1
0ABBA                           +	distTo + ; $01 (0 enemies)
0ABBA 00                        	.db (+ - $)
0ABBB                           
0ABBB                           ; End of enemy data
0ABBB                           +
0ABBB                           include "src/levels/4/4-3/4-3-area1-enemies.asm"
0ABBB                           ; Level 4-3, Area 1
0ABBB                           
0ABBB                           EnemyData_Level_4_3_Area1:
0ABBB                           
0ABBB                           ; Page 0
0ABBB                           	distTo + ; $01 (0 enemies)
0ABBB 00                        	.db (+ - $)
0ABBC                           
0ABBC                           ; Page 1
0ABBC                           +	distTo + ; $03 (1 enemy)
0ABBC 00                        	.db (+ - $)
0ABBD                           	enemy $A, $9, Enemy_Birdo
0ABBD 1C 00                     	.db Enemy_Birdo, $A << 4 | $9
0ABBF                           
0ABBF                           ; Page 2
0ABBF                           +	distTo + ; $01 (0 enemies)
0ABBF 00                        	.db (+ - $)
0ABC0                           
0ABC0                           ; Page 3
0ABC0                           +	distTo + ; $01 (0 enemies)
0ABC0 00                        	.db (+ - $)
0ABC1                           
0ABC1                           ; Page 4
0ABC1                           +	distTo + ; $01 (0 enemies)
0ABC1 00                        	.db (+ - $)
0ABC2                           
0ABC2                           ; Page 5
0ABC2                           +	distTo + ; $01 (0 enemies)
0ABC2 00                        	.db (+ - $)
0ABC3                           
0ABC3                           ; Page 6
0ABC3                           +	distTo + ; $01 (0 enemies)
0ABC3 00                        	.db (+ - $)
0ABC4                           
0ABC4                           ; Page 7
0ABC4                           +	distTo + ; $01 (0 enemies)
0ABC4 00                        	.db (+ - $)
0ABC5                           
0ABC5                           ; Page 8
0ABC5                           +	distTo + ; $01 (0 enemies)
0ABC5 00                        	.db (+ - $)
0ABC6                           
0ABC6                           ; Page 9
0ABC6                           +	distTo + ; $03 (1 enemy)
0ABC6 00                        	.db (+ - $)
0ABC7                           	enemy $1, $8, Enemy_BeezoStraight
0ABC7 10 00                     	.db Enemy_BeezoStraight, $1 << 4 | $8
0ABC9                           
0ABC9                           ; Page A
0ABC9                           +	distTo + ; $01 (0 enemies)
0ABC9 00                        	.db (+ - $)
0ABCA                           
0ABCA                           ; End of enemy data
0ABCA                           +
0ABCA                           include "src/levels/4/4-3/4-3-area2-enemies.asm"
0ABCA                           ; Level 4-3, Area 2
0ABCA                           
0ABCA                           EnemyData_Level_4_3_Area2:
0ABCA                           
0ABCA                           ; Page 0
0ABCA                           	distTo + ; $09 (4 enemies)
0ABCA 00                        	.db (+ - $)
0ABCB                           	enemy $E, $A, Enemy_Flurry
0ABCB 29 00                     	.db Enemy_Flurry, $E << 4 | $A
0ABCD                           	enemy $E, $C, Enemy_Flurry
0ABCD 29 00                     	.db Enemy_Flurry, $E << 4 | $C
0ABCF                           	enemy $D, $E, Enemy_Flurry
0ABCF 29 00                     	.db Enemy_Flurry, $D << 4 | $E
0ABD1                           	enemy $E, $E, Enemy_Flurry
0ABD1 29 00                     	.db Enemy_Flurry, $E << 4 | $E
0ABD3                           
0ABD3                           ; Page 1
0ABD3                           +	distTo + ; $03 (1 enemy)
0ABD3 00                        	.db (+ - $)
0ABD4                           	enemy $E, $E, Enemy_Flurry
0ABD4 29 00                     	.db Enemy_Flurry, $E << 4 | $E
0ABD6                           
0ABD6                           ; Page 2
0ABD6                           +	distTo + ; $05 (2 enemies)
0ABD6 00                        	.db (+ - $)
0ABD7                           	enemy $E, $0, Enemy_Flurry
0ABD7 29 00                     	.db Enemy_Flurry, $E << 4 | $0
0ABD9                           	enemy $E, $2, Enemy_Flurry
0ABD9 29 00                     	.db Enemy_Flurry, $E << 4 | $2
0ABDB                           
0ABDB                           ; Page 3
0ABDB                           +	distTo + ; $03 (1 enemy)
0ABDB 00                        	.db (+ - $)
0ABDC                           	enemy $8, $C, Enemy_Flurry
0ABDC 29 00                     	.db Enemy_Flurry, $8 << 4 | $C
0ABDE                           
0ABDE                           ; Page 4
0ABDE                           +	distTo + ; $09 (4 enemies)
0ABDE 00                        	.db (+ - $)
0ABDF                           	enemy $9, $2, Enemy_Flurry
0ABDF 29 00                     	.db Enemy_Flurry, $9 << 4 | $2
0ABE1                           	enemy $B, $2, Enemy_Flurry
0ABE1 29 00                     	.db Enemy_Flurry, $B << 4 | $2
0ABE3                           	enemy $E, $9, Enemy_Flurry
0ABE3 29 00                     	.db Enemy_Flurry, $E << 4 | $9
0ABE5                           	enemy $E, $B, Enemy_Flurry
0ABE5 29 00                     	.db Enemy_Flurry, $E << 4 | $B
0ABE7                           
0ABE7                           ; Page 5
0ABE7                           +	distTo + ; $05 (2 enemies)
0ABE7 00                        	.db (+ - $)
0ABE8                           	enemy $7, $1, Enemy_Flurry
0ABE8 29 00                     	.db Enemy_Flurry, $7 << 4 | $1
0ABEA                           	enemy $E, $4, Enemy_Flurry
0ABEA 29 00                     	.db Enemy_Flurry, $E << 4 | $4
0ABEC                           
0ABEC                           ; Page 6
0ABEC                           +	distTo + ; $01 (0 enemies)
0ABEC 00                        	.db (+ - $)
0ABED                           
0ABED                           ; Page 7
0ABED                           +	distTo + ; $01 (0 enemies)
0ABED 00                        	.db (+ - $)
0ABEE                           
0ABEE                           ; Page 8
0ABEE                           +	distTo + ; $01 (0 enemies)
0ABEE 00                        	.db (+ - $)
0ABEF                           
0ABEF                           ; Page 9
0ABEF                           +	distTo + ; $01 (0 enemies)
0ABEF 00                        	.db (+ - $)
0ABF0                           
0ABF0                           ; Page A
0ABF0                           +	distTo + ; $01 (0 enemies)
0ABF0 00                        	.db (+ - $)
0ABF1                           
0ABF1                           ; End of enemy data
0ABF1                           +
0ABF1                           include "src/levels/4/4-3/4-3-area3-enemies.asm"
0ABF1                           ; Level 4-3, Area 3
0ABF1                           
0ABF1                           EnemyData_Level_4_3_Area3:
0ABF1                           
0ABF1                           ; Page 0
0ABF1                           	distTo + ; $07 (3 enemies)
0ABF1 00                        	.db (+ - $)
0ABF2                           	enemy $C, $8, Enemy_ShyguyRed
0ABF2 01 00                     	.db Enemy_ShyguyRed, $C << 4 | $8
0ABF4                           	enemy $D, $8, Enemy_ShyguyPink
0ABF4 03 00                     	.db Enemy_ShyguyPink, $D << 4 | $8
0ABF6                           	enemy $E, $8, Enemy_Tweeter
0ABF6 02 00                     	.db Enemy_Tweeter, $E << 4 | $8
0ABF8                           
0ABF8                           ; Page 1
0ABF8                           +	distTo + ; $01 (0 enemies)
0ABF8 00                        	.db (+ - $)
0ABF9                           
0ABF9                           ; Page 2
0ABF9                           +	distTo + ; $01 (0 enemies)
0ABF9 00                        	.db (+ - $)
0ABFA                           
0ABFA                           ; Page 3
0ABFA                           +	distTo + ; $01 (0 enemies)
0ABFA 00                        	.db (+ - $)
0ABFB                           
0ABFB                           ; Page 4
0ABFB                           +	distTo + ; $07 (3 enemies)
0ABFB 00                        	.db (+ - $)
0ABFC                           	enemy $7, $2, Enemy_Flurry
0ABFC 29 00                     	.db Enemy_Flurry, $7 << 4 | $2
0ABFE                           	enemy $8, $2, Enemy_Flurry
0ABFE 29 00                     	.db Enemy_Flurry, $8 << 4 | $2
0AC00                           	enemy $7, $E, Enemy_Flurry
0AC00 29 00                     	.db Enemy_Flurry, $7 << 4 | $E
0AC02                           
0AC02                           ; Page 5
0AC02                           +	distTo + ; $01 (0 enemies)
0AC02 00                        	.db (+ - $)
0AC03                           
0AC03                           ; Page 6
0AC03                           +	distTo + ; $03 (1 enemy)
0AC03 00                        	.db (+ - $)
0AC04                           	enemy $C, $1, Enemy_Flurry
0AC04 29 00                     	.db Enemy_Flurry, $C << 4 | $1
0AC06                           
0AC06                           ; Page 7
0AC06                           +	distTo + ; $01 (0 enemies)
0AC06 00                        	.db (+ - $)
0AC07                           
0AC07                           ; Page 8
0AC07                           +	distTo + ; $01 (0 enemies)
0AC07 00                        	.db (+ - $)
0AC08                           
0AC08                           ; Page 9
0AC08                           +	distTo + ; $01 (0 enemies)
0AC08 00                        	.db (+ - $)
0AC09                           
0AC09                           ; Page A
0AC09                           +	distTo + ; $01 (0 enemies)
0AC09 00                        	.db (+ - $)
0AC0A                           
0AC0A                           ; End of enemy data
0AC0A                           +
0AC0A                           include "src/levels/4/4-3/4-3-area4-enemies.asm"
0AC0A                           ; Level 4-3, Area 4
0AC0A                           
0AC0A                           EnemyData_Level_4_3_Area4:
0AC0A                           
0AC0A                           ; Page 0
0AC0A                           	distTo + ; $01 (0 enemies)
0AC0A 00                        	.db (+ - $)
0AC0B                           
0AC0B                           ; Page 1
0AC0B                           +	distTo + ; $01 (0 enemies)
0AC0B 00                        	.db (+ - $)
0AC0C                           
0AC0C                           ; Page 2
0AC0C                           +	distTo + ; $01 (0 enemies)
0AC0C 00                        	.db (+ - $)
0AC0D                           
0AC0D                           ; Page 3
0AC0D                           +	distTo + ; $01 (0 enemies)
0AC0D 00                        	.db (+ - $)
0AC0E                           
0AC0E                           ; Page 4
0AC0E                           +	distTo + ; $01 (0 enemies)
0AC0E 00                        	.db (+ - $)
0AC0F                           
0AC0F                           ; Page 5
0AC0F                           +	distTo + ; $01 (0 enemies)
0AC0F 00                        	.db (+ - $)
0AC10                           
0AC10                           ; Page 6
0AC10                           +	distTo + ; $01 (0 enemies)
0AC10 00                        	.db (+ - $)
0AC11                           
0AC11                           ; Page 7
0AC11                           +	distTo + ; $01 (0 enemies)
0AC11 00                        	.db (+ - $)
0AC12                           
0AC12                           ; Page 8
0AC12                           +	distTo + ; $01 (0 enemies)
0AC12 00                        	.db (+ - $)
0AC13                           
0AC13                           ; Page 9
0AC13                           +	distTo + ; $01 (0 enemies)
0AC13 00                        	.db (+ - $)
0AC14                           
0AC14                           ; Page A
0AC14                           +	distTo + ; $01 (0 enemies)
0AC14 00                        	.db (+ - $)
0AC15                           
0AC15                           ; End of enemy data
0AC15                           +
0AC15                           include "src/levels/4/4-3/4-3-area5-enemies.asm"
0AC15                           ; Level 4-3, Area 5
0AC15                           
0AC15                           EnemyData_Level_4_3_Area5:
0AC15                           
0AC15                           ; Page 0
0AC15                           	distTo + ; $09 (4 enemies)
0AC15 00                        	.db (+ - $)
0AC16                           	enemy $7, $2, Enemy_Phanto
0AC16 17 00                     	.db Enemy_Phanto, $7 << 4 | $2
0AC18                           	enemy $7, $4, Enemy_Key
0AC18 3D 00                     	.db Enemy_Key, $7 << 4 | $4
0AC1A                           	enemy $5, $7, Enemy_Flurry
0AC1A 29 00                     	.db Enemy_Flurry, $5 << 4 | $7
0AC1C                           	enemy $9, $7, Enemy_Flurry
0AC1C 29 00                     	.db Enemy_Flurry, $9 << 4 | $7
0AC1E                           
0AC1E                           ; Page 1
0AC1E                           +	distTo + ; $01 (0 enemies)
0AC1E 00                        	.db (+ - $)
0AC1F                           
0AC1F                           ; Page 2
0AC1F                           +	distTo + ; $01 (0 enemies)
0AC1F 00                        	.db (+ - $)
0AC20                           
0AC20                           ; Page 3
0AC20                           +	distTo + ; $01 (0 enemies)
0AC20 00                        	.db (+ - $)
0AC21                           
0AC21                           ; Page 4
0AC21                           +	distTo + ; $01 (0 enemies)
0AC21 00                        	.db (+ - $)
0AC22                           
0AC22                           ; Page 5
0AC22                           +	distTo + ; $01 (0 enemies)
0AC22 00                        	.db (+ - $)
0AC23                           
0AC23                           ; Page 6
0AC23                           +	distTo + ; $01 (0 enemies)
0AC23 00                        	.db (+ - $)
0AC24                           
0AC24                           ; Page 7
0AC24                           +	distTo + ; $01 (0 enemies)
0AC24 00                        	.db (+ - $)
0AC25                           
0AC25                           ; Page 8
0AC25                           +	distTo + ; $01 (0 enemies)
0AC25 00                        	.db (+ - $)
0AC26                           
0AC26                           ; Page 9
0AC26                           +	distTo + ; $01 (0 enemies)
0AC26 00                        	.db (+ - $)
0AC27                           
0AC27                           ; Page A
0AC27                           +	distTo + ; $01 (0 enemies)
0AC27 00                        	.db (+ - $)
0AC28                           
0AC28                           ; End of enemy data
0AC28                           +
0AC28                           include "src/levels/4/4-3/4-3-area6-enemies.asm"
0AC28                           ; Level 4-3, Area 6
0AC28                           
0AC28                           EnemyData_Level_4_3_Area6:
0AC28                           
0AC28                           ; Page 0
0AC28                           	distTo + ; $05 (2 enemies)
0AC28 00                        	.db (+ - $)
0AC29                           	enemy $6, $5, Enemy_Flurry
0AC29 29 00                     	.db Enemy_Flurry, $6 << 4 | $5
0AC2B                           	enemy $9, $5, Enemy_Flurry
0AC2B 29 00                     	.db Enemy_Flurry, $9 << 4 | $5
0AC2D                           
0AC2D                           ; Page 1
0AC2D                           +	distTo + ; $05 (2 enemies)
0AC2D 00                        	.db (+ - $)
0AC2E                           	enemy $2, $A, Enemy_CrystalBall
0AC2E 44 00                     	.db Enemy_CrystalBall, $2 << 4 | $A
0AC30                           	enemy $8, $7, Enemy_HawkmouthLeft
0AC30 43 00                     	.db Enemy_HawkmouthLeft, $8 << 4 | $7
0AC32                           
0AC32                           ; Page 2
0AC32                           +	distTo + ; $01 (0 enemies)
0AC32 00                        	.db (+ - $)
0AC33                           
0AC33                           ; Page 3
0AC33                           +	distTo + ; $01 (0 enemies)
0AC33 00                        	.db (+ - $)
0AC34                           
0AC34                           ; Page 4
0AC34                           +	distTo + ; $01 (0 enemies)
0AC34 00                        	.db (+ - $)
0AC35                           
0AC35                           ; Page 5
0AC35                           +	distTo + ; $01 (0 enemies)
0AC35 00                        	.db (+ - $)
0AC36                           
0AC36                           ; Page 6
0AC36                           +	distTo + ; $01 (0 enemies)
0AC36 00                        	.db (+ - $)
0AC37                           
0AC37                           ; Page 7
0AC37                           +	distTo + ; $01 (0 enemies)
0AC37 00                        	.db (+ - $)
0AC38                           
0AC38                           ; Page 8
0AC38                           +	distTo + ; $01 (0 enemies)
0AC38 00                        	.db (+ - $)
0AC39                           
0AC39                           ; Page 9
0AC39                           +	distTo + ; $01 (0 enemies)
0AC39 00                        	.db (+ - $)
0AC3A                           
0AC3A                           ; Page A
0AC3A                           +	distTo + ; $01 (0 enemies)
0AC3A 00                        	.db (+ - $)
0AC3B                           
0AC3B                           ; End of enemy data
0AC3B                           +
0AC3B                           include "src/levels/4/4-3/4-3-area7-enemies.asm"
0AC3B                           ; Level 4-3, Area 7
0AC3B                           
0AC3B                           EnemyData_Level_4_3_Area7:
0AC3B                           
0AC3B                           ; Page 0
0AC3B                           	distTo + ; $03 (1 enemy)
0AC3B 00                        	.db (+ - $)
0AC3C                           	enemy $2, $4, Enemy_BossFryguy
0AC3C 6A 00                     	.db Enemy_BossFryguy, $2 << 4 | $4
0AC3E                           
0AC3E                           ; Page 1
0AC3E                           +	distTo + ; $01 (0 enemies)
0AC3E 00                        	.db (+ - $)
0AC3F                           
0AC3F                           ; Page 2
0AC3F                           +	distTo + ; $01 (0 enemies)
0AC3F 00                        	.db (+ - $)
0AC40                           
0AC40                           ; Page 3
0AC40                           +	distTo + ; $01 (0 enemies)
0AC40 00                        	.db (+ - $)
0AC41                           
0AC41                           ; Page 4
0AC41                           +	distTo + ; $01 (0 enemies)
0AC41 00                        	.db (+ - $)
0AC42                           
0AC42                           ; Page 5
0AC42                           +	distTo + ; $01 (0 enemies)
0AC42 00                        	.db (+ - $)
0AC43                           
0AC43                           ; Page 6
0AC43                           +	distTo + ; $01 (0 enemies)
0AC43 00                        	.db (+ - $)
0AC44                           
0AC44                           ; Page 7
0AC44                           +	distTo + ; $01 (0 enemies)
0AC44 00                        	.db (+ - $)
0AC45                           
0AC45                           ; Page 8
0AC45                           +	distTo + ; $01 (0 enemies)
0AC45 00                        	.db (+ - $)
0AC46                           
0AC46                           ; Page 9
0AC46                           +	distTo + ; $01 (0 enemies)
0AC46 00                        	.db (+ - $)
0AC47                           
0AC47                           ; Page A
0AC47                           +	distTo + ; $01 (0 enemies)
0AC47 00                        	.db (+ - $)
0AC48                           
0AC48                           ; End of enemy data
0AC48                           +
0AC48                           include "src/levels/4/4-3/4-3-area8-enemies.asm"
0AC48                           ; Level 4-3, Area 8
0AC48                           
0AC48                           EnemyData_Level_4_3_Area8:
0AC48                           
0AC48                           ; Page 0
0AC48                           	distTo + ; $01 (0 enemies)
0AC48 00                        	.db (+ - $)
0AC49                           
0AC49                           ; Page 1
0AC49                           +	distTo + ; $01 (0 enemies)
0AC49 00                        	.db (+ - $)
0AC4A                           
0AC4A                           ; Page 2
0AC4A                           +	distTo + ; $01 (0 enemies)
0AC4A 00                        	.db (+ - $)
0AC4B                           
0AC4B                           ; Page 3
0AC4B                           +	distTo + ; $01 (0 enemies)
0AC4B 00                        	.db (+ - $)
0AC4C                           
0AC4C                           ; Page 4
0AC4C                           +	distTo + ; $01 (0 enemies)
0AC4C 00                        	.db (+ - $)
0AC4D                           
0AC4D                           ; Page 5
0AC4D                           +	distTo + ; $01 (0 enemies)
0AC4D 00                        	.db (+ - $)
0AC4E                           
0AC4E                           ; Page 6
0AC4E                           +	distTo + ; $01 (0 enemies)
0AC4E 00                        	.db (+ - $)
0AC4F                           
0AC4F                           ; Page 7
0AC4F                           +	distTo + ; $01 (0 enemies)
0AC4F 00                        	.db (+ - $)
0AC50                           
0AC50                           ; Page 8
0AC50                           +	distTo + ; $01 (0 enemies)
0AC50 00                        	.db (+ - $)
0AC51                           
0AC51                           ; Page 9
0AC51                           +	distTo + ; $01 (0 enemies)
0AC51 00                        	.db (+ - $)
0AC52                           
0AC52                           ; Page A
0AC52                           +	distTo + ; $01 (0 enemies)
0AC52 00                        	.db (+ - $)
0AC53                           
0AC53                           ; End of enemy data
0AC53                           +
0AC53                           include "src/levels/4/4-3/4-3-area9-enemies.asm"
0AC53                           ; Level 4-3, Area 9
0AC53                           
0AC53                           EnemyData_Level_4_3_Area9:
0AC53                           
0AC53                           ; Page 0
0AC53                           	distTo + ; $01 (0 enemies)
0AC53 00                        	.db (+ - $)
0AC54                           
0AC54                           ; Page 1
0AC54                           +	distTo + ; $01 (0 enemies)
0AC54 00                        	.db (+ - $)
0AC55                           
0AC55                           ; Page 2
0AC55                           +	distTo + ; $01 (0 enemies)
0AC55 00                        	.db (+ - $)
0AC56                           
0AC56                           ; Page 3
0AC56                           +	distTo + ; $01 (0 enemies)
0AC56 00                        	.db (+ - $)
0AC57                           
0AC57                           ; Page 4
0AC57                           +	distTo + ; $01 (0 enemies)
0AC57 00                        	.db (+ - $)
0AC58                           
0AC58                           ; Page 5
0AC58                           +	distTo + ; $01 (0 enemies)
0AC58 00                        	.db (+ - $)
0AC59                           
0AC59                           ; Page 6
0AC59                           +	distTo + ; $01 (0 enemies)
0AC59 00                        	.db (+ - $)
0AC5A                           
0AC5A                           ; Page 7
0AC5A                           +	distTo + ; $01 (0 enemies)
0AC5A 00                        	.db (+ - $)
0AC5B                           
0AC5B                           ; Page 8
0AC5B                           +	distTo + ; $01 (0 enemies)
0AC5B 00                        	.db (+ - $)
0AC5C                           
0AC5C                           ; Page 9
0AC5C                           +	distTo + ; $01 (0 enemies)
0AC5C 00                        	.db (+ - $)
0AC5D                           
0AC5D                           ; Page A
0AC5D                           +	distTo + ; $01 (0 enemies)
0AC5D 00                        	.db (+ - $)
0AC5E                           
0AC5E                           ; End of enemy data
0AC5E                           +
0AC5E                           ; -------------------------------
0AC5E                           
0AC5E                           
0AC5E                           ; -------------------------------
0AC5E                           ; World 5
0AC5E                           
0AC5E                           ; World 5-1
0AC5E                           include "src/levels/5/5-1/5-1-area0-enemies.asm"
0AC5E                           ; Level 5-1, Area 0
0AC5E                           
0AC5E                           EnemyData_Level_5_1_Area0:
0AC5E                           
0AC5E                           ; Page 0
0AC5E                           	distTo + ; $03 (1 enemy)
0AC5E 00                        	.db (+ - $)
0AC5F                           	enemy $3, $1, Enemy_HawkmouthRight
0AC5F 42 00                     	.db Enemy_HawkmouthRight, $3 << 4 | $1
0AC61                           
0AC61                           ; Page 1
0AC61                           +	distTo + ; $03 (1 enemy)
0AC61 00                        	.db (+ - $)
0AC62                           	enemy $4, $5, Enemy_Ostro
0AC62 08 00                     	.db Enemy_Ostro, $4 << 4 | $5
0AC64                           
0AC64                           ; Page 2
0AC64                           +	distTo + ; $03 (1 enemy)
0AC64 00                        	.db (+ - $)
0AC65                           	enemy $5, $6, Enemy_PanserStationaryFiresAngled
0AC65 23 00                     	.db Enemy_PanserStationaryFiresAngled, $5 << 4 | $6
0AC67                           
0AC67                           ; Page 3
0AC67                           +	distTo + ; $01 (0 enemies)
0AC67 00                        	.db (+ - $)
0AC68                           
0AC68                           ; End of enemy data
0AC68                           +
0AC68                           include "src/levels/5/5-1/5-1-area1-enemies.asm"
0AC68                           ; Level 5-1, Area 1
0AC68                           
0AC68                           EnemyData_Level_5_1_Area1:
0AC68                           
0AC68                           ; Page 0
0AC68                           	distTo + ; $01 (0 enemies)
0AC68 00                        	.db (+ - $)
0AC69                           
0AC69                           ; Page 1
0AC69                           +	distTo + ; $03 (1 enemy)
0AC69 00                        	.db (+ - $)
0AC6A                           	enemy $E, $4, Enemy_FallingLogs
0AC6A 3B 00                     	.db Enemy_FallingLogs, $E << 4 | $4
0AC6C                           
0AC6C                           ; Page 2
0AC6C                           +	distTo + ; $09 (4 enemies)
0AC6C 00                        	.db (+ - $)
0AC6D                           	enemy $3, $4, Enemy_FallingLogs
0AC6D 3B 00                     	.db Enemy_FallingLogs, $3 << 4 | $4
0AC6F                           	enemy $8, $4, Enemy_FallingLogs
0AC6F 3B 00                     	.db Enemy_FallingLogs, $8 << 4 | $4
0AC71                           	enemy $B, $2, Enemy_Trouter
0AC71 13 00                     	.db Enemy_Trouter, $B << 4 | $2
0AC73                           	enemy $D, $4, Enemy_FallingLogs
0AC73 3B 00                     	.db Enemy_FallingLogs, $D << 4 | $4
0AC75                           
0AC75                           ; Page 3
0AC75                           +	distTo + ; $05 (2 enemies)
0AC75 00                        	.db (+ - $)
0AC76                           	enemy $8, $2, Enemy_Trouter
0AC76 13 00                     	.db Enemy_Trouter, $8 << 4 | $2
0AC78                           	enemy $C, $2, Enemy_Trouter
0AC78 13 00                     	.db Enemy_Trouter, $C << 4 | $2
0AC7A                           
0AC7A                           ; Page 4
0AC7A                           +	distTo + ; $05 (2 enemies)
0AC7A 00                        	.db (+ - $)
0AC7B                           	enemy $0, $2, Enemy_Trouter
0AC7B 13 00                     	.db Enemy_Trouter, $0 << 4 | $2
0AC7D                           	enemy $A, $4, Enemy_FallingLogs
0AC7D 3B 00                     	.db Enemy_FallingLogs, $A << 4 | $4
0AC7F                           
0AC7F                           ; Page 5
0AC7F                           +	distTo + ; $07 (3 enemies)
0AC7F 00                        	.db (+ - $)
0AC80                           	enemy $4, $2, Enemy_Trouter
0AC80 13 00                     	.db Enemy_Trouter, $4 << 4 | $2
0AC82                           	enemy $8, $2, Enemy_Trouter
0AC82 13 00                     	.db Enemy_Trouter, $8 << 4 | $2
0AC84                           	enemy $C, $2, Enemy_Trouter
0AC84 13 00                     	.db Enemy_Trouter, $C << 4 | $2
0AC86                           
0AC86                           ; Page 6
0AC86                           +	distTo + ; $03 (1 enemy)
0AC86 00                        	.db (+ - $)
0AC87                           	enemy $B, $2, Enemy_Trouter
0AC87 13 00                     	.db Enemy_Trouter, $B << 4 | $2
0AC89                           
0AC89                           ; Page 7
0AC89                           +	distTo + ; $05 (2 enemies)
0AC89 00                        	.db (+ - $)
0AC8A                           	enemy $9, $4, Enemy_FallingLogs
0AC8A 3B 00                     	.db Enemy_FallingLogs, $9 << 4 | $4
0AC8C                           	enemy $E, $4, Enemy_FallingLogs
0AC8C 3B 00                     	.db Enemy_FallingLogs, $E << 4 | $4
0AC8E                           
0AC8E                           ; Page 8
0AC8E                           +	distTo + ; $01 (0 enemies)
0AC8E 00                        	.db (+ - $)
0AC8F                           
0AC8F                           ; Page 9
0AC8F                           +	distTo + ; $01 (0 enemies)
0AC8F 00                        	.db (+ - $)
0AC90                           
0AC90                           ; Page A
0AC90                           +	distTo + ; $01 (0 enemies)
0AC90 00                        	.db (+ - $)
0AC91                           
0AC91                           ; End of enemy data
0AC91                           +
0AC91                           include "src/levels/5/5-1/5-1-area2-enemies.asm"
0AC91                           ; Level 5-1, Area 2
0AC91                           
0AC91                           EnemyData_Level_5_1_Area2:
0AC91                           
0AC91                           ; Page 0
0AC91                           	distTo + ; $05 (2 enemies)
0AC91 00                        	.db (+ - $)
0AC92                           	enemy $C, $4, Enemy_Birdo
0AC92 1C 00                     	.db Enemy_Birdo, $C << 4 | $4
0AC94                           	enemy $C, $5, Enemy_CrystalBall
0AC94 44 00                     	.db Enemy_CrystalBall, $C << 4 | $5
0AC96                           
0AC96                           ; Page 1
0AC96                           +	distTo + ; $03 (1 enemy)
0AC96 00                        	.db (+ - $)
0AC97                           	enemy $C, $A, Enemy_HawkmouthLeft
0AC97 43 00                     	.db Enemy_HawkmouthLeft, $C << 4 | $A
0AC99                           
0AC99                           ; Page 2
0AC99                           +	distTo + ; $01 (0 enemies)
0AC99 00                        	.db (+ - $)
0AC9A                           
0AC9A                           ; End of enemy data
0AC9A                           +
0AC9A                           
0AC9A                           ; World 5-2
0AC9A                           include "src/levels/5/5-2/5-2-area0-enemies.asm"
0AC9A                           ; Level 5-2, Area 0
0AC9A                           
0AC9A                           EnemyData_Level_5_2_Area0:
0AC9A                           
0AC9A                           ; Page 0
0AC9A                           	distTo + ; $03 (1 enemy)
0AC9A 00                        	.db (+ - $)
0AC9B                           	enemy $2, $A, Enemy_HawkmouthRight
0AC9B 42 00                     	.db Enemy_HawkmouthRight, $2 << 4 | $A
0AC9D                           
0AC9D                           ; Page 1
0AC9D                           +	distTo + ; $01 (0 enemies)
0AC9D 00                        	.db (+ - $)
0AC9E                           
0AC9E                           ; Page 2
0AC9E                           +	distTo + ; $01 (0 enemies)
0AC9E 00                        	.db (+ - $)
0AC9F                           
0AC9F                           ; End of enemy data
0AC9F                           +
0AC9F                           include "src/levels/5/5-2/5-2-area1-enemies.asm"
0AC9F                           ; Level 5-2, Area 1
0AC9F                           
0AC9F                           EnemyData_Level_5_2_Area1:
0AC9F                           
0AC9F                           ; Page 0
0AC9F                           	distTo + ; $01 (0 enemies)
0AC9F 00                        	.db (+ - $)
0ACA0                           
0ACA0                           ; Page 1
0ACA0                           +	distTo + ; $07 (3 enemies)
0ACA0 00                        	.db (+ - $)
0ACA1                           	enemy $7, $8, Enemy_Hoopstar
0ACA1 14 00                     	.db Enemy_Hoopstar, $7 << 4 | $8
0ACA3                           	enemy $9, $6, Enemy_Hoopstar
0ACA3 14 00                     	.db Enemy_Hoopstar, $9 << 4 | $6
0ACA5                           	enemy $B, $8, Enemy_Hoopstar
0ACA5 14 00                     	.db Enemy_Hoopstar, $B << 4 | $8
0ACA7                           
0ACA7                           ; Page 2
0ACA7                           +	distTo + ; $09 (4 enemies)
0ACA7 00                        	.db (+ - $)
0ACA8                           	enemy $2, $9, Enemy_Ostro
0ACA8 08 00                     	.db Enemy_Ostro, $2 << 4 | $9
0ACAA                           	enemy $D, $6, Enemy_Hoopstar
0ACAA 14 00                     	.db Enemy_Hoopstar, $D << 4 | $6
0ACAC                           	enemy $E, $6, Enemy_Hoopstar
0ACAC 14 00                     	.db Enemy_Hoopstar, $E << 4 | $6
0ACAE                           	enemy $F, $6, Enemy_Hoopstar
0ACAE 14 00                     	.db Enemy_Hoopstar, $F << 4 | $6
0ACB0                           
0ACB0                           ; Page 3
0ACB0                           +	distTo + ; $01 (0 enemies)
0ACB0 00                        	.db (+ - $)
0ACB1                           
0ACB1                           ; Page 4
0ACB1                           +	distTo + ; $09 (4 enemies)
0ACB1 00                        	.db (+ - $)
0ACB2                           	enemy $8, $C, Enemy_Porcupo
0ACB2 04 00                     	.db Enemy_Porcupo, $8 << 4 | $C
0ACB4                           	enemy $9, $C, Enemy_Porcupo
0ACB4 04 00                     	.db Enemy_Porcupo, $9 << 4 | $C
0ACB6                           	enemy $A, $B, Enemy_Ostro
0ACB6 08 00                     	.db Enemy_Ostro, $A << 4 | $B
0ACB8                           	enemy $B, $C, Enemy_Porcupo
0ACB8 04 00                     	.db Enemy_Porcupo, $B << 4 | $C
0ACBA                           
0ACBA                           ; Page 5
0ACBA                           +	distTo + ; $05 (2 enemies)
0ACBA 00                        	.db (+ - $)
0ACBB                           	enemy $8, $9, Enemy_Hoopstar
0ACBB 14 00                     	.db Enemy_Hoopstar, $8 << 4 | $9
0ACBD                           	enemy $B, $9, Enemy_Hoopstar
0ACBD 14 00                     	.db Enemy_Hoopstar, $B << 4 | $9
0ACBF                           
0ACBF                           ; Page 6
0ACBF                           +	distTo + ; $05 (2 enemies)
0ACBF 00                        	.db (+ - $)
0ACC0                           	enemy $5, $5, Enemy_Hoopstar
0ACC0 14 00                     	.db Enemy_Hoopstar, $5 << 4 | $5
0ACC2                           	enemy $9, $5, Enemy_Hoopstar
0ACC2 14 00                     	.db Enemy_Hoopstar, $9 << 4 | $5
0ACC4                           
0ACC4                           ; Page 7
0ACC4                           +	distTo + ; $07 (3 enemies)
0ACC4 00                        	.db (+ - $)
0ACC5                           	enemy $1, $7, Enemy_Hoopstar
0ACC5 14 00                     	.db Enemy_Hoopstar, $1 << 4 | $7
0ACC7                           	enemy $3, $8, Enemy_PanserStationaryFiresUp
0ACC7 25 00                     	.db Enemy_PanserStationaryFiresUp, $3 << 4 | $8
0ACC9                           	enemy $5, $7, Enemy_Hoopstar
0ACC9 14 00                     	.db Enemy_Hoopstar, $5 << 4 | $7
0ACCB                           
0ACCB                           ; Page 8
0ACCB                           +	distTo + ; $05 (2 enemies)
0ACCB 00                        	.db (+ - $)
0ACCC                           	enemy $2, $6, Enemy_NinjiRunning
0ACCC 0D 00                     	.db Enemy_NinjiRunning, $2 << 4 | $6
0ACCE                           	enemy $4, $6, Enemy_NinjiRunning
0ACCE 0D 00                     	.db Enemy_NinjiRunning, $4 << 4 | $6
0ACD0                           
0ACD0                           ; Page 9
0ACD0                           +	distTo + ; $05 (2 enemies)
0ACD0 00                        	.db (+ - $)
0ACD1                           	enemy $6, $A, Enemy_Porcupo
0ACD1 04 00                     	.db Enemy_Porcupo, $6 << 4 | $A
0ACD3                           	enemy $9, $9, Enemy_Ostro
0ACD3 08 00                     	.db Enemy_Ostro, $9 << 4 | $9
0ACD5                           
0ACD5                           ; Page A
0ACD5                           +	distTo + ; $01 (0 enemies)
0ACD5 00                        	.db (+ - $)
0ACD6                           
0ACD6                           ; End of enemy data
0ACD6                           +
0ACD6                           include "src/levels/5/5-2/5-2-area2-enemies.asm"
0ACD6                           ; Level 5-2, Area 2
0ACD6                           
0ACD6                           EnemyData_Level_5_2_Area2:
0ACD6                           
0ACD6                           ; Page 0
0ACD6                           	distTo + ; $03 (1 enemy)
0ACD6 00                        	.db (+ - $)
0ACD7                           	enemy $8, $B, Enemy_Hoopstar
0ACD7 14 00                     	.db Enemy_Hoopstar, $8 << 4 | $B
0ACD9                           
0ACD9                           ; Page 1
0ACD9                           +	distTo + ; $09 (4 enemies)
0ACD9 00                        	.db (+ - $)
0ACDA                           	enemy $F, $2, Enemy_BeezoStraight
0ACDA 10 00                     	.db Enemy_BeezoStraight, $F << 4 | $2
0ACDC                           	enemy $6, $8, Enemy_Hoopstar
0ACDC 14 00                     	.db Enemy_Hoopstar, $6 << 4 | $8
0ACDE                           	enemy $8, $E, Enemy_Hoopstar
0ACDE 14 00                     	.db Enemy_Hoopstar, $8 << 4 | $E
0ACE0                           	enemy $D, $E, Enemy_SnifitGray
0ACE0 06 00                     	.db Enemy_SnifitGray, $D << 4 | $E
0ACE2                           
0ACE2                           ; Page 2
0ACE2                           +	distTo + ; $0B (5 enemies)
0ACE2 00                        	.db (+ - $)
0ACE3                           	enemy $0, $2, Enemy_BeezoStraight
0ACE3 10 00                     	.db Enemy_BeezoStraight, $0 << 4 | $2
0ACE5                           	enemy $C, $5, Enemy_SnifitGray
0ACE5 06 00                     	.db Enemy_SnifitGray, $C << 4 | $5
0ACE7                           	enemy $3, $6, Enemy_SnifitGray
0ACE7 06 00                     	.db Enemy_SnifitGray, $3 << 4 | $6
0ACE9                           	enemy $8, $E, Enemy_BeezoStraight
0ACE9 10 00                     	.db Enemy_BeezoStraight, $8 << 4 | $E
0ACEB                           	enemy $D, $E, Enemy_BeezoStraight
0ACEB 10 00                     	.db Enemy_BeezoStraight, $D << 4 | $E
0ACED                           
0ACED                           ; Page 3
0ACED                           +	distTo + ; $01 (0 enemies)
0ACED 00                        	.db (+ - $)
0ACEE                           
0ACEE                           ; Page 4
0ACEE                           +	distTo + ; $01 (0 enemies)
0ACEE 00                        	.db (+ - $)
0ACEF                           
0ACEF                           ; End of enemy data
0ACEF                           +
0ACEF                           include "src/levels/5/5-2/5-2-area3-enemies.asm"
0ACEF                           ; Level 5-2, Area 3
0ACEF                           
0ACEF                           EnemyData_Level_5_2_Area3:
0ACEF                           
0ACEF                           ; Page 0
0ACEF                           	distTo + ; $01 (0 enemies)
0ACEF 00                        	.db (+ - $)
0ACF0                           
0ACF0                           ; Page 1
0ACF0                           +	distTo + ; $01 (0 enemies)
0ACF0 00                        	.db (+ - $)
0ACF1                           
0ACF1                           ; Page 2
0ACF1                           +	distTo + ; $01 (0 enemies)
0ACF1 00                        	.db (+ - $)
0ACF2                           
0ACF2                           ; Page 3
0ACF2                           +	distTo + ; $01 (0 enemies)
0ACF2 00                        	.db (+ - $)
0ACF3                           
0ACF3                           ; Page 4
0ACF3                           +	distTo + ; $01 (0 enemies)
0ACF3 00                        	.db (+ - $)
0ACF4                           
0ACF4                           ; Page 5
0ACF4                           +	distTo + ; $01 (0 enemies)
0ACF4 00                        	.db (+ - $)
0ACF5                           
0ACF5                           ; Page 6
0ACF5                           +	distTo + ; $05 (2 enemies)
0ACF5 00                        	.db (+ - $)
0ACF6                           	enemy $5, $5, Enemy_Trouter
0ACF6 13 00                     	.db Enemy_Trouter, $5 << 4 | $5
0ACF8                           	enemy $8, $5, Enemy_Trouter
0ACF8 13 00                     	.db Enemy_Trouter, $8 << 4 | $5
0ACFA                           
0ACFA                           ; Page 7
0ACFA                           +	distTo + ; $01 (0 enemies)
0ACFA 00                        	.db (+ - $)
0ACFB                           
0ACFB                           ; End of enemy data
0ACFB                           +
0ACFB                           include "src/levels/5/5-2/5-2-area4-enemies.asm"
0ACFB                           ; Level 5-2, Area 4
0ACFB                           
0ACFB                           EnemyData_Level_5_2_Area4:
0ACFB                           
0ACFB                           ; Page 0
0ACFB                           	distTo + ; $03 (1 enemy)
0ACFB 00                        	.db (+ - $)
0ACFC                           	enemy $2, $B, Enemy_ShyguyRed
0ACFC 01 00                     	.db Enemy_ShyguyRed, $2 << 4 | $B
0ACFE                           
0ACFE                           ; Page 1
0ACFE                           +	distTo + ; $05 (2 enemies)
0ACFE 00                        	.db (+ - $)
0ACFF                           	enemy $2, $4, Enemy_Porcupo
0ACFF 04 00                     	.db Enemy_Porcupo, $2 << 4 | $4
0AD01                           	enemy $B, $4, Enemy_Porcupo
0AD01 04 00                     	.db Enemy_Porcupo, $B << 4 | $4
0AD03                           
0AD03                           ; Page 2
0AD03                           +	distTo + ; $01 (0 enemies)
0AD03 00                        	.db (+ - $)
0AD04                           
0AD04                           ; End of enemy data
0AD04                           +
0AD04                           include "src/levels/5/5-2/5-2-area5-enemies.asm"
0AD04                           ; Level 5-2, Area 5
0AD04                           
0AD04                           EnemyData_Level_5_2_Area5:
0AD04                           
0AD04                           ; Page 0
0AD04                           	distTo + ; $01 (0 enemies)
0AD04 00                        	.db (+ - $)
0AD05                           
0AD05                           ; Page 1
0AD05                           +	distTo + ; $07 (3 enemies)
0AD05 00                        	.db (+ - $)
0AD06                           	enemy $7, $3, Enemy_Trouter
0AD06 13 00                     	.db Enemy_Trouter, $7 << 4 | $3
0AD08                           	enemy $B, $8, Enemy_Birdo
0AD08 1C 00                     	.db Enemy_Birdo, $B << 4 | $8
0AD0A                           	enemy $B, $9, Enemy_CrystalBall
0AD0A 44 00                     	.db Enemy_CrystalBall, $B << 4 | $9
0AD0C                           
0AD0C                           ; Page 2
0AD0C                           +	distTo + ; $03 (1 enemy)
0AD0C 00                        	.db (+ - $)
0AD0D                           	enemy $B, $4, Enemy_HawkmouthLeft
0AD0D 43 00                     	.db Enemy_HawkmouthLeft, $B << 4 | $4
0AD0F                           
0AD0F                           ; Page 3
0AD0F                           +	distTo + ; $01 (0 enemies)
0AD0F 00                        	.db (+ - $)
0AD10                           
0AD10                           ; End of enemy data
0AD10                           +
0AD10                           
0AD10                           ; World 5-3
0AD10                           include "src/levels/5/5-3/5-3-area0-enemies.asm"
0AD10                           ; Level 5-3, Area 0
0AD10                           
0AD10                           EnemyData_Level_5_3_Area0:
0AD10                           
0AD10                           ; Page 0
0AD10                           	distTo + ; $03 (1 enemy)
0AD10 00                        	.db (+ - $)
0AD11                           	enemy $3, $A, Enemy_HawkmouthRight
0AD11 42 00                     	.db Enemy_HawkmouthRight, $3 << 4 | $A
0AD13                           
0AD13                           ; Page 1
0AD13                           +	distTo + ; $01 (0 enemies)
0AD13 00                        	.db (+ - $)
0AD14                           
0AD14                           ; Page 2
0AD14                           +	distTo + ; $01 (0 enemies)
0AD14 00                        	.db (+ - $)
0AD15                           
0AD15                           ; End of enemy data
0AD15                           +
0AD15                           include "src/levels/5/5-3/5-3-area1-enemies.asm"
0AD15                           ; Level 5-3, Area 1
0AD15                           
0AD15                           EnemyData_Level_5_3_Area1:
0AD15                           
0AD15                           ; Page 0
0AD15                           	distTo + ; $03 (1 enemy)
0AD15 00                        	.db (+ - $)
0AD16                           	enemy $8, $0, Enemy_StopAttack
0AD16 49 00                     	.db Enemy_StopAttack, $8 << 4 | $0
0AD18                           
0AD18                           ; Page 1
0AD18                           +	distTo + ; $01 (0 enemies)
0AD18 00                        	.db (+ - $)
0AD19                           
0AD19                           ; Page 2
0AD19                           +	distTo + ; $03 (1 enemy)
0AD19 00                        	.db (+ - $)
0AD1A                           	enemy $0, $0, Enemy_AttackAlbatossCarryingBobOmb
0AD1A 47 00                     	.db Enemy_AttackAlbatossCarryingBobOmb, $0 << 4 | $0
0AD1C                           
0AD1C                           ; Page 3
0AD1C                           +	distTo + ; $01 (0 enemies)
0AD1C 00                        	.db (+ - $)
0AD1D                           
0AD1D                           ; Page 4
0AD1D                           +	distTo + ; $03 (1 enemy)
0AD1D 00                        	.db (+ - $)
0AD1E                           	enemy $4, $0, Enemy_AttackAlbatossCarryingBobOmb
0AD1E 47 00                     	.db Enemy_AttackAlbatossCarryingBobOmb, $4 << 4 | $0
0AD20                           
0AD20                           ; Page 5
0AD20                           +	distTo + ; $03 (1 enemy)
0AD20 00                        	.db (+ - $)
0AD21                           	enemy $C, $0, Enemy_StopAttack
0AD21 49 00                     	.db Enemy_StopAttack, $C << 4 | $0
0AD23                           
0AD23                           ; Page 6
0AD23                           +	distTo + ; $03 (1 enemy)
0AD23 00                        	.db (+ - $)
0AD24                           	enemy $C, $0, Enemy_StopAttack
0AD24 49 00                     	.db Enemy_StopAttack, $C << 4 | $0
0AD26                           
0AD26                           ; Page 7
0AD26                           +	distTo + ; $07 (3 enemies)
0AD26 00                        	.db (+ - $)
0AD27                           	enemy $2, $C, Enemy_BobOmb
0AD27 09 00                     	.db Enemy_BobOmb, $2 << 4 | $C
0AD29                           	enemy $7, $C, Enemy_BobOmb
0AD29 09 00                     	.db Enemy_BobOmb, $7 << 4 | $C
0AD2B                           	enemy $A, $C, Enemy_BobOmb
0AD2B 09 00                     	.db Enemy_BobOmb, $A << 4 | $C
0AD2D                           
0AD2D                           ; Page 8
0AD2D                           +	distTo + ; $01 (0 enemies)
0AD2D 00                        	.db (+ - $)
0AD2E                           
0AD2E                           ; Page 9
0AD2E                           +	distTo + ; $05 (2 enemies)
0AD2E 00                        	.db (+ - $)
0AD2F                           	enemy $5, $8, Enemy_BobOmb
0AD2F 09 00                     	.db Enemy_BobOmb, $5 << 4 | $8
0AD31                           	enemy $7, $8, Enemy_BobOmb
0AD31 09 00                     	.db Enemy_BobOmb, $7 << 4 | $8
0AD33                           
0AD33                           ; Page A
0AD33                           +	distTo + ; $01 (0 enemies)
0AD33 00                        	.db (+ - $)
0AD34                           
0AD34                           ; End of enemy data
0AD34                           +
0AD34                           include "src/levels/5/5-3/5-3-area2-enemies.asm"
0AD34                           ; Level 5-3, Area 2
0AD34                           
0AD34                           EnemyData_Level_5_3_Area2:
0AD34                           
0AD34                           ; Page 0
0AD34                           	distTo + ; $01 (0 enemies)
0AD34 00                        	.db (+ - $)
0AD35                           
0AD35                           ; Page 1
0AD35                           +	distTo + ; $05 (2 enemies)
0AD35 00                        	.db (+ - $)
0AD36                           	enemy $3, $6, Enemy_PanserStationaryFiresAngled
0AD36 23 00                     	.db Enemy_PanserStationaryFiresAngled, $3 << 4 | $6
0AD38                           	enemy $C, $6, Enemy_BobOmb
0AD38 09 00                     	.db Enemy_BobOmb, $C << 4 | $6
0AD3A                           
0AD3A                           ; Page 2
0AD3A                           +	distTo + ; $03 (1 enemy)
0AD3A 00                        	.db (+ - $)
0AD3B                           	enemy $3, $6, Enemy_BobOmb
0AD3B 09 00                     	.db Enemy_BobOmb, $3 << 4 | $6
0AD3D                           
0AD3D                           ; Page 3
0AD3D                           +	distTo + ; $05 (2 enemies)
0AD3D 00                        	.db (+ - $)
0AD3E                           	enemy $2, $5, Enemy_BobOmb
0AD3E 09 00                     	.db Enemy_BobOmb, $2 << 4 | $5
0AD40                           	enemy $4, $5, Enemy_BobOmb
0AD40 09 00                     	.db Enemy_BobOmb, $4 << 4 | $5
0AD42                           
0AD42                           ; Page 4
0AD42                           +	distTo + ; $03 (1 enemy)
0AD42 00                        	.db (+ - $)
0AD43                           	enemy $A, $5, Enemy_JarGeneratorBobOmb
0AD43 16 00                     	.db Enemy_JarGeneratorBobOmb, $A << 4 | $5
0AD45                           
0AD45                           ; Page 5
0AD45                           +	distTo + ; $01 (0 enemies)
0AD45 00                        	.db (+ - $)
0AD46                           
0AD46                           ; End of enemy data
0AD46                           +
0AD46                           include "src/levels/5/5-3/5-3-area3-enemies.asm"
0AD46                           ; Level 5-3, Area 3
0AD46                           
0AD46                           EnemyData_Level_5_3_Area3:
0AD46                           
0AD46                           ; Page 0
0AD46                           	distTo + ; $01 (0 enemies)
0AD46 00                        	.db (+ - $)
0AD47                           
0AD47                           ; Page 1
0AD47                           +	distTo + ; $05 (2 enemies)
0AD47 00                        	.db (+ - $)
0AD48                           	enemy $5, $2, Enemy_PanserWalking
0AD48 24 00                     	.db Enemy_PanserWalking, $5 << 4 | $2
0AD4A                           	enemy $3, $D, Enemy_PanserWalking
0AD4A 24 00                     	.db Enemy_PanserWalking, $3 << 4 | $D
0AD4C                           
0AD4C                           ; Page 2
0AD4C                           +	distTo + ; $01 (0 enemies)
0AD4C 00                        	.db (+ - $)
0AD4D                           
0AD4D                           ; Page 3
0AD4D                           +	distTo + ; $09 (4 enemies)
0AD4D 00                        	.db (+ - $)
0AD4E                           	enemy $9, $0, Enemy_BobOmb
0AD4E 09 00                     	.db Enemy_BobOmb, $9 << 4 | $0
0AD50                           	enemy $B, $0, Enemy_BobOmb
0AD50 09 00                     	.db Enemy_BobOmb, $B << 4 | $0
0AD52                           	enemy $D, $5, Enemy_Spark2
0AD52 2F 00                     	.db Enemy_Spark2, $D << 4 | $5
0AD54                           	enemy $4, $F, Enemy_Spark3
0AD54 30 00                     	.db Enemy_Spark3, $4 << 4 | $F
0AD56                           
0AD56                           ; Page 4
0AD56                           +	distTo + ; $05 (2 enemies)
0AD56 00                        	.db (+ - $)
0AD57                           	enemy $8, $2, Enemy_JarGeneratorShyguy
0AD57 15 00                     	.db Enemy_JarGeneratorShyguy, $8 << 4 | $2
0AD59                           	enemy $A, $8, Enemy_Spark2
0AD59 2F 00                     	.db Enemy_Spark2, $A << 4 | $8
0AD5B                           
0AD5B                           ; Page 5
0AD5B                           +	distTo + ; $07 (3 enemies)
0AD5B 00                        	.db (+ - $)
0AD5C                           	enemy $4, $1, Enemy_Spark3
0AD5C 30 00                     	.db Enemy_Spark3, $4 << 4 | $1
0AD5E                           	enemy $8, $4, Enemy_JarGeneratorShyguy
0AD5E 15 00                     	.db Enemy_JarGeneratorShyguy, $8 << 4 | $4
0AD60                           	enemy $8, $A, Enemy_Spark4
0AD60 31 00                     	.db Enemy_Spark4, $8 << 4 | $A
0AD62                           
0AD62                           ; Page 6
0AD62                           +	distTo + ; $01 (0 enemies)
0AD62 00                        	.db (+ - $)
0AD63                           
0AD63                           ; Page 7
0AD63                           +	distTo + ; $01 (0 enemies)
0AD63 00                        	.db (+ - $)
0AD64                           
0AD64                           ; End of enemy data
0AD64                           +
0AD64                           include "src/levels/5/5-3/5-3-area4-enemies.asm"
0AD64                           ; Level 5-3, Area 4
0AD64                           
0AD64                           EnemyData_Level_5_3_Area4:
0AD64                           
0AD64                           ; Page 0
0AD64                           	distTo + ; $01 (0 enemies)
0AD64 00                        	.db (+ - $)
0AD65                           
0AD65                           ; Page 1
0AD65                           +	distTo + ; $01 (0 enemies)
0AD65 00                        	.db (+ - $)
0AD66                           
0AD66                           ; Page 2
0AD66                           +	distTo + ; $05 (2 enemies)
0AD66 00                        	.db (+ - $)
0AD67                           	enemy $6, $7, Enemy_SnifitPink
0AD67 07 00                     	.db Enemy_SnifitPink, $6 << 4 | $7
0AD69                           	enemy $D, $2, Enemy_Pidgit
0AD69 12 00                     	.db Enemy_Pidgit, $D << 4 | $2
0AD6B                           
0AD6B                           ; Page 3
0AD6B                           +	distTo + ; $01 (0 enemies)
0AD6B 00                        	.db (+ - $)
0AD6C                           
0AD6C                           ; Page 4
0AD6C                           +	distTo + ; $03 (1 enemy)
0AD6C 00                        	.db (+ - $)
0AD6D                           	enemy $F, $2, Enemy_Pidgit
0AD6D 12 00                     	.db Enemy_Pidgit, $F << 4 | $2
0AD6F                           
0AD6F                           ; Page 5
0AD6F                           +	distTo + ; $01 (0 enemies)
0AD6F 00                        	.db (+ - $)
0AD70                           
0AD70                           ; Page 6
0AD70                           +	distTo + ; $07 (3 enemies)
0AD70 00                        	.db (+ - $)
0AD71                           	enemy $6, $0, Enemy_BeezoDiving
0AD71 0F 00                     	.db Enemy_BeezoDiving, $6 << 4 | $0
0AD73                           	enemy $9, $2, Enemy_ShyguyPink
0AD73 03 00                     	.db Enemy_ShyguyPink, $9 << 4 | $2
0AD75                           	enemy $A, $6, Enemy_ShyguyPink
0AD75 03 00                     	.db Enemy_ShyguyPink, $A << 4 | $6
0AD77                           
0AD77                           ; Page 7
0AD77                           +	distTo + ; $05 (2 enemies)
0AD77 00                        	.db (+ - $)
0AD78                           	enemy $0, $7, Enemy_ShyguyPink
0AD78 03 00                     	.db Enemy_ShyguyPink, $0 << 4 | $7
0AD7A                           	enemy $5, $5, Enemy_ShyguyPink
0AD7A 03 00                     	.db Enemy_ShyguyPink, $5 << 4 | $5
0AD7C                           
0AD7C                           ; Page 8
0AD7C                           +	distTo + ; $05 (2 enemies)
0AD7C 00                        	.db (+ - $)
0AD7D                           	enemy $B, $7, Enemy_Birdo
0AD7D 1C 00                     	.db Enemy_Birdo, $B << 4 | $7
0AD7F                           	enemy $B, $8, Enemy_CrystalBall
0AD7F 44 00                     	.db Enemy_CrystalBall, $B << 4 | $8
0AD81                           
0AD81                           ; Page 9
0AD81                           +	distTo + ; $03 (1 enemy)
0AD81 00                        	.db (+ - $)
0AD82                           	enemy $B, $5, Enemy_HawkmouthLeft
0AD82 43 00                     	.db Enemy_HawkmouthLeft, $B << 4 | $5
0AD84                           
0AD84                           ; Page A
0AD84                           +	distTo + ; $01 (0 enemies)
0AD84 00                        	.db (+ - $)
0AD85                           
0AD85                           ; End of enemy data
0AD85                           +
0AD85                           include "src/levels/5/5-3/5-3-area5-enemies.asm"
0AD85                           ; Level 5-3, Area 5
0AD85                           
0AD85                           EnemyData_Level_5_3_Area5:
0AD85                           
0AD85                           ; Page 0
0AD85                           	distTo + ; $01 (0 enemies)
0AD85 00                        	.db (+ - $)
0AD86                           
0AD86                           ; Page 1
0AD86                           +	distTo + ; $03 (1 enemy)
0AD86 00                        	.db (+ - $)
0AD87                           	enemy $A, $7, Enemy_BossClawgrip
0AD87 61 00                     	.db Enemy_BossClawgrip, $A << 4 | $7
0AD89                           
0AD89                           ; Page 2
0AD89                           +	distTo + ; $01 (0 enemies)
0AD89 00                        	.db (+ - $)
0AD8A                           
0AD8A                           ; End of enemy data
0AD8A                           +
0AD8A                           ; -------------------------------
0AD8A                           
0AD8A                           
0AD8A                           ; -------------------------------
0AD8A                           ; World 6
0AD8A                           
0AD8A                           ; World 6-1
0AD8A                           include "src/levels/6/6-1/6-1-area0-enemies.asm"
0AD8A                           ; Level 6-1, Area 0
0AD8A                           
0AD8A                           EnemyData_Level_6_1_Area0:
0AD8A                           
0AD8A                           ; Page 0
0AD8A                           	distTo + ; $03 (1 enemy)
0AD8A 00                        	.db (+ - $)
0AD8B                           	enemy $4, $A, Enemy_HawkmouthRight
0AD8B 42 00                     	.db Enemy_HawkmouthRight, $4 << 4 | $A
0AD8D                           
0AD8D                           ; Page 1
0AD8D                           +	distTo + ; $07 (3 enemies)
0AD8D 00                        	.db (+ - $)
0AD8E                           	enemy $1, $D, Enemy_CobratSand
0AD8E 19 00                     	.db Enemy_CobratSand, $1 << 4 | $D
0AD90                           	enemy $A, $B, Enemy_ShyguyPink
0AD90 03 00                     	.db Enemy_ShyguyPink, $A << 4 | $B
0AD92                           	enemy $D, $D, Enemy_CobratSand
0AD92 19 00                     	.db Enemy_CobratSand, $D << 4 | $D
0AD94                           
0AD94                           ; Page 2
0AD94                           +	distTo + ; $03 (1 enemy)
0AD94 00                        	.db (+ - $)
0AD95                           	enemy $5, $A, Enemy_CobratJar
0AD95 18 00                     	.db Enemy_CobratJar, $5 << 4 | $A
0AD97                           
0AD97                           ; Page 3
0AD97                           +	distTo + ; $03 (1 enemy)
0AD97 00                        	.db (+ - $)
0AD98                           	enemy $4, $9, Enemy_Pokey
0AD98 1A 00                     	.db Enemy_Pokey, $4 << 4 | $9
0AD9A                           
0AD9A                           ; Page 4
0AD9A                           +	distTo + ; $07 (3 enemies)
0AD9A 00                        	.db (+ - $)
0AD9B                           	enemy $1, $D, Enemy_CobratSand
0AD9B 19 00                     	.db Enemy_CobratSand, $1 << 4 | $D
0AD9D                           	enemy $5, $D, Enemy_CobratSand
0AD9D 19 00                     	.db Enemy_CobratSand, $5 << 4 | $D
0AD9F                           	enemy $7, $B, Enemy_ShyguyPink
0AD9F 03 00                     	.db Enemy_ShyguyPink, $7 << 4 | $B
0ADA1                           
0ADA1                           ; Page 5
0ADA1                           +	distTo + ; $03 (1 enemy)
0ADA1 00                        	.db (+ - $)
0ADA2                           	enemy $E, $A, Enemy_CobratJar
0ADA2 18 00                     	.db Enemy_CobratJar, $E << 4 | $A
0ADA4                           
0ADA4                           ; Page 6
0ADA4                           +	distTo + ; $07 (3 enemies)
0ADA4 00                        	.db (+ - $)
0ADA5                           	enemy $1, $A, Enemy_CobratJar
0ADA5 18 00                     	.db Enemy_CobratJar, $1 << 4 | $A
0ADA7                           	enemy $A, $D, Enemy_CobratSand
0ADA7 19 00                     	.db Enemy_CobratSand, $A << 4 | $D
0ADA9                           	enemy $B, $D, Enemy_CobratSand
0ADA9 19 00                     	.db Enemy_CobratSand, $B << 4 | $D
0ADAB                           
0ADAB                           ; Page 7
0ADAB                           +	distTo + ; $03 (1 enemy)
0ADAB 00                        	.db (+ - $)
0ADAC                           	enemy $E, $6, Enemy_Pokey
0ADAC 1A 00                     	.db Enemy_Pokey, $E << 4 | $6
0ADAE                           
0ADAE                           ; Page 8
0ADAE                           +	distTo + ; $05 (2 enemies)
0ADAE 00                        	.db (+ - $)
0ADAF                           	enemy $3, $6, Enemy_Pokey
0ADAF 1A 00                     	.db Enemy_Pokey, $3 << 4 | $6
0ADB1                           	enemy $9, $9, Enemy_PanserWalking
0ADB1 24 00                     	.db Enemy_PanserWalking, $9 << 4 | $9
0ADB3                           
0ADB3                           ; Page 9
0ADB3                           +	distTo + ; $01 (0 enemies)
0ADB3 00                        	.db (+ - $)
0ADB4                           
0ADB4                           ; Page A
0ADB4                           +	distTo + ; $01 (0 enemies)
0ADB4 00                        	.db (+ - $)
0ADB5                           
0ADB5                           ; End of enemy data
0ADB5                           +
0ADB5                           include "src/levels/6/6-1/6-1-area1-enemies.asm"
0ADB5                           ; Level 6-1, Area 1
0ADB5                           
0ADB5                           EnemyData_Level_6_1_Area1:
0ADB5                           
0ADB5                           ; Page 0
0ADB5                           	distTo + ; $01 (0 enemies)
0ADB5 00                        	.db (+ - $)
0ADB6                           
0ADB6                           ; Page 1
0ADB6                           +	distTo + ; $07 (3 enemies)
0ADB6 00                        	.db (+ - $)
0ADB7                           	enemy $4, $B, Enemy_CobratJar
0ADB7 18 00                     	.db Enemy_CobratJar, $4 << 4 | $B
0ADB9                           	enemy $9, $A, Enemy_CobratJar
0ADB9 18 00                     	.db Enemy_CobratJar, $9 << 4 | $A
0ADBB                           	enemy $F, $B, Enemy_JarGeneratorShyguy
0ADBB 15 00                     	.db Enemy_JarGeneratorShyguy, $F << 4 | $B
0ADBD                           
0ADBD                           ; Page 2
0ADBD                           +	distTo + ; $05 (2 enemies)
0ADBD 00                        	.db (+ - $)
0ADBE                           	enemy $2, $B, Enemy_CobratJar
0ADBE 18 00                     	.db Enemy_CobratJar, $2 << 4 | $B
0ADC0                           	enemy $7, $B, Enemy_CobratJar
0ADC0 18 00                     	.db Enemy_CobratJar, $7 << 4 | $B
0ADC2                           
0ADC2                           ; Page 3
0ADC2                           +	distTo + ; $01 (0 enemies)
0ADC2 00                        	.db (+ - $)
0ADC3                           
0ADC3                           ; Page 4
0ADC3                           +	distTo + ; $01 (0 enemies)
0ADC3 00                        	.db (+ - $)
0ADC4                           
0ADC4                           ; End of enemy data
0ADC4                           +
0ADC4                           include "src/levels/6/6-1/6-1-area2-enemies.asm"
0ADC4                           ; Level 6-1, Area 2
0ADC4                           
0ADC4                           EnemyData_Level_6_1_Area2:
0ADC4                           
0ADC4                           ; Page 0
0ADC4                           	distTo + ; $01 (0 enemies)
0ADC4 00                        	.db (+ - $)
0ADC5                           
0ADC5                           ; Page 1
0ADC5                           +	distTo + ; $05 (2 enemies)
0ADC5 00                        	.db (+ - $)
0ADC6                           	enemy $C, $8, Enemy_Birdo
0ADC6 1C 00                     	.db Enemy_Birdo, $C << 4 | $8
0ADC8                           	enemy $C, $8, Enemy_CrystalBall
0ADC8 44 00                     	.db Enemy_CrystalBall, $C << 4 | $8
0ADCA                           
0ADCA                           ; Page 2
0ADCA                           +	distTo + ; $03 (1 enemy)
0ADCA 00                        	.db (+ - $)
0ADCB                           	enemy $2, $7, Enemy_HawkmouthLeft
0ADCB 43 00                     	.db Enemy_HawkmouthLeft, $2 << 4 | $7
0ADCD                           
0ADCD                           ; Page 3
0ADCD                           +	distTo + ; $01 (0 enemies)
0ADCD 00                        	.db (+ - $)
0ADCE                           
0ADCE                           ; End of enemy data
0ADCE                           +
0ADCE                           include "src/levels/6/6-1/6-1-area3-enemies.asm"
0ADCE                           ; Level 6-1, Area 3
0ADCE                           
0ADCE                           EnemyData_Level_6_1_Area3:
0ADCE                           
0ADCE                           ; Page 0
0ADCE                           	distTo + ; $03 (1 enemy)
0ADCE 00                        	.db (+ - $)
0ADCF                           	enemy $5, $A, Enemy_ShyguyRed
0ADCF 01 00                     	.db Enemy_ShyguyRed, $5 << 4 | $A
0ADD1                           
0ADD1                           ; Page 1
0ADD1                           +	distTo + ; $09 (4 enemies)
0ADD1 00                        	.db (+ - $)
0ADD2                           	enemy $4, $1, Enemy_ShyguyRed
0ADD2 01 00                     	.db Enemy_ShyguyRed, $4 << 4 | $1
0ADD4                           	enemy $B, $4, Enemy_ShyguyRed
0ADD4 01 00                     	.db Enemy_ShyguyRed, $B << 4 | $4
0ADD6                           	enemy $8, $5, Enemy_Phanto
0ADD6 17 00                     	.db Enemy_Phanto, $8 << 4 | $5
0ADD8                           	enemy $6, $9, Enemy_Key
0ADD8 3D 00                     	.db Enemy_Key, $6 << 4 | $9
0ADDA                           
0ADDA                           ; Page 2
0ADDA                           +	distTo + ; $01 (0 enemies)
0ADDA 00                        	.db (+ - $)
0ADDB                           
0ADDB                           ; End of enemy data
0ADDB                           +
0ADDB                           include "src/levels/6/6-1/6-1-area4-enemies.asm"
0ADDB                           ; Level 6-1, Area 4
0ADDB                           
0ADDB                           EnemyData_Level_6_1_Area4:
0ADDB                           
0ADDB                           ; Page 0
0ADDB                           	distTo + ; $01 (0 enemies)
0ADDB 00                        	.db (+ - $)
0ADDC                           
0ADDC                           ; Page 1
0ADDC                           +	distTo + ; $01 (0 enemies)
0ADDC 00                        	.db (+ - $)
0ADDD                           
0ADDD                           ; Page 2
0ADDD                           +	distTo + ; $01 (0 enemies)
0ADDD 00                        	.db (+ - $)
0ADDE                           
0ADDE                           ; Page 3
0ADDE                           +	distTo + ; $01 (0 enemies)
0ADDE 00                        	.db (+ - $)
0ADDF                           
0ADDF                           ; Page 4
0ADDF                           +	distTo + ; $01 (0 enemies)
0ADDF 00                        	.db (+ - $)
0ADE0                           
0ADE0                           ; Page 5
0ADE0                           +	distTo + ; $01 (0 enemies)
0ADE0 00                        	.db (+ - $)
0ADE1                           
0ADE1                           ; Page 6
0ADE1                           +	distTo + ; $01 (0 enemies)
0ADE1 00                        	.db (+ - $)
0ADE2                           
0ADE2                           ; Page 7
0ADE2                           +	distTo + ; $01 (0 enemies)
0ADE2 00                        	.db (+ - $)
0ADE3                           
0ADE3                           ; Page 8
0ADE3                           +	distTo + ; $01 (0 enemies)
0ADE3 00                        	.db (+ - $)
0ADE4                           
0ADE4                           ; Page 9
0ADE4                           +	distTo + ; $01 (0 enemies)
0ADE4 00                        	.db (+ - $)
0ADE5                           
0ADE5                           ; Page A
0ADE5                           +	distTo + ; $05 (2 enemies)
0ADE5 00                        	.db (+ - $)
0ADE6                           	enemy $2, $A, Enemy_ShyguyRed
0ADE6 01 00                     	.db Enemy_ShyguyRed, $2 << 4 | $A
0ADE8                           	enemy $D, $A, Enemy_ShyguyRed
0ADE8 01 00                     	.db Enemy_ShyguyRed, $D << 4 | $A
0ADEA                           
0ADEA                           ; End of enemy data
0ADEA                           +
0ADEA                           include "src/levels/6/6-1/6-1-area5-enemies.asm"
0ADEA                           ; Level 6-1, Area 5
0ADEA                           
0ADEA                           EnemyData_Level_6_1_Area5:
0ADEA                           
0ADEA                           ; Page 0
0ADEA                           	distTo + ; $03 (1 enemy)
0ADEA 00                        	.db (+ - $)
0ADEB                           	enemy $5, $A, Enemy_ShyguyRed
0ADEB 01 00                     	.db Enemy_ShyguyRed, $5 << 4 | $A
0ADED                           
0ADED                           ; Page 1
0ADED                           +	distTo + ; $05 (2 enemies)
0ADED 00                        	.db (+ - $)
0ADEE                           	enemy $4, $1, Enemy_ShyguyRed
0ADEE 01 00                     	.db Enemy_ShyguyRed, $4 << 4 | $1
0ADF0                           	enemy $B, $4, Enemy_ShyguyRed
0ADF0 01 00                     	.db Enemy_ShyguyRed, $B << 4 | $4
0ADF2                           
0ADF2                           ; Page 2
0ADF2                           +	distTo + ; $01 (0 enemies)
0ADF2 00                        	.db (+ - $)
0ADF3                           
0ADF3                           ; End of enemy data
0ADF3                           +
0ADF3                           include "src/levels/6/6-1/6-1-area6-enemies.asm"
0ADF3                           ; Level 6-1, Area 6
0ADF3                           
0ADF3                           EnemyData_Level_6_1_Area6:
0ADF3                           
0ADF3                           ; Page 0
0ADF3                           	distTo + ; $03 (1 enemy)
0ADF3 00                        	.db (+ - $)
0ADF4                           	enemy $B, $8, Enemy_ShyguyRed
0ADF4 01 00                     	.db Enemy_ShyguyRed, $B << 4 | $8
0ADF6                           
0ADF6                           ; Page 1
0ADF6                           +	distTo + ; $01 (0 enemies)
0ADF6 00                        	.db (+ - $)
0ADF7                           
0ADF7                           ; End of enemy data
0ADF7                           +
0ADF7                           
0ADF7                           ; World 6-2
0ADF7                           include "src/levels/6/6-2/6-2-area0-enemies.asm"
0ADF7                           ; Level 6-2, Area 0
0ADF7                           
0ADF7                           EnemyData_Level_6_2_Area0:
0ADF7                           
0ADF7                           ; Page 0
0ADF7                           	distTo + ; $03 (1 enemy)
0ADF7 00                        	.db (+ - $)
0ADF8                           	enemy $2, $A, Enemy_HawkmouthRight
0ADF8 42 00                     	.db Enemy_HawkmouthRight, $2 << 4 | $A
0ADFA                           
0ADFA                           ; Page 1
0ADFA                           +	distTo + ; $01 (0 enemies)
0ADFA 00                        	.db (+ - $)
0ADFB                           
0ADFB                           ; Page 2
0ADFB                           +	distTo + ; $01 (0 enemies)
0ADFB 00                        	.db (+ - $)
0ADFC                           
0ADFC                           ; End of enemy data
0ADFC                           +
0ADFC                           include "src/levels/6/6-2/6-2-area1-enemies.asm"
0ADFC                           ; Level 6-2, Area 1
0ADFC                           
0ADFC                           EnemyData_Level_6_2_Area1:
0ADFC                           
0ADFC                           ; Page 0
0ADFC                           	distTo + ; $05 (2 enemies)
0ADFC 00                        	.db (+ - $)
0ADFD                           	enemy $0, $C, Enemy_AlbatossStartRight
0ADFD 0B 00                     	.db Enemy_AlbatossStartRight, $0 << 4 | $C
0ADFF                           	enemy $2, $6, Enemy_AlbatossStartRight
0ADFF 0B 00                     	.db Enemy_AlbatossStartRight, $2 << 4 | $6
0AE01                           
0AE01                           ; Page 1
0AE01                           +	distTo + ; $07 (3 enemies)
0AE01 00                        	.db (+ - $)
0AE02                           	enemy $A, $B, Enemy_AlbatossStartLeft
0AE02 0C 00                     	.db Enemy_AlbatossStartLeft, $A << 4 | $B
0AE04                           	enemy $C, $9, Enemy_AlbatossStartLeft
0AE04 0C 00                     	.db Enemy_AlbatossStartLeft, $C << 4 | $9
0AE06                           	enemy $E, $7, Enemy_AlbatossStartLeft
0AE06 0C 00                     	.db Enemy_AlbatossStartLeft, $E << 4 | $7
0AE08                           
0AE08                           ; Page 2
0AE08                           +	distTo + ; $03 (1 enemy)
0AE08 00                        	.db (+ - $)
0AE09                           	enemy $A, $B, Enemy_PanserStationaryFiresUp
0AE09 25 00                     	.db Enemy_PanserStationaryFiresUp, $A << 4 | $B
0AE0B                           
0AE0B                           ; Page 3
0AE0B                           +	distTo + ; $07 (3 enemies)
0AE0B 00                        	.db (+ - $)
0AE0C                           	enemy $5, $5, Enemy_BeezoStraight
0AE0C 10 00                     	.db Enemy_BeezoStraight, $5 << 4 | $5
0AE0E                           	enemy $8, $5, Enemy_BeezoStraight
0AE0E 10 00                     	.db Enemy_BeezoStraight, $8 << 4 | $5
0AE10                           	enemy $A, $5, Enemy_BeezoStraight
0AE10 10 00                     	.db Enemy_BeezoStraight, $A << 4 | $5
0AE12                           
0AE12                           ; Page 4
0AE12                           +	distTo + ; $05 (2 enemies)
0AE12 00                        	.db (+ - $)
0AE13                           	enemy $9, $8, Enemy_AlbatossStartLeft
0AE13 0C 00                     	.db Enemy_AlbatossStartLeft, $9 << 4 | $8
0AE15                           	enemy $C, $8, Enemy_AlbatossStartLeft
0AE15 0C 00                     	.db Enemy_AlbatossStartLeft, $C << 4 | $8
0AE17                           
0AE17                           ; Page 5
0AE17                           +	distTo + ; $03 (1 enemy)
0AE17 00                        	.db (+ - $)
0AE18                           	enemy $A, $3, Enemy_BeezoStraight
0AE18 10 00                     	.db Enemy_BeezoStraight, $A << 4 | $3
0AE1A                           
0AE1A                           ; Page 6
0AE1A                           +	distTo + ; $07 (3 enemies)
0AE1A 00                        	.db (+ - $)
0AE1B                           	enemy $6, $3, Enemy_AlbatossStartLeft
0AE1B 0C 00                     	.db Enemy_AlbatossStartLeft, $6 << 4 | $3
0AE1D                           	enemy $6, $5, Enemy_AlbatossStartLeft
0AE1D 0C 00                     	.db Enemy_AlbatossStartLeft, $6 << 4 | $5
0AE1F                           	enemy $6, $7, Enemy_AlbatossStartLeft
0AE1F 0C 00                     	.db Enemy_AlbatossStartLeft, $6 << 4 | $7
0AE21                           
0AE21                           ; Page 7
0AE21                           +	distTo + ; $07 (3 enemies)
0AE21 00                        	.db (+ - $)
0AE22                           	enemy $6, $5, Enemy_AlbatossStartLeft
0AE22 0C 00                     	.db Enemy_AlbatossStartLeft, $6 << 4 | $5
0AE24                           	enemy $9, $3, Enemy_AlbatossStartLeft
0AE24 0C 00                     	.db Enemy_AlbatossStartLeft, $9 << 4 | $3
0AE26                           	enemy $C, $4, Enemy_AlbatossStartLeft
0AE26 0C 00                     	.db Enemy_AlbatossStartLeft, $C << 4 | $4
0AE28                           
0AE28                           ; Page 8
0AE28                           +	distTo + ; $03 (1 enemy)
0AE28 00                        	.db (+ - $)
0AE29                           	enemy $E, $B, Enemy_AlbatossStartLeft
0AE29 0C 00                     	.db Enemy_AlbatossStartLeft, $E << 4 | $B
0AE2B                           
0AE2B                           ; Page 9
0AE2B                           +	distTo + ; $05 (2 enemies)
0AE2B 00                        	.db (+ - $)
0AE2C                           	enemy $2, $9, Enemy_AlbatossStartLeft
0AE2C 0C 00                     	.db Enemy_AlbatossStartLeft, $2 << 4 | $9
0AE2E                           	enemy $A, $9, Enemy_AlbatossStartLeft
0AE2E 0C 00                     	.db Enemy_AlbatossStartLeft, $A << 4 | $9
0AE30                           
0AE30                           ; Page A
0AE30                           +	distTo + ; $01 (0 enemies)
0AE30 00                        	.db (+ - $)
0AE31                           
0AE31                           ; End of enemy data
0AE31                           +
0AE31                           include "src/levels/6/6-2/6-2-area2-enemies.asm"
0AE31                           ; Level 6-2, Area 2
0AE31                           
0AE31                           EnemyData_Level_6_2_Area2:
0AE31                           
0AE31                           ; Page 0
0AE31                           	distTo + ; $01 (0 enemies)
0AE31 00                        	.db (+ - $)
0AE32                           
0AE32                           ; Page 1
0AE32                           +	distTo + ; $05 (2 enemies)
0AE32 00                        	.db (+ - $)
0AE33                           	enemy $C, $A, Enemy_Birdo
0AE33 1C 00                     	.db Enemy_Birdo, $C << 4 | $A
0AE35                           	enemy $C, $B, Enemy_CrystalBall
0AE35 44 00                     	.db Enemy_CrystalBall, $C << 4 | $B
0AE37                           
0AE37                           ; Page 2
0AE37                           +	distTo + ; $03 (1 enemy)
0AE37 00                        	.db (+ - $)
0AE38                           	enemy $D, $4, Enemy_HawkmouthLeft
0AE38 43 00                     	.db Enemy_HawkmouthLeft, $D << 4 | $4
0AE3A                           
0AE3A                           ; Page 3
0AE3A                           +	distTo + ; $01 (0 enemies)
0AE3A 00                        	.db (+ - $)
0AE3B                           
0AE3B                           ; End of enemy data
0AE3B                           +
0AE3B                           
0AE3B                           ; World 6-3
0AE3B                           include "src/levels/6/6-3/6-3-area0-enemies.asm"
0AE3B                           ; Level 6-3, Area 0
0AE3B                           
0AE3B                           EnemyData_Level_6_3_Area0:
0AE3B                           
0AE3B                           ; Page 0
0AE3B                           	distTo + ; $03 (1 enemy)
0AE3B 00                        	.db (+ - $)
0AE3C                           	enemy $2, $A, Enemy_HawkmouthRight
0AE3C 42 00                     	.db Enemy_HawkmouthRight, $2 << 4 | $A
0AE3E                           
0AE3E                           ; Page 1
0AE3E                           +	distTo + ; $01 (0 enemies)
0AE3E 00                        	.db (+ - $)
0AE3F                           
0AE3F                           ; End of enemy data
0AE3F                           +
0AE3F                           include "src/levels/6/6-3/6-3-area1-enemies.asm"
0AE3F                           ; Level 6-3, Area 1
0AE3F                           
0AE3F                           EnemyData_Level_6_3_Area1:
0AE3F                           
0AE3F                           ; Page 0
0AE3F                           	distTo + ; $01 (0 enemies)
0AE3F 00                        	.db (+ - $)
0AE40                           
0AE40                           ; Page 1
0AE40                           +	distTo + ; $01 (0 enemies)
0AE40 00                        	.db (+ - $)
0AE41                           
0AE41                           ; Page 2
0AE41                           +	distTo + ; $03 (1 enemy)
0AE41 00                        	.db (+ - $)
0AE42                           	enemy $9, $8, Enemy_ShyguyPink
0AE42 03 00                     	.db Enemy_ShyguyPink, $9 << 4 | $8
0AE44                           
0AE44                           ; Page 3
0AE44                           +	distTo + ; $07 (3 enemies)
0AE44 00                        	.db (+ - $)
0AE45                           	enemy $4, $8, Enemy_ShyguyPink
0AE45 03 00                     	.db Enemy_ShyguyPink, $4 << 4 | $8
0AE47                           	enemy $6, $6, Enemy_Pokey
0AE47 1A 00                     	.db Enemy_Pokey, $6 << 4 | $6
0AE49                           	enemy $A, $A, Enemy_CobratSand
0AE49 19 00                     	.db Enemy_CobratSand, $A << 4 | $A
0AE4B                           
0AE4B                           ; Page 4
0AE4B                           +	distTo + ; $01 (0 enemies)
0AE4B 00                        	.db (+ - $)
0AE4C                           
0AE4C                           ; Page 5
0AE4C                           +	distTo + ; $01 (0 enemies)
0AE4C 00                        	.db (+ - $)
0AE4D                           
0AE4D                           ; End of enemy data
0AE4D                           +
0AE4D                           include "src/levels/6/6-3/6-3-area2-enemies.asm"
0AE4D                           ; Level 6-3, Area 2
0AE4D                           
0AE4D                           EnemyData_Level_6_3_Area2:
0AE4D                           
0AE4D                           ; Page 0
0AE4D                           	distTo + ; $01 (0 enemies)
0AE4D 00                        	.db (+ - $)
0AE4E                           
0AE4E                           ; Page 1
0AE4E                           +	distTo + ; $05 (2 enemies)
0AE4E 00                        	.db (+ - $)
0AE4F                           	enemy $4, $9, Enemy_JarGeneratorBobOmb
0AE4F 16 00                     	.db Enemy_JarGeneratorBobOmb, $4 << 4 | $9
0AE51                           	enemy $F, $9, Enemy_JarGeneratorBobOmb
0AE51 16 00                     	.db Enemy_JarGeneratorBobOmb, $F << 4 | $9
0AE53                           
0AE53                           ; Page 2
0AE53                           +	distTo + ; $05 (2 enemies)
0AE53 00                        	.db (+ - $)
0AE54                           	enemy $A, $9, Enemy_BobOmb
0AE54 09 00                     	.db Enemy_BobOmb, $A << 4 | $9
0AE56                           	enemy $C, $9, Enemy_JarGeneratorBobOmb
0AE56 16 00                     	.db Enemy_JarGeneratorBobOmb, $C << 4 | $9
0AE58                           
0AE58                           ; Page 3
0AE58                           +	distTo + ; $03 (1 enemy)
0AE58 00                        	.db (+ - $)
0AE59                           	enemy $F, $5, Enemy_NinjiRunning
0AE59 0D 00                     	.db Enemy_NinjiRunning, $F << 4 | $5
0AE5B                           
0AE5B                           ; Page 4
0AE5B                           +	distTo + ; $07 (3 enemies)
0AE5B 00                        	.db (+ - $)
0AE5C                           	enemy $2, $7, Enemy_NinjiRunning
0AE5C 0D 00                     	.db Enemy_NinjiRunning, $2 << 4 | $7
0AE5E                           	enemy $3, $8, Enemy_NinjiRunning
0AE5E 0D 00                     	.db Enemy_NinjiRunning, $3 << 4 | $8
0AE60                           	enemy $5, $6, Enemy_NinjiRunning
0AE60 0D 00                     	.db Enemy_NinjiRunning, $5 << 4 | $6
0AE62                           
0AE62                           ; Page 5
0AE62                           +	distTo + ; $01 (0 enemies)
0AE62 00                        	.db (+ - $)
0AE63                           
0AE63                           ; Page 6
0AE63                           +	distTo + ; $01 (0 enemies)
0AE63 00                        	.db (+ - $)
0AE64                           
0AE64                           ; Page 7
0AE64                           +	distTo + ; $01 (0 enemies)
0AE64 00                        	.db (+ - $)
0AE65                           
0AE65                           ; Page 8
0AE65                           +	distTo + ; $01 (0 enemies)
0AE65 00                        	.db (+ - $)
0AE66                           
0AE66                           ; Page 9
0AE66                           +	distTo + ; $01 (0 enemies)
0AE66 00                        	.db (+ - $)
0AE67                           
0AE67                           ; Page A
0AE67                           +	distTo + ; $01 (0 enemies)
0AE67 00                        	.db (+ - $)
0AE68                           
0AE68                           ; End of enemy data
0AE68                           +
0AE68                           include "src/levels/6/6-3/6-3-area3-enemies.asm"
0AE68                           ; Level 6-3, Area 3
0AE68                           
0AE68                           EnemyData_Level_6_3_Area3:
0AE68                           
0AE68                           ; Page 0
0AE68                           	distTo + ; $01 (0 enemies)
0AE68 00                        	.db (+ - $)
0AE69                           
0AE69                           ; Page 1
0AE69                           +	distTo + ; $09 (4 enemies)
0AE69 00                        	.db (+ - $)
0AE6A                           	enemy $9, $5, Enemy_Hoopstar
0AE6A 14 00                     	.db Enemy_Hoopstar, $9 << 4 | $5
0AE6C                           	enemy $A, $4, Enemy_Hoopstar
0AE6C 14 00                     	.db Enemy_Hoopstar, $A << 4 | $4
0AE6E                           	enemy $B, $3, Enemy_Hoopstar
0AE6E 14 00                     	.db Enemy_Hoopstar, $B << 4 | $3
0AE70                           	enemy $C, $2, Enemy_Hoopstar
0AE70 14 00                     	.db Enemy_Hoopstar, $C << 4 | $2
0AE72                           
0AE72                           ; Page 2
0AE72                           +	distTo + ; $07 (3 enemies)
0AE72 00                        	.db (+ - $)
0AE73                           	enemy $A, $7, Enemy_Hoopstar
0AE73 14 00                     	.db Enemy_Hoopstar, $A << 4 | $7
0AE75                           	enemy $B, $A, Enemy_Hoopstar
0AE75 14 00                     	.db Enemy_Hoopstar, $B << 4 | $A
0AE77                           	enemy $C, $8, Enemy_Hoopstar
0AE77 14 00                     	.db Enemy_Hoopstar, $C << 4 | $8
0AE79                           
0AE79                           ; Page 3
0AE79                           +	distTo + ; $03 (1 enemy)
0AE79 00                        	.db (+ - $)
0AE7A                           	enemy $3, $4, Enemy_Hoopstar
0AE7A 14 00                     	.db Enemy_Hoopstar, $3 << 4 | $4
0AE7C                           
0AE7C                           ; Page 4
0AE7C                           +	distTo + ; $07 (3 enemies)
0AE7C 00                        	.db (+ - $)
0AE7D                           	enemy $4, $A, Enemy_Hoopstar
0AE7D 14 00                     	.db Enemy_Hoopstar, $4 << 4 | $A
0AE7F                           	enemy $7, $5, Enemy_SnifitGray
0AE7F 06 00                     	.db Enemy_SnifitGray, $7 << 4 | $5
0AE81                           	enemy $7, $E, Enemy_SnifitGray
0AE81 06 00                     	.db Enemy_SnifitGray, $7 << 4 | $E
0AE83                           
0AE83                           ; Page 5
0AE83                           +	distTo + ; $03 (1 enemy)
0AE83 00                        	.db (+ - $)
0AE84                           	enemy $2, $8, Enemy_ShyguyRed
0AE84 01 00                     	.db Enemy_ShyguyRed, $2 << 4 | $8
0AE86                           
0AE86                           ; Page 6
0AE86                           +	distTo + ; $07 (3 enemies)
0AE86 00                        	.db (+ - $)
0AE87                           	enemy $9, $C, Enemy_Hoopstar
0AE87 14 00                     	.db Enemy_Hoopstar, $9 << 4 | $C
0AE89                           	enemy $A, $D, Enemy_Hoopstar
0AE89 14 00                     	.db Enemy_Hoopstar, $A << 4 | $D
0AE8B                           	enemy $B, $E, Enemy_Hoopstar
0AE8B 14 00                     	.db Enemy_Hoopstar, $B << 4 | $E
0AE8D                           
0AE8D                           ; Page 7
0AE8D                           +	distTo + ; $03 (1 enemy)
0AE8D 00                        	.db (+ - $)
0AE8E                           	enemy $5, $C, Enemy_Hoopstar
0AE8E 14 00                     	.db Enemy_Hoopstar, $5 << 4 | $C
0AE90                           
0AE90                           ; Page 8
0AE90                           +	distTo + ; $03 (1 enemy)
0AE90 00                        	.db (+ - $)
0AE91                           	enemy $9, $3, Enemy_Hoopstar
0AE91 14 00                     	.db Enemy_Hoopstar, $9 << 4 | $3
0AE93                           
0AE93                           ; Page 9
0AE93                           +	distTo + ; $01 (0 enemies)
0AE93 00                        	.db (+ - $)
0AE94                           
0AE94                           ; Page A
0AE94                           +	distTo + ; $01 (0 enemies)
0AE94 00                        	.db (+ - $)
0AE95                           
0AE95                           ; End of enemy data
0AE95                           +
0AE95                           include "src/levels/6/6-3/6-3-area4-enemies.asm"
0AE95                           ; Level 6-3, Area 4
0AE95                           
0AE95                           EnemyData_Level_6_3_Area4:
0AE95                           
0AE95                           ; Page 0
0AE95                           	distTo + ; $01 (0 enemies)
0AE95 00                        	.db (+ - $)
0AE96                           
0AE96                           ; Page 1
0AE96                           +	distTo + ; $01 (0 enemies)
0AE96 00                        	.db (+ - $)
0AE97                           
0AE97                           ; Page 2
0AE97                           +	distTo + ; $01 (0 enemies)
0AE97 00                        	.db (+ - $)
0AE98                           
0AE98                           ; Page 3
0AE98                           +	distTo + ; $01 (0 enemies)
0AE98 00                        	.db (+ - $)
0AE99                           
0AE99                           ; Page 4
0AE99                           +	distTo + ; $01 (0 enemies)
0AE99 00                        	.db (+ - $)
0AE9A                           
0AE9A                           ; End of enemy data
0AE9A                           +
0AE9A                           include "src/levels/6/6-3/6-3-area5-enemies.asm"
0AE9A                           ; Level 6-3, Area 5
0AE9A                           
0AE9A                           EnemyData_Level_6_3_Area5:
0AE9A                           
0AE9A                           ; Page 0
0AE9A                           	distTo + ; $01 (0 enemies)
0AE9A 00                        	.db (+ - $)
0AE9B                           
0AE9B                           ; Page 1
0AE9B                           +	distTo + ; $07 (3 enemies)
0AE9B 00                        	.db (+ - $)
0AE9C                           	enemy $9, $7, Enemy_HawkmouthLeft
0AE9C 43 00                     	.db Enemy_HawkmouthLeft, $9 << 4 | $7
0AE9E                           	enemy $B, $3, Enemy_Birdo
0AE9E 1C 00                     	.db Enemy_Birdo, $B << 4 | $3
0AEA0                           	enemy $B, $4, Enemy_CrystalBall
0AEA0 44 00                     	.db Enemy_CrystalBall, $B << 4 | $4
0AEA2                           
0AEA2                           ; Page 2
0AEA2                           +	distTo + ; $01 (0 enemies)
0AEA2 00                        	.db (+ - $)
0AEA3                           
0AEA3                           ; End of enemy data
0AEA3                           +
0AEA3                           include "src/levels/6/6-3/6-3-area6-enemies.asm"
0AEA3                           ; Level 6-3, Area 6
0AEA3                           
0AEA3                           EnemyData_Level_6_3_Area6:
0AEA3                           
0AEA3                           ; Page 0
0AEA3                           	distTo + ; $01 (0 enemies)
0AEA3 00                        	.db (+ - $)
0AEA4                           
0AEA4                           ; Page 1
0AEA4                           +	distTo + ; $03 (1 enemy)
0AEA4 00                        	.db (+ - $)
0AEA5                           	enemy $B, $5, Enemy_BossTryclyde
0AEA5 5F 00                     	.db Enemy_BossTryclyde, $B << 4 | $5
0AEA7                           
0AEA7                           ; Page 2
0AEA7                           +	distTo + ; $01 (0 enemies)
0AEA7 00                        	.db (+ - $)
0AEA8                           
0AEA8                           ; End of enemy data
0AEA8                           +
0AEA8                           ; -------------------------------
0AEA8                           
0AEA8                           
0AEA8                           ; -------------------------------
0AEA8                           ; World 7
0AEA8                           
0AEA8                           ; World 7-1
0AEA8                           include "src/levels/7/7-1/7-1-area0-enemies.asm"
0AEA8                           ; Level 7-1, Area 0
0AEA8                           
0AEA8                           EnemyData_Level_7_1_Area0:
0AEA8                           
0AEA8                           ; Page 0
0AEA8                           	distTo + ; $03 (1 enemy)
0AEA8 00                        	.db (+ - $)
0AEA9                           	enemy $2, $A, Enemy_HawkmouthRight
0AEA9 42 00                     	.db Enemy_HawkmouthRight, $2 << 4 | $A
0AEAB                           
0AEAB                           ; Page 1
0AEAB                           +	distTo + ; $01 (0 enemies)
0AEAB 00                        	.db (+ - $)
0AEAC                           
0AEAC                           ; End of enemy data
0AEAC                           +
0AEAC                           include "src/levels/7/7-1/7-1-area1-enemies.asm"
0AEAC                           ; Level 7-1, Area 1
0AEAC                           
0AEAC                           EnemyData_Level_7_1_Area1:
0AEAC                           
0AEAC                           ; Page 0
0AEAC                           	distTo + ; $01 (0 enemies)
0AEAC 00                        	.db (+ - $)
0AEAD                           
0AEAD                           ; Page 1
0AEAD                           +	distTo + ; $01 (0 enemies)
0AEAD 00                        	.db (+ - $)
0AEAE                           
0AEAE                           ; Page 2
0AEAE                           +	distTo + ; $01 (0 enemies)
0AEAE 00                        	.db (+ - $)
0AEAF                           
0AEAF                           ; Page 3
0AEAF                           +	distTo + ; $0D (6 enemies)
0AEAF 00                        	.db (+ - $)
0AEB0                           	enemy $8, $B, Enemy_BobOmb
0AEB0 09 00                     	.db Enemy_BobOmb, $8 << 4 | $B
0AEB2                           	enemy $9, $4, Enemy_AlbatossStartLeft
0AEB2 0C 00                     	.db Enemy_AlbatossStartLeft, $9 << 4 | $4
0AEB4                           	enemy $9, $4, Enemy_BobOmb
0AEB4 09 00                     	.db Enemy_BobOmb, $9 << 4 | $4
0AEB6                           	enemy $B, $8, Enemy_NinjiRunning
0AEB6 0D 00                     	.db Enemy_NinjiRunning, $B << 4 | $8
0AEB8                           	enemy $E, $4, Enemy_AlbatossStartLeft
0AEB8 0C 00                     	.db Enemy_AlbatossStartLeft, $E << 4 | $4
0AEBA                           	enemy $E, $4, Enemy_BobOmb
0AEBA 09 00                     	.db Enemy_BobOmb, $E << 4 | $4
0AEBC                           
0AEBC                           ; Page 4
0AEBC                           +	distTo + ; $07 (3 enemies)
0AEBC 00                        	.db (+ - $)
0AEBD                           	enemy $2, $B, Enemy_BobOmb
0AEBD 09 00                     	.db Enemy_BobOmb, $2 << 4 | $B
0AEBF                           	enemy $E, $4, Enemy_AlbatossStartLeft
0AEBF 0C 00                     	.db Enemy_AlbatossStartLeft, $E << 4 | $4
0AEC1                           	enemy $E, $4, Enemy_BobOmb
0AEC1 09 00                     	.db Enemy_BobOmb, $E << 4 | $4
0AEC3                           
0AEC3                           ; Page 5
0AEC3                           +	distTo + ; $0D (6 enemies)
0AEC3 00                        	.db (+ - $)
0AEC4                           	enemy $3, $B, Enemy_NinjiJumping
0AEC4 0E 00                     	.db Enemy_NinjiJumping, $3 << 4 | $B
0AEC6                           	enemy $5, $4, Enemy_AlbatossStartLeft
0AEC6 0C 00                     	.db Enemy_AlbatossStartLeft, $5 << 4 | $4
0AEC8                           	enemy $5, $4, Enemy_BobOmb
0AEC8 09 00                     	.db Enemy_BobOmb, $5 << 4 | $4
0AECA                           	enemy $6, $B, Enemy_BobOmb
0AECA 09 00                     	.db Enemy_BobOmb, $6 << 4 | $B
0AECC                           	enemy $9, $4, Enemy_AlbatossStartLeft
0AECC 0C 00                     	.db Enemy_AlbatossStartLeft, $9 << 4 | $4
0AECE                           	enemy $9, $4, Enemy_BobOmb
0AECE 09 00                     	.db Enemy_BobOmb, $9 << 4 | $4
0AED0                           
0AED0                           ; Page 6
0AED0                           +	distTo + ; $07 (3 enemies)
0AED0 00                        	.db (+ - $)
0AED1                           	enemy $3, $7, Enemy_JarGeneratorShyguy
0AED1 15 00                     	.db Enemy_JarGeneratorShyguy, $3 << 4 | $7
0AED3                           	enemy $F, $3, Enemy_AlbatossStartLeft
0AED3 0C 00                     	.db Enemy_AlbatossStartLeft, $F << 4 | $3
0AED5                           	enemy $F, $3, Enemy_BobOmb
0AED5 09 00                     	.db Enemy_BobOmb, $F << 4 | $3
0AED7                           
0AED7                           ; Page 7
0AED7                           +	distTo + ; $01 (0 enemies)
0AED7 00                        	.db (+ - $)
0AED8                           
0AED8                           ; End of enemy data
0AED8                           +
0AED8                           include "src/levels/7/7-1/7-1-area2-enemies.asm"
0AED8                           ; Level 7-1, Area 2
0AED8                           
0AED8                           EnemyData_Level_7_1_Area2:
0AED8                           
0AED8                           ; Page 0
0AED8                           	distTo + ; $01 (0 enemies)
0AED8 00                        	.db (+ - $)
0AED9                           
0AED9                           ; Page 1
0AED9                           +	distTo + ; $07 (3 enemies)
0AED9 00                        	.db (+ - $)
0AEDA                           	enemy $A, $8, Enemy_Tweeter
0AEDA 02 00                     	.db Enemy_Tweeter, $A << 4 | $8
0AEDC                           	enemy $B, $6, Enemy_SnifitGray
0AEDC 06 00                     	.db Enemy_SnifitGray, $B << 4 | $6
0AEDE                           	enemy $C, $B, Enemy_SnifitGray
0AEDE 06 00                     	.db Enemy_SnifitGray, $C << 4 | $B
0AEE0                           
0AEE0                           ; Page 2
0AEE0                           +	distTo + ; $07 (3 enemies)
0AEE0 00                        	.db (+ - $)
0AEE1                           	enemy $3, $8, Enemy_JarGeneratorShyguy
0AEE1 15 00                     	.db Enemy_JarGeneratorShyguy, $3 << 4 | $8
0AEE3                           	enemy $D, $C, Enemy_ShyguyPink
0AEE3 03 00                     	.db Enemy_ShyguyPink, $D << 4 | $C
0AEE5                           	enemy $F, $3, Enemy_SnifitGray
0AEE5 06 00                     	.db Enemy_SnifitGray, $F << 4 | $3
0AEE7                           
0AEE7                           ; Page 3
0AEE7                           +	distTo + ; $05 (2 enemies)
0AEE7 00                        	.db (+ - $)
0AEE8                           	enemy $5, $9, Enemy_NinjiRunning
0AEE8 0D 00                     	.db Enemy_NinjiRunning, $5 << 4 | $9
0AEEA                           	enemy $A, $B, Enemy_SnifitGray
0AEEA 06 00                     	.db Enemy_SnifitGray, $A << 4 | $B
0AEEC                           
0AEEC                           ; Page 4
0AEEC                           +	distTo + ; $01 (0 enemies)
0AEEC 00                        	.db (+ - $)
0AEED                           
0AEED                           ; End of enemy data
0AEED                           +
0AEED                           include "src/levels/7/7-1/7-1-area3-enemies.asm"
0AEED                           ; Level 7-1, Area 3
0AEED                           
0AEED                           EnemyData_Level_7_1_Area3:
0AEED                           
0AEED                           ; Page 0
0AEED                           	distTo + ; $01 (0 enemies)
0AEED 00                        	.db (+ - $)
0AEEE                           
0AEEE                           ; Page 1
0AEEE                           +	distTo + ; $07 (3 enemies)
0AEEE 00                        	.db (+ - $)
0AEEF                           	enemy $2, $1, Enemy_SnifitGray
0AEEF 06 00                     	.db Enemy_SnifitGray, $2 << 4 | $1
0AEF1                           	enemy $6, $6, Enemy_Hoopstar
0AEF1 14 00                     	.db Enemy_Hoopstar, $6 << 4 | $6
0AEF3                           	enemy $8, $B, Enemy_Hoopstar
0AEF3 14 00                     	.db Enemy_Hoopstar, $8 << 4 | $B
0AEF5                           
0AEF5                           ; Page 2
0AEF5                           +	distTo + ; $07 (3 enemies)
0AEF5 00                        	.db (+ - $)
0AEF6                           	enemy $8, $7, Enemy_Spark4
0AEF6 31 00                     	.db Enemy_Spark4, $8 << 4 | $7
0AEF8                           	enemy $D, $7, Enemy_Spark4
0AEF8 31 00                     	.db Enemy_Spark4, $D << 4 | $7
0AEFA                           	enemy $D, $9, Enemy_Spark2
0AEFA 2F 00                     	.db Enemy_Spark2, $D << 4 | $9
0AEFC                           
0AEFC                           ; Page 3
0AEFC                           +	distTo + ; $05 (2 enemies)
0AEFC 00                        	.db (+ - $)
0AEFD                           	enemy $E, $0, Enemy_Spark4
0AEFD 31 00                     	.db Enemy_Spark4, $E << 4 | $0
0AEFF                           	enemy $6, $3, Enemy_Spark4
0AEFF 31 00                     	.db Enemy_Spark4, $6 << 4 | $3
0AF01                           
0AF01                           ; Page 4
0AF01                           +	distTo + ; $01 (0 enemies)
0AF01 00                        	.db (+ - $)
0AF02                           
0AF02                           ; End of enemy data
0AF02                           +
0AF02                           include "src/levels/7/7-1/7-1-area4-enemies.asm"
0AF02                           ; Level 7-1, Area 4
0AF02                           
0AF02                           EnemyData_Level_7_1_Area4:
0AF02                           
0AF02                           ; Page 0
0AF02                           	distTo + ; $01 (0 enemies)
0AF02 00                        	.db (+ - $)
0AF03                           
0AF03                           ; Page 1
0AF03                           +	distTo + ; $07 (3 enemies)
0AF03 00                        	.db (+ - $)
0AF04                           	enemy $9, $A, Enemy_HawkmouthLeft
0AF04 43 00                     	.db Enemy_HawkmouthLeft, $9 << 4 | $A
0AF06                           	enemy $C, $5, Enemy_Birdo
0AF06 1C 00                     	.db Enemy_Birdo, $C << 4 | $5
0AF08                           	enemy $C, $6, Enemy_CrystalBall
0AF08 44 00                     	.db Enemy_CrystalBall, $C << 4 | $6
0AF0A                           
0AF0A                           ; Page 2
0AF0A                           +	distTo + ; $01 (0 enemies)
0AF0A 00                        	.db (+ - $)
0AF0B                           
0AF0B                           ; End of enemy data
0AF0B                           +
0AF0B                           include "src/levels/7/7-1/7-1-area5-enemies.asm"
0AF0B                           ; Level 7-1, Area 5
0AF0B                           
0AF0B                           EnemyData_Level_7_1_Area5:
0AF0B                           
0AF0B                           ; Page 0
0AF0B                           	distTo + ; $05 (2 enemies)
0AF0B 00                        	.db (+ - $)
0AF0C                           	enemy $B, $9, Enemy_Spark4
0AF0C 31 00                     	.db Enemy_Spark4, $B << 4 | $9
0AF0E                           	enemy $C, $3, Enemy_Spark4
0AF0E 31 00                     	.db Enemy_Spark4, $C << 4 | $3
0AF10                           
0AF10                           ; Page 1
0AF10                           +	distTo + ; $01 (0 enemies)
0AF10 00                        	.db (+ - $)
0AF11                           
0AF11                           ; End of enemy data
0AF11                           +
0AF11                           
0AF11                           ; World 7-2
0AF11                           include "src/levels/7/7-2/7-2-area0-enemies.asm"
0AF11                           ; Level 7-2, Area 0
0AF11                           
0AF11                           EnemyData_Level_7_2_Area0:
0AF11                           
0AF11                           ; Page 0
0AF11                           	distTo + ; $03 (1 enemy)
0AF11 00                        	.db (+ - $)
0AF12                           	enemy $F, $5, Enemy_SnifitGray
0AF12 06 00                     	.db Enemy_SnifitGray, $F << 4 | $5
0AF14                           
0AF14                           ; Page 1
0AF14                           +	distTo + ; $05 (2 enemies)
0AF14 00                        	.db (+ - $)
0AF15                           	enemy $5, $8, Enemy_SnifitGray
0AF15 06 00                     	.db Enemy_SnifitGray, $5 << 4 | $8
0AF17                           	enemy $E, $8, Enemy_SnifitGray
0AF17 06 00                     	.db Enemy_SnifitGray, $E << 4 | $8
0AF19                           
0AF19                           ; Page 2
0AF19                           +	distTo + ; $03 (1 enemy)
0AF19 00                        	.db (+ - $)
0AF1A                           	enemy $7, $4, Enemy_NinjiJumping
0AF1A 0E 00                     	.db Enemy_NinjiJumping, $7 << 4 | $4
0AF1C                           
0AF1C                           ; Page 3
0AF1C                           +	distTo + ; $01 (0 enemies)
0AF1C 00                        	.db (+ - $)
0AF1D                           
0AF1D                           ; End of enemy data
0AF1D                           +
0AF1D                           include "src/levels/7/7-2/7-2-area1-enemies.asm"
0AF1D                           ; Level 7-2, Area 1
0AF1D                           
0AF1D                           EnemyData_Level_7_2_Area1:
0AF1D                           
0AF1D                           ; Page 0
0AF1D                           	distTo + ; $01 (0 enemies)
0AF1D 00                        	.db (+ - $)
0AF1E                           
0AF1E                           ; Page 1
0AF1E                           +	distTo + ; $07 (3 enemies)
0AF1E 00                        	.db (+ - $)
0AF1F                           	enemy $9, $9, Enemy_ShyguyRed
0AF1F 01 00                     	.db Enemy_ShyguyRed, $9 << 4 | $9
0AF21                           	enemy $D, $9, Enemy_ShyguyRed
0AF21 01 00                     	.db Enemy_ShyguyRed, $D << 4 | $9
0AF23                           	enemy $F, $9, Enemy_JarGeneratorShyguy
0AF23 15 00                     	.db Enemy_JarGeneratorShyguy, $F << 4 | $9
0AF25                           
0AF25                           ; Page 2
0AF25                           +	distTo + ; $07 (3 enemies)
0AF25 00                        	.db (+ - $)
0AF26                           	enemy $7, $7, Enemy_NinjiJumping
0AF26 0E 00                     	.db Enemy_NinjiJumping, $7 << 4 | $7
0AF28                           	enemy $A, $7, Enemy_NinjiJumping
0AF28 0E 00                     	.db Enemy_NinjiJumping, $A << 4 | $7
0AF2A                           	enemy $C, $7, Enemy_NinjiJumping
0AF2A 0E 00                     	.db Enemy_NinjiJumping, $C << 4 | $7
0AF2C                           
0AF2C                           ; Page 3
0AF2C                           +	distTo + ; $03 (1 enemy)
0AF2C 00                        	.db (+ - $)
0AF2D                           	enemy $D, $9, Enemy_JarGeneratorBobOmb
0AF2D 16 00                     	.db Enemy_JarGeneratorBobOmb, $D << 4 | $9
0AF2F                           
0AF2F                           ; Page 4
0AF2F                           +	distTo + ; $01 (0 enemies)
0AF2F 00                        	.db (+ - $)
0AF30                           
0AF30                           ; Page 5
0AF30                           +	distTo + ; $05 (2 enemies)
0AF30 00                        	.db (+ - $)
0AF31                           	enemy $1, $C, Enemy_PanserStationaryFiresUp
0AF31 25 00                     	.db Enemy_PanserStationaryFiresUp, $1 << 4 | $C
0AF33                           	enemy $B, $C, Enemy_PanserStationaryFiresUp
0AF33 25 00                     	.db Enemy_PanserStationaryFiresUp, $B << 4 | $C
0AF35                           
0AF35                           ; Page 6
0AF35                           +	distTo + ; $03 (1 enemy)
0AF35 00                        	.db (+ - $)
0AF36                           	enemy $5, $B, Enemy_PanserStationaryFiresUp
0AF36 25 00                     	.db Enemy_PanserStationaryFiresUp, $5 << 4 | $B
0AF38                           
0AF38                           ; Page 7
0AF38                           +	distTo + ; $01 (0 enemies)
0AF38 00                        	.db (+ - $)
0AF39                           
0AF39                           ; End of enemy data
0AF39                           +
0AF39                           include "src/levels/7/7-2/7-2-area2-enemies.asm"
0AF39                           ; Level 7-2, Area 2
0AF39                           
0AF39                           EnemyData_Level_7_2_Area2:
0AF39                           
0AF39                           ; Page 0
0AF39                           	distTo + ; $01 (0 enemies)
0AF39 00                        	.db (+ - $)
0AF3A                           
0AF3A                           ; Page 1
0AF3A                           +	distTo + ; $05 (2 enemies)
0AF3A 00                        	.db (+ - $)
0AF3B                           	enemy $9, $9, Enemy_Spark4
0AF3B 31 00                     	.db Enemy_Spark4, $9 << 4 | $9
0AF3D                           	enemy $E, $C, Enemy_Spark4
0AF3D 31 00                     	.db Enemy_Spark4, $E << 4 | $C
0AF3F                           
0AF3F                           ; Page 2
0AF3F                           +	distTo + ; $05 (2 enemies)
0AF3F 00                        	.db (+ - $)
0AF40                           	enemy $2, $4, Enemy_Spark4
0AF40 31 00                     	.db Enemy_Spark4, $2 << 4 | $4
0AF42                           	enemy $6, $9, Enemy_Spark4
0AF42 31 00                     	.db Enemy_Spark4, $6 << 4 | $9
0AF44                           
0AF44                           ; Page 3
0AF44                           +	distTo + ; $05 (2 enemies)
0AF44 00                        	.db (+ - $)
0AF45                           	enemy $9, $6, Enemy_Spark2
0AF45 2F 00                     	.db Enemy_Spark2, $9 << 4 | $6
0AF47                           	enemy $E, $3, Enemy_Spark2
0AF47 2F 00                     	.db Enemy_Spark2, $E << 4 | $3
0AF49                           
0AF49                           ; Page 4
0AF49                           +	distTo + ; $03 (1 enemy)
0AF49 00                        	.db (+ - $)
0AF4A                           	enemy $3, $A, Enemy_Spark2
0AF4A 2F 00                     	.db Enemy_Spark2, $3 << 4 | $A
0AF4C                           
0AF4C                           ; Page 5
0AF4C                           +	distTo + ; $03 (1 enemy)
0AF4C 00                        	.db (+ - $)
0AF4D                           	enemy $B, $7, Enemy_Birdo
0AF4D 1C 00                     	.db Enemy_Birdo, $B << 4 | $7
0AF4F                           
0AF4F                           ; Page 6
0AF4F                           +	distTo + ; $01 (0 enemies)
0AF4F 00                        	.db (+ - $)
0AF50                           
0AF50                           ; Page 7
0AF50                           +	distTo + ; $07 (3 enemies)
0AF50 00                        	.db (+ - $)
0AF51                           	enemy $B, $7, Enemy_Birdo
0AF51 1C 00                     	.db Enemy_Birdo, $B << 4 | $7
0AF53                           	enemy $A, $4, Enemy_Phanto
0AF53 17 00                     	.db Enemy_Phanto, $A << 4 | $4
0AF55                           	enemy $B, $8, Enemy_Key
0AF55 3D 00                     	.db Enemy_Key, $B << 4 | $8
0AF57                           
0AF57                           ; Page 8
0AF57                           +	distTo + ; $01 (0 enemies)
0AF57 00                        	.db (+ - $)
0AF58                           
0AF58                           ; Page 9
0AF58                           +	distTo + ; $01 (0 enemies)
0AF58 00                        	.db (+ - $)
0AF59                           
0AF59                           ; Page A
0AF59                           +	distTo + ; $01 (0 enemies)
0AF59 00                        	.db (+ - $)
0AF5A                           
0AF5A                           ; End of enemy data
0AF5A                           +
0AF5A                           include "src/levels/7/7-2/7-2-area3-enemies.asm"
0AF5A                           ; Level 7-2, Area 3
0AF5A                           
0AF5A                           EnemyData_Level_7_2_Area3:
0AF5A                           
0AF5A                           ; Page 0
0AF5A                           	distTo + ; $07 (3 enemies)
0AF5A 00                        	.db (+ - $)
0AF5B                           	enemy $B, $8, Enemy_Spark2
0AF5B 2F 00                     	.db Enemy_Spark2, $B << 4 | $8
0AF5D                           	enemy $F, $3, Enemy_Spark3
0AF5D 30 00                     	.db Enemy_Spark3, $F << 4 | $3
0AF5F                           	enemy $F, $C, Enemy_Spark1
0AF5F 2E 00                     	.db Enemy_Spark1, $F << 4 | $C
0AF61                           
0AF61                           ; Page 1
0AF61                           +	distTo + ; $09 (4 enemies)
0AF61 00                        	.db (+ - $)
0AF62                           	enemy $3, $4, Enemy_Spark2
0AF62 2F 00                     	.db Enemy_Spark2, $3 << 4 | $4
0AF64                           	enemy $7, $4, Enemy_Spark2
0AF64 2F 00                     	.db Enemy_Spark2, $7 << 4 | $4
0AF66                           	enemy $A, $4, Enemy_Spark2
0AF66 2F 00                     	.db Enemy_Spark2, $A << 4 | $4
0AF68                           	enemy $A, $B, Enemy_Spark3
0AF68 30 00                     	.db Enemy_Spark3, $A << 4 | $B
0AF6A                           
0AF6A                           ; Page 2
0AF6A                           +	distTo + ; $07 (3 enemies)
0AF6A 00                        	.db (+ - $)
0AF6B                           	enemy $1, $A, Enemy_Spark3
0AF6B 30 00                     	.db Enemy_Spark3, $1 << 4 | $A
0AF6D                           	enemy $7, $9, Enemy_Spark2
0AF6D 2F 00                     	.db Enemy_Spark2, $7 << 4 | $9
0AF6F                           	enemy $F, $5, Enemy_Spark3
0AF6F 30 00                     	.db Enemy_Spark3, $F << 4 | $5
0AF71                           
0AF71                           ; Page 3
0AF71                           +	distTo + ; $01 (0 enemies)
0AF71 00                        	.db (+ - $)
0AF72                           
0AF72                           ; Page 4
0AF72                           +	distTo + ; $01 (0 enemies)
0AF72 00                        	.db (+ - $)
0AF73                           
0AF73                           ; End of enemy data
0AF73                           +
0AF73                           include "src/levels/7/7-2/7-2-area4-enemies.asm"
0AF73                           ; Level 7-2, Area 4
0AF73                           
0AF73                           EnemyData_Level_7_2_Area4:
0AF73                           
0AF73                           ; Page 0
0AF73                           	distTo + ; $09 (4 enemies)
0AF73 00                        	.db (+ - $)
0AF74                           	enemy $2, $3, Enemy_Spark2
0AF74 2F 00                     	.db Enemy_Spark2, $2 << 4 | $3
0AF76                           	enemy $8, $3, Enemy_Spark2
0AF76 2F 00                     	.db Enemy_Spark2, $8 << 4 | $3
0AF78                           	enemy $E, $3, Enemy_Spark2
0AF78 2F 00                     	.db Enemy_Spark2, $E << 4 | $3
0AF7A                           	enemy $C, $C, Enemy_Spark4
0AF7A 31 00                     	.db Enemy_Spark4, $C << 4 | $C
0AF7C                           
0AF7C                           ; Page 1
0AF7C                           +	distTo + ; $05 (2 enemies)
0AF7C 00                        	.db (+ - $)
0AF7D                           	enemy $B, $B, Enemy_Spark2
0AF7D 2F 00                     	.db Enemy_Spark2, $B << 4 | $B
0AF7F                           	enemy $F, $B, Enemy_Spark2
0AF7F 2F 00                     	.db Enemy_Spark2, $F << 4 | $B
0AF81                           
0AF81                           ; Page 2
0AF81                           +	distTo + ; $03 (1 enemy)
0AF81 00                        	.db (+ - $)
0AF82                           	enemy $5, $3, Enemy_Spark2
0AF82 2F 00                     	.db Enemy_Spark2, $5 << 4 | $3
0AF84                           
0AF84                           ; Page 3
0AF84                           +	distTo + ; $09 (4 enemies)
0AF84 00                        	.db (+ - $)
0AF85                           	enemy $2, $9, Enemy_Spark4
0AF85 31 00                     	.db Enemy_Spark4, $2 << 4 | $9
0AF87                           	enemy $4, $3, Enemy_Spark1
0AF87 2E 00                     	.db Enemy_Spark1, $4 << 4 | $3
0AF89                           	enemy $A, $3, Enemy_Spark2
0AF89 2F 00                     	.db Enemy_Spark2, $A << 4 | $3
0AF8B                           	enemy $5, $9, Enemy_Spark4
0AF8B 31 00                     	.db Enemy_Spark4, $5 << 4 | $9
0AF8D                           
0AF8D                           ; Page 4
0AF8D                           +	distTo + ; $01 (0 enemies)
0AF8D 00                        	.db (+ - $)
0AF8E                           
0AF8E                           ; Page 5
0AF8E                           +	distTo + ; $01 (0 enemies)
0AF8E 00                        	.db (+ - $)
0AF8F                           
0AF8F                           ; Page 6
0AF8F                           +	distTo + ; $01 (0 enemies)
0AF8F 00                        	.db (+ - $)
0AF90                           
0AF90                           ; Page 7
0AF90                           +	distTo + ; $01 (0 enemies)
0AF90 00                        	.db (+ - $)
0AF91                           
0AF91                           ; Page 8
0AF91                           +	distTo + ; $01 (0 enemies)
0AF91 00                        	.db (+ - $)
0AF92                           
0AF92                           ; Page 9
0AF92                           +	distTo + ; $05 (2 enemies)
0AF92 00                        	.db (+ - $)
0AF93                           	enemy $4, $9, Enemy_CrystalBall
0AF93 44 00                     	.db Enemy_CrystalBall, $4 << 4 | $9
0AF95                           	enemy $B, $7, Enemy_HawkmouthBoss
0AF95 2D 00                     	.db Enemy_HawkmouthBoss, $B << 4 | $7
0AF97                           
0AF97                           ; Page A
0AF97                           +	distTo + ; $01 (0 enemies)
0AF97 00                        	.db (+ - $)
0AF98                           
0AF98                           ; End of enemy data
0AF98                           +
0AF98                           include "src/levels/7/7-2/7-2-area5-enemies.asm"
0AF98                           ; Level 7-2, Area 5
0AF98                           
0AF98                           EnemyData_Level_7_2_Area5:
0AF98                           
0AF98                           ; Page 0
0AF98                           	distTo + ; $01 (0 enemies)
0AF98 00                        	.db (+ - $)
0AF99                           
0AF99                           ; Page 1
0AF99                           +	distTo + ; $01 (0 enemies)
0AF99 00                        	.db (+ - $)
0AF9A                           
0AF9A                           ; Page 2
0AF9A                           +	distTo + ; $05 (2 enemies)
0AF9A 00                        	.db (+ - $)
0AF9B                           	enemy $1, $A, Enemy_VegetableThrower
0AF9B 4A 00                     	.db Enemy_VegetableThrower, $1 << 4 | $A
0AF9D                           	enemy $A, $7, Enemy_BossWart
0AF9D 6C 00                     	.db Enemy_BossWart, $A << 4 | $7
0AF9F                           
0AF9F                           ; Page 3
0AF9F                           +	distTo + ; $01 (0 enemies)
0AF9F 00                        	.db (+ - $)
0AFA0                           
0AFA0                           ; End of enemy data
0AFA0                           +
0AFA0                           include "src/levels/7/7-2/7-2-area6-enemies.asm"
0AFA0                           ; Level 7-2, Area 6
0AFA0                           
0AFA0                           EnemyData_Level_7_2_Area6:
0AFA0                           
0AFA0                           ; Page 0
0AFA0                           	distTo + ; $03 (1 enemy)
0AFA0 00                        	.db (+ - $)
0AFA1                           	enemy $8, $A, Enemy_Spark2
0AFA1 2F 00                     	.db Enemy_Spark2, $8 << 4 | $A
0AFA3                           
0AFA3                           ; Page 1
0AFA3                           +	distTo + ; $07 (3 enemies)
0AFA3 00                        	.db (+ - $)
0AFA4                           	enemy $7, $3, Enemy_Spark1
0AFA4 2E 00                     	.db Enemy_Spark1, $7 << 4 | $3
0AFA6                           	enemy $8, $5, Enemy_Spark4
0AFA6 31 00                     	.db Enemy_Spark4, $8 << 4 | $5
0AFA8                           	enemy $8, $C, Enemy_Spark2
0AFA8 2F 00                     	.db Enemy_Spark2, $8 << 4 | $C
0AFAA                           
0AFAA                           ; Page 2
0AFAA                           +	distTo + ; $05 (2 enemies)
0AFAA 00                        	.db (+ - $)
0AFAB                           	enemy $8, $7, Enemy_Spark4
0AFAB 31 00                     	.db Enemy_Spark4, $8 << 4 | $7
0AFAD                           	enemy $8, $E, Enemy_Spark2
0AFAD 2F 00                     	.db Enemy_Spark2, $8 << 4 | $E
0AFAF                           
0AFAF                           ; Page 3
0AFAF                           +	distTo + ; $05 (2 enemies)
0AFAF 00                        	.db (+ - $)
0AFB0                           	enemy $5, $0, Enemy_Spark4
0AFB0 31 00                     	.db Enemy_Spark4, $5 << 4 | $0
0AFB2                           	enemy $A, $0, Enemy_Spark3
0AFB2 30 00                     	.db Enemy_Spark3, $A << 4 | $0
0AFB4                           
0AFB4                           ; Page 4
0AFB4                           +	distTo + ; $01 (0 enemies)
0AFB4 00                        	.db (+ - $)
0AFB5                           
0AFB5                           ; Page 5
0AFB5                           +	distTo + ; $01 (0 enemies)
0AFB5 00                        	.db (+ - $)
0AFB6                           
0AFB6                           ; Page 6
0AFB6                           +	distTo + ; $01 (0 enemies)
0AFB6 00                        	.db (+ - $)
0AFB7                           
0AFB7                           ; Page 7
0AFB7                           +	distTo + ; $0D (6 enemies)
0AFB7 00                        	.db (+ - $)
0AFB8                           	enemy $6, $1, Enemy_Spark4
0AFB8 31 00                     	.db Enemy_Spark4, $6 << 4 | $1
0AFBA                           	enemy $A, $1, Enemy_Spark4
0AFBA 31 00                     	.db Enemy_Spark4, $A << 4 | $1
0AFBC                           	enemy $A, $3, Enemy_Spark2
0AFBC 2F 00                     	.db Enemy_Spark2, $A << 4 | $3
0AFBE                           	enemy $6, $8, Enemy_Spark4
0AFBE 31 00                     	.db Enemy_Spark4, $6 << 4 | $8
0AFC0                           	enemy $5, $A, Enemy_Spark2
0AFC0 2F 00                     	.db Enemy_Spark2, $5 << 4 | $A
0AFC2                           	enemy $A, $A, Enemy_Spark2
0AFC2 2F 00                     	.db Enemy_Spark2, $A << 4 | $A
0AFC4                           
0AFC4                           ; Page 8
0AFC4                           +	distTo + ; $05 (2 enemies)
0AFC4 00                        	.db (+ - $)
0AFC5                           	enemy $6, $1, Enemy_Spark2
0AFC5 2F 00                     	.db Enemy_Spark2, $6 << 4 | $1
0AFC7                           	enemy $A, $1, Enemy_Spark2
0AFC7 2F 00                     	.db Enemy_Spark2, $A << 4 | $1
0AFC9                           
0AFC9                           ; Page 9
0AFC9                           +	distTo + ; $01 (0 enemies)
0AFC9 00                        	.db (+ - $)
0AFCA                           
0AFCA                           ; Page A
0AFCA                           +	distTo + ; $01 (0 enemies)
0AFCA 00                        	.db (+ - $)
0AFCB                           
0AFCB                           ; End of enemy data
0AFCB                           +
0AFCB                           include "src/levels/7/7-2/7-2-area7-enemies.asm"
0AFCB                           ; Level 7-2, Area 7
0AFCB                           
0AFCB                           EnemyData_Level_7_2_Area7:
0AFCB                           
0AFCB                           ; Page 0
0AFCB                           	distTo + ; $09 (4 enemies)
0AFCB 00                        	.db (+ - $)
0AFCC                           	enemy $7, $6, Enemy_ShyguyPink
0AFCC 03 00                     	.db Enemy_ShyguyPink, $7 << 4 | $6
0AFCE                           	enemy $6, $9, Enemy_SnifitPink
0AFCE 07 00                     	.db Enemy_SnifitPink, $6 << 4 | $9
0AFD0                           	enemy $9, $9, Enemy_SnifitPink
0AFD0 07 00                     	.db Enemy_SnifitPink, $9 << 4 | $9
0AFD2                           	enemy $8, $F, Enemy_Spark3
0AFD2 30 00                     	.db Enemy_Spark3, $8 << 4 | $F
0AFD4                           
0AFD4                           ; Page 1
0AFD4                           +	distTo + ; $09 (4 enemies)
0AFD4 00                        	.db (+ - $)
0AFD5                           	enemy $A, $2, Enemy_Spark2
0AFD5 2F 00                     	.db Enemy_Spark2, $A << 4 | $2
0AFD7                           	enemy $7, $3, Enemy_Spark4
0AFD7 31 00                     	.db Enemy_Spark4, $7 << 4 | $3
0AFD9                           	enemy $6, $8, Enemy_Spark4
0AFD9 31 00                     	.db Enemy_Spark4, $6 << 4 | $8
0AFDB                           	enemy $A, $D, Enemy_Spark1
0AFDB 2E 00                     	.db Enemy_Spark1, $A << 4 | $D
0AFDD                           
0AFDD                           ; Page 2
0AFDD                           +	distTo + ; $07 (3 enemies)
0AFDD 00                        	.db (+ - $)
0AFDE                           	enemy $8, $0, Enemy_Spark4
0AFDE 31 00                     	.db Enemy_Spark4, $8 << 4 | $0
0AFE0                           	enemy $9, $7, Enemy_Spark4
0AFE0 31 00                     	.db Enemy_Spark4, $9 << 4 | $7
0AFE2                           	enemy $7, $F, Enemy_Spark1
0AFE2 2E 00                     	.db Enemy_Spark1, $7 << 4 | $F
0AFE4                           
0AFE4                           ; Page 3
0AFE4                           +	distTo + ; $05 (2 enemies)
0AFE4 00                        	.db (+ - $)
0AFE5                           	enemy $8, $0, Enemy_SnifitPink
0AFE5 07 00                     	.db Enemy_SnifitPink, $8 << 4 | $0
0AFE7                           	enemy $8, $4, Enemy_ShyguyRed
0AFE7 01 00                     	.db Enemy_ShyguyRed, $8 << 4 | $4
0AFE9                           
0AFE9                           ; Page 4
0AFE9                           +	distTo + ; $01 (0 enemies)
0AFE9 00                        	.db (+ - $)
0AFEA                           
0AFEA                           ; End of enemy data
0AFEA                           +
0AFEA                           include "src/levels/7/7-2/7-2-area8-enemies.asm"
0AFEA                           ; Level 7-2, Area 8
0AFEA                           
0AFEA                           EnemyData_Level_7_2_Area8:
0AFEA                           
0AFEA                           ; Page 0
0AFEA                           	distTo + ; $05 (2 enemies)
0AFEA 00                        	.db (+ - $)
0AFEB                           	enemy $9, $C, Enemy_Spark4
0AFEB 31 00                     	.db Enemy_Spark4, $9 << 4 | $C
0AFED                           	enemy $7, $E, Enemy_Spark3
0AFED 30 00                     	.db Enemy_Spark3, $7 << 4 | $E
0AFEF                           
0AFEF                           ; Page 1
0AFEF                           +	distTo + ; $07 (3 enemies)
0AFEF 00                        	.db (+ - $)
0AFF0                           	enemy $3, $5, Enemy_Spark2
0AFF0 2F 00                     	.db Enemy_Spark2, $3 << 4 | $5
0AFF2                           	enemy $7, $7, Enemy_Spark3
0AFF2 30 00                     	.db Enemy_Spark3, $7 << 4 | $7
0AFF4                           	enemy $A, $8, Enemy_Spark4
0AFF4 31 00                     	.db Enemy_Spark4, $A << 4 | $8
0AFF6                           
0AFF6                           ; Page 2
0AFF6                           +	distTo + ; $05 (2 enemies)
0AFF6 00                        	.db (+ - $)
0AFF7                           	enemy $6, $7, Enemy_Spark4
0AFF7 31 00                     	.db Enemy_Spark4, $6 << 4 | $7
0AFF9                           	enemy $B, $A, Enemy_Spark4
0AFF9 31 00                     	.db Enemy_Spark4, $B << 4 | $A
0AFFB                           
0AFFB                           ; Page 3
0AFFB                           +	distTo + ; $01 (0 enemies)
0AFFB 00                        	.db (+ - $)
0AFFC                           
0AFFC                           ; Page 4
0AFFC                           +	distTo + ; $09 (4 enemies)
0AFFC 00                        	.db (+ - $)
0AFFD                           	enemy $4, $2, Enemy_Spark3
0AFFD 30 00                     	.db Enemy_Spark3, $4 << 4 | $2
0AFFF                           	enemy $8, $2, Enemy_Spark4
0AFFF 31 00                     	.db Enemy_Spark4, $8 << 4 | $2
0B001                           	enemy $B, $2, Enemy_Spark3
0B001 30 00                     	.db Enemy_Spark3, $B << 4 | $2
0B003                           	enemy $7, $4, Enemy_Spark2
0B003 2F 00                     	.db Enemy_Spark2, $7 << 4 | $4
0B005                           
0B005                           ; Page 5
0B005                           +	distTo + ; $09 (4 enemies)
0B005 00                        	.db (+ - $)
0B006                           	enemy $5, $3, Enemy_Spark2
0B006 2F 00                     	.db Enemy_Spark2, $5 << 4 | $3
0B008                           	enemy $9, $3, Enemy_Spark2
0B008 2F 00                     	.db Enemy_Spark2, $9 << 4 | $3
0B00A                           	enemy $5, $4, Enemy_Spark3
0B00A 30 00                     	.db Enemy_Spark3, $5 << 4 | $4
0B00C                           	enemy $7, $6, Enemy_Spark2
0B00C 2F 00                     	.db Enemy_Spark2, $7 << 4 | $6
0B00E                           
0B00E                           ; Page 6
0B00E                           +	distTo + ; $01 (0 enemies)
0B00E 00                        	.db (+ - $)
0B00F                           
0B00F                           ; Page 7
0B00F                           +	distTo + ; $01 (0 enemies)
0B00F 00                        	.db (+ - $)
0B010                           
0B010                           ; End of enemy data
0B010                           +
0B010                           include "src/levels/7/7-2/7-2-area9-enemies.asm"
0B010                           ; Level 7-2, Area 9
0B010                           
0B010                           EnemyData_Level_7_2_Area9:
0B010                           
0B010                           ; Page 0
0B010                           	distTo + ; $01 (0 enemies)
0B010 00                        	.db (+ - $)
0B011                           
0B011                           ; Page 1
0B011                           +	distTo + ; $01 (0 enemies)
0B011 00                        	.db (+ - $)
0B012                           
0B012                           ; Page 2
0B012                           +	distTo + ; $03 (1 enemy)
0B012 00                        	.db (+ - $)
0B013                           	enemy $7, $9, Enemy_PanserStationaryFiresAngled
0B013 23 00                     	.db Enemy_PanserStationaryFiresAngled, $7 << 4 | $9
0B015                           
0B015                           ; Page 3
0B015                           +	distTo + ; $05 (2 enemies)
0B015 00                        	.db (+ - $)
0B016                           	enemy $2, $0, Enemy_Tweeter
0B016 02 00                     	.db Enemy_Tweeter, $2 << 4 | $0
0B018                           	enemy $D, $0, Enemy_Tweeter
0B018 02 00                     	.db Enemy_Tweeter, $D << 4 | $0
0B01A                           
0B01A                           ; Page 4
0B01A                           +	distTo + ; $01 (0 enemies)
0B01A 00                        	.db (+ - $)
0B01B                           
0B01B                           ; End of enemy data
0B01B                           +
0B01B                           
0B01B                           ; World 7-3
0B01B                           include "src/levels/7/7-3/7-3-area0-enemies.asm"
0B01B                           ; Level 7-3, Area 0
0B01B                           
0B01B                           EnemyData_Level_7_3_Area0:
0B01B                           
0B01B                           ; Page 0
0B01B                           	distTo + ; $01 (0 enemies)
0B01B 00                        	.db (+ - $)
0B01C                           
0B01C                           ; End of enemy data
0B01C                           +
0B01C                           include "src/levels/7/7-3/7-3-area1-enemies.asm"
0B01C                           ; Level 7-3, Area 1
0B01C                           
0B01C                           EnemyData_Level_7_3_Area1:
0B01C                           
0B01C                           ; Page 0
0B01C                           	distTo + ; $01 (0 enemies)
0B01C 00                        	.db (+ - $)
0B01D                           
0B01D                           ; End of enemy data
0B01D                           +
0B01D                           include "src/levels/7/7-3/7-3-area2-enemies.asm"
0B01D                           ; Level 7-3, Area 2
0B01D                           
0B01D                           EnemyData_Level_7_3_Area2:
0B01D                           
0B01D                           ; Page 0
0B01D                           	distTo + ; $01 (0 enemies)
0B01D 00                        	.db (+ - $)
0B01E                           
0B01E                           ; End of enemy data
0B01E                           +
0B01E                           include "src/levels/7/7-3/7-3-area3-enemies.asm"
0B01E                           ; Level 7-3, Area 3
0B01E                           
0B01E                           EnemyData_Level_7_3_Area3:
0B01E                           
0B01E                           ; Page 0
0B01E                           	distTo + ; $01 (0 enemies)
0B01E 00                        	.db (+ - $)
0B01F                           
0B01F                           ; End of enemy data
0B01F                           +
0B01F                           include "src/levels/7/7-3/7-3-area4-enemies.asm"
0B01F                           ; Level 7-3, Area 4
0B01F                           
0B01F                           EnemyData_Level_7_3_Area4:
0B01F                           
0B01F                           ; Unused
0B01F                           
0B01F                           ; Page 0
0B01F                           	distTo + ; $01 (0 enemies)
0B01F 00                        	.db (+ - $)
0B020                           
0B020                           ; Page 1
0B020                           +	distTo + ; $01 (0 enemies)
0B020 00                        	.db (+ - $)
0B021                           
0B021                           ; Page 2
0B021                           +	distTo + ; $01 (0 enemies)
0B021 00                        	.db (+ - $)
0B022                           
0B022                           ; Page 3
0B022                           +	distTo + ; $01 (0 enemies)
0B022 00                        	.db (+ - $)
0B023                           
0B023                           ; Page 4
0B023                           +	distTo + ; $01 (0 enemies)
0B023 00                        	.db (+ - $)
0B024                           
0B024                           ; Page 5
0B024                           +	distTo + ; $01 (0 enemies)
0B024 00                        	.db (+ - $)
0B025                           
0B025                           ; End of enemy data
0B025                           +
0B025 FF FF FF FF FF FF FF FF.. .pad $c000, $ff
0C000                           
0C000                           ; ----------------------------------------
0C000                           ; Banks A and B. Mostly bonus chance,
0C000                           ; character stats, and some PPU commands.
0C000                           ; Lots of empty space here too
0C000                           .base $8000
08000                           .include "src/prg-a-b.asm"
08000                           ;
08000                           ; Bank A & Bank B
08000                           ; ===============
08000                           ;
08000                           ; What's inside:
08000                           ;
08000                           ;   - Level title card background data and palettes
08000                           ;   - Bonus chance background data and palettes
08000                           ;   - Character select palettes
08000                           ;   - Character data (physics, palettes, etc.)
08000                           ;   - Character stats bootstrapping
08000                           ;
08000                           
08000                           ;
08000                           ; This title card is used for every world from 1 to 6.
08000                           ; The only difference is the loaded CHR banks.
08000                           ;
08000                           World1thru6TitleCard:
08000 FB FB B0 B2 FB FB FB FB.. 	.db $FB, $FB, $B0, $B2, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB
08010 FB FB B1 B3 FB FB FB FB.. 	.db $FB, $FB, $B1, $B3, $FB, $FB, $FB, $FB, $FB, $FB, $C0, $C1, $FB, $FB, $FB, $FB ; $10
08020 FB FB B4 B5 FB FB FB FB.. 	.db $FB, $FB, $B4, $B5, $FB, $FB, $FB, $FB, $B6, $B8, $BA, $B8, $BA, $BC, $FB, $FB ; $20
08030 FB FB B4 B5 FB FB FB FB.. 	.db $FB, $FB, $B4, $B5, $FB, $FB, $FB, $FB, $B7, $B9, $BB, $B9, $BB, $BD, $FB, $FB ; $30
08040 FB FB B4 B5 FB FB FB FB.. 	.db $FB, $FB, $B4, $B5, $FB, $FB, $FB, $FB, $B7, $B9, $BB, $B9, $BB, $BD, $FB, $FB ; $40
08050 FB FB B4 B5 C0 C1 FB FB.. 	.db $FB, $FB, $B4, $B5, $C0, $C1, $FB, $FB, $B7, $B9, $BB, $B9, $BB, $BD, $FB, $FB ; $50
08060 CA CC CA CC CA CC CA CC.. 	.db $CA, $CC, $CA, $CC, $CA, $CC, $CA, $CC, $CA, $CC, $CA, $CC, $CA, $CC, $CA, $CC ; $60
08070 CB CD CB CD CB CD CB CD.. 	.db $CB, $CD, $CB, $CD, $CB, $CD, $CB, $CD, $CB, $CD, $CB, $CD, $CB, $CD, $CB, $CD ; $70
08080 CE CF CE CF CE CF CE CF.. 	.db $CE, $CF, $CE, $CF, $CE, $CF, $CE, $CF, $CE, $CF, $CE, $CF, $CE, $CF, $CE, $CF ; $80
08090 CF CE CF CE CF CE CF CE.. 	.db $CF, $CE, $CF, $CE, $CF, $CE, $CF, $CE, $CF, $CE, $CF, $CE, $CF, $CE, $CF, $CE ; $90
080A0                           
080A0                           ;
080A0                           ; This one is the special one used for World 7
080A0                           ;
080A0                           World7TitleCard:
080A0 FB FB B0 B2 FB FB FB FB.. 	.db $FB, $FB, $B0, $B2, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB
080B0 FB FB B1 B3 FB FB FB FB.. 	.db $FB, $FB, $B1, $B3, $FB, $FB, $FB, $FB, $FB, $FB, $C0, $C1, $FB, $FB, $FB, $FB ; $10
080C0 FB FB B1 B3 FB FB FB FB.. 	.db $FB, $FB, $B1, $B3, $FB, $FB, $FB, $FB, $B6, $B8, $BA, $B8, $BA, $BC, $FB, $FB ; $20
080D0 FB FB B1 B3 FB FB FB FB.. 	.db $FB, $FB, $B1, $B3, $FB, $FB, $FB, $FB, $B7, $B9, $BB, $B9, $BB, $BD, $FB, $FB ; $30
080E0 FB FB B1 B3 FB FB FB FB.. 	.db $FB, $FB, $B1, $B3, $FB, $FB, $FB, $FB, $CA, $FC, $FC, $FC, $FC, $CC, $FB, $FB ; $40
080F0 FB FB B1 B3 C0 C1 FB FB.. 	.db $FB, $FB, $B1, $B3, $C0, $C1, $FB, $FB, $CA, $FC, $FC, $FC, $FC, $CC, $FB, $FB ; $50
08100 A8 AC AA AC AA AC AA AC.. 	.db $A8, $AC, $AA, $AC, $AA, $AC, $AA, $AC, $AA, $AC, $AA, $AC, $AA, $AC, $AA, $AE ; $60
08110 A9 AD AB AD AB AD AB AD.. 	.db $A9, $AD, $AB, $AD, $AB, $AD, $AB, $AD, $AB, $AD, $AB, $AD, $AB, $AD, $AB, $AF ; $70
08120 FB FB FB FB FB FB FB FB.. 	.db $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB ; $80
08130 FB FB FB FB FB FB FB FB.. 	.db $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB ; $90
08140                           
08140                           BonusChanceLayout:
08140 20 00 60 FD               	.db $20, $00, $60, $FD
08144 20 20 60 FD               	.db $20, $20, $60, $FD
08148 20 40 60 FD               	.db $20, $40, $60, $FD
0814C 20 60 60 FD               	.db $20, $60, $60, $FD
08150 23 40 60 FD               	.db $23, $40, $60, $FD
08154 23 60 60 FD               	.db $23, $60, $60, $FD
08158 23 80 60 FD               	.db $23, $80, $60, $FD
0815C 23 A0 60 FD               	.db $23, $A0, $60, $FD
08160 20 80 D6 FD               	.db $20, $80, $D6, $FD
08164 20 81 D6 FD               	.db $20, $81, $D6, $FD
08168 20 82 D6 FD               	.db $20, $82, $D6, $FD
0816C 20 9D D6 FD               	.db $20, $9D, $D6, $FD
08170 20 9E D6 FD               	.db $20, $9E, $D6, $FD
08174 20 9F D6 FD               	.db $20, $9F, $D6, $FD
08178                           
08178 20 68 10                  	.db $20, $68, $10
0817B 48 4A 4C 4E 50 51 52 53.. 	.db $48, $4A, $4C, $4E, $50, $51, $52, $53, $54, $55, $56, $57, $58, $5A, $5C, $5E
0818B                           
0818B 20 83 09 FD FD 22 23 24.. 	.db $20, $83, $09, $FD, $FD, $22, $23, $24, $49, $4B, $4D, $4F
08197 20 94 09 59 5B 5D 5F 2E.. 	.db $20, $94, $09, $59, $5B, $5D, $5F, $2E, $2F, $30, $FD, $FD
081A3 20 A3 04 FD 25 26 27      	.db $20, $A3, $04, $FD, $25, $26, $27
081AA 20 B9 04 31 32 33 FD      	.db $20, $B9, $04, $31, $32, $33, $FD
081B1 20 C3 04 FD 28 29 2A      	.db $20, $C3, $04, $FD, $28, $29, $2A
081B8 20 D9 04 34 35 36 FD      	.db $20, $D9, $04, $34, $35, $36, $FD
081BF 20 E3 03 2B 2C 2D         	.db $20, $E3, $03, $2B, $2C, $2D
081C5 20 FA 03 37 38 39         	.db $20, $FA, $03, $37, $38, $39
081CB 21 03 02 3A 3B            	.db $21, $03, $02, $3A, $3B
081D0 21 1B 02 40 41            	.db $21, $1B, $02, $40, $41
081D5 21 23 D0 3C               	.db $21, $23, $D0, $3C
081D9 21 3C D0 42               	.db $21, $3C, $D0, $42
081DD 22 02 02 3E 3F            	.db $22, $02, $02, $3E, $3F
081E2 22 1C 02 61 62            	.db $22, $1C, $02, $61, $62
081E7 22 22 02 43 44            	.db $22, $22, $02, $43, $44
081EC 22 3C 02 63 64            	.db $22, $3C, $02, $63, $64
081F1 22 43 01 45               	.db $22, $43, $01, $45
081F5 22 5C 01 65               	.db $22, $5C, $01, $65
081F9 22 C4 02 A6 A8            	.db $22, $C4, $02, $A6, $A8
081FE 22 E4 02 A7 A9            	.db $22, $E4, $02, $A7, $A9
08203 22 FA 04 80 82 88 8A      	.db $22, $FA, $04, $80, $82, $88, $8A
0820A 23 04 02 90 92            	.db $23, $04, $02, $90, $92
0820F 23 14 02 9E A0            	.db $23, $14, $02, $9E, $A0
08214 23 1A 04 81 83 89 8B      	.db $23, $1A, $04, $81, $83, $89, $8B
0821B 23 23 03 46 91 93         	.db $23, $23, $03, $46, $91, $93
08221 23 2A 02 A2 A4            	.db $23, $2A, $02, $A2, $A4
08226                           
08226 23 2E 10                  	.db $23, $2E, $10
08229 67 6C 6E 70 72 69 9F A1.. 	.db $67, $6C, $6E, $70, $72, $69, $9F, $A1, $75, $98, $9A, $FB, $84, $86, $8C, $8E
08239                           
08239 23 43 1B                  	.db $23, $43, $1B
0823C 47 94 96 74 74 74 74 A3.. 	.db $47, $94, $96, $74, $74, $74, $74, $A3, $A5, $74, $66, $68, $6D, $6F, $71, $73
0824C 6A 6B 74 74 99 9B 74 85.. 	.db $6A, $6B, $74, $74, $99, $9B, $74, $85, $87, $8D, $8F
08257                           
08257 23 64 05 95 97 FD AA AB   	.db $23, $64, $05, $95, $97, $FD, $AA, $AB
0825F 23 77 05 9C 9D AA AB AB   	.db $23, $77, $05, $9C, $9D, $AA, $AB, $AB
08267 23 89 02 AA AB            	.db $23, $89, $02, $AA, $AB
0826C 20 C9 0E 78 AC B0 B4 B7.. 	.db $20, $C9, $0E, $78, $AC, $B0, $B4, $B7, $BA, $FB, $BC, $BE, $C1, $C4, $C7, $CB, $7C
0827D                           
0827D 20 E8 10                  	.db $20, $E8, $10
08280 1C 79 AD B1 B5 B8 BB FB.. 	.db $1C, $79, $AD, $B1, $B5, $B8, $BB, $FB, $BD, $BF, $C2, $C5, $C8, $CC, $7D, $1E
08290                           
08290 21 08 10                  	.db $21, $08, $10
08293 1D 7A AE B2 B6 B9 FB FB.. 	.db $1D, $7A, $AE, $B2, $B6, $B9, $FB, $FB, $FB, $C0, $C3, $C6, $C9, $CD, $7E, $1F
082A3                           
082A3 21 29 03 7B AF B3         	.db $21, $29, $03, $7B, $AF, $B3
082A9 21 34 03 CA CE 7F         	.db $21, $34, $03, $CA, $CE, $7F
082AF 21 6A 0C 14 10 10 16 14.. 	.db $21, $6A, $0C, $14, $10, $10, $16, $14, $10, $10, $16, $14, $10, $10, $16
082BE 21 8A 0C 11 FC FC 12 11.. 	.db $21, $8A, $0C, $11, $FC, $FC, $12, $11, $FC, $FC, $12, $11, $FC, $FC, $12
082CD 21 AA 0C 11 FC FC 12 11.. 	.db $21, $AA, $0C, $11, $FC, $FC, $12, $11, $FC, $FC, $12, $11, $FC, $FC, $12
082DC 21 CA 0C 15 13 13 17 15.. 	.db $21, $CA, $0C, $15, $13, $13, $17, $15, $13, $13, $17, $15, $13, $13, $17
082EB 22 0D 02 18 1A            	.db $22, $0D, $02, $18, $1A
082F0 22 2D 02 19 1B            	.db $22, $2D, $02, $19, $1B
082F5 23 D2 04 80 A0 A0 20      	.db $23, $D2, $04, $80, $A0, $A0, $20
082FC 23 DA 04 88 AA AA 22      	.db $23, $DA, $04, $88, $AA, $AA, $22
08303 23 E4 01 0A               	.db $23, $E4, $01, $0A
08307 23 EA 05 A0 A0 A0 A0 20   	.db $23, $EA, $05, $A0, $A0, $A0, $A0, $20
0830F 00                        	.db $00
08310                           
08310                           
08310                           ;
08310                           ; Copies the Bonus Chance PPU data
08310                           ;
08310                           ; This copies in two $100 byte chunks, the second of which includes extra data
08310                           ; that is never used because of the terminating $00
08310                           ;
08310                           CopyBonusChanceLayoutToRAM:
08310 A0 00                     	LDY #$00
08312                           CopyBonusChanceLayoutToRAM_Loop1:
08312 B9 40 81                  	LDA BonusChanceLayout, Y ; Blindly copy $100 bytes from $8140 to $7400
08315 99 00 74                  	STA PPUBuffer_BonusChanceLayout, Y
08318 88                        	DEY
08319 D0 F7                     	BNE CopyBonusChanceLayoutToRAM_Loop1
0831B                           
0831B A0 00                     	LDY #$00
0831D                           CopyBonusChanceLayoutToRAM_Loop2:
0831D                           	; Blindly copy $100 more bytes from $8240 to $7500
0831D                           	; That range includes this code! clap. clap.
0831D B9 40 82                  	LDA BonusChanceLayout + $100, Y
08320 99 00 75                  	STA PPUBuffer_BonusChanceLayout + $100, Y
08323 88                        	DEY
08324 D0 F7                     	BNE CopyBonusChanceLayoutToRAM_Loop2
08326                           
08326 60                        	RTS
08327                           
08327                           ; =============== S U B R O U T I N E =======================================
08327                           
08327                           DrawTitleCardWorldImage:
08327 AD 35 06                  	LDA CurrentWorld
0832A C9 06                     	CMP #6
0832C F0 00                     	BEQ loc_BANKA_8392 ; Special case for World 7's title card
0832E                           
0832E A9 25                     	LDA #$25
08330 85 00                     	STA byte_RAM_0
08332 A9 C8                     	LDA #$C8
08334 85 01                     	STA byte_RAM_1
08336 A0 00                     	LDY #$00
08338                           
08338                           loc_BANKA_8338:
08338 A2 0F                     	LDX #$0F
0833A AD 02 20                  	LDA PPUSTATUS
0833D A5 00                     	LDA byte_RAM_0
0833F 8D 06 20                  	STA PPUADDR
08342                           
08342                           loc_BANKA_8342:
08342 A5 01                     	LDA byte_RAM_1
08344 8D 06 20                  	STA PPUADDR
08347                           
08347                           loc_BANKA_8347:
08347 B9 00 80                  	LDA World1thru6TitleCard, Y
0834A 8D 07 20                  	STA PPUDATA
0834D C8                        	INY
0834E CA                        	DEX
0834F 10 F6                     	BPL loc_BANKA_8347
08351                           
08351 C0 A0                     	CPY #$A0
08353 B0 00                     	BCS loc_BANKA_8364
08355                           
08355 A5 01                     	LDA byte_RAM_1
08357 69 20                     	ADC #$20
08359 85 01                     	STA byte_RAM_1
0835B A5 00                     	LDA byte_RAM_0
0835D 69 00                     	ADC #0
0835F 85 00                     	STA byte_RAM_0
08361 4C 38 83                  	JMP loc_BANKA_8338
08364                           
08364                           ; ---------------------------------------------------------------------------
08364                           
08364                           loc_BANKA_8364:
08364 AD 35 06                  	LDA CurrentWorld
08367 C9 01                     	CMP #1
08369 F0 00                     	BEQ loc_BANKA_8371
0836B                           
0836B C9 05                     	CMP #5
0836D F0 00                     	BEQ loc_BANKA_8371
0836F                           
0836F D0 00                     	BNE loc_BANKA_8389
08371                           
08371                           loc_BANKA_8371:
08371 29 80                     	AND #$80
08373 D0 00                     	BNE loc_BANKA_8389
08375                           
08375 A9 26                     	LDA #$26
08377 85 00                     	STA byte_RAM_0
08379 A9 88                     	LDA #$88
0837B 85 01                     	STA byte_RAM_1
0837D AD 35 06                  	LDA CurrentWorld
08380 09 80                     	ORA #$80
08382 8D 35 06                  	STA CurrentWorld
08385 A0 80                     	LDY #$80
08387 D0 AF                     	BNE loc_BANKA_8338
08389                           
08389                           loc_BANKA_8389:
08389 AD 35 06                  	LDA CurrentWorld
0838C 29 0F                     	AND #$F
0838E 8D 35 06                  	STA CurrentWorld
08391 60                        	RTS
08392                           
08392                           ; ---------------------------------------------------------------------------
08392                           
08392                           loc_BANKA_8392:
08392 A9 25                     	LDA #$25
08394 85 00                     	STA byte_RAM_0
08396 A9 C8                     	LDA #$C8
08398 85 01                     	STA byte_RAM_1
0839A A0 00                     	LDY #0
0839C                           
0839C                           loc_BANKA_839C:
0839C A2 0F                     	LDX #$F
0839E AD 02 20                  	LDA PPUSTATUS
083A1 A5 00                     	LDA byte_RAM_0
083A3 8D 06 20                  	STA PPUADDR
083A6 A5 01                     	LDA byte_RAM_1
083A8 8D 06 20                  	STA PPUADDR
083AB                           
083AB                           loc_BANKA_83AB:
083AB B9 A0 80                  	LDA World7TitleCard, Y
083AE 8D 07 20                  	STA PPUDATA
083B1 C8                        	INY
083B2 CA                        	DEX
083B3 10 F6                     	BPL loc_BANKA_83AB
083B5                           
083B5 C0 A0                     	CPY #$A0
083B7 B0 00                     	BCS locret_BANKA_83C8
083B9                           
083B9 A5 01                     	LDA byte_RAM_1
083BB 69 20                     	ADC #$20
083BD 85 01                     	STA byte_RAM_1
083BF A5 00                     	LDA byte_RAM_0
083C1 69 00                     	ADC #0
083C3 85 00                     	STA byte_RAM_0
083C5 4C 9C 83                  	JMP loc_BANKA_839C
083C8                           
083C8                           ; ---------------------------------------------------------------------------
083C8                           
083C8                           locret_BANKA_83C8:
083C8 60                        	RTS
083C9                           
083C9                           ; End of function DrawTitleCardWorldImage
083C9                           
083C9                           StatOffsets:
083C9 00                        	.db (MarioStats - CharacterStats)
083CA 00                        	.db (PrincessStats - CharacterStats)
083CB 00                        	.db (ToadStats - CharacterStats)
083CC 00                        	.db (LuigiStats - CharacterStats)
083CD                           
083CD                           CharacterStats:
083CD                           MarioStats:
083CD 00                        	.db $00 ; Pick-up Speed, frame 1/6 - pulling
083CE 04                        	.db $04 ; Pick-up Speed, frame 2/6 - pulling
083CF 02                        	.db $02 ; Pick-up Speed, frame 3/6 - ducking
083D0 01                        	.db $01 ; Pick-up Speed, frame 4/6 - ducking
083D1 04                        	.db $04 ; Pick-up Speed, frame 5/6 - ducking
083D2 07                        	.db $07 ; Pick-up Speed, frame 6/6 - ducking
083D3 B0                        	.db $B0 ; Jump Speed, still - no object
083D4 B0                        	.db $B0 ; Jump Speed, still - with object
083D5 98                        	.db $98 ; Jump Speed, charged - no object
083D6 98                        	.db $98 ; Jump Speed, charged - with object
083D7 A6                        	.db $A6 ; Jump Speed, running - no object
083D8 AA                        	.db $AA ; Jump Speed, running - with object
083D9 E0                        	.db $E0 ; Jump Speed - in quicksand
083DA 00                        	.db $00 ; Floating Time
083DB 07                        	.db $07 ; Gravity without Jump button pressed
083DC 04                        	.db $04 ; Gravity with Jump button pressed
083DD 08                        	.db $08 ; Gravity in quicksand
083DE 18                        	.db $18 ; Running Speed, right - no object
083DF 18                        	.db $18 ; Running Speed, right - with object
083E0 04                        	.db $04 ; Running Speed, right - in quicksand
083E1 E8                        	.db $E8 ; Running Speed, left - no object
083E2 E8                        	.db $E8 ; Running Speed, left - with object
083E3 FC                        	.db $FC ; Running Speed, left - in quicksand
083E4                           
083E4                           ToadStats:
083E4 00                        	.db $00 ; Pick-up Speed, frame 1/6 - pulling
083E5 01                        	.db $01 ; Pick-up Speed, frame 2/6 - pulling
083E6 01                        	.db $01 ; Pick-up Speed, frame 3/6 - ducking
083E7 01                        	.db $01 ; Pick-up Speed, frame 4/6 - ducking
083E8 01                        	.db $01 ; Pick-up Speed, frame 5/6 - ducking
083E9 02                        	.db $02 ; Pick-up Speed, frame 6/6 - ducking
083EA B2                        	.db $B2 ; Jump Speed, still - no object
083EB B2                        	.db $B2 ; Jump Speed, still - with object
083EC 98                        	.db $98 ; Jump Speed, charged - no object
083ED 98                        	.db $98 ; Jump Speed, charged - with object
083EE AD                        	.db $AD ; Jump Speed, running - no object
083EF AD                        	.db $AD ; Jump Speed, running - with object
083F0 E0                        	.db $E0 ; Jump Speed - in quicksand
083F1 00                        	.db $00 ; Floating Time
083F2 07                        	.db $07 ; Gravity without Jump button pressed
083F3 04                        	.db $04 ; Gravity with Jump button pressed
083F4 08                        	.db $08 ; Gravity in quicksand
083F5 18                        	.db $18 ; Running Speed, right - no object
083F6 1D                        	.db $1D ; Running Speed, right - with object
083F7 04                        	.db $04 ; Running Speed, right - in quicksand
083F8 E8                        	.db $E8 ; Running Speed, left - no object
083F9 E3                        	.db $E3 ; Running Speed, left - with object
083FA FC                        	.db $FC ; Running Speed, left - in quicksand
083FB                           
083FB                           LuigiStats:
083FB 00                        	.db $00 ; Pick-up Speed, frame 1/6 - pulling
083FC 04                        	.db $04 ; Pick-up Speed, frame 2/6 - pulling
083FD 02                        	.db $02 ; Pick-up Speed, frame 3/6 - ducking
083FE 01                        	.db $01 ; Pick-up Speed, frame 4/6 - ducking
083FF 04                        	.db $04 ; Pick-up Speed, frame 5/6 - ducking
08400 07                        	.db $07 ; Pick-up Speed, frame 6/6 - ducking
08401 D6                        	.db $D6 ; Jump Speed, still - no object
08402 D6                        	.db $D6 ; Jump Speed, still - with object
08403 C9                        	.db $C9 ; Jump Speed, charged - no object
08404 C9                        	.db $C9 ; Jump Speed, charged - with object
08405 D0                        	.db $D0 ; Jump Speed, running - no object
08406 D4                        	.db $D4 ; Jump Speed, running - with object
08407 E0                        	.db $E0 ; Jump Speed - in quicksand
08408 00                        	.db $00 ; Floating Time
08409 02                        	.db $02 ; Gravity without Jump button pressed
0840A 01                        	.db $01 ; Gravity with Jump button pressed
0840B 08                        	.db $08 ; Gravity in quicksand
0840C 18                        	.db $18 ; Running Speed, right - no object
0840D 16                        	.db $16 ; Running Speed, right - with object
0840E 04                        	.db $04 ; Running Speed, right - in quicksand
0840F E8                        	.db $E8 ; Running Speed, left - no object
08410 EA                        	.db $EA ; Running Speed, left - with object
08411 FC                        	.db $FC ; Running Speed, left - in quicksand
08412                           
08412                           PrincessStats:
08412 00                        	.db $00 ; Pick-up Speed, frame 1/6 - pulling
08413 06                        	.db $06 ; Pick-up Speed, frame 2/6 - pulling
08414 04                        	.db $04 ; Pick-up Speed, frame 3/6 - ducking
08415 02                        	.db $02 ; Pick-up Speed, frame 4/6 - ducking
08416 06                        	.db $06 ; Pick-up Speed, frame 5/6 - ducking
08417 0C                        	.db $0C ; Pick-up Speed, frame 6/6 - ducking
08418 B3                        	.db $B3 ; Jump Speed, still - no object
08419 B3                        	.db $B3 ; Jump Speed, still - with object
0841A 98                        	.db $98 ; Jump Speed, charged - no object
0841B 98                        	.db $98 ; Jump Speed, charged - with object
0841C AC                        	.db $AC ; Jump Speed, running - no object
0841D B3                        	.db $B3 ; Jump Speed, running - with object
0841E E0                        	.db $E0 ; Jump Speed - in quicksand
0841F 3C                        	.db $3C ; Floating Time
08420 07                        	.db $07 ; Gravity without Jump button pressed
08421 04                        	.db $04 ; Gravity with Jump button pressed
08422 08                        	.db $08 ; Gravity in quicksand
08423 18                        	.db $18 ; Running Speed, right - no object
08424 15                        	.db $15 ; Running Speed, right - with object
08425 04                        	.db $04 ; Running Speed, right - in quicksand
08426 E8                        	.db $E8 ; Running Speed, left - no object
08427 EB                        	.db $EB ; Running Speed, left - with object
08428 FC                        	.db $FC ; Running Speed, left - in quicksand
08429                           
08429                           CharacterPalette:
08429                           MarioPalette:
08429 0F 01 16 27               	.db $0F, $01, $16, $27
0842D                           PrincessPalette:
0842D 0F 06 25 36               	.db $0F, $06, $25, $36
08431                           ToadPalette:
08431 0F 01 30 27               	.db $0F, $01, $30, $27
08435                           LuigiPalette:
08435 0F 01 2A 36               	.db $0F, $01, $2A, $36
08439                           
08439                           ;
08439                           ; What is this for? It gets copied to RAM and then...that's all.
08439                           ;
08439                           ; In Doki Doki Panic, this data loads on the level/character select screen, but doesn't seem to be
08439                           ; used for anything there either. Will we ever unravel this mystery?
08439                           ;
08439                           MysteryData14439:
08439 DF                        	.db $DF
0843A EF                        	.db $EF
0843B F7                        	.db $F7
0843C FB                        	.db $FB
0843D                           
0843D 00                        	.db $00
0843E FF                        	.db $FF
0843F FF                        	.db $FF
08440 FF                        	.db $FF
08441                           
08441 AF                        	.db $AF
08442 D7                        	.db $D7
08443 EB                        	.db $EB
08444 F5                        	.db $F5
08445                           
08445 FB                        	.db $FB
08446 F7                        	.db $F7
08447 EF                        	.db $EF
08448 DF                        	.db $DF
08449                           
08449 00                        	.db $00
0844A FF                        	.db $FF
0844B FF                        	.db $FF
0844C FF                        	.db $FF
0844D                           
0844D F5                        	.db $F5
0844E EB                        	.db $EB
0844F D7                        	.db $D7
08450 AF                        	.db $AF
08451                           
08451                           
08451                           ;
08451                           ; This copies the selected character's stats
08451                           ; into memory for use later, but also a bunch
08451                           ; of other unrelated crap like the
08451                           ; Bonus Chance slot reels (???) and
08451                           ; god knows what else.
08451                           ;
08451                           CopyCharacterStatsAndStuff:
08451 A2 6F                     	LDX #$6F ; Should always be 6F, no? Check later if it's correct 64
08453                           CopyCharacterStats_Loop:
08453 BD C9 83                  	LDA StatOffsets, X
08456 9D 10 7E                  	STA StatOffsetsRAM, X
08459 CA                        	DEX
0845A 10 F7                     	BPL CopyCharacterStats_Loop
0845C                           
0845C                           IFDEF CONTROLLER_2_DEBUG
0845C 20 00 00                  	JSR CopyCharacterStats
0845F                           ENDIF
0845F                           
0845F A6 8F                     	LDX CurrentCharacter
08461 BC C9 83                  	LDY StatOffsets, X
08464 A2 00                     	LDX #$00
08466                           loc_BANKA_8458:
08466 B9 CD 83                  	LDA CharacterStats, Y
08469 9D 46 05                  	STA CharacterStatsRAM, X
0846C C8                        	INY
0846D E8                        	INX
0846E E0 17                     	CPX #$17
08470 90 F4                     	BCC loc_BANKA_8458
08472                           
08472 A5 8F                     	LDA CurrentCharacter
08474 0A                        	ASL A
08475 0A                        	ASL A
08476 A8                        	TAY
08477 A2 00                     	LDX #$00
08479                           loc_BANKA_846B:
08479 B9 29 84                  	LDA CharacterPalette, Y
0847C 9D 37 06                  	STA RestorePlayerPalette0, X
0847F C8                        	INY
08480 E8                        	INX
08481 E0 04                     	CPX #$04
08483 90 F4                     	BCC loc_BANKA_846B
08485                           
08485 A0 4C                     	LDY #$4C
08487                           loc_BANKA_8479:
08487 B9 00 00                  	LDA PlayerSelectPalettes, Y
0848A 99 5F 05                  	STA PPUBuffer_TitleCardPalette, Y
0848D 88                        	DEY
0848E C0 FF                     	CPY #$FF
08490 D0 F5                     	BNE loc_BANKA_8479
08492                           
08492 A0 B6                     	LDY #$B6
08494                           loc_BANKA_8486:
08494 B9 00 00                  	LDA BonusChanceReel1Order, Y
08497 99 3B 06                  	STA SlotMachineReelOrder1RAM, Y
0849A 88                        	DEY
0849B C0 FF                     	CPY #$FF
0849D D0 F5                     	BNE loc_BANKA_8486
0849F                           
0849F A0 63                     	LDY #$63
084A1                           loc_BANKA_8493:
084A1 B9 00 00                  	LDA TitleCardText, Y
084A4 99 68 71                  	STA PPUBuffer_TitleCardText, Y
084A7 88                        	DEY
084A8 C0 FF                     	CPY #$FF
084AA D0 F5                     	BNE loc_BANKA_8493
084AC                           
084AC                           	; This data is copied, but doesn't appear to be used. Its original purpose is not obvious.
084AC A0 17                     	LDY #$17
084AE                           loc_BANKA_84A0:
084AE B9 39 84                  	LDA MysteryData14439, Y
084B1 99 50 71                  	STA MysteryData14439_RAM, Y
084B4 88                        	DEY
084B5 10 F7                     	BPL loc_BANKA_84A0
084B7                           
084B7                           	; Copy object collision hitbox table
084B7                           	;
084B7                           	; The fact that it's in RAM is taken advantage of to programmatically change
084B7                           	; the hitbox for Hawkmouth after picking up the crystal.
084B7 A0 4F                     	LDY #$4F
084B9                           loc_BANKA_84AB:
084B9 B9 00 00                  	LDA ObjectCollisionHitboxLeft, Y
084BC 99 00 71                  	STA ObjectCollisionHitboxLeft_RAM, Y
084BF 88                        	DEY
084C0 10 F7                     	BPL loc_BANKA_84AB
084C2                           
084C2                           	; Copy flying carpet acceleration table
084C2 A0 03                     	LDY #$03
084C4                           loc_BANKA_84B6:
084C4 B9 00 00                  	LDA FlyingCarpetAcceleration, Y
084C7 99 CC 71                  	STA FlyingCarpetAcceleration_RAM, Y
084CA 88                        	DEY
084CB 10 F7                     	BPL loc_BANKA_84B6
084CD                           
084CD                           	; Copy object collision type table
084CD                           	;
084CD                           	; The fact that it's in RAM is used to toggle the Boss Hawkmouth between an
084CD                           	; object and an enemy.
084CD A0 49                     	LDY #$49
084CF                           loc_BANKA_84C1:
084CF B9 00 00                  	LDA EnemyPlayerCollisionTable, Y
084D2 99 D1 71                  	STA EnemyPlayerCollisionTable_RAM, Y
084D5 88                        	DEY
084D6 10 F7                     	BPL loc_BANKA_84C1
084D8                           
084D8                           	; Copy end of level door PPU data to RAM
084D8                           	;
084D8                           	; The fact that it's in RAM is actually taken advantage of when defeating Clawgrip, since the
084D8                           	; door needs to be drawn in a slightly different spot.
084D8 A0 20                     	LDY #$20
084DA                           loc_BANKA_84CC:
084DA B9 00 00                  	LDA EndOfLevelDoor, Y
084DD 99 1B 72                  	STA PPUBuffer_EndOfLevelDoor, Y
084E0 88                        	DEY
084E1 10 F7                     	BPL loc_BANKA_84CC
084E3                           
084E3                           	; Copy Wart's OAM address table
084E3 A0 06                     	LDY #$06
084E5                           loc_BANKA_84D7:
084E5 B9 00 00                  	LDA WartOAMOffsets, Y
084E8 99 65 72                  	STA WartOAMOffsets_RAM, Y
084EB 88                        	DEY
084EC 10 F7                     	BPL loc_BANKA_84D7
084EE                           
084EE 60                        	RTS
084EF                           
084EF                           
084EF                           FlyingCarpetAcceleration:
084EF 00                        	.db $00
084F0 01                        	.db $01
084F1 FF                        	.db $FF
084F2 00                        	.db $00
084F3                           
084F3                           WartOAMOffsets:
084F3 00                        	.db $00
084F4 E0                        	.db $E0
084F5 FF                        	.db $FF ; Cycled in code ($7267)
084F6 D0                        	.db $D0
084F7 00                        	.db $00
084F8 E0                        	.db $E0
084F9 FF                        	.db $FF ; Cycled in code ($726B)
084FA                           
084FA                           PlayerSelectPalettes:
084FA 3F 00 20                  	.db $3F, $00, $20
084FD 0F 28 16 06               	.db $0F, $28, $16, $06
08501 0F 30 12 16               	.db $0F, $30, $12, $16
08505 0F 30 16 12               	.db $0F, $30, $16, $12
08509 0F 30 12 16               	.db $0F, $30, $12, $16
0850D 0F 22 12 01               	.db $0F, $22, $12, $01
08511 0F 22 12 01               	.db $0F, $22, $12, $01
08515 0F 22 12 01               	.db $0F, $22, $12, $01
08519 0F 22 12 01               	.db $0F, $22, $12, $01
0851D 00                        	.db $00
0851E                           
0851E                           BonusChanceText_X_1:
0851E 22 30 03                  	.db $22, $30, $03
08521 EA FB D1                  	.db $EA, $FB, $D1
08524                           BonusChanceText_EXTRA_LIFE_1:
08524 22 C9 0F                  	.db $22, $C9, $0F
08527 DE F1 ED EB DA FB E5 E2.. 	.db $DE, $F1, $ED, $EB, $DA, $FB, $E5, $E2, $DF, $DE ; EXTRA LIFE
08531 F9 F9 F9 FB D1            	.db $F9, $F9, $F9, $FB, $D1 ; ... 1
08536 00                        	.db $00
08537                           
08537                           BonusChanceBackgroundPalettes:
08537 0F 27 17 07               	.db $0F, $27, $17, $07 ; $00
0853B 0F 37 16 12               	.db $0F, $37, $16, $12 ; $04
0853F 0F 30 10 00               	.db $0F, $30, $10, $00 ; $08
08543 0F 21 12 01               	.db $0F, $21, $12, $01 ; $0C
08547                           
08547                           BonusChanceReel1Order:
08547 18                        	.db Slot_Snifit ; $00
08548 10                        	.db Slot_Turnip ; $01 ; Graphics exist for a mushroom (not used)
08549 08                        	.db Slot_Star   ; $02
0854A 10                        	.db Slot_Turnip ; $03
0854B 18                        	.db Slot_Snifit ; $04
0854C 08                        	.db Slot_Star   ; $05
0854D 00                        	.db Slot_Cherry ; $06
0854E 10                        	.db Slot_Turnip ; $07
0854F                           BonusChanceReel2Order:
0854F 08                        	.db Slot_Star   ; $00
08550 18                        	.db Slot_Snifit ; $01
08551 00                        	.db Slot_Cherry ; $02
08552 18                        	.db Slot_Snifit ; $03
08553 10                        	.db Slot_Turnip ; $04
08554 08                        	.db Slot_Star   ; $05
08555 18                        	.db Slot_Snifit ; $06
08556 10                        	.db Slot_Turnip ; $07
08557                           BonusChanceReel3Order:
08557 08                        	.db Slot_Star   ; $00
08558 18                        	.db Slot_Snifit ; $01
08559 08                        	.db Slot_Star   ; $02
0855A 10                        	.db Slot_Turnip ; $03
0855B 08                        	.db Slot_Star   ; $04
0855C 00                        	.db Slot_Cherry ; $05
0855D 10                        	.db Slot_Turnip ; $06
0855E 18                        	.db Slot_Snifit ; $07
0855F                           
0855F                           BonusChanceUnusedCoinSprite:
0855F F8 19 01 60 F8 1B 01 68   	.db $F8, $19, $01, $60, $F8, $1B, $01, $68
08567                           BonusChanceUnusedImajinHead:
08567 CB B0 00 A0 CB B0 40 A8   	.db $CB, $B0, $00, $A0, $CB, $B0, $40, $A8
0856F                           BonusChanceUnusedLinaHead:
0856F CB B2 00 A0 CB B2 40 A8   	.db $CB, $B2, $00, $A0, $CB, $B2, $40, $A8
08577                           BonusChanceUnusedMamaHead:
08577 CB B6 00 A0 CB B6 40 A8   	.db $CB, $B6, $00, $A0, $CB, $B6, $40, $A8
0857F                           BonusChanceUnusedPapaHead:
0857F CB B4 00 A0 CB B4 40 A8   	.db $CB, $B4, $00, $A0, $CB, $B4, $40, $A8
08587                           
08587                           ;
08587                           ; Based on the position and the number of tiles, this probably used to say...
08587                           ;
08587                           ; --- BONUS CHANCE ---
08587                           ;
08587                           BonusChanceUnused_BONUS_CHANCE:
08587 20 C6 14                  	.db $20, $C6, $14
0858A FB FB FB FB FB FB FB FB.. 	.db $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB
08596 FB FB FB FB FB FB FB FB   	.db $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB
0859E 00                        	.db $00
0859F                           
0859F                           BonusChanceText_NO_BONUS:
0859F 22 86 14                  	.db $22, $86, $14
085A2 FB FB FB FB FB FB         	.db $FB, $FB, $FB, $FB, $FB, $FB
085A8 E7 E8 FB DB E8 E7 EE EC   	.db $E7, $E8, $FB, $DB, $E8, $E7, $EE, $EC ; NO BONUS
085B0 FB FB FB FB FB FB         	.db $FB, $FB, $FB, $FB, $FB, $FB
085B6 00                        	.db $00
085B7                           
085B7                           BonusChanceText_PUSH_A_BUTTON:
085B7 22 89 0E                  	.db $22, $89, $0E
085BA E9 EE EC E1 FB 0E 0F FB.. 	.db $E9, $EE, $EC, $E1, $FB, $0E, $F,$FB, $DB, $EE, $ED, $ED, $E8, $E7 ; PUSH (A) BUTTON
085C8 00                        	.db $00
085C9                           
085C9                           BonusChanceText_PLAYER_1UP:
085C9 22 8B 0B                  	.db $22, $8B, $0B
085CC E9 E5 DA F2 DE EB FB FB.. 	.db $E9, $E5, $DA, $F2, $DE, $EB, $FB, $FB, $D1, $EE, $E9 ; PLAYER  1UP
085D7 00                        	.db $00
085D8                           
085D8                           Text_PAUSE:
085D8 25 ED 05                  	.db $25, $ED, $05
085DB E9 DA EE EC DE            	.db $E9, $DA, $EE, $EC, $DE ; PAUSE
085E0 27 DB 02 AA AA            	.db $27, $DB, $02, $AA, $AA ; attribute data
085E5 00                        	.db $00
085E6                           
085E6                           ; Erases NO BONUS / PUSH (A) BUTTON / PLAYER 1UP
085E6                           BonusChanceText_Message_Erase:
085E6 22 86 54 FB               	.db $22, $86, $54, $FB
085EA 00                        	.db $00
085EB                           
085EB                           ; This would erase the "PUSH (A) BUTTON" text, but the placement is wrong.
085EB                           ; The placement matches the original Doki Doki Panic Bonus Chance screen.
085EB                           BonusChanceText_PUSH_A_BUTTON_Erase:
085EB 22 AA 4D FB               	.db $22, $AA, $4D, $FB
085EF 00                        	.db $00
085F0                           
085F0                           ; More leftovers. The placement matches the original Doki Doki Panic Bonus Chance screen's placement
085F0                           ; of the "PLAYER  1UP" message.
085F0                           BonusChanceText_Message_Erase_Unused:
085F0 22 EB 4B FB               	.db $22, $EB, $4B, $FB
085F4 00                        	.db $00
085F5                           
085F5                           Text_PAUSE_Erase:
085F5 25 ED 05                  	.db $25, $ED, $05
085F8 FB FB FB FB FB            	.db $FB, $FB, $FB, $FB, $FB
085FD 00                        	.db $00
085FE                           
085FE                           TitleCardText:
085FE                           	; Level indicator dots
085FE 25 0E 07                  	.db $25, $0E, $07
08601 FB FB FB FB FB FB FB      	.db $FB, $FB, $FB, $FB, $FB, $FB, $FB
08608                           	; WORLD  1-1
08608 24 CA 0B                  	.db $24, $CA, $0B
0860B FB F0 E8 EB E5 DD FB FB.. 	.db $FB, $F0, $E8, $EB, $E5, $DD, $FB, $FB, $D1, $F3, $D1
08616                           	; EXTRA LIFE...  0
08616 23 48 10                  	.db $23, $48, $10
08619 DE F1 ED EB DA FB E5 E2.. 	.db $DE, $F1, $ED, $EB, $DA, $FB, $E5, $E2, $DF, $DE
08623 F9 F9 F9 FB FB D0         	.db $F9, $F9, $F9, $FB, $FB, $D0
08629 00                        	.db $00
0862A                           
0862A                           Text_WARP:
0862A 21 8E 04 F0 DA EB E9      	.db $21, $8E, $04, $F0, $DA, $EB, $E9
08631                           
08631                           ; Doki Doki Panic pseudo-leftover
08631                           ; This actually has extra spaces on either end:
08631                           ; "-WORLD-" ... It originally said "CHAPTER"
08631                           Text_WORLD_1:
08631 22 0C 09                  	.db $22, $0C, $09
08634 FB F0 E8 EB E5 DD FB FB.. 	.db $FB, $F0, $E8, $EB, $E5, $DD, $FB, $FB, $D1
0863D 00                        	.db $00
0863E                           Text_Unknown6:
0863E 21 6A 01 FB               	.db $21, $6A, $01, $FB
08642                           Text_Unknown7:
08642 21 AA 01 FB               	.db $21, $AA, $01, $FB
08646 00                        	.db $00
08647                           Text_Unknown8:
08647 21 97 C6 FB               	.db $21, $97, $C6, $FB
0864B 00                        	.db $00
0864C                           UnusedText_THANK_YOU:
0864C 21 0C 09                  	.db $21, $0C, $09
0864F ED E1 3A E7 E4 FB F2 E8.. 	.db $ED, $E1, $3A, $E7, $E4, $FB, $F2, $E8, $EE
08658                           UnusedText_Blank214D:
08658 21 4D 06                  	.db $21, $4D, $06
0865B FB FB FB FB FB FB         	.db $FB, $FB, $FB, $FB, $FB, $FB
08661 00                        	.db $00
08662                           
08662                           IFDEF CONTROLLER_2_DEBUG
08662                           ;
08662                           ; Copies all character stats to RAM for hot-swapping the current character
08662                           ;
08662                           CopyCharacterStats:
08662 A2 6F                     	LDX #(MysteryData14439 - StatOffsets - 1)
08664                           CopyCharacterStats_Loop:
*** Label already defined.
08664 BD C9 83                  	LDA StatOffsets, X
08667 9D 10 7E                  	STA StatOffsetsRAM, X
0866A CA                        	DEX
0866B 10 E6                     	BPL CopyCharacterStats_Loop
0866D                           
0866D 60                        	RTS
0866E                           ENDIF
0866E                           
0866E                           
0866E                           IFDEF DEBUG
0866E                           	.include "src/extras/debug-a.asm"
0866E                           ENDIF
0866E FF FF FF FF FF FF FF FF.. .pad $c000, $ff
0C000                           
0C000                           ; ----------------------------------------
0C000                           ; Banks C and D. The first half is
0C000                           ; a lot of data for the credits.
0C000                           ; The second half is totally empty.
0C000                           .base $8000
08000                           .include "src/prg-c-d.asm"
08000                           ;
08000                           ; Bank C & Bank D
08000                           ; ===============
08000                           ;
08000                           ; What's inside:
08000                           ;
08000                           ;   - The ending sequence with Mario sleeping and the cast roll
08000                           ;
08000                           
08000                           MarioDream_Pointers:
08000 01 03                     	.dw PPUBuffer_301
08002 00 00                     	.dw MarioDream_Bed
08004 00 00                     	.dw MarioDream_Bubble
08006 00 00                     	.dw MarioDream_DoNothing
08008 00 00                     	.dw MarioDream_EraseBubble1
0800A 00 00                     	.dw MarioDream_EraseBubble2
0800C 00 00                     	.dw MarioDream_EraseBubble3
0800E 00 00                     	.dw MarioDream_EraseBubble4
08010 00 00                     	.dw MarioDream_EraseBubble5
08012 00 00                     	.dw MarioDream_Palettes
08014                           
08014                           
08014                           WaitForNMI_MarioSleeping_TurnOffPPU:
08014 A9 00                     	LDA #$00
08016 F0 00                     	BEQ WaitForNMI_MarioSleeping_SetPPUMaskMirror
08018                           
08018                           
08018                           WaitForNMI_MarioSleeping_TurnOnPPU:
08018 A9 1E                     	LDA #PPUMask_ShowLeft8Pixels_BG | PPUMask_ShowLeft8Pixels_SPR | PPUMask_ShowBackground | PPUMask_ShowSprites
0801A                           
0801A                           WaitForNMI_MarioSleeping_SetPPUMaskMirror:
0801A 85 FE                     	STA PPUMaskMirror
0801C                           
0801C                           WaitForNMI_MarioSleeping:
0801C A5 11                     	LDA ScreenUpdateIndex
0801E 0A                        	ASL A
0801F AA                        	TAX
08020 BD 00 80                  	LDA MarioDream_Pointers, X
08023 85 F0                     	STA RAM_PPUDataBufferPointer
08025 BD 01 80                  	LDA MarioDream_Pointers + 1, X
08028 85 F1                     	STA RAM_PPUDataBufferPointer + 1
0802A                           
0802A A9 00                     	LDA #$00
0802C 85 EB                     	STA NMIWaitFlag
0802E                           WaitForNMI_MarioSleepingLoop:
0802E A5 EB                     	LDA NMIWaitFlag
08030 10 FC                     	BPL WaitForNMI_MarioSleepingLoop
08032                           
08032 60                        	RTS
08033                           
08033                           
08033                           EnableNMI_BankC:
08033 A9 B0                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIEnabled
08035 85 FF                     	STA PPUCtrlMirror
08037 8D 00 20                  	STA PPUCTRL
0803A 60                        	RTS
0803B                           
0803B                           
0803B                           DisableNMI_BankC:
0803B A9 30                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIDisabled
0803D 8D 00 20                  	STA PPUCTRL
08040 85 FF                     	STA PPUCtrlMirror
08042 60                        	RTS
08043                           
08043                           
08043                           MarioDream_Palettes:
08043 3F 00 20                  	.db $3F, $00, $20
08046 02 22 12 0F               	.db $02, $22, $12, $0F
0804A 02 30 16 0F               	.db $02, $30, $16, $0F
0804E 02 30 16 28               	.db $02, $30, $16, $28
08052 02 22 31 0F               	.db $02, $22, $31, $0F
08056 02 27 16 0F               	.db $02, $27, $16, $0F
0805A 02 27 2A 0F               	.db $02, $27, $2A, $0F
0805E 02 27 25 0F               	.db $02, $27, $25, $0F
08062 02 27 3C 0F               	.db $02, $27, $3C, $0F
08066 00                        	.db $00
08067                           
08067                           MarioDream_Bed:
08067 20 00 60 FF               	.db $20, $00, $60, $FF
0806B 20 20 60 FF               	.db $20, $20, $60, $FF
0806F 20 40 60 FF               	.db $20, $40, $60, $FF
08073 20 60 60 FF               	.db $20, $60, $60, $FF
08077 23 40 60 FF               	.db $23, $40, $60, $FF
0807B 23 60 60 FF               	.db $23, $60, $60, $FF
0807F 23 80 60 FF               	.db $23, $80, $60, $FF
08083 23 A0 60 FF               	.db $23, $A0, $60, $FF
08087 20 80 D6 FF               	.db $20, $80, $D6, $FF
0808B 20 81 D6 FF               	.db $20, $81, $D6, $FF
0808F 20 82 D6 FF               	.db $20, $82, $D6, $FF
08093 20 83 D6 FF               	.db $20, $83, $D6, $FF
08097 20 9C D6 FF               	.db $20, $9C, $D6, $FF
0809B 20 9D D6 FF               	.db $20, $9D, $D6, $FF
0809F 20 9E D6 FF               	.db $20, $9E, $D6, $FF
080A3 20 9F D6 FF               	.db $20, $9F, $D6, $FF
080A7 20 84 58 FC               	.db $20, $84, $58, $FC
080AB 20 A4 58 FC               	.db $20, $A4, $58, $FC
080AF 20 C4 58 FC               	.db $20, $C4, $58, $FC
080B3 20 E4 58 FC               	.db $20, $E4, $58, $FC
080B7 21 04 58 FC               	.db $21, $04, $58, $FC
080BB 21 24 58 FC               	.db $21, $24, $58, $FC
080BF 21 44 58 FC               	.db $21, $44, $58, $FC
080C3 21 64 58 FC               	.db $21, $64, $58, $FC
080C7 21 84 58 FC               	.db $21, $84, $58, $FC
080CB 21 A4 58 FC               	.db $21, $A4, $58, $FC
080CF 21 C4 58 FC               	.db $21, $C4, $58, $FC
080D3 21 E4 58 FC               	.db $21, $E4, $58, $FC
080D7 22 04 58 FC               	.db $22, $04, $58, $FC
080DB 22 24 58 FC               	.db $22, $24, $58, $FC
080DF 22 44 58 FC               	.db $22, $44, $58, $FC
080E3 22 64 58 FC               	.db $22, $64, $58, $FC
080E7 22 84 58 FC               	.db $22, $84, $58, $FC
080EB 22 A4 58 FC               	.db $22, $A4, $58, $FC
080EF 22 C4 58 FC               	.db $22, $C4, $58, $FC
080F3 21 4E 02 60 61            	.db $21, $4E, $02, $60, $61
080F8 21 6E 02 70 71            	.db $21, $6E, $02, $70, $71
080FD 21 8E 02 80 81            	.db $21, $8E, $02, $80, $81
08102 21 AC 06 36 37 38 39 3A.. 	.db $21, $AC, $06, $36, $37, $38, $39, $3A, $3B
0810B 21 CA 0C 36 37 35 47 48.. 	.db $21, $CA, $0C, $36, $37, $35, $47, $48, $49, $4A, $4B, $4C, $4D, $4E, $4F
0811A 21 E8 0E 36 37 35 55 56.. 	.db $21, $E8, $0E, $36, $37, $35, $55, $56, $57, $58, $59, $5A, $5B, $5C, $5D
08129 5E 5F                     	.db $5E, $5F ; $F
0812B 22 06 10 36 37 35 FC 64.. 	.db $22, $06, $10, $36, $37, $35, $FC, $64, $65, $66, $67, $68, $69, $6A, $6B
0813A 6C 6D 6E 6F               	.db $6C, $6D, $6E, $6F ; $F
0813E 22 24 12 36 37 35 FC FC.. 	.db $22, $24, $12, $36, $37, $35, $FC, $FC, $FC, $74, $75, $76, $77, $78, $79
0814D 7A 7B 7C 7D 7E 7F         	.db $7A, $7B, $7C, $7D, $7E, $7F ; $F
08153 22 44 18 35 FC FC FC 82.. 	.db $22, $44, $18, $35, $FC, $FC, $FC, $82, $83, $84, $85, $86, $87, $88, $89
08162 8A 8B 8C 8D 8E 8F 00 01.. 	.db $8A, $8B, $8C, $8D, $8E, $8F, $00, $01, $02, $03, $04, $05 ; $F
0816E 22 68 14 92 93 94 95 96.. 	.db $22, $68, $14, $92, $93, $94, $95, $96, $97, $98, $99, $9A, $9B, $9C, $9D
0817D 9E 9F 10 11 12 13 14 15   	.db $9E, $9F, $10, $11, $12, $13, $14, $15 ; $F
08185 22 88 14 A2 A3 A4 A5 A6.. 	.db $22, $88, $14, $A2, $A3, $A4, $A5, $A6, $A7, $A8, $A9, $AA, $AB, $AC, $AD
08194 AE AF FE FE FE FE FE FE   	.db $AE, $AF, $FE, $FE, $FE, $FE, $FE, $FE ; $F
0819C 22 A7 15 B1 B2 B3 B4 B5.. 	.db $22, $A7, $15, $B1, $B2, $B3, $B4, $B5, $B6, $B7, $B8, $B9, $BA, $BB, $BC
081AB BD BE BF FE FE FE FE FE.. 	.db $BD, $BE, $BF, $FE, $FE, $FE, $FE, $FE, $FE ; $F
081B4 22 C6 16 C0 C1 C2 C3 C4.. 	.db $22, $C6, $16, $C0, $C1, $C2, $C3, $C4, $C5, $C6, $C7, $C8, $C9, $CA, $CB
081C3 CC CD FE FE FE FE FE FE.. 	.db $CC, $CD, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE ; $F
081CD 22 E4 18 B1 F1 D0 D1 D2.. 	.db $22, $E4, $18, $B1, $F1, $D0, $D1, $D2, $D3, $D4, $D5, $D6, $D7, $D8, $D9
081DC DA DB FE FE FE FE FE FE.. 	.db $DA, $DB, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE ; $F
081E8 23 04 18 F0 FE FE FE E2.. 	.db $23, $04, $18, $F0, $FE, $FE, $FE, $E2, $E3, $E4, $E5, $E6, $E7, $E8, $E9
081F7 EA FE FE FE FE FE FE FE.. 	.db $EA, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE ; $F
08203 23 24 18 FE FE FE FE F2.. 	.db $23, $24, $18, $FE, $FE, $FE, $FE, $F2, $F3, $F4, $F5, $F6, $F7, $F8, $F9
08212 FA FE FE FE FE FE FE FE.. 	.db $FA, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE ; $F
0821E 00                        	.db $00
0821F                           
0821F                           MarioDream_Bubble:
0821F 20 8F 84 06 16 07 17      	.db $20, $8F, $84, $06, $16, $07, $17
08226 20 D0 85 08 18 09 19 1D   	.db $20, $D0, $85, $08, $18, $09, $19, $1D
0822E 20 90 4C FD               	.db $20, $90, $4C, $FD
08232 20 B0 4C FD               	.db $20, $B0, $4C, $FD
08236 20 D1 4B FD               	.db $20, $D1, $4B, $FD
0823A 20 F1 0B FD FD FD 28 29.. 	.db $20, $F1, $0B, $FD, $FD, $FD, $28, $29, $29, $29, $29, $2A, $FD, $FD
08248 21 11 0B FD FD FD FD 27.. 	.db $21, $11, $0B, $FD, $FD, $FD, $FD, $27, $FD, $FD, $27, $FD, $FD, $FD
08256 21 31 0B FD FD FD FD 27.. 	.db $21, $31, $0B, $FD, $FD, $FD, $FD, $27, $FD, $FD, $27, $FD, $FD, $FD
08264 21 51 0B FD FD 23 24 25.. 	.db $21, $51, $0B, $FD, $FD, $23, $24, $25, $22, $23, $24, $25, $25, $FD
08272 21 71 0B 0B 0C 0D 0E 0F.. 	.db $21, $71, $0B, $0B, $0C, $0D, $0E, $0F, $FD, $FD, $FD, $FD, $FD, $FD
08280 21 95 07 1F 1A 30 31 32.. 	.db $21, $95, $07, $1F, $1A, $30, $31, $32, $33, $1B
0828A 21 B5 06 53 FC 40 41 42.. 	.db $21, $B5, $06, $53, $FC, $40, $41, $42, $43
08293 21 D7 03 50 51 52         	.db $21, $D7, $03, $50, $51, $52
08299 21 F6 02 20 21            	.db $21, $F6, $02, $20, $21
0829E 23 CB 04 44 55 A5 65      	.db $23, $CB, $04, $44, $55, $A5, $65 ; Attribute table changes
082A5 23 D4 03 55 5A 56         	.db $23, $D4, $03, $55, $5A, $56
082AB 23 DD 02 45 15            	.db $23, $DD, $02, $45, $15
082B0 23 E4 01 3F               	.db $23, $E4, $01, $3F
082B4 00                        	.db $00
082B5                           
082B5                           ; This is pointed to, but the very first byte
082B5                           ; is the terminating 0, so nothing gets drawn.
082B5                           ; This would have undone the attribute changes
082B5                           ; done in the above PPU writing, but I guess
082B5                           ; Nintendo realized they were never going to
082B5                           ; use that part of the screen again
082B5                           MarioDream_DoNothing:
082B5 00                        	.db $00
082B6 23 CB 44 00               	.db $23, $CB, $44, $00
082BA 23 D4 43 00               	.db $23, $D4, $43, $00
082BE 23 DD 42 00               	.db $23, $DD, $42, $00
082C2 00                        	.db $00
082C3                           
082C3                           MarioDream_EraseBubble1:
082C3 20 8F 4D FC               	.db $20, $8F, $4D, $FC
082C7 20 AF 4D FC               	.db $20, $AF, $4D, $FC
082CB 00                        	.db $00
082CC                           
082CC                           MarioDream_EraseBubble2:
082CC 20 CF 4D FC               	.db $20, $CF, $4D, $FC
082D0 20 EF 4D FC               	.db $20, $EF, $4D, $FC
082D4 00                        	.db $00
082D5                           
082D5                           MarioDream_EraseBubble3:
082D5 21 10 4C FC               	.db $21, $10, $4C, $FC
082D9 21 30 4C FC               	.db $21, $30, $4C, $FC
082DD 00                        	.db $00
082DE                           
082DE                           MarioDream_EraseBubble4:
082DE 21 50 4C FC               	.db $21, $50, $4C, $FC
082E2 21 71 4B FC               	.db $21, $71, $4B, $FC
082E6 00                        	.db $00
082E7                           
082E7                           MarioDream_EraseBubble5:
082E7 21 95 47 FC               	.db $21, $95, $47, $FC
082EB 21 B5 46 FC               	.db $21, $B5, $46, $FC
082EF 21 D7 43 FC               	.db $21, $D7, $43, $FC
082F3 21 F6 42 FC               	.db $21, $F6, $42, $FC
082F7 00                        	.db $00
082F8                           
082F8                           MarioDream_BubbleSprites:
082F8 28 00 00 A8               	.db $28, $00, $00, $A8
082FC 28 04 01 B0               	.db $28, $04, $01, $B0
08300 28 08 02 C0               	.db $28, $08, $02, $C0
08304 28 0C 03 B8               	.db $28, $0C, $03, $B8
08308                           
08308                           MarioDream_BubbleSprites2:
08308 28 02 00 A8               	.db $28, $02, $00, $A8
0830C 28 06 01 B0               	.db $28, $06, $01, $B0
08310 28 0A 02 C0               	.db $28, $0A, $02, $C0
08314 28 0E 03 B8               	.db $28, $0E, $03, $B8
08318                           
08318                           MarioDream_SnoringFrameCounts:
08318 20                        	.db $20
08319 0A                        	.db $0A
0831A 0A                        	.db $0A
0831B 0A                        	.db $0A
0831C 0A                        	.db $0A
0831D 0A                        	.db $0A
0831E 0A                        	.db $0A
0831F 20                        	.db $20
08320 0A                        	.db $0A
08321 0A                        	.db $0A
08322 0A                        	.db $0A
08323 0A                        	.db $0A
08324 0A                        	.db $0A
08325 0A                        	.db $0A
08326                           
08326                           MarioDream_WakingFrameCounts:
08326 08                        	.db $08
08327 08                        	.db $08
08328 50                        	.db $50
08329 40                        	.db $40
0832A 30                        	.db $30
0832B 10                        	.db $10
0832C 10                        	.db $10
0832D                           
0832D                           MarioDream_SnoringFrames:
0832D 50                        	.db CHRBank_MarioSleepingBackground1
0832E 54                        	.db CHRBank_MarioSleepingBackground2
0832F 58                        	.db CHRBank_MarioSleepingBackground3
08330 5C                        	.db CHRBank_MarioSleepingBackground4
08331 60                        	.db CHRBank_MarioSleepingBackground5
08332 64                        	.db CHRBank_MarioSleepingBackground6
08333 68                        	.db CHRBank_MarioSleepingBackground7
08334 6C                        	.db CHRBank_MarioSleepingBackground8
08335 68                        	.db CHRBank_MarioSleepingBackground7
08336 64                        	.db CHRBank_MarioSleepingBackground6
08337 60                        	.db CHRBank_MarioSleepingBackground5
08338 5C                        	.db CHRBank_MarioSleepingBackground4
08339 58                        	.db CHRBank_MarioSleepingBackground3
0833A 54                        	.db CHRBank_MarioSleepingBackground2
0833B                           MarioDream_SnoringFrames_End:
0833B                           
0833B                           MarioDream_WakingFrames:
0833B 78                        	.db CHRBank_MarioSleepingBackground11
0833C 74                        	.db CHRBank_MarioSleepingBackground10
0833D 70                        	.db CHRBank_MarioSleepingBackground9
0833E 7C                        	.db CHRBank_MarioSleepingBackground12
0833F 70                        	.db CHRBank_MarioSleepingBackground9
08340 74                        	.db CHRBank_MarioSleepingBackground10
08341 78                        	.db CHRBank_MarioSleepingBackground11
08342                           MarioDream_WakingFrames_End:
08342                           
08342                           
08342                           MarioSleepingScene:
08342 20 14 80                  	JSR WaitForNMI_MarioSleeping_TurnOffPPU
08345                           
08345 A9 00                     	LDA #VMirror
08347 20 00 00                  	JSR ChangeNametableMirroring
0834A                           
0834A 20 00 00                  	JSR ClearNametablesAndSprites
0834D                           
0834D A9 40                     	LDA #Stack100_Menu
0834F 8D 00 01                  	STA StackArea
08352 20 33 80                  	JSR EnableNMI_BankC
08355                           
08355 20 1C 80                  	JSR WaitForNMI_MarioSleeping
08358                           
08358 A9 09                     	LDA #MarioSleepingUpdateBuffer_Palettes
0835A 85 11                     	STA ScreenUpdateIndex
0835C 20 1C 80                  	JSR WaitForNMI_MarioSleeping
0835F                           
0835F A9 01                     	LDA #MarioSleepingUpdateBuffer_Bed
08361 85 11                     	STA ScreenUpdateIndex
08363 20 1C 80                  	JSR WaitForNMI_MarioSleeping
08366                           
08366 A9 02                     	LDA #MarioSleepingUpdateBuffer_Bubble
08368 85 11                     	STA ScreenUpdateIndex
0836A 20 1C 80                  	JSR WaitForNMI_MarioSleeping
0836D                           
0836D A9 10                     	LDA #$10
0836F 85 18                     	STA MarioSnoringWaveFrameCounter
08371 A9 04                     	LDA #$04 ; 5 snores before waking up
08373 85 14                     	STA MarioSnoringLoopCounter
08375                           
08375                           ;
08375                           ; Dream Bubble Intro
08375                           ; ==================
08375                           ;
08375                           ; The part where Mario is snoring with a little dream bubble containing the
08375                           ; characters waving.
08375                           ;
08375                           MarioDream_DreamBubbleIntro:
08375 A9 00                     	LDA #$00
08377 85 15                     	STA MarioSnoringFrameIndex
08379 A9 0D                     	LDA #(MarioDream_SnoringFrames_End - MarioDream_SnoringFrames - 1)
0837B 85 16                     	STA MarioSnoringFrameCounter
0837D A9 00                     	LDA #$00
0837F 85 17                     	STA MarioSnoringWaveFrame
08381                           
08381 20 00 00                  	JSR MarioDream_WriteBubbleSprites
08384                           
08384 20 18 80                  	JSR WaitForNMI_MarioSleeping_TurnOnPPU
08387                           
08387                           MarioDream_DreamBubbleIntro_Loop:
08387 A4 15                     	LDY MarioSnoringFrameIndex
08389 B9 2D 83                  	LDA MarioDream_SnoringFrames, Y
0838C 8D F7 06                  	STA BackgroundCHR1
0838F 18                        	CLC
08390 69 02                     	ADC #$02
08392 8D F8 06                  	STA BackgroundCHR2
08395                           
08395                           	; Hold the animation frame briefly
08395 B9 18 83                  	LDA MarioDream_SnoringFrameCounts, Y
08398 85 10                     	STA byte_RAM_10
0839A                           MarioDream_DreamBubbleIntro_DelayLoop:
0839A C6 18                     	DEC MarioSnoringWaveFrameCounter
0839C 10 00                     	BPL MarioDream_DreamBubbleIntro_AfterWaveFrameUpdate
0839E                           
0839E A9 10                     	LDA #$10
083A0 85 18                     	STA MarioSnoringWaveFrameCounter
083A2 E6 17                     	INC MarioSnoringWaveFrame
083A4 20 00 00                  	JSR MarioDream_WriteBubbleSprites
083A7                           
083A7                           MarioDream_DreamBubbleIntro_AfterWaveFrameUpdate:
083A7 20 1C 80                  	JSR WaitForNMI_MarioSleeping
083AA                           
083AA C6 10                     	DEC byte_RAM_10
083AC 10 EC                     	BPL MarioDream_DreamBubbleIntro_DelayLoop
083AE                           
083AE E6 15                     	INC MarioSnoringFrameIndex
083B0 C6 16                     	DEC MarioSnoringFrameCounter
083B2 10 D3                     	BPL MarioDream_DreamBubbleIntro_Loop
083B4                           
083B4 C6 14                     	DEC MarioSnoringLoopCounter
083B6 30 00                     	BMI MarioDream_WakeUp
083B8                           
083B8 4C 75 83                  	JMP MarioDream_DreamBubbleIntro
083BB                           
083BB                           ;
083BB                           ; Wake Up
083BB                           ; =======
083BB                           ;
083BB                           ; Mario wakes up, effectively bursting his dream bubble, looks around, and then
083BB                           ; falls back asleep and continues snoring.
083BB                           ;
083BB                           MarioDream_WakeUp:
083BB A9 03                     	LDA #MarioSleepingUpdateBuffer_DoNothing
083BD 85 11                     	STA ScreenUpdateIndex
083BF A9 F8                     	LDA #$F8
083C1 8D 00 02                  	STA SpriteDMAArea
083C4 8D 04 02                  	STA SpriteDMAArea + $04
083C7 8D 08 02                  	STA SpriteDMAArea + $08
083CA 8D 0C 02                  	STA SpriteDMAArea + $0C
083CD 20 1C 80                  	JSR WaitForNMI_MarioSleeping
083D0                           
083D0 A9 04                     	LDA #MarioSleepingUpdateBuffer_EraseBubble1
083D2 85 11                     	STA ScreenUpdateIndex
083D4 20 1C 80                  	JSR WaitForNMI_MarioSleeping
083D7                           
083D7 A9 05                     	LDA #MarioSleepingUpdateBuffer_EraseBubble2
083D9 85 11                     	STA ScreenUpdateIndex
083DB 20 1C 80                  	JSR WaitForNMI_MarioSleeping
083DE                           
083DE A9 06                     	LDA #MarioSleepingUpdateBuffer_EraseBubble3
083E0 85 11                     	STA ScreenUpdateIndex
083E2 20 1C 80                  	JSR WaitForNMI_MarioSleeping
083E5                           
083E5 A9 07                     	LDA #MarioSleepingUpdateBuffer_EraseBubble4
083E7 85 11                     	STA ScreenUpdateIndex
083E9 20 1C 80                  	JSR WaitForNMI_MarioSleeping
083EC                           
083EC A9 08                     	LDA #MarioSleepingUpdateBuffer_EraseBubble5
083EE 85 11                     	STA ScreenUpdateIndex
083F0 20 1C 80                  	JSR WaitForNMI_MarioSleeping
083F3                           
083F3 A9 00                     	LDA #$00
083F5 85 15                     	STA MarioSnoringFrameIndex
083F7 A9 06                     	LDA #(MarioDream_WakingFrames_End - MarioDream_WakingFrames - 1)
083F9 85 16                     	STA MarioSnoringFrameCounter
083FB A9 00                     	LDA #$00
083FD 85 14                     	STA MarioSnoringLoopCounter
083FF                           
083FF 20 18 80                  	JSR WaitForNMI_MarioSleeping_TurnOnPPU
08402                           
08402                           MarioDream_WakeUp_Loop:
08402 A4 15                     	LDY MarioSnoringFrameIndex
08404 B9 3B 83                  	LDA MarioDream_WakingFrames, Y
08407 8D F7 06                  	STA BackgroundCHR1
0840A 18                        	CLC
0840B 69 02                     	ADC #$02
0840D 8D F8 06                  	STA BackgroundCHR2
08410                           
08410 B9 26 83                  	LDA MarioDream_WakingFrameCounts, Y
08413 85 10                     	STA byte_RAM_10
08415                           MarioDream_WakeUp_DelayLoop:
08415 20 1C 80                  	JSR WaitForNMI_MarioSleeping
08418                           
08418 C6 10                     	DEC byte_RAM_10
0841A 10 F9                     	BPL MarioDream_WakeUp_DelayLoop
0841C                           
0841C E6 15                     	INC MarioSnoringFrameIndex
0841E C6 16                     	DEC MarioSnoringFrameCounter
08420 10 E0                     	BPL MarioDream_WakeUp_Loop
08422                           
08422 A9 10                     	LDA #$10
08424 85 18                     	STA MarioSnoringWaveFrameCounter
08426 A9 01                     	LDA #$01 ; 2 snores before showing cast
08428 85 14                     	STA MarioSnoringLoopCounter
0842A                           
0842A                           ;
0842A                           ; Pre-Cast Roll
0842A                           ; =============
0842A                           ;
0842A                           ; Just Mario snoring a little bit more.
0842A                           ;
0842A                           MarioDream_PreCastSleep:
0842A A9 00                     	LDA #$00
0842C 85 15                     	STA MarioSnoringFrameIndex
0842E A9 0D                     	LDA #(MarioDream_SnoringFrames_End - MarioDream_SnoringFrames - 1)
08430 85 16                     	STA MarioSnoringFrameCounter
08432                           
08432 20 18 80                  	JSR WaitForNMI_MarioSleeping_TurnOnPPU
08435                           
08435                           MarioDream_PreCastSleep_Loop:
08435 A4 15                     	LDY MarioSnoringFrameIndex
08437 B9 2D 83                  	LDA MarioDream_SnoringFrames, Y
0843A 8D F7 06                  	STA BackgroundCHR1
0843D 18                        	CLC
0843E 69 02                     	ADC #$02
08440 8D F8 06                  	STA BackgroundCHR2
08443                           
08443                           	; Hold the animation frame briefly
08443 B9 18 83                  	LDA MarioDream_SnoringFrameCounts, Y
08446 85 10                     	STA byte_RAM_10
08448                           MarioDream_PreCastSleep_DelayLoop:
08448 20 1C 80                  	JSR WaitForNMI_MarioSleeping
0844B                           
0844B C6 10                     	DEC byte_RAM_10
0844D 10 F9                     	BPL MarioDream_PreCastSleep_DelayLoop
0844F                           
0844F E6 15                     	INC MarioSnoringFrameIndex
08451 C6 16                     	DEC MarioSnoringFrameCounter
08453 10 E0                     	BPL MarioDream_PreCastSleep_Loop
08455                           
08455 C6 14                     	DEC MarioSnoringLoopCounter
08457 30 00                     	BMI MarioDream_StartCastRoll
08459                           
08459 4C 2A 84                  	JMP MarioDream_PreCastSleep
0845C                           
0845C                           MarioDream_StartCastRoll:
0845C 20 00 00                  	JSR MarioDream_CastRollSetup
0845F                           
0845F 20 1C 80                  	JSR WaitForNMI_MarioSleeping
08462                           
08462                           ;
08462                           ; Cast Roll
08462                           ; =========
08462                           ;
08462                           ; Mario snoring while the cast roll crawls up the screen.
08462                           ;
08462                           MarioDream_CastSleep:
08462 A9 00                     	LDA #$00
08464 85 15                     	STA MarioSnoringFrameIndex
08466                           
08466 A9 0D                     	LDA #(MarioDream_SnoringFrames_End - MarioDream_SnoringFrames - 1)
08468 85 16                     	STA MarioSnoringFrameCounter
0846A                           
0846A 20 18 80                  	JSR WaitForNMI_MarioSleeping_TurnOnPPU
0846D                           
0846D                           MarioDream_CastSleep_Loop:
0846D A4 15                     	LDY MarioSnoringFrameIndex
0846F B9 2D 83                  	LDA MarioDream_SnoringFrames, Y
08472 8D F7 06                  	STA BackgroundCHR1
08475 18                        	CLC
08476 69 02                     	ADC #$02
08478 8D F8 06                  	STA BackgroundCHR2
0847B                           
0847B                           	; Hold the animation frame briefly
0847B B9 18 83                  	LDA MarioDream_SnoringFrameCounts, Y
0847E 85 10                     	STA byte_RAM_10
08480                           MarioDream_CastSleep_DelayLoop:
08480 20 00 00                  	JSR CastRoll_ScrollSprites
08483                           
08483 20 1C 80                  	JSR WaitForNMI_MarioSleeping
08486                           
08486 C6 10                     	DEC byte_RAM_10
08488 10 F6                     	BPL MarioDream_CastSleep_DelayLoop
0848A                           
0848A E6 15                     	INC MarioSnoringFrameIndex
0848C C6 16                     	DEC MarioSnoringFrameCounter
0848E 10 DD                     	BPL MarioDream_CastSleep_Loop
08490                           
08490 4C 62 84                  	JMP MarioDream_CastSleep
08493                           
08493                           
08493                           ;
08493                           ; Draw the sprites of the characters waving
08493                           ;
08493                           MarioDream_WriteBubbleSprites:
08493 A0 0F                     	LDY #$0F
08495 A5 17                     	LDA MarioSnoringWaveFrame
08497 29 01                     	AND #$01
08499 D0 00                     	BNE MarioDream_WriteBubbleSprites_Frame2
0849B                           
0849B                           MarioDream_WriteBubbleSprites_Frame1:
0849B B9 F8 82                  	LDA MarioDream_BubbleSprites, Y
0849E 99 00 02                  	STA SpriteDMAArea, Y
084A1 88                        	DEY
084A2 10 F7                     	BPL MarioDream_WriteBubbleSprites_Frame1
084A4                           
084A4 60                        	RTS
084A5                           
084A5                           MarioDream_WriteBubbleSprites_Frame2:
084A5 B9 08 83                  	LDA MarioDream_BubbleSprites2, Y
084A8 99 00 02                  	STA SpriteDMAArea, Y
084AB 88                        	DEY
084AC 10 F7                     	BPL MarioDream_WriteBubbleSprites_Frame2
084AE                           
084AE 60                        	RTS
084AF                           
084AF                           
084AF                           CastRoll_PaletteFadeIn:
084AF 22                        	.db $22
084B0 32                        	.db $32
084B1 30                        	.db $30
084B2                           
084B2                           
084B2                           CastRoll_ScrollSprites:
084B2                           	; Throttle used to slow down the cast roll
084B2 E6 2E                     	INC CastRollThrottle
084B4 A5 2E                     	LDA CastRollThrottle
084B6 29 01                     	AND #$01
084B8 D0 00                     	BNE CastRoll_ScrollSprites_AfterSpriteCounter
084BA                           
084BA C6 39                     	DEC CastRollSpriteCounter1
084BC C6 3A                     	DEC CastRollSpriteCounter2
084BE C6 3B                     	DEC CastRollSpriteCounter3
084C0                           
084C0                           CastRoll_ScrollSprites_AfterSpriteCounter:
084C0 A5 29                     	LDA CastRollSequenceIndex
084C2 20 00 00                  	JSR JumpToTableAfterJump
084C5                           
084C5 00 00                     	.dw CastRoll_FadeIn
084C7 00 00                     	.dw CastRoll_CrawlDelay
084C9 00 00                     	.dw CastRoll_CrawlStart
084CB 00 00                     	.dw CastRoll_CrawlContinue
084CD 00 00                     	.dw CastRoll_QueueWart
084CF 00 00                     	.dw CastRoll_WartLaugh
084D1 00 00                     	.dw loc_BANKC_89B6
084D3 00 00                     	.dw loc_BANKC_8A04
084D5 00 00                     	.dw loc_BANKC_8A37
084D7 00 00                     	.dw CastRoll_TheEndDelay
084D9 00 00                     	.dw CastRoll_TheEndAnimation
084DB                           
084DB 60                        	RTS
084DC                           
084DC                           
084DC                           CastRoll_CASTText:
084DC 60 D4 00 28               	.db $60, $D4, $00, $28
084E0 60 D0 00 38               	.db $60, $D0, $00, $38
084E4 60 F4 00 48               	.db $60, $F4, $00, $48
084E8 60 F6 00 58               	.db $60, $F6, $00, $58
084EC                           
084EC                           
084EC                           ;
084EC                           ; Loads the pointer for the current cast roll sprite and then increments the index
084EC                           ;
084EC                           ; ##### Input
084EC                           ; - `CastRollSpriteIndex`: current sprite index
084EC                           ;
084EC                           ; ##### Output
084EC                           ; - `CastRollSpriteHi`: high byte for sprite
084EC                           ; - `CastRollSpriteLo`: low byte for sprite
084EC                           ; - `CastRollSpriteIndex`: next sprite index
084EC                           ;
084EC                           LoadCastRollSpritePointer:
084EC A4 2B                     	LDY CastRollSpriteIndex
084EE B9 00 00                  	LDA CastRoll_SpritePointersLo, Y
084F1 85 2F                     	STA CastRollSpriteLo
084F3 B9 00 00                  	LDA CastRoll_SpritePointersHi, Y
084F6 85 30                     	STA CastRollSpriteHi
084F8 E6 2B                     	INC CastRollSpriteIndex
084FA 60                        	RTS
084FB                           
084FB                           
084FB                           ;
084FB                           ; Cast Roll Setup
084FB                           ; ===============
084FB                           ;
084FB                           ; Loads the ending cast sprites and prepares the cast roll crawl.
084FB                           ;
084FB                           ; The technique used to crop the cast roll within the black border is clever;
084FB                           ; by using the first 16 OAM sprite slots to draw 8 sprites at the top and
084FB                           ; bottom, the sprite limit ensures that the cast sprites won't be drawn in that
084FB                           ; part of the screen.
084FB                           ;
084FB                           ; If you disable the sprite limit in an emulator, you'll be able to see the
084FB                           ; sprites pop in and out as they scroll beyond the intended display area.
084FB                           ;
084FB                           MarioDream_CastRollSetup:
084FB A0 4C                     	LDY #CHRBank_EndingCast1
084FD 8C F9 06                  	STY SpriteCHR1
08500 C8                        	INY
08501 8C FA 06                  	STY SpriteCHR2
08504 C8                        	INY
08505 8C FB 06                  	STY SpriteCHR3
08508 C8                        	INY
08509 8C FC 06                  	STY SpriteCHR4
0850C                           
0850C                           	; Top cropping sprites
0850C A2 07                     	LDX #$07
0850E A9 20                     	LDA #$20
08510 85 1E                     	STA CastRollSpriteSetupTemp
08512 A0 00                     	LDY #$00
08514                           MarioDream_CastRollSetup_TopCrop_Loop:
08514 A9 0F                     	LDA #$0F
08516 99 00 02                  	STA SpriteDMAArea, Y
08519 C8                        	INY
0851A A9 3E                     	LDA #$3E
0851C 99 00 02                  	STA SpriteDMAArea, Y
0851F C8                        	INY
08520 A9 00                     	LDA #$00
08522 99 00 02                  	STA SpriteDMAArea, Y
08525 C8                        	INY
08526 A5 1E                     	LDA CastRollSpriteSetupTemp
08528 99 00 02                  	STA SpriteDMAArea, Y
0852B C8                        	INY
0852C 18                        	CLC
0852D 69 08                     	ADC #$08
0852F 85 1E                     	STA CastRollSpriteSetupTemp
08531 CA                        	DEX
08532 10 E0                     	BPL MarioDream_CastRollSetup_TopCrop_Loop
08534                           
08534                           	; Bottom cropping sprites
08534 A2 07                     	LDX #$07
08536 A9 20                     	LDA #$20
08538 85 1E                     	STA CastRollSpriteSetupTemp
0853A                           MarioDream_CastRollSetup_BottomCrop_Loop:
0853A A9 D0                     	LDA #$D0
0853C 99 00 02                  	STA SpriteDMAArea, Y
0853F C8                        	INY
08540 A9 3E                     	LDA #$3E
08542 99 00 02                  	STA SpriteDMAArea, Y
08545 C8                        	INY
08546 A9 00                     	LDA #$00
08548 99 00 02                  	STA SpriteDMAArea, Y
0854B C8                        	INY
0854C A5 1E                     	LDA CastRollSpriteSetupTemp
0854E 99 00 02                  	STA SpriteDMAArea, Y
08551 C8                        	INY
08552 18                        	CLC
08553 69 08                     	ADC #$08
08555 85 1E                     	STA CastRollSpriteSetupTemp
08557 CA                        	DEX
08558 10 E0                     	BPL MarioDream_CastRollSetup_BottomCrop_Loop
0855A                           
0855A                           	; Draw "CAST" sprite
0855A A2 0F                     	LDX #$0F
0855C                           MarioDream_CastRollSetup_CAST_Loop:
0855C BD DC 84                  	LDA CastRoll_CASTText, X
0855F 9D 40 02                  	STA SpriteDMAArea + $40, X
08562 CA                        	DEX
08563 10 F7                     	BPL MarioDream_CastRollSetup_CAST_Loop
08565                           
08565 A9 3F                     	LDA #$3F
08567 8D 01 03                  	STA PPUBuffer_301
0856A A9 11                     	LDA #$11
0856C 8D 02 03                  	STA PPUBuffer_301 + 1
0856F A9 01                     	LDA #$01
08571 8D 03 03                  	STA PPUBuffer_301 + 2
08574 A9 12                     	LDA #$12
08576 8D 04 03                  	STA PPUBuffer_301 + 3
08579 A9 00                     	LDA #$00
0857B 8D 05 03                  	STA PPUBuffer_301 + 4
0857E A9 10                     	LDA #$10
08580 85 28                     	STA CastRollTimer
08582 A9 00                     	LDA #$00
08584 85 29                     	STA CastRollSequenceIndex
08586 85 2A                     	STA CastRollFadePaletteIndex
08588                           
08588                           	; Set delays to space out the cast sprites
08588 A0 40                     	LDY #$40
0858A                           MarioDream_CastRollSetup_SpriteDelay_Loop:
0858A A9 27                     	LDA #$27
0858C 99 50 00                  	STA CastRollSpriteOffset, Y
0858F 88                        	DEY
08590 10 F8                     	BPL MarioDream_CastRollSetup_SpriteDelay_Loop
08592                           
08592 60                        	RTS
08593                           
08593                           
08593                           ;
08593                           ; Fade in the word "CAST"
08593                           ;
08593                           CastRoll_FadeIn:
08593 C6 28                     	DEC CastRollTimer
08595 10 00                     	BPL CastRoll_FadeIn_Exit
08597                           
08597 A9 10                     	LDA #$10
08599 85 28                     	STA CastRollTimer
0859B A9 3F                     	LDA #$3F
0859D 8D 01 03                  	STA PPUBuffer_301
085A0 A9 11                     	LDA #$11
085A2 8D 02 03                  	STA PPUBuffer_301 + 1
085A5 A9 01                     	LDA #$01
085A7 8D 03 03                  	STA PPUBuffer_301 + 2
085AA A4 2A                     	LDY CastRollFadePaletteIndex
085AC B9 AF 84                  	LDA CastRoll_PaletteFadeIn, Y
085AF 8D 04 03                  	STA PPUBuffer_301 + 3
085B2 A9 00                     	LDA #$00
085B4 8D 05 03                  	STA PPUBuffer_301 + 4
085B7                           
085B7 E6 2A                     	INC CastRollFadePaletteIndex
085B9 A5 2A                     	LDA CastRollFadePaletteIndex
085BB C9 03                     	CMP #$03
085BD D0 00                     	BNE CastRoll_FadeIn_Exit
085BF                           
085BF E6 29                     	INC CastRollSequenceIndex
085C1 A9 80                     	LDA #$80
085C3 85 28                     	STA CastRollTimer
085C5 A9 60                     	LDA #$60
085C7 85 1F                     	STA CastRollSprite1A
085C9 A9 01                     	LDA #$01
085CB 85 35                     	STA CastRollSpriteActive1
085CD 85 38                     	STA CastRollSpriteActive4
085CF A9 00                     	LDA #$00
085D1 85 36                     	STA CastRollSpriteActive2
085D3 85 37                     	STA CastRollSpriteActive3
085D5                           
085D5                           CastRoll_FadeIn_Exit:
085D5 60                        	RTS
085D6                           
085D6                           
085D6                           ;
085D6                           ; Pause before starting the crawl, then initialize the first sprite
085D6                           ;
085D6                           CastRoll_CrawlDelay:
085D6 C6 28                     	DEC CastRollTimer
085D8 10 00                     	BPL CastRoll_CrawlDelay_Exit
085DA                           
085DA E6 29                     	INC CastRollSequenceIndex
085DC A9 00                     	LDA #$00
085DE 85 2B                     	STA CastRollSpriteIndex
085E0 85 3F                     	STA CastRollLastSprite
085E2 A9 01                     	LDA #$01
085E4 85 3A                     	STA CastRollSpriteCounter2
085E6                           
085E6                           CastRoll_CrawlDelay_Exit:
085E6 60                        	RTS
085E7                           
085E7                           
085E7                           CastRoll_CrawlStart:
085E7 A5 2E                     	LDA CastRollThrottle
085E9 29 01                     	AND #$01
085EB F0 00                     	BEQ CastRollSprite1
085ED                           
085ED A5 1F                     	LDA CastRollSprite1A
085EF 38                        	SEC
085F0 E9 01                     	SBC #$01
085F2 85 1F                     	STA CastRollSprite1A
085F4 8D 40 02                  	STA SpriteDMAArea + $40
085F7 8D 44 02                  	STA SpriteDMAArea + $44
085FA 8D 48 02                  	STA SpriteDMAArea + $48
085FD 8D 4C 02                  	STA SpriteDMAArea + $4C
08600 A5 1F                     	LDA CastRollSprite1A
08602 C9 10                     	CMP #$10
08604 D0 00                     	BNE CastRollSprite1
08606                           
08606 A9 F8                     	LDA #$F8
08608 8D 40 02                  	STA SpriteDMAArea + $40
0860B 8D 44 02                  	STA SpriteDMAArea + $44
0860E 8D 48 02                  	STA SpriteDMAArea + $48
08611 8D 4A 02                  	STA SpriteDMAArea + $4A
08614 E6 29                     	INC CastRollSequenceIndex
08616 A9 00                     	LDA #$00
08618 85 38                     	STA CastRollSpriteActive4
0861A 85 35                     	STA CastRollSpriteActive1
0861C                           
0861C                           CastRoll_CrawlContinue:
0861C                           CastRollSprite1:
0861C A5 35                     	LDA CastRollSpriteActive1
0861E D0 00                     	BNE CastRollSprite2
08620                           
08620 A5 39                     	LDA CastRollSpriteCounter1
08622 D0 00                     	BNE CastRollSprite2
08624                           
08624 20 EC 84                  	JSR LoadCastRollSpritePointer
08627                           
08627 A0 3F                     	LDY #$3F
08629                           CastRollSprite1_Loop:
08629 B1 2F                     	LDA (CastRollSpriteLo), Y
0862B 99 40 02                  	STA SpriteDMAArea + $40, Y
0862E 88                        	DEY
0862F 10 F8                     	BPL CastRollSprite1_Loop
08631                           
08631                           	; Activate sprite and move to the bottom of the screen
08631 A9 01                     	LDA #$01
08633 85 35                     	STA CastRollSpriteActive1
08635 A9 D0                     	LDA #$D0
08637 85 1F                     	STA CastRollSprite1A
08639 A9 E0                     	LDA #$E0
0863B 85 20                     	STA CastRollSprite1B
0863D A9 F8                     	LDA #$F8
0863F 85 21                     	STA CastRollSprite1C
08641                           
08641                           CastRollSprite2:
08641 A5 36                     	LDA CastRollSpriteActive2
08643 D0 00                     	BNE CastRollSprite3
08645                           
08645 A5 3A                     	LDA CastRollSpriteCounter2
08647 D0 00                     	BNE CastRollSprite3
08649                           
08649 20 EC 84                  	JSR LoadCastRollSpritePointer
0864C                           
0864C A0 3F                     	LDY #$3F
0864E                           CastRollSprite2_Loop:
0864E B1 2F                     	LDA (CastRollSpriteLo), Y
08650 99 80 02                  	STA SpriteDMAArea + $80, Y
08653 88                        	DEY
08654 10 F8                     	BPL CastRollSprite2_Loop
08656                           
08656                           	; Activate sprite and move to the bottom of the screen
08656 A9 01                     	LDA #$01
08658 85 36                     	STA CastRollSpriteActive2
0865A A9 D0                     	LDA #$D0
0865C 85 22                     	STA CastRollSprite2A
0865E A9 E0                     	LDA #$E0
08660 85 23                     	STA CastRollSprite2B
08662 A9 F8                     	LDA #$F8
08664 85 24                     	STA CastRollSprite2C
08666                           
08666                           CastRollSprite3:
08666 A5 37                     	LDA CastRollSpriteActive3
08668 D0 00                     	BNE loc_BANKC_8693
0866A                           
0866A A5 3B                     	LDA CastRollSpriteCounter3
0866C D0 00                     	BNE loc_BANKC_8693
0866E                           
0866E 20 EC 84                  	JSR LoadCastRollSpritePointer
08671                           
08671 A0 3F                     	LDY #$3F
08673                           CastRollSprite3_Loop:
08673 B1 2F                     	LDA (CastRollSpriteLo), Y
08675 99 C0 02                  	STA SpriteDMAArea + $C0, Y
08678 88                        	DEY
08679 10 F8                     	BPL CastRollSprite3_Loop
0867B                           
0867B                           	; Activate sprite and move to the bottom of the screen
0867B A9 01                     	LDA #$01
0867D 85 37                     	STA CastRollSpriteActive3
0867F A9 D0                     	LDA #$D0
08681 85 25                     	STA CastRollSprite3A
08683 A9 E0                     	LDA #$E0
08685 85 26                     	STA CastRollSprite3B
08687 A0 F8                     	LDY #$F8
08689                           	; Is this Tryclyde?
08689 A5 2B                     	LDA CastRollSpriteIndex
0868B C9 00                     	CMP #(CastRoll_SpritePointersLo - CastRoll_SpritePointersHi)
0868D D0 00                     	BNE CastRollSprite3_SetLastRowOffset
0868F                           	; Tryclyde's third row is his body, not label, hence the smaller offset
0868F A0 F0                     	LDY #$F0
08691                           CastRollSprite3_SetLastRowOffset:
08691 84 27                     	STY CastRollSprite3C
08693                           
08693                           loc_BANKC_8693:
08693 A5 38                     	LDA CastRollSpriteActive4
08695 F0 00                     	BEQ loc_BANKC_869A
08697                           
08697 4C 00 00                  	JMP loc_BANKC_873A
0869A                           
0869A                           ; ---------------------------------------------------------------------------
0869A                           
0869A                           loc_BANKC_869A:
0869A A5 2E                     	LDA CastRollThrottle
0869C 29 01                     	AND #$01
0869E D0 00                     	BNE loc_BANKC_86A3
086A0                           
086A0 4C 00 00                  	JMP loc_BANKC_873A
086A3                           
086A3                           ; ---------------------------------------------------------------------------
086A3                           
086A3                           loc_BANKC_86A3:
086A3 AD 40 02                  	LDA SpriteDMAArea + $40
086A6 C9 F8                     	CMP #$F8
086A8 F0 00                     	BEQ loc_BANKC_86C3
086AA                           
086AA A5 1F                     	LDA CastRollSprite1A
086AC 38                        	SEC
086AD E9 01                     	SBC #$01
086AF C9 10                     	CMP #$10
086B1 D0 00                     	BNE loc_BANKC_86B5
086B3                           
086B3 A9 F8                     	LDA #$F8
086B5                           
086B5                           loc_BANKC_86B5:
086B5 85 1F                     	STA CastRollSprite1A
086B7 8D 40 02                  	STA SpriteDMAArea + $40
086BA 8D 44 02                  	STA SpriteDMAArea + $44
086BD 8D 48 02                  	STA SpriteDMAArea + $48
086C0 8D 4C 02                  	STA SpriteDMAArea + $4C
086C3                           
086C3                           loc_BANKC_86C3:
086C3 AD 50 02                  	LDA SpriteDMAArea + $50
086C6 C9 F8                     	CMP #$F8
086C8 F0 00                     	BEQ loc_BANKC_86F2
086CA                           
086CA C6 20                     	DEC CastRollSprite1B
086CC C9 F9                     	CMP #$F9
086CE D0 00                     	BNE loc_BANKC_86D6
086D0                           
086D0 A5 20                     	LDA CastRollSprite1B
086D2 C9 D0                     	CMP #$D0
086D4 D0 00                     	BNE loc_BANKC_86F2
086D6                           
086D6                           loc_BANKC_86D6:
086D6 A5 20                     	LDA CastRollSprite1B
086D8 C9 10                     	CMP #$10
086DA D0 00                     	BNE loc_BANKC_86E6
086DC                           
086DC A5 2B                     	LDA CastRollSpriteIndex
086DE C9 FF                     	CMP #$FF
086E0 D0 00                     	BNE loc_BANKC_86E4
086E2                           
086E2 E6 29                     	INC CastRollSequenceIndex
086E4                           
086E4                           loc_BANKC_86E4:
086E4 A9 F8                     	LDA #$F8
086E6                           
086E6                           loc_BANKC_86E6:
086E6 8D 50 02                  	STA SpriteDMAArea + $50
086E9 8D 54 02                  	STA SpriteDMAArea + $54
086EC 8D 58 02                  	STA SpriteDMAArea + $58
086EF 8D 5C 02                  	STA SpriteDMAArea + $5C
086F2                           
086F2                           loc_BANKC_86F2:
086F2 AD 60 02                  	LDA SpriteDMAArea + $60
086F5 C9 F8                     	CMP #$F8
086F7 F0 00                     	BEQ loc_BANKC_873A
086F9                           
086F9 C6 21                     	DEC CastRollSprite1C
086FB C9 F9                     	CMP #$F9
086FD D0 00                     	BNE loc_BANKC_870C
086FF                           
086FF A5 21                     	LDA CastRollSprite1C
08701 C9 D0                     	CMP #$D0
08703 D0 00                     	BNE loc_BANKC_873A
08705                           
08705 A4 2B                     	LDY CastRollSpriteIndex
08707 B9 50 00                  	LDA CastRollSpriteOffset, Y
0870A 85 3A                     	STA CastRollSpriteCounter2
0870C                           
0870C                           loc_BANKC_870C:
0870C A5 21                     	LDA CastRollSprite1C
0870E C9 10                     	CMP #$10
08710 D0 00                     	BNE loc_BANKC_8722
08712                           
08712 A9 00                     	LDA #$00
08714 85 35                     	STA CastRollSpriteActive1
08716 A5 2B                     	LDA CastRollSpriteIndex
08718 C9 FF                     	CMP #$FF
0871A D0 00                     	BNE loc_BANKC_8720
0871C                           
0871C A9 FF                     	LDA #$FF
0871E 85 35                     	STA CastRollSpriteActive1
08720                           
08720                           loc_BANKC_8720:
08720 A9 F8                     	LDA #$F8
08722                           
08722                           loc_BANKC_8722:
08722 8D 60 02                  	STA SpriteDMAArea + $60
08725 8D 64 02                  	STA SpriteDMAArea + $64
08728 8D 68 02                  	STA SpriteDMAArea + $68
0872B 8D 6C 02                  	STA SpriteDMAArea + $6C
0872E 8D 70 02                  	STA SpriteDMAArea + $70
08731 8D 74 02                  	STA SpriteDMAArea + $74
08734 8D 78 02                  	STA SpriteDMAArea + $78
08737 8D 7C 02                  	STA SpriteDMAArea + $7C
0873A                           
0873A                           loc_BANKC_873A:
0873A A5 2E                     	LDA CastRollThrottle
0873C 29 01                     	AND #$01
0873E D0 00                     	BNE loc_BANKC_8743
08740                           
08740 4C 00 00                  	JMP loc_BANKC_87D2
08743                           
08743                           ; ---------------------------------------------------------------------------
08743                           
08743                           loc_BANKC_8743:
08743 AD 80 02                  	LDA SpriteDMAArea + $80
08746 C9 F8                     	CMP #$F8
08748 F0 00                     	BEQ loc_BANKC_8763
0874A                           
0874A A5 22                     	LDA CastRollSprite2A
0874C                           
0874C                           loc_BANKC_874C:
0874C 38                        	SEC
0874D E9 01                     	SBC #$01
0874F C9 10                     	CMP #$10
08751 D0 00                     	BNE loc_BANKC_8755
08753                           
08753 A9 F8                     	LDA #$F8
08755                           
08755                           loc_BANKC_8755:
08755 85 22                     	STA CastRollSprite2A
08757 8D 80 02                  	STA SpriteDMAArea + $80
0875A 8D 84 02                  	STA SpriteDMAArea + $84
0875D 8D 88 02                  	STA SpriteDMAArea + $88
08760 8D 8C 02                  	STA SpriteDMAArea + $8C
08763                           
08763                           loc_BANKC_8763:
08763 AD 90 02                  	LDA SpriteDMAArea + $90
08766 C9 F8                     	CMP #$F8
08768 F0 00                     	BEQ loc_BANKC_878A
0876A                           
0876A C6 23                     	DEC CastRollSprite2B
0876C C9 F9                     	CMP #$F9
0876E D0 00                     	BNE loc_BANKC_8776
08770                           
08770 A5 23                     	LDA CastRollSprite2B
08772 C9 D0                     	CMP #$D0
08774 D0 00                     	BNE loc_BANKC_878A
08776                           
08776                           loc_BANKC_8776:
08776 A5 23                     	LDA CastRollSprite2B
08778 C9 10                     	CMP #$10
0877A D0 00                     	BNE loc_BANKC_877E
0877C                           
0877C A9 F8                     	LDA #$F8
0877E                           
0877E                           loc_BANKC_877E:
0877E 8D 90 02                  	STA SpriteDMAArea + $90
08781 8D 94 02                  	STA SpriteDMAArea + $94
08784                           
08784                           loc_BANKC_8784:
08784 8D 98 02                  	STA SpriteDMAArea + $98
08787 8D 9C 02                  	STA SpriteDMAArea + $9C
0878A                           
0878A                           loc_BANKC_878A:
0878A AD A0 02                  	LDA SpriteDMAArea + $A0
0878D C9 F8                     	CMP #$F8
0878F F0 00                     	BEQ loc_BANKC_87D2
08791                           
08791 C6 24                     	DEC CastRollSprite2C
08793 C9 F9                     	CMP #$F9
08795 D0 00                     	BNE loc_BANKC_87A4
08797                           
08797 A5 24                     	LDA CastRollSprite2C
08799 C9 D0                     	CMP #$D0
0879B D0 00                     	BNE loc_BANKC_87D2
0879D                           
0879D A4 2B                     	LDY CastRollSpriteIndex
0879F B9 50 00                  	LDA CastRollSpriteOffset, Y
087A2 85 3B                     	STA CastRollSpriteCounter3
087A4                           
087A4                           loc_BANKC_87A4:
087A4 A5 24                     	LDA CastRollSprite2C
087A6 C9 10                     	CMP #$10
087A8 D0 00                     	BNE loc_BANKC_87BA
087AA                           
087AA                           loc_BANKC_87AA:
087AA A9 00                     	LDA #$00
087AC 85 36                     	STA CastRollSpriteActive2
087AE A5 2B                     	LDA CastRollSpriteIndex
087B0 C9 FF                     	CMP #$FF
087B2 D0 00                     	BNE loc_BANKC_87B8
087B4                           
087B4 A9 FF                     	LDA #$FF
087B6 85 36                     	STA CastRollSpriteActive2
087B8                           
087B8                           loc_BANKC_87B8:
087B8 A9 F8                     	LDA #$F8
087BA                           
087BA                           loc_BANKC_87BA:
087BA 8D A0 02                  	STA SpriteDMAArea + $A0
087BD 8D A4 02                  	STA SpriteDMAArea + $A4
087C0 8D A8 02                  	STA SpriteDMAArea + $A8
087C3 8D AC 02                  	STA SpriteDMAArea + $AC
087C6 8D B0 02                  	STA SpriteDMAArea + $B0
087C9 8D B4 02                  	STA SpriteDMAArea + $B4
087CC 8D B8 02                  	STA SpriteDMAArea + $B8
087CF 8D BC 02                  	STA SpriteDMAArea + $BC
087D2                           
087D2                           loc_BANKC_87D2:
087D2 A5 2E                     	LDA CastRollThrottle
087D4 29 01                     	AND #$01
087D6 D0 00                     	BNE loc_BANKC_87DB
087D8                           
087D8 4C 00 00                  	JMP locret_BANKC_8897
087DB                           
087DB                           ; ---------------------------------------------------------------------------
087DB                           
087DB                           loc_BANKC_87DB:
087DB AD C0 02                  	LDA SpriteDMAArea + $C0
087DE C9 F8                     	CMP #$F8
087E0 F0 00                     	BEQ loc_BANKC_87FB
087E2                           
087E2 A5 25                     	LDA CastRollSprite3A
087E4 38                        	SEC
087E5 E9 01                     	SBC #$01
087E7 C9 10                     	CMP #$10
087E9 D0 00                     	BNE loc_BANKC_87ED
087EB                           
087EB A9 F8                     	LDA #$F8
087ED                           
087ED                           loc_BANKC_87ED:
087ED 85 25                     	STA CastRollSprite3A
087EF 8D C0 02                  	STA SpriteDMAArea + $C0
087F2 8D C4 02                  	STA SpriteDMAArea + $C4
087F5 8D C8 02                  	STA SpriteDMAArea + $C8
087F8 8D CC 02                  	STA SpriteDMAArea + $CC
087FB                           
087FB                           loc_BANKC_87FB:
087FB AD D0 02                  	LDA SpriteDMAArea + $D0
087FE C9 F8                     	CMP #$F8
08800 F0 00                     	BEQ loc_BANKC_8822
08802                           
08802 C6 26                     	DEC CastRollSprite3B
08804 C9 F9                     	CMP #$F9
08806 D0 00                     	BNE loc_BANKC_880E
08808                           
08808 A5 26                     	LDA CastRollSprite3B
0880A C9 D0                     	CMP #$D0
0880C D0 00                     	BNE loc_BANKC_8822
0880E                           
0880E                           loc_BANKC_880E:
0880E A5 26                     	LDA CastRollSprite3B
08810 C9 10                     	CMP #$10
08812 D0 00                     	BNE loc_BANKC_8816
08814                           
08814 A9 F8                     	LDA #$F8
08816                           
08816                           loc_BANKC_8816:
08816 8D D0 02                  	STA SpriteDMAArea + $D0
08819 8D D4 02                  	STA SpriteDMAArea + $D4
0881C 8D D8 02                  	STA SpriteDMAArea + $D8
0881F 8D DC 02                  	STA SpriteDMAArea + $DC
08822                           
08822                           loc_BANKC_8822:
08822 AD E0 02                  	LDA SpriteDMAArea + $E0
08825 C9 F8                     	CMP #$F8
08827 F0 00                     	BEQ locret_BANKC_8897
08829                           
08829 C6 27                     	DEC CastRollSprite3C
0882B C9 F9                     	CMP #$F9
0882D D0 00                     	BNE loc_BANKC_883C
0882F                           
0882F A5 27                     	LDA CastRollSprite3C
08831 C9 D0                     	CMP #$D0
08833 D0 00                     	BNE locret_BANKC_8897
08835                           
08835 A4 2B                     	LDY CastRollSpriteIndex
08837 B9 50 00                  	LDA CastRollSpriteOffset, Y
0883A 85 39                     	STA CastRollSpriteCounter1
0883C                           
0883C                           loc_BANKC_883C:
0883C                           	; Is this Tryclyde?
0883C A5 2B                     	LDA CastRollSpriteIndex
0883E C9 00                     	CMP #(CastRoll_SpritePointersLo - CastRoll_SpritePointersHi)
08840 D0 00                     	BNE loc_BANKC_884C
08842                           	; And is the last row at the right spot?
08842 A5 27                     	LDA CastRollSprite3C
08844 C9 B8                     	CMP #$B8
08846 D0 00                     	BNE loc_BANKC_884C
08848                           	; Add "TRICLYDE" to the crawl
08848 A9 01                     	LDA #$01
0884A 85 3F                     	STA CastRollLastSprite
0884C                           
0884C                           loc_BANKC_884C:
0884C A5 27                     	LDA CastRollSprite3C
0884E C9 10                     	CMP #$10
08850 D0 00                     	BNE loc_BANKC_8862
08852                           
08852 A9 00                     	LDA #$00
08854 85 37                     	STA CastRollSpriteActive3
08856 A5 2B                     	LDA CastRollSpriteIndex
08858 C9 FF                     	CMP #$FF
0885A D0 00                     	BNE loc_BANKC_8860
0885C                           
0885C A9 FF                     	LDA #$FF
0885E 85 37                     	STA CastRollSpriteActive3
08860                           
08860                           loc_BANKC_8860:
08860 A9 F8                     	LDA #$F8
08862                           
08862                           loc_BANKC_8862:
08862 8D E0 02                  	STA SpriteDMAArea + $E0
08865 8D E4 02                  	STA SpriteDMAArea + $E4
08868 8D E8 02                  	STA SpriteDMAArea + $E8
0886B 8D EC 02                  	STA SpriteDMAArea + $EC
0886E 8D F0 02                  	STA SpriteDMAArea + $F0
08871 8D F4 02                  	STA SpriteDMAArea + $F4
08874 8D F8 02                  	STA SpriteDMAArea + $F8
08877 8D FC 02                  	STA SpriteDMAArea + $FC
0887A A5 3F                     	LDA CastRollLastSprite
0887C F0 00                     	BEQ locret_BANKC_8897
0887E                           
0887E                           	; Other sprites include their own text label, but since Tryclyde is taller
0887E                           	; than the rest, his label is drawn separately
0887E A0 00                     	LDY #(CastRoll_Wart - CastRoll_TriclydeText - 1)
08880                           CastRoll_TriclydeTextLoop:
08880 B9 00 00                  	LDA CastRoll_TriclydeText, Y
08883 99 40 02                  	STA SpriteDMAArea + $40, Y
08886 88                        	DEY
08887 10 F7                     	BPL CastRoll_TriclydeTextLoop
08889                           
08889 A9 D0                     	LDA #$D0
0888B 85 1F                     	STA CastRollSprite1A
0888D 85 20                     	STA CastRollSprite1B
0888F A9 00                     	LDA #$00
08891 85 3F                     	STA CastRollLastSprite
08893 A9 FF                     	LDA #$FF
08895 85 2B                     	STA CastRollSpriteIndex
08897                           
08897                           locret_BANKC_8897:
08897 60                        	RTS
08898                           
08898                           ; ---------------------------------------------------------------------------
08898                           
08898                           CastRoll_QueueWart:
08898 A0 48                     	LDY #$48
0889A 8C F9 06                  	STY SpriteCHR1
0889D C8                        	INY
0889E 8C FA 06                  	STY SpriteCHR2
088A1 C8                        	INY
088A2 8C FB 06                  	STY SpriteCHR3
088A5 C8                        	INY
088A6 8C FC 06                  	STY SpriteCHR4
088A9                           
088A9 A0 5B                     	LDY #$5B
088AB                           loc_BANKC_88AB:
088AB B9 00 00                  	LDA CastRoll_Wart, Y
088AE 99 40 02                  	STA SpriteDMAArea + $40, Y
088B1 88                        	DEY
088B2 10 F7                     	BPL loc_BANKC_88AB
088B4                           
088B4 E6 29                     	INC CastRollSequenceIndex
088B6                           
088B6 A0 00                     	LDY #$00
088B8 A2 0F                     	LDX #$0F
088BA A9 C0                     	LDA #$C0
088BC                           loc_BANKC_88BC:
088BC 99 01 02                  	STA SpriteDMAArea + 1, Y
088BF C8                        	INY
088C0 C8                        	INY
088C1 C8                        	INY
088C2 C8                        	INY
088C3 CA                        	DEX
088C4 10 F6                     	BPL loc_BANKC_88BC
088C6                           
088C6 A9 D0                     	LDA #$D0
088C8 85 1F                     	STA CastRollSprite1A
088CA A9 E0                     	LDA #$E0
088CC 85 20                     	STA CastRollSprite1B
088CE A9 F0                     	LDA #$F0
088D0 85 21                     	STA CastRollSprite1C
088D2 A9 08                     	LDA #$08
088D4 85 22                     	STA CastRollSprite2A
088D6                           
088D6 60                        	RTS
088D7                           
088D7                           
088D7                           CastRoll_WartLaugh:
088D7 A5 2E                     	LDA CastRollThrottle
088D9 29 01                     	AND #$01
088DB D0 00                     	BNE loc_BANKC_88E0
088DD                           
088DD 4C 00 00                  	JMP loc_BANKC_898D
088E0                           
088E0                           ; ---------------------------------------------------------------------------
088E0                           
088E0                           loc_BANKC_88E0:
088E0 AD 40 02                  	LDA SpriteDMAArea + $40
088E3 C9 F8                     	CMP #$F8
088E5 F0 00                     	BEQ loc_BANKC_8906
088E7                           
088E7 A5 1F                     	LDA CastRollSprite1A
088E9 38                        	SEC
088EA E9 01                     	SBC #$01
088EC C9 50                     	CMP #$50
088EE D0 00                     	BNE loc_BANKC_88F5
088F0                           
088F0 E6 29                     	INC CastRollSequenceIndex
088F2 4C 00 00                  	JMP loc_BANKC_898D
088F5                           
088F5                           ; ---------------------------------------------------------------------------
088F5                           
088F5                           loc_BANKC_88F5:
088F5 85 1F                     	STA CastRollSprite1A
088F7 8D 40 02                  	STA SpriteDMAArea + $40
088FA 8D 44 02                  	STA SpriteDMAArea + $44
088FD 8D 48 02                  	STA SpriteDMAArea + $48
08900 8D 4C 02                  	STA SpriteDMAArea + $4C
08903 8D 50 02                  	STA SpriteDMAArea + $50
08906                           
08906                           loc_BANKC_8906:
08906 AD 54 02                  	LDA SpriteDMAArea + $54
08909 C9 F8                     	CMP #$F8
0890B F0 00                     	BEQ loc_BANKC_8930
0890D                           
0890D C6 20                     	DEC CastRollSprite1B
0890F C9 F9                     	CMP #$F9
08911 D0 00                     	BNE loc_BANKC_8919
08913                           
08913 A5 20                     	LDA CastRollSprite1B
08915 C9 D0                     	CMP #$D0
08917 D0 00                     	BNE loc_BANKC_8930
08919                           
08919                           loc_BANKC_8919:
08919 A5 20                     	LDA CastRollSprite1B
0891B C9 10                     	CMP #$10
0891D D0 00                     	BNE loc_BANKC_8921
0891F                           
0891F A9 F8                     	LDA #$F8
08921                           
08921                           loc_BANKC_8921:
08921 8D 54 02                  	STA SpriteDMAArea + $54
08924 8D 58 02                  	STA SpriteDMAArea + $58
08927 8D 5C 02                  	STA SpriteDMAArea + $5C
0892A 8D 60 02                  	STA SpriteDMAArea + $60
0892D 8D 64 02                  	STA SpriteDMAArea + $64
08930                           
08930                           loc_BANKC_8930:
08930 AD 68 02                  	LDA SpriteDMAArea + $68
08933 C9 F8                     	CMP #$F8
08935 F0 00                     	BEQ loc_BANKC_895A
08937                           
08937 C6 21                     	DEC CastRollSprite1C
08939 C9 F9                     	CMP #$F9
0893B D0 00                     	BNE loc_BANKC_8943
0893D                           
0893D A5 21                     	LDA CastRollSprite1C
0893F C9 D0                     	CMP #$D0
08941 D0 00                     	BNE loc_BANKC_895A
08943                           
08943                           loc_BANKC_8943:
08943 A5 21                     	LDA CastRollSprite1C
08945 C9 10                     	CMP #$10
08947 D0 00                     	BNE loc_BANKC_894B
08949                           
08949 A9 F8                     	LDA #$F8
0894B                           
0894B                           loc_BANKC_894B:
0894B 8D 68 02                  	STA SpriteDMAArea + $68
0894E 8D 6C 02                  	STA SpriteDMAArea + $6C
08951 8D 70 02                  	STA SpriteDMAArea + $70
08954 8D 74 02                  	STA SpriteDMAArea + $74
08957 8D 78 02                  	STA SpriteDMAArea + $78
0895A                           
0895A                           loc_BANKC_895A:
0895A AD 7C 02                  	LDA SpriteDMAArea + $7C
0895D C9 F8                     	CMP #$F8
0895F F0 00                     	BEQ loc_BANKC_898D
08961                           
08961 C6 22                     	DEC CastRollSprite2A
08963 C9 F9                     	CMP #$F9
08965 D0 00                     	BNE loc_BANKC_896D
08967                           
08967 A5 22                     	LDA CastRollSprite2A
08969 C9 D0                     	CMP #$D0
0896B D0 00                     	BNE loc_BANKC_898D
0896D                           
0896D                           loc_BANKC_896D:
0896D A5 22                     	LDA CastRollSprite2A
0896F C9 10                     	CMP #$10
08971 D0 00                     	BNE loc_BANKC_8975
08973                           
08973 A9 F8                     	LDA #$F8
08975                           
08975                           loc_BANKC_8975:
08975 8D 7C 02                  	STA SpriteDMAArea + $7C
08978 8D 80 02                  	STA SpriteDMAArea + $80
0897B 8D 84 02                  	STA SpriteDMAArea + $84
0897E 8D 88 02                  	STA SpriteDMAArea + $88
08981 8D 8C 02                  	STA SpriteDMAArea + $8C
08984 8D 90 02                  	STA SpriteDMAArea + $90
08987 8D 94 02                  	STA SpriteDMAArea + $94
0898A 8D 98 02                  	STA SpriteDMAArea + $98
0898D                           
0898D                           loc_BANKC_898D:
0898D A9 00                     	LDA #$00
0898F 85 3D                     	STA CastRoll_TempA
08991 85 3C                     	STA CastRoll_Temp9
08993 A9 0C                     	LDA #$0C
08995 85 3E                     	STA CastRoll_TempA1
08997 60                        	RTS
08998                           
08998                           
08998                           WartLaugh_Frame1:
08998 9E                        	.db $9E
08999 A0                        	.db $A0
0899A A2                        	.db $A2
0899B A4                        	.db $A4
0899C 88                        	.db $88
0899D A6                        	.db $A6
0899E A8                        	.db $A8
0899F AA                        	.db $AA
089A0 AC                        	.db $AC
089A1 92                        	.db $92
089A2 94                        	.db $94
089A3 96                        	.db $96
089A4 98                        	.db $98
089A5 9A                        	.db $9A
089A6 9C                        	.db $9C
089A7                           WartLaugh_Frame2:
089A7 AE                        	.db $AE
089A8 B0                        	.db $B0
089A9 B2                        	.db $B2
089AA B4                        	.db $B4
089AB BE                        	.db $BE
089AC B6                        	.db $B6
089AD B8                        	.db $B8
089AE BA                        	.db $BA
089AF BC                        	.db $BC
089B0 92                        	.db $92
089B1 94                        	.db $94
089B2 96                        	.db $96
089B3 98                        	.db $98
089B4 9A                        	.db $9A
089B5 9C                        	.db $9C
089B6                           
089B6                           
089B6                           loc_BANKC_89B6:
089B6 C6 3C                     	DEC CastRoll_Temp9
089B8 10 00                     	BPL locret_BANKC_8A00
089BA                           
089BA A9 08                     	LDA #$08
089BC 85 3C                     	STA CastRoll_Temp9
089BE C6 3E                     	DEC CastRoll_TempA1
089C0 10 00                     	BPL loc_BANKC_89CD
089C2                           
089C2 E6 29                     	INC CastRollSequenceIndex
089C4 A9 00                     	LDA #$00
089C6 85 28                     	STA CastRollTimer
089C8 85 2A                     	STA CastRollFadePaletteIndex
089CA 4C 00 00                  	JMP locret_BANKC_8A00
089CD                           
089CD                           
089CD                           loc_BANKC_89CD:
089CD A5 3D                     	LDA CastRoll_TempA
089CF 29 01                     	AND #$01
089D1 D0 00                     	BNE loc_BANKC_89EB
089D3                           
089D3 A0 00                     	LDY #$00
089D5 A2 00                     	LDX #$00
089D7                           loc_BANKC_89D7:
089D7 E6 3D                     	INC CastRoll_TempA
089D9 BD 98 89                  	LDA WartLaugh_Frame1, X
089DC 99 41 02                  	STA SpriteDMAArea + $41, Y
089DF C8                        	INY
089E0 C8                        	INY
089E1 C8                        	INY
089E2 C8                        	INY
089E3 E8                        	INX
089E4 E0 0F                     	CPX #$0F
089E6 D0 EF                     	BNE loc_BANKC_89D7
089E8                           
089E8 4C 00 00                  	JMP locret_BANKC_8A00
089EB                           
089EB                           ; ---------------------------------------------------------------------------
089EB                           
089EB                           loc_BANKC_89EB:
089EB E6 3D                     	INC CastRoll_TempA
089ED A2 00                     	LDX #$00
089EF A0 00                     	LDY #$00
089F1                           
089F1                           loc_BANKC_89F1:
089F1 BD A7 89                  	LDA WartLaugh_Frame2, X
089F4 99 41 02                  	STA SpriteDMAArea + $41, Y
089F7 C8                        	INY
089F8 C8                        	INY
089F9 C8                        	INY
089FA C8                        	INY
089FB E8                        	INX
089FC E0 0F                     	CPX #$F
089FE D0 F1                     	BNE loc_BANKC_89F1
08A00                           
08A00                           locret_BANKC_8A00:
08A00 60                        	RTS
08A01                           
08A01                           
08A01                           CastRoll_PaletteFadeOut:
08A01 32                        	.db $32
08A02 22                        	.db $22
08A03 12                        	.db $12
08A04                           
08A04                           
08A04                           loc_BANKC_8A04:
08A04 C6 28                     	DEC CastRollTimer
08A06 10 00                     	BPL locret_BANKC_8A36
08A08                           
08A08 A9 10                     	LDA #$10
08A0A 85 28                     	STA CastRollTimer
08A0C A9 3F                     	LDA #$3F
08A0E 8D 01 03                  	STA PPUBuffer_301
08A11 A9 11                     	LDA #$11
08A13 8D 02 03                  	STA PPUBuffer_301 + 1
08A16 A9 01                     	LDA #$01
08A18 8D 03 03                  	STA PPUBuffer_301 + 2
08A1B A4 2A                     	LDY CastRollFadePaletteIndex
08A1D B9 01 8A                  	LDA CastRoll_PaletteFadeOut, Y
08A20 8D 04 03                  	STA PPUBuffer_301 + 3
08A23 A9 00                     	LDA #$00
08A25 8D 05 03                  	STA PPUBuffer_301 + 4
08A28 E6 2A                     	INC CastRollFadePaletteIndex
08A2A A5 2A                     	LDA CastRollFadePaletteIndex
08A2C C9 03                     	CMP #$03
08A2E D0 00                     	BNE locret_BANKC_8A36
08A30                           
08A30 E6 29                     	INC CastRollSequenceIndex
08A32 A9 16                     	LDA #$16
08A34 85 28                     	STA CastRollTimer
08A36                           
08A36                           locret_BANKC_8A36:
08A36 60                        	RTS
08A37                           
08A37                           ; ---------------------------------------------------------------------------
08A37                           
08A37                           loc_BANKC_8A37:
08A37 C6 28                     	DEC CastRollTimer
08A39 10 00                     	BPL locret_BANKC_8A51
08A3B                           
08A3B A2 16                     	LDX #$16
08A3D A0 00                     	LDY #$00
08A3F A9 F8                     	LDA #$F8
08A41                           
08A41                           loc_BANKC_8A41:
08A41 99 40 02                  	STA SpriteDMAArea + $40, Y
08A44 C8                        	INY
08A45 C8                        	INY
08A46 C8                        	INY
08A47 C8                        	INY
08A48 CA                        	DEX
08A49 10 F6                     	BPL loc_BANKC_8A41
08A4B                           
08A4B A9 30                     	LDA #$30
08A4D 85 28                     	STA CastRollTimer
08A4F                           
08A4F                           loc_BANKC_8A4F:
08A4F E6 29                     	INC CastRollSequenceIndex
08A51                           
08A51                           locret_BANKC_8A51:
08A51 60                        	RTS
08A52                           
08A52                           
08A52                           CastRoll_TheEndDelay:
08A52 C6 28                     	DEC CastRollTimer
08A54 10 00                     	BPL CastRoll_TheEndDelay_Exit
08A56                           
08A56 A9 00                     	LDA #$00
08A58 85 19                     	STA MarioSnoringCounter5
08A5A 85 1A                     	STA MarioSnoringCounter6
08A5C 85 1B                     	STA MarioSnoringCounter7
08A5E A9 05                     	LDA #$05
08A60 85 1C                     	STA MarioSnoringTheEndFrameCounter
08A62 A9 14                     	LDA #$14
08A64 85 1D                     	STA MarioSnoringCounter9
08A66                           
08A66 A9 3F                     	LDA #$3F
08A68 8D 01 03                  	STA PPUBuffer_301
08A6B A9 11                     	LDA #$11
08A6D 8D 02 03                  	STA PPUBuffer_301 + 1
08A70 A9 01                     	LDA #$01
08A72 8D 03 03                  	STA PPUBuffer_301 + 2
08A75 A9 30                     	LDA #$30
08A77 8D 04 03                  	STA PPUBuffer_301 + 3
08A7A A9 00                     	LDA #$00
08A7C 8D 05 03                  	STA PPUBuffer_301 + 4
08A7F E6 29                     	INC CastRollSequenceIndex
08A81                           
08A81                           CastRoll_TheEndDelay_Exit:
08A81 60                        	RTS
08A82                           
08A82                           
08A82                           CastRoll_TheEndAnimation:
08A82 A5 1A                     	LDA MarioSnoringCounter6
08A84 29 80                     	AND #$80
08A86 D0 00                     	BNE CastRoll_TheEndAnimation_Exit
08A88                           
08A88 A5 1A                     	LDA MarioSnoringCounter6
08A8A D0 00                     	BNE loc_BANKC_8ACD
08A8C                           
08A8C C6 1C                     	DEC MarioSnoringTheEndFrameCounter
08A8E 10 00                     	BPL CastRoll_TheEndAnimation_Exit
08A90                           
08A90 A9 05                     	LDA #$05
08A92 85 1C                     	STA MarioSnoringTheEndFrameCounter
08A94 A9 03                     	LDA #$03
08A96 85 1B                     	STA MarioSnoringCounter7
08A98 A2 00                     	LDX #$00
08A9A A4 19                     	LDY MarioSnoringCounter5
08A9C                           
08A9C                           loc_BANKC_8A9C:
08A9C A9 40                     	LDA #$40
08A9E 9D 00 02                  	STA SpriteDMAArea, X
08AA1 E8                        	INX
08AA2 B9 00 00                  	LDA byte_BANKC_92FE, Y
08AA5 9D 00 02                  	STA SpriteDMAArea, X
08AA8 C8                        	INY
08AA9 E8                        	INX
08AAA A9 00                     	LDA #$00
08AAC 9D 00 02                  	STA SpriteDMAArea, X
08AAF E8                        	INX
08AB0 B9 00 00                  	LDA byte_BANKC_92FE, Y
08AB3 9D 00 02                  	STA SpriteDMAArea, X
08AB6 C8                        	INY
08AB7 E8                        	INX
08AB8 C6 1B                     	DEC MarioSnoringCounter7
08ABA 10 E0                     	BPL loc_BANKC_8A9C
08ABC                           
08ABC 84 19                     	STY MarioSnoringCounter5
08ABE C6 1D                     	DEC MarioSnoringCounter9
08AC0 10 00                     	BPL CastRoll_TheEndAnimation_Exit
08AC2                           
08AC2 E6 1A                     	INC MarioSnoringCounter6
08AC4 A9 12                     	LDA #$12
08AC6 85 1D                     	STA MarioSnoringCounter9
08AC8 A9 00                     	LDA #$00
08ACA 85 19                     	STA MarioSnoringCounter5
08ACC                           
08ACC                           CastRoll_TheEndAnimation_Exit:
08ACC 60                        	RTS
08ACD                           
08ACD                           ; ---------------------------------------------------------------------------
08ACD                           
08ACD                           loc_BANKC_8ACD:
08ACD C6 1C                     	DEC MarioSnoringTheEndFrameCounter
08ACF 10 00                     	BPL locret_BANKC_8B07
08AD1                           
08AD1 A9 05                     	LDA #$05
08AD3 85 1C                     	STA MarioSnoringTheEndFrameCounter
08AD5 A9 03                     	LDA #$03
08AD7 85 1B                     	STA MarioSnoringCounter7
08AD9 A2 00                     	LDX #$00
08ADB A4 19                     	LDY MarioSnoringCounter5
08ADD                           
08ADD                           loc_BANKC_8ADD:
08ADD A9 40                     	LDA #$40
08ADF 9D 10 02                  	STA SpriteDMAArea + $10, X
08AE2 E8                        	INX
08AE3 B9 00 00                  	LDA byte_BANKC_93A6, Y
08AE6 9D 10 02                  	STA SpriteDMAArea + $10, X
08AE9 C8                        	INY
08AEA E8                        	INX
08AEB A9 00                     	LDA #$00
08AED 9D 10 02                  	STA SpriteDMAArea + $10, X
08AF0 E8                        	INX
08AF1 B9 00 00                  	LDA byte_BANKC_93A6, Y
08AF4 9D 10 02                  	STA SpriteDMAArea + $10, X
08AF7 C8                        	INY
08AF8 E8                        	INX
08AF9 C6 1B                     	DEC MarioSnoringCounter7
08AFB 10 E0                     	BPL loc_BANKC_8ADD
08AFD                           
08AFD 84 19                     	STY MarioSnoringCounter5
08AFF C6 1D                     	DEC MarioSnoringCounter9
08B01 10 00                     	BPL locret_BANKC_8B07
08B03                           
08B03 A9 FF                     	LDA #$FF
08B05 85 1A                     	STA MarioSnoringCounter6
08B07                           
08B07                           locret_BANKC_8B07:
08B07 60                        	RTS
08B08                           
08B08                           
08B08                           CastRoll_SpritePointersHi:
08B08 00                        	.db >CastRoll_Mario
08B09 00                        	.db >CastRoll_Luigi
08B0A 00                        	.db >CastRoll_Princess
08B0B 00                        	.db >CastRoll_Toad
08B0C 00                        	.db >CastRoll_Shyguy
08B0D 00                        	.db >CastRoll_Snifit
08B0E 00                        	.db >CastRoll_Ninji
08B0F 00                        	.db >CastRoll_Beezo
08B10 00                        	.db >CastRoll_Porcupo
08B11 00                        	.db >CastRoll_Tweeter
08B12 00                        	.db >CastRoll_BobOmb
08B13 00                        	.db >CastRoll_Hoopstar
08B14 00                        	.db >CastRoll_Trouter
08B15 00                        	.db >CastRoll_Pidgit
08B16 00                        	.db >CastRoll_Panser
08B17 00                        	.db >CastRoll_Flurry
08B18 00                        	.db >CastRoll_Albatoss
08B19 00                        	.db >CastRoll_Phanto
08B1A 00                        	.db >CastRoll_Spark
08B1B 00                        	.db >CastRoll_Subcon
08B1C 00                        	.db >CastRoll_Pokey
08B1D 00                        	.db >CastRoll_Birdo
08B1E 00                        	.db >CastRoll_Ostro
08B1F 00                        	.db >CastRoll_Autobomb
08B20 00                        	.db >CastRoll_Cobrat
08B21 00                        	.db >CastRoll_Mouser
08B22 00                        	.db >CastRoll_Fryguy
08B23 00                        	.db >CastRoll_Clawglip
08B24 00                        	.db >CastRoll_Triclyde
08B25                           
08B25                           CastRoll_SpritePointersLo:
08B25 00                        	.db <CastRoll_Mario
08B26 00                        	.db <CastRoll_Luigi
08B27 00                        	.db <CastRoll_Princess
08B28 00                        	.db <CastRoll_Toad
08B29 00                        	.db <CastRoll_Shyguy
08B2A 00                        	.db <CastRoll_Snifit
08B2B 00                        	.db <CastRoll_Ninji
08B2C 00                        	.db <CastRoll_Beezo
08B2D 00                        	.db <CastRoll_Porcupo
08B2E 00                        	.db <CastRoll_Tweeter
08B2F 00                        	.db <CastRoll_BobOmb
08B30 00                        	.db <CastRoll_Hoopstar
08B31 00                        	.db <CastRoll_Trouter
08B32 00                        	.db <CastRoll_Pidgit
08B33 00                        	.db <CastRoll_Panser
08B34 00                        	.db <CastRoll_Flurry
08B35 00                        	.db <CastRoll_Albatoss
08B36 00                        	.db <CastRoll_Phanto
08B37 00                        	.db <CastRoll_Spark
08B38 00                        	.db <CastRoll_Subcon
08B39 00                        	.db <CastRoll_Pokey
08B3A 00                        	.db <CastRoll_Birdo
08B3B 00                        	.db <CastRoll_Ostro
08B3C 00                        	.db <CastRoll_Autobomb
08B3D 00                        	.db <CastRoll_Cobrat
08B3E 00                        	.db <CastRoll_Mouser
08B3F 00                        	.db <CastRoll_Fryguy
08B40 00                        	.db <CastRoll_Clawglip
08B41 00                        	.db <CastRoll_Triclyde
08B42                           
08B42                           
08B42                           CastRoll_Mario:
08B42 D0 3E 00 30               	.db $D0, $3E, $00, $30
08B46 D0 00 00 38               	.db $D0, $00, $00, $38 ; 4
08B4A D0 02 00 40               	.db $D0, $02, $00, $40 ; 8
08B4E D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08B52 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08B56 F9 04 00 38               	.db $F9, $04, $00, $38 ; $14
08B5A F9 06 00 40               	.db $F9, $06, $00, $40 ; $18
08B5E F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08B62 F9 3E 00 24               	.db $F9, $3E, $00, $24 ; $20
08B66 F9 E8 00 2C               	.db $F9, $E8, $00, $2C ; $24
08B6A F9 D0 00 34               	.db $F9, $D0, $00, $34 ; $28
08B6E F9 F2 00 3C               	.db $F9, $F2, $00, $3C ; $2C
08B72 F9 E0 00 44               	.db $F9, $E0, $00, $44 ; $30
08B76 F9 EC 00 4C               	.db $F9, $EC, $00, $4C ; $34
08B7A F9 3E 00 54               	.db $F9, $3E, $00, $54 ; $38
08B7E F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
08B82                           CastRoll_Luigi:
08B82 D0 3E 00 30               	.db $D0, $3E, $00, $30
08B86 D0 08 00 38               	.db $D0, $08, $00, $38 ; 4
08B8A D0 0A 00 40               	.db $D0, $0A, $00, $40 ; 8
08B8E D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08B92 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08B96 F9 0C 00 38               	.db $F9, $0C, $00, $38 ; $14
08B9A F9 0E 00 40               	.db $F9, $0E, $00, $40 ; $18
08B9E F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08BA2 F9 3E 00 24               	.db $F9, $3E, $00, $24 ; $20
08BA6 F9 E6 00 2C               	.db $F9, $E6, $00, $2C ; $24
08BAA F9 F8 00 34               	.db $F9, $F8, $00, $34 ; $28
08BAE F9 E0 00 3C               	.db $F9, $E0, $00, $3C ; $2C
08BB2 F9 DC 00 44               	.db $F9, $DC, $00, $44 ; $30
08BB6 F9 E0 00 4C               	.db $F9, $E0, $00, $4C ; $34
08BBA F9 3E 00 54               	.db $F9, $3E, $00, $54 ; $38
08BBE F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
08BC2                           CastRoll_Princess:
08BC2 D0 3E 00 30               	.db $D0, $3E, $00, $30
08BC6 D0 10 00 38               	.db $D0, $10, $00, $38 ; 4
08BCA D0 12 00 40               	.db $D0, $12, $00, $40 ; 8
08BCE D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08BD2 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08BD6 F9 14 00 38               	.db $F9, $14, $00, $38 ; $14
08BDA F9 16 00 40               	.db $F9, $16, $00, $40 ; $18
08BDE F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08BE2 F9 EE 00 20               	.db $F9, $EE, $00, $20 ; $20
08BE6 F9 F2 00 28               	.db $F9, $F2, $00, $28 ; $24
08BEA F9 E0 00 30               	.db $F9, $E0, $00, $30 ; $28
08BEE F9 EA 00 38               	.db $F9, $EA, $00, $38 ; $2C
08BF2 F9 D4 00 40               	.db $F9, $D4, $00, $40 ; $30
08BF6 F9 D8 00 48               	.db $F9, $D8, $00, $48 ; $34
08BFA F9 F4 00 50               	.db $F9, $F4, $00, $50 ; $38
08BFE F9 F4 00 58               	.db $F9, $F4, $00, $58 ; $3C
08C02                           CastRoll_Toad:
08C02 D0 3E 00 30               	.db $D0, $3E, $00, $30 ; $00
08C06 D0 18 00 38               	.db $D0, $18, $00, $38 ; $04
08C0A D0 1A 00 40               	.db $D0, $1A, $00, $40 ; $08
08C0E D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $0C
08C12 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08C16 F9 1C 00 38               	.db $F9, $1C, $00, $38 ; $14
08C1A F9 1E 00 40               	.db $F9, $1E, $00, $40 ; $18
08C1E F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08C22 F9 3E 00 20               	.db $F9, $3E, $00, $20 ; $20
08C26 F9 3E 00 28               	.db $F9, $3E, $00, $28 ; $24
08C2A F9 F6 00 30               	.db $F9, $F6, $00, $30 ; $28
08C2E F9 EC 00 38               	.db $F9, $EC, $00, $38 ; $2C
08C32 F9 D0 00 40               	.db $F9, $D0, $00, $40 ; $30
08C36 F9 D6 00 48               	.db $F9, $D6, $00, $48 ; $34
08C3A F9 3E 00 50               	.db $F9, $3E, $00, $50 ; $38
08C3E F9 3E 00 58               	.db $F9, $3E, $00, $58 ; $3C
08C42                           CastRoll_Shyguy:
08C42 D0 3E 00 30               	.db $D0, $3E, $00, $30
08C46 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08C4A D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08C4E D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08C52 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08C56 F9 20 00 38               	.db $F9, $20, $00, $38 ; $14
08C5A F9 22 00 40               	.db $F9, $22, $00, $40 ; $18
08C5E F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08C62 F9 3E 00 20               	.db $F9, $3E, $00, $20 ; $20
08C66 F9 F4 00 28               	.db $F9, $F4, $00, $28 ; $24
08C6A F9 DE 00 30               	.db $F9, $DE, $00, $30 ; $28
08C6E F9 CC 00 38               	.db $F9, $CC, $00, $38 ; $2C
08C72 F9 DC 00 40               	.db $F9, $DC, $00, $40 ; $30
08C76 F9 F8 00 48               	.db $F9, $F8, $00, $48 ; $34
08C7A F9 CC 00 50               	.db $F9, $CC, $00, $50 ; $38
08C7E F9 3E 00 58               	.db $F9, $3E, $00, $58 ; $3C
08C82                           CastRoll_Snifit:
08C82 D0 3E 00 30               	.db $D0, $3E, $00, $30
08C86 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08C8A D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08C8E D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08C92 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08C96 F9 24 00 38               	.db $F9, $24, $00, $38 ; $14
08C9A F9 26 00 40               	.db $F9, $26, $00, $40 ; $18
08C9E F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08CA2 F9 3E 00 20               	.db $F9, $3E, $00, $20 ; $20
08CA6 F9 F4 00 28               	.db $F9, $F4, $00, $28 ; $24
08CAA F9 EA 00 30               	.db $F9, $EA, $00, $30 ; $28
08CAE F9 E0 00 38               	.db $F9, $E0, $00, $38 ; $2C
08CB2 F9 DA 00 40               	.db $F9, $DA, $00, $40 ; $30
08CB6 F9 E0 00 48               	.db $F9, $E0, $00, $48 ; $34
08CBA F9 F6 00 50               	.db $F9, $F6, $00, $50 ; $38
08CBE F9 3E 00 58               	.db $F9, $3E, $00, $58 ; $3C
08CC2                           CastRoll_Ninji:
08CC2 D0 3E 00 30               	.db $D0, $3E, $00, $30
08CC6 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08CCA D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08CCE D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08CD2 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08CD6 F9 28 00 38               	.db $F9, $28, $00, $38 ; $14
08CDA F9 2A 00 40               	.db $F9, $2A, $00, $40 ; $18
08CDE F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08CE2 F9 3E 00 24               	.db $F9, $3E, $00, $24 ; $20
08CE6 F9 EA 00 2C               	.db $F9, $EA, $00, $2C ; $24
08CEA F9 E0 00 34               	.db $F9, $E0, $00, $34 ; $28
08CEE F9 EA 00 3C               	.db $F9, $EA, $00, $3C ; $2C
08CF2 F9 E2 00 44               	.db $F9, $E2, $00, $44 ; $30
08CF6 F9 E0 00 4C               	.db $F9, $E0, $00, $4C ; $34
08CFA F9 3E 00 54               	.db $F9, $3E, $00, $54 ; $38
08CFE F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
08D02                           CastRoll_Beezo:
08D02 D0 3E 00 30               	.db $D0, $3E, $00, $30
08D06 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08D0A D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08D0E D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08D12 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08D16 F9 2C 00 38               	.db $F9, $2C, $00, $38 ; $14
08D1A F9 2E 00 40               	.db $F9, $2E, $00, $40 ; $18
08D1E F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08D22 F9 3E 00 24               	.db $F9, $3E, $00, $24 ; $20
08D26 F9 D2 00 2C               	.db $F9, $D2, $00, $2C ; $24
08D2A F9 D8 00 34               	.db $F9, $D8, $00, $34 ; $28
08D2E F9 D8 00 3C               	.db $F9, $D8, $00, $3C ; $2C
08D32 F9 CE 00 44               	.db $F9, $CE, $00, $44 ; $30
08D36 F9 EC 00 4C               	.db $F9, $EC, $00, $4C ; $34
08D3A F9 3E 00 54               	.db $F9, $3E, $00, $54 ; $38
08D3E F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
08D42                           CastRoll_Porcupo:
08D42 D0 3E 00 30               	.db $D0, $3E, $00, $30
08D46 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08D4A D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08D4E D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08D52 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08D56 F9 30 00 38               	.db $F9, $30, $00, $38 ; $14
08D5A F9 32 00 40               	.db $F9, $32, $00, $40 ; $18
08D5E F9                        	.db $F9 ; $1C
08D5F                           byte_BANKC_8D5F:
08D5F 3E 00 48 F9               	.db $3E, $00, $48, $F9
08D63 EE 00 24 F9               	.db $EE, $00, $24, $F9 ; 4
08D67 EC 00 2C F9               	.db $EC, $00, $2C, $F9 ; 8
08D6B F2 00 34 F9               	.db $F2, $00, $34, $F9 ; $C
08D6F D4 00 3C F9               	.db $D4, $00, $3C, $F9 ; $10
08D73 F8 00 44 F9               	.db $F8, $00, $44, $F9 ; $14
08D77 EE 00 4C F9               	.db $EE, $00, $4C, $F9 ; $18
08D7B EC 00 54 F9               	.db $EC, $00, $54, $F9 ; $1C
08D7F 3E 00 5C                  	.db $3E, $00, $5C ; $20
08D82                           CastRoll_Tweeter:
08D82 D0 3E 00 30               	.db $D0, $3E, $00, $30
08D86 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08D8A D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08D8E D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08D92 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08D96 F9 34 00 38               	.db $F9, $34, $00, $38 ; $14
08D9A F9 36 00 40               	.db $F9, $36, $00, $40 ; $18
08D9E F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08DA2 F9 F6 00 24               	.db $F9, $F6, $00, $24 ; $20
08DA6 F9 FC 00 2C               	.db $F9, $FC, $00, $2C ; $24
08DAA F9 D8 00 34               	.db $F9, $D8, $00, $34 ; $28
08DAE F9 D8 00 3C               	.db $F9, $D8, $00, $3C ; $2C
08DB2 F9 F6 00 44               	.db $F9, $F6, $00, $44 ; $30
08DB6 F9 D8 00 4C               	.db $F9, $D8, $00, $4C ; $34
08DBA F9 F2 00 54               	.db $F9, $F2, $00, $54 ; $38
08DBE F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
08DC2                           CastRoll_BobOmb:
08DC2 D0 3E 00 30               	.db $D0, $3E, $00, $30
08DC6 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08DCA D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08DCE D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08DD2 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08DD6 F9 38 00 38               	.db $F9, $38, $00, $38 ; $14
08DDA F9 3A 00 40               	.db $F9, $3A, $00, $40 ; $18
08DDE F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08DE2 F9 D2 00 24               	.db $F9, $D2, $00, $24 ; $20
08DE6 F9 EC 00 2C               	.db $F9, $EC, $00, $2C ; $24
08DEA F9 D2 00 34               	.db $F9, $D2, $00, $34 ; $28
08DEE F9 3E 00 3C               	.db $F9, $3E, $00, $3C ; $2C
08DF2 F9 EC 00 44               	.db $F9, $EC, $00, $44 ; $30
08DF6 F9 E8 00 4C               	.db $F9, $E8, $00, $4C ; $34
08DFA F9 D2 00 54               	.db $F9, $D2, $00, $54 ; $38
08DFE F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
08E02                           CastRoll_Hoopstar:
08E02 D0 3E 00 30               	.db $D0, $3E, $00, $30
08E06 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08E0A D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08E0E D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08E12 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08E16 F9 3C 00 38               	.db $F9, $3C, $00, $38 ; $14
08E1A F9 3C 40 40               	.db $F9, $3C, $40, $40 ; $18
08E1E F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08E22 F9 DE 00 20               	.db $F9, $DE, $00, $20 ; $20
08E26 F9 EC 00 28               	.db $F9, $EC, $00, $28 ; $24
08E2A F9 EC 00 30               	.db $F9, $EC, $00, $30 ; $28
08E2E F9 EE 00 38               	.db $F9, $EE, $00, $38 ; $2C
08E32 F9 F4 00 40               	.db $F9, $F4, $00, $40 ; $30
08E36 F9 F6 00 48               	.db $F9, $F6, $00, $48 ; $34
08E3A F9 D0 00 50               	.db $F9, $D0, $00, $50 ; $38
08E3E F9 F2 00 58               	.db $F9, $F2, $00, $58 ; $3C
08E42                           CastRoll_Trouter:
08E42 D0 3E 00 30               	.db $D0, $3E, $00, $30
08E46 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08E4A D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08E4E D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08E52 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08E56 F9 40 00 38               	.db $F9, $40, $00, $38 ; $14
08E5A F9 42 00 40               	.db $F9, $42, $00, $40 ; $18
08E5E F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08E62 F9 F6 00 24               	.db $F9, $F6, $00, $24 ; $20
08E66 F9 F2 00 2C               	.db $F9, $F2, $00, $2C ; $24
08E6A F9 EC 00 34               	.db $F9, $EC, $00, $34 ; $28
08E6E F9 F8 00 3C               	.db $F9, $F8, $00, $3C ; $2C
08E72 F9 F6 00 44               	.db $F9, $F6, $00, $44 ; $30
08E76 F9 D8 00 4C               	.db $F9, $D8, $00, $4C ; $34
08E7A F9 F2 00 54               	.db $F9, $F2, $00, $54 ; $38
08E7E F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
08E82                           CastRoll_Pidgit:
08E82 D0 3E 00 30               	.db $D0, $3E, $00, $30
08E86 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08E8A D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08E8E D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08E92 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08E96 F9 44 00 38               	.db $F9, $44, $00, $38 ; $14
08E9A F9 46 00 40               	.db $F9, $46, $00, $40 ; $18
08E9E F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08EA2 F9 3E 00 20               	.db $F9, $3E, $00, $20 ; $20
08EA6 F9 EE 00 28               	.db $F9, $EE, $00, $28 ; $24
08EAA F9 E0 00 30               	.db $F9, $E0, $00, $30 ; $28
08EAE F9 D6 00 38               	.db $F9, $D6, $00, $38 ; $2C
08EB2 F9 DC 00 40               	.db $F9, $DC, $00, $40 ; $30
08EB6 F9 E0 00 48               	.db $F9, $E0, $00, $48 ; $34
08EBA F9 F6 00 50               	.db $F9, $F6, $00, $50 ; $38
08EBE F9 3E 00 58               	.db $F9, $3E, $00, $58 ; $3C
08EC2                           CastRoll_Panser:
08EC2 D0 3E 00 30               	.db $D0, $3E, $00, $30
08EC6 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08ECA D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08ECE D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08ED2 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08ED6 F9 48 00 38               	.db $F9, $48, $00, $38 ; $14
08EDA F9 4A 00 40               	.db $F9, $4A, $00, $40 ; $18
08EDE F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08EE2 F9 3E 00 20               	.db $F9, $3E, $00, $20 ; $20
08EE6 F9 EE 00 28               	.db $F9, $EE, $00, $28 ; $24
08EEA F9 D0 00 30               	.db $F9, $D0, $00, $30 ; $28
08EEE F9 EA 00 38               	.db $F9, $EA, $00, $38 ; $2C
08EF2 F9 F4 00 40               	.db $F9, $F4, $00, $40 ; $30
08EF6 F9 D8 00 48               	.db $F9, $D8, $00, $48 ; $34
08EFA F9 F2 00 50               	.db $F9, $F2, $00, $50 ; $38
08EFE F9 3E 00 58               	.db $F9, $3E, $00, $58 ; $3C
08F02                           CastRoll_Flurry:
08F02 D0 3E 00 30               	.db $D0, $3E, $00, $30
08F06 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08F0A D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08F0E D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08F12 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08F16 F9 4C 00 38               	.db $F9, $4C, $00, $38 ; $14
08F1A F9 4E 00 40               	.db $F9, $4E, $00, $40 ; $18
08F1E F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08F22 F9 3E 00 20               	.db $F9, $3E, $00, $20 ; $20
08F26 F9 DA 00 28               	.db $F9, $DA, $00, $28 ; $24
08F2A F9 E6 00 30               	.db $F9, $E6, $00, $30 ; $28
08F2E F9 F8 00 38               	.db $F9, $F8, $00, $38 ; $2C
08F32 F9 F2 00 40               	.db $F9, $F2, $00, $40 ; $30
08F36 F9 F2 00 48               	.db $F9, $F2, $00, $48 ; $34
08F3A F9 CC 00 50               	.db $F9, $CC, $00, $50 ; $38
08F3E F9 3E 00 58               	.db $F9, $3E, $00, $58 ; $3C
08F42                           CastRoll_Albatoss:
08F42 D0 3E 00 30               	.db $D0, $3E, $00, $30
08F46 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08F4A D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08F4E D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08F52 F9 50 00 30               	.db $F9, $50, $00, $30 ; $10
08F56 F9 52 00 38               	.db $F9, $52, $00, $38 ; $14
08F5A F9 54 00 40               	.db $F9, $54, $00, $40 ; $18
08F5E F9 56 00 48               	.db $F9, $56, $00, $48 ; $1C
08F62 F9 D0 00 20               	.db $F9, $D0, $00, $20 ; $20
08F66 F9 E6 00 28               	.db $F9, $E6, $00, $28 ; $24
08F6A F9 D2 00 30               	.db $F9, $D2, $00, $30 ; $28
08F6E F9 D0 00 38               	.db $F9, $D0, $00, $38 ; $2C
08F72 F9 F6 00 40               	.db $F9, $F6, $00, $40 ; $30
08F76 F9 EC 00 48               	.db $F9, $EC, $00, $48 ; $34
08F7A F9 F4 00 50               	.db $F9, $F4, $00, $50 ; $38
08F7E F9 F4 00 58               	.db $F9, $F4, $00, $58 ; $3C
08F82                           CastRoll_Phanto:
08F82 D0 3E 00 30               	.db $D0, $3E, $00, $30
08F86 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08F8A D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08F8E D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08F92 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08F96 F9 68 00 38               	.db $F9, $68, $00, $38 ; $14
08F9A F9 68 40 40               	.db $F9, $68, $40, $40 ; $18
08F9E F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08FA2 F9 3E 00 20               	.db $F9, $3E, $00, $20 ; $20
08FA6 F9 EE 00 28               	.db $F9, $EE, $00, $28 ; $24
08FAA F9 DE 00 30               	.db $F9, $DE, $00, $30 ; $28
08FAE F9 D0 00 38               	.db $F9, $D0, $00, $38 ; $2C
08FB2 F9 EA 00 40               	.db $F9, $EA, $00, $40 ; $30
08FB6 F9 F6 00 48               	.db $F9, $F6, $00, $48 ; $34
08FBA F9 EC 00 50               	.db $F9, $EC, $00, $50 ; $38
08FBE F9 3E 00 58               	.db $F9, $3E, $00, $58 ; $3C
08FC2                           CastRoll_Spark:
08FC2 D0 3E 00 30               	.db $D0, $3E, $00, $30
08FC6 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08FCA D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08FCE D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08FD2 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08FD6 F9 6A 00 38               	.db $F9, $6A, $00, $38 ; $14
08FDA F9 6A 40 40               	.db $F9, $6A, $40, $40 ; $18
08FDE F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08FE2 F9 3E 00 24               	.db $F9, $3E, $00, $24 ; $20
08FE6 F9 F4 00 2C               	.db $F9, $F4, $00, $2C ; $24
08FEA F9 EE 00 34               	.db $F9, $EE, $00, $34 ; $28
08FEE F9 D0 00 3C               	.db $F9, $D0, $00, $3C ; $2C
08FF2 F9 F2 00 44               	.db $F9, $F2, $00, $44 ; $30
08FF6 F9 E4 00 4C               	.db $F9, $E4, $00, $4C ; $34
08FFA F9 3E 00 54               	.db $F9, $3E, $00, $54 ; $38
08FFE F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
09002                           CastRoll_Subcon:
09002 D0 3E 00 30               	.db $D0, $3E, $00, $30
09006 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
0900A D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
0900E D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
09012 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
09016 F9 6C 00 38               	.db $F9, $6C, $00, $38 ; $14
0901A F9 6E 00 40               	.db $F9, $6E, $00, $40 ; $18
0901E F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
09022 F9 3E 00 24               	.db $F9, $3E, $00, $24 ; $20
09026 F9 F4 00 2C               	.db $F9, $F4, $00, $2C ; $24
0902A F9 F8 00 34               	.db $F9, $F8, $00, $34 ; $28
0902E F9 D2 00 3C               	.db $F9, $D2, $00, $3C ; $2C
09032 F9 D4 00 44               	.db $F9, $D4, $00, $44 ; $30
09036 F9 EC 00 4C               	.db $F9, $EC, $00, $4C ; $34
0903A F9 EA 00 54               	.db $F9, $EA, $00, $54 ; $38
0903E F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
09042                           CastRoll_Pokey:
09042 D0 3E 00 30               	.db $D0, $3E, $00, $30
09046 D0 60 00 38               	.db $D0, $60, $00, $38 ; 4
0904A D0 62 00 40               	.db $D0, $62, $00, $40 ; 8
0904E D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
09052 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
09056 F9 64 00 38               	.db $F9, $64, $00, $38 ; $14
0905A F9 66 00 40               	.db $F9, $66, $00, $40 ; $18
0905E F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
09062 F9 3E 00 24               	.db $F9, $3E, $00, $24 ; $20
09066 F9 EE 00 2C               	.db $F9, $EE, $00, $2C ; $24
0906A F9 EC 00 34               	.db $F9, $EC, $00, $34 ; $28
0906E F9 E4 00 3C               	.db $F9, $E4, $00, $3C ; $2C
09072 F9 D8 00 44               	.db $F9, $D8, $00, $44 ; $30
09076 F9 CC 00 4C               	.db $F9, $CC, $00, $4C ; $34
0907A F9 3E 00 54               	.db $F9, $3E, $00, $54 ; $38
0907E F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
09082                           CastRoll_Birdo:
09082 D0 3E 00 30               	.db $D0, $3E, $00, $30
09086 D0 70 00 38               	.db $D0, $70, $00, $38 ; 4
0908A D0 72 00 40               	.db $D0, $72, $00, $40 ; 8
0908E D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
09092 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
09096 F9 74 00 38               	.db $F9, $74, $00, $38 ; $14
0909A F9 76 00 40               	.db $F9, $76, $00, $40 ; $18
0909E F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
090A2 F9 3E 00 24               	.db $F9, $3E, $00, $24 ; $20
090A6 F9 D2 00 2C               	.db $F9, $D2, $00, $2C ; $24
090AA F9 E0 00 34               	.db $F9, $E0, $00, $34 ; $28
090AE F9 F2 00 3C               	.db $F9, $F2, $00, $3C ; $2C
090B2 F9 D6 00 44               	.db $F9, $D6, $00, $44 ; $30
090B6 F9 EC 00 4C               	.db $F9, $EC, $00, $4C ; $34
090BA F9 3E 00 54               	.db $F9, $3E, $00, $54 ; $38
090BE F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
090C2                           CastRoll_Ostro:
090C2 D0 3E 00 30               	.db $D0, $3E, $00, $30
090C6 D0 78 00 38               	.db $D0, $78, $00, $38 ; 4
090CA D0 7A 00 40               	.db $D0, $7A, $00, $40 ; 8
090CE D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
090D2 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
090D6 F9 7C 00 38               	.db $F9, $7C, $00, $38 ; $14
090DA F9 7E 00 40               	.db $F9, $7E, $00, $40 ; $18
090DE F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
090E2 F9 3E 00 24               	.db $F9, $3E, $00, $24 ; $20
090E6 F9 EC 00 2C               	.db $F9, $EC, $00, $2C ; $24
090EA F9 F4 00 34               	.db $F9, $F4, $00, $34 ; $28
090EE F9 F6 00 3C               	.db $F9, $F6, $00, $3C ; $2C
090F2 F9 F2 00 44               	.db $F9, $F2, $00, $44 ; $30
090F6 F9 EC 00 4C               	.db $F9, $EC, $00, $4C ; $34
090FA F9 3E 00 54               	.db $F9, $3E, $00, $54 ; $38
090FE F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
09102                           CastRoll_Autobomb:
09102 D0 3E 00 30               	.db $D0, $3E, $00, $30
09106 D0 80 00 38               	.db $D0, $80, $00, $38 ; 4
0910A D0 82 00 40               	.db $D0, $82, $00, $40 ; 8
0910E D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
09112 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
09116 F9 84 00 38               	.db $F9, $84, $00, $38 ; $14
0911A F9 86 00 40               	.db $F9, $86, $00, $40 ; $18
0911E F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
09122 F9 D0 00 20               	.db $F9, $D0, $00, $20 ; $20
09126 F9 F8 00 28               	.db $F9, $F8, $00, $28 ; $24
0912A F9 F6 00 30               	.db $F9, $F6, $00, $30 ; $28
0912E F9 EC 00 38               	.db $F9, $EC, $00, $38 ; $2C
09132 F9 D2 00 40               	.db $F9, $D2, $00, $40 ; $30
09136 F9 EC 00 48               	.db $F9, $EC, $00, $48 ; $34
0913A F9 E8 00 50               	.db $F9, $E8, $00, $50 ; $38
0913E F9 D2 00 58               	.db $F9, $D2, $00, $58 ; $3C
09142                           CastRoll_Cobrat:
09142 D0 3E 00 30               	.db $D0, $3E, $00, $30
09146 D0 58 00 38               	.db $D0, $58, $00, $38 ; 4
0914A D0 5A 00 40               	.db $D0, $5A, $00, $40 ; 8
0914E D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
09152 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
09156 F9 5C 00 38               	.db $F9, $5C, $00, $38 ; $14
0915A F9 5E 00 40               	.db $F9, $5E, $00, $40 ; $18
0915E F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
09162 F9 3E 00 20               	.db $F9, $3E, $00, $20 ; $20
09166 F9 D4 00 28               	.db $F9, $D4, $00, $28 ; $24
0916A F9 EC 00 30               	.db $F9, $EC, $00, $30 ; $28
0916E F9 D2 00 38               	.db $F9, $D2, $00, $38 ; $2C
09172 F9 F2 00 40               	.db $F9, $F2, $00, $40 ; $30
09176 F9 D0 00 48               	.db $F9, $D0, $00, $48 ; $34
0917A F9 F6 00 50               	.db $F9, $F6, $00, $50 ; $38
0917E F9 3E 00 58               	.db $F9, $3E, $00, $58 ; $3C
09182                           CastRoll_Mouser:
09182 D0 88 00 30               	.db $D0, $88, $00, $30
09186 D0 8A 00 38               	.db $D0, $8A, $00, $38 ; 4
0918A D0 8C 00 40               	.db $D0, $8C, $00, $40 ; 8
0918E D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
09192 F9 8E 00 30               	.db $F9, $8E, $00, $30 ; $10
09196 F9 90 00 38               	.db $F9, $90, $00, $38 ; $14
0919A F9 92 00 40               	.db $F9, $92, $00, $40 ; $18
0919E F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
091A2 F9 3E 00 1C               	.db $F9, $3E, $00, $1C ; $20
091A6 F9 E8 00 24               	.db $F9, $E8, $00, $24 ; $24
091AA F9 EC 00 2C               	.db $F9, $EC, $00, $2C ; $28
091AE F9 F8 00 34               	.db $F9, $F8, $00, $34 ; $2C
091B2 F9 F4 00 3C               	.db $F9, $F4, $00, $3C ; $30
091B6 F9 D8 00 44               	.db $F9, $D8, $00, $44 ; $34
091BA F9 F2 00 4C               	.db $F9, $F2, $00, $4C ; $38
091BE F9 3E 00 54               	.db $F9, $3E, $00, $54 ; $3C
091C2                           CastRoll_Fryguy:
091C2 D0 AA 00 30               	.db $D0, $AA, $00, $30
091C6 D0 AC 00 38               	.db $D0, $AC, $00, $38 ; 4
091CA D0 AE 00 40               	.db $D0, $AE, $00, $40 ; 8
091CE D0 B0 00 48               	.db $D0, $B0, $00, $48 ; $C
091D2 F9 B2 00 30               	.db $F9, $B2, $00, $30 ; $10
091D6 F9 B4 00 38               	.db $F9, $B4, $00, $38 ; $14
091DA F9 B6 00 40               	.db $F9, $B6, $00, $40 ; $18
091DE F9 B8 00 48               	.db $F9, $B8, $00, $48 ; $1C
091E2 F9 3E 00 20               	.db $F9, $3E, $00, $20 ; $20
091E6 F9 DA 00 28               	.db $F9, $DA, $00, $28 ; $24
091EA F9 F2 00 30               	.db $F9, $F2, $00, $30 ; $28
091EE F9 CC 00 38               	.db $F9, $CC, $00, $38 ; $2C
091F2 F9 DC 00 40               	.db $F9, $DC, $00, $40 ; $30
091F6 F9 F8 00 48               	.db $F9, $F8, $00, $48 ; $34
091FA F9 CC 00 50               	.db $F9, $CC, $00, $50 ; $38
091FE F9 3E 00 58               	.db $F9, $3E, $00, $58 ; $3C
09202                           CastRoll_Clawglip:
09202 D0 BA 00 30               	.db $D0, $BA, $00, $30
09206 D0 BC 00 38               	.db $D0, $BC, $00, $38 ; 4
0920A D0 BE 00 40               	.db $D0, $BE, $00, $40 ; 8
0920E D0 C0 00 48               	.db $D0, $C0, $00, $48 ; $C
09212 F9 C2 00 30               	.db $F9, $C2, $00, $30 ; $10
09216 F9 C4 00 38               	.db $F9, $C4, $00, $38 ; $14
0921A F9 C6 00 40               	.db $F9, $C6, $00, $40 ; $18
0921E F9 C8 00 48               	.db $F9, $C8, $00, $48 ; $1C
09222 F9 D4 00 20               	.db $F9, $D4, $00, $20 ; $20
09226 F9 E6 00 28               	.db $F9, $E6, $00, $28 ; $24
0922A F9 D0 00 30               	.db $F9, $D0, $00, $30 ; $28
0922E F9 FC 00 38               	.db $F9, $FC, $00, $38 ; $2C
09232 F9 DC 00 40               	.db $F9, $DC, $00, $40 ; $30
09236 F9 E6 00 48               	.db $F9, $E6, $00, $48 ; $34
0923A F9 E0 00 50               	.db $F9, $E0, $00, $50 ; $38
0923E F9 EE 00 58               	.db $F9, $EE, $00, $58 ; $3C
09242                           CastRoll_Triclyde:
09242 D0 94 00 30               	.db $D0, $94, $00, $30
09246 D0 96 00 38               	.db $D0, $96, $00, $38 ; 4
0924A D0 98 00 40               	.db $D0, $98, $00, $40 ; 8
0924E D0 9A 00 48               	.db $D0, $9A, $00, $48 ; $C
09252 F9 9C 00 30               	.db $F9, $9C, $00, $30 ; $10
09256 F9 9E 00 38               	.db $F9, $9E, $00, $38 ; $14
0925A F9 A0 00 40               	.db $F9, $A0, $00, $40 ; $18
0925E F9 A2 00 48               	.db $F9, $A2, $00, $48 ; $1C
09262 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $20
09266 F9 A4 00 38               	.db $F9, $A4, $00, $38 ; $24
0926A F9 A6 00 40               	.db $F9, $A6, $00, $40 ; $28
0926E F9 A8 00 48               	.db $F9, $A8, $00, $48 ; $2C
09272 F9 3E 00 50               	.db $F9, $3E, $00, $50 ; $30
09276 F9 3E 00 58               	.db $F9, $3E, $00, $58 ; $34
0927A F9 3E 00 60               	.db $F9, $3E, $00, $60 ; $38
0927E F9 3E 00 68               	.db $F9, $3E, $00, $68 ; $3C
09282                           CastRoll_TriclydeText:
09282 D0 F6 00 20               	.db $D0, $F6, $00, $20
09286 D0 F2 00 28               	.db $D0, $F2, $00, $28 ; 4
0928A D0 E0 00 30               	.db $D0, $E0, $00, $30 ; 8
0928E D0 D4 00 38               	.db $D0, $D4, $00, $38 ; $C
09292 D0 E6 00 40               	.db $D0, $E6, $00, $40 ; $10
09296 D0 CC 00 48               	.db $D0, $CC, $00, $48 ; $14
0929A D0 D6 00 50               	.db $D0, $D6, $00, $50 ; $18
0929E D0 D8 00 58               	.db $D0, $D8, $00, $58 ; $1C
092A2                           CastRoll_Wart:
092A2 D0 80 00 28               	.db $D0, $80, $00, $28
092A6 D0 82 00 30               	.db $D0, $82, $00, $30 ; 4
092AA D0 84 00 38               	.db $D0, $84, $00, $38 ; 8
092AE D0 86 00 40               	.db $D0, $86, $00, $40 ; $C
092B2 D0 88 00 48               	.db $D0, $88, $00, $48 ; $10
092B6 F9 8A 00 28               	.db $F9, $8A, $00, $28 ; $14
092BA F9 8C 00 30               	.db $F9, $8C, $00, $30 ; $18
092BE F9 8E 00 38               	.db $F9, $8E, $00, $38 ; $1C
092C2 F9 90 00 40               	.db $F9, $90, $00, $40 ; $20
092C6 F9 92 00 48               	.db $F9, $92, $00, $48 ; $24
092CA F9 94 00 28               	.db $F9, $94, $00, $28 ; $28
092CE F9 96 00 30               	.db $F9, $96, $00, $30 ; $2C
092D2 F9 98 00 38               	.db $F9, $98, $00, $38 ; $30
092D6 F9 9A 00 40               	.db $F9, $9A, $00, $40 ; $34
092DA F9 9C 00 48               	.db $F9, $9C, $00, $48 ; $38
092DE F9 C0 00 20               	.db $F9, $C0, $00, $20 ; $3C
092E2 F9 C0 00 20               	.db $F9, $C0, $00, $20 ; $40
092E6 F9 FC 00 2C               	.db $F9, $FC, $00, $2C ; $44
092EA F9 D0 00 34               	.db $F9, $D0, $00, $34 ; $48
092EE F9 F2 00 3C               	.db $F9, $F2, $00, $3C ; $4C
092F2 F9 F6 00 44               	.db $F9, $F6, $00, $44 ; $50
092F6 F9 C0 00 50               	.db $F9, $C0, $00, $50 ; $54
092FA F9 C0 00 58               	.db $F9, $C0, $00, $58 ; $58
092FE                           byte_BANKC_92FE:
092FE 10                        	.db $10
092FF 90                        	.db $90
09300 7C                        	.db $7C
09301 98                        	.db $98
09302 7C                        	.db $7C
09303 A0                        	.db $A0
09304 7C                        	.db $7C
09305 A8                        	.db $A8
09306 12                        	.db $12
09307 90                        	.db $90
09308 7C                        	.db $7C
09309 98                        	.db $98
0930A 7C                        	.db $7C
0930B A0                        	.db $A0
0930C 7C                        	.db $7C
0930D A8                        	.db $A8
0930E 14                        	.db $14
0930F 90                        	.db $90
09310 7C                        	.db $7C
09311 98                        	.db $98
09312 7C                        	.db $7C
09313 A0                        	.db $A0
09314 7C                        	.db $7C
09315 A8                        	.db $A8
09316 16                        	.db $16
09317 90                        	.db $90
09318 7C                        	.db $7C
09319 98                        	.db $98
0931A 7C                        	.db $7C
0931B A0                        	.db $A0
0931C 7C                        	.db $7C
0931D A8                        	.db $A8
0931E 16                        	.db $16
0931F 90                        	.db $90
09320 18                        	.db $18
09321 98                        	.db $98
09322 7C                        	.db $7C
09323 A0                        	.db $A0
09324 7C                        	.db $7C
09325 A8                        	.db $A8
09326 16                        	.db $16
09327 90                        	.db $90
09328 1A                        	.db $1A
09329 98                        	.db $98
0932A 7C                        	.db $7C
0932B A0                        	.db $A0
0932C 7C                        	.db $7C
0932D A8                        	.db $A8
0932E 16                        	.db $16
0932F 90                        	.db $90
09330 1C                        	.db $1C
09331 98                        	.db $98
09332 7C                        	.db $7C
09333 A0                        	.db $A0
09334 7C                        	.db $7C
09335 A8                        	.db $A8
09336 16                        	.db $16
09337 90                        	.db $90
09338 1E                        	.db $1E
09339 98                        	.db $98
0933A 7C                        	.db $7C
0933B A0                        	.db $A0
0933C 7C                        	.db $7C
0933D A8                        	.db $A8
0933E 20                        	.db $20
0933F 90                        	.db $90
09340 1E                        	.db $1E
09341 98                        	.db $98
09342 7C                        	.db $7C
09343 A0                        	.db $A0
09344 7C                        	.db $7C
09345 A8                        	.db $A8
09346 24                        	.db $24
09347 90                        	.db $90
09348 1E                        	.db $1E
09349 98                        	.db $98
0934A 7C                        	.db $7C
0934B A0                        	.db $A0
0934C 7C                        	.db $7C
0934D A8                        	.db $A8
0934E 24                        	.db $24
0934F 90                        	.db $90
09350 28                        	.db $28
09351 98                        	.db $98
09352 7C                        	.db $7C
09353 A0                        	.db $A0
09354 7C                        	.db $7C
09355 A8                        	.db $A8
09356 24                        	.db $24
09357 90                        	.db $90
09358 2A                        	.db $2A
09359 98                        	.db $98
0935A 7C                        	.db $7C
0935B A0                        	.db $A0
0935C 7C                        	.db $7C
0935D A8                        	.db $A8
0935E 24                        	.db $24
0935F 90                        	.db $90
09360 2A                        	.db $2A
09361 98                        	.db $98
09362 2C                        	.db $2C
09363 A0                        	.db $A0
09364 7C                        	.db $7C
09365 A8                        	.db $A8
09366 24                        	.db $24
09367 90                        	.db $90
09368 2A                        	.db $2A
09369 98                        	.db $98
0936A 2E                        	.db $2E
0936B A0                        	.db $A0
0936C 7C                        	.db $7C
0936D A8                        	.db $A8
0936E 24                        	.db $24
0936F 90                        	.db $90
09370 30                        	.db $30
09371 98                        	.db $98
09372 32                        	.db $32
09373 A0                        	.db $A0
09374 7C                        	.db $7C
09375 A8                        	.db $A8
09376 24                        	.db $24
09377 90                        	.db $90
09378 30                        	.db $30
09379 98                        	.db $98
0937A 34                        	.db $34
0937B A0                        	.db $A0
0937C 7C                        	.db $7C
0937D A8                        	.db $A8
0937E 24                        	.db $24
0937F 90                        	.db $90
09380 30                        	.db $30
09381 98                        	.db $98
09382 36                        	.db $36
09383 A0                        	.db $A0
09384 7C                        	.db $7C
09385 A8                        	.db $A8
09386 24                        	.db $24
09387 90                        	.db $90
09388 30                        	.db $30
09389 98                        	.db $98
0938A 36                        	.db $36
0938B A0                        	.db $A0
0938C 38                        	.db $38
0938D A8                        	.db $A8
0938E 24                        	.db $24
0938F 90                        	.db $90
09390 30                        	.db $30
09391 98                        	.db $98
09392 3A                        	.db $3A
09393 A0                        	.db $A0
09394 3C                        	.db $3C
09395 A8                        	.db $A8
09396 24                        	.db $24
09397 90                        	.db $90
09398 30                        	.db $30
09399 98                        	.db $98
0939A 3E                        	.db $3E
0939B A0                        	.db $A0
0939C 40                        	.db $40
0939D A8                        	.db $A8
0939E 24                        	.db $24
0939F 90                        	.db $90
093A0 30                        	.db $30
093A1 98                        	.db $98
093A2 3E                        	.db $3E
093A3 A0                        	.db $A0
093A4 42                        	.db $42
093A5 A8                        	.db $A8
093A6                           byte_BANKC_93A6:
093A6 44                        	.db $44
093A7                           
093A7 B0                        	.db $B0
093A8 46                        	.db $46
093A9 B8                        	.db $B8
093AA 7C                        	.db $7C
093AB C0                        	.db $C0
093AC 7C                        	.db $7C
093AD C8                        	.db $C8
093AE 48                        	.db $48
093AF B0                        	.db $B0
093B0 4A                        	.db $4A
093B1 B8                        	.db $B8
093B2 7C                        	.db $7C
093B3 C0                        	.db $C0
093B4 7C                        	.db $7C
093B5 C8                        	.db $C8
093B6 4C                        	.db $4C
093B7 B0                        	.db $B0
093B8 4E                        	.db $4E
093B9 B8                        	.db $B8
093BA 7C                        	.db $7C
093BB C0                        	.db $C0
093BC 7C                        	.db $7C
093BD C8                        	.db $C8
093BE 50                        	.db $50
093BF B0                        	.db $B0
093C0 52                        	.db $52
093C1 B8                        	.db $B8
093C2 7C                        	.db $7C
093C3 C0                        	.db $C0
093C4 7C                        	.db $7C
093C5 C8                        	.db $C8
093C6 54                        	.db $54
093C7 B0                        	.db $B0
093C8 56                        	.db $56
093C9 B8                        	.db $B8
093CA 7C                        	.db $7C
093CB C0                        	.db $C0
093CC 7C                        	.db $7C
093CD C8                        	.db $C8
093CE 58                        	.db $58
093CF B0                        	.db $B0
093D0 5A                        	.db $5A
093D1 B8                        	.db $B8
093D2 7C                        	.db $7C
093D3 C0                        	.db $C0
093D4 7C                        	.db $7C
093D5 C8                        	.db $C8
093D6 5C                        	.db $5C
093D7 B0                        	.db $B0
093D8 5E                        	.db $5E
093D9 B8                        	.db $B8
093DA 7C                        	.db $7C
093DB C0                        	.db $C0
093DC 7C                        	.db $7C
093DD C8                        	.db $C8
093DE 5C                        	.db $5C
093DF B0                        	.db $B0
093E0 60                        	.db $60
093E1 B8                        	.db $B8
093E2 7C                        	.db $7C
093E3 C0                        	.db $C0
093E4 7C                        	.db $7C
093E5 C8                        	.db $C8
093E6 5C                        	.db $5C
093E7 B0                        	.db $B0
093E8 62                        	.db $62
093E9 B8                        	.db $B8
093EA 7C                        	.db $7C
093EB C0                        	.db $C0
093EC 7C                        	.db $7C
093ED C8                        	.db $C8
093EE 5C                        	.db $5C
093EF B0                        	.db $B0
093F0 64                        	.db $64
093F1 B8                        	.db $B8
093F2 66                        	.db $66
093F3 C0                        	.db $C0
093F4 7C                        	.db $7C
093F5 C8                        	.db $C8
093F6 5C                        	.db $5C
093F7 B0                        	.db $B0
093F8 64                        	.db $64
093F9 B8                        	.db $B8
093FA 68                        	.db $68
093FB C0                        	.db $C0
093FC 7C                        	.db $7C
093FD C8                        	.db $C8
093FE 5C                        	.db $5C
093FF B0                        	.db $B0
09400 64                        	.db $64
09401 B8                        	.db $B8
09402 6A                        	.db $6A
09403 C0                        	.db $C0
09404 7C                        	.db $7C
09405 C8                        	.db $C8
09406 5C                        	.db $5C
09407 B0                        	.db $B0
09408 64                        	.db $64
09409 B8                        	.db $B8
0940A 6C                        	.db $6C
0940B C0                        	.db $C0
0940C 6E                        	.db $6E
0940D C8                        	.db $C8
0940E 5C                        	.db $5C
0940F B0                        	.db $B0
09410 64                        	.db $64
09411 B8                        	.db $B8
09412 6C                        	.db $6C
09413 C0                        	.db $C0
09414 70                        	.db $70
09415 C8                        	.db $C8
09416 5C                        	.db $5C
09417 B0                        	.db $B0
09418 64                        	.db $64
09419 B8                        	.db $B8
0941A 6C                        	.db $6C
0941B C0                        	.db $C0
0941C 72                        	.db $72
0941D C8                        	.db $C8
0941E 5C                        	.db $5C
0941F B0                        	.db $B0
09420 64                        	.db $64
09421 B8                        	.db $B8
09422 6C                        	.db $6C
09423 C0                        	.db $C0
09424 74                        	.db $74
09425 C8                        	.db $C8
09426 5C                        	.db $5C
09427 B0                        	.db $B0
09428 64                        	.db $64
09429 B8                        	.db $B8
0942A 6C                        	.db $6C
0942B C0                        	.db $C0
0942C 76                        	.db $76
0942D C8                        	.db $C8
0942E 5C                        	.db $5C
0942F B0                        	.db $B0
09430 64                        	.db $64
09431 B8                        	.db $B8
09432 6C                        	.db $6C
09433 C0                        	.db $C0
09434 78                        	.db $78
09435 C8                        	.db $C8
09436 5C                        	.db $5C
09437 B0                        	.db $B0
09438 64                        	.db $64
09439 B8                        	.db $B8
0943A 6C                        	.db $6C
0943B C0                        	.db $C0
0943C 7A                        	.db $7A
0943D C8                        	.db $C8
0943E 60                        	.db $60
0943F FF FF FF FF FF FF FF FF.. .pad $c000, $ff
0C000                           
0C000                           ; ----------------------------------------
0C000                           ; extra PRG-ROM pages (8 bank pairs)
0C000                           IFDEF EXPAND_PRG
0C000                           .dsb (8 * $4000), $ff
0C000                           ENDIF
0C000                           
0C000                           ; ----------------------------------------
0C000                           ; Banks E and F. Fixed at $C000-FFFF.
0C000                           ; Important things like NMI and often-used
0C000                           ; routines.
0C000                           ; Bank E also contains PCM data for the
0C000                           ; drums and samples.
0C000                           .base $c000    ; Technically not needed but consistent
0C000                           .include "src/prg-e-f.asm"
0C000                           ;
0C000                           ; Bank E & Bank F
0C000                           ; ===============
0C000                           ;
0C000                           ; What's inside: Lots of game logic.
0C000                           ;
0C000                           ;   - DPCM data
0C000                           ;   - Joypad input reading
0C000                           ;   - PPU update routines
0C000                           ;   - Game initialization routines
0C000                           ;   - Title card display routines
0C000                           ;   - Area initialization routines
0C000                           ;   - Music cue routines
0C000                           ;   - Character select (sprite data, palettes, logic)
0C000                           ;   - Bonus chance (sprite data, palettes, logic)
0C000                           ;   - Game Over / Continue screen
0C000                           ;   - Pause screen
0C000                           ;   - Health logic
0C000                           ;   - Bottomless pit death logic
0C000                           ;   - Bounding box data for collisions
0C000                           ;   - and more!
0C000                           ;
0C000                           
0C000                           ; Include DPCM samples
0C000                           .include "src/music/dpcm-samples.asm"
0C000                           ;
0C000                           ; PCM Sample Data
0C000                           ; @todo reformat to be less ugly
0C000                           ;
0C000                           
0C000                           DPCMSampleData:
0C000                           DPCMSampleData_ItemPull:
0C000 55 2D 55 55 D5 54 55 55.. 	.db $55,$2D,$55,$55,$D5,$54,$55,$55,$55,$55,$AB,$54,$55,$AD,$B6
0C00F FF 3F 00 00 80 FE FF 03.. 	.db $FF,$3F,$00,$00,$80,$FE,$FF,$03,$78,$00,$00,$00,$FC,$FF,$FF,$1F,$F8,$0F ; $0F
0C021 00 00 80 FF FF FF 03 FF.. 	.db $00,$00,$80,$FF,$FF,$FF,$03,$FF,$09,$00,$00,$A0,$FF,$FF,$FF,$FF,$00,$F6 ; $21
0C033 03 00 00 00 FF FF FF FF.. 	.db $03,$00,$00,$00,$FF,$FF,$FF,$FF,$01,$00,$FF,$09,$00,$00,$00,$EC,$FF,$FF,$FF,$FF ; $33
0C047 0F 00 E8 2E 02 00 80 02.. 	.db $0F,$00,$E8,$2E,$02,$00,$80,$02,$D8,$FF,$FF,$FF,$FB,$FF,$07,$00,$00,$DA,$5E ; $47
0C05A 00 00 00 1C E8 F5 FF FF.. 	.db $00,$00,$00,$1C,$E8,$F5,$FF,$FF,$FF,$F3,$FF,$5E,$00,$00,$80,$9E,$3F ; $5A
0C06B 01 00 00 A0 13 FC F5 FF.. 	.db $01,$00,$00,$A0,$13,$FC,$F5,$FF,$FF,$FF,$0F,$FF,$AB,$0B,$00,$00,$00,$C0 ; $6B
0C07D FF 7F 22 00 00 28 F8 13.. 	.db $FF,$7F,$22,$00,$00,$28,$F8,$13,$FD,$BB,$FF,$BF,$FA,$FF,$C0,$0F ; $7D
0C08D FE 07 3F 02 00 00 00 C0.. 	.db $FE,$07,$3F,$02,$00,$00,$00,$C0,$FF,$FF,$27,$0A,$00,$38,$00,$F4,$83,$FE,$17 ; $8D
0C0A0 F8 7F ED DB 7F B1 FF 7F.. 	.db $F8,$7F,$ED,$DB,$7F,$B1,$FF,$7F,$00,$F8,$00,$FC,$3F,$00,$7E,$04,$00 ; $A0
0C0B1 00 E8 04 00 E0 FF FF FF.. 	.db $00,$E8,$04,$00,$E0,$FF,$FF,$FF,$F7,$43,$52,$09,$00,$F8,$4F,$00,$E8,$FF ; $B1
0C0C3 01 FB FF 02 E0 FE FF 62.. 	.db $01,$FB,$FF,$02,$E0,$FE,$FF,$62,$B5,$AB,$DD,$57,$80,$FD,$FE,$1F ; $C3
0C0D3 00 B0 02 00 FE FF 00 00.. 	.db $00,$B0,$02,$00,$FE,$FF,$00,$00,$FD,$05,$01,$42,$05,$80,$FE,$2F,$00,$00,$F8,$FF ; $D3
0C0E7 FF FF FF A2 ED 0F 42 AA.. 	.db $FF,$FF,$FF,$A2,$ED,$0F,$42,$AA,$24,$02,$00,$FE,$FF,$00,$00,$FE,$FF ; $E7
0C0F8 5F 00 FF 7F 00 D0 FE 5F.. 	.db $5F,$00,$FF,$7F,$00,$D0,$FE,$5F,$54,$DB,$AA,$ED,$2B,$01,$ED,$FE ; $F8
0C108 FF 00 00 AC 00 F0 FF 07.. 	.db $FF,$00,$00,$AC,$00,$F0,$FF,$07,$00,$FC,$03,$01,$48,$00,$F0,$BF,$00,$00,$E8,$FF ; $108
0C11C FF FF FF 3F 12 9A 44 00.. 	.db $FF,$FF,$FF,$3F,$12,$9A,$44,$00,$E8,$3F,$00,$C0,$FF,$1F,$F8,$FF ; $11C
0C12C 03 C0 FF 4B DB B5 ED 13.. 	.db $03,$C0,$FF,$4B,$DB,$B5,$ED,$13,$A9,$FF,$3F,$00,$94,$00,$FE,$1F ; $12C
0C13C 40 2F 00 04 00 9C 00 80.. 	.db $40,$2F,$00,$04,$00,$9C,$00,$80,$FF,$FF,$FF,$BF,$12,$00,$E8,$04,$B0,$1F ; $13C
0C14E F8 7F 40 FF D7 6D FF 8B.. 	.db $F8,$7F,$40,$FF,$D7,$6D,$FF,$8B,$EE,$FF,$80,$16,$D8,$3F,$E8 ; $14E
0C15D 05 00 00 00 80 FF FF 2F.. 	.db $05,$00,$00,$00,$80,$FF,$FF,$2F,$11,$80,$00,$6C,$E8,$2F,$F4,$DF,$F6 ; $15D
0C16E FF EA 7F EC E8 3F 5D 00.. 	.db $FF,$EA,$7F,$EC,$E8,$3F,$5D,$00,$00,$00,$C0,$FF,$5F,$22,$00,$00,$10 ; $16E
0C17F 7F E0 6F BF 7F FF 77 E9.. 	.db $7F,$E0,$6F,$BF,$7F,$FF,$77,$E9,$DF,$0F,$00,$00,$80,$7E,$5F,$01,$00 ; $17F
0C190 80 0E 6C FF BF FF BF FE.. 	.db $80,$0E,$6C,$FF,$BF,$FF,$BF,$FE,$5F,$00,$00,$40,$FF,$45,$00,$00,$48 ; $190
0C1A1 B0 FB FE FF FF FF 8B 00.. 	.db $B0,$FB,$FE,$FF,$FF,$FF,$8B,$00,$00,$BC,$2F,$00,$00,$10,$B0,$EE,$FF ; $1A1
0C1B2 FF FF FF 09 00 60 5F 00.. 	.db $FF,$FF,$FF,$09,$00,$60,$5F,$00,$00,$00,$AC,$FB,$FF,$FF,$FF,$5F,$00,$C0 ; $1B2
0C1C4 3E 02 00 00 54 FF FF FF.. 	.db $3E,$02,$00,$00,$54,$FF,$FF,$FF,$FF,$0B,$00,$FA,$00,$00,$00,$B8,$FF,$FF,$FF ; $1C4
0C1D7 FF 00 A0 0F 00 00 80 FF.. 	.db $FF,$00,$A0,$0F,$00,$00,$80,$FF,$FF,$FF,$3F,$80,$6E,$00,$00,$00,$FB,$FF ; $1D7
0C1E9 FF FF 00 BD 00 00 00 FF.. 	.db $FF,$FF,$00,$BD,$00,$00,$00,$FF,$FF,$FF,$07,$F0,$03,$00,$00,$EC,$FF,$FF,$1F ; $1E9
0C1FC F8 01 00 00 F6 FF FF 81.. 	.db $F8,$01,$00,$00,$F6,$FF,$FF,$81,$9F,$00,$00,$60,$FF,$FF,$1F,$FA,$00,$00 ; $1FC
0C20E C0 FF FF 87 7E 00 00 A0.. 	.db $C0,$FF,$FF,$87,$7E,$00,$00,$A0,$FF,$FF,$C9,$0B,$00,$00,$FD,$FF,$2F ; $20E
0C21F FE 00 00 E0 FF 7F E2 07.. 	.db $FE,$00,$00,$E0,$FF,$7F,$E2,$07,$00,$00,$FF,$FF,$E3,$07,$00,$80,$FF,$FF ; $21F
0C231 E3 07 00 00 FF FF E3 03.. 	.db $E3,$07,$00,$00,$FF,$FF,$E3,$03,$00,$E0,$FF,$7F,$6C,$00,$00,$E8,$FF,$AF ; $231
0C243 1F 00 00 FE FF F9 03 00.. 	.db $1F,$00,$00,$FE,$FF,$F9,$03,$00,$B0,$FF,$AF,$0E,$00,$C0,$FF,$FF,$F8,$00 ; $243
0C255 00 F8 FF E3 07 00 E0 FF.. 	.db $00,$F8,$FF,$E3,$07,$00,$E0,$FF,$8F,$1F,$00,$80,$FF,$3F,$7E,$00,$00,$FE ; $255
0C267 BF 3B 00 00 FF FF 1E 00.. 	.db $BF,$3B,$00,$00,$FF,$FF,$1E,$00,$80,$FF,$BF,$4E,$00,$C0,$FF,$AF,$07 ; $267
0C278 00 E0 FF F7 01 00 FA FF.. 	.db $00,$E0,$FF,$F7,$01,$00,$FA,$FF,$DC,$00,$00,$FF,$7F,$1E,$00,$A0,$FF,$EF ; $278
0C28A 01 00 FA 7F 9D 00 A0 FF.. 	.db $01,$00,$FA,$7F,$9D,$00,$A0,$FF,$EF,$01,$00,$FA,$FF,$0E,$00,$F0,$FF,$3B ; $28A
0C29C 01 00 FF BF 03 00 FE 5F.. 	.db $01,$00,$FF,$BF,$03,$00,$FE,$5F,$17,$00,$E8,$FF,$5E,$00,$D0,$FF,$57,$00 ; $29C
0C2AE A0 FF DF 01 00 FF AF 03.. 	.db $A0,$FF,$DF,$01,$00,$FF,$AF,$03,$00,$FE,$5F,$27,$00,$FC,$BF,$0E,$00,$F8 ; $2AE
0C2C0 FF 8E 00 F0 FF 3A 00 E0.. 	.db $FF,$8E,$00,$F0,$FF,$3A,$00,$E0,$FF,$0F,$00,$F8,$FF,$16,$00,$F8,$7F ; $2C0
0C2D1 27 00 EC FF 05 00 FA FF.. 	.db $27,$00,$EC,$FF,$05,$00,$FA,$FF,$03,$00,$FE,$FF,$00,$80,$FF,$6F,$01,$80 ; $2D1
0C2E3 FF 3F 00 E0 FF 0F 00 F6.. 	.db $FF,$3F,$00,$E0,$FF,$0F,$00,$F6,$BF,$05,$00,$FE,$7F,$01,$EC,$03,$FE,$01,$FB ; $2E3
0C2F6 01 FE 40 7F 00 7F 81 BF.. 	.db $01,$FE,$40,$7F,$00,$7F,$81,$BF,$C0,$4F,$00,$DA,$D6,$B6,$D5,$AA ; $2F6
0C306 55 AB AA 4A AB AA 4A 5B.. 	.db $55,$AB,$AA,$4A,$AB,$AA,$4A,$5B,$D5,$AE,$02,$00,$F6,$FF,$01,$00,$E8 ; $306
0C317 B6 BF 25 AA 6A 57 D5 76.. 	.db $B6,$BF,$25,$AA,$6A,$57,$D5,$76,$13,$C9,$ED,$FF,$00,$E0,$03,$D4 ; $317
0C327 FF 22 D0 97 04 49 00 7B.. 	.db $FF,$22,$D0,$97,$04,$49,$00,$7B,$01,$80,$FF,$FF,$EF,$2B,$25,$02,$3B ; $327
0C338 00 FD 45 FF 01 DD B5 6D.. 	.db $00,$FD,$45,$FF,$01,$DD,$B5,$6D,$5F,$FB,$0B,$1F,$FA,$13,$2F,$40 ; $338
0C348 00 04 D0 FF BB 24 40 04.. 	.db $00,$04,$D0,$FF,$BB,$24,$40,$04,$8A,$BD,$E8,$B6,$EE,$D7,$7F,$BC ; $348
0C358 F8 C7 13 04 00 00 D0 BB.. 	.db $F8,$C7,$13,$04,$00,$00,$D0,$BB,$B7,$DB,$DA,$AA,$AB,$5A,$6A,$55 ; $358
0C368 A5 A9 A5 2A 55 55 55 AA.. 	.db $A5,$A9,$A5,$2A,$55,$55,$55,$AA,$AA,$4A,$55,$55,$55,$AA,$AA ; $368
0C377 AA 52 53 55 55 55 55 55.. 	.db $AA,$52,$53,$55,$55,$55,$55,$55,$55 ; $377
0C380                           DPCMSampleDataEnd_ItemPull:
0C380                           
0C380                           DPCMSampleData_BossHurt:
0C380 95 55 55 A9 55 55         	.db $95,$55,$55,$A9,$55,$55 ; $380
0C386 69 55 55 55 FB 7F 02 00.. 	.db $69,$55,$55,$55,$FB,$7F,$02,$00,$F0,$EF,$17,$F0,$02,$00,$B0,$FF,$FF ; $386
0C397 81 0F 00 C0 FD FF 0F 7E.. 	.db $81,$0F,$00,$C0,$FD,$FF,$0F,$7E,$00,$00,$BE,$FF,$7F,$E0,$23,$00,$60 ; $397
0C3A8 FF FF 03 3F 00 00 FB FF.. 	.db $FF,$FF,$03,$3F,$00,$00,$FB,$FF,$1F,$D8,$01,$00,$D8,$FE,$FF,$C2,$0E,$00 ; $3A8
0C3BA C0 FE FF 27 7A 00 00 BA.. 	.db $C0,$FE,$FF,$27,$7A,$00,$00,$BA,$FF,$3F,$D1,$09,$00,$A0,$FF,$FF,$85 ; $3BA
0C3CB 17 00 80 FD FF 0F 7C 02.. 	.db $17,$00,$80,$FD,$FF,$0F,$7C,$02,$00,$E8,$FF,$7F,$A1,$13,$00,$A0,$FF ; $3CB
0C3DC FF 13 9D 00 00 FA FF 5F.. 	.db $FF,$13,$9D,$00,$00,$FA,$FF,$5F,$D8,$0A,$00,$C0,$FF,$FF,$07,$2B,$00,$80 ; $3DC
0C3EE FE FF 2F 74 01 00 B8 FF.. 	.db $FE,$FF,$2F,$74,$01,$00,$B8,$FF,$FF,$81,$0B,$00,$A0,$FF,$FF,$07,$6E ; $3EE
0C3FF 00 00 FE FF 5F E0 05 00.. 	.db $00,$00,$FE,$FF,$5F,$E0,$05,$00,$E0,$FB,$FF,$83,$1B,$00,$80,$FB,$FF ; $3FF
0C410 1F F8 00 00 F8 FF FF C0.. 	.db $1F,$F8,$00,$00,$F8,$FF,$FF,$C0,$0E,$00,$C0,$FE,$FF,$07,$7E,$00,$00,$BA ; $410
0C422 FF BF B0 03 00 A0 FF FF.. 	.db $FF,$BF,$B0,$03,$00,$A0,$FF,$FF,$8B,$96,$00,$00,$FE,$FF,$5F,$E8,$02 ; $422
0C433 00 E0 FF FF 03 2F 00 00.. 	.db $00,$E0,$FF,$FF,$03,$2F,$00,$00,$FB,$FF,$1F,$7A,$01,$00,$E0,$FF,$FF,$D0 ; $433
0C445 07 00 80 FE FF 47 2F 00.. 	.db $07,$00,$80,$FE,$FF,$47,$2F,$00,$00,$FA,$FF,$3F,$7A,$01,$00,$C0,$FF,$FF ; $445
0C457 07 7D 04 00 E0 FF FF 83.. 	.db $07,$7D,$04,$00,$E0,$FF,$FF,$83,$3B,$00,$00,$E8,$FE,$FF,$27,$05,$00,$00,$F6 ; $457
0C46A FF FF F0 17 00 80 FE FF.. 	.db $FF,$FF,$F0,$17,$00,$80,$FE,$FF,$3F,$E8,$02,$00,$00,$FB,$FF,$FF,$90 ; $46A
0C47B 00 00 F8 FF FF E8 0F 00.. 	.db $00,$00,$F8,$FF,$FF,$E8,$0F,$00,$00,$FE,$FF,$2F,$4A,$00,$00,$FE,$FF,$2F ; $47B
0C48D 3E 01 00 80 FF FF CF 02.. 	.db $3E,$01,$00,$80,$FF,$FF,$CF,$02,$00,$80,$FF,$FF,$FF,$15,$00,$00,$E0,$FF ; $48D
0C49F 7F 95 00 0A E0 FF 7F 5E.. 	.db $7F,$95,$00,$0A,$E0,$FF,$7F,$5E,$03,$00,$00,$FF,$FF,$E2,$07,$00,$F4,$FF ; $49F
0C4B1 7F 94 00 00 F0 FF FF 6F.. 	.db $7F,$94,$00,$00,$F0,$FF,$FF,$6F,$00,$00,$80,$FF,$7F,$FC,$00,$00,$FC,$FF ; $4B1
0C4C3 8F 0B 00 00 FE FF FF 8B.. 	.db $8F,$0B,$00,$00,$FE,$FF,$FF,$8B,$00,$00,$E0,$FF,$8F,$9F,$00,$80,$FD,$FF ; $4C3
0C4D5 8F 03 00 80 FE FF FF 13.. 	.db $8F,$03,$00,$80,$FE,$FF,$FF,$13,$00,$00,$EC,$FF,$81,$1F,$00,$A0,$FF ; $4D5
0C4E6 FF 79 00 00 A0 FF FF 7F.. 	.db $FF,$79,$00,$00,$A0,$FF,$FF,$7F,$00,$00,$F0,$FF,$FF,$0B,$00,$80,$FE,$1F ; $4E6
0C4F8 3F 00 00 FA FF E3 07 00.. 	.db $3F,$00,$00,$FA,$FF,$E3,$07,$00,$E0,$FF,$FF,$17,$00,$00,$FC,$FF,$FB,$01 ; $4F8
0C50A 00 F0 FD EF 5E 00 00 F0.. 	.db $00,$F0,$FD,$EF,$5E,$00,$00,$F0,$FF,$FF,$0F,$00,$00,$FE,$5F,$3F,$00,$00,$F8 ; $50A
0C51D FF FF 00 00 E0 FF FF 0D.. 	.db $FF,$FF,$00,$00,$E0,$FF,$FF,$0D,$00,$00,$FC,$FF,$FF,$03,$00,$80,$FF,$FF ; $51D
0C52F 7F 00 00 F0 FF E8 0F 00.. 	.db $7F,$00,$00,$F0,$FF,$E8,$0F,$00,$C0,$FF,$1F,$F8,$01,$00,$F8,$FF,$FF,$02 ; $52F
0C541 00 80 FF FF 9F 00 00 7C.. 	.db $00,$80,$FF,$FF,$9F,$00,$00,$7C,$FF,$F7,$03,$00,$00,$FC,$FF,$FF,$03,$00,$A0 ; $541
0C554 FF E7 0F 00 C0 FE FF 17.. 	.db $FF,$E7,$0F,$00,$C0,$FE,$FF,$17,$00,$00,$F8,$FF,$9F,$03,$00,$00,$FF,$FF ; $554
0C566 FF 02 00 80 FF FF 9F 00.. 	.db $FF,$02,$00,$80,$FF,$FF,$9F,$00,$00,$EC,$FF,$FB,$03,$00,$80,$FF,$3F,$7E ; $566
0C578 00 00 FE FF EF 00 00 80.. 	.db $00,$00,$FE,$FF,$EF,$00,$00,$80,$FE,$FF,$FF,$00,$00,$C0,$FF,$FF,$3F,$00 ; $578
0C58A 00 F8 FF FE 00 00 E0 FF.. 	.db $00,$F8,$FF,$FE,$00,$00,$E0,$FF,$7F,$1E,$00,$00,$FC,$FF,$7F,$00,$00,$80 ; $58A
0C59C FF FF 7F 00 00 F0 FF FF.. 	.db $FF,$FF,$7F,$00,$00,$F0,$FF,$FF,$0F,$00,$00,$FE,$1F,$FF,$01,$00,$E8,$FF ; $59C
0C5AE 0B 3F 00 00 FF FF 5F 00.. 	.db $0B,$3F,$00,$00,$FF,$FF,$5F,$00,$00,$E0,$FF,$BF,$1F,$00,$00,$FD,$FF,$FF ; $5AE
0C5C0 02 00 C0 FF C7 7F 00 00.. 	.db $02,$00,$C0,$FF,$C7,$7F,$00,$00,$F8,$FF,$E2,$0F,$00,$C0,$FF,$FF,$2A,$00 ; $5C0
0C5D2 00 F8 FF EF 00 00 80 FF.. 	.db $00,$F8,$FF,$EF,$00,$00,$80,$FF,$FF,$FF,$00,$00,$E0,$FF,$FF,$1F,$00,$00 ; $5D2
0C5E4 FC FF 7E 02 00 F0 FF E7.. 	.db $FC,$FF,$7E,$02,$00,$F0,$FF,$E7,$0F,$00,$80,$FE,$FF,$3D,$00,$00,$F8,$FF ; $5E4
0C5F6 EB 3F 00 00 F8 FF FF 02.. 	.db $EB,$3F,$00,$00,$F8,$FF,$FF,$02,$00,$00,$FF,$8F,$FF,$00,$00,$FC,$FF,$81 ; $5F6
0C608 1F 00 80 FF FF 0F 00 00.. 	.db $1F,$00,$80,$FF,$FF,$0F,$00,$00,$FA,$FF,$FF,$01,$00,$E8,$FB,$9F,$3F,$00 ; $608
0C61A 00 C0 FE FF 3F 00 00 FB.. 	.db $00,$C0,$FE,$FF,$3F,$00,$00,$FB,$FF,$FD,$00,$00,$E0,$FF,$FF,$03,$00,$00,$FE ; $61A
0C62D FF 7B 02 00 A0 FF FF 7F.. 	.db $FF,$7B,$02,$00,$A0,$FF,$FF,$7F,$00,$00,$F0,$FF,$FF,$09,$00,$00,$FE,$5F ; $62D
0C63F BF 00 00 F8 FF AF 07 00.. 	.db $BF,$00,$00,$F8,$FF,$AF,$07,$00,$E0,$FF,$7F,$1D,$00,$00,$FC,$FF,$AF,$0B ; $63F
0C651 00 00 FE FF FF 03 00 80.. 	.db $00,$00,$FE,$FF,$FF,$03,$00,$80,$FF,$AF,$7E,$00,$00,$FA,$FF,$C7,$07,$00,$C0 ; $651
0C664 FE FF 3D 00 00 E0 FF FF.. 	.db $FE,$FF,$3D,$00,$00,$E0,$FF,$FF,$3F,$00,$00,$F8,$FF,$FF,$05,$00,$00,$FF ; $664
0C676 8F FF 00 00 EC FF 81 1F.. 	.db $8F,$FF,$00,$00,$EC,$FF,$81,$1F,$00,$B0,$FF,$FF,$0E,$00,$E8,$FF,$03,$00 ; $676
0C688 FE 9F 00 F0 FF 05 80 FF.. 	.db $FE,$9F,$00,$F0,$FF,$05,$80,$FF,$27,$00,$FC,$3F,$00,$FC,$BF,$00,$EC ; $688
0C699 7F 01 E0 FF 00 EC BF 00.. 	.db $7F,$01,$E0,$FF,$00,$EC,$BF,$00,$FC,$3F,$00,$FC,$2F,$80,$FF,$03,$00,$A0 ; $699
0C6AB 7F B7 B7 DF 2A 89 50 B5.. 	.db $7F,$B7,$B7,$DF,$2A,$89,$50,$B5,$56,$D5,$3E,$81,$DA,$7F,$00 ; $6AB
0C6BA 3F D0 9F 78 01 00 00 80.. 	.db $3F,$D0,$9F,$78,$01,$00,$00,$80,$FF,$6F,$09,$00,$55,$0F,$BD,$FB,$F7,$FF ; $6BA
0C6CC FB 3F 02 00 00 B4 7B DB.. 	.db $FB,$3F,$02,$00,$00,$B4,$7B,$DB,$B5,$D5,$AA,$55,$AB,$D4,$52,$55 ; $6CC
0C6DC A9 4A 53 55 A9 AA 4A 55.. 	.db $A9,$4A,$53,$55,$A9,$AA,$4A,$55,$55,$A9,$52,$55,$55,$AA,$AA ; $6DC
0C6EB AA AA AA AA B2 AA 4A 4D.. 	.db $AA,$AA,$AA,$AA,$B2,$AA,$4A,$4D,$53,$55,$55,$55,$55,$55,$2D ; $6EB
0C6FA D5 52 D3 CA 52 AB AA AA.. 	.db $D5,$52,$D3,$CA,$52,$AB,$AA,$AA,$AA,$AA,$AA,$6A,$55,$69,$55 ; $6FA
0C709 55 A9 55 55 69 55 55 55.. 	.db $55,$A9,$55,$55,$69,$55,$55,$55,$55,$55,$55,$D3,$D4,$52,$55 ; $709
0C718 55 55 AB B4 B2 AA AA 52.. 	.db $55,$55,$AB,$B4,$B2,$AA,$AA,$52,$AB,$34,$55,$53,$55,$55,$2D ; $718
0C727 AB 52 AB CA 52 2B 55 55.. 	.db $AB,$52,$AB,$CA,$52,$2B,$55,$55,$55,$55,$55,$55,$55,$55,$2B ; $727
0C736 D5 52 55 55 55 55 55 55.. 	.db $D5,$52,$55,$55,$55,$55,$55,$55,$55,$55,$55 ; $736
0C741                           DPCMSampleDataEnd_BossHurt:
0C741                           
0C741                           DPCMSampleData_PlayerDeath:
0C741 53 55 55 55 55 55 55 55.. 	.db $53,$55,$55,$55,$55,$55,$55,$55,$B5,$FA,$FE,$FF,$3F,$00,$00,$00 ; NOT logged as PCM data!
0C751 80 FE FF 0B 00 00 80 FF.. 	.db $80,$FE,$FF,$0B,$00,$00,$80,$FF,$FF,$FF,$01,$00,$00,$FC,$FF,$FF,$1F,$00 ; $10
0C763 00 E0 FF FF FF 00 00 00.. 	.db $00,$E0,$FF,$FF,$FF,$00,$00,$00,$FF,$FF,$FF,$07,$00,$00,$E8,$FF,$FF,$1F ; $22
0C775 00 00 C0 FE FF FF 00 00.. 	.db $00,$00,$C0,$FE,$FF,$FF,$00,$00,$00,$FE,$FF,$FF,$05,$00,$00,$A0,$FF,$FF,$7F ; $34
0C788 00 00 80 FE FF FF 03 00.. 	.db $00,$00,$80,$FE,$FF,$FF,$03,$00,$00,$E8,$FF,$FF,$1F,$00,$00,$80,$FF,$FF ; $47
0C79A FF 00 00 00 FA FF FF 07.. 	.db $FF,$00,$00,$00,$FA,$FF,$FF,$07,$00,$00,$E8,$FF,$FF,$3F,$00,$00,$C0,$FE,$FF ; $59
0C7AD FF 01 00 00 FE FF FF 01.. 	.db $FF,$01,$00,$00,$FE,$FF,$FF,$01,$00,$00,$F8,$FF,$FF,$0F,$00,$00,$F0,$FF,$FF ; $6C
0C7C0 0F 00 00 D0 FF FF 7F 00.. 	.db $0F,$00,$00,$D0,$FF,$FF,$7F,$00,$00,$80,$FE,$FF,$FF,$03,$00,$00,$FC,$FF,$FF ; $7F
0C7D3 03 00 00 E0 FF FF 1F 00.. 	.db $03,$00,$00,$E0,$FF,$FF,$1F,$00,$00,$E0,$FF,$FF,$1F,$00,$00,$E0,$FF,$FF ; $92
0C7E5 1F 00 00 E0 FF FF 1F 00.. 	.db $1F,$00,$00,$E0,$FF,$FF,$1F,$00,$00,$E8,$FF,$FF,$03,$00,$00,$FC,$FF,$FF ; $A4
0C7F7 03 00 00 FD FF FF 02 00.. 	.db $03,$00,$00,$FD,$FF,$FF,$02,$00,$80,$FE,$FF,$7F,$00,$00,$80,$FF,$FF,$7F ; $B6
0C809 00 00 C0 FF FF 5F 00 00.. 	.db $00,$00,$C0,$FF,$FF,$5F,$00,$00,$A0,$FF,$FF,$2F,$00,$00,$F0,$FF,$FF,$0F ; $C8
0C81B 00 00 F0 FF FF 0F 00 00.. 	.db $00,$00,$F0,$FF,$FF,$0F,$00,$00,$F0,$FF,$FF,$0B,$00,$00,$FE,$FF,$FF,$01,$00 ; $DA
0C82E 00 FE FF 3F 00 00 F8 FF.. 	.db $00,$FE,$FF,$3F,$00,$00,$F8,$FF,$FF,$03,$00,$00,$FF,$FF,$9F,$00,$00,$E0,$FF ; $ED
0C841 FF 0B 00 00 FC FF 7F 02.. 	.db $FF,$0B,$00,$00,$FC,$FF,$7F,$02,$00,$A0,$FF,$FF,$0F,$00,$00,$FA,$FF,$FF ; $100
0C853 01 00 C0 FF FF 2F 00 00.. 	.db $01,$00,$C0,$FF,$FF,$2F,$00,$00,$F8,$FF,$FF,$00,$00,$00,$FF,$FF,$1F,$00,$00 ; $112
0C866 EC FF FF 03 00 80 FF FF.. 	.db $EC,$FF,$FF,$03,$00,$80,$FF,$FF,$0F,$00,$00,$FA,$FF,$FF,$01,$00,$C0,$FF ; $125
0C878 FF 07 00 00 FA FF FF 02.. 	.db $FF,$07,$00,$00,$FA,$FF,$FF,$02,$00,$00,$40,$FF,$FF,$FF,$FF,$FF,$00,$00,$00 ; $137
0C88B 00 80 FE FF FF FF 3F 01.. 	.db $00,$80,$FE,$FF,$FF,$FF,$3F,$01,$00,$00,$00,$A0,$FF,$FF,$FF,$FF,$2F ; $14A
0C89C 00 00 00 00 E8 FF FF FF.. 	.db $00,$00,$00,$00,$E8,$FF,$FF,$FF,$FF,$03,$00,$00,$00,$00,$FE,$FF,$FF,$FF,$FF ; $15B
0C8AF 00 00 00 00 A0 FF FF FF.. 	.db $00,$00,$00,$00,$A0,$FF,$FF,$FF,$FF,$2F,$00,$00,$00,$00,$F4,$FF,$FF,$FF,$FF ; $16E
0C8C2 01 00 00 00 40 FF FF FF.. 	.db $01,$00,$00,$00,$40,$FF,$FF,$FF,$FF,$0F,$00,$00,$00,$00,$FD,$FF,$FF,$FF,$7F ; $181
0C8D5 00 00 00 00 C0 FF FF FF.. 	.db $00,$00,$00,$00,$C0,$FF,$FF,$FF,$FF,$BF,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; $194
0C8E8 3F 00 00 00 00 E0 FF FF.. 	.db $3F,$00,$00,$00,$00,$E0,$FF,$FF,$FF,$FF,$0F,$00,$00,$00,$00,$F8,$FF,$FF,$FF ; $1A7
0C8FB FF 03 00 00 00 00 FE FF.. 	.db $FF,$03,$00,$00,$00,$00,$FE,$FF,$FF,$FF,$1F,$00,$00,$00,$00,$FA,$FF,$FF,$FF ; $1BA
0C90E FF 00 00 00 00 80 FF FF.. 	.db $FF,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$2F,$00,$00,$00,$00,$FC,$FF,$FF,$FF ; $1CD
0C921 3F 00 00 00 00 EC FF FF.. 	.db $3F,$00,$00,$00,$00,$EC,$FF,$FF,$FF,$FF,$09,$00,$00,$00,$00,$FB,$FF,$FF,$FF ; $1E0
0C934 FF 03 00 00 00 00 FF FF.. 	.db $FF,$03,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$1F,$00,$00,$00,$00,$F0,$FF,$FF,$FF ; $1F3
0C947 FF 02 00 00 00 80 FF FF.. 	.db $FF,$02,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$1F,$00,$00,$00,$00,$FC,$FF,$FF,$FF ; $206
0C95A BF 00 00 00 00 E8 FF FF.. 	.db $BF,$00,$00,$00,$00,$E8,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$E8,$FF,$FF,$FF,$FF ; $219
0C96D 01 00 00 00 E0 FF FF FF.. 	.db $01,$00,$00,$00,$E0,$FF,$FF,$FF,$FF,$01,$00,$00,$00,$F0,$FF,$FF,$FF,$BF,$00 ; $22C
0C980 00 00 00 F4 FF FF FF 7F.. 	.db $00,$00,$00,$F4,$FF,$FF,$FF,$7F,$01,$00,$00,$00,$E0,$FF,$FF,$FF,$FF,$01,$00 ; $23F
0C993 00 00 E0 FF FF FF FF 00.. 	.db $00,$00,$E0,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$EC,$FF,$FF,$FF,$3F,$00,$00,$00 ; $252
0C9A6 80 FE FF FF FF 07 00 00.. 	.db $80,$FE,$FF,$FF,$FF,$07,$00,$00,$00,$A0,$FE,$FF,$FF,$FF,$00,$00,$00,$00,$FE ; $265
0C9B9 FF FF FF 13 00 00 00 E8.. 	.db $FF,$FF,$FF,$13,$00,$00,$00,$E8,$FF,$FF,$FF,$3F,$00,$00,$00,$00,$FF,$FF ; $278
0C9CB FF FF 01 00 00 00 EC FF.. 	.db $FF,$FF,$01,$00,$00,$00,$EC,$FF,$FF,$FF,$1F,$00,$00,$00,$C0,$FF,$FF,$FF ; $28A
0C9DD FF 00 00 00 00 FE FF FF.. 	.db $FF,$00,$00,$00,$00,$FE,$FF,$FF,$FF,$03,$00,$00,$00,$E8,$FF,$FF,$FF,$2F,$00 ; $29C
0C9F0 00 00 A0 FF FF FF 3F 00.. 	.db $00,$00,$A0,$FF,$FF,$FF,$3F,$00,$00,$00,$A0,$FF,$FF,$FF,$1F,$00,$00,$00,$E8 ; $2AF
0CA03 FF FF FF 0F 00 00 00 E8.. 	.db $FF,$FF,$FF,$0F,$00,$00,$00,$E8,$FF,$FF,$FF,$27,$00,$00,$00,$F8,$FF,$FF ; $2C2
0CA15 FF 03 00 00 00 FF FF FF.. 	.db $FF,$03,$00,$00,$00,$FF,$FF,$FF,$3F,$00,$00,$00,$F0,$FF,$FF,$FF,$13,$00,$00 ; $2D4
0CA28 00 F8 FF FF FF 01 00 00.. 	.db $00,$F8,$FF,$FF,$FF,$01,$00,$00,$80,$FF,$FF,$FF,$1F,$00,$00,$00,$FC,$FF ; $2E7
0CA3A FF BF 00 00 00 F0 FF FF.. 	.db $FF,$BF,$00,$00,$00,$F0,$FF,$FF,$FF,$03,$00,$00,$00,$FF,$FF,$FF,$2F,$00,$00 ; $2F9
0CA4D 00 FE FF FF 3F 00 00 00.. 	.db $00,$FE,$FF,$FF,$3F,$00,$00,$00,$EC,$FF,$FF,$BF,$00,$00,$00,$F8,$FF,$FF ; $30C
0CA5F BF 00 00 00 F0 FF FF FF.. 	.db $BF,$00,$00,$00,$F0,$FF,$FF,$FF,$02,$00,$00,$E0,$FF,$FF,$FF,$00,$00,$00,$F8 ; $31E
0CA72 FF FF 3F 00 00 00 FE FF.. 	.db $FF,$FF,$3F,$00,$00,$00,$FE,$FF,$FF,$0F,$00,$00,$80,$FF,$FF,$FF,$03,$00,$00 ; $331
0CA85 E0 FF FF FF 00 00 00 F8.. 	.db $E0,$FF,$FF,$FF,$00,$00,$00,$F8,$FF,$FF,$2F,$00,$00,$C0,$FF,$FF,$BF ; $344
0CA96 00 00 00 FE FF FF 05 00.. 	.db $00,$00,$00,$FE,$FF,$FF,$05,$00,$00,$F8,$FF,$FF,$0F,$00,$00,$A0,$FF,$FF,$7F ; $355
0CAA9 02 00 80 FE FF FF 02 00.. 	.db $02,$00,$80,$FE,$FF,$FF,$02,$00,$00,$FC,$FF,$FF,$03,$00,$00,$FC,$FF,$FF,$03 ; $368
0CABC 00 00 EC FF FF 0B 00 00.. 	.db $00,$00,$EC,$FF,$FF,$0B,$00,$00,$EC,$FF,$FF,$1F,$00,$00,$E0,$FF,$FF,$0F ; $37B
0CACE 00 00 F0 FF FF 17 00 00.. 	.db $00,$00,$F0,$FF,$FF,$17,$00,$00,$E8,$FF,$FF,$0B,$00,$00,$EC,$FF,$FF,$03,$00 ; $38D
0CAE1 00 FC FF FF 03 00 00 FD.. 	.db $00,$FC,$FF,$FF,$03,$00,$00,$FD,$FF,$FF,$02,$00,$80,$FF,$FF,$3F,$00,$00,$A0 ; $3A0
0CAF4 FF FF 0F 00 00 FA FF FF.. 	.db $FF,$FF,$0F,$00,$00,$FA,$FF,$FF,$01,$00,$80,$FE,$FF,$3F,$00,$00,$E0,$FF ; $3B3
0CB06 FF 17 00 00 FA FF FF 00.. 	.db $FF,$17,$00,$00,$FA,$FF,$FF,$00,$00,$A0,$FF,$FF,$1F,$00,$00,$FC,$FF,$7F ; $3C5
0CB18 02 00 80 FF FF 0F 00 00.. 	.db $02,$00,$80,$FF,$FF,$0F,$00,$00,$FE,$FF,$3F,$00,$00,$F8,$FF,$FF,$00,$00,$E0 ; $3D7
0CB2B FF FF 03 00 80 FF FF 0B.. 	.db $FF,$FF,$03,$00,$80,$FF,$FF,$0B,$00,$C0,$FF,$FF,$07,$00,$00,$FF,$FF,$1F ; $3EA
0CB3D 00 00 FC FF 3F 00 00 F6.. 	.db $00,$00,$FC,$FF,$3F,$00,$00,$F6,$FF,$3F,$00,$00,$F8,$FF,$9F,$00,$00,$FE,$FF ; $3FC
0CB50 2F 00 00 FE FF 3F 00 00.. 	.db $2F,$00,$00,$FE,$FF,$3F,$00,$00,$FB,$FF,$1F,$00,$00,$FC,$FF,$0F,$00,$80,$FE ; $40F
0CB63 FF 27 00 80 FF FF 03 00.. 	.db $FF,$27,$00,$80,$FF,$FF,$03,$00,$F0,$FF,$FF,$01,$00,$E8,$FF,$BF,$00,$00 ; $422
0CB75 EC FF 4F 00 00 FE FF 07.. 	.db $EC,$FF,$4F,$00,$00,$FE,$FF,$07,$00,$E0,$FF,$FF,$03,$00,$F0,$FF,$3F,$00 ; $434
0CB87 00 F8 FF 5F 00 00 FE FF.. 	.db $00,$F8,$FF,$5F,$00,$00,$FE,$FF,$0F,$00,$80,$FE,$FF,$27,$00,$80,$FF,$FF ; $446
0CB99 03 00 F0 FF FF 01 00 E8.. 	.db $03,$00,$F0,$FF,$FF,$01,$00,$E8,$FF,$FF,$00,$00,$E0,$FF,$FF,$02,$00,$D0,$FF ; $458
0CBAC FF 01 00 C0 FF FF 07 00.. 	.db $FF,$01,$00,$C0,$FF,$FF,$07,$00,$00,$FF,$FF,$0B,$00,$80,$FF,$FF,$0F,$00,$00 ; $46B
0CBBF FE FF 3F 00 00 F8 FF BF.. 	.db $FE,$FF,$3F,$00,$00,$F8,$FF,$BF,$00,$00,$E8,$FF,$FF,$02,$00,$F0,$FF,$FF ; $47E
0CBD1 01 00 C0 FF FF 07 00 00.. 	.db $01,$00,$C0,$FF,$FF,$07,$00,$00,$FF,$FF,$0F,$00,$00,$FE,$FF,$7F,$00,$00,$F0,$FF ; $490
0CBE5 FF 01 00 80 FE FF 3F 00.. 	.db $FF,$01,$00,$80,$FE,$FF,$3F,$00,$00,$E8,$FF,$FF,$07,$00,$00,$FF,$FF,$1F ; $4A4
0CBF7 00 00 EC FF FF 03 00 80.. 	.db $00,$00,$EC,$FF,$FF,$03,$00,$80,$FF,$FF,$4F,$00,$00,$F0,$FF,$FF,$09,$00,$00 ; $4B6
0CC0A FE FF BF 00 00 E0 FF FF.. 	.db $FE,$FF,$BF,$00,$00,$E0,$FF,$FF,$27,$00,$00,$F8,$FF,$FF,$02,$00,$80,$FF ; $4C9
0CC1C FF 1F 00 00 E8 FF FF 17.. 	.db $FF,$1F,$00,$00,$E8,$FF,$FF,$17,$00,$00,$74,$FF,$FF,$4B,$00,$00,$74,$FF ; $4DB
0CC2E FF 15 04 00 69 7B AB B5.. 	.db $FF,$15,$04,$00,$69,$7B,$AB,$B5,$AD,$5A,$55,$AB,$AA,$AA,$AA,$2A ; $4ED
0CC3E 55 55                     	.db $55,$55 ; $4FD
0CC40                           DPCMSampleData_BossDeath: ; is this too early...
0CC40 6B                        	.db $6B
0CC41                           DPCMSampleDataEnd_PlayerDeath: ; ...or is this too late?
0CC41 FF 1F 00 00 E8 FF 0F 68.. 	.db $FF,$1F,$00,$00,$E8,$FF,$0F,$68,$05,$00,$A0,$FF,$FF,$0F,$DC,$00,$00 ; Logged as PCM data
0CC52 DC FE FF 07 7E 00 00 F6.. 	.db $DC,$FE,$FF,$07,$7E,$00,$00,$F6,$FF,$FF,$81,$0F,$00,$00,$FE,$FF,$7F,$E0 ; $12
0CC64 05 00 60 FB FF 0B 3F 00.. 	.db $05,$00,$60,$FB,$FF,$0B,$3F,$00,$00,$FC,$FF,$FF,$C0,$0E,$00,$00,$FE,$FF ; $24
0CC76 3F B0 03 00 B0 FF FF 89.. 	.db $3F,$B0,$03,$00,$B0,$FF,$FF,$89,$1D,$00,$00,$EE,$FF,$7F,$68,$05,$00,$60 ; $36
0CC88 FF FF 03 1F 01 00 FA FF.. 	.db $FF,$FF,$03,$1F,$01,$00,$FA,$FF,$BF,$D0,$05,$00,$C0,$FF,$FF,$07,$5E,$00 ; $48
0CC9A 00 FA FF 3F B8 01 00 B0.. 	.db $00,$FA,$FF,$3F,$B8,$01,$00,$B0,$FF,$FF,$8B,$16,$00,$80,$FE,$FF,$4F ; $5A
0CCAB EC 04 00 E0 FF FF 41 27.. 	.db $EC,$04,$00,$E0,$FF,$FF,$41,$27,$00,$00,$FF,$FF,$0F,$3B,$01,$00,$F8,$FF ; $6B
0CCBD 7F E8 08 00 E0 FF FF C4.. 	.db $7F,$E8,$08,$00,$E0,$FF,$FF,$C4,$47,$00,$00,$FF,$FF,$17,$2E,$00,$00,$FA ; $7D
0CCCF FF 3F F0 03 00 D0 FF FF.. 	.db $FF,$3F,$F0,$03,$00,$D0,$FF,$FF,$89,$0B,$00,$80,$FF,$FF,$87,$4E,$00 ; $8F
0CCE0 00 FE FF 4F 6C 00 00 FC.. 	.db $00,$FE,$FF,$4F,$6C,$00,$00,$FC,$FF,$3F,$E8,$03,$00,$E0,$FF,$FF,$62 ; $A0
0CCF1 07 00 A0 FF FF A1 07 00.. 	.db $07,$00,$A0,$FF,$FF,$A1,$07,$00,$80,$FF,$FF,$83,$17,$00,$80,$FF,$FF ; $B1
0CD02 A3 15 00 00 FF FF 4B 1F.. 	.db $A3,$15,$00,$00,$FF,$FF,$4B,$1F,$00,$00,$FA,$FF,$1F,$3D,$00,$00,$FB,$FF ; $C2
0CD14 1F 3A 01 00 F8 FF 1F BB.. 	.db $1F,$3A,$01,$00,$F8,$FF,$1F,$BB,$00,$00,$F8,$FF,$1F,$9B,$00,$00,$FB,$FF ; $D4
0CD26 1F BA 00 00 E8 FF 1F 3D.. 	.db $1F,$BA,$00,$00,$E8,$FF,$1F,$3D,$00,$80,$FB,$FF,$1F,$1D,$00,$00,$FA ; $E6
0CD37 FF 1F 9F 00 00 F8 FF 9F.. 	.db $FF,$1F,$9F,$00,$00,$F8,$FF,$9F,$78,$01,$00,$FC,$FF,$1F,$78,$01,$00,$FA ; $F7
0CD49 FF 1F 3A 01 00 F8 FF 9F.. 	.db $FF,$1F,$3A,$01,$00,$F8,$FF,$9F,$14,$00,$E8,$FF,$8F,$0B,$00,$F8,$FF ; $109
0CD5A FC 09 00 F8 FF BE 00 80.. 	.db $FC,$09,$00,$F8,$FF,$BE,$00,$80,$EE,$FF,$0E,$00,$E0,$FF,$EB,$04,$00,$EC ; $11A
0CD6C FF 2B 02 00 FE FF 1C 00.. 	.db $FF,$2B,$02,$00,$FE,$FF,$1C,$00,$E0,$FF,$3F,$0E,$00,$B8,$FE,$EF,$0F ; $12C
0CD7D 00 F8 7F FC 04 00 FC FF.. 	.db $00,$F8,$7F,$FC,$04,$00,$FC,$FF,$4E,$00,$C0,$FE,$5F,$03,$00,$EC,$FF,$2B ; $13D
0CD8F 02 80 FE FF 18 00 F0 FF.. 	.db $02,$80,$FE,$FF,$18,$00,$F0,$FF,$8F,$0F,$00,$F8,$FF,$FA,$01,$00,$FB,$AF ; $14F
0CDA1 0F 00 A0 FF BF 00 00 FB.. 	.db $0F,$00,$A0,$FF,$BF,$00,$00,$FB,$FF,$A2,$00,$80,$FF,$FF,$41,$00,$F8,$FF ; $161
0CDB3 E3 07 00 FC FF 5E 00 80.. 	.db $E3,$07,$00,$FC,$FF,$5E,$00,$80,$FE,$EF,$02,$00,$EC,$FF,$59,$00,$C0,$FF ; $173
0CDC5 5F 1A 00 F0 FF F5 03 00.. 	.db $5F,$1A,$00,$F0,$FF,$F5,$03,$00,$FA,$FF,$1F,$01,$80,$FB,$BF,$01,$00,$F6 ; $185
0CDD7 FF 38 00 A0 FF 3F 16 00.. 	.db $FF,$38,$00,$A0,$FF,$3F,$16,$00,$F8,$FF,$FC,$01,$00,$FA,$FF,$0F,$00,$B0 ; $197
0CDE9 FF 2F 01 00 FF 7F 08 00.. 	.db $FF,$2F,$01,$00,$FF,$7F,$08,$00,$F8,$FF,$C7,$05,$00,$FB,$FF,$8F,$00,$A0 ; $1A9
0CDFB FF 5F 01 00 FF 5F 08 00.. 	.db $FF,$5F,$01,$00,$FF,$5F,$08,$00,$F4,$FF,$C7,$00,$80,$FF,$FF,$0F,$00,$F0 ; $1BB
0CE0D FF 3D 00 80 FF 8F 01 00.. 	.db $FF,$3D,$00,$80,$FF,$8F,$01,$00,$FF,$FF,$98,$00,$60,$FF,$FF,$03,$00,$F6 ; $1CD
0CE1F 7F 27 00 E0 FF 4B 00 C0.. 	.db $7F,$27,$00,$E0,$FF,$4B,$00,$C0,$FF,$1F,$2F,$00,$F0,$FF,$7F,$00,$80 ; $1DF
0CE30 FE BF 04 00 FC FF 48 00.. 	.db $FE,$BF,$04,$00,$FC,$FF,$48,$00,$E8,$FF,$E3,$07,$00,$FE,$FF,$07,$00,$D8 ; $1F0
0CE42 FF 95 00 80 FF 3F 04 00.. 	.db $FF,$95,$00,$80,$FF,$3F,$04,$00,$FB,$FF,$1F,$00,$F0,$FF,$1D,$00,$60 ; $202
0CE53 FF 8F 02 80 FE 1F 3F 00.. 	.db $FF,$8F,$02,$80,$FE,$1F,$3F,$00,$E8,$FF,$7F,$00,$C0,$FE,$63,$00,$C0 ; $213
0CE64 FF 3F 06 00 FD FF 1F 00.. 	.db $FF,$3F,$06,$00,$FD,$FF,$1F,$00,$D0,$FF,$3A,$00,$A0,$FF,$8F,$01,$80 ; $224
0CE75 FE FF 17 00 E8 FF 0E 00.. 	.db $FE,$FF,$17,$00,$E8,$FF,$0E,$00,$E8,$FF,$63,$00,$C0,$FF,$FF,$06,$00,$FA ; $235
0CE87 BF 03 00 FE BF 28 00 E8.. 	.db $BF,$03,$00,$FE,$BF,$28,$00,$E8,$FF,$7F,$00,$C0,$FF,$57,$00,$A0,$FF ; $247
0CE98 A7 08 00 FF FF 0F 00 F8.. 	.db $A7,$08,$00,$FF,$FF,$0F,$00,$F8,$BF,$23,$00,$E8,$FF,$71,$00,$E0,$FF,$FF ; $258
0CEAA 00 80 FF A7 00 40 FF CF.. 	.db $00,$80,$FF,$A7,$00,$40,$FF,$CF,$0A,$00,$FE,$FF,$2F,$00,$E0,$FF,$0A ; $26A
0CEBB 00 F8 FF E2 00 B0 FF FF.. 	.db $00,$F8,$FF,$E2,$00,$B0,$FF,$FF,$00,$80,$FF,$4B,$00,$C0,$FF,$EB,$07 ; $27B
0CECC 80 F7 FF 00 00 FB 3F 14.. 	.db $80,$F7,$FF,$00,$00,$FB,$3F,$14,$00,$F6,$FF,$3F,$00,$E0,$FF,$06,$00,$F8 ; $28C
0CEDE FF E2 00 B0 FF 7F 01 40.. 	.db $FF,$E2,$00,$B0,$FF,$7F,$01,$40,$FF,$59,$00,$C0,$FF,$EF,$03,$80,$FF ; $29E
0CEEF AF 00 80 FF 8F 02 80 FE.. 	.db $AF,$00,$80,$FF,$8F,$02,$80,$FE,$FF,$07,$00,$FC,$3F,$09,$00,$FD,$AF,$1F ; $2AF
0CF01 00 F6 FF 03 00 FC 3F 0A.. 	.db $00,$F6,$FF,$03,$00,$FC,$3F,$0A,$00,$F8,$FF,$5F,$00,$F0,$FF,$24,$00,$EC ; $2C1
0CF13 7F 7F 00 D0 FF 0D 00 F8.. 	.db $7F,$7F,$00,$D0,$FF,$0D,$00,$F8,$FF,$18,$00,$E8,$FF,$7F,$00,$C0,$FF ; $2D3
0CF24 13 00 F0 FF 7F 01 A0 FF.. 	.db $13,$00,$F0,$FF,$7F,$01,$A0,$FF,$29,$00,$E8,$FF,$E3,$00,$A0,$FF,$BF ; $2E4
0CF35 00 60 FF 4B 00 C0 FF FF.. 	.db $00,$60,$FF,$4B,$00,$C0,$FF,$FF,$02,$80,$FF,$87,$00,$E0,$FF,$B9,$03 ; $2F5
0CF46 C0 FE FF 00 80 FF 27 04.. 	.db $C0,$FE,$FF,$00,$80,$FF,$27,$04,$00,$FF,$FF,$0B,$00,$FE,$1F,$05,$00,$FD ; $306
0CF58 EF 0F 00 FD DF 01 00 FE.. 	.db $EF,$0F,$00,$FD,$DF,$01,$00,$FE,$1F,$1B,$00,$EC,$FF,$4F,$00,$F8,$7F,$08 ; $318
0CF6A 00 F8 FF 3F 00 F0 FF 06.. 	.db $00,$F8,$FF,$3F,$00,$F0,$FF,$06,$00,$FC,$7F,$F4,$00,$A0,$FF,$3F,$00,$E0 ; $32A
0CF7C FF 31 00 E8 FF BF E0 0E.. 	.db $FF,$31,$00,$E8,$FF,$BF,$E0,$0E,$00,$00,$F6,$FF,$FF,$0B,$8E,$00,$A0 ; $33C
0CF8D FF 1F 00 FC 3F 00 FD 07.. 	.db $FF,$1F,$00,$FC,$3F,$00,$FD,$07,$D0,$7F,$03,$B0,$FF,$02,$80,$FF,$DB ; $34D
0CF9E 01 00 F8 FF FF 02 BA 01.. 	.db $01,$00,$F8,$FF,$FF,$02,$BA,$01,$00,$A0,$FF,$FF,$A7,$03,$00,$FE,$BF,$00,$FA ; $35E
0CFB1 0F 40 FF 09 C0 FF 03 C0.. 	.db $0F,$40,$FF,$09,$C0,$FF,$03,$C0,$FF,$03,$00,$FF,$7F,$F8,$08,$00,$C0,$FE ; $371
0CFC3 FF BF 80 97 00 00 FD FF.. 	.db $FF,$BF,$80,$97,$00,$00,$FD,$FF,$27,$00,$FA,$7F,$00,$FA,$0F,$40,$FF ; $383
0CFD4 05 E0 FF 01 E0 BF 2E 00.. 	.db $05,$E0,$FF,$01,$E0,$BF,$2E,$00,$E0,$FF,$7F,$C0,$0F,$00,$00,$F6,$FF,$FF ; $394
0CFE6 0B 8E 00 A0 FF 1F 00 FC.. 	.db $0B,$8E,$00,$A0,$FF,$1F,$00,$FC,$3F,$80,$FE,$03,$D0,$7F,$02,$F0,$FF ; $3A6
0CFF7 04 80 FF FB 08 00 E8 FE.. 	.db $04,$80,$FF,$FB,$08,$00,$E8,$FE,$FF,$07,$B8,$03,$00,$80,$FF,$FF,$AB,$03 ; $3B7
0D009 00 FE 9F 00 FE 0F 40 FF.. 	.db $00,$FE,$9F,$00,$FE,$0F,$40,$FF,$01,$F8,$BF,$02,$E8,$DF,$01,$00,$FF,$7F ; $3C9
0D01B F8 08 00 C0 FE FF 7F 81.. 	.db $F8,$08,$00,$C0,$FE,$FF,$7F,$81,$8E,$00,$80,$FE,$7F,$07,$00,$FF,$2F ; $3DB
0D02C 00 FB 0F A0 FF 00 F0 FF.. 	.db $00,$FB,$0F,$A0,$FF,$00,$F0,$FF,$00,$E0,$FF,$0F,$00,$C0,$FF,$FF,$C0 ; $3EC
0D03D 4F 00 00 F4 FF FF 0B 0D.. 	.db $4F,$00,$00,$F4,$FF,$FF,$0B,$D,$00,$B0,$FF,$2F,$80,$FE,$2D,$80,$7F ; $3FD
0D04E 03 B0 FF 00 F8 EF 00 D0.. 	.db $03,$B0,$FF,$00,$F8,$EF,$00,$D0,$FF,$ED,$08,$00,$D0,$FF,$FF,$07,$F0,$03 ; $40E
0D060 00 80 FF FF 79 01 C0 FF.. 	.db $00,$80,$FF,$FF,$79,$01,$C0,$FF,$17,$00,$FF,$03,$E0,$7F,$02,$F8,$3F ; $420
0D071 00 FC BF 02 80 FE BF F8.. 	.db $00,$FC,$BF,$02,$80,$FE,$BF,$F8,$01,$00,$C0,$FE,$FF,$7F,$81,$0B,$00,$80 ; $431
0D083 FF FF 09 40 FF 0B A0 FF.. 	.db $FF,$FF,$09,$40,$FF,$0B,$A0,$FF,$00,$EC,$3F,$00,$FD,$1F,$00,$FC,$DF ; $443
0D094 09 00 F8 FF 1F D8 0B 00.. 	.db $09,$00,$F8,$FF,$1F,$D8,$0B,$00,$00,$FE,$FF,$FF,$D0,$01,$00,$FE,$7F,$02,$B0 ; $454
0D0A7 FF 02 F0 5F 00 FE 0F 00.. 	.db $FF,$02,$F0,$5F,$00,$FE,$0F,$00,$FF,$8F,$00,$F8,$FF,$D8,$05,$00,$C0,$FF ; $467
0D0B9 FF 3F 80 0F 00 80 FE      	.db $FF,$3F,$80,$0F,$00,$80,$FE ; $479
0D0C0                           DPCMSampleDataEnd_BossDeath:
0D0C0                           
0D0C0                           ; sort of a zapping sound
0D0C0                           DPCMSampleData_Unused:
0D0C0 FF                        	.db $FF
0D0C1 5B 02 C0 FF 03 D0 FF 02.. 	.db $5B,$02,$C0,$FF,$03,$D0,$FF,$02,$F8,$57,$00,$FB,$2F,$00,$FA,$BF,$01,$00 ; NOT logged as PCM data!
0D0D3 FE FF 07 7E 02 00 C0 FE.. 	.db $FE,$FF,$07,$7E,$02,$00,$C0,$FE,$FF,$7F,$E0,$04,$00,$F4,$FF,$AB,$01,$00 ; $12
0D0E5 FF BF 02 80 FF 2F 00 FE.. 	.db $FF,$BF,$02,$80,$FF,$2F,$00,$FE,$2F,$00,$FC,$3F,$80,$FE,$23,$80 ; $24
0D0F5 FF 02 F8 1F 40 FF 03 E0.. 	.db $FF,$02,$F8,$1F,$40,$FF,$03,$E0,$BF,$03,$E8,$BF,$02,$D0,$FF,$02,$C0 ; $34
0D106 FF 0B 00 FE 5F 07 00 FC.. 	.db $FF,$0B,$00,$FE,$5F,$07,$00,$FC,$FF,$F1,$02,$00,$F0,$FF,$3F,$B8,$03,$00,$C0 ; $45
0D119 EF FF 7F 80 3B 00 00 D8.. 	.db $EF,$FF,$7F,$80,$3B,$00,$00,$D8,$FF,$FF,$3F,$C0,$13,$00,$80,$FE ; $58
0D129 FF 8F 8E 00 80 FF 3F 0F.. 	.db $FF,$8F,$8E,$00,$80,$FF,$3F,$0F,$00,$F8,$FF,$0A,$00,$FE,$BF,$00,$F4 ; $68
0D13A 7F 00 F0 FF 00 FA 8F 00.. 	.db $7F,$00,$F0,$FF,$00,$FA,$8F,$00,$FE,$0B,$D0,$7F,$00,$FB,$0F,$00,$FF,$0F ; $79
0D14C 00 FF 0F 00 FF 5F 00 F8.. 	.db $00,$FF,$0F,$00,$FF,$5F,$00,$F8,$DF,$01,$80,$FE,$EF,$05,$00,$EC,$FF,$CB ; $8B
0D15E 13 00 C0 FF FF 09 EE 00.. 	.db $13,$00,$C0,$FF,$FF,$09,$EE,$00,$00,$70,$FF,$FF,$9F,$00,$7E,$00,$00,$B8 ; $9D
0D170 FF FF 0F 74 03 00 E0 FF.. 	.db $FF,$FF,$0F,$74,$03,$00,$E0,$FF,$7F,$E2,$03,$00,$EC,$FF,$3B,$00,$C0,$FF ; $AF
0D182 9F 00 F0 FF 04 B0 BF 07.. 	.db $9F,$00,$F0,$FF,$04,$B0,$BF,$07,$80,$FF,$07,$C0,$7F,$05,$F0,$1F,$C0 ; $C1
0D193 FE 01 F8 BF 02 E8 3F 02.. 	.db $FE,$01,$F8,$BF,$02,$E8,$3F,$02,$F8,$BF,$02,$D0,$FF,$02,$40,$FF,$77 ; $D2
0D1A4 00 40 FD FF 06 00 F8 FF.. 	.db $00,$40,$FD,$FF,$06,$00,$F8,$FF,$1F,$3C,$01,$00,$F8,$FF,$FF,$40,$37 ; $E3
0D1B5 00 00 B8 FF FF 7F 00 3B.. 	.db $00,$00,$B8,$FF,$FF,$7F,$00,$3B,$01,$00,$D0,$FF,$FF,$27,$3A,$02,$00,$F8 ; $F4
0D1C7 FF 2F 0F 00 E0 FF EB 02.. 	.db $FF,$2F,$0F,$00,$E0,$FF,$EB,$02,$80,$FF,$1F,$01,$E8,$FF,$01,$E0,$FF ; $106
0D1D8 0A 80 FF 0B A0 FF 00 FC.. 	.db $0A,$80,$FF,$0B,$A0,$FF,$00,$FC,$17,$C0,$FF,$00,$F0,$FF,$00,$F0,$FF ; $117
0D1E9 02 D0 7F 07 80 FF 9D 00.. 	.db $02,$D0,$7F,$07,$80,$FF,$9D,$00,$E0,$FF,$3B,$00,$C0,$FE,$9F,$5D,$01 ; $128
0D1FA 00 F8 FF 5F F8 0A 00 00.. 	.db $00,$F8,$FF,$5F,$F8,$0A,$00,$00,$FF,$FF,$7F,$01,$EE,$00,$00,$A0,$FF,$FF ; $139
0D20C 7F C0 4E 00 00 FE FF 1F.. 	.db $7F,$C0,$4E,$00,$00,$FE,$FF,$1F,$3A,$00,$00,$FE,$FF,$3D,$00,$60,$FF ; $14B
0D21D 3F 00 F8 DF 01 C0 FF 0B.. 	.db $3F,$00,$F8,$DF,$01,$C0,$FF,$0B,$00,$FF,$1F,$00,$FE,$0F,$C0,$7F,$02,$FC ; $15C
0D22F 0F A0 FF 0A 80 FF 07 00.. 	.db $0F,$A0,$FF,$0A,$80,$FF,$07,$00,$FF,$4F,$00,$FC,$7F,$01,$C0,$FF,$6B ; $16E
0D240 00 C0 FF AF 0E 00 C0 FF.. 	.db $00,$C0,$FF,$AF,$0E,$00,$C0,$FF,$FF,$C4,$07,$00,$00,$FF,$FF,$BF,$80,$AF ; $17F
0D252 00 00 E0 FF FF 5F C0 2E.. 	.db $00,$00,$E0,$FF,$FF,$5F,$C0,$2E,$00,$00,$F4,$FF,$FF,$A1,$13,$00,$80 ; $191
0D263 FF BF 3E 00 C0 FF 77 00.. 	.db $FF,$BF,$3E,$00,$C0,$FF,$77,$00,$A0,$FF,$1F,$00,$FC,$7F,$01,$E0,$FF ; $1A2
0D274 01 E0 FF 00 E8 3F 80 FF.. 	.db $01,$E0,$FF,$00,$E8,$3F,$80,$FF,$05,$F0,$BF,$00,$F4,$BF,$00,$F4,$EF ; $1B3
0D285 00 F0 BF 07 80 FD 6F 01.. 	.db $00,$F0,$BF,$07,$80,$FD,$6F,$01,$80,$FF,$8F,$0B,$00,$B8,$FF,$3F,$3A ; $1C4
0D296 02 00 BA FF FF 80 56 00.. 	.db $02,$00,$BA,$FF,$FF,$80,$56,$00,$04,$75,$FB,$FF,$1F,$C0,$56,$00,$84 ; $1D5
0D2A7 DA 7F FF 09 5C 04 40 ED.. 	.db $DA,$7F,$FF,$09,$5C,$04,$40,$ED,$FF,$87,$16,$00,$DA,$FF,$65,$01,$E0 ; $1E6
0D2B8 FF 31 02 FA CF 0A E0 7F   	.db $FF,$31,$02,$FA,$CF,$0A,$E0,$7F ; $1F7
0D2C0                           DPCMSampleDataEnd_Unused:
0D2C0                           
0D2C0                           DPCMSampleData_PlayerHurt:
0D2C0 55 95 55 55 55 55 55 55.. 	.db $55,$95,$55,$55,$55,$55,$55,$55,$D5,$AA,$FF,$3F,$00,$48,$25 ; Logged as PCM data
0D2CF B0 8B 80 AE 0B F8 4F 80.. 	.db $B0,$8B,$80,$AE,$0B,$F8,$4F,$80,$7F,$0B,$EC,$2F,$A0,$7F,$23 ; $F
0D2DE F0 4F C4 DF 09 F8 27 A2.. 	.db $F0,$4F,$C4,$DF,$09,$F8,$27,$A2,$DF,$0B,$E8,$95,$D0,$6F,$03,$F4 ; $1E
0D2EE 4A E4 3F 01 FA 49 F0 BF.. 	.db $4A,$E4,$3F,$01,$FA,$49,$F0,$BF,$00,$FC,$05,$F1,$AF,$00,$FE,$13,$D8 ; $2E
0D2FF 2F 00 FF 09 EC 2F 80 FE.. 	.db $2F,$00,$FF,$09,$EC,$2F,$80,$FE,$05,$F6,$0D,$C0,$7F,$01,$FD,$46,$00,$FF ; $3F
0D311 05 EC 9F 00 E8 3F A0 FF.. 	.db $05,$EC,$9F,$00,$E8,$3F,$A0,$FF,$02,$A0,$FF,$02,$FE,$17,$00,$FE,$83 ; $51
0D322 F8 5F 00 F8 4B 62 FF 04.. 	.db $F8,$5F,$00,$F8,$4B,$62,$FF,$04,$E0,$9F,$84,$7D,$2F,$80,$5F,$05 ; $62
0D332 BE 57 C0 7E 11 FC BA 02.. 	.db $BE,$57,$C0,$7E,$11,$FC,$BA,$02,$FB,$05,$70,$6F,$0B,$EC,$2F,$80 ; $72
0D342 5D 2F 80 FF 22 B0 7F 05.. 	.db $5D,$2F,$80,$FF,$22,$B0,$7F,$05,$D0,$FF,$04,$FA,$5F,$00,$FA,$93 ; $82
0D352 84 BE 8B C0 3E 82 F8 DB.. 	.db $84,$BE,$8B,$C0,$3E,$82,$F8,$DB,$02,$FC,$0F,$00,$FF,$5A,$00,$FA,$5F ; $92
0D363 A0 FF 06 00 FF 4F 60 DF.. 	.db $A0,$FF,$06,$00,$FF,$4F,$60,$DF,$4E,$00,$BF,$20,$70,$5F,$07,$40,$FF ; $A3
0D374 0F 42 FF 4F 00 BF 54 A0.. 	.db $0F,$42,$FF,$4F,$00,$BF,$54,$A0,$5F,$27,$00,$FF,$0B,$40,$FF,$0B,$00 ; $B4
0D385 FB 7F 80 7F 37 01 F8 0F.. 	.db $FB,$7F,$80,$7F,$37,$01,$F8,$0F,$02,$F8,$DF,$12,$00,$C0,$EB,$7F,$B7 ; $C5
0D396 AD AD 56 B5 AA 2A 55 55.. 	.db $AD,$AD,$56,$B5,$AA,$2A,$55,$55,$A5,$4A,$2D,$55,$A9,$52,$55 ; $D6
0D3A5 A9 2A 55 A9 AA 4A 55 55.. 	.db $A9,$2A,$55,$A9,$AA,$4A,$55,$55,$A5,$A9,$AA,$5A,$AA,$AA,$AA ; $E5
0D3B4 AA AA AA AA 6A A5 69 55.. 	.db $AA,$AA,$AA,$AA,$6A,$A5,$69,$55,$55,$55,$2D,$35,$00 ; $F4
0D3C1                           DPCMSampleDataEnd_PlayerHurt:
0D3C1                           
0D3C1                           DPCMSampleData_DoorOpenBombBom:
0D3C1 B0 82                     	.db $B0,$82
0D3C3 20 59 52 04 00 FD FF 07.. 	.db $20,$59,$52,$04,$00,$FD,$FF,$07,$00,$F8,$FF,$FF,$17,$C0,$F6,$FF,$7F ; $103
0D3D4 00 80 D4 7D FF 57 95 A0.. 	.db $00,$80,$D4,$7D,$FF,$57,$95,$A0,$A6,$B5,$9A,$2A,$4D,$DD,$4B ; $114
0D3E3 92 20 A4 96 DB F6 75 FF.. 	.db $92,$20,$A4,$96,$DB,$F6,$75,$FF,$01,$00,$00,$F0,$AF,$25,$01,$40,$D5 ; $123
0D3F4 FA FF FF 01 00 04 B0 BF.. 	.db $FA,$FF,$FF,$01,$00,$04,$B0,$BF,$FB,$27,$11,$92,$48,$69,$55,$AB ; $134
0D404 AD 04 D8 6A DF FE 5F A5.. 	.db $AD,$04,$D8,$6A,$DF,$FE,$5F,$A5,$24,$00,$DA,$C0,$EE,$D3,$BE,$FF ; $144
0D414 FF FB 4F EA 47 80 00 41.. 	.db $FF,$FB,$4F,$EA,$47,$80,$00,$41,$00,$50,$D5,$6A,$D5,$FE,$8A,$22 ; $154
0D424 28 49 D3 34 55 57 55 AA.. 	.db $28,$49,$D3,$34,$55,$57,$55,$AA,$9A,$AA,$02,$D0,$F6,$96,$EC ; $164
0D433 BA EF FF 2A 55 AB 24 89.. 	.db $BA,$EF,$FF,$2A,$55,$AB,$24,$89,$00,$A8,$6D,$2B,$50,$7D,$DF ; $173
0D442 F6 B6 5A B5 7E 93 48 88.. 	.db $F6,$B6,$5A,$B5,$7E,$93,$48,$88,$84,$4A,$95,$2A,$01,$E0,$DD ; $182
0D451 76 AD 6B DB FD FF 2F 00.. 	.db $76,$AD,$6B,$DB,$FD,$FF,$2F,$00,$00,$00,$00,$00,$BF,$EF,$DB,$DB,$6A ; $191
0D462 6B B5 52 AB AA AA AA CA.. 	.db $6B,$B5,$52,$AB,$AA,$AA,$AA,$CA,$B2,$54,$55,$4A,$AB,$54,$95 ; $1A2
0D471 95 AA 4A AB 34 55 53 35.. 	.db $95,$AA,$4A,$AB,$34,$55,$53,$35,$55,$55,$55,$55,$55,$55,$55 ; $1B1
0D480 D5 B4 B2 AA AA AA AA AA.. 	.db $D5,$B4,$B2,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$5A,$59,$A9 ; $1C0
0D48F 55 55 69 55 55 55 55 CB.. 	.db $55,$55,$69,$55,$55,$55,$55,$CB,$52,$AB,$AA,$AA,$AA,$2A,$AD ; $1CF
0D49E AA AA B2 AA AA B2 AA AA.. 	.db $AA,$AA,$B2,$AA,$AA,$B2,$AA,$AA,$52,$2B,$2B,$B5,$52,$55,$55 ; $1DE
0D4AD 53 55 55 53 55 55 55 55.. 	.db $53,$55,$55,$53,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55 ; $1ED
0D4BC 55 55 69 55 55 69 55 55.. 	.db $55,$55,$69,$55,$55,$69,$55,$55,$55,$55,$55,$95,$55,$55,$69 ; $1FC
0D4CB 55 55 55 55 55 55 55 59.. 	.db $55,$55,$55,$55,$55,$55,$55,$59,$A9,$A5,$AA,$AA,$5A,$55,$96 ; $20B
0D4DA 55 A5 AA 65 A9 AA 9A AA.. 	.db $55,$A5,$AA,$65,$A9,$AA,$9A,$AA,$AA,$AA,$5A,$AA,$5A,$A5,$A9 ; $21A
0D4E9 A5 AA AA AA AA AA AA AA.. 	.db $A5,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA ; $229
0D4F8 6A 59 AA 95 A6 AA 65 A9.. 	.db $6A,$59,$AA,$95,$A6,$AA,$65,$A9,$AA,$AA,$AA,$AA,$A5,$A6,$A9 ; $238
0D507 55 A5 A9 AA AA A9 65 59.. 	.db $55,$A5,$A9,$AA,$AA,$A9,$65,$59,$A9,$55,$55,$A9,$55,$A5,$A9 ; $247
0D516 55 A5 69 65 59 A9 55 55.. 	.db $55,$A5,$69,$65,$59,$A9,$55,$55,$69,$55,$55,$A9,$55,$A5,$69 ; $256
0D525 65 55 69 55 55 55 55 B5.. 	.db $65,$55,$69,$55,$55,$55,$55,$B5,$EA,$FF,$FF,$03,$00,$09,$40,$04,$00 ; $265
0D536 E8 07 00 FE 1F F4 FF 03.. 	.db $E8,$07,$00,$FE,$1F,$F4,$FF,$03,$F4,$FF,$97,$B6,$57,$EF,$BE,$09,$6A ; $276
0D547 BF FF 03 00 5C 00 F4 FF.. 	.db $BF,$FF,$03,$00,$5C,$00,$F4,$FF,$03,$00,$ED,$27,$00,$42,$25,$00,$EE,$9F ; $287
0D559 00 00 F8 FF FF FF 5F 54.. 	.db $00,$00,$F8,$FF,$FF,$FF,$5F,$54,$FB,$49,$90,$AA,$24,$02,$00,$F7,$FF ; $299
0D56A 05 00 E8 FF FF 13 40 FB.. 	.db $05,$00,$E8,$FF,$FF,$13,$40,$FB,$FF,$3F,$00,$00,$D8,$F6,$FE,$AD,$54 ; $2AA
0D57B 90 55 AB 96 A5 D4 EA 93.. 	.db $90,$55,$AB,$96,$A5,$D4,$EA,$93,$0A,$01,$65,$D5,$6E,$DD,$B7,$FF ; $2BB
0D58B 00 00 00 F8 DF 92 04 00.. 	.db $00,$00,$00,$F8,$DF,$92,$04,$00,$55,$FF,$FF,$FF,$04,$00,$00,$D4,$BF,$FD,$27 ; $2CB
0D59E 09 51 92 CA B2 DA 5A 09.. 	.db $09,$51,$92,$CA,$B2,$DA,$5A,$09,$68,$AB,$BD,$FF,$37,$55,$25,$01 ; $2DE
0D5AE B0 05 F6 4B EF FF FF DD.. 	.db $B0,$05,$F6,$4B,$EF,$FF,$FF,$DD,$7F,$52,$3F,$01,$02,$20,$00,$40,$55 ; $2EE
0D5BF 5B 55 DB 5F 48 22 49 A9.. 	.db $5B,$55,$DB,$5F,$48,$22,$49,$A9,$AA,$AA,$6A,$55,$55,$55,$55 ; $2FF
0D5CE 29 01 DA DE 92 D5 B7 F7.. 	.db $29,$01,$DA,$DE,$92,$D5,$B7,$F7,$BF,$54,$69,$2B,$29,$12,$00,$AA ; $30E
0D5DE 6B 13 A8 ED 7B F7 B6 6A.. 	.db $6B,$13,$A8,$ED,$7B,$F7,$B6,$6A,$B5,$FD,$92,$44,$48,$84,$4A ; $31E
0D5ED AA 2A 01 60 FB BA B5 6D.. 	.db $AA,$2A,$01,$60,$FB,$BA,$B5,$6D,$AB,$FD,$FF,$7F,$00,$00,$00,$00,$40 ; $32D
0D5FE DB A2 DA B7 6B 9B AA B5.. 	.db $DB,$A2,$DA,$B7,$6B,$9B,$AA,$B5,$DB,$AA,$55,$6B,$55,$69,$55 ; $33E
0D60D 7B A9 A4 24 95 25 A5 4A.. 	.db $7B,$A9,$A4,$24,$95,$25,$A5,$4A,$55,$A5,$42,$6A,$B5,$6A,$AB ; $34D
0D61C D6 AA 6A 55 55 AD CA 52.. 	.db $D6,$AA,$6A,$55,$55,$AD,$CA,$52,$D3,$54,$A9,$55,$55,$55,$55 ; $35C
0D62B 55 55 DB 55 4A 95 4A AA.. 	.db $55,$55,$DB,$55,$4A,$95,$4A,$AA,$2A,$55,$09,$6A,$B5,$55,$DB ; $36B
0D63A AA 69 AB B6 AB 52 A5 6A.. 	.db $AA,$69,$AB,$B6,$AB,$52,$A5,$6A,$2F,$45,$4A,$DD,$FF,$03,$00,$00 ; $37A
0D64A 00 00 F6 EF FF B6 EB FD.. 	.db $00,$00,$F6,$EF,$FF,$B6,$EB,$FD,$7F,$89,$94,$4A,$91,$22,$01,$68 ; $38A
0D65A 6B 55 AD DB FE 4F A5 F4.. 	.db $6B,$55,$AD,$DB,$FE,$4F,$A5,$F4,$4B,$04,$01,$48,$52,$09,$68,$DB ; $39A
0D66A BF AB ED 5F 12 92 28 A9.. 	.db $BF,$AB,$ED,$5F,$12,$92,$28,$A9,$24,$D5,$B2,$6A,$D5,$6A,$AB ; $3AA
0D679 4A 00 DB B6 B6 7D FF 52.. 	.db $4A,$00,$DB,$B6,$B6,$7D,$FF,$52,$2A,$A5,$02,$40,$55,$70,$BB,$DA ; $3B9
0D689 FD 7F DB 4F D5 5E 40 04.. 	.db $FD,$7F,$DB,$4F,$D5,$5E,$40,$04,$21,$00,$55,$AB,$EA,$9F,$48,$48 ; $3C9
0D699 2A 55 55 55 55 02 54 55.. 	.db $2A,$55,$55,$55,$55,$02,$54,$55,$ED,$FF,$DB,$4A,$04,$28,$B0,$FB ; $3D9
0D6A9 BF 7F 13 29 80 DA BE FF.. 	.db $BF,$7F,$13,$29,$80,$DA,$BE,$FF,$3F,$00,$00,$60,$B5,$EB,$5F,$4B ; $3E9
0D6B9 89 D2 B4 6A 53 55 55 5F.. 	.db $89,$D2,$B4,$6A,$53,$55,$55,$5F,$29,$11,$52,$D5,$6D,$DF,$FF ; $3F9
0D6C8 03 00 00 FC 2B 01 48 EB.. 	.db $03,$00,$00,$FC,$2B,$01,$48,$EB,$FF,$5F,$04,$00,$ED,$FD,$49,$48,$A4,$CA ; $408
0D6DA 12 50 F5 FE 55 01 80 EA.. 	.db $12,$50,$F5,$FE,$55,$01,$80,$EA,$FE,$FF,$FF,$7F,$01,$5A,$77,$91 ; $41A
0D6EA A4 4A 89 00 A1 7F 2F 01.. 	.db $A4,$4A,$89,$00,$A1,$7F,$2F,$01,$A0,$FB,$7F,$02,$DA,$FF,$0B,$00,$D5 ; $42A
0D6FB ED 9F 8A AA D5 B4 B6 93.. 	.db $ED,$9F,$8A,$AA,$D5,$B4,$B6,$93,$88,$6A,$FF,$7E,$00,$40,$2B ; $43B
0D70A 02 F8 FF 01 40 F7 91 20.. 	.db $02,$F8,$FF,$01,$40,$F7,$91,$20,$29,$80,$FA,$46,$00,$E0,$FF,$FF ; $44A
0D71A FF D1 5D 2A 25 01 E8 5E.. 	.db $FF,$D1,$5D,$2A,$25,$01,$E8,$5E,$00,$EC,$7F,$82,$FB,$4F,$40,$DF ; $45A
0D72A AF 52 DB DA AD 92 F6 FF.. 	.db $AF,$52,$DB,$DA,$AD,$92,$F6,$FF,$00,$B0,$01,$FA,$5F,$00,$7D,$41 ; $46A
0D73A 90 00 74 11 00 FE FF BF.. 	.db $90,$00,$74,$11,$00,$FE,$FF,$BF,$BE,$92,$2A,$00,$6E,$05,$B0,$BF,$E8 ; $47A
0D74B 7F 80 FA A7 B5 6D 77 52.. 	.db $7F,$80,$FA,$A7,$B5,$6D,$77,$52,$DF,$2F,$A0,$15,$A8,$7F,$A0 ; $48B
0D75A 5E 40 04 D0 02 00 FE FF.. 	.db $5E,$40,$04,$D0,$02,$00,$FE,$FF,$DF,$2B,$4A,$04,$B8,$02,$F8,$8B,$FE ; $49A
0D76B 07 B8 AF DA DB 97 DA FF.. 	.db $07,$B8,$AF,$DA,$DB,$97,$DA,$FF,$03,$38,$D0,$7F,$C0,$2E,$82,$00 ; $4AB
0D77B 58 00 C0 FF FF 2F 25 01.. 	.db $58,$00,$C0,$FF,$FF,$2F,$25,$01,$9A,$00,$FD,$D0,$7F,$A0,$FB,$AA ; $4BB
0D78B EB BB AA FF C0 26 EC 17.. 	.db $EB,$BB,$AA,$FF,$C0,$26,$EC,$17,$75,$41,$04,$30,$02,$C0,$FF,$BF ; $4CB
0D79B 2B 45 80 23 D0 49 7F C1.. 	.db $2B,$45,$80,$23,$D0,$49,$7F,$C1,$6E,$EB,$B6,$AF,$FA,$7E,$E0 ; $4DB
0D7AA 85 FE 42 17 41 80 04 80.. 	.db $85,$FE,$42,$17,$41,$80,$04,$80,$FF,$DF,$55,$12,$D0,$08,$6C,$EA ; $4EA
0D7BA 0F EC D5 AE 6F DD 5F 74.. 	.db $0F,$EC,$D5,$AE,$6F,$DD,$5F,$74,$E4,$2F,$F4,$04,$08,$14,$00,$FE,$BF ; $4FA
0D7CB AB 44 A0 00 57 EC 43 BB.. 	.db $AB,$44,$A0,$00,$57,$EC,$43,$BB,$EA,$DB,$A7,$EF,$87,$4E,$EE ; $50B
0D7DA C3 4E 80 80 00 F0 FF 37.. 	.db $C3,$4E,$80,$80,$00,$F0,$FF,$37,$95,$80,$0A,$E8,$E8,$0F,$EC,$DA ; $51A
0D7EA DB AB FB C9 43 7F B1      	.db $DB,$AB,$FB,$C9,$43,$7F,$B1 ; $52A
0D7F1 89 00 0A 00 FF DF 49 02.. 	.db $89,$00,$0A,$00,$FF,$DF,$49,$02,$0A,$70,$EA,$07,$EE,$EA,$F6 ; NOT logged as PCM data
0D800                           DPCMSampleDataEnd_DoorOpenBombBom:
0D800                           
0D800                           IFNDEF PROTOTYPE_DPCM_SAMPLES
0D800                           DPCMSampleData_DrumSample:
0D800 6A 55 55 D5 54 AA 5A 55.. 	.db $6A,$55,$55,$D5,$54,$AA,$5A,$55,$55,$85,$D8,$EA,$D7,$FF,$02 ; Logged as PCM data
0D80F 00 00 FE FF 5F 62 00 00.. 	.db $00,$00,$FE,$FF,$5F,$62,$00,$00,$00,$FF,$FF,$FF,$27,$00,$00,$E8,$FF,$FF ; $F
0D821 07 00 FC FF FF FF 00 00.. 	.db $07,$00,$FC,$FF,$FF,$FF,$00,$00,$00,$F8,$FF,$03,$00,$80,$FD,$FF,$7F,$00,$00 ; $21
0D834 B0 FF FF 01 00 00 FF FF.. 	.db $B0,$FF,$FF,$01,$00,$00,$FF,$FF,$FF,$0F,$00,$00,$FE,$FF,$05,$00,$00,$FA,$FF ; $34
0D847 5F 04 80 EE FF FF 1F 00.. 	.db $5F,$04,$80,$EE,$FF,$FF,$1F,$00,$00,$00,$FA,$FF,$03,$00,$BA,$FF,$FF,$5F ; $47
0D859 00 00 D0 EF EF 08 00 40.. 	.db $00,$00,$D0,$EF,$EF,$08,$00,$40,$FF,$FF,$FF,$08,$00,$D8,$FF,$FF,$02,$00,$00 ; $59
0D86C F8 FF 6F 13 01 6A FB B6.. 	.db $F8,$FF,$6F,$13,$01,$6A,$FB,$B6,$AA,$00,$40,$B6,$FF,$B7,$12,$24 ; $6C
0D87C B5 ED 6B 49 00 64 BB B7.. 	.db $B5,$ED,$6B,$49,$00,$64,$BB,$B7,$93,$44,$A9,$55,$F5,$ED,$AB ; $7C
0D88B 44 80 94 A6 B7 9B 54 6A.. 	.db $44,$80,$94,$A6,$B7,$9B,$54,$6A,$95,$56,$B5,$5A,$35,$95,$22 ; $8B
0D89A A4 B6 6A DB 6A 25 A9 AA.. 	.db $A4,$B6,$6A,$DB,$6A,$25,$A9,$AA,$6D,$BB,$15,$04,$A4,$6A,$6F ; $9A
0D8A9 AB 12 6A DB B6 95 54 92.. 	.db $AB,$12,$6A,$DB,$B6,$95,$54,$92,$A2,$D4,$6A,$6F,$A5,$42,$55 ; $A9
0D8B8 D5 EA 5B 09 49 AD B6 56.. 	.db $D5,$EA,$5B,$09,$49,$AD,$B6,$56,$25,$28,$E2,$ED,$7E,$4C,$2B ; $B8
0D8C7 41 92 6D BF AB 24 00 52.. 	.db $41,$92,$6D,$BF,$AB,$24,$00,$52,$6F,$B7,$B5,$6A,$49,$55,$5B ; $C7
0D8D6 AB 6A 13 08 69 DB 5A 95.. 	.db $AB,$6A,$13,$08,$69,$DB,$5A,$95,$24,$BA,$6F,$57,$45,$48,$55 ; $D6
0D8E5 DB AD 85 24 42 D5 F6 BD.. 	.db $DB,$AD,$85,$24,$42,$D5,$F6,$BD,$AD,$24,$02,$D5,$F6,$56,$93 ; $E5
0D8F4 08 51 DB BE AD 2A 24 49.. 	.db $08,$51,$DB,$BE,$AD,$2A,$24,$49,$6F,$B7,$A9,$22,$08,$B5,$DD,$AB ; $F4
0D904 A9 44 59 6D 6F 25 91 94.. 	.db $A9,$44,$59,$6D,$6F,$25,$91,$94,$AA,$B6,$6D,$A9,$92,$A8,$DA ; $104
0D913 75 AB 24 91 6A BB 5D 25.. 	.db $75,$AB,$24,$91,$6A,$BB,$5D,$25,$41,$94,$6D,$D7,$AA,$52,$29 ; $113
0D922 55 6D B5 A9 52 49 B5 6D.. 	.db $55,$6D,$B5,$A9,$52,$49,$B5,$6D,$4B,$A2,$54,$D5,$B6,$5A,$29 ; $122
0D931 92 54 DB 6D 2D 29 52 A5.. 	.db $92,$54,$DB,$6D,$2D,$29,$52,$A5,$B6,$6D,$93,$4A,$52,$6B,$D5 ; $131
0D940                           DPCMSampleDataEnd_DrumSample_A:
0D940 92 AA AA 55 5B 55 91 54.. 	.db $92,$AA,$AA,$55,$5B,$55,$91,$54,$59,$B5,$55,$55,$49,$A5,$DA ; $140
0D94F B6 AB 8A 42 A5 F6 B2 25.. 	.db $B6,$AB,$8A,$42,$A5,$F6,$B2,$25,$49,$56,$6D,$B5,$A9,$94,$CA ; $14F
0D95E AA 6A AB 4A A5 54 69 DB.. 	.db $AA,$6A,$AB,$4A,$A5,$54,$69,$DB,$2B,$A9,$A4,$AA,$6A,$6D,$25 ; $15E
0D96D 49 AD 56 55 65 45 95 6B.. 	.db $49,$AD,$56,$55,$65,$45,$95,$6B,$D5,$55,$85,$8A,$52,$EF,$B6 ; $16D
0D97C B5 24 A0 AA D5 55 95 52.. 	.db $B5,$24,$A0,$AA,$D5,$55,$95,$52,$55,$B5,$5A,$AB,$A2,$AA,$AA ; $17C
0D98B B6 55 A5 82 54 DB 6D 55.. 	.db $B6,$55,$A5,$82,$54,$DB,$6D,$55,$49,$48,$DB,$DE,$AA,$52,$09 ; $18B
0D99A 95 6A 5B 55 93 2A 55 6B.. 	.db $95,$6A,$5B,$55,$93,$2A,$55,$6B,$CB,$96,$52,$C9,$EA,$D5,$54 ; $19A
0D9A9 42 52 B5 6D 6B A9 42 25.. 	.db $42,$52,$B5,$6D,$6B,$A9,$42,$25,$BB,$76,$AD,$54,$88,$AA,$B6 ; $1A9
0D9B8 6D 55 09 69 6B AB 55 92.. 	.db $6D,$55,$09,$69,$6B,$AB,$55,$92,$24,$55,$7F,$A5,$52,$A5,$54 ; $1B8
0D9C7 6A 57 55 55 95 AA B5 55.. 	.db $6A,$57,$55,$55,$95,$AA,$B5,$55,$51,$49,$52,$BB,$B7,$25,$24 ; $1C7
0D9D6 A9 D8 F5 55 95 48 92 DD.. 	.db $A9,$D8,$F5,$55,$95,$48,$92,$DD,$B7,$53,$22,$01,$69,$DF,$B7 ; $1D6
0D9E5 96 22 24 69 DF 5E 95 12.. 	.db $96,$22,$24,$69,$DF,$5E,$95,$12,$29,$69,$5B,$AB,$A9,$20,$A9 ; $1E5
0D9F4 6D 6F 5B 51 2A 55 96 AC.. 	.db $6D,$6F,$5B,$51,$2A,$55,$96,$AC,$4A,$B5,$2D,$4B,$A9,$65,$55 ; $1F4
0DA03 95 AD 2A 95 A5 D4 6A 57.. 	.db $95,$AD,$2A,$95,$A5,$D4,$6A,$57,$25,$92,$AA,$DA,$6D,$AB,$44 ; $203
0DA12 52 25 B5 B7 D5 CA 42 2A.. 	.db $52,$25,$B5,$B7,$D5,$CA,$42,$2A,$D5,$AE,$2B,$4A,$94,$AA,$DA ; $212
0DA21 55 AB 5A A9 22 A9 EA 5A.. 	.db $55,$AB,$5A,$A9,$22,$A9,$EA,$5A,$AB,$52,$AA,$5A,$AD,$2D,$A9 ; $221
0DA30 4A 53 A9 AA 5A 5B 12 A2.. 	.db $4A,$53,$A9,$AA,$5A,$5B,$12,$A2,$B6,$6E,$5F,$49,$92,$44,$BB ; $230
0DA3F 5D 53 45 A2 54 AB 77 2F.. 	.db $5D,$53,$45,$A2,$54,$AB,$77,$2F,$25,$82,$A4,$D6,$EE,$6B,$49 ; $23F
0DA4E 42 6A DB 4A 95 AA 92 AD.. 	.db $42,$6A,$DB,$4A,$95,$AA,$92,$AD,$B6,$6A,$53,$A1,$AA,$AA,$B6 ; $24E
0DA5D 52 25 49 ED AD AA A2 AA.. 	.db $52,$25,$49,$ED,$AD,$AA,$A2,$AA,$AA,$56,$5B,$A5,$92,$25,$A5 ; $25D
0DA6C A9 6D AB 4A 95 56 A9 95.. 	.db $A9,$6D,$AB,$4A,$95,$56,$A9,$95,$AA,$52,$AB,$D6,$52,$AD,$AA ; $26C
0DA7B 52 95 2A B5 D5            	.db $52,$95,$2A,$B5,$D5
0DA80 4A                        	.db $4A ; $27B
0DA81                           DPCMSampleDataEnd_DrumSample_B:
0DA81                           	; the rest of the drum sample is unused
0DA81 A9 2A 55 6D 6B A5 AA 24.. 	.db $A9,$2A,$55,$6D,$6B,$A5,$AA,$24,$55,$55,$DB,$4A,$95,$2A,$B5 ; NOT logged as PCM data
0DA90 AD AA AA 49 52 B5 A9 AA.. 	.db $AD,$AA,$AA,$49,$52,$B5,$A9,$AA,$CA,$52,$6B,$DB,$AA,$92,$44 ; $F
0DA9F 92 D5 B7 55 45 89 B2 DD.. 	.db $92,$D5,$B7,$55,$45,$89,$B2,$DD,$5A,$95,$92,$54,$4A,$DF,$DA ; $1E
0DAAE A2 22 A9 6A DB 36 91 54.. 	.db $A2,$22,$A9,$6A,$DB,$36,$91,$54,$B5,$B6,$5A,$49,$4A,$2D,$AB ; $2D
0DABD B5 A5 24 55 D5 DA 6A 2B.. 	.db $B5,$A5,$24,$55,$D5,$DA,$6A,$2B,$44,$B2,$7A,$B7,$A9,$04,$A5 ; $3C
0DACC AA DB 56 4A 25 D1 B2 DB.. 	.db $AA,$DB,$56,$4A,$25,$D1,$B2,$DB,$B5,$52,$22,$A5,$6A,$5F,$4B ; $4B
0DADB 92 24 B5 B7 AD 24 92 54.. 	.db $92,$24,$B5,$B7,$AD,$24,$92,$54,$DB,$6E,$95,$46,$91,$52,$DB ; $5A
0DAEA 6D 27 49 42 6D 77 8D A5.. 	.db $6D,$27,$49,$42,$6D,$77,$8D,$A5,$54,$49,$D3,$AA,$49,$6D,$55 ; $69
0DAF9 55 DB 24 A9 52 D9 6A AF.. 	.db $55,$DB,$24,$A9,$52,$D9,$6A,$AF,$24,$91,$D2,$B6,$6D,$17,$09 ; $78
0DB08 92 6A F7 B6 25 09 89 DA.. 	.db $92,$6A,$F7,$B6,$25,$09,$89,$DA,$BE,$B7,$2A,$08,$82,$DD,$BE,$55 ; $87
0DB18 95 A4 52 DB 56 A9 94 24.. 	.db $95,$A4,$52,$DB,$56,$A9,$94,$24,$B5,$BB,$56,$4A,$25,$D5,$AA ; $97
0DB27 AB 2A 51 53 B5 B5 2A A5.. 	.db $AB,$2A,$51,$53,$B5,$B5,$2A,$A5,$92,$55,$DB,$6A,$95,$24,$69 ; $A6
0DB36 AD B6 95 24 A5 B2 5B AB.. 	.db $AD,$B6,$95,$24,$A5,$B2,$5B,$AB,$4A,$95,$B4,$AA,$6D,$4B,$8A ; $B5
0DB45 2A B5 B6 55 09 12 ED F6.. 	.db $2A,$B5,$B6,$55,$09,$12,$ED,$F6,$AA,$AB,$24,$A9,$94,$B6,$56 ; $C4
0DB54 5B 49 52 D3 D6 6A 25 A9.. 	.db $5B,$49,$52,$D3,$D6,$6A,$25,$A9,$B6,$55,$25,$49,$A5,$AA,$AE ; $D3
0DB63 AD 2A A9 D2 5A B5 AA 56.. 	.db $AD,$2A,$A9,$D2,$5A,$B5,$AA,$56,$42,$55,$5B,$55,$2B,$25,$55 ; $E2
0DB72 6B AB A9 55 29 A9 9A 4A.. 	.db $6B,$AB,$A9,$55,$29,$A9,$9A,$4A,$B5,$6A,$A9,$AA,$55,$A9,$6A ; $F1
0DB81 AB AA 95 2A 28 AD 5D DB.. 	.db $AB,$AA,$95,$2A,$28,$AD,$5D,$DB,$92,$24,$55,$B5,$DA,$B5,$92 ; $100
0DB90 A2 54 B5 6D 2B 12 AA D4.. 	.db $A2,$54,$B5,$6D,$2B,$12,$AA,$D4,$6A,$DF,$2A,$89,$AA,$5A,$55 ; $10F
0DB9F D7 24 51 55 B5 56 2D 29.. 	.db $D7,$24,$51,$55,$B5,$56,$2D,$29,$69,$AF,$56,$B5,$94,$88,$AA ; $11E
0DBAE 2D 5B AD 52 A5 AA AA 5A.. 	.db $2D,$5B,$AD,$52,$A5,$AA,$AA,$5A,$B5,$94,$DA,$AA,$AA,$A4,$12 ; $12D
0DBBD AD B6 95 A5 AA B2 DA 56.. 	.db $AD,$B6,$95,$A5,$AA,$B2,$DA,$56,$A9,$6A,$29,$89,$D5,$AA,$AA ; $13C
0DBCC A5 4A 55 6B 59 69 AD D4.. 	.db $A5,$4A,$55,$6B,$59,$69,$AD,$D4,$AA,$A5,$A8,$52,$55,$B5,$A9 ; $14B
0DBDB 55 55 55 6B 55 95 92 2A.. 	.db $55,$55,$55,$6B,$55,$95,$92,$2A,$A9,$55,$AB,$52,$AD,$AA,$E9 ; $15A
0DBEA 5A 55 42 AB 56 55 53 29.. 	.db $5A,$55,$42,$AB,$56,$55,$53,$29,$B1,$7A,$59,$B5,$54,$55,$52 ; $169
0DBF9 6B AB 56 25 49 56 6D      	.db $6B,$AB,$56,$25,$49,$56,$6D ; $178
0DC00                           DPCMSampleDataEnd_DrumSample:
0DC00                           ENDIF
0DC00                           
0DC00                           IFDEF PROTOTYPE_DPCM_SAMPLES
0DC00                           	.include "src/extras/prototype-dpcm-samples.asm"
0DC00                           ENDIF
0DC00                           
0DC00                           ; PPU update buffers used to update the screen
0DC00                           ScreenUpdateBufferPointers:
0DC00 01 03                     	.dw PPUBuffer_301 ; Default screen update buffer
0DC02 83 05                     	.dw PPUBuffer_BonusChanceCoinsExtraLife
0DC04 5F 05                     	.dw PPUBuffer_TitleCardPalette
0DC06 00 00                     	.dw PPUBuffer_CharacterSelect
0DC08 00 00                     	.dw PPUBuffer_TitleCard
0DC0A 00 00                     	.dw PPUBuffer_Text_Game_Over
0DC0C 7B 06                     	.dw PPUBuffer_ContinueRetryText
0DC0E 00 00                     	.dw PPUBuffer_Text_Retry
0DC10 68 71                     	.dw PPUBuffer_TitleCardText
0DC12 7B 06                     	.dw PPUBuffer_BonusChanceUnusedText ; Doki Doki Panic leftover
0DC14 93 06                     	.dw PPUBuffer_NoBonusText
0DC16 AB 06                     	.dw PPUBuffer_PushAButtonText
0DC18 BD 06                     	.dw PPUBuffer_Player1UpText
0DC1A CC 06                     	.dw PPUBuffer_PauseText
0DC1C E9 06                     	.dw PPUBuffer_ErasePauseText
0DC1E DA 06                     	.dw PPUBuffer_EraseBonusMessageText
0DC20 DF 06                     	.dw PPUBuffer_ErasePushAButton
0DC22 E4 06                     	.dw PPUBuffer_EraseBonusMessageTextUnused
0DC24 94 71                     	.dw PPUBuffer_WarpToWorld
0DC26 A8 71                     	.dw PPUBuffer_ContinueRetryBullets
0DC28 1B 72                     	.dw PPUBuffer_EndOfLevelDoor
0DC2A 00 00                     	.dw PPUBuffer_TitleCardLeftover
0DC2C 00 00                     	.dw PPUBuffer_PauseExtraLife
0DC2E 00 74                     	.dw PPUBuffer_BonusChanceLayout
0DC30                           
0DC30                           PPUBuffer_CharacterSelect:
0DC30 21 49 06 E9 E5 DE DA EC.. 	.db $21, $49, $06, $E9, $E5, $DE, $DA, $EC, $DE ; PLEASE
0DC39 21 50 06 EC DE E5 DE DC.. 	.db $21, $50, $06, $EC, $DE, $E5, $DE, $DC, $ED ; SELECT
0DC42 21 8C 06 E9 E5 DA F2 DE.. 	.db $21, $8C, $06, $E9, $E5, $DA, $F2, $DE, $EB ; PLAYER
0DC4B 20 00 20 B7 B8 B7 B8 B7.. 	.db $20, $00, $20, $B7, $B8, $B7, $B8, $B7, $B8, $B7, $B8, $B7, $B8, $B7, $B8 ; Probably the checkerboard diamonds or w/e
0DC5A B7 B8 B7 B8 B7 B8 B7 B8.. 	.db $B7, $B8, $B7, $B8, $B7, $B8, $B7, $B8, $B7, $B8, $B7, $B8, $B7, $B8, $B7 ; $F
0DC69 B8 B7 B8 B7 B8            	.db $B8, $B7, $B8, $B7, $B8 ; $1E
0DC6E 20 20 20 B9 BA B9 BA B9.. 	.db $20, $20, $20, $B9, $BA, $B9, $BA, $B9, $BA, $B9, $BA, $B9, $BA, $B9, $BA
0DC7D B9 BA B9 BA B9 BA B9 BA.. 	.db $B9, $BA, $B9, $BA, $B9, $BA, $B9, $BA, $B9, $BA, $B9, $BA, $B9, $BA, $B9 ; $F
0DC8C BA B9 BA B9 BA            	.db $BA, $B9, $BA, $B9, $BA ; $1E
0DC91 23 80 20 B7 B8 B7 B8 B7.. 	.db $23, $80, $20, $B7, $B8, $B7, $B8, $B7, $B8, $B7, $B8, $B7, $B8, $B7, $B8
0DCA0 B7 B8 B7 B8 B7 B8 B7 B8.. 	.db $B7, $B8, $B7, $B8, $B7, $B8, $B7, $B8, $B7, $B8, $B7, $B8, $B7, $B8, $B7 ; $F
0DCAF B8 B7 B8 B7 B8            	.db $B8, $B7, $B8, $B7, $B8 ; $1E
0DCB4 23 A0 20 B9 BA B9 BA B9.. 	.db $23, $A0, $20, $B9, $BA, $B9, $BA, $B9, $BA, $B9, $BA, $B9, $BA, $B9, $BA
0DCC3 B9 BA B9 BA B9 BA B9 BA.. 	.db $B9, $BA, $B9, $BA, $B9, $BA, $B9, $BA, $B9, $BA, $B9, $BA, $B9, $BA, $B9 ; $F
0DCD2 BA B9 BA B9 BA            	.db $BA, $B9, $BA, $B9, $BA ; $1E
0DCD7 20 00 9E B7 B9 B7 B9 B7.. 	.db $20, $00, $9E, $B7, $B9, $B7, $B9, $B7, $B9, $B7, $B9, $B7, $B9, $B7, $B9
0DCE6 B7 B9 B7 B9 B7 B9 B7 B9.. 	.db $B7, $B9, $B7, $B9, $B7, $B9, $B7, $B9, $B7, $B9, $B7, $B9, $B7, $B9, $B7 ; $F
0DCF5 B9 B7 B9                  	.db $B9, $B7, $B9 ; $1E
0DCF8 20 01 9E B8 BA B8 BA B8.. 	.db $20, $01, $9E, $B8, $BA, $B8, $BA, $B8, $BA, $B8, $BA, $B8, $BA, $B8, $BA
0DD07 B8 BA B8 BA B8 BA B8 BA.. 	.db $B8, $BA, $B8, $BA, $B8, $BA, $B8, $BA, $B8, $BA, $B8, $BA, $B8, $BA, $B8 ; $F
0DD16 BA B8 BA                  	.db $BA, $B8, $BA ; $1E
0DD19 20 1E 9E B7 B9 B7 B9 B7.. 	.db $20, $1E, $9E, $B7, $B9, $B7, $B9, $B7, $B9, $B7, $B9, $B7, $B9, $B7, $B9
0DD28 B7 B9 B7 B9 B7 B9 B7 B9.. 	.db $B7, $B9, $B7, $B9, $B7, $B9, $B7, $B9, $B7, $B9, $B7, $B9, $B7, $B9, $B7 ; $F
0DD37 B9 B7 B9                  	.db $B9, $B7, $B9 ; $1E
0DD3A 20 1F 9E B8 BA B8 BA B8.. 	.db $20, $1F, $9E, $B8, $BA, $B8, $BA, $B8, $BA, $B8, $BA, $B8, $BA, $B8, $BA
0DD49 B8 BA B8 BA B8 BA B8 BA.. 	.db $B8, $BA, $B8, $BA, $B8, $BA, $B8, $BA, $B8, $BA, $B8, $BA, $B8, $BA, $B8 ; $F
0DD58 BA B8 BA                  	.db $BA, $B8, $BA ; $1E
0DD5B 20 42 5C FD               	.db $20, $42, $5C, $FD
0DD5F 20 62 5C FD               	.db $20, $62, $5C, $FD
0DD63 20 47 05 00 01 02 03 04   	.db $20, $47, $05, $00, $01, $02, $03,4
0DD6B 20 54 05 05 06 07 08 09   	.db $20, $54, $05, $05, $06, $07, $08,9
0DD73 20 63 0A 0A 0B 0C 0D 0E.. 	.db $20, $63, $0A, $A,$0B, $C,$0D, $E,$0F, $10, $11, $12, $13
0DD80 20 73 0A 14 15 16 17 18.. 	.db $20, $73, $0A, $14, $15, $16, $17, $18, $19, $1A, $1B, $1C, $1D
0DD8D 20 82 1C 1E 1F 20 21 22.. 	.db $20, $82, $1C, $1E, $1F, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29
0DD9C FD FD FD FD 2A 2B 2C 2D.. 	.db $FD, $FD, $FD, $FD, $2A, $2B, $2C, $2D, $2E, $2F, $30, $31, $32, $33, $34 ; $F
0DDAB 35                        	.db $35 ; $1E
0DDAC 20 A2 06 36 37 38 39 3A.. 	.db $20, $A2, $06, $36, $37, $38, $39, $3A, $3B
0DDB5 20 AB 0A 3C 3D 3E 3F 40.. 	.db $20, $AB, $0A, $3C, $3D, $3E, $3F, $40, $43, $44, $45, $46, $47
0DDC2 20 B8 06 48 49 4A 4B 4C.. 	.db $20, $B8, $06, $48, $49, $4A, $4B, $4C, $4D
0DDCB 20 C2 05 4E 4F 50 51 52   	.db $20, $C2, $05, $4E, $4F, $50, $51, $52
0DDD3 20 D9 05 53 54 55 56 57   	.db $20, $D9, $05, $53, $54, $55, $56, $57
0DDDB 20 E2 04 58 59 5A 5B      	.db $20, $E2, $04, $58, $59, $5A, $5B
0DDE2 20 E6 CD 5C               	.db $20, $E6, $CD, $5C
0DDE6 20 F9 CD 5C               	.db $20, $F9, $CD, $5C
0DDEA 20 FA 04 5D 5E 5F 60      	.db $20, $FA, $04, $5D, $5E, $5F, $60
0DDF1 21 02 83 61 64 67         	.db $21, $02, $83, $61, $64, $67
0DDF7 21 03 8B 62 65 68 6A 6C.. 	.db $21, $03, $8B, $62, $65, $68, $6A, $6C, $6F, $72, $75, $78, $7B, $7E
0DE05 21 04 94 63 66 69 6B 6D.. 	.db $21, $04, $94, $63, $66, $69, $6B, $6D, $70, $73, $76, $79, $7C, $7F, $81
0DE14 82 83 84 85 86 87 88 89   	.db $82, $83, $84, $85, $86, $87, $88, $89 ; $F
0DE1C 21 85 89 6E 71 74 77 7A.. 	.db $21, $85, $89, $6E, $71, $74, $77, $7A, $7D, $80, $6E, $6E
0DE28 21 9A 89 97 9A 9D BB A0.. 	.db $21, $9A, $89, $97, $9A, $9D, $BB, $A0, $A3, $A6, $A9, $AB
0DE34 21 1B 94 8C 8F 92 95 98.. 	.db $21, $1B, $94, $8C, $8F, $92, $95, $98, $9B, $9E, $BC, $A1, $A4, $A7, $AA
0DE43 AC AD AE B0 B1 B2 B3 B4   	.db $AC, $AD, $AE, $B0, $B1, $B2, $B3, $B4 ; $F
0DE4B 21 1C 8B 8D 90 93 96 99.. 	.db $21, $1C, $8B, $8D, $90, $93, $96, $99, $9C, $9F, $BD, $A2, $A5, $A8
0DE59 21 1D 83 8E 91 94         	.db $21, $1D, $83, $8E, $91, $94
0DE5F 21 62 D1 FD               	.db $21, $62, $D1, $FD
0DE63 21 7D D1 FD               	.db $21, $7D, $D1, $FD
0DE67 22 63 C9 FD 22 7C C9 FD.. 	.db $22, $63, $C9, $FD, $22, $7C, $C9, $FD, $22, $86, $82, $8A, $8B, $22, $99
0DE76 82 8A 8B                  	.db $82, $8A, $8B ; $F
0DE79 00                        	.db $00
0DE7A                           
0DE7A                           PPUBuffer_TitleCard:
0DE7A 23 C0 09                  	.db $23, $C0, $09
0DE7D 3E 0E 0E 0E 0E 0E 0E 8E.. 	.db $3E, $0E, $0E, $0E, $0E, $0E, $0E, $8E, $32
0DE86 23 CF 01 8C               	.db $23, $CF, $01, $8C
0DE8A 23 D0 10                  	.db $23, $D0, $10
0DE8D 32 00 A0 A0 A0 20 00 8C.. 	.db $32, $00, $A0, $A0, $A0, $20, $00, $8C, $32, $00, $00, $0A, $02, $00, $00, $8C
0DE9D 23 E0 09                  	.db $23, $E0, $09
0DEA0 32 00 00 0E 00 00 00 8C.. 	.db $32, $00, $00, $0E, $00, $00, $00, $8C, $32
0DEA9 23 EF 01 8C               	.db $23, $EF, $01, $8C
0DEAD 23 F0 06                  	.db $23, $F0, $06
0DEB0 32 00 A0 A0 A0 A0         	.db $32, $00, $A0, $A0, $A0, $A0
0DEB6 23 F7 09                  	.db $23, $F7, $09
0DEB9 8C 0E 0E 0E 0E 0E 0E 0E.. 	.db $8C, $0E, $0E, $0E, $0E, $0E, $0E, $0E, $0E
0DEC2 24 00 60 FF               	.db $24, $00, $60, $FF
0DEC6 24 20 60 FF               	.db $24, $20, $60, $FF
0DECA 24 40 60 FF               	.db $24, $40, $60, $FF
0DECE 24 60 60 FF               	.db $24, $60, $60, $FF
0DED2 27 40 60 FF               	.db $27, $40, $60, $FF
0DED6 27 60 60 FF               	.db $27, $60, $60, $FF
0DEDA 27 80 60 FF               	.db $27, $80, $60, $FF
0DEDE 27 A0 60 FF               	.db $27, $A0, $60, $FF
0DEE2 24 80 D6 FF               	.db $24, $80, $D6, $FF
0DEE6 24 81 D6 FF               	.db $24, $81, $D6, $FF
0DEEA 24 82 D6 FF               	.db $24, $82, $D6, $FF
0DEEE 24 9D D6 FF               	.db $24, $9D, $D6, $FF
0DEF2 24 9E D6 FF               	.db $24, $9E, $D6, $FF
0DEF6 24 9F D6 FF               	.db $24, $9F, $D6, $FF
0DEFA 24 83 01 D0               	.db $24, $83, $01, $D0
0DEFE 24 9C 01 D8               	.db $24, $9C, $01, $D8
0DF02 24 84 58 FB               	.db $24, $84, $58, $FB
0DF06 24 A3 D4 D1               	.db $24, $A3, $D4, $D1
0DF0A 24 BC D4 D7               	.db $24, $BC, $D4, $D7
0DF0E 24 A4 58 FB               	.db $24, $A4, $58, $FB
0DF12 24 C4 58 FB               	.db $24, $C4, $58, $FB
0DF16 24 E4 58 FB               	.db $24, $E4, $58, $FB
0DF1A 25 04 58 FB               	.db $25, $04, $58, $FB
0DF1E 25 24 58 FB               	.db $25, $24, $58, $FB
0DF22 25 44 58 FB               	.db $25, $44, $58, $FB
0DF26 25 64 58 FB               	.db $25, $64, $58, $FB
0DF2A 25 84 58 FB               	.db $25, $84, $58, $FB
0DF2E 25 A4 58 FB               	.db $25, $A4, $58, $FB
0DF32 25 C4 58 FB               	.db $25, $C4, $58, $FB
0DF36 25 E4 58 FB               	.db $25, $E4, $58, $FB
0DF3A 26 04 58 FB               	.db $26, $04, $58, $FB
0DF3E 26 24 58 FB               	.db $26, $24, $58, $FB
0DF42 26 44 58 FB               	.db $26, $44, $58, $FB
0DF46 26 64 58 FB               	.db $26, $64, $58, $FB
0DF4A 26 84 58 FB               	.db $26, $84, $58, $FB
0DF4E 26 A4 58 FB               	.db $26, $A4, $58, $FB
0DF52 26 C4 58 FB               	.db $26, $C4, $58, $FB
0DF56 26 E4 58 FB               	.db $26, $E4, $58, $FB
0DF5A 27 23 01 D2               	.db $27, $23, $01, $D2
0DF5E 27 3C 01 D6               	.db $27, $3C, $01, $D6
0DF62 27 24 58 D3               	.db $27, $24, $58, $D3
0DF66 27 C8 08                  	.db $27, $C8, $08
0DF69 44 FF BF AF AF AF FF 11   	.db $44, $FF, $BF, $AF, $AF, $AF, $FF, $11
0DF71 27 D0 10                  	.db $27, $D0, $10
0DF74 44 BF AF AF AF AF EF 11.. 	.db $44, $BF, $AF, $AF, $AF, $AF, $EF, $11, $44, $FF, $FF, $FF, $FF, $FF, $FF, $11
0DF84 27 E0 10                  	.db $27, $E0, $10
0DF87 44 FF FF FF FF FF FF 11.. 	.db $44, $FF, $FF, $FF, $FF, $FF, $FF, $11, $44, $FF, $FF, $FF, $FF, $FF, $AF, $11
0DF97 27 F0 08                  	.db $27, $F0, $08
0DF9A 44 05 05 05 05 05 05 01   	.db $44, $05, $05, $05, $05, $05, $05, $01
0DFA2 27 04 58 FB               	.db $27, $04, $58, $FB
0DFA6 00                        	.db $00
0DFA7                           
0DFA7                           ; nametable attribute data
0DFA7                           PPUBuffer_PauseExtraLife:
0DFA7 27 EA 05                  	.db $27, $EA, $05
0DFAA AA AA AA AA AA            	.db $AA, $AA, $AA, $AA, $AA
0DFAF                           
0DFAF                           ; This draws two columns of black tiles along the right side of the nametable to the left of the
0DFAF                           ; title card, which was the character/level select in Doki Doki Panic. In SMB2, it remains unused.
0DFAF                           PPUBuffer_TitleCardLeftover:
0DFAF 20 1E 9E                  	.db $20, $1E, $9E
0DFB2 FF FF FF FF FF FF FF FF.. 	.db $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
0DFC2 FF FF FF FF FF FF FF FF.. 	.db $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
0DFD0 20 1F 9E                  	.db $20, $1F, $9E
0DFD3 FF FF FF FF FF FF FF FF.. 	.db $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
0DFE3 FF FF FF FF FF FF FF FF.. 	.db $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
0DFF1 23 C7 01 00               	.db $23, $C7, $01, $00
0DFF5 23 CF 01 00               	.db $23, $CF, $01, $00
0DFF9 23 D7 01 00               	.db $23, $D7, $01, $00
0DFFD 23 DF 01 00               	.db $23, $DF, $01, $00
0E001 23 E7 01 00               	.db $23, $E7, $01, $00
0E005 23 EF 01 00               	.db $23, $EF, $01, $00
0E009 23 F7 01 00               	.db $23, $F7, $01, $00
0E00D 23 FF 01 00               	.db $23, $FF, $01, $00
0E011 00                        	.db $00
0E012                           
0E012                           ; This table defines which level starts each world.
0E012                           ; The difference between the value of each world indicates how many worlds are
0E012                           ; in the level, which is why there is a slot for an 8th world, even though no
0E012                           ; such world is playable!
0E012                           WorldStartingLevel:
0E012 00                        	.db $00
0E013 03                        	.db $03
0E014 06                        	.db $06
0E015 09                        	.db $09
0E016 0C                        	.db $0C
0E017 0F                        	.db $0F
0E018 12                        	.db $12
0E019 14                        	.db $14
0E01A                           
0E01A                           PlayerSelectMarioSprites1:
0E01A 8F 00 00 48               	.db $8F, $00, $00, $48
0E01E 8F 00 40 50               	.db $8F, $00, $40, $50
0E022 9F 02 00 48               	.db $9F, $02, $00, $48
0E026 9F 02 40 50               	.db $9F, $02, $40, $50
0E02A                           
0E02A                           PlayerSelectLuigiSprites1:
0E02A 8F 04 01 68               	.db $8F, $04, $01, $68
0E02E 8F 04 41 70               	.db $8F, $04, $41, $70
0E032 9F 06 01 68               	.db $9F, $06, $01, $68
0E036 9F 06 41 70               	.db $9F, $06, $41, $70
0E03A                           
0E03A                           PlayerSelectToadSprites1:
0E03A 8F 08 02 88               	.db $8F, $08, $02, $88
0E03E 8F 08 42 90               	.db $8F, $08, $42, $90
0E042 9F 0A 02 88               	.db $9F, $0A, $02, $88
0E046 9F 0A 42 90               	.db $9F, $0A, $42, $90
0E04A                           
0E04A                           PlayerSelectPrincessSprites1:
0E04A 8F 0C 03 A8               	.db $8F, $0C, $03, $A8
0E04E 8F 0C 43 B0               	.db $8F, $0C, $43, $B0
0E052 9F 0E 03 A8               	.db $9F, $0E, $03, $A8
0E056 9F 0E 43 B0               	.db $9F, $0E, $43, $B0
0E05A                           
0E05A                           PlayerSelectMarioSprites2:
0E05A 8F 10 00 48               	.db $8F, $10, $00, $48
0E05E 8F 12 00 50               	.db $8F, $12, $00, $50
0E062 9F 14 00 48               	.db $9F, $14, $00, $48
0E066 9F 16 00 50               	.db $9F, $16, $00, $50
0E06A                           
0E06A                           PlayerSelectLuigiSprites2:
0E06A 8F 18 01 68               	.db $8F, $18, $01, $68
0E06E 8F 1A 01 70               	.db $8F, $1A, $01, $70
0E072 9F 1C 01 68               	.db $9F, $1C, $01, $68
0E076 9F 1E 01 70               	.db $9F, $1E, $01, $70
0E07A                           
0E07A                           PlayerSelectToadSprites2:
0E07A 8F 20 02 88               	.db $8F, $20, $02, $88
0E07E 8F 22 02 90               	.db $8F, $22, $02, $90
0E082 9F 24 02 88               	.db $9F, $24, $02, $88
0E086 9F 26 02 90               	.db $9F, $26, $02, $90
0E08A                           
0E08A                           PlayerSelectPrincessSprites2:
0E08A 8F 28 03 A8               	.db $8F, $28, $03, $A8
0E08E 8F 2A 03 B0               	.db $8F, $2A, $03, $B0
0E092 9F 2C 03 A8               	.db $9F, $2C, $03, $A8
0E096 9F 2E 03 B0               	.db $9F, $2E, $03, $B0
0E09A                           
0E09A                           PlayerSelectSpriteIndexes:
0E09A 00 30 20 10               	.db $00, $30, $20, $10
0E09E                           
0E09E                           BonusChanceCherrySprite:
0E09E 5F 05 01 58               	.db $5F, $05, $01, $58
0E0A2 5F 07 01 60               	.db $5F, $07, $01, $60
0E0A6                           
0E0A6                           BonusChanceStarSprite:
0E0A6 5F 09 01 58               	.db $5F, $09, $01, $58
0E0AA 5F 09 41 60               	.db $5F, $09, $41, $60
0E0AE                           
0E0AE                           BonusChanceVeggieSprite:
0E0AE 5F 0B 01 58               	.db $5F, $0B, $01, $58
0E0B2 5F 0B 41 60               	.db $5F, $0B, $41, $60
0E0B6                           
0E0B6                           BonusChanceSnifitSprite:
0E0B6 5F 01 01 58               	.db $5F, $01, $01, $58
0E0BA 5F 03 01 60               	.db $5F, $03, $01, $60
0E0BE                           
0E0BE                           PlayerSelectSpritePalettesDark:
0E0BE 3F 10 10                  	.db $3F, $10, $10 ; PPU Data
0E0C1 0F 22 12 01               	.db $0F, $22, $12, $01
0E0C5 0F 22 12 01               	.db $0F, $22, $12, $01
0E0C9 0F 22 12 01               	.db $0F, $22, $12, $01
0E0CD 0F 22 12 01               	.db $0F, $22, $12, $01
0E0D1                           
0E0D1                           PlayerSelectPaletteOffsets:
0E0D1 00                        	.db (PlayerSelectSpritePalettes_Mario - PlayerSelectSpritePalettes)
0E0D2 00                        	.db (PlayerSelectSpritePalettes_Princess - PlayerSelectSpritePalettes)
0E0D3 00                        	.db (PlayerSelectSpritePalettes_Toad - PlayerSelectSpritePalettes)
0E0D4 00                        	.db (PlayerSelectSpritePalettes_Luigi - PlayerSelectSpritePalettes)
0E0D5                           
0E0D5                           PlayerSelectSpritePalettes:
0E0D5                           PlayerSelectSpritePalettes_Mario:
0E0D5 3F 10 04                  	.db $3F, $10, $04
0E0D8 0F 27 16 01               	.db $0F, $27, $16, $01
0E0DC                           PlayerSelectSpritePalettes_Luigi:
0E0DC 3F 14 04                  	.db $3F, $14, $04
0E0DF 0F 36 2A 01               	.db $0F, $36, $2A, $01
0E0E3                           PlayerSelectSpritePalettes_Toad:
0E0E3 3F 18 04                  	.db $3F, $18, $04
0E0E6 0F 27 30 01               	.db $0F, $27, $30, $01
0E0EA                           PlayerSelectSpritePalettes_Princess:
0E0EA 3F 1C 04                  	.db $3F, $1C, $04
0E0ED 0F 36 25 07               	.db $0F, $36, $25, $07
0E0F1                           
0E0F1                           TitleCardPalettes:
0E0F1 3F 00 20                  	.db $3F, $00, $20 ; PPU data
0E0F4 38 30 1A 0F               	.db $38, $30, $1A, $0F
0E0F8 38 38 0F 0F               	.db $38, $38, $0F, $0F
0E0FC 38 17 17 38               	.db $38, $17, $17, $38
0E100 38 28 18 08               	.db $38, $28, $18, $08
0E104 38 30 27 01               	.db $38, $30, $27, $01
0E108 38 37 27 06               	.db $38, $37, $27, $06
0E10C 38 25 36 06               	.db $38, $25, $36, $06
0E110 38 12 36 01               	.db $38, $12, $36, $01
0E114 00                        	.db $00
0E115                           
0E115                           BonusChanceSpritePalettes:
0E115 0F 37 16 0F               	.db $0F, $37, $16, $0F
0E119 0F 37 16 0F               	.db $0F, $37, $16, $0F
0E11D 0F 37 16 0F               	.db $0F, $37, $16, $0F
0E121 0F 37 16 0F               	.db $0F, $37, $16, $0F
0E125                           
0E125                           
0E125                           ;
0E125                           ; Load A with an index and call this to
0E125                           ; jump to a pointer from the table directly
0E125                           ; after the call.
0E125                           ;
0E125                           JumpToTableAfterJump:
0E125 0A                        	ASL A
0E126 A8                        	TAY
0E127 68                        	PLA
0E128 85 0A                     	STA byte_RAM_A
0E12A 68                        	PLA
0E12B 85 0B                     	STA byte_RAM_B
0E12D C8                        	INY
0E12E B1 0A                     	LDA (byte_RAM_A), Y
0E130 85 0C                     	STA byte_RAM_C
0E132 C8                        	INY
0E133 B1 0A                     	LDA (byte_RAM_A), Y
0E135 85 0D                     	STA byte_RAM_D
0E137 6C 0C 00                  	JMP (byte_RAM_C)
0E13A                           
0E13A                           
0E13A                           BlackAndWhitePalette:
0E13A 0F 30 30 0F               	.db $0F, $30, $30, $0F
0E13E                           
0E13E                           
0E13E                           SetBlackAndWhitePalette:
0E13E AD 02 20                  	LDA PPUSTATUS
0E141 A9 3F                     	LDA #$3F
0E143 A0 00                     	LDY #$00
0E145 8D 06 20                  	STA PPUADDR
0E148 8C 06 20                  	STY PPUADDR
0E14B                           
0E14B                           SetBlackAndWhitePalette_Loop:
0E14B 98                        	TYA
0E14C 29 03                     	AND #$03
0E14E AA                        	TAX
0E14F BD 3A E1                  	LDA BlackAndWhitePalette, X
0E152 8D 07 20                  	STA PPUDATA
0E155 C8                        	INY
0E156 C0 14                     	CPY #$14
0E158 90 F1                     	BCC SetBlackAndWhitePalette_Loop
0E15A                           
0E15A 60                        	RTS
0E15B                           
0E15B                           
0E15B                           SetScrollXYTo0:
0E15B A9 00                     	LDA #$00
0E15D 85 FC                     	STA PPUScrollYMirror
0E15F 85 FD                     	STA PPUScrollXMirror
0E161 85 C8                     	STA PPUScrollYHiMirror
0E163 85 C9                     	STA PPUScrollXHiMirror
0E165 60                        	RTS
0E166                           
0E166                           
0E166                           ;
0E166                           ; Clears the screen and resets the scroll position for the title card
0E166                           ;
0E166                           ; This is used for the character select screen as well, but that has a few PPU
0E166                           ; changes of its own.
0E166                           ;
0E166                           ResetScreenForTitleCard:
0E166 20 00 00                  	JSR EnableNMI
0E169                           
0E169 20 00 00                  	JSR WaitForNMI_TurnOffPPU
0E16C                           
0E16C 20 5B E1                  	JSR SetScrollXYTo0
0E16F                           
0E16F A9 02                     	LDA #ScreenUpdateBuffer_RAM_TitleCardPalette
0E171 85 11                     	STA ScreenUpdateIndex
0E173 20 00 00                  	JSR WaitForNMI
0E176                           
0E176 A9 00                     	LDA #VMirror
0E178 20 00 00                  	JSR ChangeNametableMirroring
0E17B                           
0E17B 20 00 00                  	JSR ClearNametablesAndSprites
0E17E                           
0E17E 60                        	RTS
0E17F                           
0E17F                           
0E17F                           ;
0E17F                           ; Enables NMI and draws the background of the pause screen
0E17F                           ;
0E17F                           EnableNMI_PauseTitleCard:
0E17F 20 00 00                  	JSR EnableNMI
0E182                           
0E182 20 00 00                  	JSR WaitForNMI_TurnOffPPU
0E185                           
0E185 A9 40                     	LDA #Stack100_Menu
0E187 8D 00 01                  	STA StackArea
0E18A A9 03                     	LDA #ScreenUpdateBuffer_CharacterSelect
0E18C 85 11                     	STA ScreenUpdateIndex
0E18E 20 00 00                  	JSR WaitForNMI
0E191                           
0E191 A9 04                     	LDA #ScreenUpdateBuffer_TitleCard
0E193 85 11                     	STA ScreenUpdateIndex
0E195                           
0E195 4C 00 00                  	JMP WaitForNMI
0E198                           
0E198                           
0E198                           ;
0E198                           ; Draws world info for the title card and pause screens
0E198                           ;
0E198                           ; ##### Input
0E198                           ; - `X`: CurrentWorld
0E198                           ; - `Y`: CurrentLevel (not actually used)
0E198                           ;
0E198                           DisplayLevelTitleCardText:
0E198                           	; Level number (unused)
0E198                           	; In Doki Doki Panic, this was displayed as a page number, keeping with
0E198                           	; the storybook motif.
0E198 C8                        	INY
0E199 98                        	TYA
0E19A 20 00 00                  	JSR GetTwoDigitNumberTiles
0E19D                           
0E19D                           	; World number
0E19D E8                        	INX
0E19E 8A                        	TXA
0E19F 09 D0                     	ORA #$D0
0E1A1 8D 7D 71                  	STA TitleCard_World
0E1A4                           
0E1A4                           	; Extra Life number
0E1A4 AC ED 04                  	LDY ExtraLives
0E1A7 88                        	DEY
0E1A8 98                        	TYA
0E1A9 20 00 00                  	JSR GetTwoDigitNumberTiles
0E1AC 8C 91 71                  	STY TitleCard_Lives
0E1AF 8D 92 71                  	STA TitleCard_Lives + 1
0E1B2                           
0E1B2                           	; Reset level dots
0E1B2 A0 06                     	LDY #$06
0E1B4 A9 FB                     	LDA #$FB
0E1B6                           DisplayLevelTitleCardText_ResetLevelDotsLoop:
0E1B6 99 6B 71                  	STA TitleCard_LevelDots, Y ; writes to $7171
0E1B9 88                        	DEY
0E1BA 10 FA                     	BPL DisplayLevelTitleCardText_ResetLevelDotsLoop
0E1BC                           
0E1BC                           	; Level number
0E1BC AC 35 06                  	LDY CurrentWorld
0E1BF AD 31 05                  	LDA CurrentLevel
0E1C2 38                        	SEC
0E1C3 F9 12 E0                  	SBC WorldStartingLevel, Y
0E1C6 8D 29 06                  	STA CurrentLevelRelative
0E1C9 18                        	CLC
0E1CA 69 D1                     	ADC #$D1
0E1CC 8D 7F 71                  	STA TitleCard_Level
0E1CF                           
0E1CF                           	; Use the difference between the starting level of the next world and this
0E1CF                           	; world to determine how many dots to show for the levels in the world.
0E1CF B9 13 E0                  	LDA WorldStartingLevel + 1, Y
0E1D2 38                        	SEC
0E1D3 F9 12 E0                  	SBC WorldStartingLevel, Y
0E1D6 85 03                     	STA byte_RAM_3
0E1D8                           
0E1D8                           	; Level dots
0E1D8 A2 00                     	LDX #$00
0E1DA A0 00                     	LDY #$00
0E1DC                           DisplayLevelTitleCardText_DrawLevelDotsLoop:
0E1DC A9 FD                     	LDA #$FD ; other level
0E1DE EC 29 06                  	CPX CurrentLevelRelative
0E1E1 D0 00                     	BNE DisplayLevelTitleCardText_DrawLevelDot
0E1E3                           
0E1E3 A9 F6                     	LDA #$F6 ; current level
0E1E5                           
0E1E5                           DisplayLevelTitleCardText_DrawLevelDot:
0E1E5 99 6B 71                  	STA TitleCard_LevelDots, Y
0E1E8 C8                        	INY
0E1E9 C8                        	INY
0E1EA E8                        	INX
0E1EB E4 03                     	CPX byte_RAM_3
0E1ED 90 ED                     	BCC DisplayLevelTitleCardText_DrawLevelDotsLoop
0E1EF                           
0E1EF                           	; Draw the card
0E1EF A9 08                     	LDA #ScreenUpdateBuffer_RAM_TitleCardText
0E1F1 85 11                     	STA ScreenUpdateIndex
0E1F3 60                        	RTS
0E1F4                           
0E1F4                           
0E1F4                           ;
0E1F4                           ; It's game time, pal
0E1F4                           ;
0E1F4                           SetStack100Gameplay:
0E1F4 A9 C0                     	LDA #Stack100_Gameplay
0E1F6 8D 00 01                  	STA StackArea
0E1F9 60                        	RTS
0E1FA                           
0E1FA                           
0E1FA                           ;
0E1FA                           ; Resets various level-related variables to $00
0E1FA                           ;
0E1FA                           InitializeSomeLevelStuff:
0E1FA A9 00                     	LDA #$00
0E1FC 8D 32 05                  	STA CurrentLevelArea
0E1FF 8D E8 04                  	STA CurrentLevelArea_Init
0E202 8D 33 05                  	STA CurrentLevelEntryPage
0E205 8D E9 04                  	STA CurrentLevelEntryPage_Init
0E208 8D 34 05                  	STA TransitionType
0E20B 8D EA 04                  	STA TransitionType_Init
0E20E 85 50                     	STA PlayerState
0E210 8D E6 04                  	STA PlayerState_Init
0E213 8D 28 06                  	STA InSubspaceOrJar
0E216 8D EE 04                  	STA InJarType
0E219 8D FF 04                  	STA StopwatchTimer
0E21C 8D F6 06                  	STA PlayerCurrentSize
0E21F 60                        	RTS
0E220                           
0E220                           
0E220                           PlayerSelectArrowTop:
0E220 C9                        	.db $C9
0E221 D5                        	.db $D5
0E222 D1                        	.db $D1
0E223 CD                        	.db $CD
0E224                           PlayerSelectArrowBottom:
0E224 E9                        	.db $E9
0E225 F5                        	.db $F5
0E226 F1                        	.db $F1
0E227 ED                        	.db $ED
0E228                           
0E228                           
0E228                           ;
0E228                           ; Displays the level title card and prepares the level to start by loading
0E228                           ; the world tiles, PRG banks A/B, and copying character data
0E228                           ;
0E228                           DisplayLevelTitleCardAndMore:
0E228 20 00 00                  	JSR WaitForNMI_TurnOffPPU
0E22B                           
0E22B 20 00 00                  	JSR DisableNMI
0E22E                           
0E22E                           	; Set the scrolling mirror over to the right side...
0E22E                           	; This Isn't quiiite correct, and causes a bunch of
0E22E                           	; crud to show on the very left pixel -- residue
0E22E                           	; from the character select screen
0E22E A9 FF                     	LDA #$FF
0E230 85 FD                     	STA PPUScrollXMirror
0E232 20 00 00                  	JSR ChangeTitleCardCHR
0E235                           
0E235 A9 05                     	LDA #PRGBank_A_B
0E237 20 00 00                  	JSR ChangeMappedPRGBank
0E23A                           
0E23A 20 51 84                  	JSR CopyCharacterStatsAndStuff
0E23D                           
0E23D 20 00 00                  	JSR EnableNMI
0E240                           
0E240 20 00 00                  	JSR HideAllSprites
0E243                           
0E243 A0 23                     	LDY #$23
0E245                           DisplayLevelTitleCardAndMore_TitleCardPaletteLoop:
0E245 B9 F1 E0                  	LDA TitleCardPalettes, Y
0E248 99 5F 05                  	STA PPUBuffer_TitleCardPalette, Y
0E24B 88                        	DEY
0E24C 10 F7                     	BPL DisplayLevelTitleCardAndMore_TitleCardPaletteLoop
0E24E                           
0E24E A9 02                     	LDA #ScreenUpdateBuffer_RAM_TitleCardPalette ; Then tell it to dump that into the PPU
0E250 85 11                     	STA ScreenUpdateIndex
0E252 20 00 00                  	JSR WaitForNMI
0E255                           
0E255 A9 15                     	LDA #ScreenUpdateBuffer_TitleCardLeftover
0E257 85 11                     	STA ScreenUpdateIndex
0E259 20 00 00                  	JSR WaitForNMI
0E25C                           
0E25C 20 27 83                  	JSR DrawTitleCardWorldImage
0E25F                           
0E25F 20 00 00                  	JSR WaitForNMI_TurnOnPPU
0E262                           
0E262 20 00 00                  	JSR RestorePlayerToFullHealth
0E265                           
0E265                           	; Pause for the title card
0E265 A9 50                     	LDA #$50
0E267 85 02                     	STA byte_RAM_2
0E269                           PreLevelTitleCard_PauseLoop:
0E269 20 00 00                  	JSR WaitForNMI
0E26C C6 02                     	DEC byte_RAM_2
0E26E 10 F9                     	BPL PreLevelTitleCard_PauseLoop
0E270                           
0E270                           PreStartLevel:
0E270 20 F4 E1                  	JSR SetStack100Gameplay
0E273                           
0E273 20 00 00                  	JSR WaitForNMI_TurnOffPPU
0E276                           
0E276 20 00 00                  	JSR DisableNMI
0E279                           
0E279 20 00 00                  	JSR LoadWorldCHRBanks
0E27C                           
0E27C A9 05                     	LDA #PRGBank_A_B
0E27E 20 00 00                  	JSR ChangeMappedPRGBank
0E281                           
0E281 20 51 84                  	JSR CopyCharacterStatsAndStuff
0E284                           
0E284 20 00 00                  	JSR EnableNMI
0E287                           
0E287 60                        	RTS
0E288                           
0E288                           
0E288                           ;
0E288                           ; Runs the Character Select menu
0E288                           ;
0E288                           DoCharacterSelectMenu:
0E288 20 00 00                  	JSR WaitForNMI
0E28B                           
0E28B A9 00                     	LDA #$00
0E28D 8D 01 20                  	STA PPUMASK
0E290 20 00 00                  	JSR DisableNMI
0E293                           
0E293 20 00 00                  	JSR LoadCharacterSelectCHRBanks
0E296                           
0E296 A9 05                     	LDA #PRGBank_A_B
0E298 20 00 00                  	JSR ChangeMappedPRGBank
0E29B                           
0E29B 20 51 84                  	JSR CopyCharacterStatsAndStuff
0E29E                           
0E29E 20 66 E1                  	JSR ResetScreenForTitleCard
0E2A1                           
0E2A1 AD 36 06                  	LDA CharacterSelectBankSwitch
0E2A4 C9 A5                     	CMP #$A5
0E2A6 F0 00                     	BEQ loc_BANKF_E2B2
0E2A8                           
0E2A8 A9 05                     	LDA #PRGBank_A_B
0E2AA 20 00 00                  	JSR ChangeMappedPRGBank
0E2AD                           
0E2AD A9 A5                     	LDA #$A5
0E2AF 8D 36 06                  	STA CharacterSelectBankSwitch
0E2B2                           
0E2B2                           loc_BANKF_E2B2:
0E2B2 20 7F E1                  	JSR EnableNMI_PauseTitleCard
0E2B5                           
0E2B5 20 00 00                  	JSR DisableNMI
0E2B8                           
0E2B8 A9 02                     	LDA #Music1_CharacterSelect
0E2BA 8D 00 06                  	STA MusicQueue1
0E2BD A5 8F                     	LDA CurrentCharacter
0E2BF 8D 04 04                  	STA PreviousCharacter
0E2C2 AD 35 06                  	LDA CurrentWorld
0E2C5 8D 05 04                  	STA PreviousWorld
0E2C8                           
0E2C8 A0 3F                     	LDY #$3F
0E2CA                           loc_BANKF_E2CA:
0E2CA B9 1A E0                  	LDA PlayerSelectMarioSprites1, Y
0E2CD 99 10 02                  	STA SpriteDMAArea + $10, Y
0E2D0 88                        	DEY
0E2D1 10 F7                     	BPL loc_BANKF_E2CA
0E2D3                           
0E2D3 20 00 00                  	JSR EnableNMI
0E2D6                           
0E2D6 20 00 00                  	JSR WaitForNMI
0E2D9                           
0E2D9 AE 35 06                  	LDX CurrentWorld
0E2DC AC 31 05                  	LDY CurrentLevel
0E2DF 20 98 E1                  	JSR DisplayLevelTitleCardText
0E2E2                           
0E2E2 20 00 00                  	JSR WaitForNMI
0E2E5                           
0E2E5 4C 00 00                  	JMP loc_BANKF_E311
0E2E8                           
0E2E8                           ; ---------------------------------------------------------------------------
0E2E8                           
0E2E8                           loc_BANKF_E2E8:
0E2E8 A5 F5                     	LDA Player1JoypadPress
0E2EA 29 03                     	AND #ControllerInput_Right | ControllerInput_Left
0E2EC D0 00                     	BNE CharacterSelect_ChangeCharacter
0E2EE                           
0E2EE 4C 00 00                  	JMP CharacterSelectMenuLoop
0E2F1                           
0E2F1                           ; ---------------------------------------------------------------------------
0E2F1                           
0E2F1                           CharacterSelect_ChangeCharacter:
0E2F1 A5 F5                     	LDA Player1JoypadPress
0E2F3 29 01                     	AND #ControllerInput_Right
0E2F5 F0 00                     	BEQ loc_BANKF_E2FE
0E2F7                           
0E2F7 C6 8F                     	DEC CurrentCharacter
0E2F9 A9 04                     	LDA #SoundEffect1_CherryGet
0E2FB 8D 02 06                  	STA SoundEffectQueue1
0E2FE                           
0E2FE                           loc_BANKF_E2FE:
0E2FE A5 F5                     	LDA Player1JoypadPress
0E300 29 02                     	AND #ControllerInput_Left
0E302 F0 00                     	BEQ loc_BANKF_E30B
0E304                           
0E304 E6 8F                     	INC CurrentCharacter
0E306 A9 04                     	LDA #SoundEffect1_CherryGet
0E308 8D 02 06                  	STA SoundEffectQueue1
0E30B                           
0E30B                           loc_BANKF_E30B:
0E30B A5 8F                     	LDA CurrentCharacter
0E30D 29 03                     	AND #$03
0E30F 85 8F                     	STA CurrentCharacter
0E311                           
0E311                           loc_BANKF_E311:
0E311 A0 00                     	LDY #$00
0E313 A9 21                     	LDA #$21
0E315 8D 01 03                  	STA PPUBuffer_301
0E318 A9 C9                     	LDA #$C9
0E31A 8D 02 03                  	STA PPUBuffer_301 + 1
0E31D A9 4F                     	LDA #$4F
0E31F 8D 03 03                  	STA PPUBuffer_301 + 2
0E322 A9 FB                     	LDA #$FB
0E324 8D 04 03                  	STA PPUBuffer_301 + 3
0E327 A9 21                     	LDA #$21
0E329 8D 05 03                  	STA PPUBuffer_301 + 4
0E32C A9 E9                     	LDA #$E9
0E32E 8D 06 03                  	STA PPUBuffer_301 + 5
0E331 A9 4F                     	LDA #$4F
0E333 8D 07 03                  	STA PPUBuffer_301 + 6
0E336 A9 FB                     	LDA #$FB
0E338 8D 08 03                  	STA PPUBuffer_301 + 7
0E33B A4 8F                     	LDY CurrentCharacter
0E33D A9 21                     	LDA #$21
0E33F 8D 09 03                  	STA PPUBuffer_301 + 8
0E342 B9 20 E2                  	LDA PlayerSelectArrowTop, Y
0E345 8D 0A 03                  	STA PPUBuffer_301 + 9
0E348 A9 02                     	LDA #$02
0E34A 8D 0B 03                  	STA PPUBuffer_301 + 10
0E34D A9 BE                     	LDA #$BE
0E34F 8D 0C 03                  	STA PPUBuffer_301 + 11
0E352 A9 C0                     	LDA #$C0
0E354 8D 0D 03                  	STA PPUBuffer_301 + 12
0E357 A9 21                     	LDA #$21
0E359 8D 0E 03                  	STA PPUBuffer_301 + 13
0E35C B9 24 E2                  	LDA PlayerSelectArrowBottom, Y
0E35F 8D 0F 03                  	STA PPUBuffer_301 + 14
0E362 A9 02                     	LDA #$02
0E364 8D 10 03                  	STA PPUBuffer_301 + 15
0E367 A9 BF                     	LDA #$BF
0E369 8D 11 03                  	STA PPUBuffer_301 + 16
0E36C A9 C1                     	LDA #$C1
0E36E 8D 12 03                  	STA PPUBuffer_301 + 17
0E371 A9 00                     	LDA #$00
0E373 8D 13 03                  	STA PPUBuffer_301 + 18
0E376 20 00 00                  	JSR WaitForNMI_TurnOnPPU
0E379                           
0E379 A2 12                     	LDX #$12
0E37B A0 00                     	LDY #$00
0E37D                           
0E37D                           loc_BANKF_E37D:
0E37D B9 BE E0                  	LDA PlayerSelectSpritePalettesDark, Y
0E380 99 01 03                  	STA PPUBuffer_301, Y
0E383 C8                        	INY
0E384 CA                        	DEX
0E385 10 F6                     	BPL loc_BANKF_E37D
0E387                           
0E387 A9 06                     	LDA #$06
0E389 85 0A                     	STA byte_RAM_A
0E38B A6 8F                     	LDX CurrentCharacter
0E38D BD D1 E0                  	LDA PlayerSelectPaletteOffsets, X
0E390 AA                        	TAX
0E391                           
0E391                           loc_BANKF_E391:
0E391 BD D5 E0                  	LDA PlayerSelectSpritePalettes, X
0E394 99 01 03                  	STA PPUBuffer_301, Y
0E397 C8                        	INY
0E398 E8                        	INX
0E399 C6 0A                     	DEC byte_RAM_A
0E39B 10 F4                     	BPL loc_BANKF_E391
0E39D                           
0E39D A9 00                     	LDA #$00
0E39F 99 01 03                  	STA PPUBuffer_301, Y
0E3A2                           
0E3A2                           CharacterSelectMenuLoop:
0E3A2 20 00 00                  	JSR WaitForNMI_TurnOnPPU
0E3A5                           
0E3A5 A5 F5                     	LDA Player1JoypadPress
0E3A7 29 80                     	AND #ControllerInput_A
0E3A9 D0 00                     	BNE loc_BANKF_E3AE
0E3AB                           
0E3AB 4C E8 E2                  	JMP loc_BANKF_E2E8
0E3AE                           
0E3AE                           ; ---------------------------------------------------------------------------
0E3AE                           
0E3AE                           loc_BANKF_E3AE:
0E3AE A9 04                     	LDA #SoundEffect1_CherryGet
0E3B0 8D 02 06                  	STA SoundEffectQueue1
0E3B3 AE 35 06                  	LDX CurrentWorld
0E3B6 AC 31 05                  	LDY CurrentLevel
0E3B9 20 98 E1                  	JSR DisplayLevelTitleCardText
0E3BC                           
0E3BC A9 40                     	LDA #$40
0E3BE 85 10                     	STA byte_RAM_10
0E3C0 20 00 00                  	JSR WaitForNMI
0E3C3                           
0E3C3 A2 0F                     	LDX #$F
0E3C5 A5 8F                     	LDA CurrentCharacter
0E3C7 A8                        	TAY
0E3C8 B9 9A E0                  	LDA PlayerSelectSpriteIndexes, Y
0E3CB A8                        	TAY
0E3CC                           
0E3CC                           loc_BANKF_E3CC:
0E3CC B9 5A E0                  	LDA PlayerSelectMarioSprites2, Y
0E3CF 99 10 02                  	STA SpriteDMAArea + $10, Y
0E3D2 C8                        	INY
0E3D3 CA                        	DEX
0E3D4 10 F6                     	BPL loc_BANKF_E3CC
0E3D6                           
0E3D6                           loc_BANKF_E3D6:
0E3D6 20 00 00                  	JSR WaitForNMI
0E3D9                           
0E3D9 C6 10                     	DEC byte_RAM_10
0E3DB 10 F9                     	BPL loc_BANKF_E3D6
0E3DD                           
0E3DD A0 3F                     	LDY #$3F
0E3DF                           
0E3DF                           loc_BANKF_E3DF:
0E3DF B9 1A E0                  	LDA PlayerSelectMarioSprites1, Y
0E3E2 99 10 02                  	STA SpriteDMAArea + $10, Y
0E3E5 88                        	DEY
0E3E6 10 F7                     	BPL loc_BANKF_E3DF
0E3E8                           
0E3E8 A9 40                     	LDA #$40
0E3EA 85 10                     	STA byte_RAM_10
0E3EC                           
0E3EC                           loc_BANKF_E3EC:
0E3EC 20 00 00                  	JSR WaitForNMI
0E3EF                           
0E3EF C6 10                     	DEC byte_RAM_10
0E3F1 10 F9                     	BPL loc_BANKF_E3EC
0E3F3                           
0E3F3 A9 80                     	LDA #Music2_StopMusic
0E3F5 8D 03 06                  	STA MusicQueue2
0E3F8 60                        	RTS
0E3F9                           
0E3F9                           
0E3F9                           ;
0E3F9                           ; This starts the game once `RESET` has done its thing.
0E3F9                           ; We also come here after choosing "RETRY" from the game over menu.
0E3F9                           ;
0E3F9                           StartGame:
0E3F9 A9 00                     	LDA #$00
0E3FB 8D 01 20                  	STA PPUMASK
0E3FE 20 00 00                  	JSR DisableNMI
0E401                           
0E401 A9 00                     	LDA #PRGBank_0_1
0E403 8D F3 06                  	STA GameMilestoneCounter
0E406 20 00 00                  	JSR ChangeMappedPRGBank
0E409                           
0E409 20 3D 9A                  	JSR TitleScreen ; The whole title screen is a subroutine, lol
0E40C                           
0E40C EE F3 06                  	INC GameMilestoneCounter
0E40F                           SetNumContinues:
0E40F A9 02                     	LDA #$02 ; Number of continues on start
0E411 8D C5 05                  	STA Continues
0E414                           
0E414                           ; We return here after picking "CONTINUE" from the game over menu.
0E414                           ContinueGame:
0E414 A9 03                     	LDA #$03 ; Number of lives to start
0E416 8D ED 04                  	STA ExtraLives
0E419                           
0E419                           GoToWorldStartingLevel:
0E419 AE 35 06                  	LDX CurrentWorld
0E41C BC 12 E0                  	LDY WorldStartingLevel, X
0E41F 8C 31 05                  	STY CurrentLevel
0E422 8C E7 04                  	STY CurrentLevel_Init
0E425                           
0E425                           LevelStartCharacterSelectMenu:
0E425 20 88 E2                  	JSR DoCharacterSelectMenu
0E428                           
0E428 20 FA E1                  	JSR InitializeSomeLevelStuff
0E42B                           
0E42B 20 28 E2                  	JSR DisplayLevelTitleCardAndMore
0E42E                           
0E42E A9 FF                     	LDA #$FF
0E430 8D 45 05                  	STA CurrentMusicIndex
0E433 D0 00                     	BNE StartLevel ; Branch always
0E435                           
0E435                           CharacterSelectMenu:
0E435 20 88 E2                  	JSR DoCharacterSelectMenu
0E438                           
0E438                           StartLevelAfterTitleCard:
0E438 20 28 E2                  	JSR DisplayLevelTitleCardAndMore
0E43B                           
0E43B                           StartLevel:
0E43B 20 00 00                  	JSR WaitForNMI_TurnOffPPU
0E43E                           
0E43E A9 B0                     	LDA #$B0
0E440 05 C9                     	ORA PPUScrollXHiMirror
0E442 A4 EC                     	LDY IsHorizontalLevel
0E444 D0 00                     	BNE StartLevel_SetPPUCtrlMirror
0E446                           
0E446 29 FE                     	AND #$FE
0E448 05 C8                     	ORA PPUScrollYHiMirror
0E44A                           
0E44A                           StartLevel_SetPPUCtrlMirror:
0E44A 85 FF                     	STA PPUCtrlMirror
0E44C 8D 00 20                  	STA PPUCTRL
0E44F A9 80                     	LDA #Stack100_Transition
0E451 8D 00 01                  	STA StackArea
0E454 A9 04                     	LDA #PRGBank_8_9
0E456 20 00 00                  	JSR ChangeMappedPRGBank
0E459                           
0E459 20 00 00                  	JSR CopyLevelDataToMemory
0E45C                           
0E45C A9 03                     	LDA #PRGBank_6_7
0E45E 20 00 00                  	JSR ChangeMappedPRGBank
0E461                           
0E461 20 67 95                  	JSR LoadCurrentArea
0E464                           
0E464 20 A4 93                  	JSR LoadCurrentPalette
0E467                           
0E467                           IFDEF AREA_HEADER_TILESET
0E467                           	JSR LoadWorldCHRBanks
0E467                           ENDIF
0E467                           
0E467 20 00 00                  	JSR HideAllSprites
0E46A                           
0E46A 20 00 00                  	JSR WaitForNMI
0E46D                           
0E46D 20 F4 E1                  	JSR SetStack100Gameplay
0E470                           
0E470 A9 B0                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIEnabled
0E472 85 FF                     	STA PPUCtrlMirror
0E474                           
0E474 A5 EC                     	LDA IsHorizontalLevel
0E476 F0 00                     	BEQ VerticalLevel_Loop
0E478                           
0E478                           HorizontalLevel_Loop:
0E478 20 00 00                  	JSR WaitForNMI
0E47B                           
0E47B A9 00                     	LDA #PRGBank_0_1
0E47D 20 00 00                  	JSR ChangeMappedPRGBank
0E480                           
0E480 20 00 85                  	JSR InitializeAreaHorizontal
0E483                           
0E483 20 00 00                  	JSR EnsureCorrectMusic
0E486                           
0E486 A5 13                     	LDA BreakStartLevelLoop
0E488 F0 EE                     	BEQ HorizontalLevel_Loop
0E48A                           
0E48A A9 00                     	LDA #$00
0E48C 85 13                     	STA BreakStartLevelLoop
0E48E 20 00 00                  	JSR WaitForNMI_TurnOnPPU
0E491                           
0E491                           HorizontalLevel_CheckScroll:
0E491 20 00 00                  	JSR WaitForNMI
0E494                           
0E494                           	; Disable pause detection while scrolling
0E494 A5 D8                     	LDA NeedsScroll
0E496 29 04                     	AND #%00000100
0E498 D0 00                     	BNE HorizontalLevel_CheckSubArea
0E49A                           
0E49A A5 F7                     	LDA Player1JoypadHeld
0E49C C9 18                     	CMP #ControllerInput_Start | ControllerInput_Up ; Changed to avoid collision with swap
0E49E D0 00                     	BNE HorizontalLevel_CheckSubArea
0E4A0                           
0E4A0 4C 00 00                  	JMP ShowPauseScreen
0E4A3                           
0E4A3                           HorizontalLevel_CheckSubArea:
0E4A3 AD 28 06                  	LDA InSubspaceOrJar
0E4A6 F0 00                     	BEQ HorizontalLevel_ProcessFrame
0E4A8                           
0E4A8 4C 00 00                  	JMP InitializeSubArea
0E4AB                           
0E4AB                           HorizontalLevel_ProcessFrame:
0E4AB 20 00 00                  	JSR HideAllSprites
0E4AE                           
0E4AE 20 00 00                  	JSR RunFrame_Horizontal
0E4B1                           
0E4B1 AC EC 04                  	LDY GameMode
0E4B4 F0 00                     	BEQ HorizontalLevel_CheckTransition
0E4B6                           
0E4B6 4C 00 00                  	JMP ResetAreaAndProcessGameMode
0E4B9                           
0E4B9                           HorizontalLevel_CheckTransition:
0E4B9 AD 27 06                  	LDA DoAreaTransition
0E4BC F0 D3                     	BEQ HorizontalLevel_CheckScroll
0E4BE                           
0E4BE 20 00 00                  	JSR FollowCurrentAreaPointer
0E4C1                           
0E4C1 20 00 00                  	JSR RememberAreaInitialState
0E4C4                           
0E4C4 A9 00                     	LDA #$00
0E4C6 8D 27 06                  	STA DoAreaTransition
0E4C9 4C 3B E4                  	JMP StartLevel
0E4CC                           
0E4CC                           
0E4CC                           VerticalLevel_Loop:
0E4CC 20 00 00                  	JSR WaitForNMI
0E4CF                           
0E4CF A9 00                     	LDA #PRGBank_0_1
0E4D1 20 00 00                  	JSR ChangeMappedPRGBank
0E4D4                           
0E4D4 20 00 80                  	JSR InitializeAreaVertical
0E4D7                           
0E4D7 20 00 00                  	JSR EnsureCorrectMusic
0E4DA                           
0E4DA A5 13                     	LDA BreakStartLevelLoop
0E4DC F0 EE                     	BEQ VerticalLevel_Loop
0E4DE                           
0E4DE A9 00                     	LDA #$00
0E4E0 85 13                     	STA BreakStartLevelLoop
0E4E2 20 00 00                  	JSR WaitForNMI_TurnOnPPU
0E4E5                           
0E4E5                           VerticalLevel_CheckScroll:
0E4E5 20 00 00                  	JSR WaitForNMI
0E4E8                           
0E4E8                           	; Disable pause detection while scrolling
0E4E8                           	; This is likely a work-around to avoid getting the PPU into a weird state
0E4E8                           	; due to conflicts between the pause screen and attempting to draw the part
0E4E8                           	; of the area scrolling into view.
0E4E8 A5 D8                     	LDA NeedsScroll
0E4EA 29 04                     	AND #%00000100
0E4EC D0 00                     	BNE VerticalLevel_ProcessFrame
0E4EE                           
0E4EE A5 F7                     	LDA Player1JoypadHeld
0E4F0 C9 18                     	CMP #ControllerInput_Start | #ControllerInput_Up ; Changed to avoid colission with new swap method
0E4F2 F0 00                     	BEQ ShowPauseScreen
0E4F4                           
0E4F4                           VerticalLevel_ProcessFrame:
0E4F4 20 00 00                  	JSR HideAllSprites
0E4F7                           
0E4F7 20 00 00                  	JSR RunFrame_Vertical
0E4FA                           
0E4FA AC EC 04                  	LDY GameMode
0E4FD F0 00                     	BEQ VerticalLevel_CheckTransition
0E4FF                           
0E4FF 4C 00 00                  	JMP ResetAreaAndProcessGameMode
0E502                           
0E502                           VerticalLevel_CheckTransition:
0E502 AD 27 06                  	LDA DoAreaTransition
0E505 F0 DE                     	BEQ VerticalLevel_CheckScroll
0E507                           
0E507 20 00 00                  	JSR FollowCurrentAreaPointer
0E50A                           
0E50A 20 00 00                  	JSR RememberAreaInitialState
0E50D                           
0E50D A9 00                     	LDA #$00
0E50F 8D 27 06                  	STA DoAreaTransition
0E512 4C 3B E4                  	JMP StartLevel
0E515                           
0E515                           
0E515                           ;
0E515                           ; Pauses the game
0E515                           ;
0E515                           ShowPauseScreen:
0E515                           IFNDEF RESPAWN_INSTEAD_OF_DEATH
0E515 20 00 00                  	JSR PauseScreen_ExtraLife
0E518                           ELSE
0E518                           	JMP PauseRespawn
0E518                           ENDIF
0E518                           
0E518                           SetStack100Pause:
0E518                           	; used when running sound queues
0E518 A9 41                     	LDA #Stack100_Pause
0E51A 8D 00 01                  	STA StackArea
0E51D                           
0E51D                           PauseScreenLoop:
0E51D A9 0E                     	LDA #$0E
0E51F 85 06                     	STA byte_RAM_6
0E521                           
0E521                           DoSuicideCheatCheck:
0E521 20 00 00                  	JSR WaitForNMI_TurnOnPPU
0E524                           
0E524 A5 50                     	LDA PlayerState ; Check if the player is already dying
0E526 C9 07                     	CMP #PlayerState_Dying
0E528 F0 00                     	BEQ PauseScreenExitCheck ; If so, skip the suicide code check
0E52A                           
0E52A A5 F8                     	LDA Player2JoypadHeld ; Check for suicide code
0E52C C9 C8                     	CMP #ControllerInput_Up | ControllerInput_B | ControllerInput_A ; Up + A + B
0E52E D0 00                     	BNE PauseScreenExitCheck ; Not being held! Nothing to see here
0E530                           
0E530 20 00 00                  	JSR KillPlayer ; KILL THYSELF
0E533                           
0E533                           PauseScreenExitCheck:
0E533 A5 F5                     	LDA Player1JoypadPress
0E535 29 10                     	AND #ControllerInput_Start
0E537 D0 00                     	BNE HidePauseScreen
0E539                           
0E539 C6 06                     	DEC byte_RAM_6
0E53B 10 E4                     	BPL DoSuicideCheatCheck
0E53D                           
0E53D E6 07                     	INC byte_RAM_7
0E53F A5 07                     	LDA byte_RAM_7
0E541 29 01                     	AND #$01
0E543 18                        	CLC
0E544 69 0D                     	ADC #$0D ; Will use either $0D or $0E from the update index pointers
0E546 85 11                     	STA ScreenUpdateIndex ; @TODO I assume this is what blinks "PAUSE"
0E548 4C 1D E5                  	JMP PauseScreenLoop
0E54B                           
0E54B                           ;
0E54B                           ; Unpauses the game
0E54B                           ;
0E54B                           HidePauseScreen:
0E54B 20 00 00                  	JSR WaitForNMI_TurnOffPPU
0E54E                           
0E54E                           IFDEF RESET_CHR_LATCH
0E54E                           	LDA #$00
0E54E                           	STA ResetCHRLatch
0E54E                           ENDIF
0E54E                           
0E54E 20 00 00                  	JSR LoadWorldCHRBanks
0E551                           
0E551 A9 03                     	LDA #PRGBank_6_7
0E553 20 00 00                  	JSR ChangeMappedPRGBank
0E556                           
0E556 20 A4 93                  	JSR LoadCurrentPalette
0E559                           
0E559 20 00 00                  	JSR WaitForNMI
0E55C                           
0E55C 20 F4 E1                  	JSR SetStack100Gameplay
0E55F                           
0E55F 20 00 00                  	JSR HideAllSprites
0E562                           
0E562 A9 00                     	LDA #PRGBank_0_1
0E564 20 00 00                  	JSR ChangeMappedPRGBank
0E567                           
0E567 20 D6 81                  	JSR RestoreScreenScrollPosition
0E56A                           
0E56A A5 EC                     	LDA IsHorizontalLevel
0E56C D0 00                     	BNE HidePauseScreen_Horizontal
0E56E                           
0E56E                           HidePauseScreen_Vertical:
0E56E A9 01                     	LDA #HMirror
0E570 20 00 00                  	JSR ChangeNametableMirroring
0E573                           
0E573 20 FE 81                  	JSR sub_BANK0_81FE
0E576                           
0E576                           HidePauseScreen_Vertical_Loop:
0E576 20 00 00                  	JSR WaitForNMI
0E579                           
0E579 20 3D 82                  	JSR sub_BANK0_823D
0E57C                           
0E57C AD 37 05                  	LDA byte_RAM_537
0E57F F0 F5                     	BEQ HidePauseScreen_Vertical_Loop
0E581                           
0E581 20 00 00                  	JSR WaitForNMI_TurnOnPPU
0E584                           
0E584 4C E5 E4                  	JMP VerticalLevel_CheckScroll
0E587                           
0E587                           HidePauseScreen_Horizontal:
0E587 A9 00                     	LDA #VMirror
0E589 20 00 00                  	JSR ChangeNametableMirroring
0E58C                           
0E58C 20 85 87                  	JSR sub_BANK0_8785
0E58F                           
0E58F                           HidePauseScreen_Horizontal_Loop:
0E58F 20 00 00                  	JSR WaitForNMI
0E592                           
0E592 20 AA 87                  	JSR sub_BANK0_87AA
0E595                           
0E595 AD 37 05                  	LDA byte_RAM_537
0E598 F0 F5                     	BEQ HidePauseScreen_Horizontal_Loop
0E59A                           
0E59A 20 00 00                  	JSR WaitForNMI_TurnOnPPU
0E59D                           
0E59D 4C 91 E4                  	JMP HorizontalLevel_CheckScroll
0E5A0                           
0E5A0                           
0E5A0                           InitializeSubArea:
0E5A0 20 00 00                  	JSR ClearNametablesAndSprites
0E5A3                           
0E5A3 A9 03                     	LDA #PRGBank_6_7
0E5A5 20 00 00                  	JSR ChangeMappedPRGBank
0E5A8                           
0E5A8 A9 00                     	LDA #$00
0E5AA 8D 22 06                  	STA SubspaceCoins
0E5AD AD 28 06                  	LDA InSubspaceOrJar
0E5B0 C9 02                     	CMP #$02
0E5B2 F0 00                     	BEQ InitializeSubspace
0E5B4                           
0E5B4                           InitializeJar:
0E5B4 A9 04                     	LDA #PRGBank_8_9
0E5B6 20 00 00                  	JSR ChangeMappedPRGBank
0E5B9                           
0E5B9 20 00 00                  	JSR CopyJarDataToMemory
0E5BC                           
0E5BC 20 00 00                  	JSR CopyEnemyDataToMemory
0E5BF                           
0E5BF A9 03                     	LDA #PRGBank_6_7
0E5C1 20 00 00                  	JSR ChangeMappedPRGBank
0E5C4                           
0E5C4 20 AD 94                  	JSR ClearSubAreaTileLayout
0E5C7                           
0E5C7 A9 04                     	LDA #Music1_Inside
0E5C9 8D 00 06                  	STA MusicQueue1
0E5CC A9 01                     	LDA #$01
0E5CE 8D 45 05                  	STA CurrentMusicIndex
0E5D1 4C 00 00                  	JMP loc_BANKF_E5E1
0E5D4                           
0E5D4                           
0E5D4                           InitializeSubspace:
0E5D4 20 1D 94                  	JSR GenerateSubspaceArea
0E5D7                           
0E5D7 A9 20                     	LDA #Music1_Subspace
0E5D9 8D 00 06                  	STA MusicQueue1
0E5DC A9 04                     	LDA #$04
0E5DE 8D 45 05                  	STA CurrentMusicIndex
0E5E1                           
0E5E1                           loc_BANKF_E5E1:
0E5E1 A9 00                     	LDA #PRGBank_0_1
0E5E3 20 00 00                  	JSR ChangeMappedPRGBank
0E5E6                           
0E5E6 20 0C 87                  	JSR UseSubareaScreenBoundaries
0E5E9                           
0E5E9 20 00 00                  	JSR EnableNMI
0E5EC                           
0E5EC                           SubArea_Loop:
0E5EC 20 00 00                  	JSR WaitForNMI
0E5EF                           
0E5EF 20 AA 87                  	JSR sub_BANK0_87AA
0E5F2                           
0E5F2 AD 37 05                  	LDA byte_RAM_537
0E5F5 F0 F5                     	BEQ SubArea_Loop
0E5F7                           
0E5F7 AD 28 06                  	LDA InSubspaceOrJar
0E5FA C9 02                     	CMP #$02
0E5FC F0 00                     	BEQ loc_BANKF_E606
0E5FE                           
0E5FE A9 03                     	LDA #PRGBank_6_7
0E600 20 00 00                  	JSR ChangeMappedPRGBank
0E603                           
0E603 20 A4 93                  	JSR LoadCurrentPalette
0E606                           
0E606                           loc_BANKF_E606:
0E606 20 00 00                  	JSR WaitForNMI_TurnOnPPU
0E609                           
0E609                           ; subspace
0E609                           loc_BANKF_E609:
0E609 20 00 00                  	JSR WaitForNMI
0E60C                           
0E60C 20 00 00                  	JSR HideAllSprites
0E60F                           
0E60F 20 00 00                  	JSR sub_BANKF_F0F9
0E612                           
0E612 AC EC 04                  	LDY GameMode
0E615 F0 00                     	BEQ loc_BANKF_E61A
0E617                           
0E617 4C 00 00                  	JMP ResetAreaAndProcessGameMode
0E61A                           
0E61A                           ; ---------------------------------------------------------------------------
0E61A                           
0E61A                           loc_BANKF_E61A:
0E61A AD 28 06                  	LDA InSubspaceOrJar
0E61D D0 EA                     	BNE loc_BANKF_E609
0E61F                           
0E61F AD 22 06                  	LDA SubspaceCoins
0E622 F0 00                     	BEQ loc_BANKF_E627
0E624                           
0E624 EE 21 06                  	INC SubspaceVisits
0E627                           
0E627                           loc_BANKF_E627:
0E627 AD 19 05                  	LDA CurrentLevelAreaCopy
0E62A 8D 32 05                  	STA CurrentLevelArea
0E62D A9 03                     	LDA #PRGBank_6_7
0E62F 20 00 00                  	JSR ChangeMappedPRGBank
0E632                           
0E632 20 A4 93                  	JSR LoadCurrentPalette
0E635                           
0E635 20 00 00                  	JSR WaitForNMI_TurnOffPPU
0E638                           
0E638 20 00 00                  	JSR HideAllSprites
0E63B                           
0E63B AC 44 05                  	LDY CompareMusicIndex
0E63E 8C 45 05                  	STY CurrentMusicIndex
0E641 AD E0 04                  	LDA StarInvincibilityTimer
0E644 D0 00                     	BNE loc_BANKF_E64C
0E646                           
0E646 B9 00 00                  	LDA LevelMusicIndexes, Y
0E649 8D 00 06                  	STA MusicQueue1
0E64C                           
0E64C                           loc_BANKF_E64C:
0E64C A9 00                     	LDA #PRGBank_0_1
0E64E 20 00 00                  	JSR ChangeMappedPRGBank
0E651                           
0E651 20 4C 87                  	JSR UseMainAreaScreenBoundaries
0E654                           
0E654                           ExitSubArea_Loop:
0E654 20 00 00                  	JSR WaitForNMI
0E657                           
0E657 20 AA 87                  	JSR sub_BANK0_87AA
0E65A                           
0E65A AD 37 05                  	LDA byte_RAM_537
0E65D F0 F5                     	BEQ ExitSubArea_Loop
0E65F                           
0E65F 20 00 00                  	JSR WaitForNMI_TurnOnPPU
0E662                           
0E662 4C 91 E4                  	JMP HorizontalLevel_CheckScroll
0E665                           
0E665                           
0E665                           ;
0E665                           ; This code resets the level and does whatever else is needed to transition from
0E665                           ; the current `GameMode` to `GameMode_InGame`.
0E665                           ;
0E665                           ResetAreaAndProcessGameMode:
0E665 20 00 00                  	JSR DoAreaReset
0E668                           
0E668 AC EC 04                  	LDY GameMode
0E66B                           ShowCardAfterTransition:
0E66B A9 00                     	LDA #GameMode_InGame
0E66D 8D EC 04                  	STA GameMode
0E670 8D E0 04                  	STA StarInvincibilityTimer
0E673 8D 2C 06                  	STA BigVeggiesPulled
0E676 8D 2A 06                  	STA CherryCount
0E679 8D FF 04                  	STA StopwatchTimer
0E67C 88                        	DEY ; Initial `GameMode` minus 1
0E67D D0 00                     	BNE ResetAreaAndProcessGameMode_NotTitleCard
0E67F                           
0E67F                             ; `GameMode` was `$01`
0E67F                           	; Reset from a title card
0E67F 8C F6 06                  	STY PlayerCurrentSize
0E682 20 00 00                  	JSR LevelInitialization
0E685                           
0E685 A9 FF                     	LDA #$FF
0E687 8D 45 05                  	STA CurrentMusicIndex
0E68A                           	; Draw EXTRA LIFE text near top of card
0E68A A9 25                     	LDA #$25
0E68C 8D 80 71                  	STA TitleCard_ExtraLife_DrawAddress
0E68F A9 48                     	LDA #$48
0E691 8D 81 71                  	STA TitleCard_ExtraLife_DrawAddress + 1
0E694 A9 15                     	LDA #ScreenUpdateBuffer_TitleCardLeftover
0E696 8D BD 05                  	STA CardScreenUpdateIndex
0E699 20 00 00                  	JSR PauseScreen_Card
0E69C                           
0E69C                           AfterDeathJump:
0E69C                           IFNDEF CHARACTER_SELECT_AFTER_DEATH
0E69C 4C 38 E4                  	JMP StartLevelAfterTitleCard
0E69F                           ELSE
0E69F                           	JMP CharacterSelectMenu
0E69F                           ENDIF
0E69F                           
0E69F                           
0E69F                           ResetAreaAndProcessGameMode_NotTitleCard:
0E69F A9 1F                     	LDA #PlayerHealth_2_HP
0E6A1 8D C2 04                  	STA PlayerHealth
0E6A4 A9 00                     	LDA #$00
0E6A6 8D C3 04                  	STA PlayerMaxHealth
0E6A9 8D B0 04                  	STA KeyUsed
0E6AC 8D 20 06                  	STA Mushroom1upPulled
0E6AF 8D FB 04                  	STA Mushroom1Pulled
0E6B2 8D FC 04                  	STA Mushroom2Pulled
0E6B5 8D 21 06                  	STA SubspaceVisits
0E6B8 8D AD 04                  	STA EnemiesKilledForHeart
0E6BB 88                        	DEY ; Initial `GameMode` minus 2
0E6BC F0 00                     	BEQ DoGameOverStuff
0E6BE                           
0E6BE 4C 00 00                  	JMP ResetAreaAndProcessGameMode_NotGameOver
0E6C1                           
0E6C1                           
0E6C1                           DoGameOverStuff:
0E6C1 8C F6 06                  	STY PlayerCurrentSize
0E6C4 A9 10                     	LDA #Music2_GameOver
0E6C6 8D 03 06                  	STA MusicQueue2
0E6C9 20 00 00                  	JSR WaitForNMI_TurnOffPPU
0E6CC                           
0E6CC 20 00 00                  	JSR ChangeTitleCardCHR
0E6CF                           
0E6CF 20 00 00                  	JSR ClearNametablesAndSprites
0E6D2                           
0E6D2 20 3E E1                  	JSR SetBlackAndWhitePalette
0E6D5                           
0E6D5 20 5B E1                  	JSR SetScrollXYTo0
0E6D8                           
0E6D8 20 00 00                  	JSR EnableNMI
0E6DB                           
0E6DB 20 00 00                  	JSR WaitForNMI_TurnOnPPU
0E6DE                           
0E6DE A9 05                     	LDA #ScreenUpdateBuffer_Text_Game_Over
0E6E0 85 11                     	STA ScreenUpdateIndex
0E6E2 A9 C0                     	LDA #$C0
0E6E4 85 06                     	STA byte_RAM_6
0E6E6                           
0E6E6                           loc_BANKF_E6E6:
0E6E6 20 00 00                  	JSR WaitForNMI
0E6E9                           
0E6E9 C6 06                     	DEC byte_RAM_6
0E6EB D0 F9                     	BNE loc_BANKF_E6E6
0E6ED                           
0E6ED A0 00                     	LDY #(BonusChanceUpdateBuffer_BONUS_CHANCE_Unused - PPUBuffer_Text_Continue - 1)
0E6EF                           loc_BANKF_E6EF:
0E6EF B9 00 00                  	LDA PPUBuffer_Text_Continue, Y
0E6F2 99 7B 06                  	STA PPUBuffer_ContinueRetryText, Y
0E6F5 88                        	DEY
0E6F6 10 F7                     	BPL loc_BANKF_E6EF
0E6F8                           
0E6F8                           	; Hide the bullet for RETRY
0E6F8 A9 FB                     	LDA #$FB
0E6FA 8D 8F 06                  	STA PPUBuffer_ContinueRetryText + 20
0E6FD                           	; Update the number of continues
0E6FD AD C5 05                  	LDA Continues
0E700 18                        	CLC
0E701 69 D0                     	ADC #$D0
0E703 8D 7E 06                  	STA PPUBuffer_ContinueRetryText + 3
0E706 A9 00                     	LDA #$00
0E708 85 08                     	STA byte_RAM_8
0E70A A9 06                     	LDA #ScreenUpdateBuffer_RAM_ContinueRetryText
0E70C CE C5 05                  	DEC Continues
0E70F 10 00                     	BPL loc_BANKF_E717
0E711                           
0E711 A9 01                     	LDA #$01
0E713 85 08                     	STA byte_RAM_8
0E715 A9 07                     	LDA #ScreenUpdateBuffer_Text_Retry
0E717                           
0E717                           loc_BANKF_E717:
0E717 85 11                     	STA ScreenUpdateIndex
0E719                           
0E719                           loc_BANKF_E719:
0E719 20 00 00                  	JSR WaitForNMI
0E71C                           
0E71C A5 F5                     	LDA Player1JoypadPress
0E71E 29 20                     	AND #ControllerInput_Select
0E720 F0 00                     	BEQ loc_BANKF_E747
0E722                           
0E722 A5 08                     	LDA byte_RAM_8
0E724 49 01                     	EOR #$01
0E726 85 08                     	STA byte_RAM_8
0E728 AC C5 05                  	LDY Continues
0E72B C0 FF                     	CPY #$FF
0E72D D0 00                     	BNE loc_BANKF_E733
0E72F                           
0E72F A9 01                     	LDA #$01
0E731 85 08                     	STA byte_RAM_8
0E733                           
0E733                           loc_BANKF_E733:
0E733 0A                        	ASL A
0E734 0A                        	ASL A
0E735 A8                        	TAY
0E736 A9 FB                     	LDA #$FB
0E738 8D AB 71                  	STA PPUBuffer_ContinueRetryBullets + 3
0E73B 8D AF 71                  	STA PPUBuffer_ContinueRetryBullets + 7
0E73E A9 F6                     	LDA #$F6
0E740 99 AB 71                  	STA PPUBuffer_ContinueRetryBullets + 3, Y
0E743 A9 13                     	LDA #ScreenUpdateBuffer_RAM_ContinueRetryBullets
0E745 85 11                     	STA ScreenUpdateIndex
0E747                           
0E747                           loc_BANKF_E747:
0E747 A5 F5                     	LDA Player1JoypadPress
0E749 29 10                     	AND #ControllerInput_Start
0E74B F0 CC                     	BEQ loc_BANKF_E719
0E74D                           
0E74D A5 08                     	LDA byte_RAM_8
0E74F D0 00                     	BNE GameOver_Retry
0E751                           
0E751 8D 2B 06                  	STA SlotMachineCoins
0E754 4C 14 E4                  	JMP ContinueGame
0E757                           
0E757                           ; ---------------------------------------------------------------------------
0E757                           
0E757                           GameOver_Retry:
0E757 4C F9 E3                  	JMP StartGame
0E75A                           
0E75A                           
0E75A                           ResetAreaAndProcessGameMode_NotGameOver:
0E75A 88                        	DEY ; Initial `GameMode` minus 3
0E75B F0 00                     	BEQ EndOfLevel
0E75D                           
0E75D                           DoWorldWarp:
0E75D                           	; Show warp screen
0E75D AC 35 06                  	LDY CurrentWorld
0E760 8C 05 04                  	STY PreviousWorld
0E763 B9 00 00                  	LDA WarpDestinations, Y
0E766 8D 35 06                  	STA CurrentWorld
0E769 A8                        	TAY
0E76A A6 8F                     	LDX CurrentCharacter
0E76C B9 12 E0                  	LDA WorldStartingLevel, Y
0E76F 8D 31 05                  	STA CurrentLevel
0E772 8D E7 04                  	STA CurrentLevel_Init
0E775                           
0E775                           	; Set world number
0E775 C8                        	INY
0E776 98                        	TYA
0E777 09 D0                     	ORA #$D0
0E779 8D A6 71                  	STA WarpToWorld_World
0E77C                           
0E77C 20 00 00                  	JSR WaitForNMI_TurnOffPPU
0E77F                           
0E77F 20 5B E1                  	JSR SetScrollXYTo0
0E782 20 00 00                  	JSR ClearNametablesAndSprites
0E785 20 3E E1                  	JSR SetBlackAndWhitePalette
0E788                           
0E788 20 00 00                  	JSR EnableNMI
0E78B                           
0E78B 20 00 00                  	JSR ChangeTitleCardCHR
0E78E                           
0E78E A9 12                     	LDA #ScreenUpdateBuffer_WarpToWorld
0E790 85 11                     	STA ScreenUpdateIndex
0E792 A9 40                     	LDA #Music2_SlotWarpFanfare
0E794 8D 03 06                  	STA MusicQueue2
0E797 20 00 00                  	JSR Delay160Frames
0E79A                           
0E79A 20 FA E1                  	JSR InitializeSomeLevelStuff
0E79D                           
0E79D 4C 35 E4                  	JMP CharacterSelectMenu
0E7A0                           
0E7A0                           ; ---------------------------------------------------------------------------
0E7A0                           
0E7A0                           EndOfLevel:
0E7A0                           	; Stop the music
0E7A0 A9 80                     	LDA #Music2_StopMusic ; Stop music
0E7A2 8D 03 06                  	STA MusicQueue2
0E7A5                           
0E7A5                           	; Increase current characters "contribution" counter
0E7A5 A6 8F                     	LDX CurrentCharacter
0E7A7 FE 2D 06                  	INC CharacterLevelsCompleted, X
0E7AA                           
0E7AA                           	; Check if we've completed the final level
0E7AA AD 31 05                  	LDA CurrentLevel
0E7AD C9 13                     	CMP #$13
0E7AF                           EndOfLevelJump:
0E7AF                           	; If not, go to bonus chance and proceed to the next level
0E7AF D0 00                     	BNE EndOfRegularLevel
0E7B1                           EndOfLastLevel:
0E7B1                           	; Otherwise, display the ending
0E7B1 4C 00 00                  	JMP EndingSceneRoutine
0E7B4                           
0E7B4                           EndOfRegularLevel:
0E7B4                           	; This needs to be set at the end of regular levels to avoid a bug where
0E7B4                           	; completing the level small will cause the character-growing animation
0E7B4                           	; to happen at the beginning of the next level.
0E7B4 8C F6 06                  	STY PlayerCurrentSize
0E7B7                           
0E7B7                           EndOfLevelSlotMachine:
0E7B7                           IFDEF DISABLE_BONUS_CHANCE
0E7B7                           	JMP GoToNextLevel
0E7B7                           ELSE
0E7B7 20 00 00                  	JSR WaitForNMI_TurnOffPPU
0E7BA                           ENDIF
0E7BA                           
0E7BA 20 00 00                  	JSR ClearNametablesAndSprites
0E7BD                           
0E7BD                           IFDEF REV_A
0E7BD                           	JSR EnableNMI
0E7BD                           	JSR WaitForNMI
0E7BD                           ENDIF
0E7BD                           
0E7BD 20 00 00                  	JSR LoadBonusChanceCHRBanks
0E7C0                           
0E7C0                           IFNDEF BONUS_CHANCE_RAM_CLEANUP
0E7C0 20 00 00                  	JSR CopyUnusedCoinSpriteToSpriteArea
0E7C3                           ENDIF
0E7C3                           
0E7C3 A9 05                     	LDA #PRGBank_A_B
0E7C5 20 00 00                  	JSR ChangeMappedPRGBank
0E7C8                           
0E7C8 20 10 83                  	JSR CopyBonusChanceLayoutToRAM
0E7CB                           
0E7CB A9 17                     	LDA #ScreenUpdateBuffer_RAM_BonusChanceLayout
0E7CD 85 11                     	STA ScreenUpdateIndex
0E7CF A9 40                     	LDA #Stack100_Menu
0E7D1 8D 00 01                  	STA StackArea
0E7D4 20 00 00                  	JSR EnableNMI
0E7D7                           
0E7D7 20 00 00                  	JSR WaitForNMI
0E7DA                           
0E7DA A9 C0                     	LDA #Stack100_Gameplay
0E7DC 8D 00 01                  	STA StackArea
0E7DF 20 00 00                  	JSR DisableNMI
0E7E2                           
0E7E2 20 00 00                  	JSR sub_BANKF_EA33
0E7E5                           
0E7E5 A9 40                     	LDA #Music2_SlotWarpFanfare
0E7E7 8D 03 06                  	STA MusicQueue2
0E7EA AD 2B 06                  	LDA SlotMachineCoins
0E7ED D0 00                     	BNE loc_BANKF_E7F2
0E7EF                           
0E7EF 4C 00 00                  	JMP NoCoinsForSlotMachine
0E7F2                           
0E7F2                           ; ---------------------------------------------------------------------------
0E7F2                           
0E7F2                           loc_BANKF_E7F2:
0E7F2 A9 03                     	LDA #$03
0E7F4 85 2C                     	STA ObjectXLo + 3
0E7F6 85 2D                     	STA ObjectXLo + 4
0E7F8 85 2E                     	STA ObjectXLo + 5
0E7FA 20 00 00                  	JSR WaitForNMI_TurnOnPPU
0E7FD                           
0E7FD                           loc_BANKF_E7FD:
0E7FD AD 2B 06                  	LDA SlotMachineCoins
0E800 D0 00                     	BNE StartSlotMachine
0E802                           
0E802                           GoToNextLevel:
0E802                           	; Check if this is the last level before the next world
0E802 AC 35 06                  	LDY CurrentWorld
0E805 B9 13 E0                  	LDA WorldStartingLevel + 1, Y
0E808 38                        	SEC
0E809 E9 01                     	SBC #$01
0E80B CD 31 05                  	CMP CurrentLevel
0E80E D0 00                     	BNE GoToNextLevel_SameWorld
0E810                           
0E810 20 F4 E1                  	JSR SetStack100Gameplay
0E813                           
0E813 A9 FF                     	LDA #$FF
0E815 8D 45 05                  	STA CurrentMusicIndex
0E818 EE 35 06                  	INC CurrentWorld
0E81B 4C 19 E4                  	JMP GoToWorldStartingLevel
0E81E                           
0E81E                           GoToNextLevel_SameWorld:
0E81E 20 00 00                  	JSR FollowCurrentAreaPointer
0E821                           
0E821                           	; Sanity check that ensure that the world matches the level.
0E821                           	; Without this, an area pointer at the end of a level that points to a
0E821                           	; a different world would load incorrectly (eg. 2-1 would load as 1-4).
0E821                           	; This scenario may not actually occur during normal gameplay.
0E821 AD 31 05                  	LDA CurrentLevel
0E824 A0 00                     	LDY #$00
0E826                           EnsureCorrectWorld_Loop:
0E826 C8                        	INY
0E827 D9 12 E0                  	CMP WorldStartingLevel, Y
0E82A B0 FA                     	BCS EnsureCorrectWorld_Loop
0E82C                           
0E82C 88                        	DEY
0E82D 8C 35 06                  	STY CurrentWorld
0E830                           
0E830                           	; Initialize the current area and then go to the character select menu
0E830 AC 35 06                  	LDY CurrentWorld
0E833 AD 31 05                  	LDA CurrentLevel
0E836 38                        	SEC
0E837 F9 12 E0                  	SBC WorldStartingLevel, Y
0E83A 8D 29 06                  	STA CurrentLevelRelative
0E83D AD 31 05                  	LDA CurrentLevel
0E840 8D E7 04                  	STA CurrentLevel_Init
0E843 AD 32 05                  	LDA CurrentLevelArea
0E846 8D E8 04                  	STA CurrentLevelArea_Init
0E849 AD 33 05                  	LDA CurrentLevelEntryPage
0E84C 8D E9 04                  	STA CurrentLevelEntryPage_Init
0E84F A0 00                     	LDY #$00
0E851 8C E6 04                  	STY PlayerState_Init
0E854 8C 34 05                  	STY TransitionType
0E857 8C EA 04                  	STY TransitionType_Init
0E85A 88                        	DEY
0E85B 8C 45 05                  	STY CurrentMusicIndex
0E85E 20 F4 E1                  	JSR SetStack100Gameplay
0E861                           
0E861 4C 35 E4                  	JMP CharacterSelectMenu
0E864                           
0E864                           
0E864                           StartSlotMachine:
0E864 CE 2B 06                  	DEC SlotMachineCoins
0E867 20 00 00                  	JSR WaitForNMI
0E86A                           
0E86A 20 00 00                  	JSR sub_BANKF_EA68
0E86D                           
0E86D A9 01                     	LDA #$01 ; Set all reel timers
0E86F 85 29                     	STA ObjectXLo
0E871 85 2A                     	STA ObjectXLo + 1
0E873 85 2B                     	STA ObjectXLo + 2
0E875 4A                        	LSR A ; Set all reels to the first position
0E876 85 2F                     	STA ObjectXLo + 6
0E878 85 30                     	STA ObjectXLo + 7
0E87A 85 31                     	STA ObjectXLo + 8
0E87C                           
0E87C                           DoSlotMachineSpinnyShit:
0E87C 20 00 00                  	JSR WaitForNMI ; $2C-$2E: Reel change timer
0E87F                           	; $2F-$31: Current reel icon
0E87F                           
0E87F A9 02                     	LDA #SoundEffect2_Climbing ; Play "reel sound" sound effect
0E881 8D 04 06                  	STA SoundEffectQueue2
0E884 20 00 00                  	JSR sub_BANKF_EAC2
0E887                           
0E887 20 00 00                  	JSR sub_BANKF_EADC
0E88A                           
0E88A 20 00 00                  	JSR sub_BANKF_EAF6
0E88D                           
0E88D 20 00 00                  	JSR SlotMachineTextFlashIndex
0E890                           
0E890 B9 00 00                  	LDA BonusChanceUpdateBuffer_PUSH_A_BUTTON, Y
0E893 85 11                     	STA ScreenUpdateIndex
0E895 E6 06                     	INC byte_RAM_6
0E897 A5 29                     	LDA ObjectXLo ; Reel 1 still active?
0E899 05 2A                     	ORA ObjectXLo + 1 ; Reel 2 still active?
0E89B 05 2B                     	ORA ObjectXLo + 2 ; Reel 3 still active?
0E89D D0 DD                     	BNE DoSlotMachineSpinnyShit ; If any are still active, go back to waiting
0E89F                           
0E89F A9 10                     	LDA #ScreenUpdateBuffer_RAM_ErasePushAButtonText
0E8A1 85 11                     	STA ScreenUpdateIndex
0E8A3 20 00 00                  	JSR WaitForNMI
0E8A6                           
0E8A6 A0 00                     	LDY #$00
0E8A8 A6 2F                     	LDX ObjectXLo + 6 ; Load reel 1
0E8AA BD 3B 06                  	LDA SlotMachineReelOrder1RAM, X
0E8AD D0 00                     	BNE CheckReel2Symbol ; Is this reel a cherry?
0E8AF                           
0E8AF C8                        	INY ; Yes; add one life
0E8B0                           
0E8B0                           CheckReel2Symbol:
0E8B0 A6 30                     	LDX ObjectXLo + 7 ; Load reel 2
0E8B2 DD 43 06                  	CMP SlotMachineReelOrder2RAM, X
0E8B5 D0 00                     	BNE AddSlotMachineExtraLives ; Does this match the previous symbol?
0E8B7                           
0E8B7 C9 00                     	CMP #$00 ; Yes; are they both cherries?
0E8B9 D0 00                     	BNE CheckReel3Symbol ; If no, skip to third reel
0E8BB                           
0E8BB C8                        	INY ; They are both cherries, add another life or something
0E8BC                           
0E8BC                           CheckReel3Symbol:
0E8BC A6 31                     	LDX ObjectXLo + 8 ; Load reel 3
0E8BE DD 4B 06                  	CMP SlotMachineReelOrder3RAM, X ; Does reel 3 match the previous two?
0E8C1 D0 00                     	BNE AddSlotMachineExtraLives ; No, fuck you
0E8C3                           
0E8C3 C8                        	INY ; They all match! Yay! Add a life.
0E8C4                           ; Cherry count: 3 / Non-cherry: 1
0E8C4 C9 00                     	CMP #$00 ; Were they all cherries?
0E8C6 D0 00                     	BNE AddSlotMachineExtraLives ; Nope, all done
0E8C8                           
0E8C8 C8                        	INY ; Yes, add 2 more extra lives
0E8C9 C8                        	INY
0E8CA                           
0E8CA                           AddSlotMachineExtraLives:
0E8CA 98                        	TYA ; Y contains extra lives to add
0E8CB 18                        	CLC
0E8CC 6D ED 04                  	ADC ExtraLives ; Add won extra lives to current lives
0E8CF 90 00                     	BCC loc_BANKF_E8D3 ; Check if adding extra lives has wrapped the counter
0E8D1                           
0E8D1 A9 FF                     	LDA #$FF ; If so, set extra lives to 255 (#$FF)
0E8D3                           
0E8D3                           loc_BANKF_E8D3:
0E8D3 8D ED 04                  	STA ExtraLives
0E8D6 98                        	TYA ; Did we actually win any lives?
0E8D7 F0 00                     	BEQ SlotMachineLoseFanfare ; No, play lose sound effect
0E8D9                           
0E8D9 09 D0                     	ORA #$D0
0E8DB 8D C8 06                  	STA PPUBuffer_Player1UpText + 11 ; Update number of lives won
0E8DE A9 20                     	LDA #Music2_CrystalGetFanfare ; Play winner jingle
0E8E0 8D 03 06                  	STA MusicQueue2
0E8E3 A9 A0                     	LDA #$A0
0E8E5 85 06                     	STA byte_RAM_6
0E8E7 20 00 00                  	JSR WaitForNMI
0E8EA                           
0E8EA 20 00 00                  	JSR sub_BANKF_EA68
0E8ED                           
0E8ED                           loc_BANKF_E8ED:
0E8ED 20 00 00                  	JSR WaitForNMI
0E8F0                           
0E8F0 20 00 00                  	JSR SlotMachineTextFlashIndex
0E8F3                           
0E8F3 B9 00 00                  	LDA BonusChanceUpdateBuffer_PLAYER_1UP, Y
0E8F6 85 11                     	STA ScreenUpdateIndex
0E8F8 C6 06                     	DEC byte_RAM_6
0E8FA D0 F1                     	BNE loc_BANKF_E8ED
0E8FC                           
0E8FC F0 00                     	BEQ loc_BANKF_E90C
0E8FE                           
0E8FE                           SlotMachineLoseFanfare:
0E8FE A9 08                     	LDA #Music2_DeathJingle
0E900 8D 03 06                  	STA MusicQueue2
0E903 20 00 00                  	JSR WaitForNMI
0E906                           
0E906 20 00 00                  	JSR sub_BANKF_EA68
0E909                           
0E909 20 00 00                  	JSR Delay160Frames
0E90C                           
0E90C                           loc_BANKF_E90C:
0E90C A9 11                     	LDA #ScreenUpdateBuffer_RAM_EraseBonusMessageTextUnused
0E90E 85 11                     	STA ScreenUpdateIndex
0E910 20 00 00                  	JSR WaitForNMI
0E913                           
0E913 4C FD E7                  	JMP loc_BANKF_E7FD
0E916                           
0E916                           
0E916                           ;
0E916                           ; Used for flashing text in Bonus Chance
0E916                           ;
0E916                           ; ##### Input
0E916                           ; - `byte_RAM_6`: Bonus Chance timer
0E916                           ;
0E916                           ; ##### Output
0E916                           ; - `Y`: 0 to show text, 1 to hide text
0E916                           ;
0E916                           SlotMachineTextFlashIndex:
0E916 A5 06                     	LDA byte_RAM_6
0E918 4A                        	LSR A
0E919 4A                        	LSR A
0E91A 4A                        	LSR A
0E91B 4A                        	LSR A
0E91C 29 01                     	AND #$01
0E91E A8                        	TAY
0E91F 60                        	RTS
0E920                           
0E920                           
0E920                           NoCoinsForSlotMachine:
0E920 20 00 00                  	JSR Delay80Frames
0E923                           
0E923                           IFDEF EXPAND_MUSIC
0E923                           	; Need $08 to loop correctly, but want to preserve addresses
0E923                           	JSR SlotMachineNoCoinsJingle
0E923                           	LDA #$08 ; Needed to loop correctly
0E923                           ELSE
0E923 A9 08                     	LDA #Music2_DeathJingle
0E925 8D 03 06                  	STA MusicQueue2
0E928                           ENDIF
0E928                           
0E928 85 06                     	STA byte_RAM_6
0E92A                           loc_BANKF_E92A:
0E92A A5 06                     	LDA byte_RAM_6
0E92C 29 01                     	AND #$01
0E92E A8                        	TAY
0E92F B9 00 00                  	LDA BonusChanceUpdateBuffer_NO_BONUS, Y
0E932 85 11                     	STA ScreenUpdateIndex
0E934                           
0E934 A9 0A                     	LDA #$0A
0E936 85 07                     	STA byte_RAM_7
0E938                           loc_BANKF_E938:
0E938 20 00 00                  	JSR WaitForNMI_TurnOnPPU
0E93B C6 07                     	DEC byte_RAM_7
0E93D D0 F9                     	BNE loc_BANKF_E938
0E93F                           
0E93F C6 06                     	DEC byte_RAM_6
0E941 10 E7                     	BPL loc_BANKF_E92A
0E943                           
0E943 4C 02 E8                  	JMP GoToNextLevel
0E946                           
0E946                           
0E946                           Delay80Frames:
0E946 A9 50                     	LDA #$50
0E948 D0 00                     	BNE DelayFrames
0E94A                           
0E94A                           Delay160Frames:
0E94A A9 A0                     	LDA #$A0
0E94C                           
0E94C                           DelayFrames:
0E94C 85 07                     	STA byte_RAM_7
0E94E                           DelayFrames_Loop:
0E94E 20 00 00                  	JSR WaitForNMI_TurnOnPPU
0E951 C6 07                     	DEC byte_RAM_7
0E953 D0 F9                     	BNE DelayFrames_Loop
0E955                           
0E955 60                        	RTS
0E956                           
0E956                           
0E956                           ;
0E956                           ; Do the ending!
0E956                           ;
0E956                           EndingSceneRoutine:
0E956 20 5B E1                  	JSR SetScrollXYTo0
0E959                           
0E959 A9 80                     	LDA #$80
0E95B                           	; FDS leftover; $4080 is an old sound register
0E95B                           	; The prototype had two writes to this address!
0E95B                           	; It looks like they missed this one, though.
0E95B 8D 80 40                  	STA FDS_WAVETABLE_VOL
0E95E 0A                        	ASL A
0E95F 8D 07 06                  	STA SoundEffectPlaying1
0E962 A9 00                     	LDA #PRGBank_0_1
0E964 20 00 00                  	JSR ChangeMappedPRGBank
0E967                           
0E967 20 3B A4                  	JSR FreeSubconsScene
0E96A                           
0E96A 20 00 00                  	JSR WaitForNMI_TurnOffPPU
0E96D                           
0E96D 20 00 00                  	JSR DisableNMI
0E970                           
0E970 20 00 00                  	JSR LoadCelebrationSceneBackgroundCHR
0E973                           
0E973 20 00 00                  	JSR EnableNMI
0E976                           
0E976 20 00 00                  	JSR WaitForNMI
0E979                           
0E979 A9 00                     	LDA #PRGBank_0_1
0E97B 20 00 00                  	JSR ChangeMappedPRGBank
0E97E                           
0E97E EE F3 06                  	INC GameMilestoneCounter
0E981                           
0E981 20 79 AA                  	JSR ContributorScene
0E984                           
0E984 20 00 00                  	JSR WaitForNMI_TurnOffPPU
0E987                           
0E987 20 00 00                  	JSR DisableNMI
0E98A                           
0E98A                           SetupMarioSleepingScene:
0E98A 20 00 00                  	JSR LoadMarioSleepingCHRBanks
0E98D                           
0E98D 20 00 00                  	JSR EnableNMI
0E990                           
0E990 20 00 00                  	JSR WaitForNMI
0E993                           
0E993 A9 06                     	LDA #PRGBank_C_D
0E995 20 00 00                  	JSR ChangeMappedPRGBank
0E998                           
0E998 EE F3 06                  	INC GameMilestoneCounter
0E99B 4C 42 83                  	JMP MarioSleepingScene
0E99E                           
0E99E                           
0E99E                           DisableNMI:
0E99E A9 30                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIDisabled
0E9A0 8D 00 20                  	STA PPUCTRL
0E9A3 85 FF                     	STA PPUCtrlMirror
0E9A5 60                        	RTS
0E9A6                           
0E9A6                           
0E9A6                           PPUBuffer_Text_Game_Over:
0E9A6 21 CB 0A                  	.db $21, $CB, $0A
0E9A9 E0 DA E6 DE FB FB E8 EF.. 	.db $E0, $DA, $E6, $DE, $FB, $FB, $E8, $EF, $DE, $EB ; GAME OVER
0E9B3 00                        	.db $00
0E9B4                           
0E9B4                           PPUBuffer_Text_Continue:
0E9B4 21 75 01 00               	.db $21, $75, $01, $00 ; (Placeholder for continue count)
0E9B8 21 6A 0A F6 FB DC E8 E7.. 	.db $21, $6A, $0A, $F6, $FB, $DC, $E8, $E7, $ED, $E2, $E7, $EE, $DE ; * CONTINUE
0E9C5                           
0E9C5                           PPUBuffer_Text_Retry:
0E9C5 21 AA 07 F6 FB EB DE ED.. 	.db $21, $AA, $07, $F6, $FB, $EB, $DE, $ED, $EB, $F2 ; * RETRY
0E9CF 21 CB 0A FB FB FB FB FB.. 	.db $21, $CB, $0A, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB ; Blank, erases "GAME OVER"
0E9DC 00                        	.db $00
0E9DD                           
0E9DD                           BonusChanceUpdateBuffer_BONUS_CHANCE_Unused:
0E9DD 09                        	.db ScreenUpdateBuffer_RAM_BonusChanceUnused
0E9DE 0F                        	.db ScreenUpdateBuffer_RAM_EraseBonusMessageText
0E9DF                           BonusChanceUpdateBuffer_PUSH_A_BUTTON:
0E9DF 0B                        	.db ScreenUpdateBuffer_RAM_PushAButtonText
0E9E0 10                        	.db ScreenUpdateBuffer_RAM_ErasePushAButtonText
0E9E1                           BonusChanceUpdateBuffer_NO_BONUS:
0E9E1 0A                        	.db ScreenUpdateBuffer_RAM_NoBonusText
0E9E2 0F                        	.db ScreenUpdateBuffer_RAM_EraseBonusMessageText
0E9E3                           BonusChanceUpdateBuffer_PLAYER_1UP:
0E9E3 0C                        	.db ScreenUpdateBuffer_RAM_Player1UpText
0E9E4 0F                        	.db ScreenUpdateBuffer_RAM_EraseBonusMessageText
0E9E5                           
0E9E5                           
0E9E5                           ;
0E9E5                           ; Displays extra life info on the pause screen
0E9E5                           ;
0E9E5                           PauseScreen_ExtraLife:
0E9E5 A9 16                     	LDA #ScreenUpdateBuffer_PauseExtraLife
0E9E7 8D BD 05                  	STA CardScreenUpdateIndex
0E9EA                           	; Draw EXTRA LIFE text near bottom of card
0E9EA A9 26                     	LDA #$26
0E9EC 8D 80 71                  	STA TitleCard_ExtraLife_DrawAddress
0E9EF A9 C8                     	LDA #$C8
0E9F1 8D 81 71                  	STA TitleCard_ExtraLife_DrawAddress + 1
0E9F4                           
0E9F4                           ;
0E9F4                           ; Loads the palette and graphics for the pause screen to display
0E9F4                           ;
0E9F4                           PauseScreen_Card:
0E9F4 20 00 00                  	JSR WaitForNMI_TurnOffPPU
0E9F7                           
0E9F7 20 00 00                  	JSR ChangeTitleCardCHR
0E9FA                           
0E9FA A9 00                     	LDA #PRGBank_0_1
0E9FC 20 00 00                  	JSR ChangeMappedPRGBank
0E9FF                           
0E9FF 20 A2 81                  	JSR StashScreenScrollPosition
0EA02                           
0EA02                           	; Load title card palette
0EA02 A0 23                     	LDY #$23
0EA04                           PauseScreen_Card_Loop:
0EA04 B9 F1 E0                  	LDA TitleCardPalettes, Y
0EA07 99 5F 05                  	STA PPUBuffer_TitleCardPalette, Y
0EA0A 88                        	DEY
0EA0B 10 F7                     	BPL PauseScreen_Card_Loop
0EA0D                           
0EA0D                           PauseScreen_Card_ScreenReset:
0EA0D 20 66 E1                  	JSR ResetScreenForTitleCard
0EA10                           
0EA10 20 7F E1                  	JSR EnableNMI_PauseTitleCard
0EA13                           
0EA13 AE 35 06                  	LDX CurrentWorld
0EA16 AC 31 05                  	LDY CurrentLevel
0EA19 20 98 E1                  	JSR DisplayLevelTitleCardText
0EA1C                           
0EA1C A9 FF                     	LDA #$FF
0EA1E 85 FD                     	STA PPUScrollXMirror
0EA20 20 00 00                  	JSR WaitForNMI
0EA23                           
0EA23 AD BD 05                  	LDA CardScreenUpdateIndex
0EA26 85 11                     	STA ScreenUpdateIndex
0EA28 20 00 00                  	JSR WaitForNMI
0EA2B                           
0EA2B                           
0EA2B                           EnableNMI:
0EA2B A9 B0                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIEnabled
0EA2D 85 FF                     	STA PPUCtrlMirror
0EA2F 8D 00 20                  	STA PPUCTRL
0EA32 60                        	RTS
0EA33                           
0EA33                           
0EA33                           ; =============== S U B R O U T I N E =======================================
0EA33                           
0EA33                           sub_BANKF_EA33:
0EA33 20 5B E1                  	JSR SetScrollXYTo0
0EA36                           
0EA36 AD 02 20                  	LDA PPUSTATUS
0EA39 A0 00                     	LDY #$00
0EA3B A9 3F                     	LDA #$3F
0EA3D 8D 06 20                  	STA PPUADDR
0EA40 8C 06 20                  	STY PPUADDR
0EA43                           
0EA43                           loc_BANKF_EA43:
0EA43 B9 9C 05                  	LDA unk_RAM_59C, Y
0EA46 8D 07 20                  	STA PPUDATA
0EA49 C8                        	INY
0EA4A C0 10                     	CPY #$10
0EA4C 90 F5                     	BCC loc_BANKF_EA43
0EA4E                           
0EA4E A0 00                     	LDY #$00
0EA50 AD 02 20                  	LDA PPUSTATUS
0EA53 A9 3F                     	LDA #$3F
0EA55 8D 06 20                  	STA PPUADDR
0EA58 A9 10                     	LDA #$10
0EA5A 8D 06 20                  	STA PPUADDR
0EA5D                           
0EA5D                           SetBonusChancePalette:
0EA5D B9 15 E1                  	LDA BonusChanceSpritePalettes, Y
0EA60 8D 07 20                  	STA PPUDATA
0EA63 C8                        	INY
0EA64 C0 10                     	CPY #$10
0EA66 90 F5                     	BCC SetBonusChancePalette
0EA68                           
0EA68                           ; End of function sub_BANKF_EA33
0EA68                           
0EA68                           ; =============== S U B R O U T I N E =======================================
0EA68                           
0EA68                           sub_BANKF_EA68:
0EA68 AC ED 04                  	LDY ExtraLives
0EA6B 88                        	DEY
0EA6C 98                        	TYA
0EA6D 20 00 00                  	JSR GetTwoDigitNumberTiles
0EA70 8C 99 05                  	STY byte_RAM_599
0EA73 8D 9A 05                  	STA byte_RAM_59A
0EA76                           
0EA76 AD 2B 06                  	LDA SlotMachineCoins
0EA79 18                        	CLC
0EA7A 69 D0                     	ADC #$D0
0EA7C 8D 88 05                  	STA byte_RAM_588
0EA7F                           
0EA7F A9 01                     	LDA #ScreenUpdateBuffer_RAM_BonusChanceCoinsExtraLife
0EA81 85 11                     	STA ScreenUpdateIndex
0EA83 A9 40                     	LDA #Stack100_Menu
0EA85 8D 00 01                  	STA StackArea
0EA88 20 2B EA                  	JSR EnableNMI
0EA8B                           
0EA8B 4C 00 00                  	JMP WaitForNMI
0EA8E                           
0EA8E                           ; End of function sub_BANKF_EA68
0EA8E                           
0EA8E                           
0EA8E                           ;
0EA8E                           ; Converts a number to numerical tiles with space for 2 digits
0EA8E                           ;
0EA8E                           ; ##### Input
0EA8E                           ; - `A` = number to display
0EA8E                           ;
0EA8E                           ; ##### Output
0EA8E                           ; - `A`: second digit of the number (ones)
0EA8E                           ; - `Y`: first digit of the number (tens)
0EA8E                           ;
0EA8E                           GetTwoDigitNumberTiles:
0EA8E A0 D0                     	LDY #$D0 ; zero
0EA90                           
0EA90                           GetTwoDigitNumberTiles_TensLoop:
0EA90                           	; Count up the tens digit until A < 10
0EA90 C9 0A                     	CMP #$0A
0EA92 90 00                     	BCC GetTwoDigitNumberTiles_Ones
0EA94                           
0EA94 E9 0A                     	SBC #$0A
0EA96 C8                        	INY
0EA97 4C 90 EA                  	JMP GetTwoDigitNumberTiles_TensLoop
0EA9A                           
0EA9A                           GetTwoDigitNumberTiles_Ones:
0EA9A 09 D0                     	ORA #$D0
0EA9C C0 D0                     	CPY #$D0
0EA9E D0 00                     	BNE GetTwoDigitNumberTiles_Exit
0EAA0                           
0EAA0 A0 FB                     	LDY #$FB
0EAA2                           
0EAA2                           GetTwoDigitNumberTiles_Exit:
0EAA2 60                        	RTS
0EAA3                           
0EAA3                           
0EAA3                           WaitForNMI_TurnOffPPU:
0EAA3 A9 00                     	LDA #$00
0EAA5 F0 00                     	BEQ _WaitForNMI_StuffPPUMask ; Branch always
0EAA7                           
0EAA7                           WaitForNMI_TurnOnPPU:
0EAA7 A9 1E                     	LDA #PPUMask_ShowLeft8Pixels_BG | PPUMask_ShowLeft8Pixels_SPR | PPUMask_ShowBackground | PPUMask_ShowSprites
0EAA9                           
0EAA9                           _WaitForNMI_StuffPPUMask:
0EAA9 85 FE                     	STA PPUMaskMirror
0EAAB                           
0EAAB                           WaitForNMI:
0EAAB A5 11                     	LDA ScreenUpdateIndex
0EAAD 0A                        	ASL A
0EAAE AA                        	TAX
0EAAF BD 00 DC                  	LDA ScreenUpdateBufferPointers, X
0EAB2 85 F0                     	STA RAM_PPUDataBufferPointer
0EAB4 BD 01 DC                  	LDA ScreenUpdateBufferPointers + 1, X
0EAB7 85 F1                     	STA RAM_PPUDataBufferPointer + 1
0EAB9                           
0EAB9 A9 00                     	LDA #$00
0EABB 85 EB                     	STA NMIWaitFlag ; Start waiting for NMI to finish
0EABD                           WaitForNMILoop:
0EABD A5 EB                     	LDA NMIWaitFlag ; Has the NMI routine set the flag yet?
0EABF 10 FC                     	BPL WaitForNMILoop ; If no, wait some more
0EAC1                           
0EAC1 60                        	RTS ; If yes, go back to what we were doing
0EAC2                           
0EAC2                           
0EAC2                           ; =============== S U B R O U T I N E =======================================
0EAC2                           
0EAC2                           sub_BANKF_EAC2:
0EAC2 A5 F5                     	LDA Player1JoypadPress
0EAC4 10 00                     	BPL locret_BANKF_EAD1
0EAC6                           
0EAC6 A2 00                     	LDX #$00
0EAC8                           
0EAC8                           loc_BANKF_EAC8:
0EAC8 B5 29                     	LDA ObjectXLo, X
0EACA D0 00                     	BNE loc_BANKF_EAD2
0EACC                           
0EACC E8                        	INX
0EACD E0 03                     	CPX #$03
0EACF 90 F7                     	BCC loc_BANKF_EAC8
0EAD1                           
0EAD1                           locret_BANKF_EAD1:
0EAD1 60                        	RTS
0EAD2                           
0EAD2                           ; ---------------------------------------------------------------------------
0EAD2                           
0EAD2                           loc_BANKF_EAD2:
0EAD2 A9 00                     	LDA #$00
0EAD4 95 29                     	STA ObjectXLo, X
0EAD6 A9 04                     	LDA #SoundEffect1_CherryGet
0EAD8 8D 02 06                  	STA SoundEffectQueue1
0EADB 60                        	RTS
0EADC                           
0EADC                           ; End of function sub_BANKF_EAC2
0EADC                           
0EADC                           ; =============== S U B R O U T I N E =======================================
0EADC                           
0EADC                           sub_BANKF_EADC:
0EADC A2 02                     	LDX #$02
0EADE                           
0EADE                           loc_BANKF_EADE:
0EADE B5 29                     	LDA ObjectXLo, X
0EAE0 F0 00                     	BEQ loc_BANKF_EAF2
0EAE2                           
0EAE2 D6 2C                     	DEC ObjectXLo + 3, X
0EAE4 D0 00                     	BNE loc_BANKF_EAF2
0EAE6                           
0EAE6 A9 04                     	LDA #$04
0EAE8 95 2C                     	STA ObjectXLo + 3, X
0EAEA D6 2F                     	DEC ObjectXLo + 6, X
0EAEC 10 00                     	BPL loc_BANKF_EAF2
0EAEE                           
0EAEE A9 07                     	LDA #$07
0EAF0 95 2F                     	STA ObjectXLo + 6, X
0EAF2                           
0EAF2                           loc_BANKF_EAF2:
0EAF2 CA                        	DEX
0EAF3 10 E9                     	BPL loc_BANKF_EADE
0EAF5                           
0EAF5 60                        	RTS
0EAF6                           
0EAF6                           ; End of function sub_BANKF_EADC
0EAF6                           
0EAF6                           ; =============== S U B R O U T I N E =======================================
0EAF6                           
0EAF6                           sub_BANKF_EAF6:
0EAF6 A9 02                     	LDA #$02
0EAF8 85 00                     	STA byte_RAM_0
0EAFA                           
0EAFA                           loc_BANKF_EAFA:
0EAFA A5 00                     	LDA byte_RAM_0
0EAFC A8                        	TAY
0EAFD 0A                        	ASL A
0EAFE 0A                        	ASL A
0EAFF 0A                        	ASL A
0EB00 AA                        	TAX
0EB01 79 2F 00                  	ADC ObjectXLo + 6, Y
0EB04 A8                        	TAY
0EB05 B9 3B 06                  	LDA SlotMachineReelOrder1RAM, Y
0EB08 A8                        	TAY
0EB09 A9 07                     	LDA #$07
0EB0B 85 01                     	STA byte_RAM_1
0EB0D                           
0EB0D                           loc_BANKF_EB0D:
0EB0D B9 9E E0                  	LDA BonusChanceCherrySprite, Y
0EB10 9D 10 02                  	STA SpriteDMAArea + $10, X
0EB13 E8                        	INX
0EB14 C8                        	INY
0EB15 C6 01                     	DEC byte_RAM_1
0EB17 10 F4                     	BPL loc_BANKF_EB0D
0EB19                           
0EB19 C6 00                     	DEC byte_RAM_0
0EB1B 10 DD                     	BPL loc_BANKF_EAFA
0EB1D                           
0EB1D A2 17                     	LDX #$17
0EB1F                           
0EB1F                           loc_BANKF_EB1F:
0EB1F 8A                        	TXA
0EB20 29 18                     	AND #$18
0EB22 0A                        	ASL A
0EB23 0A                        	ASL A
0EB24 7D 10 02                  	ADC SpriteDMAArea + $10, X
0EB27 9D 10 02                  	STA SpriteDMAArea + $10, X
0EB2A CA                        	DEX
0EB2B CA                        	DEX
0EB2C CA                        	DEX
0EB2D CA                        	DEX
0EB2E 10 EF                     	BPL loc_BANKF_EB1F
0EB30                           
0EB30 60                        	RTS
0EB31                           
0EB31                           ; End of function sub_BANKF_EAF6
0EB31                           
0EB31                           IFNDEF BONUS_CHANCE_RAM_CLEANUP
0EB31                           ;
0EB31                           ; Copies the unused coin sprite from memory into the sprite DMA area at $200
0EB31                           ;
0EB31                           CopyUnusedCoinSpriteToSpriteArea:
0EB31 A0 00                     	LDY #$00
0EB33                           
0EB33                           CopyUnusedCoinSpriteToSpriteArea_Loop:
0EB33 B9 53 06                  	LDA BonusChanceUnusedCoinSprite_RAM, Y
0EB36 99 28 02                  	STA SpriteDMAArea + $28, Y
0EB39 C8                        	INY
0EB3A C0 08                     	CPY #$08 ; Four bytes per sprite * 2 sprites = 8 bytes
0EB3C 90 F5                     	BCC CopyUnusedCoinSpriteToSpriteArea_Loop
0EB3E                           
0EB3E 60                        	RTS
0EB3F                           ENDIF
0EB3F                           
0EB3F                           ;
0EB3F                           ; NMI logic for during a transition
0EB3F                           ;
0EB3F                           NMI_Transition:
0EB3F A9 00                     	LDA #$00
0EB41 8D 03 20                  	STA OAMADDR
0EB44 A9 02                     	LDA #$02
0EB46 8D 14 40                  	STA OAM_DMA
0EB49 20 00 00                  	JSR ChangeCHRBanks
0EB4C                           
0EB4C A5 FE                     	LDA PPUMaskMirror
0EB4E 8D 01 20                  	STA PPUMASK
0EB51 20 00 00                  	JSR DoSoundProcessing
0EB54                           
0EB54 A5 FF                     	LDA PPUCtrlMirror
0EB56 8D 00 20                  	STA PPUCTRL
0EB59 C6 EB                     	DEC NMIWaitFlag
0EB5B 4C 00 00                  	JMP NMI_Exit
0EB5E                           
0EB5E                           
0EB5E                           ;
0EB5E                           ; NMI logic for during the pause menu
0EB5E                           ;
0EB5E                           NMI_PauseOrMenu:
0EB5E A9 00                     	LDA #$00
0EB60 8D 01 20                  	STA PPUMASK
0EB63 8D 03 20                  	STA OAMADDR
0EB66 A9 02                     	LDA #$02
0EB68 8D 14 40                  	STA OAM_DMA
0EB6B 20 00 00                  	JSR ChangeCHRBanks
0EB6E                           
0EB6E 20 00 00                  	JSR UpdatePPUFromBufferWithOptions
0EB71                           
0EB71 20 00 00                  	JSR ResetPPUAddress
0EB74                           
0EB74 A5 FD                     	LDA PPUScrollXMirror
0EB76 8D 05 20                  	STA PPUSCROLL
0EB79 A9 00                     	LDA #$00
0EB7B 8D 05 20                  	STA PPUSCROLL
0EB7E A5 FE                     	LDA PPUMaskMirror
0EB80 8D 01 20                  	STA PPUMASK
0EB83 4C 00 00                  	JMP NMI_CheckScreenUpdateIndex
0EB86                           
0EB86                           
0EB86                           ;
0EB86                           ; When waiting for an NMI, just run the audio engine
0EB86                           ;
0EB86                           NMI_Waiting:
0EB86 A5 FE                     	LDA PPUMaskMirror
0EB88 8D 01 20                  	STA PPUMASK
0EB8B 4C 00 00                  	JMP NMI_DoSoundProcessing
0EB8E                           
0EB8E                           
0EB8E                           ;
0EB8E                           ; Public NMI: where dreams come true!
0EB8E                           ;
0EB8E                           ; The NMI runs every frame during vertical blanking and is responsible for
0EB8E                           ; tasks that should occur on each frame of gameplay, such as drawing tiles and
0EB8E                           ; sprites, scrolling, and reading input.
0EB8E                           ;
0EB8E                           ; It also runs the audio engine, allowing music to play continuously no matter
0EB8E                           ; how busy the rest of the game happens to be.
0EB8E                           ;
0EB8E                           ; The NMI is actually separated into several distinct behaviors depending on the
0EB8E                           ; game state, as dictated by flags in stack `$100`.
0EB8E                           ;
0EB8E                           ; For normal gameplay, here is the general flow of the NMI:
0EB8E                           ;
0EB8E                           ;  1. Push registers and processor flags so that we can restore them later.
0EB8E                           ;  2. Check to see whether we're in a menu or transitioning. If so, use those
0EB8E                           ;     divert to that code instead.
0EB8E                           ;  3. Hide the sprites/background and update the sprite OAM.
0EB8E                           ;  4. Load the current CHR banks.
0EB8E                           ;  5. Check the `NMIWaitFlag`. If it's nonzero, restore `PPUMASK` and skip to
0EB8E                           ;     handling the sound processing.
0EB8E                           ;  6. Handle any horizontal or vertical scrolling tile updates.
0EB8E                           ;  7. Update PPU using the current screen update buffer.
0EB8E                           ;  8. Write PPU control register, scroll position, and mask.
0EB8E                           ;  9. Increment the global frame counter.
0EB8E                           ; 10. Reset PPU buffer 301 if we just used it for the screen update.
0EB8E                           ; 11. Read joypad input.
0EB8E                           ; 12. Decrement `NMIWaitFlag`, unblocking any code that was waiting for the NMI.
0EB8E                           ; 13. Run the audio engine.
0EB8E                           ; 14. Restore registers and processor flags, yield back to the game loop.
0EB8E                           ;
0EB8E                           ; The game loop is synchronized with rendering using `JSR WaitForNMI`, which
0EB8E                           ; sets `NMIWaitFlag` to `$00` until the NMI completes and decrements it.
0EB8E                           ;
0EB8E                           ; Although the NMI itself doesn't lag (ie. the NMI itself is not interrupted
0EB8E                           ; by another NMI), there are some parts of the game that can feel sluggish.
0EB8E                           ; This is due to sluggishness in the game loop itself.
0EB8E                           ;
0EB8E                           NMI:
0EB8E 08                        	PHP
0EB8F 48                        	PHA
0EB90 8A                        	TXA
0EB91 48                        	PHA
0EB92 98                        	TYA
0EB93 48                        	PHA
0EB94                           
0EB94 2C 00 01                  	BIT StackArea
0EB97 10 C5                     	BPL NMI_PauseOrMenu ; branch if bit 7 was 0
0EB99                           
0EB99 50 A4                     	BVC NMI_Transition ; branch if bit 6 was 0
0EB9B                           
0EB9B A9 00                     	LDA #$00
0EB9D 8D 01 20                  	STA PPUMASK
0EBA0 8D 03 20                  	STA OAMADDR
0EBA3 A9 02                     	LDA #$02
0EBA5 8D 14 40                  	STA OAM_DMA
0EBA8                           
0EBA8 20 00 00                  	JSR ChangeCHRBanks
0EBAB                           
0EBAB                           NMI_CheckWaitFlag:
0EBAB A5 EB                     	LDA NMIWaitFlag
0EBAD D0 D7                     	BNE NMI_Waiting
0EBAF                           
0EBAF                           NMI_Gameplay:
0EBAF                           	; `UpdatePPUFromBufferNMI` draws in a row-oriented fashion, which makes it
0EBAF                           	; unsuitable for horizontal levels where scrolling the screen means drawing
0EBAF                           	; columns of new tiles. As a result, we need special logic to draw the
0EBAF                           	; background in horizontal levels!
0EBAF A5 EC                     	LDA IsHorizontalLevel
0EBB1 F0 00                     	BEQ NMI_AfterBackgroundAttributesUpdate
0EBB3                           
0EBB3 AD 1C 05                  	LDA HasScrollingPPUTilesUpdate
0EBB6 F0 00                     	BEQ NMI_AfterBackgroundTilesUpdate
0EBB8                           
0EBB8                           	; Update nametable tiles in horizontal level
0EBB8 A9 00                     	LDA #$00
0EBBA 8D 1C 05                  	STA HasScrollingPPUTilesUpdate
0EBBD A2 1E                     	LDX #$1E
0EBBF A0 00                     	LDY #$00
0EBC1 AD 02 20                  	LDA PPUSTATUS
0EBC4 A9 B4                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteVertical | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIEnabled
0EBC6 8D 00 20                  	STA PPUCTRL
0EBC9                           
0EBC9                           NMI_DrawBackgroundTilesOuterLoop:
0EBC9                           	LDA_abs DrawBackgroundTilesPPUAddrHi
0EBC9                           	IFDEF COMPATIBILITY
0EBC9 AD                        		.db $ad
0EBCA D1 00                     		.dw DrawBackgroundTilesPPUAddrHi
0EBCC                           	ELSE
0EBCC                           		LDA DrawBackgroundTilesPPUAddrHi
0EBCC                           		NOP_compat
0EBCC                           	ENDIF
0EBCC 8D 06 20                  	STA PPUADDR
0EBCF                           	LDA_abs DrawBackgroundTilesPPUAddrLo
0EBCF                           	IFDEF COMPATIBILITY
0EBCF AD                        		.db $ad
0EBD0 D2 00                     		.dw DrawBackgroundTilesPPUAddrLo
0EBD2                           	ELSE
0EBD2                           		LDA DrawBackgroundTilesPPUAddrLo
0EBD2                           		NOP_compat
0EBD2                           	ENDIF
0EBD2 8D 06 20                  	STA PPUADDR
0EBD5                           
0EBD5                           NMI_DrawBackgroundTilesInnerLoop:
0EBD5 B9 80 03                  	LDA ScrollingPPUTileUpdateBuffer, Y
0EBD8 8D 07 20                  	STA PPUDATA
0EBDB C8                        	INY
0EBDC CA                        	DEX
0EBDD D0 F6                     	BNE NMI_DrawBackgroundTilesInnerLoop
0EBDF                           
0EBDF A2 1E                     	LDX #$1E
0EBE1                           	INC_abs DrawBackgroundTilesPPUAddrLo
0EBE1                           	IFDEF COMPATIBILITY
0EBE1 EE                        		.db $ee
0EBE2 D2 00                     		.dw DrawBackgroundTilesPPUAddrLo
0EBE4                           	ELSE
0EBE4                           		INC DrawBackgroundTilesPPUAddrLo
0EBE4                           		NOP_compat
0EBE4                           	ENDIF
0EBE4                           
0EBE4 C0 3C                     	CPY #$3C
0EBE6 D0 E1                     	BNE NMI_DrawBackgroundTilesOuterLoop
0EBE8                           
0EBE8                           NMI_AfterBackgroundTilesUpdate:
0EBE8 AD BC 03                  	LDA DrawBackgroundAttributesPPUAddrHi
0EBEB F0 00                     	BEQ NMI_AfterBackgroundAttributesUpdate
0EBED                           
0EBED                           	; Update nametable attributes in horizontal level
0EBED A9 B4                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteVertical | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIEnabled
0EBEF 8D 00 20                  	STA PPUCTRL
0EBF2 A0 00                     	LDY #$00
0EBF4 A2 04                     	LDX #$04
0EBF6                           
0EBF6                           NMI_DrawBackgroundAttributesOuterLoop:
0EBF6 AD 02 20                  	LDA PPUSTATUS
0EBF9 AD BC 03                  	LDA DrawBackgroundAttributesPPUAddrHi
0EBFC 8D 06 20                  	STA PPUADDR
0EBFF AD BD 03                  	LDA DrawBackgroundAttributesPPUAddrLo
0EC02 8D 06 20                  	STA PPUADDR
0EC05                           
0EC05                           NMI_DrawBackgroundAttributesInnerLoop:
0EC05 B9 BE 03                  	LDA HorizontalScrollingPPUAttributeUpdateBuffer, Y
0EC08 8D 07 20                  	STA PPUDATA
0EC0B C8                        	INY
0EC0C 98                        	TYA
0EC0D 4A                        	LSR A
0EC0E B0 F5                     	BCS NMI_DrawBackgroundAttributesInnerLoop
0EC10                           
0EC10 AD BD 03                  	LDA DrawBackgroundAttributesPPUAddrLo
0EC13 18                        	CLC
0EC14 69 08                     	ADC #$08
0EC16 8D BD 03                  	STA DrawBackgroundAttributesPPUAddrLo
0EC19 CA                        	DEX
0EC1A D0 DA                     	BNE NMI_DrawBackgroundAttributesOuterLoop
0EC1C                           
0EC1C 8E BC 03                  	STX DrawBackgroundAttributesPPUAddrHi
0EC1F                           
0EC1F                           NMI_AfterBackgroundAttributesUpdate:
0EC1F 20 00 00                  	JSR UpdatePPUFromBufferNMI
0EC22                           
0EC22 20 00 00                  	JSR ResetPPUAddress
0EC25                           
0EC25 A9 B0                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIEnabled
0EC27 05 C9                     	ORA PPUScrollXHiMirror
0EC29 A4 EC                     	LDY IsHorizontalLevel
0EC2B D0 00                     	BNE NMI_UpdatePPUScroll
0EC2D                           
0EC2D 29 FE                     	AND #$FE
0EC2F 05 C8                     	ORA PPUScrollYHiMirror
0EC31                           
0EC31                           NMI_UpdatePPUScroll:
0EC31 8D 00 20                  	STA PPUCTRL
0EC34 85 FF                     	STA PPUCtrlMirror
0EC36 A5 FD                     	LDA PPUScrollXMirror
0EC38 8D 05 20                  	STA PPUSCROLL
0EC3B A5 FC                     	LDA PPUScrollYMirror
0EC3D 18                        	CLC
0EC3E 6D C5 04                  	ADC BackgroundYOffset
0EC41 8D 05 20                  	STA PPUSCROLL
0EC44 A5 FE                     	LDA PPUMaskMirror
0EC46 8D 01 20                  	STA PPUMASK
0EC49                           
0EC49                           NMI_IncrementGlobalCounter:
0EC49 E6 10                     	INC byte_RAM_10
0EC4B                           
0EC4B                           NMI_CheckScreenUpdateIndex:
0EC4B A5 11                     	LDA ScreenUpdateIndex
0EC4D D0 00                     	BNE NMI_ResetScreenUpdateIndex
0EC4F                           
0EC4F                           	; Turn off PPU buffer 301 update
0EC4F 8D 00 03                  	STA byte_RAM_300
0EC52 8D 01 03                  	STA PPUBuffer_301
0EC55                           
0EC55                           NMI_ResetScreenUpdateIndex:
0EC55 A9 00                     	LDA #ScreenUpdateBuffer_RAM_301
0EC57 85 11                     	STA ScreenUpdateIndex
0EC59 20 00 00                  	JSR UpdateJoypads
0EC5C                           
0EC5C C6 EB                     	DEC NMIWaitFlag
0EC5E                           
0EC5E                           NMI_DoSoundProcessing:
0EC5E                           IFNDEF DEBUG
0EC5E 20 00 00                  	JSR DoSoundProcessing
0EC61                           ELSE
0EC61                           	JMP DoSoundProcessingAndCheckDebug
0EC61                           ENDIF
0EC61                           
0EC61                           NMI_Exit:
0EC61 68                        	PLA
0EC62 A8                        	TAY
0EC63 68                        	PLA
0EC64 AA                        	TAX
0EC65 68                        	PLA
0EC66 28                        	PLP
0EC67 40                        	RTI
0EC68                           
0EC68                           ; End of function NMI
0EC68                           
0EC68                           ;
0EC68                           ; Sets the PPU address to `$3f00`, then immediatley to `$0000`
0EC68                           ;
0EC68                           ; Speculation is that this ritual comes from a recommendation in some Nintendo
0EC68                           ; documentation, but isn't actually necessary.
0EC68                           ;
0EC68                           ; See: https://forums.nesdev.com/viewtopic.php?f=2&t=16721
0EC68                           ;
0EC68                           ResetPPUAddress:
0EC68 AD 02 20                  	LDA PPUSTATUS
0EC6B A9 3F                     	LDA #$3F
0EC6D 8D 06 20                  	STA PPUADDR
0EC70 A9 00                     	LDA #$00
0EC72 8D 06 20                  	STA PPUADDR
0EC75 8D 06 20                  	STA PPUADDR
0EC78 8D 06 20                  	STA PPUADDR
0EC7B 60                        	RTS
0EC7C                           
0EC7C                           
0EC7C                           DoSoundProcessing:
0EC7C A9 02                     	LDA #PRGBank_4_5
0EC7E 20 00 00                  	JSR ChangeMappedPRGBankWithoutSaving
0EC81                           
0EC81 20 00 80                  	JSR StartProcessingSoundQueue
0EC84                           
0EC84 AD F2 06                  	LDA MMC3PRGBankTemp
0EC87 4C 00 00                  	JMP ChangeMappedPRGBank
0EC8A                           
0EC8A                           
0EC8A                           ClearNametablesAndSprites:
0EC8A A9 00                     	LDA #$00
0EC8C 85 FE                     	STA PPUMaskMirror
0EC8E 8D 01 20                  	STA PPUMASK
0EC91 A9 20                     	LDA #$20
0EC93 20 00 00                  	JSR ClearNametableChunk
0EC96                           
0EC96 A9 24                     	LDA #$24
0EC98 20 00 00                  	JSR ClearNametableChunk
0EC9B                           
0EC9B A9 28                     	LDA #$28
0EC9D 20 00 00                  	JSR ClearNametableChunk
0ECA0                           
0ECA0                           
0ECA0                           HideAllSprites:
0ECA0 A0 00                     	LDY #$00
0ECA2 A9 F8                     	LDA #$F8
0ECA4                           
0ECA4                           HideAllSpritesLoop:
0ECA4 99 00 02                  	STA SpriteDMAArea, Y
0ECA7 88                        	DEY
0ECA8 88                        	DEY
0ECA9 88                        	DEY
0ECAA 88                        	DEY
0ECAB D0 F7                     	BNE HideAllSpritesLoop
0ECAD                           
0ECAD 60                        	RTS
0ECAE                           
0ECAE                           
0ECAE                           ClearNametableChunk:
0ECAE AC 02 20                  	LDY PPUSTATUS ; Reset PPU address latch
0ECB1 A0 30                     	LDY #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIDisabled
0ECB3 8C 00 20                  	STY PPUCTRL ; Turn off NMI
0ECB6 84 FF                     	STY PPUCtrlMirror
0ECB8 A0 00                     	LDY #$00
0ECBA                           	; A contains the high byte of the PPU address (generally $20, $24, $28)
0ECBA 8D 06 20                  	STA PPUADDR
0ECBD 8C 06 20                  	STY PPUADDR ; And Y has the low byte ($00)
0ECC0 A2 03                     	LDX #$03 ; Do $300 bytes for this loop.
0ECC2 A9 FB                     	LDA #$FB
0ECC4                           
0ECC4                           ClearNametableChunk_Loop:
0ECC4 8D 07 20                  	STA PPUDATA ; Store the blank tile $300 times
0ECC7 C8                        	INY
0ECC8 D0 FA                     	BNE ClearNametableChunk_Loop ; (Loop falls through every $100 bytes)
0ECCA                           
0ECCA CA                        	DEX
0ECCB D0 F7                     	BNE ClearNametableChunk_Loop ; Loop falls through after $300 bytes
0ECCD                           
0ECCD                           ClearNametableChunk_Loop2:
0ECCD                           	; Do another loop of $C0 bytes to clear the
0ECCD                           	; rest of the nametable chunk
0ECCD 8D 07 20                  	STA PPUDATA
0ECD0 C8                        	INY
0ECD1 C0 C0                     	CPY #$C0
0ECD3 D0 F8                     	BNE ClearNametableChunk_Loop2
0ECD5                           
0ECD5 A9 00                     	LDA #$00 ; Load A with $00 for clearing the attribute tables
0ECD7                           
0ECD7                           ClearNametableChunk_AttributeTableLoop:
0ECD7 8D 07 20                  	STA PPUDATA ; Clear attribute table...
0ECDA C8                        	INY ; Y was $C0 on entry, so write $40 bytes...
0ECDB D0 FA                     	BNE ClearNametableChunk_AttributeTableLoop
0ECDD                           
0ECDD                           PPUBufferUpdatesComplete:
0ECDD 60                        	RTS ; Woo fucking hoo
0ECDE                           
0ECDE                           
0ECDE                           ;
0ECDE                           ; Used to update the PPU nametable / palette data during NMI.
0ECDE                           ;
0ECDE                           ; This function can only handle $100 bytes of data
0ECDE                           ; (actually less).
0ECDE                           ;
0ECDE                           ; Unlike `UpdatePPUFromBufferWithOptions`, this one does not support
0ECDE                           ; $80 or $40 as options, instead treating them as direct length.
0ECDE                           ; It also does not increment the buffer pointer, only using Y
0ECDE                           ; to read further data.
0ECDE                           ;
0ECDE                           ; If Y overflows, it will resume copying again from the beginning,
0ECDE                           ; and can get into an infinite loop if it doesn't encounter
0ECDE                           ; a terminating $00. Welp!
0ECDE                           ;
0ECDE                           UpdatePPUFromBufferNMI:
0ECDE A9 B0                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIEnabled
0ECE0 8D 00 20                  	STA PPUCTRL
0ECE3 A0 00                     	LDY #$00
0ECE5                           
0ECE5                           UpdatePPUFromBufferNMI_CheckForBuffer:
0ECE5 B1 F0                     	LDA (RAM_PPUDataBufferPointer), Y
0ECE7 F0 F4                     	BEQ PPUBufferUpdatesComplete
0ECE9                           
0ECE9 AE 02 20                  	LDX PPUSTATUS
0ECEC 8D 06 20                  	STA PPUADDR
0ECEF C8                        	INY
0ECF0 B1 F0                     	LDA (RAM_PPUDataBufferPointer), Y
0ECF2 8D 06 20                  	STA PPUADDR
0ECF5 C8                        	INY
0ECF6 B1 F0                     	LDA (RAM_PPUDataBufferPointer), Y
0ECF8 AA                        	TAX
0ECF9                           
0ECF9                           UpdatePPUFromBufferNMI_CopyLoop:
0ECF9 C8                        	INY
0ECFA B1 F0                     	LDA (RAM_PPUDataBufferPointer), Y
0ECFC 8D 07 20                  	STA PPUDATA
0ECFF CA                        	DEX
0ED00 D0 F7                     	BNE UpdatePPUFromBufferNMI_CopyLoop
0ED02                           
0ED02 C8                        	INY
0ED03 4C E5 EC                  	JMP UpdatePPUFromBufferNMI_CheckForBuffer
0ED06                           
0ED06                           
0ED06                           ;
0ED06                           ; This reads from $F0/$F1 to determine where a "buffer" is.
0ED06                           ; Basically, a buffer is like this:
0ED06                           ;
0ED06                           ; PPUADDR  LEN DATA ......
0ED06                           ; $20 $04  $03 $E9 $F0 $FB
0ED06                           ; $25 $5F  $4F $FB
0ED06                           ; $21 $82  $84 $00 $01 $02 $03
0ED06                           ; $00
0ED06                           ;
0ED06                           ; PPUADDR is two bytes (hi,lo) for the address to send to PPUADDR.
0ED06                           ; LEN is the length, with the following two bitmasks:
0ED06                           ;
0ED06                           ;  - $80: Set the "draw vertically" option
0ED06                           ;  - $40: Use ONE tile instead of a string
0ED06                           ;
0ED06                           ; DATA is either (LEN) bytes or one byte.
0ED06                           ;
0ED06                           ; After (LEN) bytes have been written, the buffer pointer
0ED06                           ; is incremented to (LEN+2) and the function restarts.
0ED06                           ; A byte of $00 terminates execution and returns.
0ED06                           ;
0ED06                           ; There is a similar function, `UpdatePPUFromBufferNMI`,
0ED06                           ; that is called during NMI, but unlike this one,
0ED06                           ; that one does NOT use bitmasks, nor increment the pointer.
0ED06                           ;
0ED06                           UpdatePPUFromBufferWithOptions:
0ED06                           	; First, check if we have anything to send to the PPU
0ED06 A0 00                     	LDY #$00
0ED08 B1 F0                     	LDA (RAM_PPUDataBufferPointer), Y
0ED0A                           	; If the first byte at the buffer address is #$00, we have nothing. We're done here!
0ED0A F0 D1                     	BEQ PPUBufferUpdatesComplete
0ED0C                           
0ED0C                           	; Clear address latch
0ED0C AE 02 20                  	LDX PPUSTATUS
0ED0F                           	; Set the PPU address to the
0ED0F                           	; address from the PPU buffer
0ED0F 8D 06 20                  	STA PPUADDR
0ED12 C8                        	INY
0ED13 B1 F0                     	LDA (RAM_PPUDataBufferPointer), Y
0ED15 8D 06 20                  	STA PPUADDR
0ED18 C8                        	INY
0ED19 B1 F0                     	LDA (RAM_PPUDataBufferPointer), Y ; Data segment length byte...
0ED1B 0A                        	ASL A
0ED1C 48                        	PHA
0ED1D                           	; Enable NMI + Vertical increment + whatever else was already set...
0ED1D A5 FF                     	LDA PPUCtrlMirror
0ED1F 09 84                     	ORA #PPUCtrl_Base2000 | PPUCtrl_WriteVertical | PPUCtrl_Sprite0000 | PPUCtrl_Background0000 | PPUCtrl_SpriteSize8x8 | PPUCtrl_NMIEnabled
0ED21                           	; ...but only if $80 was set in the length byte. Otherwise, turn vertical incrementing back off.
0ED21 B0 00                     	BCS UpdatePPUFBWO_EnableVerticalIncrement
0ED23                           
0ED23 29 FB                     	AND #PPUCtrl_Base2C00 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite1000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIEnabled | $40
0ED25                           
0ED25                           UpdatePPUFBWO_EnableVerticalIncrement:
0ED25 8D 00 20                  	STA PPUCTRL
0ED28 68                        	PLA
0ED29                           	; Check if the second bit ($40) in the length has been set
0ED29 0A                        	ASL A
0ED2A                           	; If not, we are copying a string of data
0ED2A 90 00                     	BCC UpdatePPUFBWO_CopyStringOfTiles
0ED2C                           
0ED2C                           	; Length (A) is now (A << 2).
0ED2C                           	; OR in #$02 now if we are copying a single tile;
0ED2C                           	; This will be rotated out into register C momentarily
0ED2C 09 02                     	ORA #$02
0ED2E C8                        	INY
0ED2F                           
0ED2F                           UpdatePPUFBWO_CopyStringOfTiles:
0ED2F                           	; Restore the data length.
0ED2F                           	; A = (Length & #$3F)
0ED2F 4A                        	LSR A
0ED30                           
0ED30                           	; This moves the second bit (used above to signal
0ED30                           	; "one tile mode") into the Carry register
0ED30 4A                        	LSR A
0ED31 AA                        	TAX ; Copy the length into register X
0ED32                           
0ED32                           UpdatePPUFBWO_CopyLoop:
0ED32                           	; If Carry is set (from above), we're only copying one tile.
0ED32                           	; Do not increment Y to advance copying index
0ED32 B0 00                     	BCS UpdatePPUFBWO_CopySingleTileSkip
0ED34                           
0ED34 C8                        	INY
0ED35                           
0ED35                           UpdatePPUFBWO_CopySingleTileSkip:
0ED35 B1 F0                     	LDA (RAM_PPUDataBufferPointer), Y ; Load data from buffer...
0ED37 8D 07 20                  	STA PPUDATA ; ...store it to the PPU.
0ED3A CA                        	DEX ; Decrease remaining length.
0ED3B D0 F5                     	BNE UpdatePPUFBWO_CopyLoop ; Are we done? If no, copy more stuff
0ED3D                           
0ED3D C8                        	INY ; Y contains the amount of copied data now
0ED3E 98                        	TYA ; ...and now A does
0ED3F 18                        	CLC ; Clear carry bit (from earlier)
0ED40 65 F0                     	ADC RAM_PPUDataBufferPointer ; Add the length to the PPU data buffer
0ED42 85 F0                     	STA RAM_PPUDataBufferPointer
0ED44 A5 F1                     	LDA RAM_PPUDataBufferPointer + 1
0ED46                           	; If the length overflowed (carry set),
0ED46                           	; add that to the hi byte of the pointer
0ED46 69 00                     	ADC #$00
0ED48 85 F1                     	STA RAM_PPUDataBufferPointer + 1
0ED4A                           	; Start the cycle over again.
0ED4A                           	; (If the PPU buffer points to a 0, it will terminate after this jump)
0ED4A 4C 06 ED                  	JMP UpdatePPUFromBufferWithOptions
0ED4D                           
0ED4D                           
0ED4D                           IF INES_MAPPER == MAPPER_FME7
0ED4D                           RESET_FME7:
0ED4D                           	LDA #$08 ; PRG bank 0
0ED4D                           	STA FME7_Command
0ED4D                           	LDA #%11000000
0ED4D                           	STA FME7_Parameter
0ED4D                           
0ED4D                           	LDA #$09 ; PRG bank 1
0ED4D                           	STA FME7_Command
0ED4D                           	LDA #$00 ; ROM bank 0
0ED4D                           	STA FME7_Parameter
0ED4D                           
0ED4D                           	LDA #$0A ; PRG bank 2
0ED4D                           	STA FME7_Command
0ED4D                           	LDA #$01 ; ROM bank 1
0ED4D                           	STA FME7_Parameter
0ED4D                           
0ED4D                           	LDA #$0B ; PRG bank 3
0ED4D                           	STA FME7_Command
0ED4D                           	LDA #$0E ; ROM bank E
0ED4D                           	STA FME7_Parameter
0ED4D                           
0ED4D                           	JMP RESET
0ED4D                           
0ED4D                           
0ED4D                           ChangeCHRBanks_FME7:
0ED4D                           	LDY BackgroundCHR1
0ED4D                           	LDA #$04
0ED4D                           	STA FME7_Command
0ED4D                           	STY FME7_Parameter
0ED4D                           
0ED4D                           	INY
0ED4D                           	LDA #$05
0ED4D                           	STA FME7_Command
0ED4D                           	STY FME7_Parameter
0ED4D                           
0ED4D                           	LDY BackgroundCHR2
0ED4D                           	LDA #$06
0ED4D                           	STA FME7_Command
0ED4D                           	STY FME7_Parameter
0ED4D                           
0ED4D                           	INY
0ED4D                           	LDA #$07
0ED4D                           	STA FME7_Command
0ED4D                           	STY FME7_Parameter
0ED4D                           
0ED4D                           	LDY #$03
0ED4D                           ChangeCHRBanks_FME7_Loop:
0ED4D                           	TYA
0ED4D                           	STA FME7_Command
0ED4D                           	LDA SpriteCHR1, Y
0ED4D                           	STA FME7_Parameter
0ED4D                           	DEY
0ED4D                           	BPL ChangeCHRBanks_FME7_Loop
0ED4D                           
0ED4D                           	RTS
0ED4D                           
0ED4D                           ELSEIF INES_MAPPER == MAPPER_MMC5
0ED4D                           RESET_MMC5:
0ED4D                           	; Set PRG mode 3 and CHR mode 3
0ED4D                           	LDA #$03
0ED4D                           	STA MMC5_PRGMode
0ED4D                           	STA MMC5_CHRMode
0ED4D                           
0ED4D                           	; Enable PRG RAM writing
0ED4D                           	LDA #$02
0ED4D                           	STA MMC5_PRGRAMProtect1
0ED4D                           	LDA #$01
0ED4D                           	STA MMC5_PRGRAMProtect2
0ED4D                           
0ED4D                           	; Set nametable mapping
0ED4D                           	LDA #%01010000
0ED4D                           	STA MMC5_NametableMapping
0ED4D                           
0ED4D                           	LDA #$00
0ED4D                           	STA MMC5_PRGBankSwitch1
0ED4D                           	STA MMC5_CHRBankSwitchUpper
0ED4D                           
0ED4D                           	; MMC5 Pulse channels
0ED4D                           	LDA #$0F
0ED4D                           	STA MMC5_SND_CHN
0ED4D                           
0ED4D                           	; PRG bank 0
0ED4D                           	LDA #$80 ; ROM bank 0
0ED4D                           	STA MMC5_PRGBankSwitch2 ; $8000-$9FFF
0ED4D                           
0ED4D                           	; PRG bank 1
0ED4D                           	LDA #$81 ; ROM bank 1
0ED4D                           	STA MMC5_PRGBankSwitch3 ; $A000-$BFFF
0ED4D                           
0ED4D                           	; PRG bank 2
0ED4D                           	LDA #$8E ; ROM bank E
0ED4D                           	STA MMC5_PRGBankSwitch4 ; $C000-$DFFF
0ED4D                           
0ED4D                           	; PRG bank 3
0ED4D                           	LDA #$8F ; ROM bank F
0ED4D                           	STA MMC5_PRGBankSwitch5 ; $E000-$FFFF
0ED4D                           
0ED4D                           	JMP RESET
0ED4D                           
0ED4D                           
0ED4D                           ChangeCHRBanks_MMC5:
0ED4D                           	LDA SpriteCHR1
0ED4D                           	STA MMC5_CHRBankSwitch1
0ED4D                           
0ED4D                           	LDA SpriteCHR2
0ED4D                           	STA MMC5_CHRBankSwitch2
0ED4D                           
0ED4D                           	LDA SpriteCHR3
0ED4D                           	STA MMC5_CHRBankSwitch3
0ED4D                           
0ED4D                           	LDA SpriteCHR4
0ED4D                           	STA MMC5_CHRBankSwitch4
0ED4D                           
0ED4D                           	LDA BackgroundCHR1
0ED4D                           	STA MMC5_CHRBankSwitch5
0ED4D                           	ADC #$01
0ED4D                           	STA MMC5_CHRBankSwitch6
0ED4D                           
0ED4D                           	LDA BackgroundCHR2
0ED4D                           	STA MMC5_CHRBankSwitch7
0ED4D                           	ADC #$01
0ED4D                           	STA MMC5_CHRBankSwitch8
0ED4D                           
0ED4D                           	LDA BackgroundCHR1
0ED4D                           	STA MMC5_CHRBankSwitch9
0ED4D                           	ADC #$01
0ED4D                           	STA MMC5_CHRBankSwitch10
0ED4D                           
0ED4D                           	LDA BackgroundCHR2
0ED4D                           	STA MMC5_CHRBankSwitch11
0ED4D                           	ADC #$01
0ED4D                           	STA MMC5_CHRBankSwitch12
0ED4D                           
0ED4D                           	RTS
0ED4D                           ENDIF
0ED4D                           
0ED4D                           IFDEF EXPAND_MUSIC
0ED4D                           SlotMachineNoCoinsJingle:
0ED4D                           	LDA #Music2_DeathJingle
0ED4D                           	STA MusicQueue2
0ED4D                           	RTS
0ED4D                           ENDIF
0ED4D                           
0ED4D                           ; Unused space in the original ($ED4D - $EFFF)
0ED4D                           unusedSpace $F000, $FF
0ED4D                           	IFDEF PRESERVE_UNUSED_SPACE
0ED4D FF FF FF FF FF FF FF FF.. 		.pad $F000, $FF
0F000                           	ENDIF
0F000                           
0F000                           
0F000                           ;
0F000                           ; ## Tile collision bounding boxes
0F000                           ;
0F000                           ; These hitboxes are used when determining the collision between objects and background tiles.
0F000                           ;
0F000                           ; Tile collision bounding box table offsets
0F000                           ;
0F000                           TileCollisionHitboxIndex:
0F000 00                        	.db $00 ; $00 - player standing
0F001 08                        	.db $08 ; $01 - player holding item
0F002 10                        	.db $10 ; $02 - player ducking
0F003 18                        	.db $18 ; $03 - player ducking with item
0F004 20                        	.db $20 ; $04 - 16x16 items (vegetables, etc.)
0F005 24                        	.db $24 ; $05 - 16x16 enemies (shyguy, etc.)
0F006                           ; The following four entries are used to determine whether a carried item can be thrown.
0F006 28                        	.db $28 ; $06 - player left, standing
0F007 2A                        	.db $2A ; $07 - player left, ducking
0F008 29                        	.db $29 ; $08 - player right, standing
0F009 2B                        	.db $2B ; $09 - player right, ducking
0F00A 2C                        	.db $2C ; $0A - player climb/cherry
0F00B 2E                        	.db $2E ; $0B - player climbing
0F00C 30                        	.db $30 ; $0C - 16x32 enemies (birdo, mouser)
0F00D 34                        	.db $34 ; $0D - projectile
0F00E 38                        	.db $38 ; $0E - 16x48 enemies (tryclde)
0F00F 3C                        	.db $3C ; $0F - spark
0F010 40                        	.db $40 ; $10 - flying carpet
0F011                           
0F011                           ;
0F011                           ; ### Tile vertical collision bounding box (x-offsets)
0F011                           ;
0F011                           ; The left boundary offset is measured from the left side of the sprite.
0F011                           ; The right boundary offset is measured from the right of the first tile of the sprite.
0F011                           ;
0F011                           ; Each bounding box entry is four bytes:
0F011                           ;
0F011                           ;   1. left boundary (upward velocity)
0F011                           ;   2. right boundary (upward velocity)
0F011                           ;   3. left boundary (downward velocity)
0F011                           ;   4. right boundary (downward velocity)
0F011                           ;
0F011                           VerticalTileCollisionHitboxX:
0F011 06 09 06 09               	.db $06, $09, $06, $09 ; $00
0F015 01 01 0E 0E               	.db $01, $01, $0E, $0E ; $04
0F019 06 09 06 09               	.db $06, $09, $06, $09 ; $08
0F01D 01 01 0E 0E               	.db $01, $01, $0E, $0E ; $0C
0F021 06 09 06 09               	.db $06, $09, $06, $09 ; $10
0F025 01 01 0E 0E               	.db $01, $01, $0E, $0E ; $14
0F029 06 09 06 09               	.db $06, $09, $06, $09 ; $18
0F02D 01 01 0E 0E               	.db $01, $01, $0E, $0E ; $1C
0F031 08 08 00 0F               	.db $08, $08, $00, $0F ; $20
0F035 08 08 03 0C               	.db $08, $08, $03, $0C ; $24
0F039 F8 18 F8 18               	.db $F8, $18, $F8, $18 ; $28
0F03D 08 08 08 08               	.db $08, $08, $08, $08 ; $2C
0F041 08 08 03 0C               	.db $08, $08, $03, $0C ; $30
0F045 03 03 02 05               	.db $03, $03, $02, $05 ; $34
0F049 08 08 03 0C               	.db $08, $08, $03, $0C ; $38
0F04D 08 08 FF 10               	.db $08, $08, $FF, $10 ; $3C
0F051 10 10 02 1E               	.db $10, $10, $02, $1E ; $40
0F055                           
0F055                           ;
0F055                           ; ### Tile vertical collision bounding box (y-offsets)
0F055                           ;
0F055                           ; The upper and lower boundary offset are measured from the top of the sprite.
0F055                           ;
0F055                           ; Each bounding box entry is four bytes:
0F055                           ;
0F055                           ;   1. upper boundary (upward velocity)
0F055                           ;   2. lower boundary (upward velocity)
0F055                           ;   3. upper boundary (downward velocity)
0F055                           ;   4. lower boundary (downward velocity)
0F055                           ;
0F055                           ; Not totally sure why there are two bytes, but it seems to have something to do with the direction
0F055                           ; of movement when checking the collision.
0F055                           ;
0F055                           VerticalTileCollisionHitboxY:
0F055 07 07 20 20               	.db $07, $07, $20, $20 ; $00
0F059 0D 1C 0D 1C               	.db $0D, $1C, $0D, $1C ; $04
0F05D FF FF 20 20               	.db $FF, $FF, $20, $20 ; $08
0F061 04 1C 04 1C               	.db $04, $1C, $04, $1C ; $0C
0F065 0F 0F 20 20               	.db $0F, $0F, $20, $20 ; $10
0F069 1C 1C 1C 1C               	.db $1C, $1C, $1C, $1C ; $14
0F06D 07 07 20 20               	.db $07, $07, $20, $20 ; $18
0F071 0D 1C 0D 1C               	.db $0D, $1C, $0D, $1C ; $1C
0F075 00 10 09 09               	.db $00, $10, $09, $09 ; $20
0F079 03 10 09 09               	.db $03, $10, $09, $09 ; $24
0F07D FF FF 0F 0F               	.db $FF, $FF, $0F, $0F ; $28
0F081 0C 14 07 20               	.db $0C, $14, $07, $20 ; $2C
0F085 FE 20 10 10               	.db $FE, $20, $10, $10 ; $30
0F089 09 0A 08 08               	.db $09, $0A, $08, $08 ; $34
0F08D 03 30 18 18               	.db $03, $30, $18, $18 ; $38
0F091 FF 10 08 08               	.db $FF, $10, $08, $08 ; $3C
0F095 09 0A 08 08               	.db $09, $0A, $08, $08 ; $40
0F099                           
0F099                           ;
0F099                           ; ## Object vertical collision bounding box
0F099                           ;
0F099                           ; These hitboxes are copied to RAM and used when determining collision between objects. This allows
0F099                           ; the hitboxes to change dynamically, which is used when Hawkmouth (offset $0B) opens and closes.
0F099                           ;
0F099                           ObjectCollisionHitboxLeft:
0F099 02                        	.db $02 ; $00
0F09A 02                        	.db $02 ; $01
0F09B 03                        	.db $03 ; $02
0F09C 00                        	.db $00 ; $03
0F09D 03                        	.db $03 ; $04
0F09E 03                        	.db $03 ; $05
0F09F F8                        	.db $F8 ; $06
0F0A0 00                        	.db $00 ; $07
0F0A1 03                        	.db $03 ; $08
0F0A2 01                        	.db $01 ; $09
0F0A3 F3                        	.db $F3 ; $0A
0F0A4 04                        	.db $04 ; $0B
0F0A5 03                        	.db $03 ; $0C
0F0A6 03                        	.db $03 ; $0D
0F0A7 03                        	.db $03 ; $0E
0F0A8 F2                        	.db $F2 ; $0F
0F0A9 03                        	.db $03 ; $10
0F0AA 03                        	.db $03 ; $11
0F0AB 05                        	.db $05 ; $12
0F0AC 03                        	.db $03 ; $13
0F0AD                           
0F0AD                           ObjectCollisionHitboxTop:
0F0AD 0B                        	.db $0B ; $00
0F0AE 10                        	.db $10 ; $01
0F0AF 03                        	.db $03 ; $02
0F0B0 00                        	.db $00 ; $03
0F0B1 03                        	.db $03 ; $04
0F0B2 03                        	.db $03 ; $05
0F0B3 F8                        	.db $F8 ; $06
0F0B4 00                        	.db $00 ; $07
0F0B5 09                        	.db $09 ; $08
0F0B6 04                        	.db $04 ; $09
0F0B7 03                        	.db $03 ; $0A
0F0B8 03                        	.db $03 ; $0B
0F0B9 0E                        	.db $0E ; $0C
0F0BA 03                        	.db $03 ; $0D
0F0BB 03                        	.db $03 ; $0E
0F0BC 03                        	.db $03 ; $0F
0F0BD F6                        	.db $F6 ; $10
0F0BE 0C                        	.db $0C ; $11
0F0BF 02                        	.db $02 ; $12
0F0C0 03                        	.db $03 ; $13
0F0C1                           
0F0C1                           ObjectCollisionHitboxWidth:
0F0C1 0B                        	.db $0B ; $00
0F0C2 0B                        	.db $0B ; $01
0F0C3 09                        	.db $09 ; $02
0F0C4 10                        	.db $10 ; $03
0F0C5 09                        	.db $09 ; $04
0F0C6 19                        	.db $19 ; $05
0F0C7 20                        	.db $20 ; $06
0F0C8 20                        	.db $20 ; $07
0F0C9 03                        	.db $03 ; $08
0F0CA 1E                        	.db $1E ; $09
0F0CB 19                        	.db $19 ; $0A
0F0CC 08                        	.db $08 ; $0B
0F0CD 09                        	.db $09 ; $0C
0F0CE 09                        	.db $09 ; $0D
0F0CF 09                        	.db $09 ; $0E
0F0D0 18                        	.db $18 ; $0F
0F0D1 09                        	.db $09 ; $10
0F0D2 1A                        	.db $1A ; $11
0F0D3 06                        	.db $06 ; $12
0F0D4 15                        	.db $15 ; $13
0F0D5                           
0F0D5                           ObjectCollisionHitboxHeight:
0F0D5 16                        	.db $16 ; $00
0F0D6 11                        	.db $11 ; $01
0F0D7 0D                        	.db $0D ; $02
0F0D8 10                        	.db $10 ; $03
0F0D9 1A                        	.db $1A ; $04
0F0DA 19                        	.db $19 ; $05
0F0DB 24                        	.db $24 ; $06
0F0DC 10                        	.db $10 ; $07
0F0DD 03                        	.db $03 ; $08
0F0DE 04                        	.db $04 ; $09
0F0DF 2D                        	.db $2D ; $0A
0F0E0 30                        	.db $30 ; $0B
0F0E1 0F                        	.db $0F ; $0C
0F0E2 2E                        	.db $2E ; $0D
0F0E3 3E                        	.db $3E ; $0E
0F0E4 1E                        	.db $1E ; $0F
0F0E5 28                        	.db $28 ; $10
0F0E6 13                        	.db $13 ; $11
0F0E7 48                        	.db $48 ; $12
0F0E8 26                        	.db $26 ; $13
0F0E9                           
0F0E9                           
0F0E9                           NextSpriteFlickerSlot:
0F0E9 CE 00 04                  	DEC SpriteFlickerSlot
0F0EC 10 00                     	BPL NextSpriteFlickerSlot_Exit
0F0EE                           
0F0EE A9 08                     	LDA #$08
0F0F0 8D 00 04                  	STA SpriteFlickerSlot
0F0F3                           
0F0F3                           NextSpriteFlickerSlot_Exit:
0F0F3 60                        	RTS
0F0F4                           
0F0F4                           
0F0F4                           LevelMusicIndexes:
0F0F4 01                        	.db Music1_Overworld
0F0F5 04                        	.db Music1_Inside ; 1 ; Music1 indexes.
0F0F6 08                        	.db Music1_Boss ; 2
0F0F7 40                        	.db Music1_Wart ; 3
0F0F8 20                        	.db Music1_Subspace ; 4
0F0F9                           
0F0F9                           
0F0F9                           ; =============== S U B R O U T I N E =======================================
0F0F9                           
0F0F9                           sub_BANKF_F0F9:
0F0F9 20 E9 F0                  	JSR NextSpriteFlickerSlot
0F0FC                           
0F0FC AD C7 04                  	LDA PlayerInRocket
0F0FF D0 00                     	BNE loc_BANKF_F11B
0F101                           
0F101                           	; boss clear fanfare locks player movement
0F101 AD 06 06                  	LDA MusicPlaying2
0F104 C9 02                     	CMP #Music2_BossClearFanfare
0F106 F0 00                     	BEQ loc_BANKF_F115
0F108                           
0F108 AD 1B 04                  	LDA PlayerLock
0F10B D0 00                     	BNE loc_BANKF_F115
0F10D                           
0F10D A9 00                     	LDA #PRGBank_0_1
0F10F 20 00 00                  	JSR ChangeMappedPRGBank
0F112                           
0F112 20 1C 8A                  	JSR HandlePlayerState
0F115                           
0F115                           loc_BANKF_F115:
0F115 20 00 00                  	JSR SetPlayerScreenPosition
0F118                           
0F118 20 00 00                  	JSR RenderPlayer
0F11B                           
0F11B                           loc_BANKF_F11B:
0F11B 4C 00 00                  	JMP RunFrame_Common
0F11E                           
0F11E                           ; End of function sub_BANKF_F0F9
0F11E                           
0F11E                           ;
0F11E                           ; Does a lot of important stuff in horizontal levels
0F11E                           ;
0F11E                           RunFrame_Horizontal:
0F11E 20 E9 F0                  	JSR NextSpriteFlickerSlot
0F121                           
0F121                           	; If the player is in a rocket, cut to the chase
0F121 AD C7 04                  	LDA PlayerInRocket
0F124 D0 00                     	BNE RunFrame_Common
0F126                           
0F126                           	; Switch to banks 0/1 for the scrolling logic
0F126 A9 00                     	LDA #PRGBank_0_1
0F128 20 00 00                  	JSR ChangeMappedPRGBank
0F12B                           
0F12B                           	; If the boss clear fanfare is playing or `PlayerLock` is set, skip the
0F12B                           	; player state update subroutine
0F12B AD 06 06                  	LDA MusicPlaying2
0F12E C9 02                     	CMP #Music2_BossClearFanfare
0F130 F0 00                     	BEQ RunFrame_Horizontal_AfterPlayerState
0F132                           
0F132 AD 1B 04                  	LDA PlayerLock
0F135 D0 00                     	BNE RunFrame_Horizontal_AfterPlayerState
0F137                           
0F137 20 1C 8A                  	JSR HandlePlayerState
0F13A                           
0F13A                           RunFrame_Horizontal_AfterPlayerState:
0F13A 20 00 00                  	JSR GetMoveCameraX
0F13D                           
0F13D 20 EC 85                  	JSR ApplyHorizontalScroll
0F140                           
0F140 20 00 00                  	JSR SetPlayerScreenPosition
0F143                           
0F143 20 00 00                  	JSR RenderPlayer
0F146                           
0F146                           ; back to the shared stuff
0F146                           RunFrame_Common:
0F146 A9 01                     	LDA #PRGBank_2_3
0F148 20 00 00                  	JSR ChangeMappedPRGBank
0F14B                           
0F14B 20 10 80                  	JSR AreaMainRoutine
0F14E                           
0F14E 20 0B BE                  	JSR AreaSecondaryRoutine
0F151                           
0F151                           IFDEF CONTROLLER_2_DEBUG
0F151 20 BC BE                  	JSR AreaDebugRoutine
0F154                           ENDIF
0F154                           
0F154 20 00 00                  	JSR AnimateCHRRoutine
0F157                           
0F157 20 00 00                  	JSR SetAreaStartPage
0F15A                           
0F15A                           	; Decrement player state timers
0F15A A2 03                     	LDX #$03
0F15C                           DecrementPlayerStateTimers_Loop:
0F15C B5 82                     	LDA PlayerStateTimer, X
0F15E F0 00                     	BEQ DecrementPlayerStateTimers_Zero
0F160                           
0F160 D6 82                     	DEC PlayerStateTimer, X
0F162                           
0F162                           DecrementPlayerStateTimers_Zero:
0F162 CA                        	DEX
0F163 10 F7                     	BPL DecrementPlayerStateTimers_Loop
0F165                           
0F165                           	; If invincible, decrement timer every 8 frames
0F165 AC E0 04                  	LDY StarInvincibilityTimer
0F168 F0 00                     	BEQ RunFrame_Exit
0F16A                           
0F16A A5 10                     	LDA byte_RAM_10
0F16C 29 07                     	AND #$07
0F16E D0 00                     	BNE RunFrame_Exit
0F170                           
0F170                           	; When the invincibility timer hits 8, restore the regular level music
0F170 CE E0 04                  	DEC StarInvincibilityTimer
0F173 C0 08                     	CPY #$08
0F175 D0 00                     	BNE RunFrame_Exit
0F177                           
0F177 AC 45 05                  	LDY CurrentMusicIndex
0F17A B9 F4 F0                  	LDA LevelMusicIndexes, Y
0F17D 8D 00 06                  	STA MusicQueue1
0F180                           
0F180                           RunFrame_Exit:
0F180 60                        	RTS
0F181                           
0F181                           
0F181                           ;
0F181                           ; Does a lot of important stuff in vertical levels
0F181                           ;
0F181                           RunFrame_Vertical:
0F181 20 E9 F0                  	JSR NextSpriteFlickerSlot
0F184                           
0F184 20 00 00                  	JSR DetermineVerticalScroll
0F187                           
0F187                           	; If the player is in a rocket, cut to the chase
0F187 AD C7 04                  	LDA PlayerInRocket
0F18A D0 00                     	BNE RunFrame_Vertical_Common
0F18C                           
0F18C                           	; If the boss clear fanfare is playing or `PlayerLock` is set, skip the
0F18C                           	; player state update subroutine
0F18C AD 06 06                  	LDA MusicPlaying2
0F18F C9 02                     	CMP #Music2_BossClearFanfare
0F191 F0 00                     	BEQ RunFrame_Vertical_AfterPlayerState
0F193                           
0F193 AD 1B 04                  	LDA PlayerLock
0F196 D0 00                     	BNE RunFrame_Vertical_AfterPlayerState
0F198                           
0F198                           	; Switch to banks 0/1 for the scrolling logic
0F198 A9 00                     	LDA #PRGBank_0_1
0F19A 20 00 00                  	JSR ChangeMappedPRGBank
0F19D                           
0F19D 20 1C 8A                  	JSR HandlePlayerState
0F1A0                           
0F1A0                           RunFrame_Vertical_AfterPlayerState:
0F1A0 A9 00                     	LDA #PRGBank_0_1
0F1A2 20 00 00                  	JSR ChangeMappedPRGBank
0F1A5                           
0F1A5 20 83 80                  	JSR ApplyVerticalScroll
0F1A8                           
0F1A8 20 00 00                  	JSR SetPlayerScreenPosition
0F1AB                           
0F1AB 20 00 00                  	JSR RenderPlayer
0F1AE                           
0F1AE                           RunFrame_Vertical_Common:
0F1AE 4C 46 F1                  	JMP RunFrame_Common
0F1B1                           
0F1B1                           
0F1B1                           ;
0F1B1                           ; Stores the current level/area and player state in the `Init` variables so that they can be
0F1B1                           ; to restart the area from the previous transition after the player dies.
0F1B1                           ;
0F1B1                           RememberAreaInitialState:
0F1B1 AD 27 06                  	LDA DoAreaTransition
0F1B4 C9 02                     	CMP #$02 ; Skip if the player is going into a pointer jar
0F1B6 F0 00                     	BEQ RememberAreaInitialState_Exit
0F1B8                           
0F1B8 A0 03                     	LDY #$03
0F1BA                           RememberAreaInitialState_Loop:
0F1BA B9 31 05                  	LDA CurrentLevel, Y
0F1BD 99 E7 04                  	STA CurrentLevel_Init, Y
0F1C0 88                        	DEY
0F1C1 10 F7                     	BPL RememberAreaInitialState_Loop
0F1C3                           
0F1C3 A5 28                     	LDA PlayerXLo
0F1C5 8D E1 04                  	STA PlayerXLo_Init
0F1C8 A5 32                     	LDA PlayerYLo
0F1CA 8D E2 04                  	STA PlayerYLo_Init
0F1CD AD 28 04                  	LDA PlayerScreenX
0F1D0 8D E3 04                  	STA PlayerScreenX_Init
0F1D3 AD 2B 04                  	LDA PlayerScreenYLo
0F1D6 8D E4 04                  	STA PlayerScreenYLo_Init
0F1D9 A5 46                     	LDA PlayerYVelocity
0F1DB 8D E5 04                  	STA PlayerYVelocity_Init
0F1DE A5 50                     	LDA PlayerState
0F1E0 8D E6 04                  	STA PlayerState_Init
0F1E3                           
0F1E3                           RememberAreaInitialState_Exit:
0F1E3 60                        	RTS
0F1E4                           
0F1E4                           
0F1E4                           ;
0F1E4                           ; Level Initialization
0F1E4                           ; ====================
0F1E4                           ;
0F1E4                           ; Sets up in-level gameplay (eg. after level card)
0F1E4                           ;
0F1E4                           LevelInitialization:
0F1E4 A0 03                     	LDY #$03
0F1E6                           
0F1E6                           ; Loop through and set level, area, page, and transition from RAM
0F1E6                           LevelInitialization_AreaSetupLoop:
0F1E6 B9 E7 04                  	LDA CurrentLevel_Init, Y
0F1E9 99 31 05                  	STA CurrentLevel, Y
0F1EC 88                        	DEY
0F1ED 10 F7                     	BPL LevelInitialization_AreaSetupLoop
0F1EF                           
0F1EF                           	; position the player
0F1EF AD E1 04                  	LDA PlayerXLo_Init
0F1F2 85 28                     	STA PlayerXLo
0F1F4 AD E2 04                  	LDA PlayerYLo_Init
0F1F7 85 32                     	STA PlayerYLo
0F1F9 AD E3 04                  	LDA PlayerScreenX_Init
0F1FC 8D 28 04                  	STA PlayerScreenX
0F1FF AD E4 04                  	LDA PlayerScreenYLo_Init
0F202 8D 2B 04                  	STA PlayerScreenYLo
0F205 AD E5 04                  	LDA PlayerYVelocity_Init
0F208 85 46                     	STA PlayerYVelocity
0F20A AD E6 04                  	LDA PlayerState_Init
0F20D 85 50                     	STA PlayerState
0F20F A9 00                     	LDA #$00
0F211 8D 28 06                  	STA InSubspaceOrJar
0F214 8D EE 04                  	STA InJarType
0F217 85 99                     	STA PlayerInAir
0F219 85 85                     	STA DamageInvulnTime
0F21B                           
0F21B                           
0F21B                           RestorePlayerToFullHealth:
0F21B AC C3 04                  	LDY PlayerMaxHealth ; Get player's current max HP
0F21E B9 00 00                  	LDA PlayerHealthValueByHeartCount, Y ; Get the health value for this amount of hearts
0F221 8D C2 04                  	STA PlayerHealth
0F224 60                        	RTS
0F225                           
0F225                           
0F225                           PlayerHealthValueByHeartCount:
0F225 1F                        	.db PlayerHealth_2_HP
0F226 2F                        	.db PlayerHealth_3_HP
0F227 3F                        	.db PlayerHealth_4_HP
0F228                           ; Max hearts = (hearts - 2), value is 0,$01,2
0F228                           ; This table determines what the player's HP is set to
0F228                           
0F228                           ClimbSpeed:
0F228 00                        	.db $00
0F229                           ClimbSpeedDown:
0F229 20                        	.db $20
0F22A                           ClimbSpeedUp:
0F22A F0                        	.db $F0
0F22B                           ; Bug: The climb speed index is determined by checking the up/down flags in
0F22B                           ; Player1JoypadHeld. If both are enabled, the index it out of bounds and uses
0F22B                           ; the LDA ($A5) below, which zips the player up the vine!
0F22B                           IFDEF FIX_CLIMB_ZIP
0F22B                           	.db $00
0F22B                           ENDIF
0F22B                           
0F22B                           ;
0F22B                           ; Calculates the player's position onscreen.
0F22B                           ;
0F22B                           ; The screen position is also used for the jump-out-of-a-jar screen transition
0F22B                           ; and bottomless pit checks, which works because of the assumption that the
0F22B                           ; camera can always keep up with the player in normal gameplay.
0F22B                           ;
0F22B                           SetPlayerScreenPosition:
0F22B A5 28                     	LDA PlayerXLo
0F22D 38                        	SEC
0F22E ED C0 04                  	SBC ScreenBoundaryLeftLo
0F231 8D 28 04                  	STA PlayerScreenX
0F234 A5 32                     	LDA PlayerYLo
0F236 18                        	CLC
0F237 E5 CB                     	SBC ScreenYLo
0F239 8D 2B 04                  	STA PlayerScreenYLo
0F23C A5 1E                     	LDA PlayerYHi
0F23E E5 CA                     	SBC ScreenYHi
0F240 8D 2A 04                  	STA PlayerScreenYHi
0F243                           
0F243                           	; Exit if the player state is not standing/jumping or climbing
0F243 A5 50                     	LDA PlayerState
0F245 C9 02                     	CMP #PlayerState_Lifting
0F247 B0 00                     	BCS SetPlayerScreenPosition_Exit
0F249                           
0F249 AD 2A 04                  	LDA PlayerScreenYHi
0F24C F0 00                     	BEQ SetPlayerScreenPosition_CheckClimbing
0F24E                           
0F24E 30 00                     	BMI SetPlayerScreenPosition_Above
0F250                           
0F250                           ; If the player falls below the screen, they are in a bottomless pit.
0F250                           SetPlayerScreenPosition_Below:
0F250 A9 00                     	LDA #$00
0F252 85 82                     	STA PlayerStateTimer
0F254 4C 00 00                  	JMP KillPlayer
0F257                           
0F257                           ; If the player is above the screen, they might be jumping out of a jar.
0F257                           SetPlayerScreenPosition_Above:
0F257                           	; Verify that the y-position is above the first page of the area
0F257 A5 1E                     	LDA PlayerYHi
0F259 10 00                     	BPL SetPlayerScreenPosition_Exit
0F25B                           
0F25B                           	; We're above the top of the area, so check if we're in a jar
0F25B AD EE 04                  	LDA InJarType
0F25E F0 00                     	BEQ SetPlayerScreenPosition_CheckClimbing
0F260                           
0F260                           	; Check if the player is far enough above the top of the area
0F260 A5 32                     	LDA PlayerYLo
0F262 C9 F0                     	CMP #$F0
0F264 B0 00                     	BCS SetPlayerScreenPosition_Exit
0F266                           
0F266                           	; Exit the jar!
0F266 20 00 00                  	JSR DoAreaReset
0F269                           
0F269                           	; Break out of the previous subroutine
0F269 68                        	PLA
0F26A 68                        	PLA
0F26B                           
0F26B                           	; Put the player in a crouching stance
0F26B A0 00                     	LDY #$00
0F26D 84 9A                     	STY PlayerDucking
0F26F 84 46                     	STY PlayerYVelocity
0F271 84 3C                     	STY PlayerXVelocity
0F273 A9 05                     	LDA #PlayerState_ExitingJar
0F275 85 50                     	STA PlayerState
0F277 A9 04                     	LDA #SpriteAnimation_Ducking
0F279 85 C7                     	STA PlayerAnimationFrame
0F27B AD EE 04                  	LDA InJarType
0F27E 8C EE 04                  	STY InJarType
0F281 C9 02                     	CMP #$02
0F283 D0 00                     	BNE SetPlayerScreenPosition_ExitSubAreaJar
0F285                           
0F285                           SetPlayerScreenPosition_ExitPointerJar:
0F285 8D 27 06                  	STA DoAreaTransition
0F288 60                        	RTS
0F289                           
0F289                           SetPlayerScreenPosition_ExitSubAreaJar:
0F289 8C 28 06                  	STY InSubspaceOrJar
0F28C AD 19 05                  	LDA CurrentLevelAreaCopy
0F28F 8D 32 05                  	STA CurrentLevelArea
0F292 A9 04                     	LDA #PRGBank_8_9
0F294 20 00 00                  	JSR ChangeMappedPRGBank
0F297                           
0F297 4C 00 00                  	JMP CopyEnemyDataToMemory
0F29A                           
0F29A                           SetPlayerScreenPosition_Exit:
0F29A 60                        	RTS
0F29B                           
0F29B                           SetPlayerScreenPosition_CheckClimbing:
0F29B A5 50                     	LDA PlayerState
0F29D C9 01                     	CMP #PlayerState_Climbing
0F29F D0 F9                     	BNE SetPlayerScreenPosition_Exit
0F2A1                           
0F2A1                           	; No climbing transitions from subspace
0F2A1 AD 28 06                  	LDA InSubspaceOrJar
0F2A4 C9 02                     	CMP #$02
0F2A6 F0 F2                     	BEQ SetPlayerScreenPosition_Exit
0F2A8                           
0F2A8                           	; Climbing upwards
0F2A8 AD 2A F2                  	LDA ClimbSpeedUp
0F2AB A4 1E                     	LDY PlayerYHi
0F2AD 30 00                     	BMI SetPlayerScreenPosition_DoClimbingTransition
0F2AF                           
0F2AF                           	; Climbing downwards
0F2AF AD 2B 04                  	LDA PlayerScreenYLo
0F2B2 C9 B8                     	CMP #$B8
0F2B4 90 E4                     	BCC SetPlayerScreenPosition_Exit
0F2B6                           
0F2B6                           	; Set y-position to an odd number
0F2B6 46 32                     	LSR PlayerYLo
0F2B8 38                        	SEC
0F2B9 26 32                     	ROL PlayerYLo
0F2BB AD 29 F2                  	LDA ClimbSpeedDown
0F2BE                           
0F2BE                           SetPlayerScreenPosition_DoClimbingTransition:
0F2BE 85 46                     	STA PlayerYVelocity
0F2C0 A9 03                     	LDA #PlayerState_ClimbingAreaTransition
0F2C2 85 50                     	STA PlayerState
0F2C4 60                        	RTS
0F2C5                           
0F2C5                           
0F2C5                           ;
0F2C5                           ; Calculate the x-velocity of the camera based on the distance between the player
0F2C5                           ; and the center of the screen.
0F2C5                           ;
0F2C5                           GetMoveCameraX:
0F2C5 A9 00                     	LDA #$00
0F2C7 AC FA 04                  	LDY ScrollXLock
0F2CA D0 00                     	BNE GetMoveCameraX_Exit
0F2CC                           
0F2CC A5 28                     	LDA PlayerXLo
0F2CE 38                        	SEC
0F2CF E9 78                     	SBC #$78
0F2D1 38                        	SEC
0F2D2 ED C0 04                  	SBC ScreenBoundaryLeftLo
0F2D5                           
0F2D5                           GetMoveCameraX_Exit:
0F2D5 85 BA                     	STA MoveCameraX
0F2D7 60                        	RTS
0F2D8                           
0F2D8                           
0F2D8                           ; Tiles to use for eye sprite. If $00, this will use the character-specific table
0F2D8                           CharacterFrameEyeTiles:
0F2D8 00                        	.db $00 ; Walk1
0F2D9 00                        	.db $00 ; Carry1
0F2DA 00                        	.db $00 ; Walk2
0F2DB 00                        	.db $00 ; Carry2
0F2DC FB                        	.db $FB ; Duck
0F2DD FB                        	.db $FB ; DuckCarry
0F2DE 00                        	.db $00 ; Jump
0F2DF FB                        	.db $FB ; Death
0F2E0 FB                        	.db $FB ; Lift
0F2E1 00                        	.db $00 ; Throw
0F2E2 FB                        	.db $FB ; Climb
0F2E3                           
0F2E3                           ; Specific to each character
0F2E3                           CharacterEyeTiles:
0F2E3 D5                        	.db $D5 ; Mario
0F2E4 D9                        	.db $D9 ; Luigi
0F2E5 FB                        	.db $FB ; Toad
0F2E6 D7                        	.db $D7 ; Princess
0F2E7                           
0F2E7                           CharacterTiles_Walk1:
0F2E7 00                        	.db $00
0F2E8 02                        	.db $02
0F2E9 04                        	.db $04 ; $00 - start of relative character tile offets, for some reason
0F2EA 06                        	.db $06 ; $01
0F2EB                           
0F2EB                           CharacterTiles_Carry1:
0F2EB 0C                        	.db $0C ; $02
0F2EC 0E                        	.db $0E ; $03
0F2ED 10                        	.db $10 ; $04
0F2EE 12                        	.db $12 ; $05
0F2EF                           
0F2EF                           CharacterTiles_Walk2:
0F2EF 00                        	.db $00 ; $06
0F2F0 02                        	.db $02 ; $07
0F2F1 08                        	.db $08 ; $08
0F2F2 0A                        	.db $0A ; $09
0F2F3                           
0F2F3                           CharacterTiles_Carry2:
0F2F3 0C                        	.db $0C ; $0a
0F2F4 0E                        	.db $0E ; $0b
0F2F5 14                        	.db $14 ; $0c
0F2F6 16                        	.db $16 ; $0d
0F2F7                           
0F2F7                           CharacterTiles_Duck:
0F2F7 FB                        	.db $FB ; $0e
0F2F8 FB                        	.db $FB ; $0f
0F2F9 2C                        	.db $2C ; $10
0F2FA 2C                        	.db $2C ; $11
0F2FB                           
0F2FB                           CharacterTiles_DuckCarry:
0F2FB FB                        	.db $FB ; $12
0F2FC FB                        	.db $FB ; $13
0F2FD 2E                        	.db $2E ; $14
0F2FE 2E                        	.db $2E ; $15
0F2FF                           
0F2FF                           CharacterTiles_Jump:
0F2FF 0C                        	.db $0C ; $16
0F300 0E                        	.db $0E ; $17
0F301 10                        	.db $10 ; $18
0F302 12                        	.db $12 ; $19
0F303                           
0F303                           CharacterTiles_Death:
0F303 30                        	.db $30 ; $1a
0F304 30                        	.db $30 ; $1b
0F305 32                        	.db $32 ; $1c
0F306 32                        	.db $32 ; $1d
0F307                           
0F307                           CharacterTiles_Lift:
0F307 20                        	.db $20 ; $1e
0F308 22                        	.db $22 ; $1f
0F309 24                        	.db $24 ; $20
0F30A 26                        	.db $26 ; $21
0F30B                           
0F30B                           CharacterTiles_Throw:
0F30B 00                        	.db $00 ; $22
0F30C 02                        	.db $02 ; $23
0F30D 28                        	.db $28 ; $24
0F30E 2A                        	.db $2A ; $25
0F30F                           
0F30F                           CharacterTiles_Climb:
0F30F 18                        	.db $18 ; $26
0F310 1A                        	.db $1A ; $27
0F311 1C                        	.db $1C ; $28
0F312 1E                        	.db $1E ; $29
0F313                           
0F313                           CharacterTiles_PrincessJumpBody:
0F313 B4                        	.db $B4 ; $2a
0F314 B6                        	.db $B6 ; $2b
0F315                           
0F315                           DamageInvulnBlinkFrames:
0F315 01 01 01 02 02 04 04 04   	.db $01, $01, $01, $02, $02, $04, $04, $04
0F31D                           
0F31D                           IFDEF CONTROLLER_2_DEBUG
0F31D                           ChangePlayerPoofTiles:
0F31D 5E                        	.db $5E
0F31E 3A                        	.db $3A
0F31F 3A                        	.db $3A
0F320 3A                        	.db $3A
0F321 38                        	.db $38
0F322 38                        	.db $38
0F323 38                        	.db $38
0F324 36                        	.db $36
0F325 34                        	.db $34
0F326                           ENDIF
0F326                           
0F326                           ;
0F326                           ; Renders the player sprite
0F326                           ;
0F326                           RenderPlayer:
0F326                           IFDEF CONTROLLER_2_DEBUG
0F326 AD 81 7E                  	LDA ChangeCharacterPoofTimer
0F329 F0 00                     	BEQ RenderPlayer_AfterChangeCharacterPoof
0F32B                           
0F32B CE 81 7E                  	DEC ChangeCharacterPoofTimer
0F32E                           
0F32E                           	; tile
0F32E AC 81 7E                  	LDY ChangeCharacterPoofTimer
0F331 B9 1D F3                  	LDA ChangePlayerPoofTiles, Y
0F334 8D 01 02                  	STA SpriteDMAArea + $01
0F337 8D 05 02                  	STA SpriteDMAArea + $05
0F33A 8D 09 02                  	STA SpriteDMAArea + $09
0F33D 8D 0D 02                  	STA SpriteDMAArea + $0D
0F340                           
0F340                           	; attributes
0F340 A9 01                     	LDA #ObjAttrib_Palette1
0F342 8D 02 02                  	STA SpriteDMAArea + $02
0F345 8D 0A 02                  	STA SpriteDMAArea + $0A
0F348 A9 41                     	LDA #ObjAttrib_Palette1 | ObjAttrib_16x32
0F34A 8D 06 02                  	STA SpriteDMAArea + $06
0F34D 8D 0E 02                  	STA SpriteDMAArea + $0E
0F350                           
0F350                           	; y-position
0F350 AD 2B 04                  	LDA PlayerScreenYLo
0F353 8D 00 02                  	STA SpriteDMAArea + $00
0F356 8D 04 02                  	STA SpriteDMAArea + $04
0F359 18                        	CLC
0F35A 69 10                     	ADC #$10
0F35C 8D 08 02                  	STA SpriteDMAArea + $08
0F35F 8D 0C 02                  	STA SpriteDMAArea + $0C
0F362                           
0F362                           	; x-position
0F362 AD 28 04                  	LDA PlayerScreenX
0F365 8D 03 02                  	STA SpriteDMAArea + $03
0F368 8D 0B 02                  	STA SpriteDMAArea + $0B
0F36B 18                        	CLC
0F36C 69 08                     	ADC #$08
0F36E 8D 07 02                  	STA SpriteDMAArea + $07
0F371 8D 0F 02                  	STA SpriteDMAArea + $0F
0F374                           
0F374                           RenderPlayer_AfterChangeCharacterPoof:
0F374                           ENDIF
0F374                           
0F374                           	LDY_abs PlayerState
0F374                           	IFDEF COMPATIBILITY
0F374 AC                        		.db $ac
0F375 50 00                     		.dw PlayerState
0F377                           	ELSE
0F377                           		LDY PlayerState
0F377                           		NOP_compat
0F377                           	ENDIF
0F377 C0 08                     	CPY #PlayerState_ChangingSize
0F379 F0 00                     	BEQ loc_BANKF_F337
0F37B                           
0F37B AC E0 04                  	LDY StarInvincibilityTimer
0F37E D0 00                     	BNE loc_BANKF_F337
0F380                           
0F380 A5 85                     	LDA DamageInvulnTime ; Determine if the player is invincible from damage,
0F382                           ; and if so, if they should be visible
0F382 F0 00                     	BEQ loc_BANKF_F345
0F384                           
0F384 4A                        	LSR A
0F385 4A                        	LSR A
0F386 4A                        	LSR A
0F387 4A                        	LSR A
0F388 A8                        	TAY
0F389 A5 85                     	LDA DamageInvulnTime
0F38B 39 15 F3                  	AND DamageInvulnBlinkFrames, Y
0F38E D0 00                     	BNE loc_BANKF_F345
0F390                           
0F390 60                        	RTS
0F391                           
0F391                           ; ---------------------------------------------------------------------------
0F391                           
0F391                           loc_BANKF_F337:
0F391 A5 10                     	LDA byte_RAM_10
0F393 C0 18                     	CPY #$18
0F395 B0 00                     	BCS loc_BANKF_F33F
0F397                           
0F397 4A                        	LSR A
0F398 4A                        	LSR A
0F399                           
0F399                           loc_BANKF_F33F:
0F399 29 03                     	AND #ObjAttrib_Palette
0F39B 05 64                     	ORA PlayerAttributes
0F39D 85 64                     	STA PlayerAttributes
0F39F                           
0F39F                           loc_BANKF_F345:
0F39F AD DF 04                  	LDA QuicksandDepth
0F3A2 F0 00                     	BEQ loc_BANKF_F350
0F3A4                           
0F3A4 A9 20                     	LDA #ObjAttrib_BehindBackground
0F3A6 05 64                     	ORA PlayerAttributes
0F3A8 85 64                     	STA PlayerAttributes
0F3AA                           
0F3AA                           loc_BANKF_F350:
0F3AA AD 28 04                  	LDA PlayerScreenX
0F3AD 8D 23 02                  	STA SpriteDMAArea + $23
0F3B0 8D 2B 02                  	STA SpriteDMAArea + $2B
0F3B3 18                        	CLC
0F3B4 69 08                     	ADC #$08
0F3B6 8D 27 02                  	STA SpriteDMAArea + $27
0F3B9 8D 2F 02                  	STA SpriteDMAArea + $2F
0F3BC AD 2B 04                  	LDA PlayerScreenYLo
0F3BF 85 00                     	STA byte_RAM_0
0F3C1 AD 2A 04                  	LDA PlayerScreenYHi
0F3C4 85 01                     	STA byte_RAM_1
0F3C6 A4 C7                     	LDY PlayerAnimationFrame
0F3C8 C0 04                     	CPY #$04
0F3CA F0 00                     	BEQ loc_BANKF_F382
0F3CC                           
0F3CC AD F6 06                  	LDA PlayerCurrentSize
0F3CF F0 00                     	BEQ loc_BANKF_F382
0F3D1                           
0F3D1 A5 00                     	LDA byte_RAM_0
0F3D3 18                        	CLC
0F3D4 69 08                     	ADC #$08
0F3D6 85 00                     	STA byte_RAM_0
0F3D8 90 00                     	BCC loc_BANKF_F382
0F3DA                           
0F3DA E6 01                     	INC byte_RAM_1
0F3DC                           
0F3DC                           loc_BANKF_F382:
0F3DC A5 8F                     	LDA CurrentCharacter
0F3DE C9 01                     	CMP #Character_Princess
0F3E0 F0 00                     	BEQ loc_BANKF_F394
0F3E2                           
0F3E2 C0 00                     	CPY #$00
0F3E4 D0 00                     	BNE loc_BANKF_F394
0F3E6                           
0F3E6 A5 00                     	LDA byte_RAM_0
0F3E8 D0 00                     	BNE loc_BANKF_F392
0F3EA                           
0F3EA C6 01                     	DEC byte_RAM_1
0F3EC                           
0F3EC                           loc_BANKF_F392:
0F3EC C6 00                     	DEC byte_RAM_0
0F3EE                           
0F3EE                           loc_BANKF_F394:
0F3EE 20 00 00                  	JSR FindSpriteSlot
0F3F1                           
0F3F1 A5 01                     	LDA byte_RAM_1
0F3F3 D0 00                     	BNE loc_BANKF_F3A6
0F3F5                           
0F3F5 A5 00                     	LDA byte_RAM_0
0F3F7 99 00 02                  	STA SpriteDMAArea, Y
0F3FA 8D 20 02                  	STA SpriteDMAArea + $20
0F3FD 8D 24 02                  	STA SpriteDMAArea + $24
0F400                           
0F400                           loc_BANKF_F3A6:
0F400 A5 00                     	LDA byte_RAM_0
0F402 18                        	CLC
0F403 69 10                     	ADC #$10
0F405 85 00                     	STA byte_RAM_0
0F407 A5 01                     	LDA byte_RAM_1
0F409 69 00                     	ADC #$00
0F40B D0 00                     	BNE loc_BANKF_F3BB
0F40D                           
0F40D A5 00                     	LDA byte_RAM_0
0F40F 8D 28 02                  	STA SpriteDMAArea + $28
0F412 8D 2C 02                  	STA SpriteDMAArea + $2C
0F415                           
0F415                           loc_BANKF_F3BB:
0F415 AD CA 04                  	LDA CrouchJumpTimer
0F418 C9 3C                     	CMP #$3C
0F41A 90 00                     	BCC loc_BANKF_F3CA
0F41C                           
0F41C A5 10                     	LDA byte_RAM_10
0F41E 29 01                     	AND #ObjAttrib_Palette1
0F420 05 64                     	ORA PlayerAttributes
0F422 85 64                     	STA PlayerAttributes
0F424                           
0F424                           loc_BANKF_F3CA:
0F424 A5 9D                     	LDA PlayerDirection
0F426 4A                        	LSR A
0F427 6A                        	ROR A
0F428 6A                        	ROR A
0F429 05 64                     	ORA PlayerAttributes
0F42B 29 FC                     	AND #%11111100
0F42D 09 01                     	ORA #ObjAttrib_Palette1
0F42F 99 02 02                  	STA SpriteDMAArea + 2, Y
0F432 A6 C7                     	LDX PlayerAnimationFrame
0F434 E0 07                     	CPX #$07
0F436 F0 00                     	BEQ loc_BANKF_F3E2
0F438                           
0F438 E0 04                     	CPX #$04
0F43A D0 00                     	BNE loc_BANKF_F3EE
0F43C                           
0F43C                           loc_BANKF_F3E2:
0F43C A5 64                     	LDA PlayerAttributes
0F43E 8D 22 02                  	STA SpriteDMAArea + $22
0F441 8D 2A 02                  	STA SpriteDMAArea + $2A
0F444 09 40                     	ORA #$40
0F446 D0 00                     	BNE loc_BANKF_F3F8
0F448                           
0F448                           loc_BANKF_F3EE:
0F448 29 FC                     	AND #$FC
0F44A 05 64                     	ORA PlayerAttributes
0F44C 8D 22 02                  	STA SpriteDMAArea + $22
0F44F 8D 2A 02                  	STA SpriteDMAArea + $2A
0F452                           
0F452                           loc_BANKF_F3F8:
0F452 8D 26 02                  	STA SpriteDMAArea + $26
0F455 8D 2E 02                  	STA SpriteDMAArea + $2E
0F458 BD D8 F2                  	LDA CharacterFrameEyeTiles, X
0F45B D0 00                     	BNE loc_BANKF_F408
0F45D                           
0F45D A6 8F                     	LDX CurrentCharacter
0F45F BD E3 F2                  	LDA CharacterEyeTiles, X
0F462                           
0F462                           loc_BANKF_F408:
0F462 99 01 02                  	STA SpriteDMAArea + 1, Y
0F465                           
0F465 A5 C7                     	LDA PlayerAnimationFrame
0F467 C9 06                     	CMP #$06
0F469 B0 00                     	BCS loc_BANKF_F413
0F46B                           
0F46B 05 9C                     	ORA HoldingItem
0F46D                           
0F46D                           loc_BANKF_F413:
0F46D 0A                        	ASL A
0F46E 0A                        	ASL A
0F46F AA                        	TAX
0F470 A5 9D                     	LDA PlayerDirection
0F472 D0 00                     	BNE loc_BANKF_F44A
0F474                           
0F474 AD 23 02                  	LDA SpriteDMAArea + $23
0F477 99 03 02                  	STA SpriteDMAArea + 3, Y
0F47A BD E7 F2                  	LDA CharacterTiles_Walk1, X
0F47D 8D 21 02                  	STA SpriteDMAArea + $21
0F480 BD E8 F2                  	LDA CharacterTiles_Walk1 + 1, X
0F483 8D 25 02                  	STA SpriteDMAArea + $25
0F486 AD F6 06                  	LDA PlayerCurrentSize
0F489 D0 00                     	BNE loc_BANKF_F43F
0F48B                           
0F48B A5 8F                     	LDA CurrentCharacter
0F48D C9 01                     	CMP #Character_Princess
0F48F D0 00                     	BNE loc_BANKF_F43F
0F491                           
0F491 A5 C7                     	LDA PlayerAnimationFrame
0F493 C9 06                     	CMP #SpriteAnimation_Jumping
0F495 D0 00                     	BNE loc_BANKF_F43F
0F497                           
0F497 A2 2A                     	LDX #$2A
0F499                           
0F499                           loc_BANKF_F43F:
0F499 BD E9 F2                  	LDA CharacterTiles_Walk1 + 2, X
0F49C 8D 29 02                  	STA SpriteDMAArea + $29
0F49F BD EA F2                  	LDA CharacterTiles_Walk1 + 3, X
0F4A2 D0 00                     	BNE loc_BANKF_F478
0F4A4                           
0F4A4                           loc_BANKF_F44A:
0F4A4 AD 27 02                  	LDA SpriteDMAArea + $27
0F4A7 99 03 02                  	STA SpriteDMAArea + 3, Y
0F4AA BD E8 F2                  	LDA CharacterTiles_Walk1 + 1, X
0F4AD 8D 21 02                  	STA SpriteDMAArea + $21
0F4B0 BD E7 F2                  	LDA CharacterTiles_Walk1, X
0F4B3 8D 25 02                  	STA SpriteDMAArea + $25
0F4B6 AD F6 06                  	LDA PlayerCurrentSize
0F4B9 D0 00                     	BNE loc_BANKF_F46F
0F4BB                           
0F4BB A5 8F                     	LDA CurrentCharacter
0F4BD C9 01                     	CMP #Character_Princess
0F4BF D0 00                     	BNE loc_BANKF_F46F
0F4C1                           
0F4C1 A5 C7                     	LDA PlayerAnimationFrame
0F4C3 C9 06                     	CMP #SpriteAnimation_Jumping
0F4C5 D0 00                     	BNE loc_BANKF_F46F
0F4C7                           
0F4C7 A2 2A                     	LDX #$2A
0F4C9                           
0F4C9                           loc_BANKF_F46F:
0F4C9 BD EA F2                  	LDA CharacterTiles_Walk1 + 3, X
0F4CC 8D 29 02                  	STA SpriteDMAArea + $29
0F4CF BD E9 F2                  	LDA CharacterTiles_Walk1 + 2, X
0F4D2                           
0F4D2                           loc_BANKF_F478:
0F4D2 8D 2D 02                  	STA SpriteDMAArea + $2D
0F4D5 60                        	RTS
0F4D6                           
0F4D6                           
0F4D6                           ; =============== S U B R O U T I N E =======================================
0F4D6                           
0F4D6                           SetAreaStartPage:
0F4D6 A5 EC                     	LDA IsHorizontalLevel
0F4D8 D0 00                     	BNE SetAreaStartPage_HorizontalLevel
0F4DA                           
0F4DA A4 1E                     	LDY PlayerYHi
0F4DC A5 32                     	LDA PlayerYLo
0F4DE 20 00 00                  	JSR GetVerticalAreaStartPage
0F4E1                           
0F4E1 98                        	TYA
0F4E2 10 00                     	BPL SetAreaStartPage_SetAndExit
0F4E4 A9 00                     	LDA #$00
0F4E6 F0 00                     	BEQ SetAreaStartPage_SetAndExit
0F4E8                           
0F4E8                           SetAreaStartPage_HorizontalLevel:
0F4E8 A5 14                     	LDA PlayerXHi
0F4EA                           
0F4EA                           SetAreaStartPage_SetAndExit:
0F4EA 8D 35 05                  	STA CurrentLevelPage
0F4ED 60                        	RTS
0F4EE                           
0F4EE                           ;
0F4EE                           ; Check if the player position requires vertical scrolling
0F4EE                           ;
0F4EE                           DetermineVerticalScroll:
0F4EE                           	; Exit if vertical scrolling is already happening
0F4EE A6 D8                     	LDX NeedsScroll
0F4F0 D0 00                     	BNE DetermineVerticalScroll_Exit
0F4F2                           
0F4F2                           	; Exit if the player is doing any kind of transition
0F4F2 A5 50                     	LDA PlayerState
0F4F4 C9 02                     	CMP #PlayerState_Lifting
0F4F6 B0 00                     	BCS DetermineVerticalScroll_Exit
0F4F8                           
0F4F8                           	; Use the player's position to detmine how to scroll
0F4F8 AD 2B 04                  	LDA PlayerScreenYLo
0F4FB AC 2A 04                  	LDY PlayerScreenYHi
0F4FE 30 00                     	BMI DetermineVerticalScroll_ScrollUpOnGround ; eg. `PlayerScreenYHi == $FF`
0F500 D0 00                     	BNE DetermineVerticalScroll_ScrollDown ; eg. `PlayerScreenYHi == $01`
0F502                           
0F502                           	; Scroll down if player is near the bottom
0F502 C9 B4                     	CMP #$B4
0F504 B0 00                     	BCS DetermineVerticalScroll_ScrollDown
0F506                           
0F506                           	; Scroll up if the player is near the top
0F506 C9 21                     	CMP #$21
0F508 B0 00                     	BCS DetermineVerticalScroll_StartFromStationary
0F50A                           
0F50A                           ; Don't start scrolling for offscreen player until they're standing or climbing
0F50A                           DetermineVerticalScroll_ScrollUpOnGround:
0F50A A4 99                     	LDY PlayerInAir
0F50C D0 00                     	BNE DetermineVerticalScroll_StartFromStationary ; Player is in the air
0F50E F0 00                     	BEQ DetermineVerticalScroll_ScrollUp ; Player is NOT in the air
0F510                           
0F510                           DetermineVerticalScroll_ScrollDown:
0F510                           	; Set X = $02, scroll down
0F510 E8                        	INX
0F511                           
0F511                           DetermineVerticalScroll_ScrollUp:
0F511                           	; Set X = $01, scroll up
0F511 E8                        	INX
0F512                           
0F512                           DetermineVerticalScroll_StartFromStationary:
0F512 AD 25 04                  	LDA VerticalScrollDirection
0F515 8E 25 04                  	STX VerticalScrollDirection
0F518 D0 00                     	BNE DetermineVerticalScroll_Exit
0F51A                           
0F51A                           	; We weren't already vertically scrolling, but we need to start
0F51A 86 D8                     	STX NeedsScroll
0F51C                           
0F51C                           DetermineVerticalScroll_Exit:
0F51C 60                        	RTS
0F51D                           
0F51D                           
0F51D                           ; Determines start page for vertical area
0F51D                           GetVerticalAreaStartPage:
0F51D 85 0F                     	STA byte_RAM_F
0F51F 98                        	TYA
0F520 30 00                     	BMI locret_BANKF_F4D9
0F522                           
0F522 0A                        	ASL A
0F523 0A                        	ASL A
0F524 0A                        	ASL A
0F525 0A                        	ASL A
0F526 18                        	CLC
0F527 65 0F                     	ADC byte_RAM_F
0F529 B0 00                     	BCS loc_BANKF_F4D5
0F52B                           
0F52B C9 F0                     	CMP #$F0
0F52D 90 00                     	BCC locret_BANKF_F4D9
0F52F                           
0F52F                           loc_BANKF_F4D5:
0F52F 18                        	CLC
0F530 69 10                     	ADC #$10
0F532 C8                        	INY
0F533                           
0F533                           locret_BANKF_F4D9:
0F533 60                        	RTS
0F534                           
0F534                           ; End of function GetVerticalAreaStartPage
0F534                           
0F534                           
0F534                           SpriteFlickerDMAOffset:
0F534 C0                        	.db $C0
0F535 70                        	.db $70
0F536 80                        	.db $80
0F537 50                        	.db $50
0F538 A0                        	.db $A0
0F539 40                        	.db $40
0F53A B0                        	.db $B0
0F53B 60                        	.db $60
0F53C 90                        	.db $90
0F53D C0                        	.db $C0
0F53E 70                        	.db $70
0F53F 80                        	.db $80
0F540 50                        	.db $50
0F541 A0                        	.db $A0
0F542 40                        	.db $40
0F543 B0                        	.db $B0
0F544 60                        	.db $60
0F545                           
0F545                           ; Sprite display configuration
0F545                           ObjectAttributeTable:
0F545 01                        	.db ObjAttrib_Palette1 ; $00 Enemy_Heart
0F546 01                        	.db ObjAttrib_Palette1 ; $01 Enemy_ShyguyRed
0F547 01                        	.db ObjAttrib_Palette1 ; $02 Enemy_Tweeter
0F548 03                        	.db ObjAttrib_Palette3 ; $03 Enemy_ShyguyPink
0F549 02                        	.db ObjAttrib_Palette2 ; $04 Enemy_Porcupo
0F54A 01                        	.db ObjAttrib_Palette1 ; $05 Enemy_SnifitRed
0F54B 02                        	.db ObjAttrib_Palette2 ; $06 Enemy_SnifitGray
0F54C 03                        	.db ObjAttrib_Palette3 ; $07 Enemy_SnifitPink
0F54D 41                        	.db ObjAttrib_Palette1 | ObjAttrib_16x32 ; $08 Enemy_Ostro
0F54E 01                        	.db ObjAttrib_Palette1 ; $09 Enemy_BobOmb
0F54F 45                        	.db ObjAttrib_Palette1 | ObjAttrib_Horizontal | ObjAttrib_16x32 ; $0A Enemy_AlbatossCarryingBobOmb
0F550 45                        	.db ObjAttrib_Palette1 | ObjAttrib_Horizontal | ObjAttrib_16x32 ; $0B Enemy_AlbatossStartRight
0F551 45                        	.db ObjAttrib_Palette1 | ObjAttrib_Horizontal | ObjAttrib_16x32 ; $0C Enemy_AlbatossStartLeft
0F552 01                        	.db ObjAttrib_Palette1 ; $0D Enemy_NinjiRunning
0F553 01                        	.db ObjAttrib_Palette1 ; $0E Enemy_NinjiJumping
0F554 01                        	.db ObjAttrib_Palette1 ; $0F Enemy_BeezoDiving
0F555 02                        	.db ObjAttrib_Palette2 ; $10 Enemy_BeezoStraight
0F556 11                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored ; $11 Enemy_WartBubble
0F557 0D                        	.db ObjAttrib_Palette1 | ObjAttrib_Horizontal | ObjAttrib_FrontFacing ; $12 Enemy_Pidgit
0F558 09                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing ; $13 Enemy_Trouter
0F559 11                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored ; $14 Enemy_Hoopstar
0F55A 00                        	.db ObjAttrib_Palette0 ; $15 Enemy_JarGeneratorShyguy
0F55B 00                        	.db ObjAttrib_Palette0 ; $16 Enemy_JarGeneratorBobOmb
0F55C 09                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing ; $17 Enemy_Phanto
0F55D C1                        	.db ObjAttrib_Palette1 | ObjAttrib_16x32 | ObjAttrib_UpsideDown ; $18 Enemy_CobratJar
0F55E 41                        	.db ObjAttrib_Palette1 | ObjAttrib_16x32 ; $19 Enemy_CobratSand
0F55F 0A                        	.db ObjAttrib_Palette2 | ObjAttrib_FrontFacing ; $1A Enemy_Pokey
0F560 0A                        	.db ObjAttrib_Palette2 | ObjAttrib_FrontFacing ; $1B Enemy_Bullet
0F561 42                        	.db ObjAttrib_Palette2 | ObjAttrib_16x32 ; $1C Enemy_Birdo
0F562 43                        	.db ObjAttrib_Palette3 | ObjAttrib_16x32 ; $1D Enemy_Mouser
0F563 09                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing ; $1E Enemy_Egg
0F564 0A                        	.db ObjAttrib_Palette2 | ObjAttrib_FrontFacing ; $1F Enemy_Tryclyde
0F565 11                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored ; $20 Enemy_Fireball
0F566 41                        	.db ObjAttrib_Palette1 | ObjAttrib_16x32 ; $21 Enemy_Clawgrip
0F567 02                        	.db ObjAttrib_Palette2 ; $22 Enemy_ClawgripRock
0F568 01                        	.db ObjAttrib_Palette1 ; $23 Enemy_PanserStationaryFiresAngled
0F569 03                        	.db ObjAttrib_Palette3 ; $24 Enemy_PanserWalking
0F56A 02                        	.db ObjAttrib_Palette2 ; $25 Enemy_PanserStationaryFiresUp
0F56B 01                        	.db ObjAttrib_Palette1 ; $26 Enemy_Autobomb
0F56C 01                        	.db ObjAttrib_Palette1 ; $27 Enemy_AutobombFire
0F56D 09                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing ; $28 Enemy_WhaleSpout
0F56E 01                        	.db ObjAttrib_Palette1 ; $29 Enemy_Flurry
0F56F 41                        	.db ObjAttrib_Palette1 | ObjAttrib_16x32 ; $2A Enemy_Fryguy
0F570 01                        	.db ObjAttrib_Palette1 ; $2B Enemy_FryguySplit
0F571 4F                        	.db ObjAttrib_Palette3 | ObjAttrib_Horizontal | ObjAttrib_FrontFacing | ObjAttrib_16x32 ; $2C Enemy_Wart
0F572 41                        	.db ObjAttrib_Palette1 | ObjAttrib_16x32 ; $2D Enemy_HawkmouthBoss
0F573 11                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored ; $2E Enemy_Spark1
0F574 11                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored ; $2F Enemy_Spark2
0F575 11                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored ; $30 Enemy_Spark3
0F576 11                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored ; $31 Enemy_Spark4
0F577 91                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored | ObjAttrib_UpsideDown ; $32 Enemy_VegetableSmall
0F578 91                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored | ObjAttrib_UpsideDown ; $33 Enemy_VegetableLarge
0F579 92                        	.db ObjAttrib_Palette2 | ObjAttrib_Mirrored | ObjAttrib_UpsideDown ; $34 Enemy_VegetableWart
0F57A 91                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored | ObjAttrib_UpsideDown ; $35 Enemy_Shell
0F57B 91                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored | ObjAttrib_UpsideDown ; $36 Enemy_Coin
0F57C 81                        	.db ObjAttrib_Palette1 | ObjAttrib_UpsideDown ; $37 Enemy_Bomb
0F57D 81                        	.db ObjAttrib_Palette1 | ObjAttrib_UpsideDown ; $38 Enemy_Rocket
0F57E 09                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing ; $39 Enemy_MushroomBlock
0F57F 89                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing | ObjAttrib_UpsideDown ; $3A Enemy_POWBlock
0F580 4D                        	.db ObjAttrib_Palette1 | ObjAttrib_Horizontal | ObjAttrib_FrontFacing | ObjAttrib_16x32 ; $3B Enemy_FallingLogs
0F581 09                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing ; $3C Enemy_SubspaceDoor
0F582 09                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing ; $3D Enemy_Key
0F583 89                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing | ObjAttrib_UpsideDown ; $3E Enemy_SubspacePotion
0F584 11                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored ; $3F Enemy_Mushroom
0F585 89                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing | ObjAttrib_UpsideDown ; $40 Enemy_Mushroom1up
0F586 45                        	.db ObjAttrib_Palette1 | ObjAttrib_Horizontal | ObjAttrib_16x32 ; $41 Enemy_FlyingCarpet
0F587 41                        	.db ObjAttrib_Palette1 | ObjAttrib_16x32 ; $42 Enemy_HawkmouthRight
0F588 41                        	.db ObjAttrib_Palette1 | ObjAttrib_16x32 ; $43 Enemy_HawkmouthLeft
0F589 11                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored ; $44 Enemy_CrystalBall
0F58A 12                        	.db ObjAttrib_Palette2 | ObjAttrib_Mirrored ; $45 Enemy_Starman
0F58B 92                        	.db ObjAttrib_Palette2 | ObjAttrib_Mirrored | ObjAttrib_UpsideDown ; $46 Enemy_Stopwatch
0F58C                           
0F58C                           ;
0F58C                           ; Enemy Behavior 46E Table
0F58C                           ; ========================
0F58C                           ;
0F58C                           ;   bit 7 ($80) - uses mirrored sprite for animation
0F58C                           ;   bit 6 ($40) - double speed
0F58C                           ;   bit 5 ($20) - wider sprite? used for mouser
0F58C                           ;   bit 4 ($10) - use tilemap 2
0F58C                           ;   bit 3 ($08) - squawk on death (prevents despawning offscreen?)
0F58C                           ;   bit 2 ($04) - disable collision with other enemies
0F58C                           ;   bit 1 ($02) - unliftable
0F58C                           ;   bit 0 ($01) - hurts when touched from above
0F58C                           EnemyArray_46E_Data:
0F58C 04                        	.db SpriteFlags46E_NoEnemyCollision ; $00 Enemy_Heart
0F58D 00                        	.db SpriteFlags46E_00 ; $01 Enemy_ShyguyRed
0F58E 00                        	.db SpriteFlags46E_00 ; $02 Enemy_Tweeter
0F58F 00                        	.db SpriteFlags46E_00 ; $03 Enemy_ShyguyPink
0F590 03                        	.db SpriteFlags46E_Damage | SpriteFlags46E_Unliftable ; $04 Enemy_Porcupo
0F591 00                        	.db SpriteFlags46E_00 ; $05 Enemy_SnifitRed
0F592 00                        	.db SpriteFlags46E_00 ; $06 Enemy_SnifitGray
0F593 00                        	.db SpriteFlags46E_00 ; $07 Enemy_SnifitPink
0F594 50                        	.db SpriteFlags46E_Tilemap2 | SpriteFlags46E_DoubleSpeed ; $08 Enemy_Ostro
0F595 40                        	.db SpriteFlags46E_DoubleSpeed ; $09 Enemy_BobOmb
0F596 42                        	.db SpriteFlags46E_Unliftable | SpriteFlags46E_DoubleSpeed ; $0A Enemy_AlbatossCarryingBobOmb
0F597 42                        	.db SpriteFlags46E_Unliftable | SpriteFlags46E_DoubleSpeed ; $0B Enemy_AlbatossStartRight
0F598 42                        	.db SpriteFlags46E_Unliftable | SpriteFlags46E_DoubleSpeed ; $0C Enemy_AlbatossStartLeft
0F599 40                        	.db SpriteFlags46E_DoubleSpeed ; $0D Enemy_NinjiRunning
0F59A 40                        	.db SpriteFlags46E_DoubleSpeed ; $0E Enemy_NinjiJumping
0F59B 40                        	.db SpriteFlags46E_DoubleSpeed ; $0F Enemy_BeezoDiving
0F59C 40                        	.db SpriteFlags46E_DoubleSpeed ; $10 Enemy_BeezoStraight
0F59D 13                        	.db SpriteFlags46E_Damage | SpriteFlags46E_Unliftable | SpriteFlags46E_Tilemap2 ; $11 Enemy_WartBubble
0F59E D0                        	.db SpriteFlags46E_Tilemap2 | SpriteFlags46E_DoubleSpeed | SpriteFlags46E_MirrorAnimation ; $12 Enemy_Pidgit
0F59F 80                        	.db SpriteFlags46E_MirrorAnimation ; $13 Enemy_Trouter
0F5A0 00                        	.db SpriteFlags46E_00 ; $14 Enemy_Hoopstar
0F5A1 06                        	.db SpriteFlags46E_Unliftable | SpriteFlags46E_NoEnemyCollision ; $15 Enemy_JarGeneratorShyguy
0F5A2 06                        	.db SpriteFlags46E_Unliftable | SpriteFlags46E_NoEnemyCollision ; $16 Enemy_JarGeneratorBobOmb
0F5A3 07                        	.db SpriteFlags46E_Damage | SpriteFlags46E_Unliftable | SpriteFlags46E_NoEnemyCollision ; $17 Enemy_Phanto
0F5A4 10                        	.db SpriteFlags46E_Tilemap2 ; $18 Enemy_CobratJar
0F5A5 50                        	.db SpriteFlags46E_Tilemap2 | SpriteFlags46E_DoubleSpeed ; $19 Enemy_CobratSand
0F5A6 90                        	.db SpriteFlags46E_Tilemap2 | SpriteFlags46E_MirrorAnimation ; $1A Enemy_Pokey
0F5A7 07                        	.db SpriteFlags46E_Damage | SpriteFlags46E_Unliftable | SpriteFlags46E_NoEnemyCollision ; $1B Enemy_Bullet
0F5A8 0A                        	.db SpriteFlags46E_Unliftable | SpriteFlags46E_DeathSquawk ; $1C Enemy_Birdo
0F5A9 3B                        	.db SpriteFlags46E_Damage | SpriteFlags46E_Unliftable | SpriteFlags46E_DeathSquawk | SpriteFlags46E_Tilemap2 | SpriteFlags46E_WideSprite ; $1D Enemy_Mouser
0F5AA 40                        	.db SpriteFlags46E_DoubleSpeed ; $1E Enemy_Egg
0F5AB 18                        	.db SpriteFlags46E_DeathSquawk | SpriteFlags46E_Tilemap2 ; $1F Enemy_Tryclyde
0F5AC 07                        	.db SpriteFlags46E_Damage | SpriteFlags46E_Unliftable | SpriteFlags46E_NoEnemyCollision ; $20 Enemy_Fireball
0F5AD 1B                        	.db SpriteFlags46E_Damage | SpriteFlags46E_Unliftable | SpriteFlags46E_DeathSquawk | SpriteFlags46E_Tilemap2 ; $21 Enemy_Clawgrip
0F5AE 10                        	.db SpriteFlags46E_Tilemap2 ; $22 Enemy_ClawgripRock
0F5AF 07                        	.db SpriteFlags46E_Damage | SpriteFlags46E_Unliftable | SpriteFlags46E_NoEnemyCollision ; $23 Enemy_PanserStationaryFiresAngled
0F5B0 07                        	.db SpriteFlags46E_Damage | SpriteFlags46E_Unliftable | SpriteFlags46E_NoEnemyCollision ; $24 Enemy_PanserWalking
0F5B1 07                        	.db SpriteFlags46E_Damage | SpriteFlags46E_Unliftable | SpriteFlags46E_NoEnemyCollision ; $25 Enemy_PanserStationaryFiresUp
0F5B2 50                        	.db SpriteFlags46E_Tilemap2 | SpriteFlags46E_DoubleSpeed ; $26 Enemy_Autobomb
0F5B3 53                        	.db SpriteFlags46E_Damage | SpriteFlags46E_Unliftable | SpriteFlags46E_Tilemap2 | SpriteFlags46E_DoubleSpeed ; $27 Enemy_AutobombFire
0F5B4 96                        	.db SpriteFlags46E_Unliftable | SpriteFlags46E_NoEnemyCollision | SpriteFlags46E_Tilemap2 | SpriteFlags46E_MirrorAnimation ; $28 Enemy_WhaleSpout
0F5B5 50                        	.db SpriteFlags46E_Tilemap2 | SpriteFlags46E_DoubleSpeed ; $29 Enemy_Flurry
0F5B6 9B                        	.db SpriteFlags46E_Damage | SpriteFlags46E_Unliftable | SpriteFlags46E_DeathSquawk | SpriteFlags46E_Tilemap2 | SpriteFlags46E_MirrorAnimation ; $2A Enemy_Fryguy
0F5B7 D3                        	.db SpriteFlags46E_Damage | SpriteFlags46E_Unliftable | SpriteFlags46E_Tilemap2 | SpriteFlags46E_DoubleSpeed | SpriteFlags46E_MirrorAnimation ; $2B Enemy_FryguySplit
0F5B8 1B                        	.db SpriteFlags46E_Damage | SpriteFlags46E_Unliftable | SpriteFlags46E_DeathSquawk | SpriteFlags46E_Tilemap2 ; $2C Enemy_Wart
0F5B9 0B                        	.db SpriteFlags46E_Damage | SpriteFlags46E_Unliftable | SpriteFlags46E_DeathSquawk ; $2D Enemy_HawkmouthBoss
0F5BA 03                        	.db SpriteFlags46E_Damage | SpriteFlags46E_Unliftable ; $2E Enemy_Spark1
0F5BB 03                        	.db SpriteFlags46E_Damage | SpriteFlags46E_Unliftable ; $2F Enemy_Spark2
0F5BC 03                        	.db SpriteFlags46E_Damage | SpriteFlags46E_Unliftable ; $30 Enemy_Spark3
0F5BD 03                        	.db SpriteFlags46E_Damage | SpriteFlags46E_Unliftable ; $31 Enemy_Spark4
0F5BE 00                        	.db SpriteFlags46E_00 ; $32 Enemy_VegetableSmall
0F5BF 00                        	.db SpriteFlags46E_00 ; $33 Enemy_VegetableLarge
0F5C0 00                        	.db SpriteFlags46E_00 ; $34 Enemy_VegetableWart
0F5C1 00                        	.db SpriteFlags46E_00 ; $35 Enemy_Shell
0F5C2 04                        	.db SpriteFlags46E_NoEnemyCollision ; $36 Enemy_Coin
0F5C3 04                        	.db SpriteFlags46E_NoEnemyCollision ; $37 Enemy_Bomb
0F5C4 04                        	.db SpriteFlags46E_NoEnemyCollision ; $38 Enemy_Rocket
0F5C5 00                        	.db SpriteFlags46E_00 ; $39 Enemy_MushroomBlock
0F5C6 00                        	.db SpriteFlags46E_00 ; $3A Enemy_POWBlock
0F5C7 06                        	.db SpriteFlags46E_Unliftable | SpriteFlags46E_NoEnemyCollision ; $3B Enemy_FallingLogs
0F5C8 04                        	.db SpriteFlags46E_NoEnemyCollision ; $3C Enemy_SubspaceDoor
0F5C9 20                        	.db SpriteFlags46E_00 | SpriteFlags46E_WideSprite ; $3D Enemy_Key
0F5CA 04                        	.db SpriteFlags46E_NoEnemyCollision ; $3E Enemy_SubspacePotion
0F5CB 04                        	.db SpriteFlags46E_NoEnemyCollision ; $3F Enemy_Mushroom
0F5CC 04                        	.db SpriteFlags46E_NoEnemyCollision ; $40 Enemy_Mushroom1up
0F5CD 16                        	.db SpriteFlags46E_Unliftable | SpriteFlags46E_NoEnemyCollision | SpriteFlags46E_Tilemap2 ; $41 Enemy_FlyingCarpet
0F5CE 06                        	.db SpriteFlags46E_Unliftable | SpriteFlags46E_NoEnemyCollision ; $42 Enemy_HawkmouthRight
0F5CF 06                        	.db SpriteFlags46E_Unliftable | SpriteFlags46E_NoEnemyCollision ; $43 Enemy_HawkmouthLeft
0F5D0 0C                        	.db SpriteFlags46E_NoEnemyCollision | SpriteFlags46E_DeathSquawk ; $44 Enemy_CrystalBall
0F5D1 04                        	.db SpriteFlags46E_NoEnemyCollision ; $45 Enemy_Starman
0F5D2 04                        	.db SpriteFlags46E_NoEnemyCollision ; $46 Enemy_Stopwatch
0F5D3                           
0F5D3                           ;
0F5D3                           ; Index for tile collision bounding box table
0F5D3                           ;
0F5D3                           EnemyArray_492_Data:
0F5D3 00                        	.db $00 ; $00 Enemy_Heart
0F5D4 05                        	.db $05 ; $01 Enemy_ShyguyRed
0F5D5 05                        	.db $05 ; $02 Enemy_Tweeter
0F5D6 05                        	.db $05 ; $03 Enemy_ShyguyPink
0F5D7 05                        	.db $05 ; $04 Enemy_Porcupo
0F5D8 05                        	.db $05 ; $05 Enemy_SnifitRed
0F5D9 05                        	.db $05 ; $06 Enemy_SnifitGray
0F5DA 05                        	.db $05 ; $07 Enemy_SnifitPink
0F5DB 0C                        	.db $0C ; $08 Enemy_Ostro
0F5DC 05                        	.db $05 ; $09 Enemy_BobOmb
0F5DD 05                        	.db $05 ; $0A Enemy_AlbatossCarryingBobOmb
0F5DE 05                        	.db $05 ; $0B Enemy_AlbatossStartRight
0F5DF 05                        	.db $05 ; $0C Enemy_AlbatossStartLeft
0F5E0 05                        	.db $05 ; $0D Enemy_NinjiRunning
0F5E1 05                        	.db $05 ; $0E Enemy_NinjiJumping
0F5E2 05                        	.db $05 ; $0F Enemy_BeezoDiving
0F5E3 05                        	.db $05 ; $10 Enemy_BeezoStraight
0F5E4 05                        	.db $05 ; $11 Enemy_WartBubble
0F5E5 05                        	.db $05 ; $12 Enemy_Pidgit
0F5E6 05                        	.db $05 ; $13 Enemy_Trouter
0F5E7 05                        	.db $05 ; $14 Enemy_Hoopstar
0F5E8 0D                        	.db $0D ; $15 Enemy_JarGeneratorShyguy
0F5E9 0D                        	.db $0D ; $16 Enemy_JarGeneratorBobOmb
0F5EA 05                        	.db $05 ; $17 Enemy_Phanto
0F5EB 0C                        	.db $0C ; $18 Enemy_CobratJar
0F5EC 0C                        	.db $0C ; $19 Enemy_CobratSand
0F5ED 05                        	.db $05 ; $1A Enemy_Pokey
0F5EE 0D                        	.db $0D ; $1B Enemy_Bullet
0F5EF 0C                        	.db $0C ; $1C Enemy_Birdo
0F5F0 0C                        	.db $0C ; $1D Enemy_Mouser
0F5F1 05                        	.db $05 ; $1E Enemy_Egg
0F5F2 0E                        	.db $0E ; $1F Enemy_Tryclyde
0F5F3 0D                        	.db $0D ; $20 Enemy_Fireball
0F5F4 0C                        	.db $0C ; $21 Enemy_Clawgrip
0F5F5 05                        	.db $05 ; $22 Enemy_ClawgripRock
0F5F6 05                        	.db $05 ; $23 Enemy_PanserStationaryFiresAngled
0F5F7 05                        	.db $05 ; $24 Enemy_PanserWalking
0F5F8 05                        	.db $05 ; $25 Enemy_PanserStationaryFiresUp
0F5F9 0C                        	.db $0C ; $26 Enemy_Autobomb
0F5FA 05                        	.db $05 ; $27 Enemy_AutobombFire
0F5FB 05                        	.db $05 ; $28 Enemy_WhaleSpout
0F5FC 05                        	.db $05 ; $29 Enemy_Flurry
0F5FD 05                        	.db $05 ; $2A Enemy_Fryguy
0F5FE 05                        	.db $05 ; $2B Enemy_FryguySplit
0F5FF 05                        	.db $05 ; $2C Enemy_Wart
0F600 00                        	.db $00 ; $2D Enemy_HawkmouthBoss
0F601 0F                        	.db $0F ; $2E Enemy_Spark1
0F602 0F                        	.db $0F ; $2F Enemy_Spark2
0F603 0F                        	.db $0F ; $30 Enemy_Spark3
0F604 0F                        	.db $0F ; $31 Enemy_Spark4
0F605 05                        	.db $05 ; $32 Enemy_VegetableSmall
0F606 05                        	.db $05 ; $33 Enemy_VegetableLarge
0F607 05                        	.db $05 ; $34 Enemy_VegetableWart
0F608 05                        	.db $05 ; $35 Enemy_Shell
0F609 05                        	.db $05 ; $36 Enemy_Coin
0F60A 05                        	.db $05 ; $37 Enemy_Bomb
0F60B 05                        	.db $05 ; $38 Enemy_Rocket
0F60C 04                        	.db $04 ; $39 Enemy_MushroomBlock
0F60D 04                        	.db $04 ; $3A Enemy_POWBlock
0F60E 04                        	.db $04 ; $3B Enemy_FallingLogs
0F60F 04                        	.db $04 ; $3C Enemy_SubspaceDoor
0F610 04                        	.db $04 ; $3D Enemy_Key
0F611 04                        	.db $04 ; $3E Enemy_SubspacePotion
0F612 04                        	.db $04 ; $3F Enemy_Mushroom
0F613 04                        	.db $04 ; $40 Enemy_Mushroom1up
0F614 10                        	.db $10 ; $41 Enemy_FlyingCarpet
0F615 00                        	.db $00 ; $42 Enemy_HawkmouthRight
0F616 00                        	.db $00 ; $43 Enemy_HawkmouthLeft
0F617 05                        	.db $05 ; $44 Enemy_CrystalBall
0F618 05                        	.db $05 ; $45 Enemy_Starman
0F619 05                        	.db $05 ; $46 Enemy_Stopwatch
0F61A                           
0F61A                           ;
0F61A                           ; Index for object collision bounding box table
0F61A                           ;
0F61A                           ObjectHitbox_Data:
0F61A 08                        	.db $08 ; $00 Enemy_Heart
0F61B 02                        	.db $02 ; $01 Enemy_ShyguyRed
0F61C 02                        	.db $02 ; $02 Enemy_Tweeter
0F61D 02                        	.db $02 ; $03 Enemy_ShyguyPink
0F61E 02                        	.db $02 ; $04 Enemy_Porcupo
0F61F 02                        	.db $02 ; $05 Enemy_SnifitRed
0F620 02                        	.db $02 ; $06 Enemy_SnifitGray
0F621 02                        	.db $02 ; $07 Enemy_SnifitPink
0F622 04                        	.db $04 ; $08 Enemy_Ostro
0F623 02                        	.db $02 ; $09 Enemy_BobOmb
0F624 09                        	.db $09 ; $0A Enemy_AlbatossCarryingBobOmb
0F625 09                        	.db $09 ; $0B Enemy_AlbatossStartRight
0F626 09                        	.db $09 ; $0C Enemy_AlbatossStartLeft
0F627 02                        	.db $02 ; $0D Enemy_NinjiRunning
0F628 02                        	.db $02 ; $0E Enemy_NinjiJumping
0F629 02                        	.db $02 ; $0F Enemy_BeezoDiving
0F62A 02                        	.db $02 ; $10 Enemy_BeezoStraight
0F62B 02                        	.db $02 ; $11 Enemy_WartBubble
0F62C 02                        	.db $02 ; $12 Enemy_Pidgit
0F62D 02                        	.db $02 ; $13 Enemy_Trouter
0F62E 02                        	.db $02 ; $14 Enemy_Hoopstar
0F62F 08                        	.db $08 ; $15 Enemy_JarGeneratorShyguy
0F630 08                        	.db $08 ; $16 Enemy_JarGeneratorBobOmb
0F631 02                        	.db $02 ; $17 Enemy_Phanto
0F632 04                        	.db $04 ; $18 Enemy_CobratJar
0F633 04                        	.db $04 ; $19 Enemy_CobratSand
0F634 0E                        	.db $0E ; $1A Enemy_Pokey
0F635 08                        	.db $08 ; $1B Enemy_Bullet
0F636 04                        	.db $04 ; $1C Enemy_Birdo
0F637 04                        	.db $04 ; $1D Enemy_Mouser
0F638 02                        	.db $02 ; $1E Enemy_Egg
0F639 0F                        	.db $0F ; $1F Enemy_Tryclyde
0F63A 02                        	.db $02 ; $20 Enemy_Fireball
0F63B 13                        	.db $13 ; $21 Enemy_Clawgrip
0F63C 02                        	.db $02 ; $22 Enemy_ClawgripRock
0F63D 02                        	.db $02 ; $23 Enemy_PanserStationaryFiresAngled
0F63E 02                        	.db $02 ; $24 Enemy_PanserWalking
0F63F 02                        	.db $02 ; $25 Enemy_PanserStationaryFiresUp
0F640 10                        	.db $10 ; $26 Enemy_Autobomb
0F641 02                        	.db $02 ; $27 Enemy_AutobombFire
0F642 12                        	.db $12 ; $28 Enemy_WhaleSpout
0F643 02                        	.db $02 ; $29 Enemy_Flurry
0F644 0F                        	.db $0F ; $2A Enemy_Fryguy
0F645 02                        	.db $02 ; $2B Enemy_FryguySplit
0F646 11                        	.db $11 ; $2C Enemy_Wart
0F647 0B                        	.db $0B ; $2D Enemy_HawkmouthBoss
0F648 02                        	.db $02 ; $2E Enemy_Spark1
0F649 02                        	.db $02 ; $2F Enemy_Spark2
0F64A 02                        	.db $02 ; $30 Enemy_Spark3
0F64B 02                        	.db $02 ; $31 Enemy_Spark4
0F64C 02                        	.db $02 ; $32 Enemy_VegetableSmall
0F64D 02                        	.db $02 ; $33 Enemy_VegetableLarge
0F64E 02                        	.db $02 ; $34 Enemy_VegetableWart
0F64F 02                        	.db $02 ; $35 Enemy_Shell
0F650 02                        	.db $02 ; $36 Enemy_Coin
0F651 02                        	.db $02 ; $37 Enemy_Bomb
0F652 04                        	.db $04 ; $38 Enemy_Rocket
0F653 03                        	.db $03 ; $39 Enemy_MushroomBlock
0F654 03                        	.db $03 ; $3A Enemy_POWBlock
0F655 07                        	.db $07 ; $3B Enemy_FallingLogs
0F656 04                        	.db $04 ; $3C Enemy_SubspaceDoor
0F657 03                        	.db $03 ; $3D Enemy_Key
0F658 03                        	.db $03 ; $3E Enemy_SubspacePotion
0F659 03                        	.db $03 ; $3F Enemy_Mushroom
0F65A 03                        	.db $03 ; $40 Enemy_Mushroom1up
0F65B 09                        	.db $09 ; $41 Enemy_FlyingCarpet
0F65C 0B                        	.db $0B ; $42 Enemy_HawkmouthRight
0F65D 0B                        	.db $0B ; $43 Enemy_HawkmouthLeft
0F65E 02                        	.db $02 ; $44 Enemy_CrystalBall
0F65F 02                        	.db $02 ; $45 Enemy_Starman
0F660 02                        	.db $02 ; $46 Enemy_Stopwatch
0F661                           
0F661                           ; More collision (post-throw)
0F661                           EnemyPlayerCollisionTable:
0F661 00                        	.db $00 ; $00 Enemy_Heart
0F662 00                        	.db $00 ; $01 Enemy_ShyguyRed
0F663 00                        	.db $00 ; $02 Enemy_Tweeter
0F664 00                        	.db $00 ; $03 Enemy_ShyguyPink
0F665 00                        	.db $00 ; $04 Enemy_Porcupo
0F666 00                        	.db $00 ; $05 Enemy_SnifitRed
0F667 00                        	.db $00 ; $06 Enemy_SnifitGray
0F668 00                        	.db $00 ; $07 Enemy_SnifitPink
0F669 00                        	.db $00 ; $08 Enemy_Ostro
0F66A 00                        	.db $00 ; $09 Enemy_BobOmb
0F66B 00                        	.db $00 ; $0A Enemy_AlbatossCarryingBobOmb
0F66C 00                        	.db $00 ; $0B Enemy_AlbatossStartRight
0F66D 00                        	.db $00 ; $0C Enemy_AlbatossStartLeft
0F66E 00                        	.db $00 ; $0D Enemy_NinjiRunning
0F66F 00                        	.db $00 ; $0E Enemy_NinjiJumping
0F670 00                        	.db $00 ; $0F Enemy_BeezoDiving
0F671 00                        	.db $00 ; $10 Enemy_BeezoStraight
0F672 00                        	.db $00 ; $11 Enemy_WartBubble
0F673 00                        	.db $00 ; $12 Enemy_Pidgit
0F674 00                        	.db $00 ; $13 Enemy_Trouter
0F675 00                        	.db $00 ; $14 Enemy_Hoopstar
0F676 00                        	.db $00 ; $15 Enemy_JarGeneratorShyguy
0F677 00                        	.db $00 ; $16 Enemy_JarGeneratorBobOmb
0F678 00                        	.db $00 ; $17 Enemy_Phanto
0F679 00                        	.db $00 ; $18 Enemy_CobratJar
0F67A 00                        	.db $00 ; $19 Enemy_CobratSand
0F67B 00                        	.db $00 ; $1A Enemy_Pokey
0F67C 00                        	.db $00 ; $1B Enemy_Bullet
0F67D 00                        	.db $00 ; $1C Enemy_Birdo
0F67E 00                        	.db $00 ; $1D Enemy_Mouser
0F67F 00                        	.db $00 ; $1E Enemy_Egg
0F680 00                        	.db $00 ; $1F Enemy_Tryclyde
0F681 00                        	.db $00 ; $20 Enemy_Fireball
0F682 00                        	.db $00 ; $21 Enemy_Clawgrip
0F683 00                        	.db $00 ; $22 Enemy_ClawgripRock
0F684 00                        	.db $00 ; $23 Enemy_PanserStationaryFiresAngled
0F685 00                        	.db $00 ; $24 Enemy_PanserWalking
0F686 00                        	.db $00 ; $25 Enemy_PanserStationaryFiresUp
0F687 00                        	.db $00 ; $26 Enemy_Autobomb
0F688 00                        	.db $00 ; $27 Enemy_AutobombFire
0F689 00                        	.db $00 ; $28 Enemy_WhaleSpout
0F68A 00                        	.db $00 ; $29 Enemy_Flurry
0F68B 00                        	.db $00 ; $2A Enemy_Fryguy
0F68C 00                        	.db $00 ; $2B Enemy_FryguySplit
0F68D 00                        	.db $00 ; $2C Enemy_Wart
0F68E 00                        	.db $00 ; $2D Enemy_HawkmouthBoss
0F68F 00                        	.db $00 ; $2E Enemy_Spark1
0F690 00                        	.db $00 ; $2F Enemy_Spark2
0F691 00                        	.db $00 ; $30 Enemy_Spark3
0F692 00                        	.db $00 ; $31 Enemy_Spark4
0F693 01                        	.db $01 ; $32 Enemy_VegetableSmall
0F694 01                        	.db $01 ; $33 Enemy_VegetableLarge
0F695 01                        	.db $01 ; $34 Enemy_VegetableWart
0F696 01                        	.db $01 ; $35 Enemy_Shell
0F697 02                        	.db $02 ; $36 Enemy_Coin
0F698 01                        	.db $01 ; $37 Enemy_Bomb
0F699 00                        	.db $00 ; $38 Enemy_Rocket
0F69A 02                        	.db $02 ; $39 Enemy_MushroomBlock
0F69B 03                        	.db $03 ; $3A Enemy_POWBlock
0F69C 02                        	.db $02 ; $3B Enemy_FallingLogs
0F69D 04                        	.db $04 ; $3C Enemy_SubspaceDoor
0F69E 02                        	.db $02 ; $3D Enemy_Key
0F69F 02                        	.db $02 ; $3E Enemy_SubspacePotion
0F6A0 02                        	.db $02 ; $3F Enemy_Mushroom
0F6A1 02                        	.db $02 ; $40 Enemy_Mushroom1up
0F6A2 02                        	.db $02 ; $41 Enemy_FlyingCarpet
0F6A3 02                        	.db $02 ; $42 Enemy_HawkmouthRight
0F6A4 02                        	.db $02 ; $43 Enemy_HawkmouthLeft
0F6A5 02                        	.db $02 ; $44 Enemy_CrystalBall
0F6A6 00                        	.db $00 ; $45 Enemy_Starman
0F6A7 02                        	.db $02 ; $46 Enemy_Stopwatch
0F6A8                           
0F6A8                           ; @TODO: use flag
0F6A8                           ; IFNDEF ENABLE_TILE_ATTRIBUTES_TABLE
0F6A8                           ;
0F6A8                           ; This table determines the "solidness" of tiles.
0F6A8                           ;
0F6A8                           ; Solidness is broken into four tiers:
0F6A8                           ;   - background (no collisions)
0F6A8                           ;   - background to player/enemies, solid to mushroom blocks
0F6A8                           ;   - jumpthrough block (collision on top only)
0F6A8                           ;   - solid block (collision on all sides)
0F6A8                           ;
0F6A8                           ; Tiles are divided into groups of $40. For each category, the corresponding
0F6A8                           ; the groups are divided into two groups: tiles that have a collision rule and
0F6A8                           ; tiles that don't.
0F6A8                           ;
0F6A8                           TileSolidnessTable:
0F6A8                           	; solid to mushroom blocks unless < these values
0F6A8 01                        	.db $01
0F6A9 43                        	.db $43
0F6AA 80                        	.db $80
0F6AB C0                        	.db $C0
0F6AC                           	; solid on top unless < these values
0F6AC 12                        	.db $12
0F6AD 60                        	.db $60
0F6AE 91                        	.db $91
0F6AF CA                        	.db $CA
0F6B0                           	; solid on all sides unless < these values
0F6B0 18                        	.db $18
0F6B1 69                        	.db $69
0F6B2 98                        	.db $98
0F6B3 D5                        	.db $D5
0F6B4                           
0F6B4                           IFDEF ENABLE_TILE_ATTRIBUTES_TABLE
0F6B4                           ; ELSE
0F6B4                           ;
0F6B4                           ; This table determines the collision properties of a tile
0F6B4                           ;
0F6B4                           ; * bit 7: whether bottom is solid to "background interactive" enemies
0F6B4                           ; * bit 6: whether top is solid to "background interactive" enemies
0F6B4                           ; * bit 5: whether right side is solid to "background interactive" enemies
0F6B4                           ; * bit 4: whether left side is solid to "background interactive" enemies
0F6B4                           ; * bit 3: whether bottom is solid
0F6B4                           ; * bit 2: whether top is solid
0F6B4                           ; * bit 1: whether right side is solid
0F6B4                           ; * bit 0: whether left side is solid
0F6B4                           ;
0F6B4                           TileCollisionAttributesTable:
0F6B4                           	.db %00000000 ; $00
0F6B4                           	.db %11110000 ; $01
0F6B4                           	.db %11110000 ; $02
0F6B4                           	.db %11110000 ; $03
0F6B4                           	.db %11110000 ; $04
0F6B4                           	.db %11110000 ; $05
0F6B4                           	.db %11110000 ; $06
0F6B4                           	.db %11110000 ; $07
0F6B4                           	.db %11110000 ; $08
0F6B4                           	.db %11110000 ; $09
0F6B4                           	.db %11110000 ; $0A
0F6B4                           	.db %11110000 ; $0B
0F6B4                           	.db %11110000 ; $0C
0F6B4                           	.db %11110000 ; $0D
0F6B4                           	.db %11110000 ; $0E
0F6B4                           	.db %11110000 ; $0F
0F6B4                           	.db %11110000 ; $10
0F6B4                           	.db %11110000 ; $11
0F6B4                           	.db %00000100 ; $12
0F6B4                           	.db %00000100 ; $13
0F6B4                           	.db %00000100 ; $14
0F6B4                           	.db %00000100 ; $15
0F6B4                           	.db %00000100 ; $16
0F6B4                           	.db %00000100 ; $17
0F6B4                           	.db %00001111 ; $18
0F6B4                           	.db %00001111 ; $19
0F6B4                           	.db %10001111 ; $1A
0F6B4                           	.db %00001111 ; $1B
0F6B4                           	.db %00001111 ; $1C
0F6B4                           	.db %00001111 ; $1D
0F6B4                           	.db %00001111 ; $1E
0F6B4                           	.db %00001111 ; $1F
0F6B4                           	.db %00001111 ; $20
0F6B4                           	.db %00001111 ; $21
0F6B4                           	.db %00001111 ; $22
0F6B4                           	.db %00001111 ; $23
0F6B4                           	.db %00001111 ; $24
0F6B4                           	.db %00001111 ; $25
0F6B4                           	.db %00001111 ; $26
0F6B4                           	.db %00001111 ; $27
0F6B4                           	.db %00001111 ; $28
0F6B4                           	.db %00001111 ; $29
0F6B4                           	.db %00001111 ; $2A
0F6B4                           	.db %00001111 ; $2B
0F6B4                           	.db %00001111 ; $2C
0F6B4                           	.db %00001111 ; $2D
0F6B4                           	.db %00001111 ; $2E
0F6B4                           	.db %00001111 ; $2F
0F6B4                           	.db %00001111 ; $30
0F6B4                           	.db %00001111 ; $31
0F6B4                           	.db %00001111 ; $32
0F6B4                           	.db %00001111 ; $33
0F6B4                           	.db %00001111 ; $34
0F6B4                           	.db %00001111 ; $35
0F6B4                           	.db %00001111 ; $36
0F6B4                           	.db %00001111 ; $37
0F6B4                           	.db %00001111 ; $38
0F6B4                           	.db %00001111 ; $39
0F6B4                           	.db %00001111 ; $3A
0F6B4                           	.db %00001111 ; $3B
0F6B4                           	.db %00001111 ; $3C
0F6B4                           	.db %00001111 ; $3D
0F6B4                           	.db %00001111 ; $3E
0F6B4                           	.db %00001111 ; $3F
0F6B4                           	.db %00000000 ; $40
0F6B4                           	.db %00000000 ; $41
0F6B4                           	.db %00000000 ; $42
0F6B4                           	.db %11110000 ; $43
0F6B4                           	.db %11110000 ; $44
0F6B4                           	.db %11110000 ; $45
0F6B4                           	.db %11110000 ; $46
0F6B4                           	.db %11110000 ; $47
0F6B4                           	.db %11110000 ; $48
0F6B4                           	.db %11110000 ; $49
0F6B4                           	.db %11110000 ; $4A
0F6B4                           	.db %11110000 ; $4B
0F6B4                           	.db %11110000 ; $4C
0F6B4                           	.db %11110000 ; $4D
0F6B4                           	.db %11110000 ; $4E
0F6B4                           	.db %11110000 ; $4F
0F6B4                           	.db %11110000 ; $50
0F6B4                           	.db %11110000 ; $51
0F6B4                           	.db %11110000 ; $52
0F6B4                           	.db %11110000 ; $53
0F6B4                           	.db %11110000 ; $54
0F6B4                           	.db %11110000 ; $55
0F6B4                           	.db %11110000 ; $56
0F6B4                           	.db %11110000 ; $57
0F6B4                           	.db %11110000 ; $58
0F6B4                           	.db %11110000 ; $59
0F6B4                           	.db %11110000 ; $5A
0F6B4                           	.db %11110000 ; $5B
0F6B4                           	.db %11110000 ; $5C
0F6B4                           	.db %11110000 ; $5D
0F6B4                           	.db %11110000 ; $5E
0F6B4                           	.db %11110000 ; $5F
0F6B4                           	.db %00000100 ; $60
0F6B4                           	.db %00000100 ; $61
0F6B4                           	.db %00000100 ; $62
0F6B4                           	.db %00000100 ; $63
0F6B4                           	.db %00000100 ; $64
0F6B4                           	.db %00000100 ; $65
0F6B4                           	.db %00000100 ; $66
0F6B4                           	.db %00000100 ; $67
0F6B4                           	.db %00000100 ; $68
0F6B4                           	.db %00001111 ; $69
0F6B4                           	.db %00001111 ; $6A
0F6B4                           	.db %00001111 ; $6B
0F6B4                           	.db %00001111 ; $6C
0F6B4                           	.db %00001111 ; $6D
0F6B4                           	.db %00001111 ; $6E
0F6B4                           	.db %00001111 ; $6F
0F6B4                           	.db %00001111 ; $70
0F6B4                           	.db %00001111 ; $71
0F6B4                           	.db %00001111 ; $72
0F6B4                           	.db %00001111 ; $73
0F6B4                           	.db %00001111 ; $74
0F6B4                           	.db %00001111 ; $75
0F6B4                           	.db %00001111 ; $76
0F6B4                           	.db %00001111 ; $77
0F6B4                           	.db %00001111 ; $78
0F6B4                           	.db %00001111 ; $79
0F6B4                           	.db %00001111 ; $7A
0F6B4                           	.db %00001111 ; $7B
0F6B4                           	.db %00001111 ; $7C
0F6B4                           	.db %00001111 ; $7D
0F6B4                           	.db %00001111 ; $7E
0F6B4                           	.db %00001111 ; $7F
0F6B4                           	.db %11110000 ; $80
0F6B4                           	.db %11110000 ; $81
0F6B4                           	.db %11110000 ; $82
0F6B4                           	.db %11110000 ; $83
0F6B4                           	.db %11110000 ; $84
0F6B4                           	.db %11110000 ; $85
0F6B4                           	.db %11110000 ; $86
0F6B4                           	.db %11110000 ; $87
0F6B4                           	.db %11110000 ; $88
0F6B4                           	.db %11110000 ; $89
0F6B4                           	.db %11110000 ; $8A
0F6B4                           	.db %11110000 ; $8B
0F6B4                           	.db %11110000 ; $8C
0F6B4                           	.db %11110000 ; $8D
0F6B4                           	.db %11110000 ; $8E
0F6B4                           	.db %11110000 ; $8F
0F6B4                           	.db %11110000 ; $90
0F6B4                           	.db %00000100 ; $91
0F6B4                           	.db %00000100 ; $92
0F6B4                           	.db %00000100 ; $93
0F6B4                           	.db %00000100 ; $94
0F6B4                           	.db %00000100 ; $95
0F6B4                           	.db %00000100 ; $96
0F6B4                           	.db %00000100 ; $97
0F6B4                           	.db %00001111 ; $98
0F6B4                           	.db %00001111 ; $99
0F6B4                           	.db %00001111 ; $9A
0F6B4                           	.db %00001111 ; $9B
0F6B4                           	.db %00001111 ; $9C
0F6B4                           	.db %00001111 ; $9D
0F6B4                           	.db %00001111 ; $9E
0F6B4                           	.db %00001111 ; $9F
0F6B4                           	.db %00001111 ; $A0
0F6B4                           	.db %00001111 ; $A1
0F6B4                           	.db %00001111 ; $A2
0F6B4                           	.db %00001111 ; $A3
0F6B4                           	.db %00001111 ; $A4
0F6B4                           	.db %00001111 ; $A5
0F6B4                           	.db %00001111 ; $A6
0F6B4                           	.db %00001111 ; $A7
0F6B4                           	.db %00001111 ; $A8
0F6B4                           	.db %00001111 ; $A9
0F6B4                           	.db %00001111 ; $AA
0F6B4                           	.db %00001111 ; $AB
0F6B4                           	.db %00001111 ; $AC
0F6B4                           	.db %00001111 ; $AD
0F6B4                           	.db %00001111 ; $AE
0F6B4                           	.db %00001111 ; $AF
0F6B4                           	.db %00001111 ; $B0
0F6B4                           	.db %00001111 ; $B1
0F6B4                           	.db %00001111 ; $B2
0F6B4                           	.db %00001111 ; $B3
0F6B4                           	.db %00001111 ; $B4
0F6B4                           	.db %00001111 ; $B5
0F6B4                           	.db %00001111 ; $B6
0F6B4                           	.db %00001111 ; $B7
0F6B4                           	.db %00001111 ; $B8
0F6B4                           	.db %00001111 ; $B9
0F6B4                           	.db %00001111 ; $BA
0F6B4                           	.db %00001111 ; $BB
0F6B4                           	.db %00001111 ; $BC
0F6B4                           	.db %00001111 ; $BD
0F6B4                           	.db %00001111 ; $BE
0F6B4                           	.db %00001111 ; $BF
0F6B4                           	.db %11110000 ; $C0
0F6B4                           	.db %11110000 ; $C1
0F6B4                           	.db %11110000 ; $C2
0F6B4                           	.db %11110000 ; $C3
0F6B4                           	.db %11110000 ; $C4
0F6B4                           	.db %11110000 ; $C5
0F6B4                           	.db %11110000 ; $C6
0F6B4                           	.db %11110000 ; $C7
0F6B4                           	.db %11110000 ; $C8
0F6B4                           	.db %11110000 ; $C9
0F6B4                           	.db %00000100 ; $CA
0F6B4                           	.db %00000100 ; $CB
0F6B4                           	.db %00000100 ; $CC
0F6B4                           	.db %00000100 ; $CD
0F6B4                           	.db %00000100 ; $CE
0F6B4                           	.db %00000100 ; $CF
0F6B4                           	.db %00000100 ; $D0
0F6B4                           	.db %00000100 ; $D1
0F6B4                           	.db %00000100 ; $D2
0F6B4                           	.db %00000100 ; $D3
0F6B4                           	.db %00000100 ; $D4
0F6B4                           	.db %00001111 ; $D5
0F6B4                           	.db %00001111 ; $D6
0F6B4                           	.db %00001111 ; $D7
0F6B4                           	.db %00001111 ; $D8
0F6B4                           	.db %00001111 ; $D9
0F6B4                           	.db %00001111 ; $DA
0F6B4                           	.db %00001111 ; $DB
0F6B4                           	.db %00001111 ; $DC
0F6B4                           	.db %00001111 ; $DD
0F6B4                           	.db %00001111 ; $DE
0F6B4                           	.db %00001111 ; $DF
0F6B4                           	.db %00001111 ; $E0
0F6B4                           	.db %00001111 ; $E1
0F6B4                           	.db %00001111 ; $E2
0F6B4                           	.db %00001111 ; $E3
0F6B4                           	.db %00001111 ; $E4
0F6B4                           	.db %00001111 ; $E5
0F6B4                           	.db %00001111 ; $E6
0F6B4                           	.db %00001111 ; $E7
0F6B4                           	.db %00001111 ; $E8
0F6B4                           	.db %00001111 ; $E9
0F6B4                           	.db %00001111 ; $EA
0F6B4                           	.db %00001111 ; $EB
0F6B4                           	.db %00001111 ; $EC
0F6B4                           	.db %00001111 ; $ED
0F6B4                           	.db %00001111 ; $EE
0F6B4                           	.db %00001111 ; $EF
0F6B4                           	.db %00001111 ; $F0
0F6B4                           	.db %00001111 ; $F1
0F6B4                           	.db %00001111 ; $F2
0F6B4                           	.db %00001111 ; $F3
0F6B4                           	.db %00001111 ; $F4
0F6B4                           	.db %00001111 ; $F5
0F6B4                           	.db %00001111 ; $F6
0F6B4                           	.db %00001111 ; $F7
0F6B4                           	.db %00001111 ; $F8
0F6B4                           	.db %00001111 ; $F9
0F6B4                           	.db %00001111 ; $FA
0F6B4                           	.db %00001111 ; $FB
0F6B4                           	.db %00001111 ; $FC
0F6B4                           	.db %00001111 ; $FD
0F6B4                           	.db %00001111 ; $FE
0F6B4                           	.db %00001111 ; $FF
0F6B4                           
0F6B4                           
0F6B4                           ; Tile attributes
0F6B4                           ;
0F6B4                           ; This table determines properties of each tile, including collision properties and special flags
0F6B4                           ;
0F6B4                           ; %76543210
0F6B4                           ;  xxxxMMHH
0F6B4                           ;
0F6B4                           ; * M: movement effect (0 = none, 1 = slippery, 2 = quicksand, 3 = conveyor)
0F6B4                           ; * H: health effect (0 = none, 1 = damage, 2 = kill, 3 = heal)
0F6B4                           ;
0F6B4                           TileInteractionAttributesTable:
0F6B4                           	.db %00000000 ; $00
0F6B4                           	.db %00000000 ; $01
0F6B4                           	.db %00000000 ; $02
0F6B4                           	.db %00000000 ; $03
0F6B4                           	.db %00000000 ; $04
0F6B4                           	.db %00000000 ; $05
0F6B4                           	.db %00000000 ; $06
0F6B4                           	.db %00000000 ; $07
0F6B4                           	.db %00000000 ; $08
0F6B4                           	.db %00000000 ; $09
0F6B4                           	.db %00000000 ; $0A
0F6B4                           	.db %00000000 ; $0B
0F6B4                           	.db %00000000 ; $0C
0F6B4                           	.db %00000000 ; $0D
0F6B4                           	.db %00000000 ; $0E
0F6B4                           	.db %00000000 ; $0F
0F6B4                           	.db %00000000 ; $10
0F6B4                           	.db %00000000 ; $11
0F6B4                           	.db %00000000 ; $12
0F6B4                           	.db %00000000 ; $13
0F6B4                           	.db %00000000 ; $14
0F6B4                           	.db %00000000 ; $15
0F6B4                           	.db %00000100 ; $16
0F6B4                           	.db %00000000 ; $17
0F6B4                           	.db %00000000 ; $18
0F6B4                           	.db %00000000 ; $19
0F6B4                           	.db %00000001 ; $1A
0F6B4                           	.db %00000000 ; $1B
0F6B4                           	.db %00000000 ; $1C
0F6B4                           	.db %00000000 ; $1D
0F6B4                           	.db %00000000 ; $1E
0F6B4                           	.db %00000000 ; $1F
0F6B4                           	.db %00000000 ; $20
0F6B4                           	.db %00000000 ; $21
0F6B4                           	.db %00000000 ; $22
0F6B4                           	.db %00000000 ; $23
0F6B4                           	.db %00000000 ; $24
0F6B4                           	.db %00000000 ; $25
0F6B4                           	.db %00000000 ; $26
0F6B4                           	.db %00000000 ; $27
0F6B4                           	.db %00000000 ; $28
0F6B4                           	.db %00000000 ; $29
0F6B4                           	.db %00000000 ; $2A
0F6B4                           	.db %00000000 ; $2B
0F6B4                           	.db %00000000 ; $2C
0F6B4                           	.db %00000000 ; $2D
0F6B4                           	.db %00000000 ; $2E
0F6B4                           	.db %00000000 ; $2F
0F6B4                           	.db %00000000 ; $30
0F6B4                           	.db %00000000 ; $31
0F6B4                           	.db %00000000 ; $32
0F6B4                           	.db %00000000 ; $33
0F6B4                           	.db %00000000 ; $34
0F6B4                           	.db %00000000 ; $35
0F6B4                           	.db %00000000 ; $36
0F6B4                           	.db %00000000 ; $37
0F6B4                           	.db %00000000 ; $38
0F6B4                           	.db %00000000 ; $39
0F6B4                           	.db %00000000 ; $3A
0F6B4                           	.db %00000000 ; $3B
0F6B4                           	.db %00000000 ; $3C
0F6B4                           	.db %00000000 ; $3D
0F6B4                           	.db %00000000 ; $3E
0F6B4                           	.db %00000000 ; $3F
0F6B4                           	.db %00000000 ; $40
0F6B4                           	.db %00000000 ; $41
0F6B4                           	.db %00000000 ; $42
0F6B4                           	.db %00000000 ; $43
0F6B4                           	.db %00000000 ; $44
0F6B4                           	.db %00000000 ; $45
0F6B4                           	.db %00000000 ; $46
0F6B4                           	.db %00000000 ; $47
0F6B4                           	.db %00000000 ; $48
0F6B4                           	.db %00000000 ; $49
0F6B4                           	.db %00000000 ; $4A
0F6B4                           	.db %00000000 ; $4B
0F6B4                           	.db %00000000 ; $4C
0F6B4                           	.db %00000000 ; $4D
0F6B4                           	.db %00000000 ; $4E
0F6B4                           	.db %00000000 ; $4F
0F6B4                           	.db %00000000 ; $50
0F6B4                           	.db %00000000 ; $51
0F6B4                           	.db %00000000 ; $52
0F6B4                           	.db %00000000 ; $53
0F6B4                           	.db %00000000 ; $54
0F6B4                           	.db %00000000 ; $55
0F6B4                           	.db %00000000 ; $56
0F6B4                           	.db %00000000 ; $57
0F6B4                           	.db %00000000 ; $58
0F6B4                           	.db %00000000 ; $59
0F6B4                           	.db %00000000 ; $5A
0F6B4                           	.db %00000000 ; $5B
0F6B4                           	.db %00000000 ; $5C
0F6B4                           	.db %00000000 ; $5D
0F6B4                           	.db %00000000 ; $5E
0F6B4                           	.db %00000000 ; $5F
0F6B4                           	.db %00000000 ; $60
0F6B4                           	.db %00000000 ; $61
0F6B4                           	.db %00000000 ; $62
0F6B4                           	.db %00000000 ; $63
0F6B4                           	.db %00000000 ; $64
0F6B4                           	.db %00000000 ; $65
0F6B4                           	.db %00000000 ; $66
0F6B4                           	.db %00001100 ; $67
0F6B4                           	.db %00001100 ; $68
0F6B4                           	.db %00000000 ; $69
0F6B4                           	.db %00000000 ; $6A
0F6B4                           	.db %00000000 ; $6B
0F6B4                           	.db %00000000 ; $6C
0F6B4                           	.db %00000000 ; $6D
0F6B4                           	.db %00000000 ; $6E
0F6B4                           	.db %00000000 ; $6F
0F6B4                           	.db %00000000 ; $70
0F6B4                           	.db %00000000 ; $71
0F6B4                           	.db %00000000 ; $72
0F6B4                           	.db %00000000 ; $73
0F6B4                           	.db %00000000 ; $74
0F6B4                           	.db %00000000 ; $75
0F6B4                           	.db %00000000 ; $76
0F6B4                           	.db %00000000 ; $77
0F6B4                           	.db %00000000 ; $78
0F6B4                           	.db %00000000 ; $79
0F6B4                           	.db %00000000 ; $7A
0F6B4                           	.db %00000000 ; $7B
0F6B4                           	.db %00000000 ; $7C
0F6B4                           	.db %00000000 ; $7D
0F6B4                           	.db %00000000 ; $7E
0F6B4                           	.db %00000000 ; $7F
0F6B4                           	.db %00000000 ; $80
0F6B4                           	.db %00000000 ; $81
0F6B4                           	.db %00000000 ; $82
0F6B4                           	.db %00000000 ; $83
0F6B4                           	.db %00000000 ; $84
0F6B4                           	.db %00000000 ; $85
0F6B4                           	.db %00000000 ; $86
0F6B4                           	.db %00000000 ; $87
0F6B4                           	.db %00000000 ; $88
0F6B4                           	.db %00000000 ; $89
0F6B4                           	.db %00001000 ; $8A
0F6B4                           	.db %00001000 ; $8B
0F6B4                           	.db %00000000 ; $8C
0F6B4                           	.db %00000000 ; $8D
0F6B4                           	.db %00000000 ; $8E
0F6B4                           	.db %00000000 ; $8F
0F6B4                           	.db %00000000 ; $90
0F6B4                           	.db %00000000 ; $91
0F6B4                           	.db %00000000 ; $92
0F6B4                           	.db %00000000 ; $93
0F6B4                           	.db %00000000 ; $94
0F6B4                           	.db %00000000 ; $95
0F6B4                           	.db %00000000 ; $96
0F6B4                           	.db %00000000 ; $97
0F6B4                           	.db %00000000 ; $98
0F6B4                           	.db %00000000 ; $99
0F6B4                           	.db %00000000 ; $9A
0F6B4                           	.db %00000000 ; $9B
0F6B4                           	.db %00000000 ; $9C
0F6B4                           	.db %00000000 ; $9D
0F6B4                           	.db %00000000 ; $9E
0F6B4                           	.db %00000000 ; $9F
0F6B4                           	.db %00000000 ; $A0
0F6B4                           	.db %00000000 ; $A1
0F6B4                           	.db %00000000 ; $A2
0F6B4                           	.db %00000000 ; $A3
0F6B4                           	.db %00000000 ; $A4
0F6B4                           	.db %00000000 ; $A5
0F6B4                           	.db %00000000 ; $A6
0F6B4                           	.db %00000000 ; $A7
0F6B4                           	.db %00000000 ; $A8
0F6B4                           	.db %00000000 ; $A9
0F6B4                           	.db %00000000 ; $AA
0F6B4                           	.db %00000000 ; $AB
0F6B4                           	.db %00000000 ; $AC
0F6B4                           	.db %00000000 ; $AD
0F6B4                           	.db %00000000 ; $AE
0F6B4                           	.db %00000000 ; $AF
0F6B4                           	.db %00000000 ; $B0
0F6B4                           	.db %00000000 ; $B1
0F6B4                           	.db %00000000 ; $B2
0F6B4                           	.db %00000000 ; $B3
0F6B4                           	.db %00000000 ; $B4
0F6B4                           	.db %00000000 ; $B5
0F6B4                           	.db %00000000 ; $B6
0F6B4                           	.db %00000000 ; $B7
0F6B4                           	.db %00000000 ; $B8
0F6B4                           	.db %00000000 ; $B9
0F6B4                           	.db %00000000 ; $BA
0F6B4                           	.db %00000000 ; $BB
0F6B4                           	.db %00000000 ; $BC
0F6B4                           	.db %00000000 ; $BD
0F6B4                           	.db %00000000 ; $BE
0F6B4                           	.db %00000000 ; $BF
0F6B4                           	.db %00000000 ; $C0
0F6B4                           	.db %00000000 ; $C1
0F6B4                           	.db %00000000 ; $C2
0F6B4                           	.db %00000000 ; $C3
0F6B4                           	.db %00000000 ; $C4
0F6B4                           	.db %00000000 ; $C5
0F6B4                           	.db %00000000 ; $C6
0F6B4                           	.db %00000000 ; $C7
0F6B4                           	.db %00000000 ; $C8
0F6B4                           	.db %00000000 ; $C9
0F6B4                           	.db %00000000 ; $CA
0F6B4                           	.db %00000000 ; $CB
0F6B4                           	.db %00000000 ; $CC
0F6B4                           	.db %00000000 ; $CD
0F6B4                           	.db %00000000 ; $CE
0F6B4                           	.db %00000000 ; $CF
0F6B4                           	.db %00000000 ; $D0
0F6B4                           	.db %00000000 ; $D1
0F6B4                           	.db %00000000 ; $D2
0F6B4                           	.db %00000000 ; $D3
0F6B4                           	.db %00000000 ; $D4
0F6B4                           	.db %00000000 ; $D5
0F6B4                           	.db %00000000 ; $D6
0F6B4                           	.db %00000000 ; $D7
0F6B4                           	.db %00000000 ; $D8
0F6B4                           	.db %00000000 ; $D9
0F6B4                           	.db %00000000 ; $DA
0F6B4                           	.db %00000000 ; $DB
0F6B4                           	.db %00000000 ; $DC
0F6B4                           	.db %00000000 ; $DD
0F6B4                           	.db %00000000 ; $DE
0F6B4                           	.db %00000000 ; $DF
0F6B4                           	.db %00000000 ; $E0
0F6B4                           	.db %00000000 ; $E1
0F6B4                           	.db %00000000 ; $E2
0F6B4                           	.db %00000000 ; $E3
0F6B4                           	.db %00000000 ; $E4
0F6B4                           	.db %00000000 ; $E5
0F6B4                           	.db %00000000 ; $E6
0F6B4                           	.db %00000000 ; $E7
0F6B4                           	.db %00000000 ; $E8
0F6B4                           	.db %00000000 ; $E9
0F6B4                           	.db %00000000 ; $EA
0F6B4                           	.db %00000000 ; $EB
0F6B4                           	.db %00000000 ; $EC
0F6B4                           	.db %00000000 ; $ED
0F6B4                           	.db %00000000 ; $EE
0F6B4                           	.db %00000000 ; $EF
0F6B4                           	.db %00000000 ; $F0
0F6B4                           	.db %00000000 ; $F1
0F6B4                           	.db %00000000 ; $F2
0F6B4                           	.db %00000000 ; $F3
0F6B4                           	.db %00000000 ; $F4
0F6B4                           	.db %00000000 ; $F5
0F6B4                           	.db %00000000 ; $F6
0F6B4                           	.db %00000000 ; $F7
0F6B4                           	.db %00000000 ; $F8
0F6B4                           	.db %00000000 ; $F9
0F6B4                           	.db %00000000 ; $FA
0F6B4                           	.db %00000000 ; $FB
0F6B4                           	.db %00000000 ; $FC
0F6B4                           	.db %00000000 ; $FD
0F6B4                           	.db %00000000 ; $FE
0F6B4                           	.db %00000000 ; $FF
0F6B4                           ENDIF
0F6B4                           
0F6B4                           
0F6B4                           ;
0F6B4                           ; ### Warp destination lookup table
0F6B4                           ;
0F6B4                           ; The row is the (0-indexed) world that you're on, the value is the destination.
0F6B4                           ;
0F6B4                           WarpDestinations:
0F6B4 03                        	.db $03
0F6B5 01                        	.db $01
0F6B6 04                        	.db $04
0F6B7 05                        	.db $05
0F6B8 06                        	.db $06
0F6B9 05                        	.db $05
0F6BA 06                        	.db $06
0F6BB                           
0F6BB                           
0F6BB                           ;
0F6BB                           ; Updates joypad press/held values
0F6BB                           ;
0F6BB                           UpdateJoypads:
0F6BB 20 00 00                  	JSR ReadJoypads
0F6BE                           
0F6BE                           UpdateJoypads_DoubleCheck:
0F6BE                           	; Work around DPCM sample bug,
0F6BE                           	; where some spurious inputs are read
0F6BE                           IFDEF CONTROLLER_2_DEBUG
0F6BE A4 F6                     	LDY Player2JoypadPress
0F6C0 84 C6                     	STY UpdateJoypadsTemp
0F6C2                           ENDIF
0F6C2 A4 F5                     	LDY Player1JoypadPress
0F6C4 20 00 00                  	JSR ReadJoypads
0F6C7                           
0F6C7 C4 F5                     	CPY Player1JoypadPress
0F6C9 D0 F3                     	BNE UpdateJoypads_DoubleCheck
0F6CB                           
0F6CB                           IFDEF CONTROLLER_2_DEBUG
0F6CB A4 C6                     	LDY UpdateJoypadsTemp
0F6CD C4 F6                     	CPY Player2JoypadPress
0F6CF D0 ED                     	BNE UpdateJoypads_DoubleCheck
0F6D1                           ENDIF
0F6D1                           
0F6D1 A2 01                     	LDX #$01
0F6D3                           
0F6D3                           UpdateJoypads_Loop:
0F6D3 B5 F5                     	LDA Player1JoypadPress, X ; Update the press/held values
0F6D5                           IFDEF JOYPAD_D1
0F6D5                           	ORA Player1JoypadExpansionPress, X
0F6D5                           	STA Player1JoypadPress, X
0F6D5                           ENDIF
0F6D5 A8                        	TAY
0F6D6 55 F7                     	EOR Player1JoypadHeld, X
0F6D8 35 F5                     	AND Player1JoypadPress, X
0F6DA 95 F5                     	STA Player1JoypadPress, X
0F6DC 94 F7                     	STY Player1JoypadHeld, X
0F6DE CA                        	DEX
0F6DF 10 F2                     	BPL UpdateJoypads_Loop
0F6E1                           
0F6E1 60                        	RTS
0F6E2                           
0F6E2                           
0F6E2                           ;
0F6E2                           ; Reads joypad pressed input
0F6E2                           ;
0F6E2                           ReadJoypads:
0F6E2 A2 01                     	LDX #$01
0F6E4 8E 16 40                  	STX JOY1
0F6E7 CA                        	DEX
0F6E8 8E 16 40                  	STX JOY1
0F6EB                           
0F6EB A2 08                     	LDX #$08
0F6ED                           ReadJoypadLoop:
0F6ED AD 16 40                  	LDA JOY1
0F6F0 4A                        	LSR A
0F6F1                           	; Read D0 standard controller data
0F6F1 26 F5                     	ROL Player1JoypadPress
0F6F3 4A                        	LSR A
0F6F4                           	; Read D1 expansion port controller data
0F6F4                           	;
0F6F4                           	; Before you get too excited, keep in mind that this code is basically ported from the FDS bios.
0F6F4                           	; Code to mux D1 and D0 isn't present, so even if you had an expansion port controller that used
0F6F4                           	; D1, the game wouldn't use it!
0F6F4 2E F4 06                  	ROL Player1JoypadExpansionPress
0F6F7                           
0F6F7 AD 17 40                  	LDA JOY2
0F6FA 4A                        	LSR A
0F6FB 26 F6                     	ROL Player2JoypadPress
0F6FD 4A                        	LSR A
0F6FE 2E F5 06                  	ROL Player2JoypadExpansionPress
0F701 CA                        	DEX
0F702 D0 E9                     	BNE ReadJoypadLoop
0F704                           
0F704 60                        	RTS
0F705                           
0F705                           
0F705                           ;
0F705                           ; Load the area specified by the area pointer at the current page
0F705                           ;
0F705                           FollowCurrentAreaPointer:
0F705 AD 35 05                  	LDA CurrentLevelPage
0F708 0A                        	ASL A
0F709 A8                        	TAY
0F70A B9 1D 05                  	LDA AreaPointersByPage, Y
0F70D 8D 31 05                  	STA CurrentLevel
0F710 C8                        	INY
0F711 B9 1D 05                  	LDA AreaPointersByPage, Y
0F714 4A                        	LSR A
0F715 4A                        	LSR A
0F716 4A                        	LSR A
0F717 4A                        	LSR A
0F718 8D 32 05                  	STA CurrentLevelArea
0F71B B9 1D 05                  	LDA AreaPointersByPage, Y
0F71E 29 0F                     	AND #$0F
0F720 8D 33 05                  	STA CurrentLevelEntryPage
0F723 60                        	RTS
0F724                           
0F724                           
0F724                           
0F724                           ;
0F724                           ; Checks that we're playing the correct music and switches if necessary, unless
0F724                           ; we're playing the invincibility music.
0F724                           ;
0F724                           ; ##### Input
0F724                           ; - `CompareMusicIndex`: music we should be playing
0F724                           ; - `CurrentMusicIndex`: music we're actually playing
0F724                           ; - `StarInvincibilityTimer`: whether the player is invincible
0F724                           ;
0F724                           ; ##### Output
0F724                           ; - `CurrentMusicIndex`: music we should be plathing
0F724                           ; - `MusicQueue1`: song to play if we need to change the music
0F724                           ;
0F724                           EnsureCorrectMusic:
0F724 AD 44 05                  	LDA CompareMusicIndex
0F727 CD 45 05                  	CMP CurrentMusicIndex
0F72A F0 00                     	BEQ EnsureCorrectMusic_Exit
0F72C                           
0F72C AA                        	TAX
0F72D 8E 45 05                  	STX CurrentMusicIndex
0F730 AD E0 04                  	LDA StarInvincibilityTimer
0F733 C9 08                     	CMP #$08
0F735 B0 00                     	BCS EnsureCorrectMusic_Exit
0F737                           
0F737 BD F4 F0                  	LDA LevelMusicIndexes, X
0F73A 8D 00 06                  	STA MusicQueue1
0F73D                           
0F73D                           EnsureCorrectMusic_Exit:
0F73D 60                        	RTS
0F73E                           
0F73E                           
0F73E                           DoAreaReset:
0F73E A9 00                     	LDA #$00
0F740 8D AE 04                  	STA AreaInitialized
0F743 8D AF 04                  	STA ObjectCarriedOver
0F746 8D B7 04                  	STA SubspaceTimer
0F749 8D B3 04                  	STA SubspaceDoorTimer
0F74C                           IFDEF CONTROLLER_2_DEBUG
0F74C 8D 81 7E                  	STA ChangeCharacterPoofTimer
0F74F                           ENDIF
0F74F A2 08                     	LDX #$08
0F751                           
0F751                           DoAreaReset_EnemyLoop:
0F751 B5 51                     	LDA EnemyState, X
0F753 F0 00                     	BEQ DoAreaReset_EnemyLoopEnd
0F755                           
0F755 B5 A8                     	LDA ObjectBeingCarriedTimer, X
0F757 F0 00                     	BEQ DoAreaReset_AfterCarryOver
0F759                           
0F759 B5 90                     	LDA ObjectType, X
0F75B C9 39                     	CMP #Enemy_MushroomBlock
0F75D F0 00                     	BEQ DoAreaReset_AfterCarryOver
0F75F                           
0F75F 8D AF 04                  	STA ObjectCarriedOver
0F762                           
0F762                           DoAreaReset_AfterCarryOver:
0F762 20 00 00                  	JSR AreaResetEnemyDestroy
0F765                           
0F765                           DoAreaReset_EnemyLoopEnd:
0F765 CA                        	DEX
0F766 10 E9                     	BPL DoAreaReset_EnemyLoop
0F768                           
0F768 A6 12                     	LDX byte_RAM_12
0F76A 60                        	RTS
0F76B                           
0F76B                           ; End of function DoAreaReset
0F76B                           
0F76B                           ; =============== S U B R O U T I N E =======================================
0F76B                           
0F76B                           AreaResetEnemyDestroy:
0F76B                           	; load raw enemy data offset so we can allow the level object to respawn
0F76B BC 41 04                  	LDY EnemyRawDataOffset, X
0F76E                           	; nothing to reset if offset is invalid
0F76E 30 00                     	BMI AreaResetEnemyDestroy_AfterAllowRespawn
0F770                           
0F770                           	; disabling bit 7 allows the object to respawn
0F770 B1 CC                     	LDA (RawEnemyData), Y
0F772 29 7F                     	AND #$7F
0F774 91 CC                     	STA (RawEnemyData), Y
0F776                           
0F776                           AreaResetEnemyDestroy_AfterAllowRespawn:
0F776 A9 00                     	LDA #EnemyState_Inactive
0F778 95 51                     	STA EnemyState, X
0F77A 60                        	RTS
0F77B                           
0F77B                           ; End of function AreaResetEnemyDestroy
0F77B                           
0F77B                           ; =============== S U B R O U T I N E =======================================
0F77B                           
0F77B                           KillPlayer:
0F77B A9 07                     	LDA #PlayerState_Dying ; Mark player as dead
0F77D 85 50                     	STA PlayerState
0F77F A9 00                     	LDA #$00 ; Clear some variables
0F781                           IFNDEF RESPAWN_INSTEAD_OF_DEATH
0F781 8D C2 04                  	STA PlayerHealth
0F784                           ELSE
0F784                           	NOP
0F784                           	NOP
0F784                           	NOP
0F784                           ENDIF
0F784 8D CA 04                  	STA CrouchJumpTimer
0F787 8D E0 04                  	STA StarInvincibilityTimer
0F78A A9 07                     	LDA #SpriteAnimation_Dead ; Set player animation to dead?
0F78C 85 C7                     	STA PlayerAnimationFrame
0F78E A5 9C                     	LDA HoldingItem
0F790 F0 00                     	BEQ loc_BANKF_F749
0F792                           
0F792                           	; Probably something to throw away
0F792                           	; a held item on death
0F792 C6 9C                     	DEC HoldingItem
0F794 AC 2D 04                  	LDY ObjectBeingCarriedIndex
0F797 99 2F 04                  	STA ObjectProjectileTimer, Y
0F79A 4A                        	LSR A
0F79B 99 A8 00                  	STA ObjectBeingCarriedTimer, Y
0F79E 99 3D 00                  	STA ObjectXVelocity, Y
0F7A1 A9 E0                     	LDA #$E0
0F7A3 86 0D                     	STX byte_RAM_D
0F7A5 B6 51                     	LDX EnemyState, Y
0F7A7 E0 07                     	CPX #EnemyState_Sinking
0F7A9 F0 00                     	BEQ loc_BANKF_F747
0F7AB                           
0F7AB 99 47 00                  	STA ObjectYVelocity, Y
0F7AE                           
0F7AE                           loc_BANKF_F747:
0F7AE A6 0D                     	LDX byte_RAM_D
0F7B0                           
0F7B0                           loc_BANKF_F749:
0F7B0                           IFNDEF RESPAWN_INSTEAD_OF_DEATH
0F7B0                           	; Set music to death jingle
0F7B0 A9 08                     	LDA #Music2_DeathJingle
0F7B2 8D 03 06                  	STA MusicQueue2
0F7B5                           	; BUG: Setting DPCM at the same time as music
0F7B5 A9 80                     	LDA #DPCM_PlayerDeath
0F7B7 8D 01 06                  	STA DPCMQueue
0F7BA 60                        	RTS
0F7BB                           ELSE
0F7BB                           	LDA #DPCM_PlayerDeath
0F7BB                           	STA DPCMQueue
0F7BB                           	JMP RespawnPlayer
0F7BB                           	NOP
0F7BB                           	NOP
0F7BB                           	NOP
0F7BB                           ENDIF
0F7BB                           
0F7BB                           
0F7BB                           ;
0F7BB                           ; Copies the raw level data to memory.
0F7BB                           ;
0F7BB                           CopyLevelDataToMemory:
0F7BB                           	; Determine the global area index from the current level and area.
0F7BB AC 31 05                  	LDY CurrentLevel
0F7BE B9 00 80                  	LDA LevelAreaStartIndexes, Y
0F7C1 18                        	CLC
0F7C2 6D 32 05                  	ADC CurrentLevelArea
0F7C5 A8                        	TAY
0F7C6                           
0F7C6                           	; Calculate the pointer for the start of the level data.
0F7C6 B9 15 80                  	LDA LevelDataPointersLo, Y
0F7C9 85 05                     	STA byte_RAM_5
0F7CB B9 E7 80                  	LDA LevelDataPointersHi, Y
0F7CE 85 06                     	STA byte_RAM_6
0F7D0                           
0F7D0                           	; Blindly copy 255 bytes of data, which is presumed to contain the full area.
0F7D0 A2 FF                     	LDX #$FF
0F7D2                           
0F7D2                           	; Set the destination address in RAM for copying level data.
0F7D2 A9 78                     	LDA #>RawLevelData
0F7D4 85 02                     	STA byte_RAM_2
0F7D6 A0 00                     	LDY #<RawLevelData
0F7D8 84 01                     	STY byte_RAM_1
0F7DA                           
0F7DA                           	; `Y = $00`
0F7DA                           CopyLevelDataToMemory_Loop:
0F7DA B1 05                     	LDA (byte_RAM_5), Y
0F7DC 91 01                     	STA (byte_RAM_1), Y
0F7DE C8                        	INY
0F7DF CA                        	DEX
0F7E0 D0 F8                     	BNE CopyLevelDataToMemory_Loop
0F7E2                           
0F7E2                           	; We end up copying the first byte twice!
0F7E2 91 01                     	STA (byte_RAM_1), Y
0F7E4                           
0F7E4                           
0F7E4                           ;
0F7E4                           ; Copies the raw enemy data to memory.
0F7E4                           ;
0F7E4                           CopyEnemyDataToMemory:
0F7E4                           	; Determine the address of the level's enemy pointer tables.
0F7E4 AC 31 05                  	LDY CurrentLevel
0F7E7 B9 00 A5                  	LDA EnemyPointersByLevel_HiHi, Y
0F7EA 85 01                     	STA byte_RAM_1
0F7EC B9 15 A5                  	LDA EnemyPointersByLevel_HiLo, Y
0F7EF 85 00                     	STA byte_RAM_0
0F7F1 B9 2A A5                  	LDA EnemyPointersByLevel_LoHi, Y
0F7F4 85 03                     	STA byte_RAM_3
0F7F6 B9 3F A5                  	LDA EnemyPointersByLevel_LoLo, Y
0F7F9 85 02                     	STA byte_RAM_2
0F7FB                           
0F7FB                           	; Determine whether we want the enemy data for the area or for the jar.
0F7FB AD 28 06                  	LDA InSubspaceOrJar
0F7FE C9 01                     	CMP #$01
0F800 D0 00                     	BNE CopyEnemyDataToMemory_Area
0F802                           
0F802                           CopyEnemyDataToMemory_Jar:
0F802 A0 04                     	LDY #AreaIndex_Jar
0F804 4C 00 00                  	JMP CopyEnemyDataToMemory_SetAddress
0F807                           
0F807                           CopyEnemyDataToMemory_Area:
0F807 AC 32 05                  	LDY CurrentLevelArea
0F80A                           
0F80A                           CopyEnemyDataToMemory_SetAddress:
0F80A                           	; Calculate the pointer for the start of the enemy data.
0F80A B1 00                     	LDA (byte_RAM_0), Y
0F80C 85 01                     	STA byte_RAM_1
0F80E B1 02                     	LDA (byte_RAM_2), Y
0F810 85 00                     	STA byte_RAM_0
0F812                           
0F812                           	; Blindly copy 255 bytes of data, which is presumed to contain the full area.
0F812 A2 FF                     	LDX #$FF
0F814                           
0F814                           	; Set the destination address in RAM for copying level data.
0F814 A9 7B                     	LDA #>RawEnemyDataAddr
0F816 85 03                     	STA byte_RAM_3
0F818 A0 00                     	LDY #<RawEnemyDataAddr
0F81A 84 02                     	STY byte_RAM_2
0F81C                           
0F81C                           	; `Y = $00`
0F81C                           CopyEnemyDataToMemory_Loop:
0F81C B1 00                     	LDA (byte_RAM_0), Y
0F81E 91 02                     	STA (byte_RAM_2), Y
0F820 C8                        	INY
0F821 CA                        	DEX
0F822 D0 F8                     	BNE CopyEnemyDataToMemory_Loop
0F824                           
0F824 60                        	RTS
0F825                           
0F825                           
0F825                           ;
0F825                           ; Copies the raw level data for a jar to memory.
0F825                           ;
0F825                           CopyJarDataToMemory:
0F825                           	; Determine the global area index from the current level and area.
0F825 AC 31 05                  	LDY CurrentLevel
0F828 B9 00 80                  	LDA LevelAreaStartIndexes, Y
0F82B 18                        	CLC
0F82C 69 04                     	ADC #AreaIndex_Jar
0F82E A8                        	TAY
0F82F                           
0F82F                           	; Calculate the pointer for the start of the level data.
0F82F B9 15 80                  	LDA LevelDataPointersLo, Y
0F832 85 05                     	STA byte_RAM_5
0F834 B9 E7 80                  	LDA LevelDataPointersHi, Y
0F837 85 06                     	STA byte_RAM_6
0F839                           
0F839                           	; Set the destination address in RAM for copying level data.
0F839 A9 7A                     	LDA #>RawJarData
0F83B 85 02                     	STA byte_RAM_2
0F83D A0 00                     	LDY #<RawJarData
0F83F 84 01                     	STY byte_RAM_1
0F841                           
0F841                           	; `Y = $00`
0F841                           CopyJarDataToMemory_Loop:
0F841 B1 05                     	LDA (byte_RAM_5), Y
0F843                           	; Unlike `CopyLevelDataToMemory`, which always copies 255 bytes, this stops on any `$FF` read!
0F843                           	;
0F843                           	; This isn't technically "correct", but in practice it's not the most devastating limitation.
0F843                           	; Just don't expect to use a waterfall object that is exactly 16 tiles wide inside a jar.
0F843                           	;
0F843                           	; Fun fact: The largest possible waterfall objects are only used in two areas of World 5!
0F843 C9 FF                     	CMP #$FF ; This one actually terminates on any $FF read! Welp.
0F845 F0 00                     	BEQ CopyJarDataToMemory_Exit
0F847                           
0F847 91 01                     	STA (byte_RAM_1), Y
0F849 C8                        	INY
0F84A 4C 41 F8                  	JMP CopyJarDataToMemory_Loop
0F84D                           
0F84D                           CopyJarDataToMemory_Exit:
0F84D 91 01                     	STA (byte_RAM_1), Y
0F84F 60                        	RTS
0F850                           
0F850                           
0F850                           ;
0F850                           ; ## Tile Quads
0F850                           ;
0F850                           ; Map tiles are made of 4 pattern table tiles arranged in a 2x2 block.
0F850                           ;
0F850                           ; These map tiles are broken up into four tables (`$00-$3F`, `$40-$7F`, `$80-$BF`, `$C0-$FF`) for
0F850                           ; addressability (the tile index is multiplied by 4 to get the first byte). Each table
0F850                           ; coincidentally corresponds to a background subpalette as well.
0F850                           ;
0F850                           
0F850                           ;
0F850                           ; #### Tile quad pointers
0F850                           ;
0F850                           TileQuadPointersLo:
0F850 00                        	.db <TileQuads1
0F851 00                        	.db <TileQuads2
0F852 00                        	.db <TileQuads3
0F853 00                        	.db <TileQuads4
0F854                           
0F854                           TileQuadPointersHi:
0F854 00                        	.db >TileQuads1
0F855 00                        	.db >TileQuads2
0F856 00                        	.db >TileQuads3
0F857 00                        	.db >TileQuads4
0F858                           
0F858                           ;
0F858                           ; #### Tile quad pattern table values
0F858                           ;
0F858                           ; Each subtable corresponds to `$40` tiles so that a single byte offset can be used to address each
0F858                           ; map tile within the table.
0F858                           ;
0F858                           TileQuads1:
0F858 FE FE FE FE               	.db $FE, $FE, $FE, $FE ; $00
0F85C B4 B6 B5 B7               	.db $B4, $B6, $B5, $B7 ; $04
0F860 B8 FA B9 FA               	.db $B8, $FA, $B9, $FA ; $08
0F864 FA FA B2 B3               	.db $FA, $FA, $B2, $B3 ; $0C
0F868 BE BE BF BF               	.db $BE, $BE, $BF, $BF ; $10
0F86C BF BF BF BF               	.db $BF, $BF, $BF, $BF ; $14
0F870 4A 4A 4B 4B               	.db $4A, $4A, $4B, $4B ; $18
0F874 5E 5F 5E 5F               	.db $5E, $5F, $5E, $5F ; $1C
0F878 E8 E8 A9 A9               	.db $E8, $E8, $A9, $A9 ; $20
0F87C 46 FC 46 FC               	.db $46, $FC, $46, $FC ; $24
0F880 A9 A9 A9 A9               	.db $A9, $A9, $A9, $A9 ; $28
0F884 FC FC FC FC               	.db $FC, $FC, $FC, $FC ; $2C
0F888 E9 E9 A9 A9               	.db $E9, $E9, $A9, $A9 ; $30
0F88C FC 48 FC 48               	.db $FC, $48, $FC, $48 ; $34
0F890 11 11 11 11               	.db $11, $11, $11, $11 ; $38
0F894 22 22 22 22               	.db $22, $22, $22, $22 ; $3C
0F898 33 33 33 33               	.db $33, $33, $33, $33 ; $40
0F89C E8 EB A9 A9               	.db $E8, $EB, $A9, $A9 ; $44
0F8A0 74 76 75 77               	.db $74, $76, $75, $77 ; $48
0F8A4 98 9A 99 9B               	.db $98, $9A, $99, $9B ; $4C
0F8A8 9C 9A 9D 9B               	.db $9C, $9A, $9D, $9B ; $50
0F8AC 9C 9E 9B 9F               	.db $9C, $9E, $9B, $9F ; $54
0F8B0 58 5A 59 5B               	.db $58, $5A, $59, $5B ; $58
0F8B4 5E 5F 5E 5F               	.db $5E, $5F, $5E, $5F ; $5C
0F8B8 8E 8F 8F 8E               	.db $8E, $8F, $8F, $8E ; $60
0F8BC 72 73 73 72               	.db $72, $73, $73, $72 ; $64
0F8C0 A6 A6 A7 A7               	.db $A6, $A6, $A7, $A7 ; $68
0F8C4 92 93 93 92               	.db $92, $93, $93, $92 ; $6C
0F8C8 74 76 75 77               	.db $74, $76, $75, $77 ; $70
0F8CC 70 72 71 73               	.db $70, $72, $71, $73 ; $74
0F8D0 71 73 71 73               	.db $71, $73, $71, $73 ; $78
0F8D4 24 26 25 27               	.db $24, $26, $25, $27 ; $7C
0F8D8 32 34 33 35               	.db $32, $34, $33, $35 ; $80
0F8DC 33 35 33 35               	.db $33, $35, $33, $35 ; $84
0F8E0 24 26 25 27               	.db $24, $26, $25, $27 ; $88
0F8E4                           IFDEF EXPAND_TABLES
0F8E4                           	unusedSpace TileQuads1 + $100, $FC
0F8E4                           ENDIF
0F8E4                           
0F8E4                           TileQuads2:
0F8E4 FA FA FA FA               	.db $FA, $FA, $FA, $FA ; $00
0F8E8 FA FA FA FA               	.db $FA, $FA, $FA, $FA ; $04
0F8EC FA FA FA FA               	.db $FA, $FA, $FA, $FA ; $08
0F8F0 FA FA B0 B1               	.db $FA, $FA, $B0, $B1 ; $0C
0F8F4 FA FA B0 B1               	.db $FA, $FA, $B0, $B1 ; $10
0F8F8 FA FA B0 B1               	.db $FA, $FA, $B0, $B1 ; $14
0F8FC FA FA B0 B1               	.db $FA, $FA, $B0, $B1 ; $18
0F900 FA FA B0 B1               	.db $FA, $FA, $B0, $B1 ; $1C
0F904 FA FA B0 B1               	.db $FA, $FA, $B0, $B1 ; $20
0F908 FA FA B0 B1               	.db $FA, $FA, $B0, $B1 ; $24
0F90C FA FA B0 B1               	.db $FA, $FA, $B0, $B1 ; $28
0F910 FA FA B0 B1               	.db $FA, $FA, $B0, $B1 ; $2C
0F914 FA FA B0 B1               	.db $FA, $FA, $B0, $B1 ; $30
0F918 FA FA B0 B1               	.db $FA, $FA, $B0, $B1 ; $34
0F91C A0 A2 A1 A3               	.db $A0, $A2, $A1, $A3 ; $38
0F920 80 82 81 83               	.db $80, $82, $81, $83 ; $3C
0F924 F4 86 F5 87               	.db $F4, $86, $F5, $87 ; $40
0F928 84 86 85 87               	.db $84, $86, $85, $87 ; $44
0F92C FC FC FC FC               	.db $FC, $FC, $FC, $FC ; $48
0F930 AD FB AC AD               	.db $AD, $FB, $AC, $AD ; $4C
0F934 AC AC AC AC               	.db $AC, $AC, $AC, $AC ; $50
0F938 FB 3B 3B AC               	.db $FB, $3B, $3B, $AC ; $54
0F93C FC FC FC FC               	.db $FC, $FC, $FC, $FC ; $58
0F940 F4 86 F5 87               	.db $F4, $86, $F5, $87 ; $5C
0F944 FB 49 49 FB               	.db $FB, $49, $49, $FB ; $60
0F948 FE FE FE FE               	.db $FE, $FE, $FE, $FE ; $64
0F94C FE FE 6D FE               	.db $FE, $FE, $6D, $FE ; $68
0F950 3C 3E 3D 3F               	.db $3C, $3E, $3D, $3F ; $6C
0F954 58 FD 59 5A               	.db $58, $FD, $59, $5A ; $70
0F958 5B 5A FD FD               	.db $5B, $5A, $FD, $FD ; $74
0F95C 5B 5C FD 5D               	.db $5B, $5C, $FD, $5D ; $78
0F960 FD FD 5B 5A               	.db $FD, $FD, $5B, $5A ; $7C
0F964 6C FE FE FE               	.db $6C, $FE, $FE, $FE ; $80
0F968 FE FE FE FE               	.db $FE, $FE, $FE, $FE ; $84
0F96C FE 6E FE 6F               	.db $FE, $6E, $FE, $6F ; $88
0F970 20 22 21 23               	.db $20, $22, $21, $23 ; $8C
0F974 6E 6F 70 71               	.db $6E, $6F, $70, $71 ; $90
0F978 57 57 FB FB               	.db $57, $57, $FB, $FB ; $94
0F97C 57 57 FE FE               	.db $57, $57, $FE, $FE ; $98
0F980 D3 D3 FB FB               	.db $D3, $D3, $FB, $FB ; $9C
0F984 D2 D2 FB FB               	.db $D2, $D2, $FB, $FB ; $A0
0F988 7C 7E 7D 7F               	.db $7C, $7E, $7D, $7F ; $A4
0F98C CA CC CB CD               	.db $CA, $CC, $CB, $CD ; $A8
0F990 CA CC CB CD               	.db $CA, $CC, $CB, $CD ; $AC
0F994 C0 C2 C1 C3               	.db $C0, $C2, $C1, $C3 ; $B0
0F998 2C 2E 2D 2F               	.db $2C, $2E, $2D, $2F ; $B4
0F99C 8E 8F 8F 8E               	.db $8E, $8F, $8F, $8E ; $B8
0F9A0 88 8A 89 8B               	.db $88, $8A, $89, $8B ; $BC
0F9A4 89 8B 89 8B               	.db $89, $8B, $89, $8B ; $C0
0F9A8 89 8B 8C 8D               	.db $89, $8B, $8C, $8D ; $C4
0F9AC 88 8A 8C 8D               	.db $88, $8A, $8C, $8D ; $C8
0F9B0 88 8A 89 8B               	.db $88, $8A, $89, $8B ; $CC
0F9B4 88 8A 89 8B               	.db $88, $8A, $89, $8B ; $D0
0F9B8 6A 6C 6B 6D               	.db $6A, $6C, $6B, $6D ; $D4
0F9BC 6C 6C 6D 6D               	.db $6C, $6C, $6D, $6D ; $D8
0F9C0 6C 6E 6D 6F               	.db $6C, $6E, $6D, $6F ; $DC
0F9C4 6C 54 6D 55               	.db $6C, $54, $6D, $55 ; $E0
0F9C8 32 34 33 35               	.db $32, $34, $33, $35 ; $E4
0F9CC 33 35 33 35               	.db $33, $35, $33, $35 ; $E8
0F9D0                           IFDEF EXPAND_TABLES
0F9D0                           	unusedSpace TileQuads2 + $100, $FC
0F9D0                           ENDIF
0F9D0                           
0F9D0                           TileQuads3:
0F9D0 94 95 94 95               	.db $94, $95, $94, $95 ; $00
0F9D4 96 97 96 97               	.db $96, $97, $96, $97 ; $04
0F9D8 48 49 48 49               	.db $48, $49, $48, $49 ; $08
0F9DC FE FE FE FE               	.db $FE, $FE, $FE, $FE ; $0C
0F9E0 FB 32 32 33               	.db $FB, $32, $32, $33 ; $10
0F9E4 33 33 33 33               	.db $33, $33, $33, $33 ; $14
0F9E8 FD FD FD FD               	.db $FD, $FD, $FD, $FD ; $18
0F9EC 34 FB FD 34               	.db $34, $FB, $FD, $34 ; $1C
0F9F0 FB 30 FB FB               	.db $FB, $30, $FB, $FB ; $20
0F9F4 FB FB 31 FB               	.db $FB, $FB, $31, $FB ; $24
0F9F8 D0 D0 D0 D0               	.db $D0, $D0, $D0, $D0 ; $28
0F9FC D1 D1 D1 D1               	.db $D1, $D1, $D1, $D1 ; $2C
0FA00 64 66 65 67               	.db $64, $66, $65, $67 ; $30
0FA04 68 6A 69 6B               	.db $68, $6A, $69, $6B ; $34
0FA08 FA 6C FA 6C               	.db $FA, $6C, $FA, $6C ; $38
0FA0C 6D FA 6D FA               	.db $6D, $FA, $6D, $FA ; $3C
0FA10 92 93 93 92               	.db $92, $93, $93, $92 ; $40
0FA14 AE AF AE AF               	.db $AE, $AF, $AE, $AF ; $44
0FA18 78 7A 79 7B               	.db $78, $7A, $79, $7B ; $48
0FA1C A8 A8 AF AE               	.db $A8, $A8, $AF, $AE ; $4C
0FA20 94 95 94 95               	.db $94, $95, $94, $95 ; $50
0FA24 96 97 96 97               	.db $96, $97, $96, $97 ; $54
0FA28 22 24 23 25               	.db $22, $24, $23, $25 ; $58
0FA2C 92 93 93 92               	.db $92, $93, $93, $92 ; $5C
0FA30 50 51 50 51               	.db $50, $51, $50, $51 ; $60
0FA34 AE AF AE AF               	.db $AE, $AF, $AE, $AF ; $64
0FA38 50 51 50 51               	.db $50, $51, $50, $51 ; $68
0FA3C 8E 8F 8F 8E               	.db $8E, $8F, $8F, $8E ; $6C
0FA40 72 73 73 72               	.db $72, $73, $73, $72 ; $70
0FA44 50 52 51 53               	.db $50, $52, $51, $53 ; $74
0FA48 FD FD FD FD               	.db $FD, $FD, $FD, $FD ; $78
0FA4C FB 36 36 4F               	.db $FB, $36, $36, $4F ; $7C
0FA50 4F 4E 4E 4F               	.db $4F, $4E, $4E, $4F ; $80
0FA54 4E 4F 4F 4E               	.db $4E, $4F, $4F, $4E ; $84
0FA58 92 93 93 92               	.db $92, $93, $93, $92 ; $88
0FA5C 8E 8F 8F 8E               	.db $8E, $8F, $8F, $8E ; $8C
0FA60 44 45 45 44               	.db $44, $45, $45, $44 ; $90
0FA64 4F 37 4E FE               	.db $4F, $37, $4E, $FE ; $94
0FA68 4F 3A 4E FE               	.db $4F, $3A, $4E, $FE ; $98
0FA6C 4F 4E 37 38               	.db $4F, $4E, $37, $38 ; $9C
0FA70 4A 4B FE FE               	.db $4A, $4B, $FE, $FE ; $A0
0FA74 72 73 4A 4B               	.db $72, $73, $4A, $4B ; $A4
0FA78 40 42 41 43               	.db $40, $42, $41, $43 ; $A8
0FA7C 41 43 41 43               	.db $41, $43, $41, $43 ; $AC
0FA80                           IFDEF EXPAND_TABLES
0FA80                           	unusedSpace TileQuads3 + $100, $FC
0FA80                           ENDIF
0FA80                           TileQuads4:
0FA80 40 42 41 43               	.db $40, $42, $41, $43 ; $00
0FA84 40 42 41 43               	.db $40, $42, $41, $43 ; $04
0FA88 BA BC BB BD               	.db $BA, $BC, $BB, $BD ; $08
0FA8C BA BC 90 91               	.db $BA, $BC, $90, $91 ; $0C
0FA90 FA FA FA FA               	.db $FA, $FA, $FA, $FA ; $10
0FA94 FA FA FA FA               	.db $FA, $FA, $FA, $FA ; $14
0FA98 FD FD FD FD               	.db $FD, $FD, $FD, $FD ; $18
0FA9C 61 63 61 63               	.db $61, $63, $61, $63 ; $1C
0FAA0 65 63 65 63               	.db $65, $63, $65, $63 ; $20
0FAA4 65 67 65 67               	.db $65, $67, $65, $67 ; $24
0FAA8 60 62 61 63               	.db $60, $62, $61, $63 ; $28
0FAAC 32 34 33 35               	.db $32, $34, $33, $35 ; $2C
0FAB0 64 62 65 63               	.db $64, $62, $65, $63 ; $30
0FAB4 36 34 37 35               	.db $36, $34, $37, $35 ; $34
0FAB8 64 66 65 67               	.db $64, $66, $65, $67 ; $38
0FABC 36 38 37 39               	.db $36, $38, $37, $39 ; $3C
0FAC0 68 62 61 63               	.db $68, $62, $61, $63 ; $40
0FAC4 64 69 65 67               	.db $64, $69, $65, $67 ; $44
0FAC8 46 62 61 63               	.db $46, $62, $61, $63 ; $48
0FACC 64 47 65 67               	.db $64, $47, $65, $67 ; $4C
0FAD0 BA BC BB BD               	.db $BA, $BC, $BB, $BD ; $50
0FAD4 70 72 71 73               	.db $70, $72, $71, $73 ; $54
0FAD8 8E 8F 8F 8E               	.db $8E, $8F, $8F, $8E ; $58
0FADC 72 73 73 72               	.db $72, $73, $73, $72 ; $5C
0FAE0 44 45 45 44               	.db $44, $45, $45, $44 ; $60
0FAE4                           IFDEF EXPAND_TABLES
0FAE4                           	unusedSpace TileQuads4 + $100, $FC
0FAE4                           ENDIF
0FAE4                           
0FAE4                           EndOfLevelDoor: ; PPU data
0FAE4 22 D0 04 FC FC AD FA      	.db $22, $D0, $04, $FC, $FC, $AD, $FA
0FAEB 22 F0 04 FC FC AC AD      	.db $22, $F0, $04, $FC, $FC, $AC, $AD
0FAF2 23 10 06 FC FC AC AC AD.. 	.db $23, $10, $06, $FC, $FC, $AC, $AC, $AD, $FA
0FAFB 23 30 06 FC FC AC AC AC.. 	.db $23, $30, $06, $FC, $FC, $AC, $AC, $AC, $AD
0FB04 00                        	.db $00
0FB05                           
0FB05                           EndOfLevelDoorRowOffsets:
0FB05 00                        	.db $00
0FB06 07                        	.db $07
0FB07 0E                        	.db $0E
0FB08 17                        	.db $17
0FB09                           
0FB09                           DefaultCHRAnimationSpeed_Level:
0FB09 00                        	.db $00 ; 1-1
0FB0A 00                        	.db $00 ; 1-1
0FB0B 06                        	.db $06 ; 3-1
0FB0C 06                        	.db $06 ; 3-1
0FB0D 0A                        	.db $0A ; 4-2
0FB0E 0A                        	.db $0A ; 4-2
0FB0F 0B                        	.db $0B ; 4-3
0FB10 0D                        	.db $0D ; 5-2
0FB11 0E                        	.db $0E ; 5-3
0FB12 11                        	.db $11 ; 6-3
0FB13 11                        	.db $11 ; 6-3
0FB14 12                        	.db $12 ; 7-1
0FB15 12                        	.db $12 ; 7-1
0FB16 12                        	.db $12 ; 7-1
0FB17 12                        	.db $12 ; 7-1
0FB18 13                        	.db $13 ; 7-2
0FB19                           
0FB19                           DefaultCHRAnimationSpeed_Area:
0FB19 01                        	.db $01 ; 1-1 upward climb
0FB1A 05                        	.db $05 ; 1-1 birdo
0FB1B 01                        	.db $01 ; 3-1 main part
0FB1C 03                        	.db $03 ; 3-1 sky part
0FB1D 01                        	.db $01 ; 4-2 sky ice
0FB1E 02                        	.db $02 ; 4-2 whales
0FB1F 04                        	.db $04 ; 4-3 tower tops
0FB20 02                        	.db $02 ; 5-2 upward climb
0FB21 04                        	.db $04 ; 5-3 miniboss birdo
0FB22 03                        	.db $03 ; 6-3 upward climb
0FB23 04                        	.db $04 ; 6-3 sky pyramid
0FB24 00                        	.db $00 ; 7-1 beginning area
0FB25 01                        	.db $01 ; 7-1 albatoss area
0FB26 02                        	.db $02 ; 7-1 cloud maze
0FB27 03                        	.db $03 ; 7-1 upward climb
0FB28 00                        	.db $00 ; 7-2 entrance
0FB29                           
0FB29                           BackgroundCHRAnimationSpeedByWorld:
0FB29 07                        	.db $07 ; World 1
0FB2A 07                        	.db $07 ; World 2
0FB2B 07                        	.db $07 ; World 3
0FB2C 07                        	.db $07 ; World 4
0FB2D 09                        	.db $09 ; World 5
0FB2E 07                        	.db $07 ; World 6
0FB2F 05                        	.db $05 ; World 7
0FB30 0B                        	.db $0B ; Default
0FB31                           
0FB31                           
0FB31                           ;
0FB31                           ; Increments the frame of the CHR animation using the world/area speed
0FB31                           ;
0FB31                           AnimateCHRRoutine:
0FB31 CE FD 06                  	DEC BackgroundCHR2Timer
0FB34 10 00                     	BPL AnimateCHRRoutine_Exit
0FB36                           
0FB36 A2 07                     	LDX #$07 ; default index for animation speed table
0FB38                           
0FB38                           	; Certain level/area combinations use a fixed animation speed.
0FB38                           	; It seems to be used in areas that prominently feature cloud platforms.
0FB38                           	; This loop performs the lookup to see if that should happen.
0FB38 A0 0F                     	LDY #(DefaultCHRAnimationSpeed_Area - DefaultCHRAnimationSpeed_Level - 1)
0FB3A                           AnimateCHRRoutine_DefaultSpeedLoop:
0FB3A AD E7 04                  	LDA CurrentLevel_Init
0FB3D D9 09 FB                  	CMP DefaultCHRAnimationSpeed_Level, Y
0FB40 D0 00                     	BNE AnimateCHRRoutine_DefaultSpeedNext
0FB42                           
0FB42 AD E8 04                  	LDA CurrentLevelArea_Init
0FB45 D9 19 FB                  	CMP DefaultCHRAnimationSpeed_Area, Y
0FB48 F0 00                     	BEQ AnimateCHRRoutine_SetSpeed
0FB4A                           
0FB4A                           AnimateCHRRoutine_DefaultSpeedNext:
0FB4A 88                        	DEY
0FB4B 10 ED                     	BPL AnimateCHRRoutine_DefaultSpeedLoop
0FB4D                           
0FB4D AE 35 06                  	LDX CurrentWorldTileset
0FB50                           
0FB50                           AnimateCHRRoutine_SetSpeed:
0FB50 BD 29 FB                  	LDA BackgroundCHRAnimationSpeedByWorld, X
0FB53 8D FD 06                  	STA BackgroundCHR2Timer
0FB56 AC F8 06                  	LDY BackgroundCHR2
0FB59 C8                        	INY
0FB5A C8                        	INY
0FB5B                           
0FB5B                           AnimatedCHRCheck:
0FB5B                           IFDEF FIX_CHR_CYCLE
0FB5B                           	CPY #CHRBank_Animated8 + 1
0FB5B                           ELSE
0FB5B                           	; Bug: This is in the original game
0FB5B                           	; The last frame of the animation is effectively skipped because
0FB5B                           	; we immediately reset to the first frame when we hit it.
0FB5B C0 26                     	CPY #CHRBank_Animated8
0FB5D                           ENDIF
0FB5D                           
0FB5D 90 00                     	BCC AnimateCHRRoutine_SetCHR
0FB5F                           
0FB5F A0 18                     	LDY #CHRBank_Animated1
0FB61                           
0FB61                           AnimateCHRRoutine_SetCHR:
0FB61 8C F8 06                  	STY BackgroundCHR2
0FB64                           
0FB64                           AnimateCHRRoutine_Exit:
0FB64 60                        	RTS
0FB65                           
0FB65                           
0FB65                           ;
0FB65                           ; Looks for an unused sprite slot
0FB65                           ;
0FB65                           ; ##### Input
0FB65                           ; - `X`: enemy slot
0FB65                           ;
0FB65                           ; ##### Output
0FB65                           ; - `X`: byte_RAM_12
0FB65                           ; - `Y`: sprite slot
0FB65                           ;
0FB65                           FindSpriteSlot:
0FB65 A2 08                     	LDX #$08
0FB67                           
0FB67                           FindSpriteSlot_Loop:
0FB67 B5 51                     	LDA EnemyState, X
0FB69 F0 00                     	BEQ FindSpriteSlot_CheckInactiveSlot
0FB6B                           
0FB6B                           FindSpriteSlot_LoopNext:
0FB6B CA                        	DEX
0FB6C 10 F9                     	BPL FindSpriteSlot_Loop
0FB6E                           
0FB6E                           FindSpriteSlot_Default:
0FB6E                           	; Check that both halves of the default sprite slot are unused
0FB6E A0 00                     	LDY #$00
0FB70 B9 00 02                  	LDA SpriteDMAArea, Y
0FB73 C9 F8                     	CMP #$F8
0FB75 D0 00                     	BNE FindSpriteSlot_FallbackExit
0FB77                           
0FB77 B9 04 02                  	LDA SpriteDMAArea + 4, Y
0FB7A C9 F8                     	CMP #$F8
0FB7C F0 00                     	BEQ FindSpriteSlot_Exit
0FB7E                           
0FB7E                           FindSpriteSlot_FallbackExit:
0FB7E                           	; If all else fails, here's $10
0FB7E A0 10                     	LDY #$10
0FB80                           
0FB80                           FindSpriteSlot_Exit:
0FB80 A6 12                     	LDX byte_RAM_12
0FB82 60                        	RTS
0FB83                           
0FB83                           ; The object slot is inactive, so check that something else hasn't claimed the
0FB83                           ; corresponding sprite slot.
0FB83                           FindSpriteSlot_CheckInactiveSlot:
0FB83                           	; Calculate the sprite slot using the flicker offset
0FB83 8A                        	TXA
0FB84 18                        	CLC
0FB85 6D 00 04                  	ADC SpriteFlickerSlot
0FB88 A8                        	TAY
0FB89 B9 34 F5                  	LDA SpriteFlickerDMAOffset, Y
0FB8C                           
0FB8C                           	; Check that both halves of the object's sprite slot are unused
0FB8C A8                        	TAY
0FB8D B9 00 02                  	LDA SpriteDMAArea, Y
0FB90 C9 F8                     	CMP #$F8
0FB92 D0 D7                     	BNE FindSpriteSlot_LoopNext
0FB94 B9 04 02                  	LDA SpriteDMAArea + 4, Y
0FB97 C9 F8                     	CMP #$F8
0FB99 D0 D0                     	BNE FindSpriteSlot_LoopNext
0FB9B F0 E3                     	BEQ FindSpriteSlot_Exit
0FB9D                           
0FB9D                           
0FB9D                           IFDEF DEBUG
0FB9D                           	.include "src/extras/debug-f.asm"
0FB9D                           ENDIF
0FB9D                           
0FB9D                           ; Unused space in the original ($FB36 - $FDFF)
0FB9D                           unusedSpace $FE00, $FF
0FB9D                           	IFDEF PRESERVE_UNUSED_SPACE
0FB9D FF FF FF FF FF FF FF FF.. 		.pad $FE00, $FF
0FE00                           	ENDIF
0FE00                           
0FE00                           IFDEF RESET_CHR_LATCH
0FE00                           CHRBank_Boss:
0FE00                           	.db CHRBank_EnemiesGrass ; Mouser
0FE00                           	.db CHRBank_EnemiesDesert ; Tryclyde
0FE00                           	.db CHRBank_EnemiesIce ; Fryguy
0FE00                           	.db CHRBank_EnemiesGrass ; Clawgrip
0FE00                           	.db CHRBank_EnemiesSky ; Wart
0FE00                           ENDIF
0FE00                           
0FE00                           CHRBank_WorldEnemies:
0FE00 0C                        	.db CHRBank_EnemiesGrass
0FE01 0D                        	.db CHRBank_EnemiesDesert
0FE02 0C                        	.db CHRBank_EnemiesGrass
0FE03 0E                        	.db CHRBank_EnemiesIce
0FE04 0C                        	.db CHRBank_EnemiesGrass
0FE05 0D                        	.db CHRBank_EnemiesDesert
0FE06 0F                        	.db CHRBank_EnemiesSky
0FE07                           
0FE07                           CHRBank_WorldBossBackground:
0FE07 10                        	.db CHRBank_BackgroundGrass
0FE08 12                        	.db CHRBank_BackgroundDesert
0FE09 10                        	.db CHRBank_BackgroundGrass
0FE0A 14                        	.db CHRBank_BackgroundIce
0FE0B 0A                        	.db CHRBank_BackgroundGrassClawgrip
0FE0C 12                        	.db CHRBank_BackgroundDesert
0FE0D 16                        	.db CHRBank_BackgroundSky
0FE0E                           
0FE0E                           CHRBank_CharacterSize:
0FE0E 00                        	.db CHRBank_Mario
0FE0F 04                        	.db CHRBank_MarioSmall
0FE10 02                        	.db CHRBank_Princess
0FE11 06                        	.db CHRBank_PrincessSmall
0FE12 03                        	.db CHRBank_Toad
0FE13 07                        	.db CHRBank_ToadSmall
0FE14 01                        	.db CHRBank_Luigi
0FE15 05                        	.db CHRBank_LuigiSmall
0FE16                           
0FE16                           
0FE16                           LoadWorldCHRBanks:
0FE16 A0 08                     	LDY #CHRBank_CommonEnemies1
0FE18 8C FA 06                  	STY SpriteCHR2
0FE1B C8                        	INY
0FE1C 8C FB 06                  	STY SpriteCHR3
0FE1F AC 35 06                  	LDY CurrentWorldTileset
0FE22 B9 00 FE                  	LDA CHRBank_WorldEnemies, Y
0FE25 8D FC 06                  	STA SpriteCHR4
0FE28 B9 07 FE                  	LDA CHRBank_WorldBossBackground, Y
0FE2B 8D F7 06                  	STA BackgroundCHR1
0FE2E A9 18                     	LDA #CHRBank_Animated1
0FE30 8D F8 06                  	STA BackgroundCHR2
0FE33                           
0FE33                           IFDEF RESET_CHR_LATCH
0FE33                           	LDY BossTileset
0FE33                           	BMI LoadCharacterCHRBanks
0FE33                           	LDA CHRBank_Boss, Y
0FE33                           	STA SpriteCHR4
0FE33                           ENDIF
0FE33                           
0FE33                           LoadCharacterCHRBanks:
0FE33 A5 8F                     	LDA CurrentCharacter
0FE35 0A                        	ASL A
0FE36 0D F6 06                  	ORA PlayerCurrentSize
0FE39 A8                        	TAY
0FE3A B9 0E FE                  	LDA CHRBank_CharacterSize, Y
0FE3D 8D F9 06                  	STA SpriteCHR1
0FE40 60                        	RTS
0FE41                           
0FE41                           IFDEF RESET_CHR_LATCH
0FE41                           CheckResetCHRLatch:
0FE41                           	LDA ResetCHRLatch
0FE41                           	BEQ CheckResetCHRLatch_Exit
0FE41                           
0FE41                           	LDA #$00
0FE41                           	STA ResetCHRLatch
0FE41                           
0FE41                           	LDY #CHRBank_CommonEnemies1
0FE41                           	STY SpriteCHR2
0FE41                           	INY
0FE41                           	STY SpriteCHR3
0FE41                           
0FE41                           	LDY CurrentWorldTileset
0FE41                           	LDA CHRBank_WorldEnemies, Y
0FE41                           	STA SpriteCHR4
0FE41                           	LDA CHRBank_WorldBossBackground, Y
0FE41                           	STA BackgroundCHR1
0FE41                           	LDA #CHRBank_Animated1
0FE41                           	STA BackgroundCHR2
0FE41                           
0FE41                           	LDY BossTileset
0FE41                           	BMI CheckResetCHRLatch_Exit
0FE41                           	LDA CHRBank_Boss, Y
0FE41                           	STA SpriteCHR4
0FE41                           
0FE41                           CheckResetCHRLatch_Exit:
0FE41                           	RTS
0FE41                           ENDIF
0FE41                           
0FE41                           
0FE41                           LoadTitleScreenCHRBanks:
0FE41 A9 28                     	LDA #CHRBank_TitleScreenBG1
0FE43 8D F7 06                  	STA BackgroundCHR1
0FE46 A9 2A                     	LDA #CHRBank_TitleScreenBG2
0FE48 8D F8 06                  	STA BackgroundCHR2
0FE4B 60                        	RTS
0FE4C                           
0FE4C                           
0FE4C                           LoadCelebrationSceneBackgroundCHR:
0FE4C A9 38                     	LDA #CHRBank_CelebrationBG1
0FE4E 8D F7 06                  	STA BackgroundCHR1
0FE51 A9 3A                     	LDA #CHRBank_CelebrationBG2
0FE53 8D F8 06                  	STA BackgroundCHR2
0FE56 60                        	RTS
0FE57                           
0FE57                           
0FE57                           LoadCharacterSelectCHRBanks:
0FE57 A9 30                     	LDA #CHRBank_CharacterSelectSprites
0FE59 8D F9 06                  	STA SpriteCHR1
0FE5C A9 2C                     	LDA #CHRBank_CharacterSelectBG1
0FE5E 8D F7 06                  	STA BackgroundCHR1
0FE61 A9 2E                     	LDA #CHRBank_CharacterSelectBG2
0FE63 8D F8 06                  	STA BackgroundCHR2
0FE66 60                        	RTS
0FE67                           
0FE67                           
0FE67                           TitleCardCHRBanks:
0FE67 40                        	.db CHRBank_TitleCardGrass
0FE68 42                        	.db CHRBank_TitleCardDesert
0FE69 40                        	.db CHRBank_TitleCardGrass
0FE6A 44                        	.db CHRBank_TitleCardIce
0FE6B 40                        	.db CHRBank_TitleCardGrass
0FE6C 42                        	.db CHRBank_TitleCardDesert
0FE6D 46                        	.db CHRBank_TitleCardSky
0FE6E                           
0FE6E                           
0FE6E                           ChangeTitleCardCHR:
0FE6E AC 35 06                  	LDY CurrentWorld
0FE71 B9 67 FE                  	LDA TitleCardCHRBanks, Y
0FE74 8D F8 06                  	STA BackgroundCHR2
0FE77 60                        	RTS
0FE78                           
0FE78                           
0FE78                           LoadBonusChanceCHRBanks:
0FE78 A9 34                     	LDA #CHRBank_ChanceBG1
0FE7A 8D F7 06                  	STA BackgroundCHR1
0FE7D A9 36                     	LDA #CHRBank_ChanceBG2
0FE7F 8D F8 06                  	STA BackgroundCHR2
0FE82 60                        	RTS
0FE83                           
0FE83                           
0FE83                           LoadMarioSleepingCHRBanks:
0FE83 A0 48                     	LDY #CHRBank_EndingSprites
0FE85 8C F9 06                  	STY SpriteCHR1
0FE88 C8                        	INY
0FE89 8C FA 06                  	STY SpriteCHR2
0FE8C A9 50                     	LDA #CHRBank_MarioSleepingBackground1
0FE8E 8D F7 06                  	STA BackgroundCHR1
0FE91 A9 52                     	LDA #CHRBank_MarioSleepingBackground1 + 2
0FE93 8D F8 06                  	STA BackgroundCHR2
0FE96 60                        	RTS
0FE97                           
0FE97                           
0FE97                           IFDEF RESPAWN_INSTEAD_OF_DEATH
0FE97                           PauseRespawn:
0FE97                           	; Check conditions where we shouldn't allow respawn
0FE97                           	LDA PlayerLock
0FE97                           	BNE PauseRespawn_Exit
0FE97                           	; BNE PauseRespawn_ShowPauseScreen
0FE97                           
0FE97                           PauseRespawn_KillPlayer:
0FE97                           	JSR KillPlayer
0FE97                           PauseRespawn_Exit:
0FE97                           	LDA IsHorizontalLevel
0FE97                           	BEQ PauseRespawn_Vertical
0FE97                           	JMP HorizontalLevel_CheckSubArea
0FE97                           PauseRespawn_Vertical:
0FE97                           	JMP VerticalLevel_ProcessFrame
0FE97                           
0FE97                           PauseRespawn_ShowPauseScreen:
0FE97                           	JSR PauseScreen_ExtraLife
0FE97                           	JMP SetStack100Pause
0FE97                           
0FE97                           RespawnPlayer:
0FE97                           	; Stop invincibility music
0FE97                           	LDA MusicPlaying1
0FE97                           	CMP #Music1_Invincible
0FE97                           	BNE RespawnPlayer_AfterMusic
0FE97                           	LDY CurrentMusicIndex
0FE97                           	LDA LevelMusicIndexes, Y
0FE97                           	STA MusicQueue1
0FE97                           RespawnPlayer_AfterMusic:
0FE97                           	LDA #SpriteAnimation_Standing
0FE97                           	STA PlayerAnimationFrame
0FE97                           	RTS
0FE97                           
0FE97                           
0FE97                           ResetSubAreaJarLayout:
0FE97                           	LDA #PRGBank_6_7
0FE97                           	JSR ChangeMappedPRGBank
0FE97                           
0FE97                           	JSR ClearSubAreaTileLayout
0FE97                           
0FE97                           	LDA #PRGBank_0_1
0FE97                           	JSR ChangeMappedPRGBank
0FE97                           
0FE97                           	RTS
0FE97                           
0FE97                           ENDIF
0FE97                           
0FE97                           
0FE97                           ; Unused space in the original ($FE97 - $FF4F)
0FE97                           unusedSpace $FF50, $FF
0FE97                           	IFDEF PRESERVE_UNUSED_SPACE
0FE97 FF FF FF FF FF FF FF FF.. 		.pad $FF50, $FF
0FF50                           	ENDIF
0FF50                           
0FF50                           
0FF50                           ;
0FF50                           ; Public RESET
0FF50                           ;
0FF50                           ; This code is called when the NES is reset and handles some boilerplate
0FF50                           ; initialization before starting the game loop.
0FF50                           ;
0FF50                           ; The NMI handles frame rendering.
0FF50                           ;
0FF50                           RESET:
0FF50 78                        	SEI
0FF51 D8                        	CLD
0FF52 A9 00                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background0000 | PPUCtrl_SpriteSize8x8 | PPUCtrl_Background0000 | PPUCtrl_NMIDisabled
0FF54 8D 00 20                  	STA PPUCTRL
0FF57 A2 FF                     	LDX #$FF ; Reset stack pointer
0FF59 9A                        	TXS
0FF5A                           
0FF5A                           RESET_VBlankLoop:
0FF5A                           	; Wait for first VBlank
0FF5A AD 02 20                  	LDA PPUSTATUS
0FF5D 29 80                     	AND #PPUStatus_VBlankHit
0FF5F F0 F9                     	BEQ RESET_VBlankLoop
0FF61                           
0FF61                           RESET_VBlank2Loop:
0FF61                           	; Wait for second VBlank
0FF61 AD 02 20                  	LDA PPUSTATUS
0FF64 10 FB                     	BPL RESET_VBlank2Loop
0FF66                           
0FF66                           IF INES_MAPPER == MAPPER_FME7
0FF66                           	LDA #$0C
0FF66                           	STA FME7_Command
0FF66                           	LDA #VMirror
0FF66                           	STA FME7_Parameter
0FF66                           ELSEIF INES_MAPPER == MAPPER_MMC5
0FF66                           	LDA #MMC5_VMirror
0FF66                           	STA MMC5_NametableMapping
0FF66                           	; Maintain location of the next subroutine
0FF66                           	NOP_compat
0FF66                           	NOP_compat
0FF66                           	NOP_compat
0FF66                           	NOP_compat
0FF66                           	NOP_compat
0FF66                           ELSE ;  INES_MAPPER == MAPPER_MMC3
0FF66 A9 00                     	LDA #VMirror
0FF68 8D 00 A0                  	STA MMC3_Mirroring
0FF6B A9 80                     	LDA #$80
0FF6D 8D 01 A0                  	STA MMC3_PRGRamProtect
0FF70                           ENDIF
0FF70 4C F9 E3                  	JMP StartGame
0FF73                           
0FF73                           
0FF73                           ;
0FF73                           ; Switches the current CHR banks
0FF73                           ;
0FF73                           IF INES_MAPPER == MAPPER_FME7
0FF73                           ChangeCHRBanks:
0FF73                           	JMP ChangeCHRBanks_FME7
0FF73                           
0FF73                           	; Maintain location of the next subroutine
0FF73                           	unusedSpace $FF85, $FF
0FF73                           
0FF73                           ELSEIF INES_MAPPER == MAPPER_MMC5
0FF73                           ChangeCHRBanks:
0FF73                           	JMP ChangeCHRBanks_MMC5
0FF73                           
0FF73                           	; Maintain location of the next subroutine
0FF73                           	unusedSpace $FF85, $FF
0FF73                           
0FF73                           ELSE ; INES_MAPPER == MAPPER_MMC3
0FF73                           ChangeCHRBanks:
0FF73 A0 05                     	LDY #$05
0FF75                           ChangeCHRBanks_Loop:
0FF75 98                        	TYA
0FF76 09 80                     	ORA #CHR_A12_INVERSION
0FF78 8D 00 80                  	STA MMC3_BankSelect
0FF7B B9 F7 06                  	LDA BackgroundCHR1, Y
0FF7E 8D 01 80                  	STA MMC3_BankData
0FF81 88                        	DEY
0FF82 10 F1                     	BPL ChangeCHRBanks_Loop
0FF84                           
0FF84 60                        	RTS
0FF85                           ENDIF
0FF85                           
0FF85                           
0FF85                           ;
0FF85                           ; Calling this one will save the changed bank
0FF85                           ; to RAM, so if something uses the below version
0FF85                           ; the original bank set with this can be restored.
0FF85                           ;
0FF85                           ChangeMappedPRGBank:
0FF85 8D F2 06                  	STA MMC3PRGBankTemp ; See below comment.
0FF88                           
0FF88                           ;
0FF88                           ; Any call to this subroutine switches the lower two banks together.
0FF88                           ;
0FF88                           ; For example, loading Bank 0/1:
0FF88                           ;
0FF88                           ; ```
0FF88                           ; LDA #$00
0FF88                           ; JSR ChangeMappedPRGBank
0FF88                           ; ```
0FF88                           ;
0FF88                           ; Loading Bank 2/3:
0FF88                           ;
0FF88                           ; ```
0FF88                           ; LDA #$01
0FF88                           ; JSR ChangeMappedPRGBank
0FF88                           ; ```
0FF88                           ;
0FF88                           ; Etc.
0FF88                           ;
0FF88                           ; This version changes the bank numbers without
0FF88                           ; saving the change to RAM, so the previous bank
0FF88                           ; can be recalled later (mostly for temporary switches,
0FF88                           ; like music handling and such)
0FF88                           ;
0FF88                           ChangeMappedPRGBankWithoutSaving:
0FF88 0A                        	ASL A
0FF89                           
0FF89                           IF INES_MAPPER == MAPPER_FME7
0FF89                           	; Change first bank
0FF89                           	PHA
0FF89                           	LDA #$09
0FF89                           	STA FME7_Command
0FF89                           	PLA
0FF89                           	STA FME7_Parameter
0FF89                           	ORA #$01 ; Use the bank right after this one next
0FF89                           	; Change second bank
0FF89                           	PHA
0FF89                           	LDA #$0A
0FF89                           	STA FME7_Command
0FF89                           	PLA
0FF89                           	STA FME7_Parameter
0FF89                           
0FF89                           	RTS
0FF89                           
0FF89                           ELSEIF INES_MAPPER == MAPPER_MMC5
0FF89                           	ORA #$80
0FF89                           	STA MMC5_PRGBankSwitch2
0FF89                           	ORA #$01
0FF89                           	STA MMC5_PRGBankSwitch3
0FF89                           	RTS
0FF89                           
0FF89                           	; Maintain location of the next subroutine
0FF89                           	unusedSpace $FFA0, $FF
0FF89                           
0FF89                           ELSE ; INES_MAPPER == MAPPER_MMC3
0FF89                           	; Change first bank
0FF89 48                        	PHA
0FF8A A9 86                     	LDA #CHR_A12_INVERSION | $06
0FF8C 8D 00 80                  	STA MMC3_BankSelect
0FF8F 68                        	PLA
0FF90 8D 01 80                  	STA MMC3_BankData
0FF93 09 01                     	ORA #$01 ; Use the bank right after this one next
0FF95                           	; Change second bank
0FF95 48                        	PHA
0FF96 A9 87                     	LDA #CHR_A12_INVERSION | $07
0FF98 8D 00 80                  	STA MMC3_BankSelect
0FF9B 68                        	PLA
0FF9C 8D 01 80                  	STA MMC3_BankData
0FF9F 60                        	RTS
0FFA0                           
0FFA0                           ENDIF
0FFA0                           
0FFA0                           
0FFA0                           ;
0FFA0                           ; Sets the nametable mirroring by writing `$A000`.
0FFA0                           ;
0FFA0                           ; ##### Input
0FFA0                           ; - `A`: `$00` =  vertical, `$01` = horizontal
0FFA0                           ;
0FFA0                           ChangeNametableMirroring:
0FFA0                           IF INES_MAPPER == MAPPER_FME7
0FFA0                           	PHA
0FFA0                           	LDA #$0C
0FFA0                           	STA FME7_Command
0FFA0                           	PLA
0FFA0                           	STA FME7_Parameter
0FFA0                           ELSEIF INES_MAPPER == MAPPER_MMC5
0FFA0                           	STA MMC5_NametableMapping
0FFA0                           ELSE
0FFA0 8D 00 A0                  	STA MMC3_Mirroring
0FFA3                           ENDIF
0FFA3 60                        	RTS
0FFA4                           
0FFA4                           ; Unused space in the original ($FFA4 - $FFEA)
0FFA4                           unusedSpace $FFEB, $FF
0FFA4                           	IFDEF PRESERVE_UNUSED_SPACE
0FFA4 FF FF FF FF FF FF FF FF.. 		.pad $FFEB, $FF
0FFEB                           	ENDIF
0FFEB                           
0FFEB                           ; Technically you can delete the stuff from here to the vector table as well,
0FFEB                           ; but because it looks slightly less like unused space it isn't being removed.
0FFEB                           
0FFEB                           IFDEF PRESERVE_UNUSED_SPACE
0FFEB                           ; Not used; leftover part of FamicomBox cart title?
0FFEB                           UnusedTextZELDA:
0FFEB 5A 45 4C 44 41            	.db 'ZELDA'
0FFF0                           ENDIF
0FFF0                           
0FFF0                           ; Note that this is NOT CODE.
0FFF0                           ; If the NES actually hits a BRK, the game will probably just explode.
0FFF0                           ; If you wanted, you could write some sort of crash handler though.
0FFF0                           IRQ:
0FFF0                           IFDEF PRESERVE_UNUSED_SPACE
0FFF0 DF                        	.db $DF
0FFF1 E6                        	.db $E6
0FFF2 00                        	.db $00
0FFF3 00                        	.db $00
0FFF4 38                        	.db $38
0FFF5 04                        	.db $04
0FFF6 01                        	.db $01
0FFF7 04                        	.db $04
0FFF8 01                        	.db $01
0FFF9 BE                        	.db $BE
0FFFA                           ENDIF
0FFFA                           
0FFFA                           ;
0FFFA                           ; Vectors for the NES CPU. These must ALWAYS be at $FFFA!
0FFFA                           ;
0FFFA                           ; **NMI** is the code that runs each frame during the VBlank.
0FFFA                           ;
0FFFA                           ; **RESET** is code that runs after the console starts or resets.
0FFFA                           ;
0FFFA                           ; **IRQ** is not used, but would handle things like `BRK` or scanline counter
0FFFA                           ; interrupts. Note that the MMC3 scanline counter is clocked incorrectly due to
0FFFA                           ; the use of both sides of the nametable for sprites as well as using the right
0FFFA                           ; rather than left nametable for backgrounds, which effectively prevents using
0FFFA                           ; the scanline counter for things like precise screen splits.
0FFFA                           ;
0FFFA                           .pad $FFFA, $FF
0FFFA                           
0FFFA                           NESVectorTables:
0FFFA 8E EB                     	.dw NMI
0FFFC                           IF INES_MAPPER == MAPPER_FME7
0FFFC                           	.dw RESET_FME7
0FFFC                           ELSEIF INES_MAPPER == MAPPER_MMC5
0FFFC                           	.dw RESET_MMC5
0FFFC                           ELSE ; INES_MAPPER == MAPPER_MMC3
0FFFC 50 FF                     	.dw RESET
0FFFE                           ENDIF
0FFFE F0 FF                     	.dw IRQ
10000                           
10000                           
10000                           ; -----------------------------------------
10000                           ; include CHR-ROM
10000                           IFNDEF SM_USA
10000 00 00 00 00 00 07 08 08.. .incbin "smb2.chr"
30000                           ELSE
30000                           .incbin "smusa.chr"
30000                           ENDIF
30000                           
30000                           ; ----------------------------------------
30000                           ; extra CHR-ROM pages
30000                           IFDEF EXPAND_CHR
30000                           .dsb (16 * $2000), $00
30000                           ENDIF
